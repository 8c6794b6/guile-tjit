(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec ((#{and-map*\ 20}#
           (lambda (#{f\ 192}# #{first\ 193}# . #{rest\ 194}#)
             (let ((#{t\ 200}# (null? #{first\ 193}#)))
               (if #{t\ 200}#
                 #{t\ 200}#
                 (if (null? #{rest\ 194}#)
                   (letrec ((#{andmap\ 204}#
                              (lambda (#{first\ 205}#)
                                (let ((#{x\ 208}# (car #{first\ 205}#))
                                      (#{first\ 209}# (cdr #{first\ 205}#)))
                                  (if (null? #{first\ 209}#)
                                    (#{f\ 192}# #{x\ 208}#)
                                    (if (#{f\ 192}# #{x\ 208}#)
                                      (#{andmap\ 204}# #{first\ 209}#)
                                      #f))))))
                     (#{andmap\ 204}# #{first\ 193}#))
                   (letrec ((#{andmap\ 215}#
                              (lambda (#{first\ 216}# #{rest\ 217}#)
                                (let ((#{x\ 222}# (car #{first\ 216}#))
                                      (#{xr\ 223}# (map car #{rest\ 217}#))
                                      (#{first\ 224}# (cdr #{first\ 216}#))
                                      (#{rest\ 225}# (map cdr #{rest\ 217}#)))
                                  (if (null? #{first\ 224}#)
                                    (apply #{f\ 192}#
                                           (cons #{x\ 222}# #{xr\ 223}#))
                                    (if (apply #{f\ 192}#
                                               (cons #{x\ 222}# #{xr\ 223}#))
                                      (#{andmap\ 215}#
                                        #{first\ 224}#
                                        #{rest\ 225}#)
                                      #f))))))
                     (#{andmap\ 215}# #{first\ 193}# #{rest\ 194}#))))))))
  (letrec ((#{lambda-var-list\ 487}#
             (lambda (#{vars\ 702}#)
               (letrec ((#{lvl\ 708}#
                          (lambda (#{vars\ 709}# #{ls\ 710}# #{w\ 711}#)
                            (if (pair? #{vars\ 709}#)
                              (#{lvl\ 708}#
                                (cdr #{vars\ 709}#)
                                (cons (#{wrap\ 441}#
                                        (car #{vars\ 709}#)
                                        #{w\ 711}#
                                        #f)
                                      #{ls\ 710}#)
                                #{w\ 711}#)
                              (if (#{id?\ 372}# #{vars\ 709}#)
                                (cons (#{wrap\ 441}#
                                        #{vars\ 709}#
                                        #{w\ 711}#
                                        #f)
                                      #{ls\ 710}#)
                                (if (null? #{vars\ 709}#)
                                  #{ls\ 710}#
                                  (if (#{syntax-object?\ 336}# #{vars\ 709}#)
                                    (#{lvl\ 708}#
                                      (#{syntax-object-expression\ 338}#
                                        #{vars\ 709}#)
                                      #{ls\ 710}#
                                      (#{join-wraps\ 423}#
                                        #{w\ 711}#
                                        (#{syntax-object-wrap\ 340}#
                                          #{vars\ 709}#)))
                                    (cons #{vars\ 709}# #{ls\ 710}#))))))))
                 (#{lvl\ 708}#
                   #{vars\ 702}#
                   '()
                   '(())))))
           (#{gen-var\ 485}#
             (lambda (#{id\ 722}#)
               (let ((#{id\ 725}#
                       (if (#{syntax-object?\ 336}# #{id\ 722}#)
                         (#{syntax-object-expression\ 338}# #{id\ 722}#)
                         #{id\ 722}#)))
                 (gensym
                   (string-append (symbol->string #{id\ 725}#) " ")))))
           (#{strip\ 483}#
             (lambda (#{x\ 727}# #{w\ 728}#)
               (if (memq 'top
                         (#{wrap-marks\ 379}# #{w\ 728}#))
                 #{x\ 727}#
                 (letrec ((#{f\ 734}# (lambda (#{x\ 735}#)
                                        (if (#{syntax-object?\ 336}#
                                              #{x\ 735}#)
                                          (#{strip\ 483}#
                                            (#{syntax-object-expression\ 338}#
                                              #{x\ 735}#)
                                            (#{syntax-object-wrap\ 340}#
                                              #{x\ 735}#))
                                          (if (pair? #{x\ 735}#)
                                            (let ((#{a\ 742}# (#{f\ 734}# (car #{x\ 735}#)))
                                                  (#{d\ 743}# (#{f\ 734}# (cdr #{x\ 735}#))))
                                              (if (if (eq? #{a\ 742}#
                                                           (car #{x\ 735}#))
                                                    (eq? #{d\ 743}#
                                                         (cdr #{x\ 735}#))
                                                    #f)
                                                #{x\ 735}#
                                                (cons #{a\ 742}# #{d\ 743}#)))
                                            (if (vector? #{x\ 735}#)
                                              (let ((#{old\ 749}#
                                                      (vector->list
                                                        #{x\ 735}#)))
                                                (let ((#{new\ 751}#
                                                        (map #{f\ 734}#
                                                             #{old\ 749}#)))
                                                  (if (#{and-map*\ 20}#
                                                        eq?
                                                        #{old\ 749}#
                                                        #{new\ 751}#)
                                                    #{x\ 735}#
                                                    (list->vector
                                                      #{new\ 751}#))))
                                              #{x\ 735}#))))))
                   (#{f\ 734}# #{x\ 727}#)))))
           (#{chi-lambda-case\ 481}#
             (lambda (#{e\ 753}#
                      #{r\ 754}#
                      #{w\ 755}#
                      #{s\ 756}#
                      #{mod\ 757}#
                      #{get-formals\ 758}#
                      #{clauses\ 759}#)
               (letrec ((#{expand-body\ 774}#
                          (lambda (#{req\ 775}#
                                   #{opt\ 776}#
                                   #{rest\ 777}#
                                   #{kw\ 778}#
                                   #{body\ 779}#
                                   #{vars\ 780}#
                                   #{r*\ 781}#
                                   #{w*\ 782}#
                                   #{inits\ 783}#
                                   #{meta\ 784}#)
                            ((lambda (#{tmp\ 795}#)
                               ((lambda (#{tmp\ 796}#)
                                  (if (if #{tmp\ 796}#
                                        (apply (lambda (#{docstring\ 800}#
                                                        #{e1\ 801}#
                                                        #{e2\ 802}#)
                                                 (string?
                                                   (syntax->datum
                                                     #{docstring\ 800}#)))
                                               #{tmp\ 796}#)
                                        #f)
                                    (apply (lambda (#{docstring\ 806}#
                                                    #{e1\ 807}#
                                                    #{e2\ 808}#)
                                             (#{expand-body\ 774}#
                                               #{req\ 775}#
                                               #{opt\ 776}#
                                               #{rest\ 777}#
                                               #{kw\ 778}#
                                               (cons #{e1\ 807}# #{e2\ 808}#)
                                               #{vars\ 780}#
                                               #{r*\ 781}#
                                               #{w*\ 782}#
                                               #{inits\ 783}#
                                               (append
                                                 #{meta\ 784}#
                                                 (list (cons 'documentation
                                                             (syntax->datum
                                                               #{docstring\ 806}#))))))
                                           #{tmp\ 796}#)
                                    ((lambda (#{tmp\ 811}#)
                                       (if #{tmp\ 811}#
                                         (apply (lambda (#{k\ 816}#
                                                         #{v\ 817}#
                                                         #{e1\ 818}#
                                                         #{e2\ 819}#)
                                                  (#{expand-body\ 774}#
                                                    #{req\ 775}#
                                                    #{opt\ 776}#
                                                    #{rest\ 777}#
                                                    #{kw\ 778}#
                                                    (cons #{e1\ 818}#
                                                          #{e2\ 819}#)
                                                    #{vars\ 780}#
                                                    #{r*\ 781}#
                                                    #{w*\ 782}#
                                                    #{inits\ 783}#
                                                    (append
                                                      #{meta\ 784}#
                                                      (syntax->datum
                                                        (map cons
                                                             #{k\ 816}#
                                                             #{v\ 817}#)))))
                                                #{tmp\ 811}#)
                                         ((lambda (#{tmp\ 823}#)
                                            (if #{tmp\ 823}#
                                              (apply (lambda (#{e1\ 826}#
                                                              #{e2\ 827}#)
                                                       (values
                                                         #{meta\ 784}#
                                                         #{req\ 775}#
                                                         #{opt\ 776}#
                                                         #{rest\ 777}#
                                                         #{kw\ 778}#
                                                         #{inits\ 783}#
                                                         #{vars\ 780}#
                                                         (#{chi-body\ 465}#
                                                           (cons #{e1\ 826}#
                                                                 #{e2\ 827}#)
                                                           (#{source-wrap\ 443}#
                                                             #{e\ 753}#
                                                             #{w\ 755}#
                                                             #{s\ 756}#
                                                             #{mod\ 757}#)
                                                           #{r*\ 781}#
                                                           #{w*\ 782}#
                                                           #{mod\ 757}#)))
                                                     #{tmp\ 823}#)
                                              (syntax-violation
                                                #f
                                                "source expression failed to match any pattern"
                                                #{tmp\ 795}#)))
                                          ($sc-dispatch
                                            #{tmp\ 795}#
                                            '(any . each-any)))))
                                     ($sc-dispatch
                                       #{tmp\ 795}#
                                       '(#(vector #(each (any . any)))
                                         any
                                         .
                                         each-any)))))
                                ($sc-dispatch
                                  #{tmp\ 795}#
                                  '(any any . each-any))))
                             #{body\ 779}#)))
                        (#{expand-kw\ 772}#
                          (lambda (#{req\ 829}#
                                   #{opt\ 830}#
                                   #{rest\ 831}#
                                   #{kw\ 832}#
                                   #{body\ 833}#
                                   #{vars\ 834}#
                                   #{r*\ 835}#
                                   #{w*\ 836}#
                                   #{aok\ 837}#
                                   #{out\ 838}#
                                   #{inits\ 839}#)
                            (if (pair? #{kw\ 832}#)
                              ((lambda (#{tmp\ 853}#)
                                 ((lambda (#{tmp\ 854}#)
                                    (if #{tmp\ 854}#
                                      (apply (lambda (#{k\ 858}#
                                                      #{id\ 859}#
                                                      #{i\ 860}#)
                                               (let ((#{v\ 863}# (#{gen-var\ 485}#
                                                                   #{id\ 859}#)))
                                                 (let ((#{l\ 865}# (#{gen-labels\ 390}#
                                                                     (list #{v\ 863}#))))
                                                   (let ((#{r**\ 867}#
                                                           (#{extend-var-env\ 362}#
                                                             #{l\ 865}#
                                                             (list #{v\ 863}#)
                                                             #{r*\ 835}#)))
                                                     (let ((#{w**\ 869}#
                                                             (#{make-binding-wrap\ 419}#
                                                               (list #{id\ 859}#)
                                                               #{l\ 865}#
                                                               #{w*\ 836}#)))
                                                       (#{expand-kw\ 772}#
                                                         #{req\ 829}#
                                                         #{opt\ 830}#
                                                         #{rest\ 831}#
                                                         (cdr #{kw\ 832}#)
                                                         #{body\ 833}#
                                                         (cons #{v\ 863}#
                                                               #{vars\ 834}#)
                                                         #{r**\ 867}#
                                                         #{w**\ 869}#
                                                         #{aok\ 837}#
                                                         (cons (list (syntax->datum
                                                                       #{k\ 858}#)
                                                                     (syntax->datum
                                                                       #{id\ 859}#)
                                                                     #{v\ 863}#)
                                                               #{out\ 838}#)
                                                         (cons (#{chi\ 457}#
                                                                 #{i\ 860}#
                                                                 #{r*\ 835}#
                                                                 #{w*\ 836}#
                                                                 #{mod\ 757}#)
                                                               #{inits\ 839}#)))))))
                                             #{tmp\ 854}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 853}#)))
                                  ($sc-dispatch
                                    #{tmp\ 853}#
                                    '(any any any))))
                               (car #{kw\ 832}#))
                              (#{expand-body\ 774}#
                                #{req\ 829}#
                                #{opt\ 830}#
                                #{rest\ 831}#
                                (if (let ((#{t\ 873}# #{aok\ 837}#))
                                      (if #{t\ 873}#
                                        #{t\ 873}#
                                        (pair? #{out\ 838}#)))
                                  (cons #{aok\ 837}# (reverse #{out\ 838}#))
                                  #f)
                                #{body\ 833}#
                                (reverse #{vars\ 834}#)
                                #{r*\ 835}#
                                #{w*\ 836}#
                                (reverse #{inits\ 839}#)
                                '()))))
                        (#{expand-opt\ 770}#
                          (lambda (#{req\ 875}#
                                   #{opt\ 876}#
                                   #{rest\ 877}#
                                   #{kw\ 878}#
                                   #{body\ 879}#
                                   #{vars\ 880}#
                                   #{r*\ 881}#
                                   #{w*\ 882}#
                                   #{out\ 883}#
                                   #{inits\ 884}#)
                            (if (pair? #{opt\ 876}#)
                              ((lambda (#{tmp\ 897}#)
                                 ((lambda (#{tmp\ 898}#)
                                    (if #{tmp\ 898}#
                                      (apply (lambda (#{id\ 901}# #{i\ 902}#)
                                               (let ((#{v\ 905}# (#{gen-var\ 485}#
                                                                   #{id\ 901}#)))
                                                 (let ((#{l\ 907}# (#{gen-labels\ 390}#
                                                                     (list #{v\ 905}#))))
                                                   (let ((#{r**\ 909}#
                                                           (#{extend-var-env\ 362}#
                                                             #{l\ 907}#
                                                             (list #{v\ 905}#)
                                                             #{r*\ 881}#)))
                                                     (let ((#{w**\ 911}#
                                                             (#{make-binding-wrap\ 419}#
                                                               (list #{id\ 901}#)
                                                               #{l\ 907}#
                                                               #{w*\ 882}#)))
                                                       (#{expand-opt\ 770}#
                                                         #{req\ 875}#
                                                         (cdr #{opt\ 876}#)
                                                         #{rest\ 877}#
                                                         #{kw\ 878}#
                                                         #{body\ 879}#
                                                         (cons #{v\ 905}#
                                                               #{vars\ 880}#)
                                                         #{r**\ 909}#
                                                         #{w**\ 911}#
                                                         (cons (syntax->datum
                                                                 #{id\ 901}#)
                                                               #{out\ 883}#)
                                                         (cons (#{chi\ 457}#
                                                                 #{i\ 902}#
                                                                 #{r*\ 881}#
                                                                 #{w*\ 882}#
                                                                 #{mod\ 757}#)
                                                               #{inits\ 884}#)))))))
                                             #{tmp\ 898}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 897}#)))
                                  ($sc-dispatch
                                    #{tmp\ 897}#
                                    '(any any))))
                               (car #{opt\ 876}#))
                              (if #{rest\ 877}#
                                (let ((#{v\ 916}# (#{gen-var\ 485}#
                                                    #{rest\ 877}#)))
                                  (let ((#{l\ 918}# (#{gen-labels\ 390}#
                                                      (list #{v\ 916}#))))
                                    (let ((#{r*\ 920}#
                                            (#{extend-var-env\ 362}#
                                              #{l\ 918}#
                                              (list #{v\ 916}#)
                                              #{r*\ 881}#)))
                                      (let ((#{w*\ 922}#
                                              (#{make-binding-wrap\ 419}#
                                                (list #{rest\ 877}#)
                                                #{l\ 918}#
                                                #{w*\ 882}#)))
                                        (#{expand-kw\ 772}#
                                          #{req\ 875}#
                                          (if (pair? #{out\ 883}#)
                                            (reverse #{out\ 883}#)
                                            #f)
                                          (syntax->datum #{rest\ 877}#)
                                          (if (pair? #{kw\ 878}#)
                                            (cdr #{kw\ 878}#)
                                            #{kw\ 878}#)
                                          #{body\ 879}#
                                          (cons #{v\ 916}# #{vars\ 880}#)
                                          #{r*\ 920}#
                                          #{w*\ 922}#
                                          (if (pair? #{kw\ 878}#)
                                            (car #{kw\ 878}#)
                                            #f)
                                          '()
                                          #{inits\ 884}#)))))
                                (#{expand-kw\ 772}#
                                  #{req\ 875}#
                                  (if (pair? #{out\ 883}#)
                                    (reverse #{out\ 883}#)
                                    #f)
                                  #f
                                  (if (pair? #{kw\ 878}#)
                                    (cdr #{kw\ 878}#)
                                    #{kw\ 878}#)
                                  #{body\ 879}#
                                  #{vars\ 880}#
                                  #{r*\ 881}#
                                  #{w*\ 882}#
                                  (if (pair? #{kw\ 878}#) (car #{kw\ 878}#) #f)
                                  '()
                                  #{inits\ 884}#)))))
                        (#{expand-req\ 768}#
                          (lambda (#{req\ 924}#
                                   #{opt\ 925}#
                                   #{rest\ 926}#
                                   #{kw\ 927}#
                                   #{body\ 928}#)
                            (let ((#{vars\ 936}#
                                    (map #{gen-var\ 485}# #{req\ 924}#))
                                  (#{labels\ 937}#
                                    (#{gen-labels\ 390}# #{req\ 924}#)))
                              (let ((#{r*\ 940}#
                                      (#{extend-var-env\ 362}#
                                        #{labels\ 937}#
                                        #{vars\ 936}#
                                        #{r\ 754}#))
                                    (#{w*\ 941}#
                                      (#{make-binding-wrap\ 419}#
                                        #{req\ 924}#
                                        #{labels\ 937}#
                                        #{w\ 755}#)))
                                (#{expand-opt\ 770}#
                                  (map syntax->datum #{req\ 924}#)
                                  #{opt\ 925}#
                                  #{rest\ 926}#
                                  #{kw\ 927}#
                                  #{body\ 928}#
                                  (reverse #{vars\ 936}#)
                                  #{r*\ 940}#
                                  #{w*\ 941}#
                                  '()
                                  '()))))))
                 ((lambda (#{tmp\ 942}#)
                    ((lambda (#{tmp\ 943}#)
                       (if #{tmp\ 943}#
                         (apply (lambda () (values (quote ()) #f))
                                #{tmp\ 943}#)
                         ((lambda (#{tmp\ 944}#)
                            (if #{tmp\ 944}#
                              (apply (lambda (#{args\ 951}#
                                              #{e1\ 952}#
                                              #{e2\ 953}#
                                              #{args*\ 954}#
                                              #{e1*\ 955}#
                                              #{e2*\ 956}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{get-formals\ 758}#
                                             #{args\ 951}#))
                                         (lambda (#{req\ 957}#
                                                  #{opt\ 958}#
                                                  #{rest\ 959}#
                                                  #{kw\ 960}#)
                                           (call-with-values
                                             (lambda ()
                                               (#{expand-req\ 768}#
                                                 #{req\ 957}#
                                                 #{opt\ 958}#
                                                 #{rest\ 959}#
                                                 #{kw\ 960}#
                                                 (cons #{e1\ 952}#
                                                       #{e2\ 953}#)))
                                             (lambda (#{meta\ 966}#
                                                      #{req\ 967}#
                                                      #{opt\ 968}#
                                                      #{rest\ 969}#
                                                      #{kw\ 970}#
                                                      #{inits\ 971}#
                                                      #{vars\ 972}#
                                                      #{body\ 973}#)
                                               (call-with-values
                                                 (lambda ()
                                                   (#{chi-lambda-case\ 481}#
                                                     #{e\ 753}#
                                                     #{r\ 754}#
                                                     #{w\ 755}#
                                                     #{s\ 756}#
                                                     #{mod\ 757}#
                                                     #{get-formals\ 758}#
                                                     (map (lambda (#{tmp\ 984}#
                                                                   #{tmp\ 983}#
                                                                   #{tmp\ 982}#)
                                                            (cons #{tmp\ 982}#
                                                                  (cons #{tmp\ 983}#
                                                                        #{tmp\ 984}#)))
                                                          #{e2*\ 956}#
                                                          #{e1*\ 955}#
                                                          #{args*\ 954}#)))
                                                 (lambda (#{meta*\ 986}#
                                                          #{else*\ 987}#)
                                                   (values
                                                     (append
                                                       #{meta\ 966}#
                                                       #{meta*\ 986}#)
                                                     (#{build-lambda-case\ 318}#
                                                       #{s\ 756}#
                                                       #{req\ 967}#
                                                       #{opt\ 968}#
                                                       #{rest\ 969}#
                                                       #{kw\ 970}#
                                                       #{inits\ 971}#
                                                       #{vars\ 972}#
                                                       #{body\ 973}#
                                                       #{else*\ 987}#)))))))))
                                     #{tmp\ 944}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 942}#)))
                          ($sc-dispatch
                            #{tmp\ 942}#
                            '((any any . each-any)
                              .
                              #(each (any any . each-any)))))))
                     ($sc-dispatch #{tmp\ 942}# (quote ()))))
                  #{clauses\ 759}#))))
           (#{lambda*-formals\ 479}#
             (lambda (#{orig-args\ 990}#)
               (letrec ((#{check\ 1001}#
                          (lambda (#{req\ 1002}#
                                   #{opt\ 1003}#
                                   #{rest\ 1004}#
                                   #{kw\ 1005}#)
                            (if (#{distinct-bound-ids?\ 437}#
                                  (append
                                    #{req\ 1002}#
                                    (map car #{opt\ 1003}#)
                                    (if #{rest\ 1004}#
                                      (list #{rest\ 1004}#)
                                      '())
                                    (if (pair? #{kw\ 1005}#)
                                      (map cadr (cdr #{kw\ 1005}#))
                                      '())))
                              (values
                                #{req\ 1002}#
                                #{opt\ 1003}#
                                #{rest\ 1004}#
                                #{kw\ 1005}#)
                              (syntax-violation
                                'lambda*
                                "duplicate identifier in argument list"
                                #{orig-args\ 990}#))))
                        (#{rest\ 999}#
                          (lambda (#{args\ 1013}#
                                   #{req\ 1014}#
                                   #{opt\ 1015}#
                                   #{kw\ 1016}#)
                            ((lambda (#{tmp\ 1021}#)
                               ((lambda (#{tmp\ 1022}#)
                                  (if (if #{tmp\ 1022}#
                                        (apply (lambda (#{r\ 1024}#)
                                                 (#{id?\ 372}# #{r\ 1024}#))
                                               #{tmp\ 1022}#)
                                        #f)
                                    (apply (lambda (#{r\ 1026}#)
                                             (#{check\ 1001}#
                                               #{req\ 1014}#
                                               #{opt\ 1015}#
                                               #{r\ 1026}#
                                               #{kw\ 1016}#))
                                           #{tmp\ 1022}#)
                                    ((lambda (#{else\ 1028}#)
                                       (syntax-violation
                                         'lambda*
                                         "invalid rest argument"
                                         #{orig-args\ 990}#
                                         #{args\ 1013}#))
                                     #{tmp\ 1021}#)))
                                (list #{tmp\ 1021}#)))
                             #{args\ 1013}#)))
                        (#{key\ 997}#
                          (lambda (#{args\ 1029}#
                                   #{req\ 1030}#
                                   #{opt\ 1031}#
                                   #{rkey\ 1032}#)
                            ((lambda (#{tmp\ 1037}#)
                               ((lambda (#{tmp\ 1038}#)
                                  (if #{tmp\ 1038}#
                                    (apply (lambda ()
                                             (#{check\ 1001}#
                                               #{req\ 1030}#
                                               #{opt\ 1031}#
                                               #f
                                               (cons #f
                                                     (reverse
                                                       #{rkey\ 1032}#))))
                                           #{tmp\ 1038}#)
                                    ((lambda (#{tmp\ 1039}#)
                                       (if (if #{tmp\ 1039}#
                                             (apply (lambda (#{a\ 1042}#
                                                             #{b\ 1043}#)
                                                      (#{id?\ 372}#
                                                        #{a\ 1042}#))
                                                    #{tmp\ 1039}#)
                                             #f)
                                         (apply (lambda (#{a\ 1046}#
                                                         #{b\ 1047}#)
                                                  ((lambda (#{tmp\ 1049}#)
                                                     ((lambda (#{k\ 1051}#)
                                                        (#{key\ 997}#
                                                          #{b\ 1047}#
                                                          #{req\ 1030}#
                                                          #{opt\ 1031}#
                                                          (cons (cons #{k\ 1051}#
                                                                      (cons #{a\ 1046}#
                                                                            '(#(syntax-object
                                                                                #f
                                                                                ((top)
                                                                                 #(ribcage
                                                                                   #(k)
                                                                                   #((top))
                                                                                   #("i1050"))
                                                                                 #(ribcage
                                                                                   #(a
                                                                                     b)
                                                                                   #((top)
                                                                                     (top))
                                                                                   #("i1044"
                                                                                     "i1045"))
                                                                                 #(ribcage
                                                                                   ()
                                                                                   ()
                                                                                   ())
                                                                                 #(ribcage
                                                                                   #(args
                                                                                     req
                                                                                     opt
                                                                                     rkey)
                                                                                   #((top)
                                                                                     (top)
                                                                                     (top)
                                                                                     (top))
                                                                                   #("i1033"
                                                                                     "i1034"
                                                                                     "i1035"
                                                                                     "i1036"))
                                                                                 #(ribcage
                                                                                   (check rest
                                                                                          key
                                                                                          opt
                                                                                          req)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i1000"
                                                                                    "i998"
                                                                                    "i996"
                                                                                    "i994"
                                                                                    "i992"))
                                                                                 #(ribcage
                                                                                   #(orig-args)
                                                                                   #((top))
                                                                                   #("i991"))
                                                                                 #(ribcage
                                                                                   (lambda-var-list
                                                                                     gen-var
                                                                                     strip
                                                                                     chi-lambda-case
                                                                                     lambda*-formals
                                                                                     chi-simple-lambda
                                                                                     lambda-formals
                                                                                     ellipsis?
                                                                                     chi-void
                                                                                     eval-local-transformer
                                                                                     chi-local-syntax
                                                                                     chi-body
                                                                                     chi-macro
                                                                                     chi-application
                                                                                     chi-expr
                                                                                     chi
                                                                                     chi-top
                                                                                     syntax-type
                                                                                     chi-when-list
                                                                                     chi-install-global
                                                                                     chi-top-sequence
                                                                                     chi-sequence
                                                                                     source-wrap
                                                                                     wrap
                                                                                     bound-id-member?
                                                                                     distinct-bound-ids?
                                                                                     valid-bound-ids?
                                                                                     bound-id=?
                                                                                     free-id=?
                                                                                     id-var-name
                                                                                     same-marks?
                                                                                     join-marks
                                                                                     join-wraps
                                                                                     smart-append
                                                                                     make-binding-wrap
                                                                                     extend-ribcage!
                                                                                     make-empty-ribcage
                                                                                     new-mark
                                                                                     anti-mark
                                                                                     the-anti-mark
                                                                                     top-marked?
                                                                                     top-wrap
                                                                                     empty-wrap
                                                                                     set-ribcage-labels!
                                                                                     set-ribcage-marks!
                                                                                     set-ribcage-symnames!
                                                                                     ribcage-labels
                                                                                     ribcage-marks
                                                                                     ribcage-symnames
                                                                                     ribcage?
                                                                                     make-ribcage
                                                                                     gen-labels
                                                                                     gen-label
                                                                                     make-rename
                                                                                     rename-marks
                                                                                     rename-new
                                                                                     rename-old
                                                                                     subst-rename?
                                                                                     wrap-subst
                                                                                     wrap-marks
                                                                                     make-wrap
                                                                                     id-sym-name&marks
                                                                                     id-sym-name
                                                                                     id?
                                                                                     nonsymbol-id?
                                                                                     global-extend
                                                                                     lookup
                                                                                     macros-only-env
                                                                                     extend-var-env
                                                                                     extend-env
                                                                                     null-env
                                                                                     binding-value
                                                                                     binding-type
                                                                                     make-binding
                                                                                     arg-check
                                                                                     source-annotation
                                                                                     no-source
                                                                                     set-syntax-object-module!
                                                                                     set-syntax-object-wrap!
                                                                                     set-syntax-object-expression!
                                                                                     syntax-object-module
                                                                                     syntax-object-wrap
                                                                                     syntax-object-expression
                                                                                     syntax-object?
                                                                                     make-syntax-object
                                                                                     build-lexical-var
                                                                                     build-letrec
                                                                                     build-named-let
                                                                                     build-let
                                                                                     build-sequence
                                                                                     build-data
                                                                                     build-primref
                                                                                     build-lambda-case
                                                                                     build-case-lambda
                                                                                     build-simple-lambda
                                                                                     build-global-definition
                                                                                     maybe-name-value!
                                                                                     build-global-assignment
                                                                                     build-global-reference
                                                                                     analyze-variable
                                                                                     build-lexical-assignment
                                                                                     build-lexical-reference
                                                                                     build-dynlet
                                                                                     build-conditional
                                                                                     build-application
                                                                                     build-void
                                                                                     decorate-source
                                                                                     get-global-definition-hook
                                                                                     put-global-definition-hook
                                                                                     gensym-hook
                                                                                     local-eval-hook
                                                                                     top-level-eval-hook
                                                                                     fx<
                                                                                     fx=
                                                                                     fx-
                                                                                     fx+
                                                                                     set-lambda-meta!
                                                                                     lambda-meta
                                                                                     lambda?
                                                                                     make-dynlet
                                                                                     make-letrec
                                                                                     make-let
                                                                                     make-lambda-case
                                                                                     make-lambda
                                                                                     make-sequence
                                                                                     make-application
                                                                                     make-conditional
                                                                                     make-toplevel-define
                                                                                     make-toplevel-set
                                                                                     make-toplevel-ref
                                                                                     make-module-set
                                                                                     make-module-ref
                                                                                     make-lexical-set
                                                                                     make-lexical-ref
                                                                                     make-primitive-ref
                                                                                     make-const
                                                                                     make-void)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i486"
                                                                                    "i484"
                                                                                    "i482"
                                                                                    "i480"
                                                                                    "i478"
                                                                                    "i476"
                                                                                    "i474"
                                                                                    "i472"
                                                                                    "i470"
                                                                                    "i468"
                                                                                    "i466"
                                                                                    "i464"
                                                                                    "i462"
                                                                                    "i460"
                                                                                    "i458"
                                                                                    "i456"
                                                                                    "i454"
                                                                                    "i452"
                                                                                    "i450"
                                                                                    "i448"
                                                                                    "i446"
                                                                                    "i444"
                                                                                    "i442"
                                                                                    "i440"
                                                                                    "i438"
                                                                                    "i436"
                                                                                    "i434"
                                                                                    "i432"
                                                                                    "i430"
                                                                                    "i428"
                                                                                    "i426"
                                                                                    "i424"
                                                                                    "i422"
                                                                                    "i420"
                                                                                    "i418"
                                                                                    "i416"
                                                                                    "i415"
                                                                                    "i414"
                                                                                    "i412"
                                                                                    "i411"
                                                                                    "i410"
                                                                                    "i409"
                                                                                    "i408"
                                                                                    "i406"
                                                                                    "i404"
                                                                                    "i402"
                                                                                    "i400"
                                                                                    "i398"
                                                                                    "i396"
                                                                                    "i394"
                                                                                    "i392"
                                                                                    "i389"
                                                                                    "i387"
                                                                                    "i386"
                                                                                    "i385"
                                                                                    "i384"
                                                                                    "i383"
                                                                                    "i382"
                                                                                    "i380"
                                                                                    "i378"
                                                                                    "i376"
                                                                                    "i374"
                                                                                    "i373"
                                                                                    "i371"
                                                                                    "i369"
                                                                                    "i367"
                                                                                    "i365"
                                                                                    "i363"
                                                                                    "i361"
                                                                                    "i359"
                                                                                    "i358"
                                                                                    "i356"
                                                                                    "i354"
                                                                                    "i353"
                                                                                    "i352"
                                                                                    "i350"
                                                                                    "i349"
                                                                                    "i347"
                                                                                    "i345"
                                                                                    "i343"
                                                                                    "i341"
                                                                                    "i339"
                                                                                    "i337"
                                                                                    "i335"
                                                                                    "i333"
                                                                                    "i331"
                                                                                    "i329"
                                                                                    "i327"
                                                                                    "i325"
                                                                                    "i323"
                                                                                    "i321"
                                                                                    "i319"
                                                                                    "i317"
                                                                                    "i315"
                                                                                    "i313"
                                                                                    "i311"
                                                                                    "i309"
                                                                                    "i307"
                                                                                    "i305"
                                                                                    "i303"
                                                                                    "i301"
                                                                                    "i299"
                                                                                    "i297"
                                                                                    "i295"
                                                                                    "i293"
                                                                                    "i291"
                                                                                    "i289"
                                                                                    "i287"
                                                                                    "i285"
                                                                                    "i284"
                                                                                    "i282"
                                                                                    "i280"
                                                                                    "i278"
                                                                                    "i276"
                                                                                    "i274"
                                                                                    "i272"
                                                                                    "i270"
                                                                                    "i268"
                                                                                    "i266"
                                                                                    "i263"
                                                                                    "i261"
                                                                                    "i259"
                                                                                    "i257"
                                                                                    "i255"
                                                                                    "i253"
                                                                                    "i251"
                                                                                    "i249"
                                                                                    "i247"
                                                                                    "i245"
                                                                                    "i243"
                                                                                    "i241"
                                                                                    "i239"
                                                                                    "i237"
                                                                                    "i235"
                                                                                    "i233"
                                                                                    "i231"
                                                                                    "i229"))
                                                                                 #(ribcage
                                                                                   (define-structure
                                                                                     define-expansion-accessors
                                                                                     define-expansion-constructors
                                                                                     and-map*)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i23"
                                                                                    "i22"
                                                                                    "i21"
                                                                                    "i19")))
                                                                                (hygiene
                                                                                  guile)))))
                                                                #{rkey\ 1032}#)))
                                                      #{tmp\ 1049}#))
                                                   (symbol->keyword
                                                     (syntax->datum
                                                       #{a\ 1046}#))))
                                                #{tmp\ 1039}#)
                                         ((lambda (#{tmp\ 1052}#)
                                            (if (if #{tmp\ 1052}#
                                                  (apply (lambda (#{a\ 1056}#
                                                                  #{init\ 1057}#
                                                                  #{b\ 1058}#)
                                                           (#{id?\ 372}#
                                                             #{a\ 1056}#))
                                                         #{tmp\ 1052}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1062}#
                                                              #{init\ 1063}#
                                                              #{b\ 1064}#)
                                                       ((lambda (#{tmp\ 1066}#)
                                                          ((lambda (#{k\ 1068}#)
                                                             (#{key\ 997}#
                                                               #{b\ 1064}#
                                                               #{req\ 1030}#
                                                               #{opt\ 1031}#
                                                               (cons (list #{k\ 1068}#
                                                                           #{a\ 1062}#
                                                                           #{init\ 1063}#)
                                                                     #{rkey\ 1032}#)))
                                                           #{tmp\ 1066}#))
                                                        (symbol->keyword
                                                          (syntax->datum
                                                            #{a\ 1062}#))))
                                                     #{tmp\ 1052}#)
                                              ((lambda (#{tmp\ 1069}#)
                                                 (if (if #{tmp\ 1069}#
                                                       (apply (lambda (#{a\ 1074}#
                                                                       #{init\ 1075}#
                                                                       #{k\ 1076}#
                                                                       #{b\ 1077}#)
                                                                (if (#{id?\ 372}#
                                                                      #{a\ 1074}#)
                                                                  (keyword?
                                                                    (syntax->datum
                                                                      #{k\ 1076}#))
                                                                  #f))
                                                              #{tmp\ 1069}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1084}#
                                                                   #{init\ 1085}#
                                                                   #{k\ 1086}#
                                                                   #{b\ 1087}#)
                                                            (#{key\ 997}#
                                                              #{b\ 1087}#
                                                              #{req\ 1030}#
                                                              #{opt\ 1031}#
                                                              (cons (list #{k\ 1086}#
                                                                          #{a\ 1084}#
                                                                          #{init\ 1085}#)
                                                                    #{rkey\ 1032}#)))
                                                          #{tmp\ 1069}#)
                                                   ((lambda (#{tmp\ 1088}#)
                                                      (if (if #{tmp\ 1088}#
                                                            (apply (lambda (#{aok\ 1090}#)
                                                                     (eq? (syntax->datum
                                                                            #{aok\ 1090}#)
                                                                          #:allow-other-keys))
                                                                   #{tmp\ 1088}#)
                                                            #f)
                                                        (apply (lambda (#{aok\ 1092}#)
                                                                 (#{check\ 1001}#
                                                                   #{req\ 1030}#
                                                                   #{opt\ 1031}#
                                                                   #f
                                                                   (cons #t
                                                                         (reverse
                                                                           #{rkey\ 1032}#))))
                                                               #{tmp\ 1088}#)
                                                        ((lambda (#{tmp\ 1093}#)
                                                           (if (if #{tmp\ 1093}#
                                                                 (apply (lambda (#{aok\ 1097}#
                                                                                 #{a\ 1098}#
                                                                                 #{b\ 1099}#)
                                                                          (if (eq? (syntax->datum
                                                                                     #{aok\ 1097}#)
                                                                                   #:allow-other-keys)
                                                                            (eq? (syntax->datum
                                                                                   #{a\ 1098}#)
                                                                                 #:rest)
                                                                            #f))
                                                                        #{tmp\ 1093}#)
                                                                 #f)
                                                             (apply (lambda (#{aok\ 1105}#
                                                                             #{a\ 1106}#
                                                                             #{b\ 1107}#)
                                                                      (#{rest\ 999}#
                                                                        #{b\ 1107}#
                                                                        #{req\ 1030}#
                                                                        #{opt\ 1031}#
                                                                        (cons #t
                                                                              (reverse
                                                                                #{rkey\ 1032}#))))
                                                                    #{tmp\ 1093}#)
                                                             ((lambda (#{tmp\ 1108}#)
                                                                (if (if #{tmp\ 1108}#
                                                                      (apply (lambda (#{aok\ 1111}#
                                                                                      #{r\ 1112}#)
                                                                               (if (eq? (syntax->datum
                                                                                          #{aok\ 1111}#)
                                                                                        #:allow-other-keys)
                                                                                 (#{id?\ 372}#
                                                                                   #{r\ 1112}#)
                                                                                 #f))
                                                                             #{tmp\ 1108}#)
                                                                      #f)
                                                                  (apply (lambda (#{aok\ 1117}#
                                                                                  #{r\ 1118}#)
                                                                           (#{rest\ 999}#
                                                                             #{r\ 1118}#
                                                                             #{req\ 1030}#
                                                                             #{opt\ 1031}#
                                                                             (cons #t
                                                                                   (reverse
                                                                                     #{rkey\ 1032}#))))
                                                                         #{tmp\ 1108}#)
                                                                  ((lambda (#{tmp\ 1119}#)
                                                                     (if (if #{tmp\ 1119}#
                                                                           (apply (lambda (#{a\ 1122}#
                                                                                           #{b\ 1123}#)
                                                                                    (eq? (syntax->datum
                                                                                           #{a\ 1122}#)
                                                                                         #:rest))
                                                                                  #{tmp\ 1119}#)
                                                                           #f)
                                                                       (apply (lambda (#{a\ 1126}#
                                                                                       #{b\ 1127}#)
                                                                                (#{rest\ 999}#
                                                                                  #{b\ 1127}#
                                                                                  #{req\ 1030}#
                                                                                  #{opt\ 1031}#
                                                                                  (cons #f
                                                                                        (reverse
                                                                                          #{rkey\ 1032}#))))
                                                                              #{tmp\ 1119}#)
                                                                       ((lambda (#{tmp\ 1128}#)
                                                                          (if (if #{tmp\ 1128}#
                                                                                (apply (lambda (#{r\ 1130}#)
                                                                                         (#{id?\ 372}#
                                                                                           #{r\ 1130}#))
                                                                                       #{tmp\ 1128}#)
                                                                                #f)
                                                                            (apply (lambda (#{r\ 1132}#)
                                                                                     (#{rest\ 999}#
                                                                                       #{r\ 1132}#
                                                                                       #{req\ 1030}#
                                                                                       #{opt\ 1031}#
                                                                                       (cons #f
                                                                                             (reverse
                                                                                               #{rkey\ 1032}#))))
                                                                                   #{tmp\ 1128}#)
                                                                            ((lambda (#{else\ 1134}#)
                                                                               (syntax-violation
                                                                                 'lambda*
                                                                                 "invalid keyword argument list"
                                                                                 #{orig-args\ 990}#
                                                                                 #{args\ 1029}#))
                                                                             #{tmp\ 1037}#)))
                                                                        (list #{tmp\ 1037}#))))
                                                                   ($sc-dispatch
                                                                     #{tmp\ 1037}#
                                                                     '(any any)))))
                                                              ($sc-dispatch
                                                                #{tmp\ 1037}#
                                                                '(any .
                                                                      any)))))
                                                         ($sc-dispatch
                                                           #{tmp\ 1037}#
                                                           '(any any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1037}#
                                                      '(any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1037}#
                                                 '((any any any) . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1037}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1037}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1037}# (quote ()))))
                             #{args\ 1029}#)))
                        (#{opt\ 995}#
                          (lambda (#{args\ 1135}# #{req\ 1136}# #{ropt\ 1137}#)
                            ((lambda (#{tmp\ 1141}#)
                               ((lambda (#{tmp\ 1142}#)
                                  (if #{tmp\ 1142}#
                                    (apply (lambda ()
                                             (#{check\ 1001}#
                                               #{req\ 1136}#
                                               (reverse #{ropt\ 1137}#)
                                               #f
                                               '()))
                                           #{tmp\ 1142}#)
                                    ((lambda (#{tmp\ 1143}#)
                                       (if (if #{tmp\ 1143}#
                                             (apply (lambda (#{a\ 1146}#
                                                             #{b\ 1147}#)
                                                      (#{id?\ 372}#
                                                        #{a\ 1146}#))
                                                    #{tmp\ 1143}#)
                                             #f)
                                         (apply (lambda (#{a\ 1150}#
                                                         #{b\ 1151}#)
                                                  (#{opt\ 995}#
                                                    #{b\ 1151}#
                                                    #{req\ 1136}#
                                                    (cons (cons #{a\ 1150}#
                                                                '(#(syntax-object
                                                                    #f
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(a b)
                                                                       #((top)
                                                                         (top))
                                                                       #("i1148"
                                                                         "i1149"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(args
                                                                         req
                                                                         ropt)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1138"
                                                                         "i1139"
                                                                         "i1140"))
                                                                     #(ribcage
                                                                       (check rest
                                                                              key
                                                                              opt
                                                                              req)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i1000"
                                                                        "i998"
                                                                        "i996"
                                                                        "i994"
                                                                        "i992"))
                                                                     #(ribcage
                                                                       #(orig-args)
                                                                       #((top))
                                                                       #("i991"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         chi-lambda-case
                                                                         lambda*-formals
                                                                         chi-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         chi-void
                                                                         eval-local-transformer
                                                                         chi-local-syntax
                                                                         chi-body
                                                                         chi-macro
                                                                         chi-application
                                                                         chi-expr
                                                                         chi
                                                                         chi-top
                                                                         syntax-type
                                                                         chi-when-list
                                                                         chi-install-global
                                                                         chi-top-sequence
                                                                         chi-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         maybe-name-value!
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i486"
                                                                        "i484"
                                                                        "i482"
                                                                        "i480"
                                                                        "i478"
                                                                        "i476"
                                                                        "i474"
                                                                        "i472"
                                                                        "i470"
                                                                        "i468"
                                                                        "i466"
                                                                        "i464"
                                                                        "i462"
                                                                        "i460"
                                                                        "i458"
                                                                        "i456"
                                                                        "i454"
                                                                        "i452"
                                                                        "i450"
                                                                        "i448"
                                                                        "i446"
                                                                        "i444"
                                                                        "i442"
                                                                        "i440"
                                                                        "i438"
                                                                        "i436"
                                                                        "i434"
                                                                        "i432"
                                                                        "i430"
                                                                        "i428"
                                                                        "i426"
                                                                        "i424"
                                                                        "i422"
                                                                        "i420"
                                                                        "i418"
                                                                        "i416"
                                                                        "i415"
                                                                        "i414"
                                                                        "i412"
                                                                        "i411"
                                                                        "i410"
                                                                        "i409"
                                                                        "i408"
                                                                        "i406"
                                                                        "i404"
                                                                        "i402"
                                                                        "i400"
                                                                        "i398"
                                                                        "i396"
                                                                        "i394"
                                                                        "i392"
                                                                        "i389"
                                                                        "i387"
                                                                        "i386"
                                                                        "i385"
                                                                        "i384"
                                                                        "i383"
                                                                        "i382"
                                                                        "i380"
                                                                        "i378"
                                                                        "i376"
                                                                        "i374"
                                                                        "i373"
                                                                        "i371"
                                                                        "i369"
                                                                        "i367"
                                                                        "i365"
                                                                        "i363"
                                                                        "i361"
                                                                        "i359"
                                                                        "i358"
                                                                        "i356"
                                                                        "i354"
                                                                        "i353"
                                                                        "i352"
                                                                        "i350"
                                                                        "i349"
                                                                        "i347"
                                                                        "i345"
                                                                        "i343"
                                                                        "i341"
                                                                        "i339"
                                                                        "i337"
                                                                        "i335"
                                                                        "i333"
                                                                        "i331"
                                                                        "i329"
                                                                        "i327"
                                                                        "i325"
                                                                        "i323"
                                                                        "i321"
                                                                        "i319"
                                                                        "i317"
                                                                        "i315"
                                                                        "i313"
                                                                        "i311"
                                                                        "i309"
                                                                        "i307"
                                                                        "i305"
                                                                        "i303"
                                                                        "i301"
                                                                        "i299"
                                                                        "i297"
                                                                        "i295"
                                                                        "i293"
                                                                        "i291"
                                                                        "i289"
                                                                        "i287"
                                                                        "i285"
                                                                        "i284"
                                                                        "i282"
                                                                        "i280"
                                                                        "i278"
                                                                        "i276"
                                                                        "i274"
                                                                        "i272"
                                                                        "i270"
                                                                        "i268"
                                                                        "i266"
                                                                        "i263"
                                                                        "i261"
                                                                        "i259"
                                                                        "i257"
                                                                        "i255"
                                                                        "i253"
                                                                        "i251"
                                                                        "i249"
                                                                        "i247"
                                                                        "i245"
                                                                        "i243"
                                                                        "i241"
                                                                        "i239"
                                                                        "i237"
                                                                        "i235"
                                                                        "i233"
                                                                        "i231"
                                                                        "i229"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors
                                                                         and-map*)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i23"
                                                                        "i22"
                                                                        "i21"
                                                                        "i19")))
                                                                    (hygiene
                                                                      guile))))
                                                          #{ropt\ 1137}#)))
                                                #{tmp\ 1143}#)
                                         ((lambda (#{tmp\ 1152}#)
                                            (if (if #{tmp\ 1152}#
                                                  (apply (lambda (#{a\ 1156}#
                                                                  #{init\ 1157}#
                                                                  #{b\ 1158}#)
                                                           (#{id?\ 372}#
                                                             #{a\ 1156}#))
                                                         #{tmp\ 1152}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1162}#
                                                              #{init\ 1163}#
                                                              #{b\ 1164}#)
                                                       (#{opt\ 995}#
                                                         #{b\ 1164}#
                                                         #{req\ 1136}#
                                                         (cons (list #{a\ 1162}#
                                                                     #{init\ 1163}#)
                                                               #{ropt\ 1137}#)))
                                                     #{tmp\ 1152}#)
                                              ((lambda (#{tmp\ 1165}#)
                                                 (if (if #{tmp\ 1165}#
                                                       (apply (lambda (#{a\ 1168}#
                                                                       #{b\ 1169}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1168}#)
                                                                     #:key))
                                                              #{tmp\ 1165}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1172}#
                                                                   #{b\ 1173}#)
                                                            (#{key\ 997}#
                                                              #{b\ 1173}#
                                                              #{req\ 1136}#
                                                              (reverse
                                                                #{ropt\ 1137}#)
                                                              '()))
                                                          #{tmp\ 1165}#)
                                                   ((lambda (#{tmp\ 1174}#)
                                                      (if (if #{tmp\ 1174}#
                                                            (apply (lambda (#{a\ 1177}#
                                                                            #{b\ 1178}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1177}#)
                                                                          #:rest))
                                                                   #{tmp\ 1174}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1181}#
                                                                        #{b\ 1182}#)
                                                                 (#{rest\ 999}#
                                                                   #{b\ 1182}#
                                                                   #{req\ 1136}#
                                                                   (reverse
                                                                     #{ropt\ 1137}#)
                                                                   '()))
                                                               #{tmp\ 1174}#)
                                                        ((lambda (#{tmp\ 1183}#)
                                                           (if (if #{tmp\ 1183}#
                                                                 (apply (lambda (#{r\ 1185}#)
                                                                          (#{id?\ 372}#
                                                                            #{r\ 1185}#))
                                                                        #{tmp\ 1183}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1187}#)
                                                                      (#{rest\ 999}#
                                                                        #{r\ 1187}#
                                                                        #{req\ 1136}#
                                                                        (reverse
                                                                          #{ropt\ 1137}#)
                                                                        '()))
                                                                    #{tmp\ 1183}#)
                                                             ((lambda (#{else\ 1189}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid optional argument list"
                                                                  #{orig-args\ 990}#
                                                                  #{args\ 1135}#))
                                                              #{tmp\ 1141}#)))
                                                         (list #{tmp\ 1141}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1141}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1141}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1141}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1141}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1141}# (quote ()))))
                             #{args\ 1135}#)))
                        (#{req\ 993}#
                          (lambda (#{args\ 1190}# #{rreq\ 1191}#)
                            ((lambda (#{tmp\ 1194}#)
                               ((lambda (#{tmp\ 1195}#)
                                  (if #{tmp\ 1195}#
                                    (apply (lambda ()
                                             (#{check\ 1001}#
                                               (reverse #{rreq\ 1191}#)
                                               '()
                                               #f
                                               '()))
                                           #{tmp\ 1195}#)
                                    ((lambda (#{tmp\ 1196}#)
                                       (if (if #{tmp\ 1196}#
                                             (apply (lambda (#{a\ 1199}#
                                                             #{b\ 1200}#)
                                                      (#{id?\ 372}#
                                                        #{a\ 1199}#))
                                                    #{tmp\ 1196}#)
                                             #f)
                                         (apply (lambda (#{a\ 1203}#
                                                         #{b\ 1204}#)
                                                  (#{req\ 993}#
                                                    #{b\ 1204}#
                                                    (cons #{a\ 1203}#
                                                          #{rreq\ 1191}#)))
                                                #{tmp\ 1196}#)
                                         ((lambda (#{tmp\ 1205}#)
                                            (if (if #{tmp\ 1205}#
                                                  (apply (lambda (#{a\ 1208}#
                                                                  #{b\ 1209}#)
                                                           (eq? (syntax->datum
                                                                  #{a\ 1208}#)
                                                                #:optional))
                                                         #{tmp\ 1205}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1212}#
                                                              #{b\ 1213}#)
                                                       (#{opt\ 995}#
                                                         #{b\ 1213}#
                                                         (reverse
                                                           #{rreq\ 1191}#)
                                                         '()))
                                                     #{tmp\ 1205}#)
                                              ((lambda (#{tmp\ 1214}#)
                                                 (if (if #{tmp\ 1214}#
                                                       (apply (lambda (#{a\ 1217}#
                                                                       #{b\ 1218}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1217}#)
                                                                     #:key))
                                                              #{tmp\ 1214}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1221}#
                                                                   #{b\ 1222}#)
                                                            (#{key\ 997}#
                                                              #{b\ 1222}#
                                                              (reverse
                                                                #{rreq\ 1191}#)
                                                              '()
                                                              '()))
                                                          #{tmp\ 1214}#)
                                                   ((lambda (#{tmp\ 1223}#)
                                                      (if (if #{tmp\ 1223}#
                                                            (apply (lambda (#{a\ 1226}#
                                                                            #{b\ 1227}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1226}#)
                                                                          #:rest))
                                                                   #{tmp\ 1223}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1230}#
                                                                        #{b\ 1231}#)
                                                                 (#{rest\ 999}#
                                                                   #{b\ 1231}#
                                                                   (reverse
                                                                     #{rreq\ 1191}#)
                                                                   '()
                                                                   '()))
                                                               #{tmp\ 1223}#)
                                                        ((lambda (#{tmp\ 1232}#)
                                                           (if (if #{tmp\ 1232}#
                                                                 (apply (lambda (#{r\ 1234}#)
                                                                          (#{id?\ 372}#
                                                                            #{r\ 1234}#))
                                                                        #{tmp\ 1232}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1236}#)
                                                                      (#{rest\ 999}#
                                                                        #{r\ 1236}#
                                                                        (reverse
                                                                          #{rreq\ 1191}#)
                                                                        '()
                                                                        '()))
                                                                    #{tmp\ 1232}#)
                                                             ((lambda (#{else\ 1238}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid argument list"
                                                                  #{orig-args\ 990}#
                                                                  #{args\ 1190}#))
                                                              #{tmp\ 1194}#)))
                                                         (list #{tmp\ 1194}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1194}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1194}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1194}#
                                            '(any . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1194}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1194}# (quote ()))))
                             #{args\ 1190}#))))
                 (#{req\ 993}# #{orig-args\ 990}# (quote ())))))
           (#{chi-simple-lambda\ 477}#
             (lambda (#{e\ 1239}#
                      #{r\ 1240}#
                      #{w\ 1241}#
                      #{s\ 1242}#
                      #{mod\ 1243}#
                      #{req\ 1244}#
                      #{rest\ 1245}#
                      #{meta\ 1246}#
                      #{body\ 1247}#)
               (let ((#{ids\ 1259}#
                       (if #{rest\ 1245}#
                         (append #{req\ 1244}# (list #{rest\ 1245}#))
                         #{req\ 1244}#)))
                 (let ((#{vars\ 1261}#
                         (map #{gen-var\ 485}# #{ids\ 1259}#)))
                   (let ((#{labels\ 1263}#
                           (#{gen-labels\ 390}# #{ids\ 1259}#)))
                     (#{build-simple-lambda\ 314}#
                       #{s\ 1242}#
                       (map syntax->datum #{req\ 1244}#)
                       (if #{rest\ 1245}#
                         (syntax->datum #{rest\ 1245}#)
                         #f)
                       #{vars\ 1261}#
                       #{meta\ 1246}#
                       (#{chi-body\ 465}#
                         #{body\ 1247}#
                         (#{source-wrap\ 443}#
                           #{e\ 1239}#
                           #{w\ 1241}#
                           #{s\ 1242}#
                           #{mod\ 1243}#)
                         (#{extend-var-env\ 362}#
                           #{labels\ 1263}#
                           #{vars\ 1261}#
                           #{r\ 1240}#)
                         (#{make-binding-wrap\ 419}#
                           #{ids\ 1259}#
                           #{labels\ 1263}#
                           #{w\ 1241}#)
                         #{mod\ 1243}#)))))))
           (#{lambda-formals\ 475}#
             (lambda (#{orig-args\ 1266}#)
               (letrec ((#{check\ 1271}#
                          (lambda (#{req\ 1272}# #{rest\ 1273}#)
                            (if (#{distinct-bound-ids?\ 437}#
                                  (if #{rest\ 1273}#
                                    (cons #{rest\ 1273}# #{req\ 1272}#)
                                    #{req\ 1272}#))
                              (values #{req\ 1272}# #f #{rest\ 1273}# #f)
                              (syntax-violation
                                'lambda
                                "duplicate identifier in argument list"
                                #{orig-args\ 1266}#))))
                        (#{req\ 1269}#
                          (lambda (#{args\ 1279}# #{rreq\ 1280}#)
                            ((lambda (#{tmp\ 1283}#)
                               ((lambda (#{tmp\ 1284}#)
                                  (if #{tmp\ 1284}#
                                    (apply (lambda ()
                                             (#{check\ 1271}#
                                               (reverse #{rreq\ 1280}#)
                                               #f))
                                           #{tmp\ 1284}#)
                                    ((lambda (#{tmp\ 1285}#)
                                       (if (if #{tmp\ 1285}#
                                             (apply (lambda (#{a\ 1288}#
                                                             #{b\ 1289}#)
                                                      (#{id?\ 372}#
                                                        #{a\ 1288}#))
                                                    #{tmp\ 1285}#)
                                             #f)
                                         (apply (lambda (#{a\ 1292}#
                                                         #{b\ 1293}#)
                                                  (#{req\ 1269}#
                                                    #{b\ 1293}#
                                                    (cons #{a\ 1292}#
                                                          #{rreq\ 1280}#)))
                                                #{tmp\ 1285}#)
                                         ((lambda (#{tmp\ 1294}#)
                                            (if (if #{tmp\ 1294}#
                                                  (apply (lambda (#{r\ 1296}#)
                                                           (#{id?\ 372}#
                                                             #{r\ 1296}#))
                                                         #{tmp\ 1294}#)
                                                  #f)
                                              (apply (lambda (#{r\ 1298}#)
                                                       (#{check\ 1271}#
                                                         (reverse
                                                           #{rreq\ 1280}#)
                                                         #{r\ 1298}#))
                                                     #{tmp\ 1294}#)
                                              ((lambda (#{else\ 1300}#)
                                                 (syntax-violation
                                                   'lambda
                                                   "invalid argument list"
                                                   #{orig-args\ 1266}#
                                                   #{args\ 1279}#))
                                               #{tmp\ 1283}#)))
                                          (list #{tmp\ 1283}#))))
                                     ($sc-dispatch
                                       #{tmp\ 1283}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1283}# (quote ()))))
                             #{args\ 1279}#))))
                 (#{req\ 1269}# #{orig-args\ 1266}# (quote ())))))
           (#{ellipsis?\ 473}#
             (lambda (#{x\ 1301}#)
               (if (#{nonsymbol-id?\ 370}# #{x\ 1301}#)
                 (#{free-id=?\ 431}#
                   #{x\ 1301}#
                   '#(syntax-object
                      ...
                      ((top)
                       #(ribcage () () ())
                       #(ribcage () () ())
                       #(ribcage #(x) #((top)) #("i1302"))
                       #(ribcage
                         (lambda-var-list
                           gen-var
                           strip
                           chi-lambda-case
                           lambda*-formals
                           chi-simple-lambda
                           lambda-formals
                           ellipsis?
                           chi-void
                           eval-local-transformer
                           chi-local-syntax
                           chi-body
                           chi-macro
                           chi-application
                           chi-expr
                           chi
                           chi-top
                           syntax-type
                           chi-when-list
                           chi-install-global
                           chi-top-sequence
                           chi-sequence
                           source-wrap
                           wrap
                           bound-id-member?
                           distinct-bound-ids?
                           valid-bound-ids?
                           bound-id=?
                           free-id=?
                           id-var-name
                           same-marks?
                           join-marks
                           join-wraps
                           smart-append
                           make-binding-wrap
                           extend-ribcage!
                           make-empty-ribcage
                           new-mark
                           anti-mark
                           the-anti-mark
                           top-marked?
                           top-wrap
                           empty-wrap
                           set-ribcage-labels!
                           set-ribcage-marks!
                           set-ribcage-symnames!
                           ribcage-labels
                           ribcage-marks
                           ribcage-symnames
                           ribcage?
                           make-ribcage
                           gen-labels
                           gen-label
                           make-rename
                           rename-marks
                           rename-new
                           rename-old
                           subst-rename?
                           wrap-subst
                           wrap-marks
                           make-wrap
                           id-sym-name&marks
                           id-sym-name
                           id?
                           nonsymbol-id?
                           global-extend
                           lookup
                           macros-only-env
                           extend-var-env
                           extend-env
                           null-env
                           binding-value
                           binding-type
                           make-binding
                           arg-check
                           source-annotation
                           no-source
                           set-syntax-object-module!
                           set-syntax-object-wrap!
                           set-syntax-object-expression!
                           syntax-object-module
                           syntax-object-wrap
                           syntax-object-expression
                           syntax-object?
                           make-syntax-object
                           build-lexical-var
                           build-letrec
                           build-named-let
                           build-let
                           build-sequence
                           build-data
                           build-primref
                           build-lambda-case
                           build-case-lambda
                           build-simple-lambda
                           build-global-definition
                           maybe-name-value!
                           build-global-assignment
                           build-global-reference
                           analyze-variable
                           build-lexical-assignment
                           build-lexical-reference
                           build-dynlet
                           build-conditional
                           build-application
                           build-void
                           decorate-source
                           get-global-definition-hook
                           put-global-definition-hook
                           gensym-hook
                           local-eval-hook
                           top-level-eval-hook
                           fx<
                           fx=
                           fx-
                           fx+
                           set-lambda-meta!
                           lambda-meta
                           lambda?
                           make-dynlet
                           make-letrec
                           make-let
                           make-lambda-case
                           make-lambda
                           make-sequence
                           make-application
                           make-conditional
                           make-toplevel-define
                           make-toplevel-set
                           make-toplevel-ref
                           make-module-set
                           make-module-ref
                           make-lexical-set
                           make-lexical-ref
                           make-primitive-ref
                           make-const
                           make-void)
                         ((top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top))
                         ("i486"
                          "i484"
                          "i482"
                          "i480"
                          "i478"
                          "i476"
                          "i474"
                          "i472"
                          "i470"
                          "i468"
                          "i466"
                          "i464"
                          "i462"
                          "i460"
                          "i458"
                          "i456"
                          "i454"
                          "i452"
                          "i450"
                          "i448"
                          "i446"
                          "i444"
                          "i442"
                          "i440"
                          "i438"
                          "i436"
                          "i434"
                          "i432"
                          "i430"
                          "i428"
                          "i426"
                          "i424"
                          "i422"
                          "i420"
                          "i418"
                          "i416"
                          "i415"
                          "i414"
                          "i412"
                          "i411"
                          "i410"
                          "i409"
                          "i408"
                          "i406"
                          "i404"
                          "i402"
                          "i400"
                          "i398"
                          "i396"
                          "i394"
                          "i392"
                          "i389"
                          "i387"
                          "i386"
                          "i385"
                          "i384"
                          "i383"
                          "i382"
                          "i380"
                          "i378"
                          "i376"
                          "i374"
                          "i373"
                          "i371"
                          "i369"
                          "i367"
                          "i365"
                          "i363"
                          "i361"
                          "i359"
                          "i358"
                          "i356"
                          "i354"
                          "i353"
                          "i352"
                          "i350"
                          "i349"
                          "i347"
                          "i345"
                          "i343"
                          "i341"
                          "i339"
                          "i337"
                          "i335"
                          "i333"
                          "i331"
                          "i329"
                          "i327"
                          "i325"
                          "i323"
                          "i321"
                          "i319"
                          "i317"
                          "i315"
                          "i313"
                          "i311"
                          "i309"
                          "i307"
                          "i305"
                          "i303"
                          "i301"
                          "i299"
                          "i297"
                          "i295"
                          "i293"
                          "i291"
                          "i289"
                          "i287"
                          "i285"
                          "i284"
                          "i282"
                          "i280"
                          "i278"
                          "i276"
                          "i274"
                          "i272"
                          "i270"
                          "i268"
                          "i266"
                          "i263"
                          "i261"
                          "i259"
                          "i257"
                          "i255"
                          "i253"
                          "i251"
                          "i249"
                          "i247"
                          "i245"
                          "i243"
                          "i241"
                          "i239"
                          "i237"
                          "i235"
                          "i233"
                          "i231"
                          "i229"))
                       #(ribcage
                         (define-structure
                           define-expansion-accessors
                           define-expansion-constructors
                           and-map*)
                         ((top) (top) (top) (top))
                         ("i23" "i22" "i21" "i19")))
                      (hygiene guile)))
                 #f)))
           (#{chi-void\ 471}#
             (lambda () (#{build-void\ 292}# #f)))
           (#{eval-local-transformer\ 469}#
             (lambda (#{expanded\ 1306}# #{mod\ 1307}#)
               (let ((#{p\ 1311}#
                       (#{local-eval-hook\ 283}#
                         #{expanded\ 1306}#
                         #{mod\ 1307}#)))
                 (if (procedure? #{p\ 1311}#)
                   #{p\ 1311}#
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 1311}#)))))
           (#{chi-local-syntax\ 467}#
             (lambda (#{rec?\ 1312}#
                      #{e\ 1313}#
                      #{r\ 1314}#
                      #{w\ 1315}#
                      #{s\ 1316}#
                      #{mod\ 1317}#
                      #{k\ 1318}#)
               ((lambda (#{tmp\ 1326}#)
                  ((lambda (#{tmp\ 1327}#)
                     (if #{tmp\ 1327}#
                       (apply (lambda (#{_\ 1333}#
                                       #{id\ 1334}#
                                       #{val\ 1335}#
                                       #{e1\ 1336}#
                                       #{e2\ 1337}#)
                                (let ((#{ids\ 1339}# #{id\ 1334}#))
                                  (if (not (#{valid-bound-ids?\ 435}#
                                             #{ids\ 1339}#))
                                    (syntax-violation
                                      #f
                                      "duplicate bound keyword"
                                      #{e\ 1313}#)
                                    (let ((#{labels\ 1342}#
                                            (#{gen-labels\ 390}#
                                              #{ids\ 1339}#)))
                                      (let ((#{new-w\ 1344}#
                                              (#{make-binding-wrap\ 419}#
                                                #{ids\ 1339}#
                                                #{labels\ 1342}#
                                                #{w\ 1315}#)))
                                        (#{k\ 1318}#
                                          (cons #{e1\ 1336}# #{e2\ 1337}#)
                                          (#{extend-env\ 360}#
                                            #{labels\ 1342}#
                                            (let ((#{w\ 1348}#
                                                    (if #{rec?\ 1312}#
                                                      #{new-w\ 1344}#
                                                      #{w\ 1315}#))
                                                  (#{trans-r\ 1349}#
                                                    (#{macros-only-env\ 364}#
                                                      #{r\ 1314}#)))
                                              (map (lambda (#{x\ 1350}#)
                                                     (cons 'macro
                                                           (#{eval-local-transformer\ 469}#
                                                             (#{chi\ 457}#
                                                               #{x\ 1350}#
                                                               #{trans-r\ 1349}#
                                                               #{w\ 1348}#
                                                               #{mod\ 1317}#)
                                                             #{mod\ 1317}#)))
                                                   #{val\ 1335}#))
                                            #{r\ 1314}#)
                                          #{new-w\ 1344}#
                                          #{s\ 1316}#
                                          #{mod\ 1317}#))))))
                              #{tmp\ 1327}#)
                       ((lambda (#{_\ 1355}#)
                          (syntax-violation
                            #f
                            "bad local syntax definition"
                            (#{source-wrap\ 443}#
                              #{e\ 1313}#
                              #{w\ 1315}#
                              #{s\ 1316}#
                              #{mod\ 1317}#)))
                        #{tmp\ 1326}#)))
                   ($sc-dispatch
                     #{tmp\ 1326}#
                     '(any #(each (any any)) any . each-any))))
                #{e\ 1313}#)))
           (#{chi-body\ 465}#
             (lambda (#{body\ 1356}#
                      #{outer-form\ 1357}#
                      #{r\ 1358}#
                      #{w\ 1359}#
                      #{mod\ 1360}#)
               (let ((#{r\ 1368}#
                       (cons '("placeholder" placeholder)
                             #{r\ 1358}#)))
                 (let ((#{ribcage\ 1370}#
                         (#{make-ribcage\ 393}#
                           '()
                           '()
                           '())))
                   (let ((#{w\ 1373}#
                           (#{make-wrap\ 377}#
                             (#{wrap-marks\ 379}# #{w\ 1359}#)
                             (cons #{ribcage\ 1370}#
                                   (#{wrap-subst\ 381}# #{w\ 1359}#)))))
                     (letrec ((#{parse\ 1382}#
                                (lambda (#{body\ 1383}#
                                         #{ids\ 1384}#
                                         #{labels\ 1385}#
                                         #{var-ids\ 1386}#
                                         #{vars\ 1387}#
                                         #{vals\ 1388}#
                                         #{bindings\ 1389}#)
                                  (if (null? #{body\ 1383}#)
                                    (syntax-violation
                                      #f
                                      "no expressions in body"
                                      #{outer-form\ 1357}#)
                                    (let ((#{e\ 1394}# (cdar #{body\ 1383}#))
                                          (#{er\ 1395}# (caar #{body\ 1383}#)))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 453}#
                                            #{e\ 1394}#
                                            #{er\ 1395}#
                                            '(())
                                            (#{source-annotation\ 351}#
                                              #{er\ 1395}#)
                                            #{ribcage\ 1370}#
                                            #{mod\ 1360}#
                                            #f))
                                        (lambda (#{type\ 1397}#
                                                 #{value\ 1398}#
                                                 #{e\ 1399}#
                                                 #{w\ 1400}#
                                                 #{s\ 1401}#
                                                 #{mod\ 1402}#)
                                          (if (memv #{type\ 1397}#
                                                    '(define-form))
                                            (let ((#{id\ 1412}#
                                                    (#{wrap\ 441}#
                                                      #{value\ 1398}#
                                                      #{w\ 1400}#
                                                      #{mod\ 1402}#))
                                                  (#{label\ 1413}#
                                                    (#{gen-label\ 388}#)))
                                              (let ((#{var\ 1415}#
                                                      (#{gen-var\ 485}#
                                                        #{id\ 1412}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 417}#
                                                    #{ribcage\ 1370}#
                                                    #{id\ 1412}#
                                                    #{label\ 1413}#)
                                                  (#{parse\ 1382}#
                                                    (cdr #{body\ 1383}#)
                                                    (cons #{id\ 1412}#
                                                          #{ids\ 1384}#)
                                                    (cons #{label\ 1413}#
                                                          #{labels\ 1385}#)
                                                    (cons #{id\ 1412}#
                                                          #{var-ids\ 1386}#)
                                                    (cons #{var\ 1415}#
                                                          #{vars\ 1387}#)
                                                    (cons (cons #{er\ 1395}#
                                                                (#{wrap\ 441}#
                                                                  #{e\ 1399}#
                                                                  #{w\ 1400}#
                                                                  #{mod\ 1402}#))
                                                          #{vals\ 1388}#)
                                                    (cons (cons 'lexical
                                                                #{var\ 1415}#)
                                                          #{bindings\ 1389}#)))))
                                            (if (memv #{type\ 1397}#
                                                      '(define-syntax-form))
                                              (let ((#{id\ 1420}#
                                                      (#{wrap\ 441}#
                                                        #{value\ 1398}#
                                                        #{w\ 1400}#
                                                        #{mod\ 1402}#))
                                                    (#{label\ 1421}#
                                                      (#{gen-label\ 388}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 417}#
                                                    #{ribcage\ 1370}#
                                                    #{id\ 1420}#
                                                    #{label\ 1421}#)
                                                  (#{parse\ 1382}#
                                                    (cdr #{body\ 1383}#)
                                                    (cons #{id\ 1420}#
                                                          #{ids\ 1384}#)
                                                    (cons #{label\ 1421}#
                                                          #{labels\ 1385}#)
                                                    #{var-ids\ 1386}#
                                                    #{vars\ 1387}#
                                                    #{vals\ 1388}#
                                                    (cons (cons 'macro
                                                                (cons #{er\ 1395}#
                                                                      (#{wrap\ 441}#
                                                                        #{e\ 1399}#
                                                                        #{w\ 1400}#
                                                                        #{mod\ 1402}#)))
                                                          #{bindings\ 1389}#))))
                                              (if (memv #{type\ 1397}#
                                                        '(begin-form))
                                                ((lambda (#{tmp\ 1424}#)
                                                   ((lambda (#{tmp\ 1425}#)
                                                      (if #{tmp\ 1425}#
                                                        (apply (lambda (#{_\ 1428}#
                                                                        #{e1\ 1429}#)
                                                                 (#{parse\ 1382}#
                                                                   (letrec ((#{f\ 1432}#
                                                                              (lambda (#{forms\ 1433}#)
                                                                                (if (null? #{forms\ 1433}#)
                                                                                  (cdr #{body\ 1383}#)
                                                                                  (cons (cons #{er\ 1395}#
                                                                                              (#{wrap\ 441}#
                                                                                                (car #{forms\ 1433}#)
                                                                                                #{w\ 1400}#
                                                                                                #{mod\ 1402}#))
                                                                                        (#{f\ 1432}#
                                                                                          (cdr #{forms\ 1433}#)))))))
                                                                     (#{f\ 1432}#
                                                                       #{e1\ 1429}#))
                                                                   #{ids\ 1384}#
                                                                   #{labels\ 1385}#
                                                                   #{var-ids\ 1386}#
                                                                   #{vars\ 1387}#
                                                                   #{vals\ 1388}#
                                                                   #{bindings\ 1389}#))
                                                               #{tmp\ 1425}#)
                                                        (syntax-violation
                                                          #f
                                                          "source expression failed to match any pattern"
                                                          #{tmp\ 1424}#)))
                                                    ($sc-dispatch
                                                      #{tmp\ 1424}#
                                                      '(any . each-any))))
                                                 #{e\ 1399}#)
                                                (if (memv #{type\ 1397}#
                                                          '(local-syntax-form))
                                                  (#{chi-local-syntax\ 467}#
                                                    #{value\ 1398}#
                                                    #{e\ 1399}#
                                                    #{er\ 1395}#
                                                    #{w\ 1400}#
                                                    #{s\ 1401}#
                                                    #{mod\ 1402}#
                                                    (lambda (#{forms\ 1436}#
                                                             #{er\ 1437}#
                                                             #{w\ 1438}#
                                                             #{s\ 1439}#
                                                             #{mod\ 1440}#)
                                                      (#{parse\ 1382}#
                                                        (letrec ((#{f\ 1448}#
                                                                   (lambda (#{forms\ 1449}#)
                                                                     (if (null? #{forms\ 1449}#)
                                                                       (cdr #{body\ 1383}#)
                                                                       (cons (cons #{er\ 1437}#
                                                                                   (#{wrap\ 441}#
                                                                                     (car #{forms\ 1449}#)
                                                                                     #{w\ 1438}#
                                                                                     #{mod\ 1440}#))
                                                                             (#{f\ 1448}#
                                                                               (cdr #{forms\ 1449}#)))))))
                                                          (#{f\ 1448}#
                                                            #{forms\ 1436}#))
                                                        #{ids\ 1384}#
                                                        #{labels\ 1385}#
                                                        #{var-ids\ 1386}#
                                                        #{vars\ 1387}#
                                                        #{vals\ 1388}#
                                                        #{bindings\ 1389}#)))
                                                  (if (null? #{ids\ 1384}#)
                                                    (#{build-sequence\ 324}#
                                                      #f
                                                      (map (lambda (#{x\ 1452}#)
                                                             (#{chi\ 457}#
                                                               (cdr #{x\ 1452}#)
                                                               (car #{x\ 1452}#)
                                                               '(())
                                                               #{mod\ 1402}#))
                                                           (cons (cons #{er\ 1395}#
                                                                       (#{source-wrap\ 443}#
                                                                         #{e\ 1399}#
                                                                         #{w\ 1400}#
                                                                         #{s\ 1401}#
                                                                         #{mod\ 1402}#))
                                                                 (cdr #{body\ 1383}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 435}#
                                                                 #{ids\ 1384}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 1357}#))
                                                      (letrec ((#{loop\ 1459}#
                                                                 (lambda (#{bs\ 1460}#
                                                                          #{er-cache\ 1461}#
                                                                          #{r-cache\ 1462}#)
                                                                   (if (not (null? #{bs\ 1460}#))
                                                                     (let ((#{b\ 1465}#
                                                                             (car #{bs\ 1460}#)))
                                                                       (if (eq? (car #{b\ 1465}#)
                                                                                'macro)
                                                                         (let ((#{er\ 1468}#
                                                                                 (cadr #{b\ 1465}#)))
                                                                           (let ((#{r-cache\ 1470}#
                                                                                   (if (eq? #{er\ 1468}#
                                                                                            #{er-cache\ 1461}#)
                                                                                     #{r-cache\ 1462}#
                                                                                     (#{macros-only-env\ 364}#
                                                                                       #{er\ 1468}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 1465}#
                                                                                 (#{eval-local-transformer\ 469}#
                                                                                   (#{chi\ 457}#
                                                                                     (cddr #{b\ 1465}#)
                                                                                     #{r-cache\ 1470}#
                                                                                     '(())
                                                                                     #{mod\ 1402}#)
                                                                                   #{mod\ 1402}#))
                                                                               (#{loop\ 1459}#
                                                                                 (cdr #{bs\ 1460}#)
                                                                                 #{er\ 1468}#
                                                                                 #{r-cache\ 1470}#))))
                                                                         (#{loop\ 1459}#
                                                                           (cdr #{bs\ 1460}#)
                                                                           #{er-cache\ 1461}#
                                                                           #{r-cache\ 1462}#)))))))
                                                        (#{loop\ 1459}#
                                                          #{bindings\ 1389}#
                                                          #f
                                                          #f))
                                                      (set-cdr!
                                                        #{r\ 1368}#
                                                        (#{extend-env\ 360}#
                                                          #{labels\ 1385}#
                                                          #{bindings\ 1389}#
                                                          (cdr #{r\ 1368}#)))
                                                      (#{build-letrec\ 330}#
                                                        #f
                                                        (map syntax->datum
                                                             #{var-ids\ 1386}#)
                                                        #{vars\ 1387}#
                                                        (map (lambda (#{x\ 1473}#)
                                                               (#{chi\ 457}#
                                                                 (cdr #{x\ 1473}#)
                                                                 (car #{x\ 1473}#)
                                                                 '(())
                                                                 #{mod\ 1402}#))
                                                             #{vals\ 1388}#)
                                                        (#{build-sequence\ 324}#
                                                          #f
                                                          (map (lambda (#{x\ 1477}#)
                                                                 (#{chi\ 457}#
                                                                   (cdr #{x\ 1477}#)
                                                                   (car #{x\ 1477}#)
                                                                   '(())
                                                                   #{mod\ 1402}#))
                                                               (cons (cons #{er\ 1395}#
                                                                           (#{source-wrap\ 443}#
                                                                             #{e\ 1399}#
                                                                             #{w\ 1400}#
                                                                             #{s\ 1401}#
                                                                             #{mod\ 1402}#))
                                                                     (cdr #{body\ 1383}#))))))))))))))))))
                       (#{parse\ 1382}#
                         (map (lambda (#{x\ 1390}#)
                                (cons #{r\ 1368}#
                                      (#{wrap\ 441}#
                                        #{x\ 1390}#
                                        #{w\ 1373}#
                                        #{mod\ 1360}#)))
                              #{body\ 1356}#)
                         '()
                         '()
                         '()
                         '()
                         '()
                         '())))))))
           (#{chi-macro\ 463}#
             (lambda (#{p\ 1480}#
                      #{e\ 1481}#
                      #{r\ 1482}#
                      #{w\ 1483}#
                      #{s\ 1484}#
                      #{rib\ 1485}#
                      #{mod\ 1486}#)
               (letrec ((#{rebuild-macro-output\ 1495}#
                          (lambda (#{x\ 1496}# #{m\ 1497}#)
                            (if (pair? #{x\ 1496}#)
                              (#{decorate-source\ 290}#
                                (cons (#{rebuild-macro-output\ 1495}#
                                        (car #{x\ 1496}#)
                                        #{m\ 1497}#)
                                      (#{rebuild-macro-output\ 1495}#
                                        (cdr #{x\ 1496}#)
                                        #{m\ 1497}#))
                                #{s\ 1484}#)
                              (if (#{syntax-object?\ 336}# #{x\ 1496}#)
                                (let ((#{w\ 1505}#
                                        (#{syntax-object-wrap\ 340}#
                                          #{x\ 1496}#)))
                                  (let ((#{ms\ 1508}#
                                          (#{wrap-marks\ 379}# #{w\ 1505}#))
                                        (#{s\ 1509}#
                                          (#{wrap-subst\ 381}# #{w\ 1505}#)))
                                    (if (if (pair? #{ms\ 1508}#)
                                          (eq? (car #{ms\ 1508}#) #f)
                                          #f)
                                      (#{make-syntax-object\ 334}#
                                        (#{syntax-object-expression\ 338}#
                                          #{x\ 1496}#)
                                        (#{make-wrap\ 377}#
                                          (cdr #{ms\ 1508}#)
                                          (if #{rib\ 1485}#
                                            (cons #{rib\ 1485}#
                                                  (cdr #{s\ 1509}#))
                                            (cdr #{s\ 1509}#)))
                                        (#{syntax-object-module\ 342}#
                                          #{x\ 1496}#))
                                      (#{make-syntax-object\ 334}#
                                        (#{decorate-source\ 290}#
                                          (#{syntax-object-expression\ 338}#
                                            #{x\ 1496}#)
                                          #{s\ 1509}#)
                                        (#{make-wrap\ 377}#
                                          (cons #{m\ 1497}# #{ms\ 1508}#)
                                          (if #{rib\ 1485}#
                                            (cons #{rib\ 1485}#
                                                  (cons 'shift
                                                        #{s\ 1509}#))
                                            (cons (quote shift) #{s\ 1509}#)))
                                        (#{syntax-object-module\ 342}#
                                          #{x\ 1496}#)))))
                                (if (vector? #{x\ 1496}#)
                                  (let ((#{n\ 1517}#
                                          (vector-length #{x\ 1496}#)))
                                    (let ((#{v\ 1519}#
                                            (#{decorate-source\ 290}#
                                              (make-vector #{n\ 1517}#)
                                              #{x\ 1496}#)))
                                      (letrec ((#{loop\ 1522}#
                                                 (lambda (#{i\ 1523}#)
                                                   (if (#{fx=\ 277}#
                                                         #{i\ 1523}#
                                                         #{n\ 1517}#)
                                                     (begin
                                                       (if #f #f)
                                                       #{v\ 1519}#)
                                                     (begin
                                                       (vector-set!
                                                         #{v\ 1519}#
                                                         #{i\ 1523}#
                                                         (#{rebuild-macro-output\ 1495}#
                                                           (vector-ref
                                                             #{x\ 1496}#
                                                             #{i\ 1523}#)
                                                           #{m\ 1497}#))
                                                       (#{loop\ 1522}#
                                                         (#{fx+\ 273}#
                                                           #{i\ 1523}#
                                                           1)))))))
                                        (#{loop\ 1522}# 0))))
                                  (if (symbol? #{x\ 1496}#)
                                    (syntax-violation
                                      #f
                                      "encountered raw symbol in macro output"
                                      (#{source-wrap\ 443}#
                                        #{e\ 1481}#
                                        #{w\ 1483}#
                                        (#{wrap-subst\ 381}# #{w\ 1483}#)
                                        #{mod\ 1486}#)
                                      #{x\ 1496}#)
                                    (#{decorate-source\ 290}#
                                      #{x\ 1496}#
                                      #{s\ 1484}#))))))))
                 (#{rebuild-macro-output\ 1495}#
                   (#{p\ 1480}#
                     (#{source-wrap\ 443}#
                       #{e\ 1481}#
                       (#{anti-mark\ 413}# #{w\ 1483}#)
                       #{s\ 1484}#
                       #{mod\ 1486}#))
                   (gensym "m")))))
           (#{chi-application\ 461}#
             (lambda (#{x\ 1530}#
                      #{e\ 1531}#
                      #{r\ 1532}#
                      #{w\ 1533}#
                      #{s\ 1534}#
                      #{mod\ 1535}#)
               ((lambda (#{tmp\ 1542}#)
                  ((lambda (#{tmp\ 1543}#)
                     (if #{tmp\ 1543}#
                       (apply (lambda (#{e0\ 1546}# #{e1\ 1547}#)
                                (#{build-application\ 294}#
                                  #{s\ 1534}#
                                  #{x\ 1530}#
                                  (map (lambda (#{e\ 1548}#)
                                         (#{chi\ 457}#
                                           #{e\ 1548}#
                                           #{r\ 1532}#
                                           #{w\ 1533}#
                                           #{mod\ 1535}#))
                                       #{e1\ 1547}#)))
                              #{tmp\ 1543}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 1542}#)))
                   ($sc-dispatch
                     #{tmp\ 1542}#
                     '(any . each-any))))
                #{e\ 1531}#)))
           (#{chi-expr\ 459}#
             (lambda (#{type\ 1551}#
                      #{value\ 1552}#
                      #{e\ 1553}#
                      #{r\ 1554}#
                      #{w\ 1555}#
                      #{s\ 1556}#
                      #{mod\ 1557}#)
               (if (memv #{type\ 1551}# (quote (lexical)))
                 (#{build-lexical-reference\ 300}#
                   'value
                   #{s\ 1556}#
                   #{e\ 1553}#
                   #{value\ 1552}#)
                 (if (memv #{type\ 1551}# (quote (core core-form)))
                   (#{value\ 1552}#
                     #{e\ 1553}#
                     #{r\ 1554}#
                     #{w\ 1555}#
                     #{s\ 1556}#
                     #{mod\ 1557}#)
                   (if (memv #{type\ 1551}# (quote (module-ref)))
                     (call-with-values
                       (lambda ()
                         (#{value\ 1552}#
                           #{e\ 1553}#
                           #{r\ 1554}#
                           #{w\ 1555}#))
                       (lambda (#{e\ 1568}#
                                #{r\ 1569}#
                                #{w\ 1570}#
                                #{s\ 1571}#
                                #{mod\ 1572}#)
                         (#{chi\ 457}#
                           #{e\ 1568}#
                           #{r\ 1569}#
                           #{w\ 1570}#
                           #{mod\ 1572}#)))
                     (if (memv #{type\ 1551}# (quote (lexical-call)))
                       (#{chi-application\ 461}#
                         (let ((#{id\ 1580}# (car #{e\ 1553}#)))
                           (#{build-lexical-reference\ 300}#
                             'fun
                             (#{source-annotation\ 351}# #{id\ 1580}#)
                             (if (#{syntax-object?\ 336}# #{id\ 1580}#)
                               (syntax->datum #{id\ 1580}#)
                               #{id\ 1580}#)
                             #{value\ 1552}#))
                         #{e\ 1553}#
                         #{r\ 1554}#
                         #{w\ 1555}#
                         #{s\ 1556}#
                         #{mod\ 1557}#)
                       (if (memv #{type\ 1551}# (quote (global-call)))
                         (#{chi-application\ 461}#
                           (#{build-global-reference\ 306}#
                             (#{source-annotation\ 351}# (car #{e\ 1553}#))
                             (if (#{syntax-object?\ 336}# #{value\ 1552}#)
                               (#{syntax-object-expression\ 338}#
                                 #{value\ 1552}#)
                               #{value\ 1552}#)
                             (if (#{syntax-object?\ 336}# #{value\ 1552}#)
                               (#{syntax-object-module\ 342}# #{value\ 1552}#)
                               #{mod\ 1557}#))
                           #{e\ 1553}#
                           #{r\ 1554}#
                           #{w\ 1555}#
                           #{s\ 1556}#
                           #{mod\ 1557}#)
                         (if (memv #{type\ 1551}# (quote (constant)))
                           (#{build-data\ 322}#
                             #{s\ 1556}#
                             (#{strip\ 483}#
                               (#{source-wrap\ 443}#
                                 #{e\ 1553}#
                                 #{w\ 1555}#
                                 #{s\ 1556}#
                                 #{mod\ 1557}#)
                               '(())))
                           (if (memv #{type\ 1551}# (quote (global)))
                             (#{build-global-reference\ 306}#
                               #{s\ 1556}#
                               #{value\ 1552}#
                               #{mod\ 1557}#)
                             (if (memv #{type\ 1551}# (quote (call)))
                               (#{chi-application\ 461}#
                                 (#{chi\ 457}#
                                   (car #{e\ 1553}#)
                                   #{r\ 1554}#
                                   #{w\ 1555}#
                                   #{mod\ 1557}#)
                                 #{e\ 1553}#
                                 #{r\ 1554}#
                                 #{w\ 1555}#
                                 #{s\ 1556}#
                                 #{mod\ 1557}#)
                               (if (memv #{type\ 1551}# (quote (begin-form)))
                                 ((lambda (#{tmp\ 1587}#)
                                    ((lambda (#{tmp\ 1588}#)
                                       (if #{tmp\ 1588}#
                                         (apply (lambda (#{_\ 1592}#
                                                         #{e1\ 1593}#
                                                         #{e2\ 1594}#)
                                                  (#{chi-sequence\ 445}#
                                                    (cons #{e1\ 1593}#
                                                          #{e2\ 1594}#)
                                                    #{r\ 1554}#
                                                    #{w\ 1555}#
                                                    #{s\ 1556}#
                                                    #{mod\ 1557}#))
                                                #{tmp\ 1588}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 1587}#)))
                                     ($sc-dispatch
                                       #{tmp\ 1587}#
                                       '(any any . each-any))))
                                  #{e\ 1553}#)
                                 (if (memv #{type\ 1551}#
                                           '(local-syntax-form))
                                   (#{chi-local-syntax\ 467}#
                                     #{value\ 1552}#
                                     #{e\ 1553}#
                                     #{r\ 1554}#
                                     #{w\ 1555}#
                                     #{s\ 1556}#
                                     #{mod\ 1557}#
                                     #{chi-sequence\ 445}#)
                                   (if (memv #{type\ 1551}#
                                             '(eval-when-form))
                                     ((lambda (#{tmp\ 1598}#)
                                        ((lambda (#{tmp\ 1599}#)
                                           (if #{tmp\ 1599}#
                                             (apply (lambda (#{_\ 1604}#
                                                             #{x\ 1605}#
                                                             #{e1\ 1606}#
                                                             #{e2\ 1607}#)
                                                      (let ((#{when-list\ 1609}#
                                                              (#{chi-when-list\ 451}#
                                                                #{e\ 1553}#
                                                                #{x\ 1605}#
                                                                #{w\ 1555}#)))
                                                        (if (memq 'eval
                                                                  #{when-list\ 1609}#)
                                                          (#{chi-sequence\ 445}#
                                                            (cons #{e1\ 1606}#
                                                                  #{e2\ 1607}#)
                                                            #{r\ 1554}#
                                                            #{w\ 1555}#
                                                            #{s\ 1556}#
                                                            #{mod\ 1557}#)
                                                          (#{chi-void\ 471}#))))
                                                    #{tmp\ 1599}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{tmp\ 1598}#)))
                                         ($sc-dispatch
                                           #{tmp\ 1598}#
                                           '(any each-any any . each-any))))
                                      #{e\ 1553}#)
                                     (if (memv #{type\ 1551}#
                                               '(define-form
                                                  define-syntax-form))
                                       (syntax-violation
                                         #f
                                         "definition in expression context"
                                         #{e\ 1553}#
                                         (#{wrap\ 441}#
                                           #{value\ 1552}#
                                           #{w\ 1555}#
                                           #{mod\ 1557}#))
                                       (if (memv #{type\ 1551}#
                                                 '(syntax))
                                         (syntax-violation
                                           #f
                                           "reference to pattern variable outside syntax form"
                                           (#{source-wrap\ 443}#
                                             #{e\ 1553}#
                                             #{w\ 1555}#
                                             #{s\ 1556}#
                                             #{mod\ 1557}#))
                                         (if (memv #{type\ 1551}#
                                                   '(displaced-lexical))
                                           (syntax-violation
                                             #f
                                             "reference to identifier outside its scope"
                                             (#{source-wrap\ 443}#
                                               #{e\ 1553}#
                                               #{w\ 1555}#
                                               #{s\ 1556}#
                                               #{mod\ 1557}#))
                                           (syntax-violation
                                             #f
                                             "unexpected syntax"
                                             (#{source-wrap\ 443}#
                                               #{e\ 1553}#
                                               #{w\ 1555}#
                                               #{s\ 1556}#
                                               #{mod\ 1557}#))))))))))))))))))
           (#{chi\ 457}#
             (lambda (#{e\ 1616}#
                      #{r\ 1617}#
                      #{w\ 1618}#
                      #{mod\ 1619}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 453}#
                     #{e\ 1616}#
                     #{r\ 1617}#
                     #{w\ 1618}#
                     (#{source-annotation\ 351}# #{e\ 1616}#)
                     #f
                     #{mod\ 1619}#
                     #f))
                 (lambda (#{type\ 1624}#
                          #{value\ 1625}#
                          #{e\ 1626}#
                          #{w\ 1627}#
                          #{s\ 1628}#
                          #{mod\ 1629}#)
                   (#{chi-expr\ 459}#
                     #{type\ 1624}#
                     #{value\ 1625}#
                     #{e\ 1626}#
                     #{r\ 1617}#
                     #{w\ 1627}#
                     #{s\ 1628}#
                     #{mod\ 1629}#)))))
           (#{chi-top\ 455}#
             (lambda (#{e\ 1636}#
                      #{r\ 1637}#
                      #{w\ 1638}#
                      #{m\ 1639}#
                      #{esew\ 1640}#
                      #{mod\ 1641}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 453}#
                     #{e\ 1636}#
                     #{r\ 1637}#
                     #{w\ 1638}#
                     (#{source-annotation\ 351}# #{e\ 1636}#)
                     #f
                     #{mod\ 1641}#
                     #f))
                 (lambda (#{type\ 1662}#
                          #{value\ 1663}#
                          #{e\ 1664}#
                          #{w\ 1665}#
                          #{s\ 1666}#
                          #{mod\ 1667}#)
                   (if (memv #{type\ 1662}# (quote (begin-form)))
                     ((lambda (#{tmp\ 1675}#)
                        ((lambda (#{tmp\ 1676}#)
                           (if #{tmp\ 1676}#
                             (apply (lambda (#{_\ 1678}#) (#{chi-void\ 471}#))
                                    #{tmp\ 1676}#)
                             ((lambda (#{tmp\ 1679}#)
                                (if #{tmp\ 1679}#
                                  (apply (lambda (#{_\ 1683}#
                                                  #{e1\ 1684}#
                                                  #{e2\ 1685}#)
                                           (#{chi-top-sequence\ 447}#
                                             (cons #{e1\ 1684}# #{e2\ 1685}#)
                                             #{r\ 1637}#
                                             #{w\ 1665}#
                                             #{s\ 1666}#
                                             #{m\ 1639}#
                                             #{esew\ 1640}#
                                             #{mod\ 1667}#))
                                         #{tmp\ 1679}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 1675}#)))
                              ($sc-dispatch
                                #{tmp\ 1675}#
                                '(any any . each-any)))))
                         ($sc-dispatch #{tmp\ 1675}# (quote (any)))))
                      #{e\ 1664}#)
                     (if (memv #{type\ 1662}# (quote (local-syntax-form)))
                       (#{chi-local-syntax\ 467}#
                         #{value\ 1663}#
                         #{e\ 1664}#
                         #{r\ 1637}#
                         #{w\ 1665}#
                         #{s\ 1666}#
                         #{mod\ 1667}#
                         (lambda (#{body\ 1688}#
                                  #{r\ 1689}#
                                  #{w\ 1690}#
                                  #{s\ 1691}#
                                  #{mod\ 1692}#)
                           (#{chi-top-sequence\ 447}#
                             #{body\ 1688}#
                             #{r\ 1689}#
                             #{w\ 1690}#
                             #{s\ 1691}#
                             #{m\ 1639}#
                             #{esew\ 1640}#
                             #{mod\ 1692}#)))
                       (if (memv #{type\ 1662}# (quote (eval-when-form)))
                         ((lambda (#{tmp\ 1699}#)
                            ((lambda (#{tmp\ 1700}#)
                               (if #{tmp\ 1700}#
                                 (apply (lambda (#{_\ 1705}#
                                                 #{x\ 1706}#
                                                 #{e1\ 1707}#
                                                 #{e2\ 1708}#)
                                          (let ((#{when-list\ 1711}#
                                                  (#{chi-when-list\ 451}#
                                                    #{e\ 1664}#
                                                    #{x\ 1706}#
                                                    #{w\ 1665}#))
                                                (#{body\ 1712}#
                                                  (cons #{e1\ 1707}#
                                                        #{e2\ 1708}#)))
                                            (if (eq? #{m\ 1639}# (quote e))
                                              (if (memq 'eval
                                                        #{when-list\ 1711}#)
                                                (#{chi-top-sequence\ 447}#
                                                  #{body\ 1712}#
                                                  #{r\ 1637}#
                                                  #{w\ 1665}#
                                                  #{s\ 1666}#
                                                  (if (memq 'expand
                                                            #{when-list\ 1711}#)
                                                    'c&e
                                                    'e)
                                                  '(eval)
                                                  #{mod\ 1667}#)
                                                (begin
                                                  (if (memq 'expand
                                                            #{when-list\ 1711}#)
                                                    (#{top-level-eval-hook\ 281}#
                                                      (#{chi-top-sequence\ 447}#
                                                        #{body\ 1712}#
                                                        #{r\ 1637}#
                                                        #{w\ 1665}#
                                                        #{s\ 1666}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1667}#)
                                                      #{mod\ 1667}#))
                                                  (#{chi-void\ 471}#)))
                                              (if (memq 'load
                                                        #{when-list\ 1711}#)
                                                (if (let ((#{t\ 1721}#
                                                            (memq 'compile
                                                                  #{when-list\ 1711}#)))
                                                      (if #{t\ 1721}#
                                                        #{t\ 1721}#
                                                        (let ((#{t\ 1724}#
                                                                (memq 'expand
                                                                      #{when-list\ 1711}#)))
                                                          (if #{t\ 1724}#
                                                            #{t\ 1724}#
                                                            (if (eq? #{m\ 1639}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 1711}#)
                                                              #f)))))
                                                  (#{chi-top-sequence\ 447}#
                                                    #{body\ 1712}#
                                                    #{r\ 1637}#
                                                    #{w\ 1665}#
                                                    #{s\ 1666}#
                                                    'c&e
                                                    '(compile load)
                                                    #{mod\ 1667}#)
                                                  (if (memq #{m\ 1639}#
                                                            '(c c&e))
                                                    (#{chi-top-sequence\ 447}#
                                                      #{body\ 1712}#
                                                      #{r\ 1637}#
                                                      #{w\ 1665}#
                                                      #{s\ 1666}#
                                                      'c
                                                      '(load)
                                                      #{mod\ 1667}#)
                                                    (#{chi-void\ 471}#)))
                                                (if (let ((#{t\ 1732}#
                                                            (memq 'compile
                                                                  #{when-list\ 1711}#)))
                                                      (if #{t\ 1732}#
                                                        #{t\ 1732}#
                                                        (let ((#{t\ 1735}#
                                                                (memq 'expand
                                                                      #{when-list\ 1711}#)))
                                                          (if #{t\ 1735}#
                                                            #{t\ 1735}#
                                                            (if (eq? #{m\ 1639}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 1711}#)
                                                              #f)))))
                                                  (begin
                                                    (#{top-level-eval-hook\ 281}#
                                                      (#{chi-top-sequence\ 447}#
                                                        #{body\ 1712}#
                                                        #{r\ 1637}#
                                                        #{w\ 1665}#
                                                        #{s\ 1666}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1667}#)
                                                      #{mod\ 1667}#)
                                                    (#{chi-void\ 471}#))
                                                  (#{chi-void\ 471}#))))))
                                        #{tmp\ 1700}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{tmp\ 1699}#)))
                             ($sc-dispatch
                               #{tmp\ 1699}#
                               '(any each-any any . each-any))))
                          #{e\ 1664}#)
                         (if (memv #{type\ 1662}#
                                   '(define-syntax-form))
                           (let ((#{n\ 1743}#
                                   (#{id-var-name\ 429}#
                                     #{value\ 1663}#
                                     #{w\ 1665}#))
                                 (#{r\ 1744}#
                                   (#{macros-only-env\ 364}# #{r\ 1637}#)))
                             (if (memv #{m\ 1639}# (quote (c)))
                               (if (memq (quote compile) #{esew\ 1640}#)
                                 (let ((#{e\ 1747}#
                                         (#{chi-install-global\ 449}#
                                           #{n\ 1743}#
                                           (#{chi\ 457}#
                                             #{e\ 1664}#
                                             #{r\ 1744}#
                                             #{w\ 1665}#
                                             #{mod\ 1667}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 281}#
                                       #{e\ 1747}#
                                       #{mod\ 1667}#)
                                     (if (memq (quote load) #{esew\ 1640}#)
                                       #{e\ 1747}#
                                       (#{chi-void\ 471}#))))
                                 (if (memq (quote load) #{esew\ 1640}#)
                                   (#{chi-install-global\ 449}#
                                     #{n\ 1743}#
                                     (#{chi\ 457}#
                                       #{e\ 1664}#
                                       #{r\ 1744}#
                                       #{w\ 1665}#
                                       #{mod\ 1667}#))
                                   (#{chi-void\ 471}#)))
                               (if (memv #{m\ 1639}# (quote (c&e)))
                                 (let ((#{e\ 1750}#
                                         (#{chi-install-global\ 449}#
                                           #{n\ 1743}#
                                           (#{chi\ 457}#
                                             #{e\ 1664}#
                                             #{r\ 1744}#
                                             #{w\ 1665}#
                                             #{mod\ 1667}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 281}#
                                       #{e\ 1750}#
                                       #{mod\ 1667}#)
                                     #{e\ 1750}#))
                                 (begin
                                   (if (memq (quote eval) #{esew\ 1640}#)
                                     (#{top-level-eval-hook\ 281}#
                                       (#{chi-install-global\ 449}#
                                         #{n\ 1743}#
                                         (#{chi\ 457}#
                                           #{e\ 1664}#
                                           #{r\ 1744}#
                                           #{w\ 1665}#
                                           #{mod\ 1667}#))
                                       #{mod\ 1667}#))
                                   (#{chi-void\ 471}#)))))
                           (if (memv #{type\ 1662}# (quote (define-form)))
                             (let ((#{n\ 1755}#
                                     (#{id-var-name\ 429}#
                                       #{value\ 1663}#
                                       #{w\ 1665}#)))
                               (let ((#{type\ 1757}#
                                       (#{binding-type\ 355}#
                                         (#{lookup\ 366}#
                                           #{n\ 1755}#
                                           #{r\ 1637}#
                                           #{mod\ 1667}#))))
                                 (if (memv #{type\ 1757}#
                                           '(global core macro module-ref))
                                   (begin
                                     (if (if (memq #{m\ 1639}# (quote (c c&e)))
                                           (if (not (module-local-variable
                                                      (current-module)
                                                      #{n\ 1755}#))
                                             (current-module)
                                             #f)
                                           #f)
                                       (let ((#{old\ 1763}#
                                               (module-variable
                                                 (current-module)
                                                 #{n\ 1755}#)))
                                         (module-define!
                                           (current-module)
                                           #{n\ 1755}#
                                           (if (variable? #{old\ 1763}#)
                                             (variable-ref #{old\ 1763}#)
                                             #f))))
                                     (let ((#{x\ 1766}#
                                             (#{build-global-definition\ 312}#
                                               #{s\ 1666}#
                                               #{n\ 1755}#
                                               (#{chi\ 457}#
                                                 #{e\ 1664}#
                                                 #{r\ 1637}#
                                                 #{w\ 1665}#
                                                 #{mod\ 1667}#))))
                                       (begin
                                         (if (eq? #{m\ 1639}# (quote c&e))
                                           (#{top-level-eval-hook\ 281}#
                                             #{x\ 1766}#
                                             #{mod\ 1667}#))
                                         #{x\ 1766}#)))
                                   (if (memv #{type\ 1757}#
                                             '(displaced-lexical))
                                     (syntax-violation
                                       #f
                                       "identifier out of context"
                                       #{e\ 1664}#
                                       (#{wrap\ 441}#
                                         #{value\ 1663}#
                                         #{w\ 1665}#
                                         #{mod\ 1667}#))
                                     (syntax-violation
                                       #f
                                       "cannot define keyword at top level"
                                       #{e\ 1664}#
                                       (#{wrap\ 441}#
                                         #{value\ 1663}#
                                         #{w\ 1665}#
                                         #{mod\ 1667}#))))))
                             (let ((#{x\ 1772}#
                                     (#{chi-expr\ 459}#
                                       #{type\ 1662}#
                                       #{value\ 1663}#
                                       #{e\ 1664}#
                                       #{r\ 1637}#
                                       #{w\ 1665}#
                                       #{s\ 1666}#
                                       #{mod\ 1667}#)))
                               (begin
                                 (if (eq? #{m\ 1639}# (quote c&e))
                                   (#{top-level-eval-hook\ 281}#
                                     #{x\ 1772}#
                                     #{mod\ 1667}#))
                                 #{x\ 1772}#)))))))))))
           (#{syntax-type\ 453}#
             (lambda (#{e\ 1773}#
                      #{r\ 1774}#
                      #{w\ 1775}#
                      #{s\ 1776}#
                      #{rib\ 1777}#
                      #{mod\ 1778}#
                      #{for-car?\ 1779}#)
               (if (symbol? #{e\ 1773}#)
                 (let ((#{n\ 1791}#
                         (#{id-var-name\ 429}# #{e\ 1773}# #{w\ 1775}#)))
                   (let ((#{b\ 1793}#
                           (#{lookup\ 366}#
                             #{n\ 1791}#
                             #{r\ 1774}#
                             #{mod\ 1778}#)))
                     (let ((#{type\ 1795}#
                             (#{binding-type\ 355}# #{b\ 1793}#)))
                       (if (memv #{type\ 1795}# (quote (lexical)))
                         (values
                           #{type\ 1795}#
                           (#{binding-value\ 357}# #{b\ 1793}#)
                           #{e\ 1773}#
                           #{w\ 1775}#
                           #{s\ 1776}#
                           #{mod\ 1778}#)
                         (if (memv #{type\ 1795}# (quote (global)))
                           (values
                             #{type\ 1795}#
                             #{n\ 1791}#
                             #{e\ 1773}#
                             #{w\ 1775}#
                             #{s\ 1776}#
                             #{mod\ 1778}#)
                           (if (memv #{type\ 1795}# (quote (macro)))
                             (if #{for-car?\ 1779}#
                               (values
                                 #{type\ 1795}#
                                 (#{binding-value\ 357}# #{b\ 1793}#)
                                 #{e\ 1773}#
                                 #{w\ 1775}#
                                 #{s\ 1776}#
                                 #{mod\ 1778}#)
                               (#{syntax-type\ 453}#
                                 (#{chi-macro\ 463}#
                                   (#{binding-value\ 357}# #{b\ 1793}#)
                                   #{e\ 1773}#
                                   #{r\ 1774}#
                                   #{w\ 1775}#
                                   #{s\ 1776}#
                                   #{rib\ 1777}#
                                   #{mod\ 1778}#)
                                 #{r\ 1774}#
                                 '(())
                                 #{s\ 1776}#
                                 #{rib\ 1777}#
                                 #{mod\ 1778}#
                                 #f))
                             (values
                               #{type\ 1795}#
                               (#{binding-value\ 357}# #{b\ 1793}#)
                               #{e\ 1773}#
                               #{w\ 1775}#
                               #{s\ 1776}#
                               #{mod\ 1778}#)))))))
                 (if (pair? #{e\ 1773}#)
                   (let ((#{first\ 1804}# (car #{e\ 1773}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 453}#
                           #{first\ 1804}#
                           #{r\ 1774}#
                           #{w\ 1775}#
                           #{s\ 1776}#
                           #{rib\ 1777}#
                           #{mod\ 1778}#
                           #t))
                       (lambda (#{ftype\ 1805}#
                                #{fval\ 1806}#
                                #{fe\ 1807}#
                                #{fw\ 1808}#
                                #{fs\ 1809}#
                                #{fmod\ 1810}#)
                         (if (memv #{ftype\ 1805}# (quote (lexical)))
                           (values
                             'lexical-call
                             #{fval\ 1806}#
                             #{e\ 1773}#
                             #{w\ 1775}#
                             #{s\ 1776}#
                             #{mod\ 1778}#)
                           (if (memv #{ftype\ 1805}# (quote (global)))
                             (values
                               'global-call
                               (#{make-syntax-object\ 334}#
                                 #{fval\ 1806}#
                                 #{w\ 1775}#
                                 #{fmod\ 1810}#)
                               #{e\ 1773}#
                               #{w\ 1775}#
                               #{s\ 1776}#
                               #{mod\ 1778}#)
                             (if (memv #{ftype\ 1805}# (quote (macro)))
                               (#{syntax-type\ 453}#
                                 (#{chi-macro\ 463}#
                                   #{fval\ 1806}#
                                   #{e\ 1773}#
                                   #{r\ 1774}#
                                   #{w\ 1775}#
                                   #{s\ 1776}#
                                   #{rib\ 1777}#
                                   #{mod\ 1778}#)
                                 #{r\ 1774}#
                                 '(())
                                 #{s\ 1776}#
                                 #{rib\ 1777}#
                                 #{mod\ 1778}#
                                 #{for-car?\ 1779}#)
                               (if (memv #{ftype\ 1805}# (quote (module-ref)))
                                 (call-with-values
                                   (lambda ()
                                     (#{fval\ 1806}#
                                       #{e\ 1773}#
                                       #{r\ 1774}#
                                       #{w\ 1775}#))
                                   (lambda (#{e\ 1822}#
                                            #{r\ 1823}#
                                            #{w\ 1824}#
                                            #{s\ 1825}#
                                            #{mod\ 1826}#)
                                     (#{syntax-type\ 453}#
                                       #{e\ 1822}#
                                       #{r\ 1823}#
                                       #{w\ 1824}#
                                       #{s\ 1825}#
                                       #{rib\ 1777}#
                                       #{mod\ 1826}#
                                       #{for-car?\ 1779}#)))
                                 (if (memv #{ftype\ 1805}# (quote (core)))
                                   (values
                                     'core-form
                                     #{fval\ 1806}#
                                     #{e\ 1773}#
                                     #{w\ 1775}#
                                     #{s\ 1776}#
                                     #{mod\ 1778}#)
                                   (if (memv #{ftype\ 1805}#
                                             '(local-syntax))
                                     (values
                                       'local-syntax-form
                                       #{fval\ 1806}#
                                       #{e\ 1773}#
                                       #{w\ 1775}#
                                       #{s\ 1776}#
                                       #{mod\ 1778}#)
                                     (if (memv #{ftype\ 1805}# (quote (begin)))
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 1773}#
                                         #{w\ 1775}#
                                         #{s\ 1776}#
                                         #{mod\ 1778}#)
                                       (if (memv #{ftype\ 1805}#
                                                 '(eval-when))
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 1773}#
                                           #{w\ 1775}#
                                           #{s\ 1776}#
                                           #{mod\ 1778}#)
                                         (if (memv #{ftype\ 1805}#
                                                   '(define))
                                           ((lambda (#{tmp\ 1837}#)
                                              ((lambda (#{tmp\ 1838}#)
                                                 (if (if #{tmp\ 1838}#
                                                       (apply (lambda (#{_\ 1842}#
                                                                       #{name\ 1843}#
                                                                       #{val\ 1844}#)
                                                                (#{id?\ 372}#
                                                                  #{name\ 1843}#))
                                                              #{tmp\ 1838}#)
                                                       #f)
                                                   (apply (lambda (#{_\ 1848}#
                                                                   #{name\ 1849}#
                                                                   #{val\ 1850}#)
                                                            (values
                                                              'define-form
                                                              #{name\ 1849}#
                                                              #{val\ 1850}#
                                                              #{w\ 1775}#
                                                              #{s\ 1776}#
                                                              #{mod\ 1778}#))
                                                          #{tmp\ 1838}#)
                                                   ((lambda (#{tmp\ 1851}#)
                                                      (if (if #{tmp\ 1851}#
                                                            (apply (lambda (#{_\ 1857}#
                                                                            #{name\ 1858}#
                                                                            #{args\ 1859}#
                                                                            #{e1\ 1860}#
                                                                            #{e2\ 1861}#)
                                                                     (if (#{id?\ 372}#
                                                                           #{name\ 1858}#)
                                                                       (#{valid-bound-ids?\ 435}#
                                                                         (#{lambda-var-list\ 487}#
                                                                           #{args\ 1859}#))
                                                                       #f))
                                                                   #{tmp\ 1851}#)
                                                            #f)
                                                        (apply (lambda (#{_\ 1869}#
                                                                        #{name\ 1870}#
                                                                        #{args\ 1871}#
                                                                        #{e1\ 1872}#
                                                                        #{e2\ 1873}#)
                                                                 (values
                                                                   'define-form
                                                                   (#{wrap\ 441}#
                                                                     #{name\ 1870}#
                                                                     #{w\ 1775}#
                                                                     #{mod\ 1778}#)
                                                                   (#{decorate-source\ 290}#
                                                                     (cons '#(syntax-object
                                                                              lambda
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(_
                                                                                   name
                                                                                   args
                                                                                   e1
                                                                                   e2)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1864"
                                                                                   "i1865"
                                                                                   "i1866"
                                                                                   "i1867"
                                                                                   "i1868"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(ftype
                                                                                   fval
                                                                                   fe
                                                                                   fw
                                                                                   fs
                                                                                   fmod)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1811"
                                                                                   "i1812"
                                                                                   "i1813"
                                                                                   "i1814"
                                                                                   "i1815"
                                                                                   "i1816"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(first)
                                                                                 #((top))
                                                                                 #("i1803"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(e
                                                                                   r
                                                                                   w
                                                                                   s
                                                                                   rib
                                                                                   mod
                                                                                   for-car?)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1780"
                                                                                   "i1781"
                                                                                   "i1782"
                                                                                   "i1783"
                                                                                   "i1784"
                                                                                   "i1785"
                                                                                   "i1786"))
                                                                               #(ribcage
                                                                                 (lambda-var-list
                                                                                   gen-var
                                                                                   strip
                                                                                   chi-lambda-case
                                                                                   lambda*-formals
                                                                                   chi-simple-lambda
                                                                                   lambda-formals
                                                                                   ellipsis?
                                                                                   chi-void
                                                                                   eval-local-transformer
                                                                                   chi-local-syntax
                                                                                   chi-body
                                                                                   chi-macro
                                                                                   chi-application
                                                                                   chi-expr
                                                                                   chi
                                                                                   chi-top
                                                                                   syntax-type
                                                                                   chi-when-list
                                                                                   chi-install-global
                                                                                   chi-top-sequence
                                                                                   chi-sequence
                                                                                   source-wrap
                                                                                   wrap
                                                                                   bound-id-member?
                                                                                   distinct-bound-ids?
                                                                                   valid-bound-ids?
                                                                                   bound-id=?
                                                                                   free-id=?
                                                                                   id-var-name
                                                                                   same-marks?
                                                                                   join-marks
                                                                                   join-wraps
                                                                                   smart-append
                                                                                   make-binding-wrap
                                                                                   extend-ribcage!
                                                                                   make-empty-ribcage
                                                                                   new-mark
                                                                                   anti-mark
                                                                                   the-anti-mark
                                                                                   top-marked?
                                                                                   top-wrap
                                                                                   empty-wrap
                                                                                   set-ribcage-labels!
                                                                                   set-ribcage-marks!
                                                                                   set-ribcage-symnames!
                                                                                   ribcage-labels
                                                                                   ribcage-marks
                                                                                   ribcage-symnames
                                                                                   ribcage?
                                                                                   make-ribcage
                                                                                   gen-labels
                                                                                   gen-label
                                                                                   make-rename
                                                                                   rename-marks
                                                                                   rename-new
                                                                                   rename-old
                                                                                   subst-rename?
                                                                                   wrap-subst
                                                                                   wrap-marks
                                                                                   make-wrap
                                                                                   id-sym-name&marks
                                                                                   id-sym-name
                                                                                   id?
                                                                                   nonsymbol-id?
                                                                                   global-extend
                                                                                   lookup
                                                                                   macros-only-env
                                                                                   extend-var-env
                                                                                   extend-env
                                                                                   null-env
                                                                                   binding-value
                                                                                   binding-type
                                                                                   make-binding
                                                                                   arg-check
                                                                                   source-annotation
                                                                                   no-source
                                                                                   set-syntax-object-module!
                                                                                   set-syntax-object-wrap!
                                                                                   set-syntax-object-expression!
                                                                                   syntax-object-module
                                                                                   syntax-object-wrap
                                                                                   syntax-object-expression
                                                                                   syntax-object?
                                                                                   make-syntax-object
                                                                                   build-lexical-var
                                                                                   build-letrec
                                                                                   build-named-let
                                                                                   build-let
                                                                                   build-sequence
                                                                                   build-data
                                                                                   build-primref
                                                                                   build-lambda-case
                                                                                   build-case-lambda
                                                                                   build-simple-lambda
                                                                                   build-global-definition
                                                                                   maybe-name-value!
                                                                                   build-global-assignment
                                                                                   build-global-reference
                                                                                   analyze-variable
                                                                                   build-lexical-assignment
                                                                                   build-lexical-reference
                                                                                   build-dynlet
                                                                                   build-conditional
                                                                                   build-application
                                                                                   build-void
                                                                                   decorate-source
                                                                                   get-global-definition-hook
                                                                                   put-global-definition-hook
                                                                                   gensym-hook
                                                                                   local-eval-hook
                                                                                   top-level-eval-hook
                                                                                   fx<
                                                                                   fx=
                                                                                   fx-
                                                                                   fx+
                                                                                   set-lambda-meta!
                                                                                   lambda-meta
                                                                                   lambda?
                                                                                   make-dynlet
                                                                                   make-letrec
                                                                                   make-let
                                                                                   make-lambda-case
                                                                                   make-lambda
                                                                                   make-sequence
                                                                                   make-application
                                                                                   make-conditional
                                                                                   make-toplevel-define
                                                                                   make-toplevel-set
                                                                                   make-toplevel-ref
                                                                                   make-module-set
                                                                                   make-module-ref
                                                                                   make-lexical-set
                                                                                   make-lexical-ref
                                                                                   make-primitive-ref
                                                                                   make-const
                                                                                   make-void)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i486"
                                                                                  "i484"
                                                                                  "i482"
                                                                                  "i480"
                                                                                  "i478"
                                                                                  "i476"
                                                                                  "i474"
                                                                                  "i472"
                                                                                  "i470"
                                                                                  "i468"
                                                                                  "i466"
                                                                                  "i464"
                                                                                  "i462"
                                                                                  "i460"
                                                                                  "i458"
                                                                                  "i456"
                                                                                  "i454"
                                                                                  "i452"
                                                                                  "i450"
                                                                                  "i448"
                                                                                  "i446"
                                                                                  "i444"
                                                                                  "i442"
                                                                                  "i440"
                                                                                  "i438"
                                                                                  "i436"
                                                                                  "i434"
                                                                                  "i432"
                                                                                  "i430"
                                                                                  "i428"
                                                                                  "i426"
                                                                                  "i424"
                                                                                  "i422"
                                                                                  "i420"
                                                                                  "i418"
                                                                                  "i416"
                                                                                  "i415"
                                                                                  "i414"
                                                                                  "i412"
                                                                                  "i411"
                                                                                  "i410"
                                                                                  "i409"
                                                                                  "i408"
                                                                                  "i406"
                                                                                  "i404"
                                                                                  "i402"
                                                                                  "i400"
                                                                                  "i398"
                                                                                  "i396"
                                                                                  "i394"
                                                                                  "i392"
                                                                                  "i389"
                                                                                  "i387"
                                                                                  "i386"
                                                                                  "i385"
                                                                                  "i384"
                                                                                  "i383"
                                                                                  "i382"
                                                                                  "i380"
                                                                                  "i378"
                                                                                  "i376"
                                                                                  "i374"
                                                                                  "i373"
                                                                                  "i371"
                                                                                  "i369"
                                                                                  "i367"
                                                                                  "i365"
                                                                                  "i363"
                                                                                  "i361"
                                                                                  "i359"
                                                                                  "i358"
                                                                                  "i356"
                                                                                  "i354"
                                                                                  "i353"
                                                                                  "i352"
                                                                                  "i350"
                                                                                  "i349"
                                                                                  "i347"
                                                                                  "i345"
                                                                                  "i343"
                                                                                  "i341"
                                                                                  "i339"
                                                                                  "i337"
                                                                                  "i335"
                                                                                  "i333"
                                                                                  "i331"
                                                                                  "i329"
                                                                                  "i327"
                                                                                  "i325"
                                                                                  "i323"
                                                                                  "i321"
                                                                                  "i319"
                                                                                  "i317"
                                                                                  "i315"
                                                                                  "i313"
                                                                                  "i311"
                                                                                  "i309"
                                                                                  "i307"
                                                                                  "i305"
                                                                                  "i303"
                                                                                  "i301"
                                                                                  "i299"
                                                                                  "i297"
                                                                                  "i295"
                                                                                  "i293"
                                                                                  "i291"
                                                                                  "i289"
                                                                                  "i287"
                                                                                  "i285"
                                                                                  "i284"
                                                                                  "i282"
                                                                                  "i280"
                                                                                  "i278"
                                                                                  "i276"
                                                                                  "i274"
                                                                                  "i272"
                                                                                  "i270"
                                                                                  "i268"
                                                                                  "i266"
                                                                                  "i263"
                                                                                  "i261"
                                                                                  "i259"
                                                                                  "i257"
                                                                                  "i255"
                                                                                  "i253"
                                                                                  "i251"
                                                                                  "i249"
                                                                                  "i247"
                                                                                  "i245"
                                                                                  "i243"
                                                                                  "i241"
                                                                                  "i239"
                                                                                  "i237"
                                                                                  "i235"
                                                                                  "i233"
                                                                                  "i231"
                                                                                  "i229"))
                                                                               #(ribcage
                                                                                 (define-structure
                                                                                   define-expansion-accessors
                                                                                   define-expansion-constructors
                                                                                   and-map*)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i23"
                                                                                  "i22"
                                                                                  "i21"
                                                                                  "i19")))
                                                                              (hygiene
                                                                                guile))
                                                                           (#{wrap\ 441}#
                                                                             (cons #{args\ 1871}#
                                                                                   (cons #{e1\ 1872}#
                                                                                         #{e2\ 1873}#))
                                                                             #{w\ 1775}#
                                                                             #{mod\ 1778}#))
                                                                     #{s\ 1776}#)
                                                                   '(())
                                                                   #{s\ 1776}#
                                                                   #{mod\ 1778}#))
                                                               #{tmp\ 1851}#)
                                                        ((lambda (#{tmp\ 1876}#)
                                                           (if (if #{tmp\ 1876}#
                                                                 (apply (lambda (#{_\ 1879}#
                                                                                 #{name\ 1880}#)
                                                                          (#{id?\ 372}#
                                                                            #{name\ 1880}#))
                                                                        #{tmp\ 1876}#)
                                                                 #f)
                                                             (apply (lambda (#{_\ 1883}#
                                                                             #{name\ 1884}#)
                                                                      (values
                                                                        'define-form
                                                                        (#{wrap\ 441}#
                                                                          #{name\ 1884}#
                                                                          #{w\ 1775}#
                                                                          #{mod\ 1778}#)
                                                                        '(#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1881"
                                                                                 "i1882"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1811"
                                                                                 "i1812"
                                                                                 "i1813"
                                                                                 "i1814"
                                                                                 "i1815"
                                                                                 "i1816"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1803"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1780"
                                                                                 "i1781"
                                                                                 "i1782"
                                                                                 "i1783"
                                                                                 "i1784"
                                                                                 "i1785"
                                                                                 "i1786"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 set-lambda-meta!
                                                                                 lambda-meta
                                                                                 lambda?
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i486"
                                                                                "i484"
                                                                                "i482"
                                                                                "i480"
                                                                                "i478"
                                                                                "i476"
                                                                                "i474"
                                                                                "i472"
                                                                                "i470"
                                                                                "i468"
                                                                                "i466"
                                                                                "i464"
                                                                                "i462"
                                                                                "i460"
                                                                                "i458"
                                                                                "i456"
                                                                                "i454"
                                                                                "i452"
                                                                                "i450"
                                                                                "i448"
                                                                                "i446"
                                                                                "i444"
                                                                                "i442"
                                                                                "i440"
                                                                                "i438"
                                                                                "i436"
                                                                                "i434"
                                                                                "i432"
                                                                                "i430"
                                                                                "i428"
                                                                                "i426"
                                                                                "i424"
                                                                                "i422"
                                                                                "i420"
                                                                                "i418"
                                                                                "i416"
                                                                                "i415"
                                                                                "i414"
                                                                                "i412"
                                                                                "i411"
                                                                                "i410"
                                                                                "i409"
                                                                                "i408"
                                                                                "i406"
                                                                                "i404"
                                                                                "i402"
                                                                                "i400"
                                                                                "i398"
                                                                                "i396"
                                                                                "i394"
                                                                                "i392"
                                                                                "i389"
                                                                                "i387"
                                                                                "i386"
                                                                                "i385"
                                                                                "i384"
                                                                                "i383"
                                                                                "i382"
                                                                                "i380"
                                                                                "i378"
                                                                                "i376"
                                                                                "i374"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i367"
                                                                                "i365"
                                                                                "i363"
                                                                                "i361"
                                                                                "i359"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i353"
                                                                                "i352"
                                                                                "i350"
                                                                                "i349"
                                                                                "i347"
                                                                                "i345"
                                                                                "i343"
                                                                                "i341"
                                                                                "i339"
                                                                                "i337"
                                                                                "i335"
                                                                                "i333"
                                                                                "i331"
                                                                                "i329"
                                                                                "i327"
                                                                                "i325"
                                                                                "i323"
                                                                                "i321"
                                                                                "i319"
                                                                                "i317"
                                                                                "i315"
                                                                                "i313"
                                                                                "i311"
                                                                                "i309"
                                                                                "i307"
                                                                                "i305"
                                                                                "i303"
                                                                                "i301"
                                                                                "i299"
                                                                                "i297"
                                                                                "i295"
                                                                                "i293"
                                                                                "i291"
                                                                                "i289"
                                                                                "i287"
                                                                                "i285"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i278"
                                                                                "i276"
                                                                                "i274"
                                                                                "i272"
                                                                                "i270"
                                                                                "i268"
                                                                                "i266"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i229"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-accessors
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i23"
                                                                                "i22"
                                                                                "i21"
                                                                                "i19")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1881"
                                                                                 "i1882"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1811"
                                                                                 "i1812"
                                                                                 "i1813"
                                                                                 "i1814"
                                                                                 "i1815"
                                                                                 "i1816"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1803"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1780"
                                                                                 "i1781"
                                                                                 "i1782"
                                                                                 "i1783"
                                                                                 "i1784"
                                                                                 "i1785"
                                                                                 "i1786"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 set-lambda-meta!
                                                                                 lambda-meta
                                                                                 lambda?
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i486"
                                                                                "i484"
                                                                                "i482"
                                                                                "i480"
                                                                                "i478"
                                                                                "i476"
                                                                                "i474"
                                                                                "i472"
                                                                                "i470"
                                                                                "i468"
                                                                                "i466"
                                                                                "i464"
                                                                                "i462"
                                                                                "i460"
                                                                                "i458"
                                                                                "i456"
                                                                                "i454"
                                                                                "i452"
                                                                                "i450"
                                                                                "i448"
                                                                                "i446"
                                                                                "i444"
                                                                                "i442"
                                                                                "i440"
                                                                                "i438"
                                                                                "i436"
                                                                                "i434"
                                                                                "i432"
                                                                                "i430"
                                                                                "i428"
                                                                                "i426"
                                                                                "i424"
                                                                                "i422"
                                                                                "i420"
                                                                                "i418"
                                                                                "i416"
                                                                                "i415"
                                                                                "i414"
                                                                                "i412"
                                                                                "i411"
                                                                                "i410"
                                                                                "i409"
                                                                                "i408"
                                                                                "i406"
                                                                                "i404"
                                                                                "i402"
                                                                                "i400"
                                                                                "i398"
                                                                                "i396"
                                                                                "i394"
                                                                                "i392"
                                                                                "i389"
                                                                                "i387"
                                                                                "i386"
                                                                                "i385"
                                                                                "i384"
                                                                                "i383"
                                                                                "i382"
                                                                                "i380"
                                                                                "i378"
                                                                                "i376"
                                                                                "i374"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i367"
                                                                                "i365"
                                                                                "i363"
                                                                                "i361"
                                                                                "i359"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i353"
                                                                                "i352"
                                                                                "i350"
                                                                                "i349"
                                                                                "i347"
                                                                                "i345"
                                                                                "i343"
                                                                                "i341"
                                                                                "i339"
                                                                                "i337"
                                                                                "i335"
                                                                                "i333"
                                                                                "i331"
                                                                                "i329"
                                                                                "i327"
                                                                                "i325"
                                                                                "i323"
                                                                                "i321"
                                                                                "i319"
                                                                                "i317"
                                                                                "i315"
                                                                                "i313"
                                                                                "i311"
                                                                                "i309"
                                                                                "i307"
                                                                                "i305"
                                                                                "i303"
                                                                                "i301"
                                                                                "i299"
                                                                                "i297"
                                                                                "i295"
                                                                                "i293"
                                                                                "i291"
                                                                                "i289"
                                                                                "i287"
                                                                                "i285"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i278"
                                                                                "i276"
                                                                                "i274"
                                                                                "i272"
                                                                                "i270"
                                                                                "i268"
                                                                                "i266"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i229"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-accessors
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i23"
                                                                                "i22"
                                                                                "i21"
                                                                                "i19")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1881"
                                                                                 "i1882"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1811"
                                                                                 "i1812"
                                                                                 "i1813"
                                                                                 "i1814"
                                                                                 "i1815"
                                                                                 "i1816"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1803"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1780"
                                                                                 "i1781"
                                                                                 "i1782"
                                                                                 "i1783"
                                                                                 "i1784"
                                                                                 "i1785"
                                                                                 "i1786"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 set-lambda-meta!
                                                                                 lambda-meta
                                                                                 lambda?
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i486"
                                                                                "i484"
                                                                                "i482"
                                                                                "i480"
                                                                                "i478"
                                                                                "i476"
                                                                                "i474"
                                                                                "i472"
                                                                                "i470"
                                                                                "i468"
                                                                                "i466"
                                                                                "i464"
                                                                                "i462"
                                                                                "i460"
                                                                                "i458"
                                                                                "i456"
                                                                                "i454"
                                                                                "i452"
                                                                                "i450"
                                                                                "i448"
                                                                                "i446"
                                                                                "i444"
                                                                                "i442"
                                                                                "i440"
                                                                                "i438"
                                                                                "i436"
                                                                                "i434"
                                                                                "i432"
                                                                                "i430"
                                                                                "i428"
                                                                                "i426"
                                                                                "i424"
                                                                                "i422"
                                                                                "i420"
                                                                                "i418"
                                                                                "i416"
                                                                                "i415"
                                                                                "i414"
                                                                                "i412"
                                                                                "i411"
                                                                                "i410"
                                                                                "i409"
                                                                                "i408"
                                                                                "i406"
                                                                                "i404"
                                                                                "i402"
                                                                                "i400"
                                                                                "i398"
                                                                                "i396"
                                                                                "i394"
                                                                                "i392"
                                                                                "i389"
                                                                                "i387"
                                                                                "i386"
                                                                                "i385"
                                                                                "i384"
                                                                                "i383"
                                                                                "i382"
                                                                                "i380"
                                                                                "i378"
                                                                                "i376"
                                                                                "i374"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i367"
                                                                                "i365"
                                                                                "i363"
                                                                                "i361"
                                                                                "i359"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i353"
                                                                                "i352"
                                                                                "i350"
                                                                                "i349"
                                                                                "i347"
                                                                                "i345"
                                                                                "i343"
                                                                                "i341"
                                                                                "i339"
                                                                                "i337"
                                                                                "i335"
                                                                                "i333"
                                                                                "i331"
                                                                                "i329"
                                                                                "i327"
                                                                                "i325"
                                                                                "i323"
                                                                                "i321"
                                                                                "i319"
                                                                                "i317"
                                                                                "i315"
                                                                                "i313"
                                                                                "i311"
                                                                                "i309"
                                                                                "i307"
                                                                                "i305"
                                                                                "i303"
                                                                                "i301"
                                                                                "i299"
                                                                                "i297"
                                                                                "i295"
                                                                                "i293"
                                                                                "i291"
                                                                                "i289"
                                                                                "i287"
                                                                                "i285"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i278"
                                                                                "i276"
                                                                                "i274"
                                                                                "i272"
                                                                                "i270"
                                                                                "i268"
                                                                                "i266"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i229"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-accessors
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i23"
                                                                                "i22"
                                                                                "i21"
                                                                                "i19")))
                                                                            (hygiene
                                                                              guile)))
                                                                        '(())
                                                                        #{s\ 1776}#
                                                                        #{mod\ 1778}#))
                                                                    #{tmp\ 1876}#)
                                                             (syntax-violation
                                                               #f
                                                               "source expression failed to match any pattern"
                                                               #{tmp\ 1837}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 1837}#
                                                           '(any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1837}#
                                                      '(any (any . any)
                                                            any
                                                            .
                                                            each-any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1837}#
                                                 '(any any any))))
                                            #{e\ 1773}#)
                                           (if (memv #{ftype\ 1805}#
                                                     '(define-syntax))
                                             ((lambda (#{tmp\ 1887}#)
                                                ((lambda (#{tmp\ 1888}#)
                                                   (if (if #{tmp\ 1888}#
                                                         (apply (lambda (#{_\ 1892}#
                                                                         #{name\ 1893}#
                                                                         #{val\ 1894}#)
                                                                  (#{id?\ 372}#
                                                                    #{name\ 1893}#))
                                                                #{tmp\ 1888}#)
                                                         #f)
                                                     (apply (lambda (#{_\ 1898}#
                                                                     #{name\ 1899}#
                                                                     #{val\ 1900}#)
                                                              (values
                                                                'define-syntax-form
                                                                #{name\ 1899}#
                                                                #{val\ 1900}#
                                                                #{w\ 1775}#
                                                                #{s\ 1776}#
                                                                #{mod\ 1778}#))
                                                            #{tmp\ 1888}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 1887}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 1887}#
                                                   '(any any any))))
                                              #{e\ 1773}#)
                                             (values
                                               'call
                                               #f
                                               #{e\ 1773}#
                                               #{w\ 1775}#
                                               #{s\ 1776}#
                                               #{mod\ 1778}#))))))))))))))
                   (if (#{syntax-object?\ 336}# #{e\ 1773}#)
                     (#{syntax-type\ 453}#
                       (#{syntax-object-expression\ 338}# #{e\ 1773}#)
                       #{r\ 1774}#
                       (#{join-wraps\ 423}#
                         #{w\ 1775}#
                         (#{syntax-object-wrap\ 340}# #{e\ 1773}#))
                       (let ((#{t\ 1906}#
                               (#{source-annotation\ 351}# #{e\ 1773}#)))
                         (if #{t\ 1906}# #{t\ 1906}# #{s\ 1776}#))
                       #{rib\ 1777}#
                       (let ((#{t\ 1910}#
                               (#{syntax-object-module\ 342}# #{e\ 1773}#)))
                         (if #{t\ 1910}# #{t\ 1910}# #{mod\ 1778}#))
                       #{for-car?\ 1779}#)
                     (if (self-evaluating? #{e\ 1773}#)
                       (values
                         'constant
                         #f
                         #{e\ 1773}#
                         #{w\ 1775}#
                         #{s\ 1776}#
                         #{mod\ 1778}#)
                       (values
                         'other
                         #f
                         #{e\ 1773}#
                         #{w\ 1775}#
                         #{s\ 1776}#
                         #{mod\ 1778}#)))))))
           (#{chi-when-list\ 451}#
             (lambda (#{e\ 1915}# #{when-list\ 1916}# #{w\ 1917}#)
               (letrec ((#{f\ 1924}#
                          (lambda (#{when-list\ 1925}# #{situations\ 1926}#)
                            (if (null? #{when-list\ 1925}#)
                              #{situations\ 1926}#
                              (#{f\ 1924}#
                                (cdr #{when-list\ 1925}#)
                                (cons (let ((#{x\ 1928}#
                                              (car #{when-list\ 1925}#)))
                                        (if (#{free-id=?\ 431}#
                                              #{x\ 1928}#
                                              '#(syntax-object
                                                 compile
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i1927"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i1921" "i1922" "i1923"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i1918" "i1919" "i1920"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      maybe-name-value!
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i486"
                                                     "i484"
                                                     "i482"
                                                     "i480"
                                                     "i478"
                                                     "i476"
                                                     "i474"
                                                     "i472"
                                                     "i470"
                                                     "i468"
                                                     "i466"
                                                     "i464"
                                                     "i462"
                                                     "i460"
                                                     "i458"
                                                     "i456"
                                                     "i454"
                                                     "i452"
                                                     "i450"
                                                     "i448"
                                                     "i446"
                                                     "i444"
                                                     "i442"
                                                     "i440"
                                                     "i438"
                                                     "i436"
                                                     "i434"
                                                     "i432"
                                                     "i430"
                                                     "i428"
                                                     "i426"
                                                     "i424"
                                                     "i422"
                                                     "i420"
                                                     "i418"
                                                     "i416"
                                                     "i415"
                                                     "i414"
                                                     "i412"
                                                     "i411"
                                                     "i410"
                                                     "i409"
                                                     "i408"
                                                     "i406"
                                                     "i404"
                                                     "i402"
                                                     "i400"
                                                     "i398"
                                                     "i396"
                                                     "i394"
                                                     "i392"
                                                     "i389"
                                                     "i387"
                                                     "i386"
                                                     "i385"
                                                     "i384"
                                                     "i383"
                                                     "i382"
                                                     "i380"
                                                     "i378"
                                                     "i376"
                                                     "i374"
                                                     "i373"
                                                     "i371"
                                                     "i369"
                                                     "i367"
                                                     "i365"
                                                     "i363"
                                                     "i361"
                                                     "i359"
                                                     "i358"
                                                     "i356"
                                                     "i354"
                                                     "i353"
                                                     "i352"
                                                     "i350"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i329"
                                                     "i327"
                                                     "i325"
                                                     "i323"
                                                     "i321"
                                                     "i319"
                                                     "i317"
                                                     "i315"
                                                     "i313"
                                                     "i311"
                                                     "i309"
                                                     "i307"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i293"
                                                     "i291"
                                                     "i289"
                                                     "i287"
                                                     "i285"
                                                     "i284"
                                                     "i282"
                                                     "i280"
                                                     "i278"
                                                     "i276"
                                                     "i274"
                                                     "i272"
                                                     "i270"
                                                     "i268"
                                                     "i266"
                                                     "i263"
                                                     "i261"
                                                     "i259"
                                                     "i257"
                                                     "i255"
                                                     "i253"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i243"
                                                     "i241"
                                                     "i239"
                                                     "i237"
                                                     "i235"
                                                     "i233"
                                                     "i231"
                                                     "i229"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top) (top))
                                                    ("i23" "i22" "i21" "i19")))
                                                 (hygiene guile)))
                                          'compile
                                          (if (#{free-id=?\ 431}#
                                                #{x\ 1928}#
                                                '#(syntax-object
                                                   load
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i1927"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f when-list situations)
                                                      #((top) (top) (top))
                                                      #("i1921"
                                                        "i1922"
                                                        "i1923"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e when-list w)
                                                      #((top) (top) (top))
                                                      #("i1918"
                                                        "i1919"
                                                        "i1920"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i486"
                                                       "i484"
                                                       "i482"
                                                       "i480"
                                                       "i478"
                                                       "i476"
                                                       "i474"
                                                       "i472"
                                                       "i470"
                                                       "i468"
                                                       "i466"
                                                       "i464"
                                                       "i462"
                                                       "i460"
                                                       "i458"
                                                       "i456"
                                                       "i454"
                                                       "i452"
                                                       "i450"
                                                       "i448"
                                                       "i446"
                                                       "i444"
                                                       "i442"
                                                       "i440"
                                                       "i438"
                                                       "i436"
                                                       "i434"
                                                       "i432"
                                                       "i430"
                                                       "i428"
                                                       "i426"
                                                       "i424"
                                                       "i422"
                                                       "i420"
                                                       "i418"
                                                       "i416"
                                                       "i415"
                                                       "i414"
                                                       "i412"
                                                       "i411"
                                                       "i410"
                                                       "i409"
                                                       "i408"
                                                       "i406"
                                                       "i404"
                                                       "i402"
                                                       "i400"
                                                       "i398"
                                                       "i396"
                                                       "i394"
                                                       "i392"
                                                       "i389"
                                                       "i387"
                                                       "i386"
                                                       "i385"
                                                       "i384"
                                                       "i383"
                                                       "i382"
                                                       "i380"
                                                       "i378"
                                                       "i376"
                                                       "i374"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i367"
                                                       "i365"
                                                       "i363"
                                                       "i361"
                                                       "i359"
                                                       "i358"
                                                       "i356"
                                                       "i354"
                                                       "i353"
                                                       "i352"
                                                       "i350"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i329"
                                                       "i327"
                                                       "i325"
                                                       "i323"
                                                       "i321"
                                                       "i319"
                                                       "i317"
                                                       "i315"
                                                       "i313"
                                                       "i311"
                                                       "i309"
                                                       "i307"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i291"
                                                       "i289"
                                                       "i287"
                                                       "i285"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i278"
                                                       "i276"
                                                       "i274"
                                                       "i272"
                                                       "i270"
                                                       "i268"
                                                       "i266"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"
                                                       "i237"
                                                       "i235"
                                                       "i233"
                                                       "i231"
                                                       "i229"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i23"
                                                       "i22"
                                                       "i21"
                                                       "i19")))
                                                   (hygiene guile)))
                                            'load
                                            (if (#{free-id=?\ 431}#
                                                  #{x\ 1928}#
                                                  '#(syntax-object
                                                     eval
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i1927"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f
                                                          when-list
                                                          situations)
                                                        #((top) (top) (top))
                                                        #("i1921"
                                                          "i1922"
                                                          "i1923"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(e when-list w)
                                                        #((top) (top) (top))
                                                        #("i1918"
                                                          "i1919"
                                                          "i1920"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          chi-lambda-case
                                                          lambda*-formals
                                                          chi-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          chi-void
                                                          eval-local-transformer
                                                          chi-local-syntax
                                                          chi-body
                                                          chi-macro
                                                          chi-application
                                                          chi-expr
                                                          chi
                                                          chi-top
                                                          syntax-type
                                                          chi-when-list
                                                          chi-install-global
                                                          chi-top-sequence
                                                          chi-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          maybe-name-value!
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i486"
                                                         "i484"
                                                         "i482"
                                                         "i480"
                                                         "i478"
                                                         "i476"
                                                         "i474"
                                                         "i472"
                                                         "i470"
                                                         "i468"
                                                         "i466"
                                                         "i464"
                                                         "i462"
                                                         "i460"
                                                         "i458"
                                                         "i456"
                                                         "i454"
                                                         "i452"
                                                         "i450"
                                                         "i448"
                                                         "i446"
                                                         "i444"
                                                         "i442"
                                                         "i440"
                                                         "i438"
                                                         "i436"
                                                         "i434"
                                                         "i432"
                                                         "i430"
                                                         "i428"
                                                         "i426"
                                                         "i424"
                                                         "i422"
                                                         "i420"
                                                         "i418"
                                                         "i416"
                                                         "i415"
                                                         "i414"
                                                         "i412"
                                                         "i411"
                                                         "i410"
                                                         "i409"
                                                         "i408"
                                                         "i406"
                                                         "i404"
                                                         "i402"
                                                         "i400"
                                                         "i398"
                                                         "i396"
                                                         "i394"
                                                         "i392"
                                                         "i389"
                                                         "i387"
                                                         "i386"
                                                         "i385"
                                                         "i384"
                                                         "i383"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i373"
                                                         "i371"
                                                         "i369"
                                                         "i367"
                                                         "i365"
                                                         "i363"
                                                         "i361"
                                                         "i359"
                                                         "i358"
                                                         "i356"
                                                         "i354"
                                                         "i353"
                                                         "i352"
                                                         "i350"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i329"
                                                         "i327"
                                                         "i325"
                                                         "i323"
                                                         "i321"
                                                         "i319"
                                                         "i317"
                                                         "i315"
                                                         "i313"
                                                         "i311"
                                                         "i309"
                                                         "i307"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i284"
                                                         "i282"
                                                         "i280"
                                                         "i278"
                                                         "i276"
                                                         "i274"
                                                         "i272"
                                                         "i270"
                                                         "i268"
                                                         "i266"
                                                         "i263"
                                                         "i261"
                                                         "i259"
                                                         "i257"
                                                         "i255"
                                                         "i253"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i243"
                                                         "i241"
                                                         "i239"
                                                         "i237"
                                                         "i235"
                                                         "i233"
                                                         "i231"
                                                         "i229"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors
                                                          and-map*)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i23"
                                                         "i22"
                                                         "i21"
                                                         "i19")))
                                                     (hygiene guile)))
                                              'eval
                                              (if (#{free-id=?\ 431}#
                                                    #{x\ 1928}#
                                                    '#(syntax-object
                                                       expand
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i1927"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f
                                                            when-list
                                                            situations)
                                                          #((top) (top) (top))
                                                          #("i1921"
                                                            "i1922"
                                                            "i1923"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(e when-list w)
                                                          #((top) (top) (top))
                                                          #("i1918"
                                                            "i1919"
                                                            "i1920"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            chi-lambda-case
                                                            lambda*-formals
                                                            chi-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            chi-void
                                                            eval-local-transformer
                                                            chi-local-syntax
                                                            chi-body
                                                            chi-macro
                                                            chi-application
                                                            chi-expr
                                                            chi
                                                            chi-top
                                                            syntax-type
                                                            chi-when-list
                                                            chi-install-global
                                                            chi-top-sequence
                                                            chi-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            maybe-name-value!
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i486"
                                                           "i484"
                                                           "i482"
                                                           "i480"
                                                           "i478"
                                                           "i476"
                                                           "i474"
                                                           "i472"
                                                           "i470"
                                                           "i468"
                                                           "i466"
                                                           "i464"
                                                           "i462"
                                                           "i460"
                                                           "i458"
                                                           "i456"
                                                           "i454"
                                                           "i452"
                                                           "i450"
                                                           "i448"
                                                           "i446"
                                                           "i444"
                                                           "i442"
                                                           "i440"
                                                           "i438"
                                                           "i436"
                                                           "i434"
                                                           "i432"
                                                           "i430"
                                                           "i428"
                                                           "i426"
                                                           "i424"
                                                           "i422"
                                                           "i420"
                                                           "i418"
                                                           "i416"
                                                           "i415"
                                                           "i414"
                                                           "i412"
                                                           "i411"
                                                           "i410"
                                                           "i409"
                                                           "i408"
                                                           "i406"
                                                           "i404"
                                                           "i402"
                                                           "i400"
                                                           "i398"
                                                           "i396"
                                                           "i394"
                                                           "i392"
                                                           "i389"
                                                           "i387"
                                                           "i386"
                                                           "i385"
                                                           "i384"
                                                           "i383"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i373"
                                                           "i371"
                                                           "i369"
                                                           "i367"
                                                           "i365"
                                                           "i363"
                                                           "i361"
                                                           "i359"
                                                           "i358"
                                                           "i356"
                                                           "i354"
                                                           "i353"
                                                           "i352"
                                                           "i350"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i329"
                                                           "i327"
                                                           "i325"
                                                           "i323"
                                                           "i321"
                                                           "i319"
                                                           "i317"
                                                           "i315"
                                                           "i313"
                                                           "i311"
                                                           "i309"
                                                           "i307"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i284"
                                                           "i282"
                                                           "i280"
                                                           "i278"
                                                           "i276"
                                                           "i274"
                                                           "i272"
                                                           "i270"
                                                           "i268"
                                                           "i266"
                                                           "i263"
                                                           "i261"
                                                           "i259"
                                                           "i257"
                                                           "i255"
                                                           "i253"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i243"
                                                           "i241"
                                                           "i239"
                                                           "i237"
                                                           "i235"
                                                           "i233"
                                                           "i231"
                                                           "i229"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors
                                                            and-map*)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i23"
                                                           "i22"
                                                           "i21"
                                                           "i19")))
                                                       (hygiene guile)))
                                                'expand
                                                (syntax-violation
                                                  'eval-when
                                                  "invalid situation"
                                                  #{e\ 1915}#
                                                  (#{wrap\ 441}#
                                                    #{x\ 1928}#
                                                    #{w\ 1917}#
                                                    #f)))))))
                                      #{situations\ 1926}#))))))
                 (#{f\ 1924}# #{when-list\ 1916}# (quote ())))))
           (#{chi-install-global\ 449}#
             (lambda (#{name\ 1938}# #{e\ 1939}#)
               (#{build-global-definition\ 312}#
                 #f
                 #{name\ 1938}#
                 (#{build-application\ 294}#
                   #f
                   (#{build-primref\ 320}#
                     #f
                     'make-syntax-transformer)
                   (list (#{build-data\ 322}# #f #{name\ 1938}#)
                         (#{build-data\ 322}# #f (quote macro))
                         #{e\ 1939}#)))))
           (#{chi-top-sequence\ 447}#
             (lambda (#{body\ 1947}#
                      #{r\ 1948}#
                      #{w\ 1949}#
                      #{s\ 1950}#
                      #{m\ 1951}#
                      #{esew\ 1952}#
                      #{mod\ 1953}#)
               (#{build-sequence\ 324}#
                 #{s\ 1950}#
                 (letrec ((#{dobody\ 1969}#
                            (lambda (#{body\ 1970}#
                                     #{r\ 1971}#
                                     #{w\ 1972}#
                                     #{m\ 1973}#
                                     #{esew\ 1974}#
                                     #{mod\ 1975}#
                                     #{out\ 1976}#)
                              (if (null? #{body\ 1970}#)
                                (reverse #{out\ 1976}#)
                                (#{dobody\ 1969}#
                                  (cdr #{body\ 1970}#)
                                  #{r\ 1971}#
                                  #{w\ 1972}#
                                  #{m\ 1973}#
                                  #{esew\ 1974}#
                                  #{mod\ 1975}#
                                  (cons (#{chi-top\ 455}#
                                          (car #{body\ 1970}#)
                                          #{r\ 1971}#
                                          #{w\ 1972}#
                                          #{m\ 1973}#
                                          #{esew\ 1974}#
                                          #{mod\ 1975}#)
                                        #{out\ 1976}#))))))
                   (#{dobody\ 1969}#
                     #{body\ 1947}#
                     #{r\ 1948}#
                     #{w\ 1949}#
                     #{m\ 1951}#
                     #{esew\ 1952}#
                     #{mod\ 1953}#
                     '())))))
           (#{chi-sequence\ 445}#
             (lambda (#{body\ 1977}#
                      #{r\ 1978}#
                      #{w\ 1979}#
                      #{s\ 1980}#
                      #{mod\ 1981}#)
               (#{build-sequence\ 324}#
                 #{s\ 1980}#
                 (letrec ((#{dobody\ 1992}#
                            (lambda (#{body\ 1993}#
                                     #{r\ 1994}#
                                     #{w\ 1995}#
                                     #{mod\ 1996}#)
                              (if (null? #{body\ 1993}#)
                                '()
                                (let ((#{first\ 1998}#
                                        (#{chi\ 457}#
                                          (car #{body\ 1993}#)
                                          #{r\ 1994}#
                                          #{w\ 1995}#
                                          #{mod\ 1996}#)))
                                  (cons #{first\ 1998}#
                                        (#{dobody\ 1992}#
                                          (cdr #{body\ 1993}#)
                                          #{r\ 1994}#
                                          #{w\ 1995}#
                                          #{mod\ 1996}#)))))))
                   (#{dobody\ 1992}#
                     #{body\ 1977}#
                     #{r\ 1978}#
                     #{w\ 1979}#
                     #{mod\ 1981}#)))))
           (#{source-wrap\ 443}#
             (lambda (#{x\ 1999}#
                      #{w\ 2000}#
                      #{s\ 2001}#
                      #{defmod\ 2002}#)
               (#{wrap\ 441}#
                 (#{decorate-source\ 290}#
                   #{x\ 1999}#
                   #{s\ 2001}#)
                 #{w\ 2000}#
                 #{defmod\ 2002}#)))
           (#{wrap\ 441}#
             (lambda (#{x\ 2007}# #{w\ 2008}# #{defmod\ 2009}#)
               (if (if (null? (#{wrap-marks\ 379}# #{w\ 2008}#))
                     (null? (#{wrap-subst\ 381}# #{w\ 2008}#))
                     #f)
                 #{x\ 2007}#
                 (if (#{syntax-object?\ 336}# #{x\ 2007}#)
                   (#{make-syntax-object\ 334}#
                     (#{syntax-object-expression\ 338}# #{x\ 2007}#)
                     (#{join-wraps\ 423}#
                       #{w\ 2008}#
                       (#{syntax-object-wrap\ 340}# #{x\ 2007}#))
                     (#{syntax-object-module\ 342}# #{x\ 2007}#))
                   (if (null? #{x\ 2007}#)
                     #{x\ 2007}#
                     (#{make-syntax-object\ 334}#
                       #{x\ 2007}#
                       #{w\ 2008}#
                       #{defmod\ 2009}#))))))
           (#{bound-id-member?\ 439}#
             (lambda (#{x\ 2022}# #{list\ 2023}#)
               (if (not (null? #{list\ 2023}#))
                 (let ((#{t\ 2030}#
                         (#{bound-id=?\ 433}#
                           #{x\ 2022}#
                           (car #{list\ 2023}#))))
                   (if #{t\ 2030}#
                     #{t\ 2030}#
                     (#{bound-id-member?\ 439}#
                       #{x\ 2022}#
                       (cdr #{list\ 2023}#))))
                 #f)))
           (#{distinct-bound-ids?\ 437}#
             (lambda (#{ids\ 2032}#)
               (letrec ((#{distinct?\ 2036}#
                          (lambda (#{ids\ 2037}#)
                            (let ((#{t\ 2040}# (null? #{ids\ 2037}#)))
                              (if #{t\ 2040}#
                                #{t\ 2040}#
                                (if (not (#{bound-id-member?\ 439}#
                                           (car #{ids\ 2037}#)
                                           (cdr #{ids\ 2037}#)))
                                  (#{distinct?\ 2036}# (cdr #{ids\ 2037}#))
                                  #f))))))
                 (#{distinct?\ 2036}# #{ids\ 2032}#))))
           (#{valid-bound-ids?\ 435}#
             (lambda (#{ids\ 2044}#)
               (if (letrec ((#{all-ids?\ 2049}#
                              (lambda (#{ids\ 2050}#)
                                (let ((#{t\ 2053}# (null? #{ids\ 2050}#)))
                                  (if #{t\ 2053}#
                                    #{t\ 2053}#
                                    (if (#{id?\ 372}# (car #{ids\ 2050}#))
                                      (#{all-ids?\ 2049}# (cdr #{ids\ 2050}#))
                                      #f))))))
                     (#{all-ids?\ 2049}# #{ids\ 2044}#))
                 (#{distinct-bound-ids?\ 437}# #{ids\ 2044}#)
                 #f)))
           (#{bound-id=?\ 433}#
             (lambda (#{i\ 2058}# #{j\ 2059}#)
               (if (if (#{syntax-object?\ 336}# #{i\ 2058}#)
                     (#{syntax-object?\ 336}# #{j\ 2059}#)
                     #f)
                 (if (eq? (#{syntax-object-expression\ 338}# #{i\ 2058}#)
                          (#{syntax-object-expression\ 338}# #{j\ 2059}#))
                   (#{same-marks?\ 427}#
                     (#{wrap-marks\ 379}#
                       (#{syntax-object-wrap\ 340}# #{i\ 2058}#))
                     (#{wrap-marks\ 379}#
                       (#{syntax-object-wrap\ 340}# #{j\ 2059}#)))
                   #f)
                 (eq? #{i\ 2058}# #{j\ 2059}#))))
           (#{free-id=?\ 431}#
             (lambda (#{i\ 2066}# #{j\ 2067}#)
               (if (eq? (let ((#{x\ 2073}# #{i\ 2066}#))
                          (if (#{syntax-object?\ 336}# #{x\ 2073}#)
                            (#{syntax-object-expression\ 338}# #{x\ 2073}#)
                            #{x\ 2073}#))
                        (let ((#{x\ 2076}# #{j\ 2067}#))
                          (if (#{syntax-object?\ 336}# #{x\ 2076}#)
                            (#{syntax-object-expression\ 338}# #{x\ 2076}#)
                            #{x\ 2076}#)))
                 (eq? (#{id-var-name\ 429}# #{i\ 2066}# (quote (())))
                      (#{id-var-name\ 429}# #{j\ 2067}# (quote (()))))
                 #f)))
           (#{id-var-name\ 429}#
             (lambda (#{id\ 2080}# #{w\ 2081}#)
               (letrec ((#{search-vector-rib\ 2090}#
                          (lambda (#{sym\ 2102}#
                                   #{subst\ 2103}#
                                   #{marks\ 2104}#
                                   #{symnames\ 2105}#
                                   #{ribcage\ 2106}#)
                            (let ((#{n\ 2113}#
                                    (vector-length #{symnames\ 2105}#)))
                              (letrec ((#{f\ 2116}#
                                         (lambda (#{i\ 2117}#)
                                           (if (#{fx=\ 277}#
                                                 #{i\ 2117}#
                                                 #{n\ 2113}#)
                                             (#{search\ 2086}#
                                               #{sym\ 2102}#
                                               (cdr #{subst\ 2103}#)
                                               #{marks\ 2104}#)
                                             (if (if (eq? (vector-ref
                                                            #{symnames\ 2105}#
                                                            #{i\ 2117}#)
                                                          #{sym\ 2102}#)
                                                   (#{same-marks?\ 427}#
                                                     #{marks\ 2104}#
                                                     (vector-ref
                                                       (#{ribcage-marks\ 399}#
                                                         #{ribcage\ 2106}#)
                                                       #{i\ 2117}#))
                                                   #f)
                                               (values
                                                 (vector-ref
                                                   (#{ribcage-labels\ 401}#
                                                     #{ribcage\ 2106}#)
                                                   #{i\ 2117}#)
                                                 #{marks\ 2104}#)
                                               (#{f\ 2116}#
                                                 (#{fx+\ 273}#
                                                   #{i\ 2117}#
                                                   1)))))))
                                (#{f\ 2116}# 0)))))
                        (#{search-list-rib\ 2088}#
                          (lambda (#{sym\ 2125}#
                                   #{subst\ 2126}#
                                   #{marks\ 2127}#
                                   #{symnames\ 2128}#
                                   #{ribcage\ 2129}#)
                            (letrec ((#{f\ 2138}#
                                       (lambda (#{symnames\ 2139}# #{i\ 2140}#)
                                         (if (null? #{symnames\ 2139}#)
                                           (#{search\ 2086}#
                                             #{sym\ 2125}#
                                             (cdr #{subst\ 2126}#)
                                             #{marks\ 2127}#)
                                           (if (if (eq? (car #{symnames\ 2139}#)
                                                        #{sym\ 2125}#)
                                                 (#{same-marks?\ 427}#
                                                   #{marks\ 2127}#
                                                   (list-ref
                                                     (#{ribcage-marks\ 399}#
                                                       #{ribcage\ 2129}#)
                                                     #{i\ 2140}#))
                                                 #f)
                                             (values
                                               (list-ref
                                                 (#{ribcage-labels\ 401}#
                                                   #{ribcage\ 2129}#)
                                                 #{i\ 2140}#)
                                               #{marks\ 2127}#)
                                             (#{f\ 2138}#
                                               (cdr #{symnames\ 2139}#)
                                               (#{fx+\ 273}#
                                                 #{i\ 2140}#
                                                 1)))))))
                              (#{f\ 2138}# #{symnames\ 2128}# 0))))
                        (#{search\ 2086}#
                          (lambda (#{sym\ 2148}#
                                   #{subst\ 2149}#
                                   #{marks\ 2150}#)
                            (if (null? #{subst\ 2149}#)
                              (values #f #{marks\ 2150}#)
                              (let ((#{fst\ 2155}# (car #{subst\ 2149}#)))
                                (if (eq? #{fst\ 2155}# (quote shift))
                                  (#{search\ 2086}#
                                    #{sym\ 2148}#
                                    (cdr #{subst\ 2149}#)
                                    (cdr #{marks\ 2150}#))
                                  (let ((#{symnames\ 2157}#
                                          (#{ribcage-symnames\ 397}#
                                            #{fst\ 2155}#)))
                                    (if (vector? #{symnames\ 2157}#)
                                      (#{search-vector-rib\ 2090}#
                                        #{sym\ 2148}#
                                        #{subst\ 2149}#
                                        #{marks\ 2150}#
                                        #{symnames\ 2157}#
                                        #{fst\ 2155}#)
                                      (#{search-list-rib\ 2088}#
                                        #{sym\ 2148}#
                                        #{subst\ 2149}#
                                        #{marks\ 2150}#
                                        #{symnames\ 2157}#
                                        #{fst\ 2155}#)))))))))
                 (if (symbol? #{id\ 2080}#)
                   (let ((#{t\ 2160}#
                           (call-with-values
                             (lambda ()
                               (#{search\ 2086}#
                                 #{id\ 2080}#
                                 (#{wrap-subst\ 381}# #{w\ 2081}#)
                                 (#{wrap-marks\ 379}# #{w\ 2081}#)))
                             (lambda (#{x\ 2162}# . #{ignore\ 2163}#)
                               #{x\ 2162}#))))
                     (if #{t\ 2160}# #{t\ 2160}# #{id\ 2080}#))
                   (if (#{syntax-object?\ 336}# #{id\ 2080}#)
                     (let ((#{id\ 2171}#
                             (#{syntax-object-expression\ 338}# #{id\ 2080}#))
                           (#{w1\ 2172}#
                             (#{syntax-object-wrap\ 340}# #{id\ 2080}#)))
                       (let ((#{marks\ 2174}#
                               (#{join-marks\ 425}#
                                 (#{wrap-marks\ 379}# #{w\ 2081}#)
                                 (#{wrap-marks\ 379}# #{w1\ 2172}#))))
                         (call-with-values
                           (lambda ()
                             (#{search\ 2086}#
                               #{id\ 2171}#
                               (#{wrap-subst\ 381}# #{w\ 2081}#)
                               #{marks\ 2174}#))
                           (lambda (#{new-id\ 2175}# #{marks\ 2176}#)
                             (let ((#{t\ 2181}# #{new-id\ 2175}#))
                               (if #{t\ 2181}#
                                 #{t\ 2181}#
                                 (let ((#{t\ 2184}#
                                         (call-with-values
                                           (lambda ()
                                             (#{search\ 2086}#
                                               #{id\ 2171}#
                                               (#{wrap-subst\ 381}#
                                                 #{w1\ 2172}#)
                                               #{marks\ 2176}#))
                                           (lambda (#{x\ 2186}#
                                                    .
                                                    #{ignore\ 2187}#)
                                             #{x\ 2186}#))))
                                   (if #{t\ 2184}#
                                     #{t\ 2184}#
                                     #{id\ 2171}#))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 2080}#))))))
           (#{same-marks?\ 427}#
             (lambda (#{x\ 2192}# #{y\ 2193}#)
               (let ((#{t\ 2198}# (eq? #{x\ 2192}# #{y\ 2193}#)))
                 (if #{t\ 2198}#
                   #{t\ 2198}#
                   (if (not (null? #{x\ 2192}#))
                     (if (not (null? #{y\ 2193}#))
                       (if (eq? (car #{x\ 2192}#) (car #{y\ 2193}#))
                         (#{same-marks?\ 427}#
                           (cdr #{x\ 2192}#)
                           (cdr #{y\ 2193}#))
                         #f)
                       #f)
                     #f)))))
           (#{join-marks\ 425}#
             (lambda (#{m1\ 2204}# #{m2\ 2205}#)
               (#{smart-append\ 421}# #{m1\ 2204}# #{m2\ 2205}#)))
           (#{join-wraps\ 423}#
             (lambda (#{w1\ 2208}# #{w2\ 2209}#)
               (let ((#{m1\ 2214}# (#{wrap-marks\ 379}# #{w1\ 2208}#))
                     (#{s1\ 2215}# (#{wrap-subst\ 381}# #{w1\ 2208}#)))
                 (if (null? #{m1\ 2214}#)
                   (if (null? #{s1\ 2215}#)
                     #{w2\ 2209}#
                     (#{make-wrap\ 377}#
                       (#{wrap-marks\ 379}# #{w2\ 2209}#)
                       (#{smart-append\ 421}#
                         #{s1\ 2215}#
                         (#{wrap-subst\ 381}# #{w2\ 2209}#))))
                   (#{make-wrap\ 377}#
                     (#{smart-append\ 421}#
                       #{m1\ 2214}#
                       (#{wrap-marks\ 379}# #{w2\ 2209}#))
                     (#{smart-append\ 421}#
                       #{s1\ 2215}#
                       (#{wrap-subst\ 381}# #{w2\ 2209}#)))))))
           (#{smart-append\ 421}#
             (lambda (#{m1\ 2216}# #{m2\ 2217}#)
               (if (null? #{m2\ 2217}#)
                 #{m1\ 2216}#
                 (append #{m1\ 2216}# #{m2\ 2217}#))))
           (#{make-binding-wrap\ 419}#
             (lambda (#{ids\ 2220}# #{labels\ 2221}# #{w\ 2222}#)
               (if (null? #{ids\ 2220}#)
                 #{w\ 2222}#
                 (#{make-wrap\ 377}#
                   (#{wrap-marks\ 379}# #{w\ 2222}#)
                   (cons (let ((#{labelvec\ 2227}#
                                 (list->vector #{labels\ 2221}#)))
                           (let ((#{n\ 2229}#
                                   (vector-length #{labelvec\ 2227}#)))
                             (let ((#{symnamevec\ 2232}#
                                     (make-vector #{n\ 2229}#))
                                   (#{marksvec\ 2233}#
                                     (make-vector #{n\ 2229}#)))
                               (begin
                                 (letrec ((#{f\ 2237}#
                                            (lambda (#{ids\ 2238}# #{i\ 2239}#)
                                              (if (not (null? #{ids\ 2238}#))
                                                (call-with-values
                                                  (lambda ()
                                                    (#{id-sym-name&marks\ 375}#
                                                      (car #{ids\ 2238}#)
                                                      #{w\ 2222}#))
                                                  (lambda (#{symname\ 2240}#
                                                           #{marks\ 2241}#)
                                                    (begin
                                                      (vector-set!
                                                        #{symnamevec\ 2232}#
                                                        #{i\ 2239}#
                                                        #{symname\ 2240}#)
                                                      (vector-set!
                                                        #{marksvec\ 2233}#
                                                        #{i\ 2239}#
                                                        #{marks\ 2241}#)
                                                      (#{f\ 2237}#
                                                        (cdr #{ids\ 2238}#)
                                                        (#{fx+\ 273}#
                                                          #{i\ 2239}#
                                                          1)))))))))
                                   (#{f\ 2237}# #{ids\ 2220}# 0))
                                 (#{make-ribcage\ 393}#
                                   #{symnamevec\ 2232}#
                                   #{marksvec\ 2233}#
                                   #{labelvec\ 2227}#)))))
                         (#{wrap-subst\ 381}# #{w\ 2222}#))))))
           (#{extend-ribcage!\ 417}#
             (lambda (#{ribcage\ 2244}# #{id\ 2245}# #{label\ 2246}#)
               (begin
                 (#{set-ribcage-symnames!\ 403}#
                   #{ribcage\ 2244}#
                   (cons (#{syntax-object-expression\ 338}# #{id\ 2245}#)
                         (#{ribcage-symnames\ 397}# #{ribcage\ 2244}#)))
                 (#{set-ribcage-marks!\ 405}#
                   #{ribcage\ 2244}#
                   (cons (#{wrap-marks\ 379}#
                           (#{syntax-object-wrap\ 340}# #{id\ 2245}#))
                         (#{ribcage-marks\ 399}# #{ribcage\ 2244}#)))
                 (#{set-ribcage-labels!\ 407}#
                   #{ribcage\ 2244}#
                   (cons #{label\ 2246}#
                         (#{ribcage-labels\ 401}# #{ribcage\ 2244}#))))))
           (#{anti-mark\ 413}#
             (lambda (#{w\ 2250}#)
               (#{make-wrap\ 377}#
                 (cons #f (#{wrap-marks\ 379}# #{w\ 2250}#))
                 (cons 'shift
                       (#{wrap-subst\ 381}# #{w\ 2250}#)))))
           (#{set-ribcage-labels!\ 407}#
             (lambda (#{x\ 2253}# #{update\ 2254}#)
               (vector-set! #{x\ 2253}# 3 #{update\ 2254}#)))
           (#{set-ribcage-marks!\ 405}#
             (lambda (#{x\ 2257}# #{update\ 2258}#)
               (vector-set! #{x\ 2257}# 2 #{update\ 2258}#)))
           (#{set-ribcage-symnames!\ 403}#
             (lambda (#{x\ 2261}# #{update\ 2262}#)
               (vector-set! #{x\ 2261}# 1 #{update\ 2262}#)))
           (#{ribcage-labels\ 401}#
             (lambda (#{x\ 2265}#) (vector-ref #{x\ 2265}# 3)))
           (#{ribcage-marks\ 399}#
             (lambda (#{x\ 2267}#) (vector-ref #{x\ 2267}# 2)))
           (#{ribcage-symnames\ 397}#
             (lambda (#{x\ 2269}#) (vector-ref #{x\ 2269}# 1)))
           (#{ribcage?\ 395}#
             (lambda (#{x\ 2271}#)
               (if (vector? #{x\ 2271}#)
                 (if (= (vector-length #{x\ 2271}#) 4)
                   (eq? (vector-ref #{x\ 2271}# 0) (quote ribcage))
                   #f)
                 #f)))
           (#{make-ribcage\ 393}#
             (lambda (#{symnames\ 2276}#
                      #{marks\ 2277}#
                      #{labels\ 2278}#)
               (vector
                 'ribcage
                 #{symnames\ 2276}#
                 #{marks\ 2277}#
                 #{labels\ 2278}#)))
           (#{gen-labels\ 390}#
             (lambda (#{ls\ 2282}#)
               (if (null? #{ls\ 2282}#)
                 '()
                 (cons (#{gen-label\ 388}#)
                       (#{gen-labels\ 390}# (cdr #{ls\ 2282}#))))))
           (#{gen-label\ 388}#
             (lambda () (symbol->string (gensym "i"))))
           (#{wrap-subst\ 381}# cdr)
           (#{wrap-marks\ 379}# car)
           (#{make-wrap\ 377}# cons)
           (#{id-sym-name&marks\ 375}#
             (lambda (#{x\ 2284}# #{w\ 2285}#)
               (if (#{syntax-object?\ 336}# #{x\ 2284}#)
                 (values
                   (#{syntax-object-expression\ 338}# #{x\ 2284}#)
                   (#{join-marks\ 425}#
                     (#{wrap-marks\ 379}# #{w\ 2285}#)
                     (#{wrap-marks\ 379}#
                       (#{syntax-object-wrap\ 340}# #{x\ 2284}#))))
                 (values
                   #{x\ 2284}#
                   (#{wrap-marks\ 379}# #{w\ 2285}#)))))
           (#{id?\ 372}#
             (lambda (#{x\ 2288}#)
               (if (symbol? #{x\ 2288}#)
                 #t
                 (if (#{syntax-object?\ 336}# #{x\ 2288}#)
                   (symbol?
                     (#{syntax-object-expression\ 338}# #{x\ 2288}#))
                   #f))))
           (#{nonsymbol-id?\ 370}#
             (lambda (#{x\ 2295}#)
               (if (#{syntax-object?\ 336}# #{x\ 2295}#)
                 (symbol?
                   (#{syntax-object-expression\ 338}# #{x\ 2295}#))
                 #f)))
           (#{global-extend\ 368}#
             (lambda (#{type\ 2299}# #{sym\ 2300}# #{val\ 2301}#)
               (#{put-global-definition-hook\ 286}#
                 #{sym\ 2300}#
                 #{type\ 2299}#
                 #{val\ 2301}#)))
           (#{lookup\ 366}#
             (lambda (#{x\ 2305}# #{r\ 2306}# #{mod\ 2307}#)
               (let ((#{t\ 2313}# (assq #{x\ 2305}# #{r\ 2306}#)))
                 (if #{t\ 2313}#
                   (cdr #{t\ 2313}#)
                   (if (symbol? #{x\ 2305}#)
                     (let ((#{t\ 2319}#
                             (#{get-global-definition-hook\ 288}#
                               #{x\ 2305}#
                               #{mod\ 2307}#)))
                       (if #{t\ 2319}# #{t\ 2319}# (quote (global))))
                     '(displaced-lexical))))))
           (#{macros-only-env\ 364}#
             (lambda (#{r\ 2324}#)
               (if (null? #{r\ 2324}#)
                 '()
                 (let ((#{a\ 2327}# (car #{r\ 2324}#)))
                   (if (eq? (cadr #{a\ 2327}#) (quote macro))
                     (cons #{a\ 2327}#
                           (#{macros-only-env\ 364}# (cdr #{r\ 2324}#)))
                     (#{macros-only-env\ 364}# (cdr #{r\ 2324}#)))))))
           (#{extend-var-env\ 362}#
             (lambda (#{labels\ 2328}# #{vars\ 2329}# #{r\ 2330}#)
               (if (null? #{labels\ 2328}#)
                 #{r\ 2330}#
                 (#{extend-var-env\ 362}#
                   (cdr #{labels\ 2328}#)
                   (cdr #{vars\ 2329}#)
                   (cons (cons (car #{labels\ 2328}#)
                               (cons (quote lexical) (car #{vars\ 2329}#)))
                         #{r\ 2330}#)))))
           (#{extend-env\ 360}#
             (lambda (#{labels\ 2335}# #{bindings\ 2336}# #{r\ 2337}#)
               (if (null? #{labels\ 2335}#)
                 #{r\ 2337}#
                 (#{extend-env\ 360}#
                   (cdr #{labels\ 2335}#)
                   (cdr #{bindings\ 2336}#)
                   (cons (cons (car #{labels\ 2335}#)
                               (car #{bindings\ 2336}#))
                         #{r\ 2337}#)))))
           (#{binding-value\ 357}# cdr)
           (#{binding-type\ 355}# car)
           (#{source-annotation\ 351}#
             (lambda (#{x\ 2341}#)
               (if (#{syntax-object?\ 336}# #{x\ 2341}#)
                 (#{source-annotation\ 351}#
                   (#{syntax-object-expression\ 338}# #{x\ 2341}#))
                 (if (pair? #{x\ 2341}#)
                   (let ((#{props\ 2348}# (source-properties #{x\ 2341}#)))
                     (if (pair? #{props\ 2348}#) #{props\ 2348}# #f))
                   #f))))
           (#{set-syntax-object-module!\ 348}#
             (lambda (#{x\ 2350}# #{update\ 2351}#)
               (vector-set! #{x\ 2350}# 3 #{update\ 2351}#)))
           (#{set-syntax-object-wrap!\ 346}#
             (lambda (#{x\ 2354}# #{update\ 2355}#)
               (vector-set! #{x\ 2354}# 2 #{update\ 2355}#)))
           (#{set-syntax-object-expression!\ 344}#
             (lambda (#{x\ 2358}# #{update\ 2359}#)
               (vector-set! #{x\ 2358}# 1 #{update\ 2359}#)))
           (#{syntax-object-module\ 342}#
             (lambda (#{x\ 2362}#) (vector-ref #{x\ 2362}# 3)))
           (#{syntax-object-wrap\ 340}#
             (lambda (#{x\ 2364}#) (vector-ref #{x\ 2364}# 2)))
           (#{syntax-object-expression\ 338}#
             (lambda (#{x\ 2366}#) (vector-ref #{x\ 2366}# 1)))
           (#{syntax-object?\ 336}#
             (lambda (#{x\ 2368}#)
               (if (vector? #{x\ 2368}#)
                 (if (= (vector-length #{x\ 2368}#) 4)
                   (eq? (vector-ref #{x\ 2368}# 0)
                        'syntax-object)
                   #f)
                 #f)))
           (#{make-syntax-object\ 334}#
             (lambda (#{expression\ 2373}#
                      #{wrap\ 2374}#
                      #{module\ 2375}#)
               (vector
                 'syntax-object
                 #{expression\ 2373}#
                 #{wrap\ 2374}#
                 #{module\ 2375}#)))
           (#{build-letrec\ 330}#
             (lambda (#{src\ 2379}#
                      #{ids\ 2380}#
                      #{vars\ 2381}#
                      #{val-exps\ 2382}#
                      #{body-exp\ 2383}#)
               (if (null? #{vars\ 2381}#)
                 #{body-exp\ 2383}#
                 (begin
                   (for-each
                     #{maybe-name-value!\ 310}#
                     #{ids\ 2380}#
                     #{val-exps\ 2382}#)
                   (#{make-letrec\ 262}#
                     #{src\ 2379}#
                     #{ids\ 2380}#
                     #{vars\ 2381}#
                     #{val-exps\ 2382}#
                     #{body-exp\ 2383}#)))))
           (#{build-named-let\ 328}#
             (lambda (#{src\ 2389}#
                      #{ids\ 2390}#
                      #{vars\ 2391}#
                      #{val-exps\ 2392}#
                      #{body-exp\ 2393}#)
               (let ((#{f\ 2403}# (car #{vars\ 2391}#))
                     (#{f-name\ 2404}# (car #{ids\ 2390}#))
                     (#{vars\ 2405}# (cdr #{vars\ 2391}#))
                     (#{ids\ 2406}# (cdr #{ids\ 2390}#)))
                 (let ((#{proc\ 2408}#
                         (#{build-simple-lambda\ 314}#
                           #{src\ 2389}#
                           #{ids\ 2406}#
                           #f
                           #{vars\ 2405}#
                           '()
                           #{body-exp\ 2393}#)))
                   (begin
                     (#{maybe-name-value!\ 310}#
                       #{f-name\ 2404}#
                       #{proc\ 2408}#)
                     (for-each
                       #{maybe-name-value!\ 310}#
                       #{ids\ 2406}#
                       #{val-exps\ 2392}#)
                     (#{make-letrec\ 262}#
                       #{src\ 2389}#
                       (list #{f-name\ 2404}#)
                       (list #{f\ 2403}#)
                       (list #{proc\ 2408}#)
                       (#{build-application\ 294}#
                         #{src\ 2389}#
                         (#{build-lexical-reference\ 300}#
                           'fun
                           #{src\ 2389}#
                           #{f-name\ 2404}#
                           #{f\ 2403}#)
                         #{val-exps\ 2392}#)))))))
           (#{build-let\ 326}#
             (lambda (#{src\ 2409}#
                      #{ids\ 2410}#
                      #{vars\ 2411}#
                      #{val-exps\ 2412}#
                      #{body-exp\ 2413}#)
               (begin
                 (for-each
                   #{maybe-name-value!\ 310}#
                   #{ids\ 2410}#
                   #{val-exps\ 2412}#)
                 (if (null? #{vars\ 2411}#)
                   #{body-exp\ 2413}#
                   (#{make-let\ 260}#
                     #{src\ 2409}#
                     #{ids\ 2410}#
                     #{vars\ 2411}#
                     #{val-exps\ 2412}#
                     #{body-exp\ 2413}#)))))
           (#{build-sequence\ 324}#
             (lambda (#{src\ 2419}# #{exps\ 2420}#)
               (if (null? (cdr #{exps\ 2420}#))
                 (car #{exps\ 2420}#)
                 (#{make-sequence\ 254}#
                   #{src\ 2419}#
                   #{exps\ 2420}#))))
           (#{build-data\ 322}#
             (lambda (#{src\ 2423}# #{exp\ 2424}#)
               (#{make-const\ 232}# #{src\ 2423}# #{exp\ 2424}#)))
           (#{build-primref\ 320}#
             (lambda (#{src\ 2427}# #{name\ 2428}#)
               (if (equal?
                     (module-name (current-module))
                     '(guile))
                 (#{make-toplevel-ref\ 244}#
                   #{src\ 2427}#
                   #{name\ 2428}#)
                 (#{make-module-ref\ 240}#
                   #{src\ 2427}#
                   '(guile)
                   #{name\ 2428}#
                   #f))))
           (#{build-lambda-case\ 318}#
             (lambda (#{src\ 2431}#
                      #{req\ 2432}#
                      #{opt\ 2433}#
                      #{rest\ 2434}#
                      #{kw\ 2435}#
                      #{inits\ 2436}#
                      #{vars\ 2437}#
                      #{body\ 2438}#
                      #{else-case\ 2439}#)
               (#{make-lambda-case\ 258}#
                 #{src\ 2431}#
                 #{req\ 2432}#
                 #{opt\ 2433}#
                 #{rest\ 2434}#
                 #{kw\ 2435}#
                 #{inits\ 2436}#
                 #{vars\ 2437}#
                 #{body\ 2438}#
                 #{else-case\ 2439}#)))
           (#{build-case-lambda\ 316}#
             (lambda (#{src\ 2449}# #{meta\ 2450}# #{body\ 2451}#)
               (#{make-lambda\ 256}#
                 #{src\ 2449}#
                 #{meta\ 2450}#
                 #{body\ 2451}#)))
           (#{build-simple-lambda\ 314}#
             (lambda (#{src\ 2455}#
                      #{req\ 2456}#
                      #{rest\ 2457}#
                      #{vars\ 2458}#
                      #{meta\ 2459}#
                      #{exp\ 2460}#)
               (#{make-lambda\ 256}#
                 #{src\ 2455}#
                 #{meta\ 2459}#
                 (#{make-lambda-case\ 258}#
                   #{src\ 2455}#
                   #{req\ 2456}#
                   #f
                   #{rest\ 2457}#
                   #f
                   '()
                   #{vars\ 2458}#
                   #{exp\ 2460}#
                   #f))))
           (#{build-global-definition\ 312}#
             (lambda (#{source\ 2467}# #{var\ 2468}# #{exp\ 2469}#)
               (begin
                 (#{maybe-name-value!\ 310}#
                   #{var\ 2468}#
                   #{exp\ 2469}#)
                 (#{make-toplevel-define\ 248}#
                   #{source\ 2467}#
                   #{var\ 2468}#
                   #{exp\ 2469}#))))
           (#{maybe-name-value!\ 310}#
             (lambda (#{name\ 2473}# #{val\ 2474}#)
               (if (#{lambda?\ 267}# #{val\ 2474}#)
                 (let ((#{meta\ 2478}#
                         (#{lambda-meta\ 269}# #{val\ 2474}#)))
                   (if (not (assq (quote name) #{meta\ 2478}#))
                     (#{set-lambda-meta!\ 271}#
                       #{val\ 2474}#
                       (acons 'name
                              #{name\ 2473}#
                              #{meta\ 2478}#)))))))
           (#{build-global-assignment\ 308}#
             (lambda (#{source\ 2479}#
                      #{var\ 2480}#
                      #{exp\ 2481}#
                      #{mod\ 2482}#)
               (#{analyze-variable\ 304}#
                 #{mod\ 2482}#
                 #{var\ 2480}#
                 (lambda (#{mod\ 2487}# #{var\ 2488}# #{public?\ 2489}#)
                   (#{make-module-set\ 242}#
                     #{source\ 2479}#
                     #{mod\ 2487}#
                     #{var\ 2488}#
                     #{public?\ 2489}#
                     #{exp\ 2481}#))
                 (lambda (#{var\ 2493}#)
                   (#{make-toplevel-set\ 246}#
                     #{source\ 2479}#
                     #{var\ 2493}#
                     #{exp\ 2481}#)))))
           (#{build-global-reference\ 306}#
             (lambda (#{source\ 2495}# #{var\ 2496}# #{mod\ 2497}#)
               (#{analyze-variable\ 304}#
                 #{mod\ 2497}#
                 #{var\ 2496}#
                 (lambda (#{mod\ 2501}# #{var\ 2502}# #{public?\ 2503}#)
                   (#{make-module-ref\ 240}#
                     #{source\ 2495}#
                     #{mod\ 2501}#
                     #{var\ 2502}#
                     #{public?\ 2503}#))
                 (lambda (#{var\ 2507}#)
                   (#{make-toplevel-ref\ 244}#
                     #{source\ 2495}#
                     #{var\ 2507}#)))))
           (#{analyze-variable\ 304}#
             (lambda (#{mod\ 2509}#
                      #{var\ 2510}#
                      #{modref-cont\ 2511}#
                      #{bare-cont\ 2512}#)
               (if (not #{mod\ 2509}#)
                 (#{bare-cont\ 2512}# #{var\ 2510}#)
                 (let ((#{kind\ 2519}# (car #{mod\ 2509}#))
                       (#{mod\ 2520}# (cdr #{mod\ 2509}#)))
                   (if (memv #{kind\ 2519}# (quote (public)))
                     (#{modref-cont\ 2511}#
                       #{mod\ 2520}#
                       #{var\ 2510}#
                       #t)
                     (if (memv #{kind\ 2519}# (quote (private)))
                       (if (not (equal?
                                  #{mod\ 2520}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 2511}#
                           #{mod\ 2520}#
                           #{var\ 2510}#
                           #f)
                         (#{bare-cont\ 2512}# #{var\ 2510}#))
                       (if (memv #{kind\ 2519}# (quote (bare)))
                         (#{bare-cont\ 2512}# #{var\ 2510}#)
                         (if (memv #{kind\ 2519}# (quote (hygiene)))
                           (if (if (not (equal?
                                          #{mod\ 2520}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 2520}#)
                                   #{var\ 2510}#)
                                 #f)
                             (#{modref-cont\ 2511}#
                               #{mod\ 2520}#
                               #{var\ 2510}#
                               #f)
                             (#{bare-cont\ 2512}# #{var\ 2510}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 2510}#
                             #{mod\ 2520}#)))))))))
           (#{build-lexical-assignment\ 302}#
             (lambda (#{source\ 2528}#
                      #{name\ 2529}#
                      #{var\ 2530}#
                      #{exp\ 2531}#)
               (#{make-lexical-set\ 238}#
                 #{source\ 2528}#
                 #{name\ 2529}#
                 #{var\ 2530}#
                 #{exp\ 2531}#)))
           (#{build-lexical-reference\ 300}#
             (lambda (#{type\ 2536}#
                      #{source\ 2537}#
                      #{name\ 2538}#
                      #{var\ 2539}#)
               (#{make-lexical-ref\ 236}#
                 #{source\ 2537}#
                 #{name\ 2538}#
                 #{var\ 2539}#)))
           (#{build-dynlet\ 298}#
             (lambda (#{source\ 2544}#
                      #{fluids\ 2545}#
                      #{vals\ 2546}#
                      #{body\ 2547}#)
               (#{make-dynlet\ 264}#
                 #{source\ 2544}#
                 #{fluids\ 2545}#
                 #{vals\ 2546}#
                 #{body\ 2547}#)))
           (#{build-conditional\ 296}#
             (lambda (#{source\ 2552}#
                      #{test-exp\ 2553}#
                      #{then-exp\ 2554}#
                      #{else-exp\ 2555}#)
               (#{make-conditional\ 250}#
                 #{source\ 2552}#
                 #{test-exp\ 2553}#
                 #{then-exp\ 2554}#
                 #{else-exp\ 2555}#)))
           (#{build-application\ 294}#
             (lambda (#{source\ 2560}#
                      #{fun-exp\ 2561}#
                      #{arg-exps\ 2562}#)
               (#{make-application\ 252}#
                 #{source\ 2560}#
                 #{fun-exp\ 2561}#
                 #{arg-exps\ 2562}#)))
           (#{build-void\ 292}#
             (lambda (#{source\ 2566}#)
               (#{make-void\ 230}# #{source\ 2566}#)))
           (#{decorate-source\ 290}#
             (lambda (#{e\ 2568}# #{s\ 2569}#)
               (begin
                 (if (if (pair? #{e\ 2568}#) #{s\ 2569}# #f)
                   (set-source-properties! #{e\ 2568}# #{s\ 2569}#))
                 #{e\ 2568}#)))
           (#{get-global-definition-hook\ 288}#
             (lambda (#{symbol\ 2574}# #{module\ 2575}#)
               (begin
                 (if (if (not #{module\ 2575}#) (current-module) #f)
                   (warn "module system is booted, we should have a module"
                         #{symbol\ 2574}#))
                 (let ((#{v\ 2581}#
                         (module-variable
                           (if #{module\ 2575}#
                             (resolve-module (cdr #{module\ 2575}#))
                             (current-module))
                           #{symbol\ 2574}#)))
                   (if #{v\ 2581}#
                     (if (variable-bound? #{v\ 2581}#)
                       (let ((#{val\ 2586}# (variable-ref #{v\ 2581}#)))
                         (if (macro? #{val\ 2586}#)
                           (if (macro-type #{val\ 2586}#)
                             (cons (macro-type #{val\ 2586}#)
                                   (macro-binding #{val\ 2586}#))
                             #f)
                           #f))
                       #f)
                     #f)))))
           (#{put-global-definition-hook\ 286}#
             (lambda (#{symbol\ 2590}# #{type\ 2591}# #{val\ 2592}#)
               (module-define!
                 (current-module)
                 #{symbol\ 2590}#
                 (make-syntax-transformer
                   #{symbol\ 2590}#
                   #{type\ 2591}#
                   #{val\ 2592}#))))
           (#{local-eval-hook\ 283}#
             (lambda (#{x\ 2596}# #{mod\ 2597}#)
               (primitive-eval #{x\ 2596}#)))
           (#{top-level-eval-hook\ 281}#
             (lambda (#{x\ 2600}# #{mod\ 2601}#)
               (primitive-eval #{x\ 2600}#)))
           (#{fx<\ 279}# <)
           (#{fx=\ 277}# =)
           (#{fx-\ 275}# -)
           (#{fx+\ 273}# +)
           (#{set-lambda-meta!\ 271}#
             (lambda (#{x\ 2604}# #{v\ 2605}#)
               (struct-set! #{x\ 2604}# 1 #{v\ 2605}#)))
           (#{lambda-meta\ 269}#
             (lambda (#{x\ 2608}#) (struct-ref #{x\ 2608}# 1)))
           (#{lambda?\ 267}#
             (lambda (#{x\ 2610}#)
               (if (struct? #{x\ 2610}#)
                 (eq? (struct-vtable #{x\ 2610}#)
                      (vector-ref %expanded-vtables 13))
                 #f)))
           (#{make-dynlet\ 264}#
             (lambda (#{src\ 2614}#
                      #{fluids\ 2615}#
                      #{vals\ 2616}#
                      #{body\ 2617}#)
               (make-struct
                 (vector-ref %expanded-vtables 17)
                 0
                 #{src\ 2614}#
                 #{fluids\ 2615}#
                 #{vals\ 2616}#
                 #{body\ 2617}#)))
           (#{make-letrec\ 262}#
             (lambda (#{src\ 2622}#
                      #{names\ 2623}#
                      #{gensyms\ 2624}#
                      #{vals\ 2625}#
                      #{body\ 2626}#)
               (make-struct
                 (vector-ref %expanded-vtables 16)
                 0
                 #{src\ 2622}#
                 #{names\ 2623}#
                 #{gensyms\ 2624}#
                 #{vals\ 2625}#
                 #{body\ 2626}#)))
           (#{make-let\ 260}#
             (lambda (#{src\ 2632}#
                      #{names\ 2633}#
                      #{gensyms\ 2634}#
                      #{vals\ 2635}#
                      #{body\ 2636}#)
               (make-struct
                 (vector-ref %expanded-vtables 15)
                 0
                 #{src\ 2632}#
                 #{names\ 2633}#
                 #{gensyms\ 2634}#
                 #{vals\ 2635}#
                 #{body\ 2636}#)))
           (#{make-lambda-case\ 258}#
             (lambda (#{src\ 2642}#
                      #{req\ 2643}#
                      #{opt\ 2644}#
                      #{rest\ 2645}#
                      #{kw\ 2646}#
                      #{inits\ 2647}#
                      #{gensyms\ 2648}#
                      #{body\ 2649}#
                      #{alternate\ 2650}#)
               (make-struct
                 (vector-ref %expanded-vtables 14)
                 0
                 #{src\ 2642}#
                 #{req\ 2643}#
                 #{opt\ 2644}#
                 #{rest\ 2645}#
                 #{kw\ 2646}#
                 #{inits\ 2647}#
                 #{gensyms\ 2648}#
                 #{body\ 2649}#
                 #{alternate\ 2650}#)))
           (#{make-lambda\ 256}#
             (lambda (#{src\ 2660}# #{meta\ 2661}# #{body\ 2662}#)
               (make-struct
                 (vector-ref %expanded-vtables 13)
                 0
                 #{src\ 2660}#
                 #{meta\ 2661}#
                 #{body\ 2662}#)))
           (#{make-sequence\ 254}#
             (lambda (#{src\ 2666}# #{exps\ 2667}#)
               (make-struct
                 (vector-ref %expanded-vtables 12)
                 0
                 #{src\ 2666}#
                 #{exps\ 2667}#)))
           (#{make-application\ 252}#
             (lambda (#{src\ 2670}# #{proc\ 2671}# #{args\ 2672}#)
               (make-struct
                 (vector-ref %expanded-vtables 11)
                 0
                 #{src\ 2670}#
                 #{proc\ 2671}#
                 #{args\ 2672}#)))
           (#{make-conditional\ 250}#
             (lambda (#{src\ 2676}#
                      #{test\ 2677}#
                      #{consequent\ 2678}#
                      #{alternate\ 2679}#)
               (make-struct
                 (vector-ref %expanded-vtables 10)
                 0
                 #{src\ 2676}#
                 #{test\ 2677}#
                 #{consequent\ 2678}#
                 #{alternate\ 2679}#)))
           (#{make-toplevel-define\ 248}#
             (lambda (#{src\ 2684}# #{name\ 2685}# #{exp\ 2686}#)
               (make-struct
                 (vector-ref %expanded-vtables 9)
                 0
                 #{src\ 2684}#
                 #{name\ 2685}#
                 #{exp\ 2686}#)))
           (#{make-toplevel-set\ 246}#
             (lambda (#{src\ 2690}# #{name\ 2691}# #{exp\ 2692}#)
               (make-struct
                 (vector-ref %expanded-vtables 8)
                 0
                 #{src\ 2690}#
                 #{name\ 2691}#
                 #{exp\ 2692}#)))
           (#{make-toplevel-ref\ 244}#
             (lambda (#{src\ 2696}# #{name\ 2697}#)
               (make-struct
                 (vector-ref %expanded-vtables 7)
                 0
                 #{src\ 2696}#
                 #{name\ 2697}#)))
           (#{make-module-set\ 242}#
             (lambda (#{src\ 2700}#
                      #{mod\ 2701}#
                      #{name\ 2702}#
                      #{public?\ 2703}#
                      #{exp\ 2704}#)
               (make-struct
                 (vector-ref %expanded-vtables 6)
                 0
                 #{src\ 2700}#
                 #{mod\ 2701}#
                 #{name\ 2702}#
                 #{public?\ 2703}#
                 #{exp\ 2704}#)))
           (#{make-module-ref\ 240}#
             (lambda (#{src\ 2710}#
                      #{mod\ 2711}#
                      #{name\ 2712}#
                      #{public?\ 2713}#)
               (make-struct
                 (vector-ref %expanded-vtables 5)
                 0
                 #{src\ 2710}#
                 #{mod\ 2711}#
                 #{name\ 2712}#
                 #{public?\ 2713}#)))
           (#{make-lexical-set\ 238}#
             (lambda (#{src\ 2718}#
                      #{name\ 2719}#
                      #{gensym\ 2720}#
                      #{exp\ 2721}#)
               (make-struct
                 (vector-ref %expanded-vtables 4)
                 0
                 #{src\ 2718}#
                 #{name\ 2719}#
                 #{gensym\ 2720}#
                 #{exp\ 2721}#)))
           (#{make-lexical-ref\ 236}#
             (lambda (#{src\ 2726}# #{name\ 2727}# #{gensym\ 2728}#)
               (make-struct
                 (vector-ref %expanded-vtables 3)
                 0
                 #{src\ 2726}#
                 #{name\ 2727}#
                 #{gensym\ 2728}#)))
           (#{make-primitive-ref\ 234}#
             (lambda (#{src\ 2732}# #{name\ 2733}#)
               (make-struct
                 (vector-ref %expanded-vtables 2)
                 0
                 #{src\ 2732}#
                 #{name\ 2733}#)))
           (#{make-const\ 232}#
             (lambda (#{src\ 2736}# #{exp\ 2737}#)
               (make-struct
                 (vector-ref %expanded-vtables 1)
                 0
                 #{src\ 2736}#
                 #{exp\ 2737}#)))
           (#{make-void\ 230}#
             (lambda (#{src\ 2740}#)
               (make-struct
                 (vector-ref %expanded-vtables 0)
                 0
                 #{src\ 2740}#))))
    (begin
      (#{global-extend\ 368}#
        'local-syntax
        'letrec-syntax
        #t)
      (#{global-extend\ 368}#
        'local-syntax
        'let-syntax
        #f)
      (#{global-extend\ 368}#
        'core
        'fluid-let-syntax
        (lambda (#{e\ 2742}#
                 #{r\ 2743}#
                 #{w\ 2744}#
                 #{s\ 2745}#
                 #{mod\ 2746}#)
          ((lambda (#{tmp\ 2752}#)
             ((lambda (#{tmp\ 2753}#)
                (if (if #{tmp\ 2753}#
                      (apply (lambda (#{_\ 2759}#
                                      #{var\ 2760}#
                                      #{val\ 2761}#
                                      #{e1\ 2762}#
                                      #{e2\ 2763}#)
                               (#{valid-bound-ids?\ 435}# #{var\ 2760}#))
                             #{tmp\ 2753}#)
                      #f)
                  (apply (lambda (#{_\ 2770}#
                                  #{var\ 2771}#
                                  #{val\ 2772}#
                                  #{e1\ 2773}#
                                  #{e2\ 2774}#)
                           (let ((#{names\ 2776}#
                                   (map (lambda (#{x\ 2777}#)
                                          (#{id-var-name\ 429}#
                                            #{x\ 2777}#
                                            #{w\ 2744}#))
                                        #{var\ 2771}#)))
                             (begin
                               (for-each
                                 (lambda (#{id\ 2780}# #{n\ 2781}#)
                                   (let ((#{atom-key\ 2786}#
                                           (#{binding-type\ 355}#
                                             (#{lookup\ 366}#
                                               #{n\ 2781}#
                                               #{r\ 2743}#
                                               #{mod\ 2746}#))))
                                     (if (memv #{atom-key\ 2786}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'fluid-let-syntax
                                         "identifier out of context"
                                         #{e\ 2742}#
                                         (#{source-wrap\ 443}#
                                           #{id\ 2780}#
                                           #{w\ 2744}#
                                           #{s\ 2745}#
                                           #{mod\ 2746}#)))))
                                 #{var\ 2771}#
                                 #{names\ 2776}#)
                               (#{chi-body\ 465}#
                                 (cons #{e1\ 2773}# #{e2\ 2774}#)
                                 (#{source-wrap\ 443}#
                                   #{e\ 2742}#
                                   #{w\ 2744}#
                                   #{s\ 2745}#
                                   #{mod\ 2746}#)
                                 (#{extend-env\ 360}#
                                   #{names\ 2776}#
                                   (let ((#{trans-r\ 2791}#
                                           (#{macros-only-env\ 364}#
                                             #{r\ 2743}#)))
                                     (map (lambda (#{x\ 2792}#)
                                            (cons 'macro
                                                  (#{eval-local-transformer\ 469}#
                                                    (#{chi\ 457}#
                                                      #{x\ 2792}#
                                                      #{trans-r\ 2791}#
                                                      #{w\ 2744}#
                                                      #{mod\ 2746}#)
                                                    #{mod\ 2746}#)))
                                          #{val\ 2772}#))
                                   #{r\ 2743}#)
                                 #{w\ 2744}#
                                 #{mod\ 2746}#))))
                         #{tmp\ 2753}#)
                  ((lambda (#{_\ 2797}#)
                     (syntax-violation
                       'fluid-let-syntax
                       "bad syntax"
                       (#{source-wrap\ 443}#
                         #{e\ 2742}#
                         #{w\ 2744}#
                         #{s\ 2745}#
                         #{mod\ 2746}#)))
                   #{tmp\ 2752}#)))
              ($sc-dispatch
                #{tmp\ 2752}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 2742}#)))
      (#{global-extend\ 368}#
        'core
        'quote
        (lambda (#{e\ 2798}#
                 #{r\ 2799}#
                 #{w\ 2800}#
                 #{s\ 2801}#
                 #{mod\ 2802}#)
          ((lambda (#{tmp\ 2808}#)
             ((lambda (#{tmp\ 2809}#)
                (if #{tmp\ 2809}#
                  (apply (lambda (#{_\ 2812}# #{e\ 2813}#)
                           (#{build-data\ 322}#
                             #{s\ 2801}#
                             (#{strip\ 483}# #{e\ 2813}# #{w\ 2800}#)))
                         #{tmp\ 2809}#)
                  ((lambda (#{_\ 2815}#)
                     (syntax-violation
                       'quote
                       "bad syntax"
                       (#{source-wrap\ 443}#
                         #{e\ 2798}#
                         #{w\ 2800}#
                         #{s\ 2801}#
                         #{mod\ 2802}#)))
                   #{tmp\ 2808}#)))
              ($sc-dispatch #{tmp\ 2808}# (quote (any any)))))
           #{e\ 2798}#)))
      (#{global-extend\ 368}#
        'core
        'syntax
        (letrec ((#{regen\ 2831}#
                   (lambda (#{x\ 2832}#)
                     (let ((#{atom-key\ 2836}# (car #{x\ 2832}#)))
                       (if (memv #{atom-key\ 2836}# (quote (ref)))
                         (#{build-lexical-reference\ 300}#
                           'value
                           #f
                           (cadr #{x\ 2832}#)
                           (cadr #{x\ 2832}#))
                         (if (memv #{atom-key\ 2836}# (quote (primitive)))
                           (#{build-primref\ 320}# #f (cadr #{x\ 2832}#))
                           (if (memv #{atom-key\ 2836}# (quote (quote)))
                             (#{build-data\ 322}# #f (cadr #{x\ 2832}#))
                             (if (memv #{atom-key\ 2836}# (quote (lambda)))
                               (if (list? (cadr #{x\ 2832}#))
                                 (#{build-simple-lambda\ 314}#
                                   #f
                                   (cadr #{x\ 2832}#)
                                   #f
                                   (cadr #{x\ 2832}#)
                                   '()
                                   (#{regen\ 2831}# (caddr #{x\ 2832}#)))
                                 (error "how did we get here" #{x\ 2832}#))
                               (#{build-application\ 294}#
                                 #f
                                 (#{build-primref\ 320}# #f (car #{x\ 2832}#))
                                 (map #{regen\ 2831}#
                                      (cdr #{x\ 2832}#))))))))))
                 (#{gen-vector\ 2829}#
                   (lambda (#{x\ 2848}#)
                     (if (eq? (car #{x\ 2848}#) (quote list))
                       (cons (quote vector) (cdr #{x\ 2848}#))
                       (if (eq? (car #{x\ 2848}#) (quote quote))
                         (list 'quote
                               (list->vector (cadr #{x\ 2848}#)))
                         (list (quote list->vector) #{x\ 2848}#)))))
                 (#{gen-append\ 2827}#
                   (lambda (#{x\ 2858}# #{y\ 2859}#)
                     (if (equal? #{y\ 2859}# (quote (quote ())))
                       #{x\ 2858}#
                       (list (quote append) #{x\ 2858}# #{y\ 2859}#))))
                 (#{gen-cons\ 2825}#
                   (lambda (#{x\ 2863}# #{y\ 2864}#)
                     (let ((#{atom-key\ 2869}# (car #{y\ 2864}#)))
                       (if (memv #{atom-key\ 2869}# (quote (quote)))
                         (if (eq? (car #{x\ 2863}#) (quote quote))
                           (list 'quote
                                 (cons (cadr #{x\ 2863}#) (cadr #{y\ 2864}#)))
                           (if (eq? (cadr #{y\ 2864}#) (quote ()))
                             (list (quote list) #{x\ 2863}#)
                             (list (quote cons) #{x\ 2863}# #{y\ 2864}#)))
                         (if (memv #{atom-key\ 2869}# (quote (list)))
                           (cons 'list
                                 (cons #{x\ 2863}# (cdr #{y\ 2864}#)))
                           (list (quote cons) #{x\ 2863}# #{y\ 2864}#))))))
                 (#{gen-map\ 2823}#
                   (lambda (#{e\ 2878}# #{map-env\ 2879}#)
                     (let ((#{formals\ 2884}# (map cdr #{map-env\ 2879}#))
                           (#{actuals\ 2885}#
                             (map (lambda (#{x\ 2886}#)
                                    (list (quote ref) (car #{x\ 2886}#)))
                                  #{map-env\ 2879}#)))
                       (if (eq? (car #{e\ 2878}#) (quote ref))
                         (car #{actuals\ 2885}#)
                         (if (and-map
                               (lambda (#{x\ 2893}#)
                                 (if (eq? (car #{x\ 2893}#) (quote ref))
                                   (memq (cadr #{x\ 2893}#) #{formals\ 2884}#)
                                   #f))
                               (cdr #{e\ 2878}#))
                           (cons 'map
                                 (cons (list 'primitive
                                             (car #{e\ 2878}#))
                                       (map (let ((#{r\ 2899}#
                                                    (map cons
                                                         #{formals\ 2884}#
                                                         #{actuals\ 2885}#)))
                                              (lambda (#{x\ 2900}#)
                                                (cdr (assq (cadr #{x\ 2900}#)
                                                           #{r\ 2899}#))))
                                            (cdr #{e\ 2878}#))))
                           (cons 'map
                                 (cons (list 'lambda
                                             #{formals\ 2884}#
                                             #{e\ 2878}#)
                                       #{actuals\ 2885}#)))))))
                 (#{gen-mappend\ 2821}#
                   (lambda (#{e\ 2904}# #{map-env\ 2905}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 2823}# #{e\ 2904}# #{map-env\ 2905}#))))
                 (#{gen-ref\ 2819}#
                   (lambda (#{src\ 2909}#
                            #{var\ 2910}#
                            #{level\ 2911}#
                            #{maps\ 2912}#)
                     (if (#{fx=\ 277}# #{level\ 2911}# 0)
                       (values #{var\ 2910}# #{maps\ 2912}#)
                       (if (null? #{maps\ 2912}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 2909}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 2819}#
                               #{src\ 2909}#
                               #{var\ 2910}#
                               (#{fx-\ 275}# #{level\ 2911}# 1)
                               (cdr #{maps\ 2912}#)))
                           (lambda (#{outer-var\ 2917}# #{outer-maps\ 2918}#)
                             (let ((#{b\ 2922}#
                                     (assq #{outer-var\ 2917}#
                                           (car #{maps\ 2912}#))))
                               (if #{b\ 2922}#
                                 (values (cdr #{b\ 2922}#) #{maps\ 2912}#)
                                 (let ((#{inner-var\ 2924}#
                                         (#{gen-var\ 485}# (quote tmp))))
                                   (values
                                     #{inner-var\ 2924}#
                                     (cons (cons (cons #{outer-var\ 2917}#
                                                       #{inner-var\ 2924}#)
                                                 (car #{maps\ 2912}#))
                                           #{outer-maps\ 2918}#)))))))))))
                 (#{gen-syntax\ 2817}#
                   (lambda (#{src\ 2925}#
                            #{e\ 2926}#
                            #{r\ 2927}#
                            #{maps\ 2928}#
                            #{ellipsis?\ 2929}#
                            #{mod\ 2930}#)
                     (if (#{id?\ 372}# #{e\ 2926}#)
                       (let ((#{label\ 2938}#
                               (#{id-var-name\ 429}#
                                 #{e\ 2926}#
                                 '(()))))
                         (let ((#{b\ 2941}#
                                 (#{lookup\ 366}#
                                   #{label\ 2938}#
                                   #{r\ 2927}#
                                   #{mod\ 2930}#)))
                           (if (eq? (#{binding-type\ 355}# #{b\ 2941}#)
                                    'syntax)
                             (call-with-values
                               (lambda ()
                                 (let ((#{var.lev\ 2943}#
                                         (#{binding-value\ 357}# #{b\ 2941}#)))
                                   (#{gen-ref\ 2819}#
                                     #{src\ 2925}#
                                     (car #{var.lev\ 2943}#)
                                     (cdr #{var.lev\ 2943}#)
                                     #{maps\ 2928}#)))
                               (lambda (#{var\ 2944}# #{maps\ 2945}#)
                                 (values
                                   (list (quote ref) #{var\ 2944}#)
                                   #{maps\ 2945}#)))
                             (if (#{ellipsis?\ 2929}# #{e\ 2926}#)
                               (syntax-violation
                                 'syntax
                                 "misplaced ellipsis"
                                 #{src\ 2925}#)
                               (values
                                 (list (quote quote) #{e\ 2926}#)
                                 #{maps\ 2928}#)))))
                       ((lambda (#{tmp\ 2950}#)
                          ((lambda (#{tmp\ 2951}#)
                             (if (if #{tmp\ 2951}#
                                   (apply (lambda (#{dots\ 2954}# #{e\ 2955}#)
                                            (#{ellipsis?\ 2929}#
                                              #{dots\ 2954}#))
                                          #{tmp\ 2951}#)
                                   #f)
                               (apply (lambda (#{dots\ 2958}# #{e\ 2959}#)
                                        (#{gen-syntax\ 2817}#
                                          #{src\ 2925}#
                                          #{e\ 2959}#
                                          #{r\ 2927}#
                                          #{maps\ 2928}#
                                          (lambda (#{x\ 2960}#) #f)
                                          #{mod\ 2930}#))
                                      #{tmp\ 2951}#)
                               ((lambda (#{tmp\ 2962}#)
                                  (if (if #{tmp\ 2962}#
                                        (apply (lambda (#{x\ 2966}#
                                                        #{dots\ 2967}#
                                                        #{y\ 2968}#)
                                                 (#{ellipsis?\ 2929}#
                                                   #{dots\ 2967}#))
                                               #{tmp\ 2962}#)
                                        #f)
                                    (apply (lambda (#{x\ 2972}#
                                                    #{dots\ 2973}#
                                                    #{y\ 2974}#)
                                             (letrec ((#{f\ 2978}#
                                                        (lambda (#{y\ 2979}#
                                                                 #{k\ 2980}#)
                                                          ((lambda (#{tmp\ 2987}#)
                                                             ((lambda (#{tmp\ 2988}#)
                                                                (if (if #{tmp\ 2988}#
                                                                      (apply (lambda (#{dots\ 2991}#
                                                                                      #{y\ 2992}#)
                                                                               (#{ellipsis?\ 2929}#
                                                                                 #{dots\ 2991}#))
                                                                             #{tmp\ 2988}#)
                                                                      #f)
                                                                  (apply (lambda (#{dots\ 2995}#
                                                                                  #{y\ 2996}#)
                                                                           (#{f\ 2978}#
                                                                             #{y\ 2996}#
                                                                             (lambda (#{maps\ 2997}#)
                                                                               (call-with-values
                                                                                 (lambda ()
                                                                                   (#{k\ 2980}#
                                                                                     (cons '()
                                                                                           #{maps\ 2997}#)))
                                                                                 (lambda (#{x\ 2999}#
                                                                                          #{maps\ 3000}#)
                                                                                   (if (null? (car #{maps\ 3000}#))
                                                                                     (syntax-violation
                                                                                       'syntax
                                                                                       "extra ellipsis"
                                                                                       #{src\ 2925}#)
                                                                                     (values
                                                                                       (#{gen-mappend\ 2821}#
                                                                                         #{x\ 2999}#
                                                                                         (car #{maps\ 3000}#))
                                                                                       (cdr #{maps\ 3000}#))))))))
                                                                         #{tmp\ 2988}#)
                                                                  ((lambda (#{_\ 3004}#)
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (#{gen-syntax\ 2817}#
                                                                           #{src\ 2925}#
                                                                           #{y\ 2979}#
                                                                           #{r\ 2927}#
                                                                           #{maps\ 2928}#
                                                                           #{ellipsis?\ 2929}#
                                                                           #{mod\ 2930}#))
                                                                       (lambda (#{y\ 3005}#
                                                                                #{maps\ 3006}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{k\ 2980}#
                                                                               #{maps\ 3006}#))
                                                                           (lambda (#{x\ 3009}#
                                                                                    #{maps\ 3010}#)
                                                                             (values
                                                                               (#{gen-append\ 2827}#
                                                                                 #{x\ 3009}#
                                                                                 #{y\ 3005}#)
                                                                               #{maps\ 3010}#))))))
                                                                   #{tmp\ 2987}#)))
                                                              ($sc-dispatch
                                                                #{tmp\ 2987}#
                                                                '(any . any))))
                                                           #{y\ 2979}#))))
                                               (#{f\ 2978}#
                                                 #{y\ 2974}#
                                                 (lambda (#{maps\ 2981}#)
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{gen-syntax\ 2817}#
                                                         #{src\ 2925}#
                                                         #{x\ 2972}#
                                                         #{r\ 2927}#
                                                         (cons '()
                                                               #{maps\ 2981}#)
                                                         #{ellipsis?\ 2929}#
                                                         #{mod\ 2930}#))
                                                     (lambda (#{x\ 2983}#
                                                              #{maps\ 2984}#)
                                                       (if (null? (car #{maps\ 2984}#))
                                                         (syntax-violation
                                                           'syntax
                                                           "extra ellipsis"
                                                           #{src\ 2925}#)
                                                         (values
                                                           (#{gen-map\ 2823}#
                                                             #{x\ 2983}#
                                                             (car #{maps\ 2984}#))
                                                           (cdr #{maps\ 2984}#)))))))))
                                           #{tmp\ 2962}#)
                                    ((lambda (#{tmp\ 3013}#)
                                       (if #{tmp\ 3013}#
                                         (apply (lambda (#{x\ 3016}#
                                                         #{y\ 3017}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{gen-syntax\ 2817}#
                                                        #{src\ 2925}#
                                                        #{x\ 3016}#
                                                        #{r\ 2927}#
                                                        #{maps\ 2928}#
                                                        #{ellipsis?\ 2929}#
                                                        #{mod\ 2930}#))
                                                    (lambda (#{x\ 3018}#
                                                             #{maps\ 3019}#)
                                                      (call-with-values
                                                        (lambda ()
                                                          (#{gen-syntax\ 2817}#
                                                            #{src\ 2925}#
                                                            #{y\ 3017}#
                                                            #{r\ 2927}#
                                                            #{maps\ 3019}#
                                                            #{ellipsis?\ 2929}#
                                                            #{mod\ 2930}#))
                                                        (lambda (#{y\ 3022}#
                                                                 #{maps\ 3023}#)
                                                          (values
                                                            (#{gen-cons\ 2825}#
                                                              #{x\ 3018}#
                                                              #{y\ 3022}#)
                                                            #{maps\ 3023}#))))))
                                                #{tmp\ 3013}#)
                                         ((lambda (#{tmp\ 3026}#)
                                            (if #{tmp\ 3026}#
                                              (apply (lambda (#{e1\ 3029}#
                                                              #{e2\ 3030}#)
                                                       (call-with-values
                                                         (lambda ()
                                                           (#{gen-syntax\ 2817}#
                                                             #{src\ 2925}#
                                                             (cons #{e1\ 3029}#
                                                                   #{e2\ 3030}#)
                                                             #{r\ 2927}#
                                                             #{maps\ 2928}#
                                                             #{ellipsis?\ 2929}#
                                                             #{mod\ 2930}#))
                                                         (lambda (#{e\ 3032}#
                                                                  #{maps\ 3033}#)
                                                           (values
                                                             (#{gen-vector\ 2829}#
                                                               #{e\ 3032}#)
                                                             #{maps\ 3033}#))))
                                                     #{tmp\ 3026}#)
                                              ((lambda (#{_\ 3037}#)
                                                 (values
                                                   (list 'quote
                                                         #{e\ 2926}#)
                                                   #{maps\ 2928}#))
                                               #{tmp\ 2950}#)))
                                          ($sc-dispatch
                                            #{tmp\ 2950}#
                                            '#(vector (any . each-any))))))
                                     ($sc-dispatch
                                       #{tmp\ 2950}#
                                       '(any . any)))))
                                ($sc-dispatch
                                  #{tmp\ 2950}#
                                  '(any any . any)))))
                           ($sc-dispatch #{tmp\ 2950}# (quote (any any)))))
                        #{e\ 2926}#)))))
          (lambda (#{e\ 3039}#
                   #{r\ 3040}#
                   #{w\ 3041}#
                   #{s\ 3042}#
                   #{mod\ 3043}#)
            (let ((#{e\ 3050}#
                    (#{source-wrap\ 443}#
                      #{e\ 3039}#
                      #{w\ 3041}#
                      #{s\ 3042}#
                      #{mod\ 3043}#)))
              ((lambda (#{tmp\ 3051}#)
                 ((lambda (#{tmp\ 3052}#)
                    (if #{tmp\ 3052}#
                      (apply (lambda (#{_\ 3055}# #{x\ 3056}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax\ 2817}#
                                     #{e\ 3050}#
                                     #{x\ 3056}#
                                     #{r\ 3040}#
                                     '()
                                     #{ellipsis?\ 473}#
                                     #{mod\ 3043}#))
                                 (lambda (#{e\ 3057}# #{maps\ 3058}#)
                                   (#{regen\ 2831}# #{e\ 3057}#))))
                             #{tmp\ 3052}#)
                      ((lambda (#{_\ 3062}#)
                         (syntax-violation
                           'syntax
                           "bad `syntax' form"
                           #{e\ 3050}#))
                       #{tmp\ 3051}#)))
                  ($sc-dispatch #{tmp\ 3051}# (quote (any any)))))
               #{e\ 3050}#)))))
      (#{global-extend\ 368}#
        'core
        'lambda
        (lambda (#{e\ 3063}#
                 #{r\ 3064}#
                 #{w\ 3065}#
                 #{s\ 3066}#
                 #{mod\ 3067}#)
          ((lambda (#{tmp\ 3073}#)
             ((lambda (#{tmp\ 3074}#)
                (if #{tmp\ 3074}#
                  (apply (lambda (#{_\ 3079}#
                                  #{args\ 3080}#
                                  #{e1\ 3081}#
                                  #{e2\ 3082}#)
                           (call-with-values
                             (lambda ()
                               (#{lambda-formals\ 475}# #{args\ 3080}#))
                             (lambda (#{req\ 3083}#
                                      #{opt\ 3084}#
                                      #{rest\ 3085}#
                                      #{kw\ 3086}#)
                               (letrec ((#{lp\ 3094}#
                                          (lambda (#{body\ 3095}#
                                                   #{meta\ 3096}#)
                                            ((lambda (#{tmp\ 3098}#)
                                               ((lambda (#{tmp\ 3099}#)
                                                  (if (if #{tmp\ 3099}#
                                                        (apply (lambda (#{docstring\ 3103}#
                                                                        #{e1\ 3104}#
                                                                        #{e2\ 3105}#)
                                                                 (string?
                                                                   (syntax->datum
                                                                     #{docstring\ 3103}#)))
                                                               #{tmp\ 3099}#)
                                                        #f)
                                                    (apply (lambda (#{docstring\ 3109}#
                                                                    #{e1\ 3110}#
                                                                    #{e2\ 3111}#)
                                                             (#{lp\ 3094}#
                                                               (cons #{e1\ 3110}#
                                                                     #{e2\ 3111}#)
                                                               (append
                                                                 #{meta\ 3096}#
                                                                 (list (cons 'documentation
                                                                             (syntax->datum
                                                                               #{docstring\ 3109}#))))))
                                                           #{tmp\ 3099}#)
                                                    ((lambda (#{tmp\ 3114}#)
                                                       (if #{tmp\ 3114}#
                                                         (apply (lambda (#{k\ 3119}#
                                                                         #{v\ 3120}#
                                                                         #{e1\ 3121}#
                                                                         #{e2\ 3122}#)
                                                                  (#{lp\ 3094}#
                                                                    (cons #{e1\ 3121}#
                                                                          #{e2\ 3122}#)
                                                                    (append
                                                                      #{meta\ 3096}#
                                                                      (syntax->datum
                                                                        (map cons
                                                                             #{k\ 3119}#
                                                                             #{v\ 3120}#)))))
                                                                #{tmp\ 3114}#)
                                                         ((lambda (#{_\ 3127}#)
                                                            (#{chi-simple-lambda\ 477}#
                                                              #{e\ 3063}#
                                                              #{r\ 3064}#
                                                              #{w\ 3065}#
                                                              #{s\ 3066}#
                                                              #{mod\ 3067}#
                                                              #{req\ 3083}#
                                                              #{rest\ 3085}#
                                                              #{meta\ 3096}#
                                                              #{body\ 3095}#))
                                                          #{tmp\ 3098}#)))
                                                     ($sc-dispatch
                                                       #{tmp\ 3098}#
                                                       '(#(vector
                                                           #(each (any . any)))
                                                         any
                                                         .
                                                         each-any)))))
                                                ($sc-dispatch
                                                  #{tmp\ 3098}#
                                                  '(any any . each-any))))
                                             #{body\ 3095}#))))
                                 (#{lp\ 3094}#
                                   (cons #{e1\ 3081}# #{e2\ 3082}#)
                                   '())))))
                         #{tmp\ 3074}#)
                  ((lambda (#{_\ 3129}#)
                     (syntax-violation
                       'lambda
                       "bad lambda"
                       #{e\ 3063}#))
                   #{tmp\ 3073}#)))
              ($sc-dispatch
                #{tmp\ 3073}#
                '(any any any . each-any))))
           #{e\ 3063}#)))
      (#{global-extend\ 368}#
        'core
        'lambda*
        (lambda (#{e\ 3130}#
                 #{r\ 3131}#
                 #{w\ 3132}#
                 #{s\ 3133}#
                 #{mod\ 3134}#)
          ((lambda (#{tmp\ 3140}#)
             ((lambda (#{tmp\ 3141}#)
                (if #{tmp\ 3141}#
                  (apply (lambda (#{_\ 3146}#
                                  #{args\ 3147}#
                                  #{e1\ 3148}#
                                  #{e2\ 3149}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 481}#
                                 #{e\ 3130}#
                                 #{r\ 3131}#
                                 #{w\ 3132}#
                                 #{s\ 3133}#
                                 #{mod\ 3134}#
                                 #{lambda*-formals\ 479}#
                                 (list (cons #{args\ 3147}#
                                             (cons #{e1\ 3148}#
                                                   #{e2\ 3149}#)))))
                             (lambda (#{meta\ 3151}# #{lcase\ 3152}#)
                               (#{build-case-lambda\ 316}#
                                 #{s\ 3133}#
                                 #{meta\ 3151}#
                                 #{lcase\ 3152}#))))
                         #{tmp\ 3141}#)
                  ((lambda (#{_\ 3156}#)
                     (syntax-violation
                       'lambda
                       "bad lambda*"
                       #{e\ 3130}#))
                   #{tmp\ 3140}#)))
              ($sc-dispatch
                #{tmp\ 3140}#
                '(any any any . each-any))))
           #{e\ 3130}#)))
      (#{global-extend\ 368}#
        'core
        'case-lambda
        (lambda (#{e\ 3157}#
                 #{r\ 3158}#
                 #{w\ 3159}#
                 #{s\ 3160}#
                 #{mod\ 3161}#)
          ((lambda (#{tmp\ 3167}#)
             ((lambda (#{tmp\ 3168}#)
                (if #{tmp\ 3168}#
                  (apply (lambda (#{_\ 3176}#
                                  #{args\ 3177}#
                                  #{e1\ 3178}#
                                  #{e2\ 3179}#
                                  #{args*\ 3180}#
                                  #{e1*\ 3181}#
                                  #{e2*\ 3182}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 481}#
                                 #{e\ 3157}#
                                 #{r\ 3158}#
                                 #{w\ 3159}#
                                 #{s\ 3160}#
                                 #{mod\ 3161}#
                                 #{lambda-formals\ 475}#
                                 (cons (cons #{args\ 3177}#
                                             (cons #{e1\ 3178}# #{e2\ 3179}#))
                                       (map (lambda (#{tmp\ 3186}#
                                                     #{tmp\ 3185}#
                                                     #{tmp\ 3184}#)
                                              (cons #{tmp\ 3184}#
                                                    (cons #{tmp\ 3185}#
                                                          #{tmp\ 3186}#)))
                                            #{e2*\ 3182}#
                                            #{e1*\ 3181}#
                                            #{args*\ 3180}#))))
                             (lambda (#{meta\ 3188}# #{lcase\ 3189}#)
                               (#{build-case-lambda\ 316}#
                                 #{s\ 3160}#
                                 #{meta\ 3188}#
                                 #{lcase\ 3189}#))))
                         #{tmp\ 3168}#)
                  ((lambda (#{_\ 3193}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda"
                       #{e\ 3157}#))
                   #{tmp\ 3167}#)))
              ($sc-dispatch
                #{tmp\ 3167}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3157}#)))
      (#{global-extend\ 368}#
        'core
        'case-lambda*
        (lambda (#{e\ 3194}#
                 #{r\ 3195}#
                 #{w\ 3196}#
                 #{s\ 3197}#
                 #{mod\ 3198}#)
          ((lambda (#{tmp\ 3204}#)
             ((lambda (#{tmp\ 3205}#)
                (if #{tmp\ 3205}#
                  (apply (lambda (#{_\ 3213}#
                                  #{args\ 3214}#
                                  #{e1\ 3215}#
                                  #{e2\ 3216}#
                                  #{args*\ 3217}#
                                  #{e1*\ 3218}#
                                  #{e2*\ 3219}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 481}#
                                 #{e\ 3194}#
                                 #{r\ 3195}#
                                 #{w\ 3196}#
                                 #{s\ 3197}#
                                 #{mod\ 3198}#
                                 #{lambda*-formals\ 479}#
                                 (cons (cons #{args\ 3214}#
                                             (cons #{e1\ 3215}# #{e2\ 3216}#))
                                       (map (lambda (#{tmp\ 3223}#
                                                     #{tmp\ 3222}#
                                                     #{tmp\ 3221}#)
                                              (cons #{tmp\ 3221}#
                                                    (cons #{tmp\ 3222}#
                                                          #{tmp\ 3223}#)))
                                            #{e2*\ 3219}#
                                            #{e1*\ 3218}#
                                            #{args*\ 3217}#))))
                             (lambda (#{meta\ 3225}# #{lcase\ 3226}#)
                               (#{build-case-lambda\ 316}#
                                 #{s\ 3197}#
                                 #{meta\ 3225}#
                                 #{lcase\ 3226}#))))
                         #{tmp\ 3205}#)
                  ((lambda (#{_\ 3230}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda*"
                       #{e\ 3194}#))
                   #{tmp\ 3204}#)))
              ($sc-dispatch
                #{tmp\ 3204}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3194}#)))
      (#{global-extend\ 368}#
        'core
        'let
        (letrec ((#{chi-let\ 3232}#
                   (lambda (#{e\ 3233}#
                            #{r\ 3234}#
                            #{w\ 3235}#
                            #{s\ 3236}#
                            #{mod\ 3237}#
                            #{constructor\ 3238}#
                            #{ids\ 3239}#
                            #{vals\ 3240}#
                            #{exps\ 3241}#)
                     (if (not (#{valid-bound-ids?\ 435}# #{ids\ 3239}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 3233}#)
                       (let ((#{labels\ 3253}#
                               (#{gen-labels\ 390}# #{ids\ 3239}#))
                             (#{new-vars\ 3254}#
                               (map #{gen-var\ 485}# #{ids\ 3239}#)))
                         (let ((#{nw\ 3257}#
                                 (#{make-binding-wrap\ 419}#
                                   #{ids\ 3239}#
                                   #{labels\ 3253}#
                                   #{w\ 3235}#))
                               (#{nr\ 3258}#
                                 (#{extend-var-env\ 362}#
                                   #{labels\ 3253}#
                                   #{new-vars\ 3254}#
                                   #{r\ 3234}#)))
                           (#{constructor\ 3238}#
                             #{s\ 3236}#
                             (map syntax->datum #{ids\ 3239}#)
                             #{new-vars\ 3254}#
                             (map (lambda (#{x\ 3259}#)
                                    (#{chi\ 457}#
                                      #{x\ 3259}#
                                      #{r\ 3234}#
                                      #{w\ 3235}#
                                      #{mod\ 3237}#))
                                  #{vals\ 3240}#)
                             (#{chi-body\ 465}#
                               #{exps\ 3241}#
                               (#{source-wrap\ 443}#
                                 #{e\ 3233}#
                                 #{nw\ 3257}#
                                 #{s\ 3236}#
                                 #{mod\ 3237}#)
                               #{nr\ 3258}#
                               #{nw\ 3257}#
                               #{mod\ 3237}#))))))))
          (lambda (#{e\ 3261}#
                   #{r\ 3262}#
                   #{w\ 3263}#
                   #{s\ 3264}#
                   #{mod\ 3265}#)
            ((lambda (#{tmp\ 3271}#)
               ((lambda (#{tmp\ 3272}#)
                  (if (if #{tmp\ 3272}#
                        (apply (lambda (#{_\ 3278}#
                                        #{id\ 3279}#
                                        #{val\ 3280}#
                                        #{e1\ 3281}#
                                        #{e2\ 3282}#)
                                 (and-map #{id?\ 372}# #{id\ 3279}#))
                               #{tmp\ 3272}#)
                        #f)
                    (apply (lambda (#{_\ 3289}#
                                    #{id\ 3290}#
                                    #{val\ 3291}#
                                    #{e1\ 3292}#
                                    #{e2\ 3293}#)
                             (#{chi-let\ 3232}#
                               #{e\ 3261}#
                               #{r\ 3262}#
                               #{w\ 3263}#
                               #{s\ 3264}#
                               #{mod\ 3265}#
                               #{build-let\ 326}#
                               #{id\ 3290}#
                               #{val\ 3291}#
                               (cons #{e1\ 3292}# #{e2\ 3293}#)))
                           #{tmp\ 3272}#)
                    ((lambda (#{tmp\ 3297}#)
                       (if (if #{tmp\ 3297}#
                             (apply (lambda (#{_\ 3304}#
                                             #{f\ 3305}#
                                             #{id\ 3306}#
                                             #{val\ 3307}#
                                             #{e1\ 3308}#
                                             #{e2\ 3309}#)
                                      (if (#{id?\ 372}# #{f\ 3305}#)
                                        (and-map #{id?\ 372}# #{id\ 3306}#)
                                        #f))
                                    #{tmp\ 3297}#)
                             #f)
                         (apply (lambda (#{_\ 3319}#
                                         #{f\ 3320}#
                                         #{id\ 3321}#
                                         #{val\ 3322}#
                                         #{e1\ 3323}#
                                         #{e2\ 3324}#)
                                  (#{chi-let\ 3232}#
                                    #{e\ 3261}#
                                    #{r\ 3262}#
                                    #{w\ 3263}#
                                    #{s\ 3264}#
                                    #{mod\ 3265}#
                                    #{build-named-let\ 328}#
                                    (cons #{f\ 3320}# #{id\ 3321}#)
                                    #{val\ 3322}#
                                    (cons #{e1\ 3323}# #{e2\ 3324}#)))
                                #{tmp\ 3297}#)
                         ((lambda (#{_\ 3329}#)
                            (syntax-violation
                              'let
                              "bad let"
                              (#{source-wrap\ 443}#
                                #{e\ 3261}#
                                #{w\ 3263}#
                                #{s\ 3264}#
                                #{mod\ 3265}#)))
                          #{tmp\ 3271}#)))
                     ($sc-dispatch
                       #{tmp\ 3271}#
                       '(any any #(each (any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 3271}#
                  '(any #(each (any any)) any . each-any))))
             #{e\ 3261}#))))
      (#{global-extend\ 368}#
        'core
        'letrec
        (lambda (#{e\ 3330}#
                 #{r\ 3331}#
                 #{w\ 3332}#
                 #{s\ 3333}#
                 #{mod\ 3334}#)
          ((lambda (#{tmp\ 3340}#)
             ((lambda (#{tmp\ 3341}#)
                (if (if #{tmp\ 3341}#
                      (apply (lambda (#{_\ 3347}#
                                      #{id\ 3348}#
                                      #{val\ 3349}#
                                      #{e1\ 3350}#
                                      #{e2\ 3351}#)
                               (and-map #{id?\ 372}# #{id\ 3348}#))
                             #{tmp\ 3341}#)
                      #f)
                  (apply (lambda (#{_\ 3358}#
                                  #{id\ 3359}#
                                  #{val\ 3360}#
                                  #{e1\ 3361}#
                                  #{e2\ 3362}#)
                           (let ((#{ids\ 3364}# #{id\ 3359}#))
                             (if (not (#{valid-bound-ids?\ 435}#
                                        #{ids\ 3364}#))
                               (syntax-violation
                                 'letrec
                                 "duplicate bound variable"
                                 #{e\ 3330}#)
                               (let ((#{labels\ 3368}#
                                       (#{gen-labels\ 390}# #{ids\ 3364}#))
                                     (#{new-vars\ 3369}#
                                       (map #{gen-var\ 485}# #{ids\ 3364}#)))
                                 (let ((#{w\ 3372}#
                                         (#{make-binding-wrap\ 419}#
                                           #{ids\ 3364}#
                                           #{labels\ 3368}#
                                           #{w\ 3332}#))
                                       (#{r\ 3373}#
                                         (#{extend-var-env\ 362}#
                                           #{labels\ 3368}#
                                           #{new-vars\ 3369}#
                                           #{r\ 3331}#)))
                                   (#{build-letrec\ 330}#
                                     #{s\ 3333}#
                                     (map syntax->datum #{ids\ 3364}#)
                                     #{new-vars\ 3369}#
                                     (map (lambda (#{x\ 3374}#)
                                            (#{chi\ 457}#
                                              #{x\ 3374}#
                                              #{r\ 3373}#
                                              #{w\ 3372}#
                                              #{mod\ 3334}#))
                                          #{val\ 3360}#)
                                     (#{chi-body\ 465}#
                                       (cons #{e1\ 3361}# #{e2\ 3362}#)
                                       (#{source-wrap\ 443}#
                                         #{e\ 3330}#
                                         #{w\ 3372}#
                                         #{s\ 3333}#
                                         #{mod\ 3334}#)
                                       #{r\ 3373}#
                                       #{w\ 3372}#
                                       #{mod\ 3334}#)))))))
                         #{tmp\ 3341}#)
                  ((lambda (#{_\ 3379}#)
                     (syntax-violation
                       'letrec
                       "bad letrec"
                       (#{source-wrap\ 443}#
                         #{e\ 3330}#
                         #{w\ 3332}#
                         #{s\ 3333}#
                         #{mod\ 3334}#)))
                   #{tmp\ 3340}#)))
              ($sc-dispatch
                #{tmp\ 3340}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3330}#)))
      (#{global-extend\ 368}#
        'core
        'set!
        (lambda (#{e\ 3380}#
                 #{r\ 3381}#
                 #{w\ 3382}#
                 #{s\ 3383}#
                 #{mod\ 3384}#)
          ((lambda (#{tmp\ 3390}#)
             ((lambda (#{tmp\ 3391}#)
                (if (if #{tmp\ 3391}#
                      (apply (lambda (#{_\ 3395}# #{id\ 3396}# #{val\ 3397}#)
                               (#{id?\ 372}# #{id\ 3396}#))
                             #{tmp\ 3391}#)
                      #f)
                  (apply (lambda (#{_\ 3401}# #{id\ 3402}# #{val\ 3403}#)
                           (let ((#{val\ 3406}#
                                   (#{chi\ 457}#
                                     #{val\ 3403}#
                                     #{r\ 3381}#
                                     #{w\ 3382}#
                                     #{mod\ 3384}#))
                                 (#{n\ 3407}#
                                   (#{id-var-name\ 429}#
                                     #{id\ 3402}#
                                     #{w\ 3382}#)))
                             (let ((#{b\ 3409}#
                                     (#{lookup\ 366}#
                                       #{n\ 3407}#
                                       #{r\ 3381}#
                                       #{mod\ 3384}#)))
                               (let ((#{atom-key\ 3412}#
                                       (#{binding-type\ 355}# #{b\ 3409}#)))
                                 (if (memv #{atom-key\ 3412}#
                                           '(lexical))
                                   (#{build-lexical-assignment\ 302}#
                                     #{s\ 3383}#
                                     (syntax->datum #{id\ 3402}#)
                                     (#{binding-value\ 357}# #{b\ 3409}#)
                                     #{val\ 3406}#)
                                   (if (memv #{atom-key\ 3412}#
                                             '(global))
                                     (#{build-global-assignment\ 308}#
                                       #{s\ 3383}#
                                       #{n\ 3407}#
                                       #{val\ 3406}#
                                       #{mod\ 3384}#)
                                     (if (memv #{atom-key\ 3412}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'set!
                                         "identifier out of context"
                                         (#{wrap\ 441}#
                                           #{id\ 3402}#
                                           #{w\ 3382}#
                                           #{mod\ 3384}#))
                                       (syntax-violation
                                         'set!
                                         "bad set!"
                                         (#{source-wrap\ 443}#
                                           #{e\ 3380}#
                                           #{w\ 3382}#
                                           #{s\ 3383}#
                                           #{mod\ 3384}#)))))))))
                         #{tmp\ 3391}#)
                  ((lambda (#{tmp\ 3417}#)
                     (if #{tmp\ 3417}#
                       (apply (lambda (#{_\ 3422}#
                                       #{head\ 3423}#
                                       #{tail\ 3424}#
                                       #{val\ 3425}#)
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type\ 453}#
                                      #{head\ 3423}#
                                      #{r\ 3381}#
                                      '(())
                                      #f
                                      #f
                                      #{mod\ 3384}#
                                      #t))
                                  (lambda (#{type\ 3428}#
                                           #{value\ 3429}#
                                           #{ee\ 3430}#
                                           #{ww\ 3431}#
                                           #{ss\ 3432}#
                                           #{modmod\ 3433}#)
                                    (if (memv #{type\ 3428}#
                                              '(module-ref))
                                      (let ((#{val\ 3442}#
                                              (#{chi\ 457}#
                                                #{val\ 3425}#
                                                #{r\ 3381}#
                                                #{w\ 3382}#
                                                #{mod\ 3384}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 3429}#
                                              (cons #{head\ 3423}#
                                                    #{tail\ 3424}#)
                                              #{r\ 3381}#
                                              #{w\ 3382}#))
                                          (lambda (#{e\ 3444}#
                                                   #{r\ 3445}#
                                                   #{w\ 3446}#
                                                   #{s*\ 3447}#
                                                   #{mod\ 3448}#)
                                            ((lambda (#{tmp\ 3454}#)
                                               ((lambda (#{tmp\ 3455}#)
                                                  (if (if #{tmp\ 3455}#
                                                        (apply (lambda (#{e\ 3457}#)
                                                                 (#{id?\ 372}#
                                                                   #{e\ 3457}#))
                                                               #{tmp\ 3455}#)
                                                        #f)
                                                    (apply (lambda (#{e\ 3459}#)
                                                             (#{build-global-assignment\ 308}#
                                                               #{s\ 3383}#
                                                               (syntax->datum
                                                                 #{e\ 3459}#)
                                                               #{val\ 3442}#
                                                               #{mod\ 3448}#))
                                                           #{tmp\ 3455}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 3454}#)))
                                                (list #{tmp\ 3454}#)))
                                             #{e\ 3444}#))))
                                      (#{build-application\ 294}#
                                        #{s\ 3383}#
                                        (#{chi\ 457}#
                                          (list '#(syntax-object
                                                   setter
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(type
                                                        value
                                                        ee
                                                        ww
                                                        ss
                                                        modmod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3434"
                                                        "i3435"
                                                        "i3436"
                                                        "i3437"
                                                        "i3438"
                                                        "i3439"))
                                                    #(ribcage
                                                      #(_ head tail val)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3418"
                                                        "i3419"
                                                        "i3420"
                                                        "i3421"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e r w s mod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3385"
                                                        "i3386"
                                                        "i3387"
                                                        "i3388"
                                                        "i3389"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i486"
                                                       "i484"
                                                       "i482"
                                                       "i480"
                                                       "i478"
                                                       "i476"
                                                       "i474"
                                                       "i472"
                                                       "i470"
                                                       "i468"
                                                       "i466"
                                                       "i464"
                                                       "i462"
                                                       "i460"
                                                       "i458"
                                                       "i456"
                                                       "i454"
                                                       "i452"
                                                       "i450"
                                                       "i448"
                                                       "i446"
                                                       "i444"
                                                       "i442"
                                                       "i440"
                                                       "i438"
                                                       "i436"
                                                       "i434"
                                                       "i432"
                                                       "i430"
                                                       "i428"
                                                       "i426"
                                                       "i424"
                                                       "i422"
                                                       "i420"
                                                       "i418"
                                                       "i416"
                                                       "i415"
                                                       "i414"
                                                       "i412"
                                                       "i411"
                                                       "i410"
                                                       "i409"
                                                       "i408"
                                                       "i406"
                                                       "i404"
                                                       "i402"
                                                       "i400"
                                                       "i398"
                                                       "i396"
                                                       "i394"
                                                       "i392"
                                                       "i389"
                                                       "i387"
                                                       "i386"
                                                       "i385"
                                                       "i384"
                                                       "i383"
                                                       "i382"
                                                       "i380"
                                                       "i378"
                                                       "i376"
                                                       "i374"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i367"
                                                       "i365"
                                                       "i363"
                                                       "i361"
                                                       "i359"
                                                       "i358"
                                                       "i356"
                                                       "i354"
                                                       "i353"
                                                       "i352"
                                                       "i350"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i329"
                                                       "i327"
                                                       "i325"
                                                       "i323"
                                                       "i321"
                                                       "i319"
                                                       "i317"
                                                       "i315"
                                                       "i313"
                                                       "i311"
                                                       "i309"
                                                       "i307"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i291"
                                                       "i289"
                                                       "i287"
                                                       "i285"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i278"
                                                       "i276"
                                                       "i274"
                                                       "i272"
                                                       "i270"
                                                       "i268"
                                                       "i266"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"
                                                       "i237"
                                                       "i235"
                                                       "i233"
                                                       "i231"
                                                       "i229"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i23"
                                                       "i22"
                                                       "i21"
                                                       "i19")))
                                                   (hygiene guile))
                                                #{head\ 3423}#)
                                          #{r\ 3381}#
                                          #{w\ 3382}#
                                          #{mod\ 3384}#)
                                        (map (lambda (#{e\ 3461}#)
                                               (#{chi\ 457}#
                                                 #{e\ 3461}#
                                                 #{r\ 3381}#
                                                 #{w\ 3382}#
                                                 #{mod\ 3384}#))
                                             (append
                                               #{tail\ 3424}#
                                               (list #{val\ 3425}#))))))))
                              #{tmp\ 3417}#)
                       ((lambda (#{_\ 3465}#)
                          (syntax-violation
                            'set!
                            "bad set!"
                            (#{source-wrap\ 443}#
                              #{e\ 3380}#
                              #{w\ 3382}#
                              #{s\ 3383}#
                              #{mod\ 3384}#)))
                        #{tmp\ 3390}#)))
                   ($sc-dispatch
                     #{tmp\ 3390}#
                     '(any (any . each-any) any)))))
              ($sc-dispatch
                #{tmp\ 3390}#
                '(any any any))))
           #{e\ 3380}#)))
      (#{global-extend\ 368}#
        'module-ref
        '@
        (lambda (#{e\ 3466}# #{r\ 3467}# #{w\ 3468}#)
          ((lambda (#{tmp\ 3472}#)
             ((lambda (#{tmp\ 3473}#)
                (if (if #{tmp\ 3473}#
                      (apply (lambda (#{_\ 3477}# #{mod\ 3478}# #{id\ 3479}#)
                               (if (and-map #{id?\ 372}# #{mod\ 3478}#)
                                 (#{id?\ 372}# #{id\ 3479}#)
                                 #f))
                             #{tmp\ 3473}#)
                      #f)
                  (apply (lambda (#{_\ 3486}# #{mod\ 3487}# #{id\ 3488}#)
                           (values
                             (syntax->datum #{id\ 3488}#)
                             #{r\ 3467}#
                             #{w\ 3468}#
                             #f
                             (syntax->datum
                               (cons '#(syntax-object
                                        public
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i3483" "i3484" "i3485"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(e r w)
                                           #((top) (top) (top))
                                           #("i3469" "i3470" "i3471"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             set-lambda-meta!
                                             lambda-meta
                                             lambda?
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i486"
                                            "i484"
                                            "i482"
                                            "i480"
                                            "i478"
                                            "i476"
                                            "i474"
                                            "i472"
                                            "i470"
                                            "i468"
                                            "i466"
                                            "i464"
                                            "i462"
                                            "i460"
                                            "i458"
                                            "i456"
                                            "i454"
                                            "i452"
                                            "i450"
                                            "i448"
                                            "i446"
                                            "i444"
                                            "i442"
                                            "i440"
                                            "i438"
                                            "i436"
                                            "i434"
                                            "i432"
                                            "i430"
                                            "i428"
                                            "i426"
                                            "i424"
                                            "i422"
                                            "i420"
                                            "i418"
                                            "i416"
                                            "i415"
                                            "i414"
                                            "i412"
                                            "i411"
                                            "i410"
                                            "i409"
                                            "i408"
                                            "i406"
                                            "i404"
                                            "i402"
                                            "i400"
                                            "i398"
                                            "i396"
                                            "i394"
                                            "i392"
                                            "i389"
                                            "i387"
                                            "i386"
                                            "i385"
                                            "i384"
                                            "i383"
                                            "i382"
                                            "i380"
                                            "i378"
                                            "i376"
                                            "i374"
                                            "i373"
                                            "i371"
                                            "i369"
                                            "i367"
                                            "i365"
                                            "i363"
                                            "i361"
                                            "i359"
                                            "i358"
                                            "i356"
                                            "i354"
                                            "i353"
                                            "i352"
                                            "i350"
                                            "i349"
                                            "i347"
                                            "i345"
                                            "i343"
                                            "i341"
                                            "i339"
                                            "i337"
                                            "i335"
                                            "i333"
                                            "i331"
                                            "i329"
                                            "i327"
                                            "i325"
                                            "i323"
                                            "i321"
                                            "i319"
                                            "i317"
                                            "i315"
                                            "i313"
                                            "i311"
                                            "i309"
                                            "i307"
                                            "i305"
                                            "i303"
                                            "i301"
                                            "i299"
                                            "i297"
                                            "i295"
                                            "i293"
                                            "i291"
                                            "i289"
                                            "i287"
                                            "i285"
                                            "i284"
                                            "i282"
                                            "i280"
                                            "i278"
                                            "i276"
                                            "i274"
                                            "i272"
                                            "i270"
                                            "i268"
                                            "i266"
                                            "i263"
                                            "i261"
                                            "i259"
                                            "i257"
                                            "i255"
                                            "i253"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i245"
                                            "i243"
                                            "i241"
                                            "i239"
                                            "i237"
                                            "i235"
                                            "i233"
                                            "i231"
                                            "i229"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-accessors
                                             define-expansion-constructors
                                             and-map*)
                                           ((top) (top) (top) (top))
                                           ("i23" "i22" "i21" "i19")))
                                        (hygiene guile))
                                     #{mod\ 3487}#))))
                         #{tmp\ 3473}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3472}#)))
              ($sc-dispatch
                #{tmp\ 3472}#
                '(any each-any any))))
           #{e\ 3466}#)))
      (#{global-extend\ 368}#
        'module-ref
        '@@
        (lambda (#{e\ 3490}# #{r\ 3491}# #{w\ 3492}#)
          (letrec ((#{remodulate\ 3497}#
                     (lambda (#{x\ 3498}# #{mod\ 3499}#)
                       (if (pair? #{x\ 3498}#)
                         (cons (#{remodulate\ 3497}#
                                 (car #{x\ 3498}#)
                                 #{mod\ 3499}#)
                               (#{remodulate\ 3497}#
                                 (cdr #{x\ 3498}#)
                                 #{mod\ 3499}#))
                         (if (#{syntax-object?\ 336}# #{x\ 3498}#)
                           (#{make-syntax-object\ 334}#
                             (#{remodulate\ 3497}#
                               (#{syntax-object-expression\ 338}# #{x\ 3498}#)
                               #{mod\ 3499}#)
                             (#{syntax-object-wrap\ 340}# #{x\ 3498}#)
                             #{mod\ 3499}#)
                           (if (vector? #{x\ 3498}#)
                             (let ((#{n\ 3510}# (vector-length #{x\ 3498}#)))
                               (let ((#{v\ 3512}# (make-vector #{n\ 3510}#)))
                                 (letrec ((#{loop\ 3515}#
                                            (lambda (#{i\ 3516}#)
                                              (if (#{fx=\ 277}#
                                                    #{i\ 3516}#
                                                    #{n\ 3510}#)
                                                (begin (if #f #f) #{v\ 3512}#)
                                                (begin
                                                  (vector-set!
                                                    #{v\ 3512}#
                                                    #{i\ 3516}#
                                                    (#{remodulate\ 3497}#
                                                      (vector-ref
                                                        #{x\ 3498}#
                                                        #{i\ 3516}#)
                                                      #{mod\ 3499}#))
                                                  (#{loop\ 3515}#
                                                    (#{fx+\ 273}#
                                                      #{i\ 3516}#
                                                      1)))))))
                                   (#{loop\ 3515}# 0))))
                             #{x\ 3498}#))))))
            ((lambda (#{tmp\ 3520}#)
               ((lambda (#{tmp\ 3521}#)
                  (if (if #{tmp\ 3521}#
                        (apply (lambda (#{_\ 3525}#
                                        #{mod\ 3526}#
                                        #{exp\ 3527}#)
                                 (and-map #{id?\ 372}# #{mod\ 3526}#))
                               #{tmp\ 3521}#)
                        #f)
                    (apply (lambda (#{_\ 3532}# #{mod\ 3533}# #{exp\ 3534}#)
                             (let ((#{mod\ 3536}#
                                     (syntax->datum
                                       (cons '#(syntax-object
                                                private
                                                ((top)
                                                 #(ribcage
                                                   #(_ mod exp)
                                                   #((top) (top) (top))
                                                   #("i3529" "i3530" "i3531"))
                                                 #(ribcage
                                                   (remodulate)
                                                   ((top))
                                                   ("i3496"))
                                                 #(ribcage
                                                   #(e r w)
                                                   #((top) (top) (top))
                                                   #("i3493" "i3494" "i3495"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     chi-lambda-case
                                                     lambda*-formals
                                                     chi-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     chi-void
                                                     eval-local-transformer
                                                     chi-local-syntax
                                                     chi-body
                                                     chi-macro
                                                     chi-application
                                                     chi-expr
                                                     chi
                                                     chi-top
                                                     syntax-type
                                                     chi-when-list
                                                     chi-install-global
                                                     chi-top-sequence
                                                     chi-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     maybe-name-value!
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i486"
                                                    "i484"
                                                    "i482"
                                                    "i480"
                                                    "i478"
                                                    "i476"
                                                    "i474"
                                                    "i472"
                                                    "i470"
                                                    "i468"
                                                    "i466"
                                                    "i464"
                                                    "i462"
                                                    "i460"
                                                    "i458"
                                                    "i456"
                                                    "i454"
                                                    "i452"
                                                    "i450"
                                                    "i448"
                                                    "i446"
                                                    "i444"
                                                    "i442"
                                                    "i440"
                                                    "i438"
                                                    "i436"
                                                    "i434"
                                                    "i432"
                                                    "i430"
                                                    "i428"
                                                    "i426"
                                                    "i424"
                                                    "i422"
                                                    "i420"
                                                    "i418"
                                                    "i416"
                                                    "i415"
                                                    "i414"
                                                    "i412"
                                                    "i411"
                                                    "i410"
                                                    "i409"
                                                    "i408"
                                                    "i406"
                                                    "i404"
                                                    "i402"
                                                    "i400"
                                                    "i398"
                                                    "i396"
                                                    "i394"
                                                    "i392"
                                                    "i389"
                                                    "i387"
                                                    "i386"
                                                    "i385"
                                                    "i384"
                                                    "i383"
                                                    "i382"
                                                    "i380"
                                                    "i378"
                                                    "i376"
                                                    "i374"
                                                    "i373"
                                                    "i371"
                                                    "i369"
                                                    "i367"
                                                    "i365"
                                                    "i363"
                                                    "i361"
                                                    "i359"
                                                    "i358"
                                                    "i356"
                                                    "i354"
                                                    "i353"
                                                    "i352"
                                                    "i350"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i329"
                                                    "i327"
                                                    "i325"
                                                    "i323"
                                                    "i321"
                                                    "i319"
                                                    "i317"
                                                    "i315"
                                                    "i313"
                                                    "i311"
                                                    "i309"
                                                    "i307"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i293"
                                                    "i291"
                                                    "i289"
                                                    "i287"
                                                    "i285"
                                                    "i284"
                                                    "i282"
                                                    "i280"
                                                    "i278"
                                                    "i276"
                                                    "i274"
                                                    "i272"
                                                    "i270"
                                                    "i268"
                                                    "i266"
                                                    "i263"
                                                    "i261"
                                                    "i259"
                                                    "i257"
                                                    "i255"
                                                    "i253"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i243"
                                                    "i241"
                                                    "i239"
                                                    "i237"
                                                    "i235"
                                                    "i233"
                                                    "i231"
                                                    "i229"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors
                                                     and-map*)
                                                   ((top) (top) (top) (top))
                                                   ("i23" "i22" "i21" "i19")))
                                                (hygiene guile))
                                             #{mod\ 3533}#))))
                               (values
                                 (#{remodulate\ 3497}#
                                   #{exp\ 3534}#
                                   #{mod\ 3536}#)
                                 #{r\ 3491}#
                                 #{w\ 3492}#
                                 (#{source-annotation\ 351}# #{exp\ 3534}#)
                                 #{mod\ 3536}#)))
                           #{tmp\ 3521}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 3520}#)))
                ($sc-dispatch
                  #{tmp\ 3520}#
                  '(any each-any any))))
             #{e\ 3490}#))))
      (#{global-extend\ 368}#
        'core
        'if
        (lambda (#{e\ 3538}#
                 #{r\ 3539}#
                 #{w\ 3540}#
                 #{s\ 3541}#
                 #{mod\ 3542}#)
          ((lambda (#{tmp\ 3548}#)
             ((lambda (#{tmp\ 3549}#)
                (if #{tmp\ 3549}#
                  (apply (lambda (#{_\ 3553}# #{test\ 3554}# #{then\ 3555}#)
                           (#{build-conditional\ 296}#
                             #{s\ 3541}#
                             (#{chi\ 457}#
                               #{test\ 3554}#
                               #{r\ 3539}#
                               #{w\ 3540}#
                               #{mod\ 3542}#)
                             (#{chi\ 457}#
                               #{then\ 3555}#
                               #{r\ 3539}#
                               #{w\ 3540}#
                               #{mod\ 3542}#)
                             (#{build-void\ 292}# #f)))
                         #{tmp\ 3549}#)
                  ((lambda (#{tmp\ 3557}#)
                     (if #{tmp\ 3557}#
                       (apply (lambda (#{_\ 3562}#
                                       #{test\ 3563}#
                                       #{then\ 3564}#
                                       #{else\ 3565}#)
                                (#{build-conditional\ 296}#
                                  #{s\ 3541}#
                                  (#{chi\ 457}#
                                    #{test\ 3563}#
                                    #{r\ 3539}#
                                    #{w\ 3540}#
                                    #{mod\ 3542}#)
                                  (#{chi\ 457}#
                                    #{then\ 3564}#
                                    #{r\ 3539}#
                                    #{w\ 3540}#
                                    #{mod\ 3542}#)
                                  (#{chi\ 457}#
                                    #{else\ 3565}#
                                    #{r\ 3539}#
                                    #{w\ 3540}#
                                    #{mod\ 3542}#)))
                              #{tmp\ 3557}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 3548}#)))
                   ($sc-dispatch
                     #{tmp\ 3548}#
                     '(any any any any)))))
              ($sc-dispatch
                #{tmp\ 3548}#
                '(any any any))))
           #{e\ 3538}#)))
      (#{global-extend\ 368}#
        'core
        'with-fluids
        (lambda (#{e\ 3566}#
                 #{r\ 3567}#
                 #{w\ 3568}#
                 #{s\ 3569}#
                 #{mod\ 3570}#)
          ((lambda (#{tmp\ 3576}#)
             ((lambda (#{tmp\ 3577}#)
                (if #{tmp\ 3577}#
                  (apply (lambda (#{_\ 3583}#
                                  #{fluid\ 3584}#
                                  #{val\ 3585}#
                                  #{b\ 3586}#
                                  #{b*\ 3587}#)
                           (#{build-dynlet\ 298}#
                             #{s\ 3569}#
                             (map (lambda (#{x\ 3588}#)
                                    (#{chi\ 457}#
                                      #{x\ 3588}#
                                      #{r\ 3567}#
                                      #{w\ 3568}#
                                      #{mod\ 3570}#))
                                  #{fluid\ 3584}#)
                             (map (lambda (#{x\ 3591}#)
                                    (#{chi\ 457}#
                                      #{x\ 3591}#
                                      #{r\ 3567}#
                                      #{w\ 3568}#
                                      #{mod\ 3570}#))
                                  #{val\ 3585}#)
                             (#{chi-body\ 465}#
                               (cons #{b\ 3586}# #{b*\ 3587}#)
                               (#{source-wrap\ 443}#
                                 #{e\ 3566}#
                                 #{w\ 3568}#
                                 #{s\ 3569}#
                                 #{mod\ 3570}#)
                               #{r\ 3567}#
                               #{w\ 3568}#
                               #{mod\ 3570}#)))
                         #{tmp\ 3577}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3576}#)))
              ($sc-dispatch
                #{tmp\ 3576}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3566}#)))
      (#{global-extend\ 368}#
        'begin
        'begin
        '())
      (#{global-extend\ 368}#
        'define
        'define
        '())
      (#{global-extend\ 368}#
        'define-syntax
        'define-syntax
        '())
      (#{global-extend\ 368}#
        'eval-when
        'eval-when
        '())
      (#{global-extend\ 368}#
        'core
        'syntax-case
        (letrec ((#{gen-syntax-case\ 3602}#
                   (lambda (#{x\ 3603}#
                            #{keys\ 3604}#
                            #{clauses\ 3605}#
                            #{r\ 3606}#
                            #{mod\ 3607}#)
                     (if (null? #{clauses\ 3605}#)
                       (#{build-application\ 294}#
                         #f
                         (#{build-primref\ 320}#
                           #f
                           'syntax-violation)
                         (list (#{build-data\ 322}# #f #f)
                               (#{build-data\ 322}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 3603}#))
                       ((lambda (#{tmp\ 3617}#)
                          ((lambda (#{tmp\ 3618}#)
                             (if #{tmp\ 3618}#
                               (apply (lambda (#{pat\ 3621}# #{exp\ 3622}#)
                                        (if (if (#{id?\ 372}# #{pat\ 3621}#)
                                              (and-map
                                                (lambda (#{x\ 3625}#)
                                                  (not (#{free-id=?\ 431}#
                                                         #{pat\ 3621}#
                                                         #{x\ 3625}#)))
                                                (cons '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(pat exp)
                                                            #((top) (top))
                                                            #("i3619" "i3620"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x
                                                              keys
                                                              clauses
                                                              r
                                                              mod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3608"
                                                              "i3609"
                                                              "i3610"
                                                              "i3611"
                                                              "i3612"))
                                                          #(ribcage
                                                            (gen-syntax-case
                                                              gen-clause
                                                              build-dispatch-call
                                                              convert-pattern)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i3601"
                                                             "i3599"
                                                             "i3597"
                                                             "i3595"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              chi-top
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              maybe-name-value!
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i486"
                                                             "i484"
                                                             "i482"
                                                             "i480"
                                                             "i478"
                                                             "i476"
                                                             "i474"
                                                             "i472"
                                                             "i470"
                                                             "i468"
                                                             "i466"
                                                             "i464"
                                                             "i462"
                                                             "i460"
                                                             "i458"
                                                             "i456"
                                                             "i454"
                                                             "i452"
                                                             "i450"
                                                             "i448"
                                                             "i446"
                                                             "i444"
                                                             "i442"
                                                             "i440"
                                                             "i438"
                                                             "i436"
                                                             "i434"
                                                             "i432"
                                                             "i430"
                                                             "i428"
                                                             "i426"
                                                             "i424"
                                                             "i422"
                                                             "i420"
                                                             "i418"
                                                             "i416"
                                                             "i415"
                                                             "i414"
                                                             "i412"
                                                             "i411"
                                                             "i410"
                                                             "i409"
                                                             "i408"
                                                             "i406"
                                                             "i404"
                                                             "i402"
                                                             "i400"
                                                             "i398"
                                                             "i396"
                                                             "i394"
                                                             "i392"
                                                             "i389"
                                                             "i387"
                                                             "i386"
                                                             "i385"
                                                             "i384"
                                                             "i383"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i373"
                                                             "i371"
                                                             "i369"
                                                             "i367"
                                                             "i365"
                                                             "i363"
                                                             "i361"
                                                             "i359"
                                                             "i358"
                                                             "i356"
                                                             "i354"
                                                             "i353"
                                                             "i352"
                                                             "i350"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i329"
                                                             "i327"
                                                             "i325"
                                                             "i323"
                                                             "i321"
                                                             "i319"
                                                             "i317"
                                                             "i315"
                                                             "i313"
                                                             "i311"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i284"
                                                             "i282"
                                                             "i280"
                                                             "i278"
                                                             "i276"
                                                             "i274"
                                                             "i272"
                                                             "i270"
                                                             "i268"
                                                             "i266"
                                                             "i263"
                                                             "i261"
                                                             "i259"
                                                             "i257"
                                                             "i255"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i243"
                                                             "i241"
                                                             "i239"
                                                             "i237"
                                                             "i235"
                                                             "i233"
                                                             "i231"
                                                             "i229"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors
                                                              and-map*)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i23"
                                                             "i22"
                                                             "i21"
                                                             "i19")))
                                                         (hygiene guile))
                                                      #{keys\ 3604}#))
                                              #f)
                                          (let ((#{labels\ 3629}#
                                                  (list (#{gen-label\ 388}#)))
                                                (#{var\ 3630}#
                                                  (#{gen-var\ 485}#
                                                    #{pat\ 3621}#)))
                                            (#{build-application\ 294}#
                                              #f
                                              (#{build-simple-lambda\ 314}#
                                                #f
                                                (list (syntax->datum
                                                        #{pat\ 3621}#))
                                                #f
                                                (list #{var\ 3630}#)
                                                '()
                                                (#{chi\ 457}#
                                                  #{exp\ 3622}#
                                                  (#{extend-env\ 360}#
                                                    #{labels\ 3629}#
                                                    (list (cons 'syntax
                                                                (cons #{var\ 3630}#
                                                                      0)))
                                                    #{r\ 3606}#)
                                                  (#{make-binding-wrap\ 419}#
                                                    (list #{pat\ 3621}#)
                                                    #{labels\ 3629}#
                                                    '(()))
                                                  #{mod\ 3607}#))
                                              (list #{x\ 3603}#)))
                                          (#{gen-clause\ 3600}#
                                            #{x\ 3603}#
                                            #{keys\ 3604}#
                                            (cdr #{clauses\ 3605}#)
                                            #{r\ 3606}#
                                            #{pat\ 3621}#
                                            #t
                                            #{exp\ 3622}#
                                            #{mod\ 3607}#)))
                                      #{tmp\ 3618}#)
                               ((lambda (#{tmp\ 3636}#)
                                  (if #{tmp\ 3636}#
                                    (apply (lambda (#{pat\ 3640}#
                                                    #{fender\ 3641}#
                                                    #{exp\ 3642}#)
                                             (#{gen-clause\ 3600}#
                                               #{x\ 3603}#
                                               #{keys\ 3604}#
                                               (cdr #{clauses\ 3605}#)
                                               #{r\ 3606}#
                                               #{pat\ 3640}#
                                               #{fender\ 3641}#
                                               #{exp\ 3642}#
                                               #{mod\ 3607}#))
                                           #{tmp\ 3636}#)
                                    ((lambda (#{_\ 3644}#)
                                       (syntax-violation
                                         'syntax-case
                                         "invalid clause"
                                         (car #{clauses\ 3605}#)))
                                     #{tmp\ 3617}#)))
                                ($sc-dispatch
                                  #{tmp\ 3617}#
                                  '(any any any)))))
                           ($sc-dispatch #{tmp\ 3617}# (quote (any any)))))
                        (car #{clauses\ 3605}#)))))
                 (#{gen-clause\ 3600}#
                   (lambda (#{x\ 3645}#
                            #{keys\ 3646}#
                            #{clauses\ 3647}#
                            #{r\ 3648}#
                            #{pat\ 3649}#
                            #{fender\ 3650}#
                            #{exp\ 3651}#
                            #{mod\ 3652}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 3596}#
                           #{pat\ 3649}#
                           #{keys\ 3646}#))
                       (lambda (#{p\ 3661}# #{pvars\ 3662}#)
                         (if (not (#{distinct-bound-ids?\ 437}#
                                    (map car #{pvars\ 3662}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 3649}#)
                           (if (not (and-map
                                      (lambda (#{x\ 3669}#)
                                        (not (#{ellipsis?\ 473}#
                                               (car #{x\ 3669}#))))
                                      #{pvars\ 3662}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 3649}#)
                             (let ((#{y\ 3673}#
                                     (#{gen-var\ 485}# (quote tmp))))
                               (#{build-application\ 294}#
                                 #f
                                 (#{build-simple-lambda\ 314}#
                                   #f
                                   (list (quote tmp))
                                   #f
                                   (list #{y\ 3673}#)
                                   '()
                                   (let ((#{y\ 3677}#
                                           (#{build-lexical-reference\ 300}#
                                             'value
                                             #f
                                             'tmp
                                             #{y\ 3673}#)))
                                     (#{build-conditional\ 296}#
                                       #f
                                       ((lambda (#{tmp\ 3680}#)
                                          ((lambda (#{tmp\ 3681}#)
                                             (if #{tmp\ 3681}#
                                               (apply (lambda () #{y\ 3677}#)
                                                      #{tmp\ 3681}#)
                                               ((lambda (#{_\ 3683}#)
                                                  (#{build-conditional\ 296}#
                                                    #f
                                                    #{y\ 3677}#
                                                    (#{build-dispatch-call\ 3598}#
                                                      #{pvars\ 3662}#
                                                      #{fender\ 3650}#
                                                      #{y\ 3677}#
                                                      #{r\ 3648}#
                                                      #{mod\ 3652}#)
                                                    (#{build-data\ 322}#
                                                      #f
                                                      #f)))
                                                #{tmp\ 3680}#)))
                                           ($sc-dispatch
                                             #{tmp\ 3680}#
                                             '#(atom #t))))
                                        #{fender\ 3650}#)
                                       (#{build-dispatch-call\ 3598}#
                                         #{pvars\ 3662}#
                                         #{exp\ 3651}#
                                         #{y\ 3677}#
                                         #{r\ 3648}#
                                         #{mod\ 3652}#)
                                       (#{gen-syntax-case\ 3602}#
                                         #{x\ 3645}#
                                         #{keys\ 3646}#
                                         #{clauses\ 3647}#
                                         #{r\ 3648}#
                                         #{mod\ 3652}#))))
                                 (list (if (eq? #{p\ 3661}# (quote any))
                                         (#{build-application\ 294}#
                                           #f
                                           (#{build-primref\ 320}#
                                             #f
                                             'list)
                                           (list #{x\ 3645}#))
                                         (#{build-application\ 294}#
                                           #f
                                           (#{build-primref\ 320}#
                                             #f
                                             '$sc-dispatch)
                                           (list #{x\ 3645}#
                                                 (#{build-data\ 322}#
                                                   #f
                                                   #{p\ 3661}#)))))))))))))
                 (#{build-dispatch-call\ 3598}#
                   (lambda (#{pvars\ 3691}#
                            #{exp\ 3692}#
                            #{y\ 3693}#
                            #{r\ 3694}#
                            #{mod\ 3695}#)
                     (let ((#{ids\ 3703}# (map car #{pvars\ 3691}#))
                           (#{levels\ 3704}# (map cdr #{pvars\ 3691}#)))
                       (let ((#{labels\ 3707}#
                               (#{gen-labels\ 390}# #{ids\ 3703}#))
                             (#{new-vars\ 3708}#
                               (map #{gen-var\ 485}# #{ids\ 3703}#)))
                         (#{build-application\ 294}#
                           #f
                           (#{build-primref\ 320}# #f (quote apply))
                           (list (#{build-simple-lambda\ 314}#
                                   #f
                                   (map syntax->datum #{ids\ 3703}#)
                                   #f
                                   #{new-vars\ 3708}#
                                   '()
                                   (#{chi\ 457}#
                                     #{exp\ 3692}#
                                     (#{extend-env\ 360}#
                                       #{labels\ 3707}#
                                       (map (lambda (#{var\ 3712}#
                                                     #{level\ 3713}#)
                                              (cons 'syntax
                                                    (cons #{var\ 3712}#
                                                          #{level\ 3713}#)))
                                            #{new-vars\ 3708}#
                                            (map cdr #{pvars\ 3691}#))
                                       #{r\ 3694}#)
                                     (#{make-binding-wrap\ 419}#
                                       #{ids\ 3703}#
                                       #{labels\ 3707}#
                                       '(()))
                                     #{mod\ 3695}#))
                                 #{y\ 3693}#))))))
                 (#{convert-pattern\ 3596}#
                   (lambda (#{pattern\ 3719}# #{keys\ 3720}#)
                     (letrec ((#{cvt\ 3726}#
                                (lambda (#{p\ 3727}# #{n\ 3728}# #{ids\ 3729}#)
                                  (if (#{id?\ 372}# #{p\ 3727}#)
                                    (if (#{bound-id-member?\ 439}#
                                          #{p\ 3727}#
                                          #{keys\ 3720}#)
                                      (values
                                        (vector (quote free-id) #{p\ 3727}#)
                                        #{ids\ 3729}#)
                                      (values
                                        'any
                                        (cons (cons #{p\ 3727}# #{n\ 3728}#)
                                              #{ids\ 3729}#)))
                                    ((lambda (#{tmp\ 3733}#)
                                       ((lambda (#{tmp\ 3734}#)
                                          (if (if #{tmp\ 3734}#
                                                (apply (lambda (#{x\ 3737}#
                                                                #{dots\ 3738}#)
                                                         (#{ellipsis?\ 473}#
                                                           #{dots\ 3738}#))
                                                       #{tmp\ 3734}#)
                                                #f)
                                            (apply (lambda (#{x\ 3741}#
                                                            #{dots\ 3742}#)
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{cvt\ 3726}#
                                                           #{x\ 3741}#
                                                           (#{fx+\ 273}#
                                                             #{n\ 3728}#
                                                             1)
                                                           #{ids\ 3729}#))
                                                       (lambda (#{p\ 3743}#
                                                                #{ids\ 3744}#)
                                                         (values
                                                           (if (eq? #{p\ 3743}#
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               #{p\ 3743}#))
                                                           #{ids\ 3744}#))))
                                                   #{tmp\ 3734}#)
                                            ((lambda (#{tmp\ 3747}#)
                                               (if (if #{tmp\ 3747}#
                                                     (apply (lambda (#{x\ 3751}#
                                                                     #{dots\ 3752}#
                                                                     #{ys\ 3753}#)
                                                              (#{ellipsis?\ 473}#
                                                                #{dots\ 3752}#))
                                                            #{tmp\ 3747}#)
                                                     #f)
                                                 (apply (lambda (#{x\ 3757}#
                                                                 #{dots\ 3758}#
                                                                 #{ys\ 3759}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{cvt*\ 3724}#
                                                                #{ys\ 3759}#
                                                                #{n\ 3728}#
                                                                #{ids\ 3729}#))
                                                            (lambda (#{ys\ 3761}#
                                                                     #{ids\ 3762}#)
                                                              (call-with-values
                                                                (lambda ()
                                                                  (#{cvt\ 3726}#
                                                                    #{x\ 3757}#
                                                                    (+ #{n\ 3728}#
                                                                       1)
                                                                    #{ids\ 3762}#))
                                                                (lambda (#{x\ 3765}#
                                                                         #{ids\ 3766}#)
                                                                  (values
                                                                    (list->vector
                                                                      (cons 'each+
                                                                            (cons #{x\ 3765}#
                                                                                  (cons (reverse
                                                                                          #{ys\ 3761}#)
                                                                                        '(())))))
                                                                    #{ids\ 3766}#))))))
                                                        #{tmp\ 3747}#)
                                                 ((lambda (#{tmp\ 3770}#)
                                                    (if #{tmp\ 3770}#
                                                      (apply (lambda (#{x\ 3773}#
                                                                      #{y\ 3774}#)
                                                               (call-with-values
                                                                 (lambda ()
                                                                   (#{cvt\ 3726}#
                                                                     #{y\ 3774}#
                                                                     #{n\ 3728}#
                                                                     #{ids\ 3729}#))
                                                                 (lambda (#{y\ 3775}#
                                                                          #{ids\ 3776}#)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (#{cvt\ 3726}#
                                                                         #{x\ 3773}#
                                                                         #{n\ 3728}#
                                                                         #{ids\ 3776}#))
                                                                     (lambda (#{x\ 3779}#
                                                                              #{ids\ 3780}#)
                                                                       (values
                                                                         (cons #{x\ 3779}#
                                                                               #{y\ 3775}#)
                                                                         #{ids\ 3780}#))))))
                                                             #{tmp\ 3770}#)
                                                      ((lambda (#{tmp\ 3783}#)
                                                         (if #{tmp\ 3783}#
                                                           (apply (lambda ()
                                                                    (values
                                                                      '()
                                                                      #{ids\ 3729}#))
                                                                  #{tmp\ 3783}#)
                                                           ((lambda (#{tmp\ 3784}#)
                                                              (if #{tmp\ 3784}#
                                                                (apply (lambda (#{x\ 3786}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{cvt\ 3726}#
                                                                               #{x\ 3786}#
                                                                               #{n\ 3728}#
                                                                               #{ids\ 3729}#))
                                                                           (lambda (#{p\ 3788}#
                                                                                    #{ids\ 3789}#)
                                                                             (values
                                                                               (vector
                                                                                 'vector
                                                                                 #{p\ 3788}#)
                                                                               #{ids\ 3789}#))))
                                                                       #{tmp\ 3784}#)
                                                                ((lambda (#{x\ 3793}#)
                                                                   (values
                                                                     (vector
                                                                       'atom
                                                                       (#{strip\ 483}#
                                                                         #{p\ 3727}#
                                                                         '(())))
                                                                     #{ids\ 3729}#))
                                                                 #{tmp\ 3733}#)))
                                                            ($sc-dispatch
                                                              #{tmp\ 3733}#
                                                              '#(vector
                                                                 each-any)))))
                                                       ($sc-dispatch
                                                         #{tmp\ 3733}#
                                                         '()))))
                                                  ($sc-dispatch
                                                    #{tmp\ 3733}#
                                                    '(any . any)))))
                                             ($sc-dispatch
                                               #{tmp\ 3733}#
                                               '(any any . each-any)))))
                                        ($sc-dispatch
                                          #{tmp\ 3733}#
                                          '(any any))))
                                     #{p\ 3727}#))))
                              (#{cvt*\ 3724}#
                                (lambda (#{p*\ 3795}#
                                         #{n\ 3796}#
                                         #{ids\ 3797}#)
                                  (if (null? #{p*\ 3795}#)
                                    (values (quote ()) #{ids\ 3797}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt*\ 3724}#
                                          (cdr #{p*\ 3795}#)
                                          #{n\ 3796}#
                                          #{ids\ 3797}#))
                                      (lambda (#{y\ 3801}# #{ids\ 3802}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 3726}#
                                              (car #{p*\ 3795}#)
                                              #{n\ 3796}#
                                              #{ids\ 3802}#))
                                          (lambda (#{x\ 3805}# #{ids\ 3806}#)
                                            (values
                                              (cons #{x\ 3805}# #{y\ 3801}#)
                                              #{ids\ 3806}#)))))))))
                       (#{cvt\ 3726}# #{pattern\ 3719}# 0 (quote ()))))))
          (lambda (#{e\ 3809}#
                   #{r\ 3810}#
                   #{w\ 3811}#
                   #{s\ 3812}#
                   #{mod\ 3813}#)
            (let ((#{e\ 3820}#
                    (#{source-wrap\ 443}#
                      #{e\ 3809}#
                      #{w\ 3811}#
                      #{s\ 3812}#
                      #{mod\ 3813}#)))
              ((lambda (#{tmp\ 3821}#)
                 ((lambda (#{tmp\ 3822}#)
                    (if #{tmp\ 3822}#
                      (apply (lambda (#{_\ 3827}#
                                      #{val\ 3828}#
                                      #{key\ 3829}#
                                      #{m\ 3830}#)
                               (if (and-map
                                     (lambda (#{x\ 3831}#)
                                       (if (#{id?\ 372}# #{x\ 3831}#)
                                         (not (#{ellipsis?\ 473}# #{x\ 3831}#))
                                         #f))
                                     #{key\ 3829}#)
                                 (let ((#{x\ 3837}#
                                         (#{gen-var\ 485}# (quote tmp))))
                                   (#{build-application\ 294}#
                                     #{s\ 3812}#
                                     (#{build-simple-lambda\ 314}#
                                       #f
                                       (list (quote tmp))
                                       #f
                                       (list #{x\ 3837}#)
                                       '()
                                       (#{gen-syntax-case\ 3602}#
                                         (#{build-lexical-reference\ 300}#
                                           'value
                                           #f
                                           'tmp
                                           #{x\ 3837}#)
                                         #{key\ 3829}#
                                         #{m\ 3830}#
                                         #{r\ 3810}#
                                         #{mod\ 3813}#))
                                     (list (#{chi\ 457}#
                                             #{val\ 3828}#
                                             #{r\ 3810}#
                                             '(())
                                             #{mod\ 3813}#))))
                                 (syntax-violation
                                   'syntax-case
                                   "invalid literals list"
                                   #{e\ 3820}#)))
                             #{tmp\ 3822}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 3821}#)))
                  ($sc-dispatch
                    #{tmp\ 3821}#
                    '(any any each-any . each-any))))
               #{e\ 3820}#)))))
      (set! macroexpand
        (lambda*
          (#{x\ 3843}#
            #:optional
            (#{m\ 3845}# (quote e))
            (#{esew\ 3847}# (quote (eval))))
          (#{chi-top\ 455}#
            #{x\ 3843}#
            '()
            '((top))
            #{m\ 3845}#
            #{esew\ 3847}#
            (cons 'hygiene
                  (module-name (current-module))))))
      (set! identifier?
        (lambda (#{x\ 3851}#)
          (#{nonsymbol-id?\ 370}# #{x\ 3851}#)))
      (set! datum->syntax
        (lambda (#{id\ 3853}# #{datum\ 3854}#)
          (#{make-syntax-object\ 334}#
            #{datum\ 3854}#
            (#{syntax-object-wrap\ 340}# #{id\ 3853}#)
            (#{syntax-object-module\ 342}# #{id\ 3853}#))))
      (set! syntax->datum
        (lambda (#{x\ 3857}#)
          (#{strip\ 483}# #{x\ 3857}# (quote (())))))
      (set! syntax-source
        (lambda (#{x\ 3860}#)
          (#{source-annotation\ 351}# #{x\ 3860}#)))
      (set! generate-temporaries
        (lambda (#{ls\ 3862}#)
          (begin
            (let ((#{x\ 3866}# #{ls\ 3862}#))
              (if (not (list? #{x\ 3866}#))
                (syntax-violation
                  'generate-temporaries
                  "invalid argument"
                  #{x\ 3866}#)))
            (map (lambda (#{x\ 3867}#)
                   (#{wrap\ 441}# (gensym) (quote ((top))) #f))
                 #{ls\ 3862}#))))
      (set! free-identifier=?
        (lambda (#{x\ 3871}# #{y\ 3872}#)
          (begin
            (let ((#{x\ 3877}# #{x\ 3871}#))
              (if (not (#{nonsymbol-id?\ 370}# #{x\ 3877}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 3877}#)))
            (let ((#{x\ 3880}# #{y\ 3872}#))
              (if (not (#{nonsymbol-id?\ 370}# #{x\ 3880}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 3880}#)))
            (#{free-id=?\ 431}# #{x\ 3871}# #{y\ 3872}#))))
      (set! bound-identifier=?
        (lambda (#{x\ 3881}# #{y\ 3882}#)
          (begin
            (let ((#{x\ 3887}# #{x\ 3881}#))
              (if (not (#{nonsymbol-id?\ 370}# #{x\ 3887}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 3887}#)))
            (let ((#{x\ 3890}# #{y\ 3882}#))
              (if (not (#{nonsymbol-id?\ 370}# #{x\ 3890}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 3890}#)))
            (#{bound-id=?\ 433}# #{x\ 3881}# #{y\ 3882}#))))
      (set! syntax-violation
        (lambda (#{who\ 3891}#
                 #{message\ 3892}#
                 #{form\ 3893}#
                 .
                 #{subform\ 3894}#)
          (begin
            (let ((#{x\ 3901}# #{who\ 3891}#))
              (if (not ((lambda (#{x\ 3902}#)
                          (let ((#{t\ 3906}# (not #{x\ 3902}#)))
                            (if #{t\ 3906}#
                              #{t\ 3906}#
                              (let ((#{t\ 3909}# (string? #{x\ 3902}#)))
                                (if #{t\ 3909}#
                                  #{t\ 3909}#
                                  (symbol? #{x\ 3902}#))))))
                        #{x\ 3901}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 3901}#)))
            (let ((#{x\ 3913}# #{message\ 3892}#))
              (if (not (string? #{x\ 3913}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 3913}#)))
            (scm-error
              'syntax-error
              'macroexpand
              (string-append
                (if #{who\ 3891}# "~a: " "")
                "~a "
                (if (null? #{subform\ 3894}#)
                  "in ~a"
                  "in subform `~s' of `~s'"))
              (let ((#{tail\ 3915}#
                      (cons #{message\ 3892}#
                            (map (lambda (#{x\ 3916}#)
                                   (#{strip\ 483}# #{x\ 3916}# (quote (()))))
                                 (append
                                   #{subform\ 3894}#
                                   (list #{form\ 3893}#))))))
                (if #{who\ 3891}#
                  (cons #{who\ 3891}# #{tail\ 3915}#)
                  #{tail\ 3915}#))
              #f))))
      (letrec ((#{match\ 3932}#
                 (lambda (#{e\ 3933}#
                          #{p\ 3934}#
                          #{w\ 3935}#
                          #{r\ 3936}#
                          #{mod\ 3937}#)
                   (if (not #{r\ 3936}#)
                     #f
                     (if (eq? #{p\ 3934}# (quote any))
                       (cons (#{wrap\ 441}#
                               #{e\ 3933}#
                               #{w\ 3935}#
                               #{mod\ 3937}#)
                             #{r\ 3936}#)
                       (if (#{syntax-object?\ 336}# #{e\ 3933}#)
                         (#{match*\ 3930}#
                           (#{syntax-object-expression\ 338}# #{e\ 3933}#)
                           #{p\ 3934}#
                           (#{join-wraps\ 423}#
                             #{w\ 3935}#
                             (#{syntax-object-wrap\ 340}# #{e\ 3933}#))
                           #{r\ 3936}#
                           (#{syntax-object-module\ 342}# #{e\ 3933}#))
                         (#{match*\ 3930}#
                           #{e\ 3933}#
                           #{p\ 3934}#
                           #{w\ 3935}#
                           #{r\ 3936}#
                           #{mod\ 3937}#))))))
               (#{match*\ 3930}#
                 (lambda (#{e\ 3950}#
                          #{p\ 3951}#
                          #{w\ 3952}#
                          #{r\ 3953}#
                          #{mod\ 3954}#)
                   (if (null? #{p\ 3951}#)
                     (if (null? #{e\ 3950}#) #{r\ 3953}# #f)
                     (if (pair? #{p\ 3951}#)
                       (if (pair? #{e\ 3950}#)
                         (#{match\ 3932}#
                           (car #{e\ 3950}#)
                           (car #{p\ 3951}#)
                           #{w\ 3952}#
                           (#{match\ 3932}#
                             (cdr #{e\ 3950}#)
                             (cdr #{p\ 3951}#)
                             #{w\ 3952}#
                             #{r\ 3953}#
                             #{mod\ 3954}#)
                           #{mod\ 3954}#)
                         #f)
                       (if (eq? #{p\ 3951}# (quote each-any))
                         (let ((#{l\ 3971}#
                                 (#{match-each-any\ 3924}#
                                   #{e\ 3950}#
                                   #{w\ 3952}#
                                   #{mod\ 3954}#)))
                           (if #{l\ 3971}#
                             (cons #{l\ 3971}# #{r\ 3953}#)
                             #f))
                         (let ((#{atom-key\ 3977}# (vector-ref #{p\ 3951}# 0)))
                           (if (memv #{atom-key\ 3977}# (quote (each)))
                             (if (null? #{e\ 3950}#)
                               (#{match-empty\ 3926}#
                                 (vector-ref #{p\ 3951}# 1)
                                 #{r\ 3953}#)
                               (let ((#{l\ 3980}#
                                       (#{match-each\ 3920}#
                                         #{e\ 3950}#
                                         (vector-ref #{p\ 3951}# 1)
                                         #{w\ 3952}#
                                         #{mod\ 3954}#)))
                                 (if #{l\ 3980}#
                                   (letrec ((#{collect\ 3985}#
                                              (lambda (#{l\ 3986}#)
                                                (if (null? (car #{l\ 3986}#))
                                                  #{r\ 3953}#
                                                  (cons (map car #{l\ 3986}#)
                                                        (#{collect\ 3985}#
                                                          (map cdr
                                                               #{l\ 3986}#)))))))
                                     (#{collect\ 3985}# #{l\ 3980}#))
                                   #f)))
                             (if (memv #{atom-key\ 3977}# (quote (each+)))
                               (call-with-values
                                 (lambda ()
                                   (#{match-each+\ 3922}#
                                     #{e\ 3950}#
                                     (vector-ref #{p\ 3951}# 1)
                                     (vector-ref #{p\ 3951}# 2)
                                     (vector-ref #{p\ 3951}# 3)
                                     #{w\ 3952}#
                                     #{r\ 3953}#
                                     #{mod\ 3954}#))
                                 (lambda (#{xr*\ 3988}#
                                          #{y-pat\ 3989}#
                                          #{r\ 3990}#)
                                   (if #{r\ 3990}#
                                     (if (null? #{y-pat\ 3989}#)
                                       (if (null? #{xr*\ 3988}#)
                                         (#{match-empty\ 3926}#
                                           (vector-ref #{p\ 3951}# 1)
                                           #{r\ 3990}#)
                                         (#{combine\ 3928}#
                                           #{xr*\ 3988}#
                                           #{r\ 3990}#))
                                       #f)
                                     #f)))
                               (if (memv #{atom-key\ 3977}# (quote (free-id)))
                                 (if (#{id?\ 372}# #{e\ 3950}#)
                                   (if (#{free-id=?\ 431}#
                                         (#{wrap\ 441}#
                                           #{e\ 3950}#
                                           #{w\ 3952}#
                                           #{mod\ 3954}#)
                                         (vector-ref #{p\ 3951}# 1))
                                     #{r\ 3953}#
                                     #f)
                                   #f)
                                 (if (memv #{atom-key\ 3977}# (quote (atom)))
                                   (if (equal?
                                         (vector-ref #{p\ 3951}# 1)
                                         (#{strip\ 483}#
                                           #{e\ 3950}#
                                           #{w\ 3952}#))
                                     #{r\ 3953}#
                                     #f)
                                   (if (memv #{atom-key\ 3977}#
                                             '(vector))
                                     (if (vector? #{e\ 3950}#)
                                       (#{match\ 3932}#
                                         (vector->list #{e\ 3950}#)
                                         (vector-ref #{p\ 3951}# 1)
                                         #{w\ 3952}#
                                         #{r\ 3953}#
                                         #{mod\ 3954}#)
                                       #f))))))))))))
               (#{combine\ 3928}#
                 (lambda (#{r*\ 4007}# #{r\ 4008}#)
                   (if (null? (car #{r*\ 4007}#))
                     #{r\ 4008}#
                     (cons (map car #{r*\ 4007}#)
                           (#{combine\ 3928}#
                             (map cdr #{r*\ 4007}#)
                             #{r\ 4008}#)))))
               (#{match-empty\ 3926}#
                 (lambda (#{p\ 4011}# #{r\ 4012}#)
                   (if (null? #{p\ 4011}#)
                     #{r\ 4012}#
                     (if (eq? #{p\ 4011}# (quote any))
                       (cons (quote ()) #{r\ 4012}#)
                       (if (pair? #{p\ 4011}#)
                         (#{match-empty\ 3926}#
                           (car #{p\ 4011}#)
                           (#{match-empty\ 3926}#
                             (cdr #{p\ 4011}#)
                             #{r\ 4012}#))
                         (if (eq? #{p\ 4011}# (quote each-any))
                           (cons (quote ()) #{r\ 4012}#)
                           (let ((#{atom-key\ 4026}#
                                   (vector-ref #{p\ 4011}# 0)))
                             (if (memv #{atom-key\ 4026}# (quote (each)))
                               (#{match-empty\ 3926}#
                                 (vector-ref #{p\ 4011}# 1)
                                 #{r\ 4012}#)
                               (if (memv #{atom-key\ 4026}# (quote (each+)))
                                 (#{match-empty\ 3926}#
                                   (vector-ref #{p\ 4011}# 1)
                                   (#{match-empty\ 3926}#
                                     (reverse (vector-ref #{p\ 4011}# 2))
                                     (#{match-empty\ 3926}#
                                       (vector-ref #{p\ 4011}# 3)
                                       #{r\ 4012}#)))
                                 (if (memv #{atom-key\ 4026}#
                                           '(free-id atom))
                                   #{r\ 4012}#
                                   (if (memv #{atom-key\ 4026}#
                                             '(vector))
                                     (#{match-empty\ 3926}#
                                       (vector-ref #{p\ 4011}# 1)
                                       #{r\ 4012}#))))))))))))
               (#{match-each-any\ 3924}#
                 (lambda (#{e\ 4031}# #{w\ 4032}# #{mod\ 4033}#)
                   (if (pair? #{e\ 4031}#)
                     (let ((#{l\ 4040}#
                             (#{match-each-any\ 3924}#
                               (cdr #{e\ 4031}#)
                               #{w\ 4032}#
                               #{mod\ 4033}#)))
                       (if #{l\ 4040}#
                         (cons (#{wrap\ 441}#
                                 (car #{e\ 4031}#)
                                 #{w\ 4032}#
                                 #{mod\ 4033}#)
                               #{l\ 4040}#)
                         #f))
                     (if (null? #{e\ 4031}#)
                       '()
                       (if (#{syntax-object?\ 336}# #{e\ 4031}#)
                         (#{match-each-any\ 3924}#
                           (#{syntax-object-expression\ 338}# #{e\ 4031}#)
                           (#{join-wraps\ 423}#
                             #{w\ 4032}#
                             (#{syntax-object-wrap\ 340}# #{e\ 4031}#))
                           #{mod\ 4033}#)
                         #f)))))
               (#{match-each+\ 3922}#
                 (lambda (#{e\ 4048}#
                          #{x-pat\ 4049}#
                          #{y-pat\ 4050}#
                          #{z-pat\ 4051}#
                          #{w\ 4052}#
                          #{r\ 4053}#
                          #{mod\ 4054}#)
                   (letrec ((#{f\ 4065}#
                              (lambda (#{e\ 4066}# #{w\ 4067}#)
                                (if (pair? #{e\ 4066}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{f\ 4065}#
                                        (cdr #{e\ 4066}#)
                                        #{w\ 4067}#))
                                    (lambda (#{xr*\ 4070}#
                                             #{y-pat\ 4071}#
                                             #{r\ 4072}#)
                                      (if #{r\ 4072}#
                                        (if (null? #{y-pat\ 4071}#)
                                          (let ((#{xr\ 4077}#
                                                  (#{match\ 3932}#
                                                    (car #{e\ 4066}#)
                                                    #{x-pat\ 4049}#
                                                    #{w\ 4067}#
                                                    '()
                                                    #{mod\ 4054}#)))
                                            (if #{xr\ 4077}#
                                              (values
                                                (cons #{xr\ 4077}#
                                                      #{xr*\ 4070}#)
                                                #{y-pat\ 4071}#
                                                #{r\ 4072}#)
                                              (values #f #f #f)))
                                          (values
                                            '()
                                            (cdr #{y-pat\ 4071}#)
                                            (#{match\ 3932}#
                                              (car #{e\ 4066}#)
                                              (car #{y-pat\ 4071}#)
                                              #{w\ 4067}#
                                              #{r\ 4072}#
                                              #{mod\ 4054}#)))
                                        (values #f #f #f))))
                                  (if (#{syntax-object?\ 336}# #{e\ 4066}#)
                                    (#{f\ 4065}#
                                      (#{syntax-object-expression\ 338}#
                                        #{e\ 4066}#)
                                      (#{join-wraps\ 423}#
                                        #{w\ 4067}#
                                        #{e\ 4066}#))
                                    (values
                                      '()
                                      #{y-pat\ 4050}#
                                      (#{match\ 3932}#
                                        #{e\ 4066}#
                                        #{z-pat\ 4051}#
                                        #{w\ 4067}#
                                        #{r\ 4053}#
                                        #{mod\ 4054}#)))))))
                     (#{f\ 4065}# #{e\ 4048}# #{w\ 4052}#))))
               (#{match-each\ 3920}#
                 (lambda (#{e\ 4081}#
                          #{p\ 4082}#
                          #{w\ 4083}#
                          #{mod\ 4084}#)
                   (if (pair? #{e\ 4081}#)
                     (let ((#{first\ 4092}#
                             (#{match\ 3932}#
                               (car #{e\ 4081}#)
                               #{p\ 4082}#
                               #{w\ 4083}#
                               '()
                               #{mod\ 4084}#)))
                       (if #{first\ 4092}#
                         (let ((#{rest\ 4096}#
                                 (#{match-each\ 3920}#
                                   (cdr #{e\ 4081}#)
                                   #{p\ 4082}#
                                   #{w\ 4083}#
                                   #{mod\ 4084}#)))
                           (if #{rest\ 4096}#
                             (cons #{first\ 4092}# #{rest\ 4096}#)
                             #f))
                         #f))
                     (if (null? #{e\ 4081}#)
                       '()
                       (if (#{syntax-object?\ 336}# #{e\ 4081}#)
                         (#{match-each\ 3920}#
                           (#{syntax-object-expression\ 338}# #{e\ 4081}#)
                           #{p\ 4082}#
                           (#{join-wraps\ 423}#
                             #{w\ 4083}#
                             (#{syntax-object-wrap\ 340}# #{e\ 4081}#))
                           (#{syntax-object-module\ 342}# #{e\ 4081}#))
                         #f))))))
        (set! $sc-dispatch
          (lambda (#{e\ 4104}# #{p\ 4105}#)
            (if (eq? #{p\ 4105}# (quote any))
              (list #{e\ 4104}#)
              (if (#{syntax-object?\ 336}# #{e\ 4104}#)
                (#{match*\ 3930}#
                  (#{syntax-object-expression\ 338}# #{e\ 4104}#)
                  #{p\ 4105}#
                  (#{syntax-object-wrap\ 340}# #{e\ 4104}#)
                  '()
                  (#{syntax-object-module\ 342}# #{e\ 4104}#))
                (#{match*\ 3930}#
                  #{e\ 4104}#
                  #{p\ 4105}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x\ 4114}#)
      ((lambda (#{tmp\ 4116}#)
         ((lambda (#{tmp\ 4117}#)
            (if #{tmp\ 4117}#
              (apply (lambda (#{_\ 4121}# #{e1\ 4122}# #{e2\ 4123}#)
                       (cons '#(syntax-object
                                begin
                                ((top)
                                 #(ribcage
                                   #(_ e1 e2)
                                   #((top) (top) (top))
                                   #("i4118" "i4119" "i4120"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4115")))
                                (hygiene guile))
                             (cons #{e1\ 4122}# #{e2\ 4123}#)))
                     #{tmp\ 4117}#)
              ((lambda (#{tmp\ 4125}#)
                 (if #{tmp\ 4125}#
                   (apply (lambda (#{_\ 4131}#
                                   #{out\ 4132}#
                                   #{in\ 4133}#
                                   #{e1\ 4134}#
                                   #{e2\ 4135}#)
                            (list '#(syntax-object
                                     syntax-case
                                     ((top)
                                      #(ribcage
                                        #(_ out in e1 e2)
                                        #((top) (top) (top) (top) (top))
                                        #("i4126"
                                          "i4127"
                                          "i4128"
                                          "i4129"
                                          "i4130"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4115")))
                                     (hygiene guile))
                                  #{in\ 4133}#
                                  '()
                                  (list #{out\ 4132}#
                                        (cons '#(syntax-object
                                                 begin
                                                 ((top)
                                                  #(ribcage
                                                    #(_ out in e1 e2)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i4126"
                                                      "i4127"
                                                      "i4128"
                                                      "i4129"
                                                      "i4130"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4115")))
                                                 (hygiene guile))
                                              (cons #{e1\ 4134}#
                                                    #{e2\ 4135}#)))))
                          #{tmp\ 4125}#)
                   ((lambda (#{tmp\ 4137}#)
                      (if #{tmp\ 4137}#
                        (apply (lambda (#{_\ 4143}#
                                        #{out\ 4144}#
                                        #{in\ 4145}#
                                        #{e1\ 4146}#
                                        #{e2\ 4147}#)
                                 (list '#(syntax-object
                                          syntax-case
                                          ((top)
                                           #(ribcage
                                             #(_ out in e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i4138"
                                               "i4139"
                                               "i4140"
                                               "i4141"
                                               "i4142"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i4115")))
                                          (hygiene guile))
                                       (cons '#(syntax-object
                                                list
                                                ((top)
                                                 #(ribcage
                                                   #(_ out in e1 e2)
                                                   #((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                   #("i4138"
                                                     "i4139"
                                                     "i4140"
                                                     "i4141"
                                                     "i4142"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4115")))
                                                (hygiene guile))
                                             #{in\ 4145}#)
                                       '()
                                       (list #{out\ 4144}#
                                             (cons '#(syntax-object
                                                      begin
                                                      ((top)
                                                       #(ribcage
                                                         #(_ out in e1 e2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4138"
                                                           "i4139"
                                                           "i4140"
                                                           "i4141"
                                                           "i4142"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4115")))
                                                      (hygiene guile))
                                                   (cons #{e1\ 4146}#
                                                         #{e2\ 4147}#)))))
                               #{tmp\ 4137}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp\ 4116}#)))
                    ($sc-dispatch
                      #{tmp\ 4116}#
                      '(any #(each (any any)) any . each-any)))))
               ($sc-dispatch
                 #{tmp\ 4116}#
                 '(any ((any any)) any . each-any)))))
          ($sc-dispatch
            #{tmp\ 4116}#
            '(any () any . each-any))))
       #{x\ 4114}#))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x\ 4151}#)
      ((lambda (#{tmp\ 4153}#)
         ((lambda (#{tmp\ 4154}#)
            (if #{tmp\ 4154}#
              (apply (lambda (#{_\ 4160}#
                              #{k\ 4161}#
                              #{keyword\ 4162}#
                              #{pattern\ 4163}#
                              #{template\ 4164}#)
                       (list '#(syntax-object
                                lambda
                                ((top)
                                 #(ribcage
                                   #(_ k keyword pattern template)
                                   #((top) (top) (top) (top) (top))
                                   #("i4155" "i4156" "i4157" "i4158" "i4159"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4152")))
                                (hygiene guile))
                             '(#(syntax-object
                                 x
                                 ((top)
                                  #(ribcage
                                    #(_ k keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i4155" "i4156" "i4157" "i4158" "i4159"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4152")))
                                 (hygiene guile)))
                             (vector
                               '(#(syntax-object
                                   macro-type
                                   ((top)
                                    #(ribcage
                                      #(_ k keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i4155"
                                        "i4156"
                                        "i4157"
                                        "i4158"
                                        "i4159"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4152")))
                                   (hygiene guile))
                                 .
                                 #(syntax-object
                                   syntax-rules
                                   ((top)
                                    #(ribcage
                                      #(_ k keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i4155"
                                        "i4156"
                                        "i4157"
                                        "i4158"
                                        "i4159"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4152")))
                                   (hygiene guile)))
                               (cons '#(syntax-object
                                        patterns
                                        ((top)
                                         #(ribcage
                                           #(_ k keyword pattern template)
                                           #((top) (top) (top) (top) (top))
                                           #("i4155"
                                             "i4156"
                                             "i4157"
                                             "i4158"
                                             "i4159"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i4152")))
                                        (hygiene guile))
                                     #{pattern\ 4163}#))
                             (cons '#(syntax-object
                                      syntax-case
                                      ((top)
                                       #(ribcage
                                         #(_ k keyword pattern template)
                                         #((top) (top) (top) (top) (top))
                                         #("i4155"
                                           "i4156"
                                           "i4157"
                                           "i4158"
                                           "i4159"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4152")))
                                      (hygiene guile))
                                   (cons '#(syntax-object
                                            x
                                            ((top)
                                             #(ribcage
                                               #(_ k keyword pattern template)
                                               #((top) (top) (top) (top) (top))
                                               #("i4155"
                                                 "i4156"
                                                 "i4157"
                                                 "i4158"
                                                 "i4159"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4152")))
                                            (hygiene guile))
                                         (cons #{k\ 4161}#
                                               (map (lambda (#{tmp\ 4168}#
                                                             #{tmp\ 4167}#)
                                                      (list (cons '#(syntax-object
                                                                     dummy
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(_
                                                                          k
                                                                          keyword
                                                                          pattern
                                                                          template)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i4155"
                                                                          "i4156"
                                                                          "i4157"
                                                                          "i4158"
                                                                          "i4159"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x)
                                                                        #((top))
                                                                        #("i4152")))
                                                                     (hygiene
                                                                       guile))
                                                                  #{tmp\ 4167}#)
                                                            (list '#(syntax-object
                                                                     syntax
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(_
                                                                          k
                                                                          keyword
                                                                          pattern
                                                                          template)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i4155"
                                                                          "i4156"
                                                                          "i4157"
                                                                          "i4158"
                                                                          "i4159"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x)
                                                                        #((top))
                                                                        #("i4152")))
                                                                     (hygiene
                                                                       guile))
                                                                  #{tmp\ 4168}#)))
                                                    #{template\ 4164}#
                                                    #{pattern\ 4163}#))))))
                     #{tmp\ 4154}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4153}#)))
          ($sc-dispatch
            #{tmp\ 4153}#
            '(any each-any . #(each ((any . any) any))))))
       #{x\ 4151}#))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x\ 4169}#)
      ((lambda (#{tmp\ 4171}#)
         ((lambda (#{tmp\ 4172}#)
            (if (if #{tmp\ 4172}#
                  (apply (lambda (#{let*\ 4178}#
                                  #{x\ 4179}#
                                  #{v\ 4180}#
                                  #{e1\ 4181}#
                                  #{e2\ 4182}#)
                           (and-map identifier? #{x\ 4179}#))
                         #{tmp\ 4172}#)
                  #f)
              (apply (lambda (#{let*\ 4189}#
                              #{x\ 4190}#
                              #{v\ 4191}#
                              #{e1\ 4192}#
                              #{e2\ 4193}#)
                       (letrec ((#{f\ 4196}#
                                  (lambda (#{bindings\ 4197}#)
                                    (if (null? #{bindings\ 4197}#)
                                      (cons '#(syntax-object
                                               let
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f bindings)
                                                  #((top) (top))
                                                  #("i4194" "i4195"))
                                                #(ribcage
                                                  #(let* x v e1 e2)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i4184"
                                                    "i4185"
                                                    "i4186"
                                                    "i4187"
                                                    "i4188"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i4170")))
                                               (hygiene guile))
                                            (cons '()
                                                  (cons #{e1\ 4192}#
                                                        #{e2\ 4193}#)))
                                      ((lambda (#{tmp\ 4202}#)
                                         ((lambda (#{tmp\ 4203}#)
                                            (if #{tmp\ 4203}#
                                              (apply (lambda (#{body\ 4206}#
                                                              #{binding\ 4207}#)
                                                       (list '#(syntax-object
                                                                let
                                                                ((top)
                                                                 #(ribcage
                                                                   #(body
                                                                     binding)
                                                                   #((top)
                                                                     (top))
                                                                   #("i4204"
                                                                     "i4205"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     bindings)
                                                                   #((top)
                                                                     (top))
                                                                   #("i4194"
                                                                     "i4195"))
                                                                 #(ribcage
                                                                   #(let*
                                                                     x
                                                                     v
                                                                     e1
                                                                     e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i4184"
                                                                     "i4185"
                                                                     "i4186"
                                                                     "i4187"
                                                                     "i4188"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i4170")))
                                                                (hygiene
                                                                  guile))
                                                             (list #{binding\ 4207}#)
                                                             #{body\ 4206}#))
                                                     #{tmp\ 4203}#)
                                              (syntax-violation
                                                #f
                                                "source expression failed to match any pattern"
                                                #{tmp\ 4202}#)))
                                          ($sc-dispatch
                                            #{tmp\ 4202}#
                                            '(any any))))
                                       (list (#{f\ 4196}#
                                               (cdr #{bindings\ 4197}#))
                                             (car #{bindings\ 4197}#)))))))
                         (#{f\ 4196}# (map list #{x\ 4190}# #{v\ 4191}#))))
                     #{tmp\ 4172}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4171}#)))
          ($sc-dispatch
            #{tmp\ 4171}#
            '(any #(each (any any)) any . each-any))))
       #{x\ 4169}#))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x\ 4208}#)
      ((lambda (#{tmp\ 4210}#)
         ((lambda (#{tmp\ 4211}#)
            (if #{tmp\ 4211}#
              (apply (lambda (#{_\ 4219}#
                              #{var\ 4220}#
                              #{init\ 4221}#
                              #{step\ 4222}#
                              #{e0\ 4223}#
                              #{e1\ 4224}#
                              #{c\ 4225}#)
                       ((lambda (#{tmp\ 4227}#)
                          ((lambda (#{tmp\ 4228}#)
                             (if #{tmp\ 4228}#
                               (apply (lambda (#{step\ 4230}#)
                                        ((lambda (#{tmp\ 4231}#)
                                           ((lambda (#{tmp\ 4232}#)
                                              (if #{tmp\ 4232}#
                                                (apply (lambda ()
                                                         (list '#(syntax-object
                                                                  let
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(step)
                                                                     #((top))
                                                                     #("i4229"))
                                                                   #(ribcage
                                                                     #(_
                                                                       var
                                                                       init
                                                                       step
                                                                       e0
                                                                       e1
                                                                       c)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4212"
                                                                       "i4213"
                                                                       "i4214"
                                                                       "i4215"
                                                                       "i4216"
                                                                       "i4217"
                                                                       "i4218"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(orig-x)
                                                                     #((top))
                                                                     #("i4209")))
                                                                  (hygiene
                                                                    guile))
                                                               '#(syntax-object
                                                                  doloop
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(step)
                                                                     #((top))
                                                                     #("i4229"))
                                                                   #(ribcage
                                                                     #(_
                                                                       var
                                                                       init
                                                                       step
                                                                       e0
                                                                       e1
                                                                       c)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4212"
                                                                       "i4213"
                                                                       "i4214"
                                                                       "i4215"
                                                                       "i4216"
                                                                       "i4217"
                                                                       "i4218"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(orig-x)
                                                                     #((top))
                                                                     #("i4209")))
                                                                  (hygiene
                                                                    guile))
                                                               (map list
                                                                    #{var\ 4220}#
                                                                    #{init\ 4221}#)
                                                               (list '#(syntax-object
                                                                        if
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4229"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4212"
                                                                             "i4213"
                                                                             "i4214"
                                                                             "i4215"
                                                                             "i4216"
                                                                             "i4217"
                                                                             "i4218"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4209")))
                                                                        (hygiene
                                                                          guile))
                                                                     (list '#(syntax-object
                                                                              not
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i4229"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i4212"
                                                                                   "i4213"
                                                                                   "i4214"
                                                                                   "i4215"
                                                                                   "i4216"
                                                                                   "i4217"
                                                                                   "i4218"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i4209")))
                                                                              (hygiene
                                                                                guile))
                                                                           #{e0\ 4223}#)
                                                                     (cons '#(syntax-object
                                                                              begin
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i4229"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i4212"
                                                                                   "i4213"
                                                                                   "i4214"
                                                                                   "i4215"
                                                                                   "i4216"
                                                                                   "i4217"
                                                                                   "i4218"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i4209")))
                                                                              (hygiene
                                                                                guile))
                                                                           (append
                                                                             #{c\ 4225}#
                                                                             (list (cons '#(syntax-object
                                                                                            doloop
                                                                                            ((top)
                                                                                             #(ribcage
                                                                                               #(step)
                                                                                               #((top))
                                                                                               #("i4229"))
                                                                                             #(ribcage
                                                                                               #(_
                                                                                                 var
                                                                                                 init
                                                                                                 step
                                                                                                 e0
                                                                                                 e1
                                                                                                 c)
                                                                                               #((top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top))
                                                                                               #("i4212"
                                                                                                 "i4213"
                                                                                                 "i4214"
                                                                                                 "i4215"
                                                                                                 "i4216"
                                                                                                 "i4217"
                                                                                                 "i4218"))
                                                                                             #(ribcage
                                                                                               ()
                                                                                               ()
                                                                                               ())
                                                                                             #(ribcage
                                                                                               #(orig-x)
                                                                                               #((top))
                                                                                               #("i4209")))
                                                                                            (hygiene
                                                                                              guile))
                                                                                         #{step\ 4230}#)))))))
                                                       #{tmp\ 4232}#)
                                                ((lambda (#{tmp\ 4237}#)
                                                   (if #{tmp\ 4237}#
                                                     (apply (lambda (#{e1\ 4240}#
                                                                     #{e2\ 4241}#)
                                                              (list '#(syntax-object
                                                                       let
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4238"
                                                                            "i4239"))
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i4229"))
                                                                        #(ribcage
                                                                          #(_
                                                                            var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4212"
                                                                            "i4213"
                                                                            "i4214"
                                                                            "i4215"
                                                                            "i4216"
                                                                            "i4217"
                                                                            "i4218"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i4209")))
                                                                       (hygiene
                                                                         guile))
                                                                    '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4238"
                                                                            "i4239"))
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i4229"))
                                                                        #(ribcage
                                                                          #(_
                                                                            var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4212"
                                                                            "i4213"
                                                                            "i4214"
                                                                            "i4215"
                                                                            "i4216"
                                                                            "i4217"
                                                                            "i4218"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i4209")))
                                                                       (hygiene
                                                                         guile))
                                                                    (map list
                                                                         #{var\ 4220}#
                                                                         #{init\ 4221}#)
                                                                    (list '#(syntax-object
                                                                             if
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4238"
                                                                                  "i4239"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4229"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4212"
                                                                                  "i4213"
                                                                                  "i4214"
                                                                                  "i4215"
                                                                                  "i4216"
                                                                                  "i4217"
                                                                                  "i4218"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4209")))
                                                                             (hygiene
                                                                               guile))
                                                                          #{e0\ 4223}#
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4238"
                                                                                        "i4239"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i4229"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4212"
                                                                                        "i4213"
                                                                                        "i4214"
                                                                                        "i4215"
                                                                                        "i4216"
                                                                                        "i4217"
                                                                                        "i4218"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i4209")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{e1\ 4240}#
                                                                                      #{e2\ 4241}#))
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4238"
                                                                                        "i4239"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i4229"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4212"
                                                                                        "i4213"
                                                                                        "i4214"
                                                                                        "i4215"
                                                                                        "i4216"
                                                                                        "i4217"
                                                                                        "i4218"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i4209")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (append
                                                                                  #{c\ 4225}#
                                                                                  (list (cons '#(syntax-object
                                                                                                 doloop
                                                                                                 ((top)
                                                                                                  #(ribcage
                                                                                                    #(e1
                                                                                                      e2)
                                                                                                    #((top)
                                                                                                      (top))
                                                                                                    #("i4238"
                                                                                                      "i4239"))
                                                                                                  #(ribcage
                                                                                                    #(step)
                                                                                                    #((top))
                                                                                                    #("i4229"))
                                                                                                  #(ribcage
                                                                                                    #(_
                                                                                                      var
                                                                                                      init
                                                                                                      step
                                                                                                      e0
                                                                                                      e1
                                                                                                      c)
                                                                                                    #((top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top))
                                                                                                    #("i4212"
                                                                                                      "i4213"
                                                                                                      "i4214"
                                                                                                      "i4215"
                                                                                                      "i4216"
                                                                                                      "i4217"
                                                                                                      "i4218"))
                                                                                                  #(ribcage
                                                                                                    ()
                                                                                                    ()
                                                                                                    ())
                                                                                                  #(ribcage
                                                                                                    #(orig-x)
                                                                                                    #((top))
                                                                                                    #("i4209")))
                                                                                                 (hygiene
                                                                                                   guile))
                                                                                              #{step\ 4230}#)))))))
                                                            #{tmp\ 4237}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 4231}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 4231}#
                                                   '(any . each-any)))))
                                            ($sc-dispatch
                                              #{tmp\ 4231}#
                                              '())))
                                         #{e1\ 4224}#))
                                      #{tmp\ 4228}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4227}#)))
                           ($sc-dispatch #{tmp\ 4227}# (quote each-any))))
                        (map (lambda (#{v\ 4248}# #{s\ 4249}#)
                               ((lambda (#{tmp\ 4252}#)
                                  ((lambda (#{tmp\ 4253}#)
                                     (if #{tmp\ 4253}#
                                       (apply (lambda () #{v\ 4248}#)
                                              #{tmp\ 4253}#)
                                       ((lambda (#{tmp\ 4254}#)
                                          (if #{tmp\ 4254}#
                                            (apply (lambda (#{e\ 4256}#)
                                                     #{e\ 4256}#)
                                                   #{tmp\ 4254}#)
                                            ((lambda (#{_\ 4258}#)
                                               (syntax-violation
                                                 'do
                                                 "bad step expression"
                                                 #{orig-x\ 4208}#
                                                 #{s\ 4249}#))
                                             #{tmp\ 4252}#)))
                                        ($sc-dispatch
                                          #{tmp\ 4252}#
                                          '(any)))))
                                   ($sc-dispatch #{tmp\ 4252}# (quote ()))))
                                #{s\ 4249}#))
                             #{var\ 4220}#
                             #{step\ 4222}#)))
                     #{tmp\ 4211}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4210}#)))
          ($sc-dispatch
            #{tmp\ 4210}#
            '(any #(each (any any . any))
                  (any . each-any)
                  .
                  each-any))))
       #{orig-x\ 4208}#))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec ((#{quasicons\ 4265}#
               (lambda (#{x\ 4269}# #{y\ 4270}#)
                 ((lambda (#{tmp\ 4274}#)
                    ((lambda (#{tmp\ 4275}#)
                       (if #{tmp\ 4275}#
                         (apply (lambda (#{x\ 4278}# #{y\ 4279}#)
                                  ((lambda (#{tmp\ 4280}#)
                                     ((lambda (#{tmp\ 4281}#)
                                        (if #{tmp\ 4281}#
                                          (apply (lambda (#{dy\ 4283}#)
                                                   ((lambda (#{tmp\ 4284}#)
                                                      ((lambda (#{tmp\ 4285}#)
                                                         (if #{tmp\ 4285}#
                                                           (apply (lambda (#{dx\ 4287}#)
                                                                    (list '#(syntax-object
                                                                             quote
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(dx)
                                                                                #((top))
                                                                                #("i4286"))
                                                                              #(ribcage
                                                                                #(dy)
                                                                                #((top))
                                                                                #("i4282"))
                                                                              #(ribcage
                                                                                #(x
                                                                                  y)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4276"
                                                                                  "i4277"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x
                                                                                  y)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4271"
                                                                                  "i4272"))
                                                                              #(ribcage
                                                                                #(quasicons
                                                                                  quasiappend
                                                                                  quasivector
                                                                                  quasi)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4261"
                                                                                  "i4262"
                                                                                  "i4263"
                                                                                  "i4264")))
                                                                             (hygiene
                                                                               guile))
                                                                          (cons #{dx\ 4287}#
                                                                                #{dy\ 4283}#)))
                                                                  #{tmp\ 4285}#)
                                                           ((lambda (#{_\ 4289}#)
                                                              (if (null? #{dy\ 4283}#)
                                                                (list '#(syntax-object
                                                                         list
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(_)
                                                                            #((top))
                                                                            #("i4288"))
                                                                          #(ribcage
                                                                            #(dy)
                                                                            #((top))
                                                                            #("i4282"))
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4276"
                                                                              "i4277"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4271"
                                                                              "i4272"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i4261"
                                                                              "i4262"
                                                                              "i4263"
                                                                              "i4264")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{x\ 4278}#)
                                                                (list '#(syntax-object
                                                                         cons
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(_)
                                                                            #((top))
                                                                            #("i4288"))
                                                                          #(ribcage
                                                                            #(dy)
                                                                            #((top))
                                                                            #("i4282"))
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4276"
                                                                              "i4277"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4271"
                                                                              "i4272"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i4261"
                                                                              "i4262"
                                                                              "i4263"
                                                                              "i4264")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{x\ 4278}#
                                                                      #{y\ 4279}#)))
                                                            #{tmp\ 4284}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4284}#
                                                         '(#(free-id
                                                             #(syntax-object
                                                               quote
                                                               ((top)
                                                                #(ribcage
                                                                  #(dy)
                                                                  #((top))
                                                                  #("i4282"))
                                                                #(ribcage
                                                                  #(x y)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4276"
                                                                    "i4277"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x y)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4271"
                                                                    "i4272"))
                                                                #(ribcage
                                                                  #(quasicons
                                                                    quasiappend
                                                                    quasivector
                                                                    quasi)
                                                                  #((top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                  #("i4261"
                                                                    "i4262"
                                                                    "i4263"
                                                                    "i4264")))
                                                               (hygiene
                                                                 guile)))
                                                           any))))
                                                    #{x\ 4278}#))
                                                 #{tmp\ 4281}#)
                                          ((lambda (#{tmp\ 4290}#)
                                             (if #{tmp\ 4290}#
                                               (apply (lambda (#{stuff\ 4292}#)
                                                        (cons '#(syntax-object
                                                                 list
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(stuff)
                                                                    #((top))
                                                                    #("i4291"))
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4276"
                                                                      "i4277"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4271"
                                                                      "i4272"))
                                                                  #(ribcage
                                                                    #(quasicons
                                                                      quasiappend
                                                                      quasivector
                                                                      quasi)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4261"
                                                                      "i4262"
                                                                      "i4263"
                                                                      "i4264")))
                                                                 (hygiene
                                                                   guile))
                                                              (cons #{x\ 4278}#
                                                                    #{stuff\ 4292}#)))
                                                      #{tmp\ 4290}#)
                                               ((lambda (#{else\ 4294}#)
                                                  (list '#(syntax-object
                                                           cons
                                                           ((top)
                                                            #(ribcage
                                                              #(else)
                                                              #((top))
                                                              #("i4293"))
                                                            #(ribcage
                                                              #(x y)
                                                              #((top) (top))
                                                              #("i4276"
                                                                "i4277"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(x y)
                                                              #((top) (top))
                                                              #("i4271"
                                                                "i4272"))
                                                            #(ribcage
                                                              #(quasicons
                                                                quasiappend
                                                                quasivector
                                                                quasi)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i4261"
                                                                "i4262"
                                                                "i4263"
                                                                "i4264")))
                                                           (hygiene guile))
                                                        #{x\ 4278}#
                                                        #{y\ 4279}#))
                                                #{tmp\ 4280}#)))
                                           ($sc-dispatch
                                             #{tmp\ 4280}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   list
                                                   ((top)
                                                    #(ribcage
                                                      #(x y)
                                                      #((top) (top))
                                                      #("i4276" "i4277"))
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x y)
                                                      #((top) (top))
                                                      #("i4271" "i4272"))
                                                    #(ribcage
                                                      #(quasicons
                                                        quasiappend
                                                        quasivector
                                                        quasi)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4261"
                                                        "i4262"
                                                        "i4263"
                                                        "i4264")))
                                                   (hygiene guile)))
                                               .
                                               any)))))
                                      ($sc-dispatch
                                        #{tmp\ 4280}#
                                        '(#(free-id
                                            #(syntax-object
                                              quote
                                              ((top)
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4276" "i4277"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4271" "i4272"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4261"
                                                   "i4262"
                                                   "i4263"
                                                   "i4264")))
                                              (hygiene guile)))
                                          any))))
                                   #{y\ 4279}#))
                                #{tmp\ 4275}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 4274}#)))
                     ($sc-dispatch #{tmp\ 4274}# (quote (any any)))))
                  (list #{x\ 4269}# #{y\ 4270}#))))
             (#{quasiappend\ 4266}#
               (lambda (#{x\ 4295}# #{y\ 4296}#)
                 ((lambda (#{tmp\ 4300}#)
                    ((lambda (#{tmp\ 4301}#)
                       (if #{tmp\ 4301}#
                         (apply (lambda (#{x\ 4304}# #{y\ 4305}#)
                                  ((lambda (#{tmp\ 4306}#)
                                     ((lambda (#{tmp\ 4307}#)
                                        (if #{tmp\ 4307}#
                                          (apply (lambda () #{x\ 4304}#)
                                                 #{tmp\ 4307}#)
                                          ((lambda (#{_\ 4309}#)
                                             (list '#(syntax-object
                                                      append
                                                      ((top)
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i4308"))
                                                       #(ribcage
                                                         #(x y)
                                                         #((top) (top))
                                                         #("i4302" "i4303"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x y)
                                                         #((top) (top))
                                                         #("i4297" "i4298"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4261"
                                                           "i4262"
                                                           "i4263"
                                                           "i4264")))
                                                      (hygiene guile))
                                                   #{x\ 4304}#
                                                   #{y\ 4305}#))
                                           #{tmp\ 4306}#)))
                                      ($sc-dispatch
                                        #{tmp\ 4306}#
                                        '(#(free-id
                                            #(syntax-object
                                              quote
                                              ((top)
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4302" "i4303"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4297" "i4298"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4261"
                                                   "i4262"
                                                   "i4263"
                                                   "i4264")))
                                              (hygiene guile)))
                                          ()))))
                                   #{y\ 4305}#))
                                #{tmp\ 4301}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 4300}#)))
                     ($sc-dispatch #{tmp\ 4300}# (quote (any any)))))
                  (list #{x\ 4295}# #{y\ 4296}#))))
             (#{quasivector\ 4267}#
               (lambda (#{x\ 4310}#)
                 ((lambda (#{tmp\ 4313}#)
                    ((lambda (#{x\ 4315}#)
                       ((lambda (#{tmp\ 4316}#)
                          ((lambda (#{tmp\ 4317}#)
                             (if #{tmp\ 4317}#
                               (apply (lambda (#{x\ 4319}#)
                                        (list '#(syntax-object
                                                 quote
                                                 ((top)
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4318"))
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4314"))
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4311"))
                                                  #(ribcage
                                                    #(quasicons
                                                      quasiappend
                                                      quasivector
                                                      quasi)
                                                    #((top) (top) (top) (top))
                                                    #("i4261"
                                                      "i4262"
                                                      "i4263"
                                                      "i4264")))
                                                 (hygiene guile))
                                              (list->vector #{x\ 4319}#)))
                                      #{tmp\ 4317}#)
                               ((lambda (#{tmp\ 4321}#)
                                  (if #{tmp\ 4321}#
                                    (apply (lambda (#{x\ 4323}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4322"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4314"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4311"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4261"
                                                           "i4262"
                                                           "i4263"
                                                           "i4264")))
                                                      (hygiene guile))
                                                   #{x\ 4323}#))
                                           #{tmp\ 4321}#)
                                    ((lambda (#{_\ 4326}#)
                                       (list '#(syntax-object
                                                list->vector
                                                ((top)
                                                 #(ribcage
                                                   #(_)
                                                   #((top))
                                                   #("i4325"))
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4314"))
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4311"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4261"
                                                     "i4262"
                                                     "i4263"
                                                     "i4264")))
                                                (hygiene guile))
                                             #{x\ 4315}#))
                                     #{tmp\ 4316}#)))
                                ($sc-dispatch
                                  #{tmp\ 4316}#
                                  '(#(free-id
                                      #(syntax-object
                                        list
                                        ((top)
                                         #(ribcage #(x) #((top)) #("i4314"))
                                         #(ribcage () () ())
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i4311"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i4261" "i4262" "i4263" "i4264")))
                                        (hygiene guile)))
                                    .
                                    each-any)))))
                           ($sc-dispatch
                             #{tmp\ 4316}#
                             '(#(free-id
                                 #(syntax-object
                                   quote
                                   ((top)
                                    #(ribcage #(x) #((top)) #("i4314"))
                                    #(ribcage () () ())
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4311"))
                                    #(ribcage
                                      #(quasicons
                                        quasiappend
                                        quasivector
                                        quasi)
                                      #((top) (top) (top) (top))
                                      #("i4261" "i4262" "i4263" "i4264")))
                                   (hygiene guile)))
                               each-any))))
                        #{x\ 4315}#))
                     #{tmp\ 4313}#))
                  #{x\ 4310}#)))
             (#{quasi\ 4268}#
               (lambda (#{p\ 4327}# #{lev\ 4328}#)
                 ((lambda (#{tmp\ 4331}#)
                    ((lambda (#{tmp\ 4332}#)
                       (if #{tmp\ 4332}#
                         (apply (lambda (#{p\ 4334}#)
                                  (if (= #{lev\ 4328}# 0)
                                    #{p\ 4334}#
                                    (#{quasicons\ 4265}#
                                      '(#(syntax-object
                                          quote
                                          ((top)
                                           #(ribcage #(p) #((top)) #("i4333"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p lev)
                                             #((top) (top))
                                             #("i4329" "i4330"))
                                           #(ribcage
                                             #(quasicons
                                               quasiappend
                                               quasivector
                                               quasi)
                                             #((top) (top) (top) (top))
                                             #("i4261"
                                               "i4262"
                                               "i4263"
                                               "i4264")))
                                          (hygiene guile))
                                        #(syntax-object
                                          unquote
                                          ((top)
                                           #(ribcage #(p) #((top)) #("i4333"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p lev)
                                             #((top) (top))
                                             #("i4329" "i4330"))
                                           #(ribcage
                                             #(quasicons
                                               quasiappend
                                               quasivector
                                               quasi)
                                             #((top) (top) (top) (top))
                                             #("i4261"
                                               "i4262"
                                               "i4263"
                                               "i4264")))
                                          (hygiene guile)))
                                      (#{quasi\ 4268}#
                                        (list #{p\ 4334}#)
                                        (- #{lev\ 4328}# 1)))))
                                #{tmp\ 4332}#)
                         ((lambda (#{tmp\ 4335}#)
                            (if (if #{tmp\ 4335}#
                                  (apply (lambda (#{args\ 4337}#)
                                           (= #{lev\ 4328}# 0))
                                         #{tmp\ 4335}#)
                                  #f)
                              (apply (lambda (#{args\ 4339}#)
                                       (syntax-violation
                                         'unquote
                                         "unquote takes exactly one argument"
                                         #{p\ 4327}#
                                         (cons '#(syntax-object
                                                  unquote
                                                  ((top)
                                                   #(ribcage
                                                     #(args)
                                                     #((top))
                                                     #("i4338"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(p lev)
                                                     #((top) (top))
                                                     #("i4329" "i4330"))
                                                   #(ribcage
                                                     #(quasicons
                                                       quasiappend
                                                       quasivector
                                                       quasi)
                                                     #((top) (top) (top) (top))
                                                     #("i4261"
                                                       "i4262"
                                                       "i4263"
                                                       "i4264")))
                                                  (hygiene guile))
                                               #{args\ 4339}#)))
                                     #{tmp\ 4335}#)
                              ((lambda (#{tmp\ 4340}#)
                                 (if #{tmp\ 4340}#
                                   (apply (lambda (#{p\ 4343}# #{q\ 4344}#)
                                            (if (= #{lev\ 4328}# 0)
                                              (#{quasiappend\ 4266}#
                                                #{p\ 4343}#
                                                (#{quasi\ 4268}#
                                                  #{q\ 4344}#
                                                  #{lev\ 4328}#))
                                              (#{quasicons\ 4265}#
                                                (#{quasicons\ 4265}#
                                                  '(#(syntax-object
                                                      quote
                                                      ((top)
                                                       #(ribcage
                                                         #(p q)
                                                         #((top) (top))
                                                         #("i4341" "i4342"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(p lev)
                                                         #((top) (top))
                                                         #("i4329" "i4330"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4261"
                                                           "i4262"
                                                           "i4263"
                                                           "i4264")))
                                                      (hygiene guile))
                                                    #(syntax-object
                                                      unquote-splicing
                                                      ((top)
                                                       #(ribcage
                                                         #(p q)
                                                         #((top) (top))
                                                         #("i4341" "i4342"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(p lev)
                                                         #((top) (top))
                                                         #("i4329" "i4330"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4261"
                                                           "i4262"
                                                           "i4263"
                                                           "i4264")))
                                                      (hygiene guile)))
                                                  (#{quasi\ 4268}#
                                                    (list #{p\ 4343}#)
                                                    (- #{lev\ 4328}# 1)))
                                                (#{quasi\ 4268}#
                                                  #{q\ 4344}#
                                                  #{lev\ 4328}#))))
                                          #{tmp\ 4340}#)
                                   ((lambda (#{tmp\ 4345}#)
                                      (if (if #{tmp\ 4345}#
                                            (apply (lambda (#{args\ 4348}#
                                                            #{q\ 4349}#)
                                                     (= #{lev\ 4328}# 0))
                                                   #{tmp\ 4345}#)
                                            #f)
                                        (apply (lambda (#{args\ 4352}#
                                                        #{q\ 4353}#)
                                                 (syntax-violation
                                                   'unquote-splicing
                                                   "unquote-splicing takes exactly one argument"
                                                   #{p\ 4327}#
                                                   (cons '#(syntax-object
                                                            unquote-splicing
                                                            ((top)
                                                             #(ribcage
                                                               #(args q)
                                                               #((top) (top))
                                                               #("i4350"
                                                                 "i4351"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4329"
                                                                 "i4330"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4261"
                                                                 "i4262"
                                                                 "i4263"
                                                                 "i4264")))
                                                            (hygiene guile))
                                                         #{args\ 4352}#)))
                                               #{tmp\ 4345}#)
                                        ((lambda (#{tmp\ 4354}#)
                                           (if #{tmp\ 4354}#
                                             (apply (lambda (#{p\ 4356}#)
                                                      (#{quasicons\ 4265}#
                                                        '(#(syntax-object
                                                            quote
                                                            ((top)
                                                             #(ribcage
                                                               #(p)
                                                               #((top))
                                                               #("i4355"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4329"
                                                                 "i4330"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4261"
                                                                 "i4262"
                                                                 "i4263"
                                                                 "i4264")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            quasiquote
                                                            ((top)
                                                             #(ribcage
                                                               #(p)
                                                               #((top))
                                                               #("i4355"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4329"
                                                                 "i4330"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4261"
                                                                 "i4262"
                                                                 "i4263"
                                                                 "i4264")))
                                                            (hygiene guile)))
                                                        (#{quasi\ 4268}#
                                                          (list #{p\ 4356}#)
                                                          (+ #{lev\ 4328}#
                                                             1))))
                                                    #{tmp\ 4354}#)
                                             ((lambda (#{tmp\ 4357}#)
                                                (if #{tmp\ 4357}#
                                                  (apply (lambda (#{p\ 4360}#
                                                                  #{q\ 4361}#)
                                                           (#{quasicons\ 4265}#
                                                             (#{quasi\ 4268}#
                                                               #{p\ 4360}#
                                                               #{lev\ 4328}#)
                                                             (#{quasi\ 4268}#
                                                               #{q\ 4361}#
                                                               #{lev\ 4328}#)))
                                                         #{tmp\ 4357}#)
                                                  ((lambda (#{tmp\ 4362}#)
                                                     (if #{tmp\ 4362}#
                                                       (apply (lambda (#{x\ 4364}#)
                                                                (#{quasivector\ 4267}#
                                                                  (#{quasi\ 4268}#
                                                                    #{x\ 4364}#
                                                                    #{lev\ 4328}#)))
                                                              #{tmp\ 4362}#)
                                                       ((lambda (#{p\ 4367}#)
                                                          (list '#(syntax-object
                                                                   quote
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(p)
                                                                      #((top))
                                                                      #("i4366"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(p lev)
                                                                      #((top)
                                                                        (top))
                                                                      #("i4329"
                                                                        "i4330"))
                                                                    #(ribcage
                                                                      #(quasicons
                                                                        quasiappend
                                                                        quasivector
                                                                        quasi)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i4261"
                                                                        "i4262"
                                                                        "i4263"
                                                                        "i4264")))
                                                                   (hygiene
                                                                     guile))
                                                                #{p\ 4367}#))
                                                        #{tmp\ 4331}#)))
                                                   ($sc-dispatch
                                                     #{tmp\ 4331}#
                                                     '#(vector each-any)))))
                                              ($sc-dispatch
                                                #{tmp\ 4331}#
                                                '(any . any)))))
                                         ($sc-dispatch
                                           #{tmp\ 4331}#
                                           '(#(free-id
                                               #(syntax-object
                                                 quasiquote
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i4329" "i4330"))
                                                  #(ribcage
                                                    #(quasicons
                                                      quasiappend
                                                      quasivector
                                                      quasi)
                                                    #((top) (top) (top) (top))
                                                    #("i4261"
                                                      "i4262"
                                                      "i4263"
                                                      "i4264")))
                                                 (hygiene guile)))
                                             any)))))
                                    ($sc-dispatch
                                      #{tmp\ 4331}#
                                      '((#(free-id
                                           #(syntax-object
                                             unquote-splicing
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i4329" "i4330"))
                                              #(ribcage
                                                #(quasicons
                                                  quasiappend
                                                  quasivector
                                                  quasi)
                                                #((top) (top) (top) (top))
                                                #("i4261"
                                                  "i4262"
                                                  "i4263"
                                                  "i4264")))
                                             (hygiene guile)))
                                         .
                                         any)
                                        .
                                        any)))))
                               ($sc-dispatch
                                 #{tmp\ 4331}#
                                 '((#(free-id
                                      #(syntax-object
                                        unquote-splicing
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i4329" "i4330"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i4261" "i4262" "i4263" "i4264")))
                                        (hygiene guile)))
                                    any)
                                   .
                                   any)))))
                          ($sc-dispatch
                            #{tmp\ 4331}#
                            '(#(free-id
                                #(syntax-object
                                  unquote
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage
                                     #(p lev)
                                     #((top) (top))
                                     #("i4329" "i4330"))
                                   #(ribcage
                                     #(quasicons quasiappend quasivector quasi)
                                     #((top) (top) (top) (top))
                                     #("i4261" "i4262" "i4263" "i4264")))
                                  (hygiene guile)))
                              .
                              any)))))
                     ($sc-dispatch
                       #{tmp\ 4331}#
                       '(#(free-id
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4329" "i4330"))
                              #(ribcage
                                #(quasicons quasiappend quasivector quasi)
                                #((top) (top) (top) (top))
                                #("i4261" "i4262" "i4263" "i4264")))
                             (hygiene guile)))
                         any))))
                  #{p\ 4327}#))))
      (lambda (#{x\ 4368}#)
        ((lambda (#{tmp\ 4370}#)
           ((lambda (#{tmp\ 4371}#)
              (if #{tmp\ 4371}#
                (apply (lambda (#{_\ 4374}# #{e\ 4375}#)
                         (#{quasi\ 4268}# #{e\ 4375}# 0))
                       #{tmp\ 4371}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4370}#)))
            ($sc-dispatch #{tmp\ 4370}# (quote (any any)))))
         #{x\ 4368}#)))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x\ 4376}#)
      (letrec ((#{read-file\ 4379}#
                 (lambda (#{fn\ 4380}# #{k\ 4381}#)
                   (let ((#{p\ 4385}# (open-input-file #{fn\ 4380}#)))
                     (letrec ((#{f\ 4389}#
                                (lambda (#{x\ 4390}# #{result\ 4391}#)
                                  (if (eof-object? #{x\ 4390}#)
                                    (begin
                                      (close-input-port #{p\ 4385}#)
                                      (reverse #{result\ 4391}#))
                                    (#{f\ 4389}#
                                      (read #{p\ 4385}#)
                                      (cons (datum->syntax
                                              #{k\ 4381}#
                                              #{x\ 4390}#)
                                            #{result\ 4391}#))))))
                       (#{f\ 4389}# (read #{p\ 4385}#) (quote ())))))))
        ((lambda (#{tmp\ 4392}#)
           ((lambda (#{tmp\ 4393}#)
              (if #{tmp\ 4393}#
                (apply (lambda (#{k\ 4396}# #{filename\ 4397}#)
                         (let ((#{fn\ 4399}#
                                 (syntax->datum #{filename\ 4397}#)))
                           ((lambda (#{tmp\ 4401}#)
                              ((lambda (#{tmp\ 4402}#)
                                 (if #{tmp\ 4402}#
                                   (apply (lambda (#{exp\ 4404}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage
                                                        #(exp)
                                                        #((top))
                                                        #("i4403"))
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(fn)
                                                        #((top))
                                                        #("i4398"))
                                                      #(ribcage
                                                        #(k filename)
                                                        #((top) (top))
                                                        #("i4394" "i4395"))
                                                      #(ribcage
                                                        (read-file)
                                                        ((top))
                                                        ("i4378"))
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4377")))
                                                     (hygiene guile))
                                                  #{exp\ 4404}#))
                                          #{tmp\ 4402}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{tmp\ 4401}#)))
                               ($sc-dispatch #{tmp\ 4401}# (quote each-any))))
                            (#{read-file\ 4379}#
                              #{fn\ 4399}#
                              #{filename\ 4397}#))))
                       #{tmp\ 4393}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4392}#)))
            ($sc-dispatch #{tmp\ 4392}# (quote (any any)))))
         #{x\ 4376}#)))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x\ 4406}#)
      ((lambda (#{tmp\ 4408}#)
         ((lambda (#{tmp\ 4409}#)
            (if #{tmp\ 4409}#
              (apply (lambda (#{k\ 4412}# #{filename\ 4413}#)
                       (let ((#{fn\ 4415}# (syntax->datum #{filename\ 4413}#)))
                         ((lambda (#{tmp\ 4417}#)
                            ((lambda (#{fn\ 4419}#)
                               (list '#(syntax-object
                                        include
                                        ((top)
                                         #(ribcage #(fn) #((top)) #("i4418"))
                                         #(ribcage () () ())
                                         #(ribcage () () ())
                                         #(ribcage #(fn) #((top)) #("i4414"))
                                         #(ribcage
                                           #(k filename)
                                           #((top) (top))
                                           #("i4410" "i4411"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i4407")))
                                        (hygiene guile))
                                     #{fn\ 4419}#))
                             #{tmp\ 4417}#))
                          (datum->syntax
                            #{filename\ 4413}#
                            (let ((#{t\ 4422}#
                                    (%search-load-path #{fn\ 4415}#)))
                              (if #{t\ 4422}#
                                #{t\ 4422}#
                                (syntax-violation
                                  'include-from-path
                                  "file not found in path"
                                  #{x\ 4406}#
                                  #{filename\ 4413}#)))))))
                     #{tmp\ 4409}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4408}#)))
          ($sc-dispatch #{tmp\ 4408}# (quote (any any)))))
       #{x\ 4406}#))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x\ 4424}#)
      ((lambda (#{tmp\ 4426}#)
         ((lambda (#{tmp\ 4427}#)
            (if #{tmp\ 4427}#
              (apply (lambda (#{_\ 4430}# #{e\ 4431}#)
                       (syntax-violation
                         'unquote
                         "expression not valid outside of quasiquote"
                         #{x\ 4424}#))
                     #{tmp\ 4427}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4426}#)))
          ($sc-dispatch #{tmp\ 4426}# (quote (any any)))))
       #{x\ 4424}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x\ 4432}#)
      ((lambda (#{tmp\ 4434}#)
         ((lambda (#{tmp\ 4435}#)
            (if #{tmp\ 4435}#
              (apply (lambda (#{_\ 4438}# #{e\ 4439}#)
                       (syntax-violation
                         'unquote-splicing
                         "expression not valid outside of quasiquote"
                         #{x\ 4432}#))
                     #{tmp\ 4435}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4434}#)))
          ($sc-dispatch #{tmp\ 4434}# (quote (any any)))))
       #{x\ 4432}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x\ 4440}#)
      ((lambda (#{tmp\ 4442}#)
         ((lambda (#{tmp\ 4443}#)
            (if #{tmp\ 4443}#
              (apply (lambda (#{_\ 4448}#
                              #{e\ 4449}#
                              #{m1\ 4450}#
                              #{m2\ 4451}#)
                       ((lambda (#{tmp\ 4453}#)
                          ((lambda (#{body\ 4455}#)
                             (list '#(syntax-object
                                      let
                                      ((top)
                                       #(ribcage #(body) #((top)) #("i4454"))
                                       #(ribcage
                                         #(_ e m1 m2)
                                         #((top) (top) (top) (top))
                                         #("i4444" "i4445" "i4446" "i4447"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4441")))
                                      (hygiene guile))
                                   (list (list '#(syntax-object
                                                  t
                                                  ((top)
                                                   #(ribcage
                                                     #(body)
                                                     #((top))
                                                     #("i4454"))
                                                   #(ribcage
                                                     #(_ e m1 m2)
                                                     #((top) (top) (top) (top))
                                                     #("i4444"
                                                       "i4445"
                                                       "i4446"
                                                       "i4447"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4441")))
                                                  (hygiene guile))
                                               #{e\ 4449}#))
                                   #{body\ 4455}#))
                           #{tmp\ 4453}#))
                        (letrec ((#{f\ 4459}#
                                   (lambda (#{clause\ 4460}# #{clauses\ 4461}#)
                                     (if (null? #{clauses\ 4461}#)
                                       ((lambda (#{tmp\ 4463}#)
                                          ((lambda (#{tmp\ 4464}#)
                                             (if #{tmp\ 4464}#
                                               (apply (lambda (#{e1\ 4467}#
                                                               #{e2\ 4468}#)
                                                        (cons '#(syntax-object
                                                                 begin
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(e1 e2)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4465"
                                                                      "i4466"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f
                                                                      clause
                                                                      clauses)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4456"
                                                                      "i4457"
                                                                      "i4458"))
                                                                  #(ribcage
                                                                    #(_
                                                                      e
                                                                      m1
                                                                      m2)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4444"
                                                                      "i4445"
                                                                      "i4446"
                                                                      "i4447"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i4441")))
                                                                 (hygiene
                                                                   guile))
                                                              (cons #{e1\ 4467}#
                                                                    #{e2\ 4468}#)))
                                                      #{tmp\ 4464}#)
                                               ((lambda (#{tmp\ 4470}#)
                                                  (if #{tmp\ 4470}#
                                                    (apply (lambda (#{k\ 4474}#
                                                                    #{e1\ 4475}#
                                                                    #{e2\ 4476}#)
                                                             (list '#(syntax-object
                                                                      if
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(k
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4471"
                                                                           "i4472"
                                                                           "i4473"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           clause
                                                                           clauses)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4456"
                                                                           "i4457"
                                                                           "i4458"))
                                                                       #(ribcage
                                                                         #(_
                                                                           e
                                                                           m1
                                                                           m2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4444"
                                                                           "i4445"
                                                                           "i4446"
                                                                           "i4447"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i4441")))
                                                                      (hygiene
                                                                        guile))
                                                                   (list '#(syntax-object
                                                                            memv
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4471"
                                                                                 "i4472"
                                                                                 "i4473"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4456"
                                                                                 "i4457"
                                                                                 "i4458"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4444"
                                                                                 "i4445"
                                                                                 "i4446"
                                                                                 "i4447"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4441")))
                                                                            (hygiene
                                                                              guile))
                                                                         '#(syntax-object
                                                                            t
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4471"
                                                                                 "i4472"
                                                                                 "i4473"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4456"
                                                                                 "i4457"
                                                                                 "i4458"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4444"
                                                                                 "i4445"
                                                                                 "i4446"
                                                                                 "i4447"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4441")))
                                                                            (hygiene
                                                                              guile))
                                                                         (list '#(syntax-object
                                                                                  quote
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4471"
                                                                                       "i4472"
                                                                                       "i4473"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4456"
                                                                                       "i4457"
                                                                                       "i4458"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4444"
                                                                                       "i4445"
                                                                                       "i4446"
                                                                                       "i4447"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4441")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               #{k\ 4474}#))
                                                                   (cons '#(syntax-object
                                                                            begin
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4471"
                                                                                 "i4472"
                                                                                 "i4473"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4456"
                                                                                 "i4457"
                                                                                 "i4458"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4444"
                                                                                 "i4445"
                                                                                 "i4446"
                                                                                 "i4447"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4441")))
                                                                            (hygiene
                                                                              guile))
                                                                         (cons #{e1\ 4475}#
                                                                               #{e2\ 4476}#))))
                                                           #{tmp\ 4470}#)
                                                    ((lambda (#{_\ 4480}#)
                                                       (syntax-violation
                                                         'case
                                                         "bad clause"
                                                         #{x\ 4440}#
                                                         #{clause\ 4460}#))
                                                     #{tmp\ 4463}#)))
                                                ($sc-dispatch
                                                  #{tmp\ 4463}#
                                                  '(each-any
                                                     any
                                                     .
                                                     each-any)))))
                                           ($sc-dispatch
                                             #{tmp\ 4463}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   else
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f clause clauses)
                                                      #((top) (top) (top))
                                                      #("i4456"
                                                        "i4457"
                                                        "i4458"))
                                                    #(ribcage
                                                      #(_ e m1 m2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4444"
                                                        "i4445"
                                                        "i4446"
                                                        "i4447"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4441")))
                                                   (hygiene guile)))
                                               any
                                               .
                                               each-any))))
                                        #{clause\ 4460}#)
                                       ((lambda (#{tmp\ 4482}#)
                                          ((lambda (#{rest\ 4484}#)
                                             ((lambda (#{tmp\ 4485}#)
                                                ((lambda (#{tmp\ 4486}#)
                                                   (if #{tmp\ 4486}#
                                                     (apply (lambda (#{k\ 4490}#
                                                                     #{e1\ 4491}#
                                                                     #{e2\ 4492}#)
                                                              (list '#(syntax-object
                                                                       if
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(k
                                                                            e1
                                                                            e2)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4487"
                                                                            "i4488"
                                                                            "i4489"))
                                                                        #(ribcage
                                                                          #(rest)
                                                                          #((top))
                                                                          #("i4483"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(f
                                                                            clause
                                                                            clauses)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4456"
                                                                            "i4457"
                                                                            "i4458"))
                                                                        #(ribcage
                                                                          #(_
                                                                            e
                                                                            m1
                                                                            m2)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4444"
                                                                            "i4445"
                                                                            "i4446"
                                                                            "i4447"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x)
                                                                          #((top))
                                                                          #("i4441")))
                                                                       (hygiene
                                                                         guile))
                                                                    (list '#(syntax-object
                                                                             memv
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4487"
                                                                                  "i4488"
                                                                                  "i4489"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4483"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4456"
                                                                                  "i4457"
                                                                                  "i4458"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4444"
                                                                                  "i4445"
                                                                                  "i4446"
                                                                                  "i4447"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4441")))
                                                                             (hygiene
                                                                               guile))
                                                                          '#(syntax-object
                                                                             t
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4487"
                                                                                  "i4488"
                                                                                  "i4489"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4483"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4456"
                                                                                  "i4457"
                                                                                  "i4458"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4444"
                                                                                  "i4445"
                                                                                  "i4446"
                                                                                  "i4447"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4441")))
                                                                             (hygiene
                                                                               guile))
                                                                          (list '#(syntax-object
                                                                                   quote
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4487"
                                                                                        "i4488"
                                                                                        "i4489"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4483"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4456"
                                                                                        "i4457"
                                                                                        "i4458"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4444"
                                                                                        "i4445"
                                                                                        "i4446"
                                                                                        "i4447"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4441")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                #{k\ 4490}#))
                                                                    (cons '#(syntax-object
                                                                             begin
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4487"
                                                                                  "i4488"
                                                                                  "i4489"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4483"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4456"
                                                                                  "i4457"
                                                                                  "i4458"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4444"
                                                                                  "i4445"
                                                                                  "i4446"
                                                                                  "i4447"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4441")))
                                                                             (hygiene
                                                                               guile))
                                                                          (cons #{e1\ 4491}#
                                                                                #{e2\ 4492}#))
                                                                    #{rest\ 4484}#))
                                                            #{tmp\ 4486}#)
                                                     ((lambda (#{_\ 4496}#)
                                                        (syntax-violation
                                                          'case
                                                          "bad clause"
                                                          #{x\ 4440}#
                                                          #{clause\ 4460}#))
                                                      #{tmp\ 4485}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 4485}#
                                                   '(each-any
                                                      any
                                                      .
                                                      each-any))))
                                              #{clause\ 4460}#))
                                           #{tmp\ 4482}#))
                                        (#{f\ 4459}#
                                          (car #{clauses\ 4461}#)
                                          (cdr #{clauses\ 4461}#)))))))
                          (#{f\ 4459}# #{m1\ 4450}# #{m2\ 4451}#))))
                     #{tmp\ 4443}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4442}#)))
          ($sc-dispatch
            #{tmp\ 4442}#
            '(any any any . each-any))))
       #{x\ 4440}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x\ 4497}#)
      ((lambda (#{tmp\ 4499}#)
         ((lambda (#{tmp\ 4500}#)
            (if #{tmp\ 4500}#
              (apply (lambda (#{_\ 4503}# #{e\ 4504}#)
                       (list '#(syntax-object
                                lambda
                                ((top)
                                 #(ribcage
                                   #(_ e)
                                   #((top) (top))
                                   #("i4501" "i4502"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4498")))
                                (hygiene guile))
                             '(#(syntax-object
                                 x
                                 ((top)
                                  #(ribcage
                                    #(_ e)
                                    #((top) (top))
                                    #("i4501" "i4502"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4498")))
                                 (hygiene guile)))
                             '#((#(syntax-object
                                   macro-type
                                   ((top)
                                    #(ribcage
                                      #(_ e)
                                      #((top) (top))
                                      #("i4501" "i4502"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4498")))
                                   (hygiene guile))
                                 .
                                 #(syntax-object
                                   identifier-syntax
                                   ((top)
                                    #(ribcage
                                      #(_ e)
                                      #((top) (top))
                                      #("i4501" "i4502"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4498")))
                                   (hygiene guile))))
                             (list '#(syntax-object
                                      syntax-case
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i4501" "i4502"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4498")))
                                      (hygiene guile))
                                   '#(syntax-object
                                      x
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i4501" "i4502"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4498")))
                                      (hygiene guile))
                                   '()
                                   (list '#(syntax-object
                                            id
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4501" "i4502"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4498")))
                                            (hygiene guile))
                                         '(#(syntax-object
                                             identifier?
                                             ((top)
                                              #(ribcage
                                                #(_ e)
                                                #((top) (top))
                                                #("i4501" "i4502"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i4498")))
                                             (hygiene guile))
                                           (#(syntax-object
                                              syntax
                                              ((top)
                                               #(ribcage
                                                 #(_ e)
                                                 #((top) (top))
                                                 #("i4501" "i4502"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4498")))
                                              (hygiene guile))
                                            #(syntax-object
                                              id
                                              ((top)
                                               #(ribcage
                                                 #(_ e)
                                                 #((top) (top))
                                                 #("i4501" "i4502"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4498")))
                                              (hygiene guile))))
                                         (list '#(syntax-object
                                                  syntax
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i4501" "i4502"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4498")))
                                                  (hygiene guile))
                                               #{e\ 4504}#))
                                   (list (cons #{_\ 4503}#
                                               '(#(syntax-object
                                                   x
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i4501" "i4502"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4498")))
                                                   (hygiene guile))
                                                 #(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i4501" "i4502"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4498")))
                                                   (hygiene guile))))
                                         (list '#(syntax-object
                                                  syntax
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i4501" "i4502"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4498")))
                                                  (hygiene guile))
                                               (cons #{e\ 4504}#
                                                     '(#(syntax-object
                                                         x
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4501" "i4502"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4498")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4501" "i4502"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4498")))
                                                         (hygiene
                                                           guile)))))))))
                     #{tmp\ 4500}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4499}#)))
          ($sc-dispatch #{tmp\ 4499}# (quote (any any)))))
       #{x\ 4497}#))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x\ 4505}#)
      ((lambda (#{tmp\ 4507}#)
         ((lambda (#{tmp\ 4508}#)
            (if #{tmp\ 4508}#
              (apply (lambda (#{_\ 4514}#
                              #{id\ 4515}#
                              #{args\ 4516}#
                              #{b0\ 4517}#
                              #{b1\ 4518}#)
                       (list '#(syntax-object
                                define
                                ((top)
                                 #(ribcage
                                   #(_ id args b0 b1)
                                   #((top) (top) (top) (top) (top))
                                   #("i4509" "i4510" "i4511" "i4512" "i4513"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4506")))
                                (hygiene guile))
                             #{id\ 4515}#
                             (cons '#(syntax-object
                                      lambda*
                                      ((top)
                                       #(ribcage
                                         #(_ id args b0 b1)
                                         #((top) (top) (top) (top) (top))
                                         #("i4509"
                                           "i4510"
                                           "i4511"
                                           "i4512"
                                           "i4513"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4506")))
                                      (hygiene guile))
                                   (cons #{args\ 4516}#
                                         (cons #{b0\ 4517}# #{b1\ 4518}#)))))
                     #{tmp\ 4508}#)
              ((lambda (#{tmp\ 4520}#)
                 (if (if #{tmp\ 4520}#
                       (apply (lambda (#{_\ 4524}# #{id\ 4525}# #{val\ 4526}#)
                                (identifier?
                                  '#(syntax-object
                                     x
                                     ((top)
                                      #(ribcage
                                        #(_ id val)
                                        #((top) (top) (top))
                                        #("i4521" "i4522" "i4523"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4506")))
                                     (hygiene guile))))
                              #{tmp\ 4520}#)
                       #f)
                   (apply (lambda (#{_\ 4530}# #{id\ 4531}# #{val\ 4532}#)
                            (list '#(syntax-object
                                     define
                                     ((top)
                                      #(ribcage
                                        #(_ id val)
                                        #((top) (top) (top))
                                        #("i4527" "i4528" "i4529"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4506")))
                                     (hygiene guile))
                                  #{id\ 4531}#
                                  #{val\ 4532}#))
                          #{tmp\ 4520}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{tmp\ 4507}#)))
               ($sc-dispatch
                 #{tmp\ 4507}#
                 '(any any any)))))
          ($sc-dispatch
            #{tmp\ 4507}#
            '(any (any . any) any . each-any))))
       #{x\ 4505}#))))

