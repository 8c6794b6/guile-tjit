(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec ((#{and-map*\ 60}#
           (lambda (#{f\ 122}# #{first\ 123}# . #{rest\ 124}#)
             (let ((#{t\ 130}# (null? #{first\ 123}#)))
               (if #{t\ 130}#
                 #{t\ 130}#
                 (if (null? #{rest\ 124}#)
                   (letrec ((#{andmap\ 134}#
                              (lambda (#{first\ 135}#)
                                (let ((#{x\ 138}# (car #{first\ 135}#))
                                      (#{first\ 139}# (cdr #{first\ 135}#)))
                                  (if (null? #{first\ 139}#)
                                    (#{f\ 122}# #{x\ 138}#)
                                    (if (#{f\ 122}# #{x\ 138}#)
                                      (#{andmap\ 134}# #{first\ 139}#)
                                      #f))))))
                     (#{andmap\ 134}# #{first\ 123}#))
                   (letrec ((#{andmap\ 145}#
                              (lambda (#{first\ 146}# #{rest\ 147}#)
                                (let ((#{x\ 152}# (car #{first\ 146}#))
                                      (#{xr\ 153}# (map car #{rest\ 147}#))
                                      (#{first\ 154}# (cdr #{first\ 146}#))
                                      (#{rest\ 155}# (map cdr #{rest\ 147}#)))
                                  (if (null? #{first\ 154}#)
                                    (apply #{f\ 122}#
                                           (cons #{x\ 152}# #{xr\ 153}#))
                                    (if (apply #{f\ 122}#
                                               (cons #{x\ 152}# #{xr\ 153}#))
                                      (#{andmap\ 145}#
                                        #{first\ 154}#
                                        #{rest\ 155}#)
                                      #f))))))
                     (#{andmap\ 145}# #{first\ 123}# #{rest\ 124}#))))))))
  (letrec ((#{lambda-var-list\ 375}#
             (lambda (#{vars\ 590}#)
               (letrec ((#{lvl\ 596}#
                          (lambda (#{vars\ 597}# #{ls\ 598}# #{w\ 599}#)
                            (if (pair? #{vars\ 597}#)
                              (#{lvl\ 596}#
                                (cdr #{vars\ 597}#)
                                (cons (#{wrap\ 329}#
                                        (car #{vars\ 597}#)
                                        #{w\ 599}#
                                        #f)
                                      #{ls\ 598}#)
                                #{w\ 599}#)
                              (if (#{id?\ 260}# #{vars\ 597}#)
                                (cons (#{wrap\ 329}#
                                        #{vars\ 597}#
                                        #{w\ 599}#
                                        #f)
                                      #{ls\ 598}#)
                                (if (null? #{vars\ 597}#)
                                  #{ls\ 598}#
                                  (if (#{syntax-object?\ 224}# #{vars\ 597}#)
                                    (#{lvl\ 596}#
                                      (#{syntax-object-expression\ 226}#
                                        #{vars\ 597}#)
                                      #{ls\ 598}#
                                      (#{join-wraps\ 311}#
                                        #{w\ 599}#
                                        (#{syntax-object-wrap\ 228}#
                                          #{vars\ 597}#)))
                                    (cons #{vars\ 597}# #{ls\ 598}#))))))))
                 (#{lvl\ 596}#
                   #{vars\ 590}#
                   '()
                   '(())))))
           (#{gen-var\ 373}#
             (lambda (#{id\ 610}#)
               (let ((#{id\ 613}#
                       (if (#{syntax-object?\ 224}# #{id\ 610}#)
                         (#{syntax-object-expression\ 226}# #{id\ 610}#)
                         #{id\ 610}#)))
                 (gensym
                   (string-append (symbol->string #{id\ 613}#) " ")))))
           (#{strip\ 371}#
             (lambda (#{x\ 615}# #{w\ 616}#)
               (if (memq 'top
                         (#{wrap-marks\ 267}# #{w\ 616}#))
                 #{x\ 615}#
                 (letrec ((#{f\ 622}# (lambda (#{x\ 623}#)
                                        (if (#{syntax-object?\ 224}#
                                              #{x\ 623}#)
                                          (#{strip\ 371}#
                                            (#{syntax-object-expression\ 226}#
                                              #{x\ 623}#)
                                            (#{syntax-object-wrap\ 228}#
                                              #{x\ 623}#))
                                          (if (pair? #{x\ 623}#)
                                            (let ((#{a\ 630}# (#{f\ 622}# (car #{x\ 623}#)))
                                                  (#{d\ 631}# (#{f\ 622}# (cdr #{x\ 623}#))))
                                              (if (if (eq? #{a\ 630}#
                                                           (car #{x\ 623}#))
                                                    (eq? #{d\ 631}#
                                                         (cdr #{x\ 623}#))
                                                    #f)
                                                #{x\ 623}#
                                                (cons #{a\ 630}# #{d\ 631}#)))
                                            (if (vector? #{x\ 623}#)
                                              (let ((#{old\ 637}#
                                                      (vector->list
                                                        #{x\ 623}#)))
                                                (let ((#{new\ 639}#
                                                        (map #{f\ 622}#
                                                             #{old\ 637}#)))
                                                  (if (#{and-map*\ 60}#
                                                        eq?
                                                        #{old\ 637}#
                                                        #{new\ 639}#)
                                                    #{x\ 623}#
                                                    (list->vector
                                                      #{new\ 639}#))))
                                              #{x\ 623}#))))))
                   (#{f\ 622}# #{x\ 615}#)))))
           (#{chi-lambda-case\ 369}#
             (lambda (#{e\ 641}#
                      #{r\ 642}#
                      #{w\ 643}#
                      #{s\ 644}#
                      #{mod\ 645}#
                      #{get-formals\ 646}#
                      #{clauses\ 647}#)
               (letrec ((#{expand-body\ 662}#
                          (lambda (#{req\ 663}#
                                   #{opt\ 664}#
                                   #{rest\ 665}#
                                   #{kw\ 666}#
                                   #{body\ 667}#
                                   #{vars\ 668}#
                                   #{r*\ 669}#
                                   #{w*\ 670}#
                                   #{inits\ 671}#)
                            ((lambda (#{tmp\ 681}#)
                               ((lambda (#{tmp\ 682}#)
                                  (if (if #{tmp\ 682}#
                                        (apply (lambda (#{docstring\ 686}#
                                                        #{e1\ 687}#
                                                        #{e2\ 688}#)
                                                 (string?
                                                   (syntax->datum
                                                     #{docstring\ 686}#)))
                                               #{tmp\ 682}#)
                                        #f)
                                    (apply (lambda (#{docstring\ 692}#
                                                    #{e1\ 693}#
                                                    #{e2\ 694}#)
                                             (values
                                               (syntax->datum
                                                 #{docstring\ 692}#)
                                               #{req\ 663}#
                                               #{opt\ 664}#
                                               #{rest\ 665}#
                                               #{kw\ 666}#
                                               #{inits\ 671}#
                                               #{vars\ 668}#
                                               (#{chi-body\ 353}#
                                                 (cons #{e1\ 693}# #{e2\ 694}#)
                                                 (#{source-wrap\ 331}#
                                                   #{e\ 641}#
                                                   #{w\ 643}#
                                                   #{s\ 644}#
                                                   #{mod\ 645}#)
                                                 #{r*\ 669}#
                                                 #{w*\ 670}#
                                                 #{mod\ 645}#)))
                                           #{tmp\ 682}#)
                                    ((lambda (#{tmp\ 696}#)
                                       (if #{tmp\ 696}#
                                         (apply (lambda (#{e1\ 699}#
                                                         #{e2\ 700}#)
                                                  (values
                                                    #f
                                                    #{req\ 663}#
                                                    #{opt\ 664}#
                                                    #{rest\ 665}#
                                                    #{kw\ 666}#
                                                    #{inits\ 671}#
                                                    #{vars\ 668}#
                                                    (#{chi-body\ 353}#
                                                      (cons #{e1\ 699}#
                                                            #{e2\ 700}#)
                                                      (#{source-wrap\ 331}#
                                                        #{e\ 641}#
                                                        #{w\ 643}#
                                                        #{s\ 644}#
                                                        #{mod\ 645}#)
                                                      #{r*\ 669}#
                                                      #{w*\ 670}#
                                                      #{mod\ 645}#)))
                                                #{tmp\ 696}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 681}#)))
                                     ($sc-dispatch
                                       #{tmp\ 681}#
                                       '(any . each-any)))))
                                ($sc-dispatch
                                  #{tmp\ 681}#
                                  '(any any . each-any))))
                             #{body\ 667}#)))
                        (#{expand-kw\ 660}#
                          (lambda (#{req\ 702}#
                                   #{opt\ 703}#
                                   #{rest\ 704}#
                                   #{kw\ 705}#
                                   #{body\ 706}#
                                   #{vars\ 707}#
                                   #{r*\ 708}#
                                   #{w*\ 709}#
                                   #{aok\ 710}#
                                   #{out\ 711}#
                                   #{inits\ 712}#)
                            (if (pair? #{kw\ 705}#)
                              ((lambda (#{tmp\ 726}#)
                                 ((lambda (#{tmp\ 727}#)
                                    (if #{tmp\ 727}#
                                      (apply (lambda (#{k\ 731}#
                                                      #{id\ 732}#
                                                      #{i\ 733}#)
                                               (let ((#{v\ 736}# (#{gen-var\ 373}#
                                                                   #{id\ 732}#)))
                                                 (let ((#{l\ 738}# (#{gen-labels\ 278}#
                                                                     (list #{v\ 736}#))))
                                                   (let ((#{r**\ 740}#
                                                           (#{extend-var-env\ 250}#
                                                             #{l\ 738}#
                                                             (list #{v\ 736}#)
                                                             #{r*\ 708}#)))
                                                     (let ((#{w**\ 742}#
                                                             (#{make-binding-wrap\ 307}#
                                                               (list #{id\ 732}#)
                                                               #{l\ 738}#
                                                               #{w*\ 709}#)))
                                                       (#{expand-kw\ 660}#
                                                         #{req\ 702}#
                                                         #{opt\ 703}#
                                                         #{rest\ 704}#
                                                         (cdr #{kw\ 705}#)
                                                         #{body\ 706}#
                                                         (cons #{v\ 736}#
                                                               #{vars\ 707}#)
                                                         #{r**\ 740}#
                                                         #{w**\ 742}#
                                                         #{aok\ 710}#
                                                         (cons (list (syntax->datum
                                                                       #{k\ 731}#)
                                                                     (syntax->datum
                                                                       #{id\ 732}#)
                                                                     #{v\ 736}#)
                                                               #{out\ 711}#)
                                                         (cons (#{chi\ 345}#
                                                                 #{i\ 733}#
                                                                 #{r*\ 708}#
                                                                 #{w*\ 709}#
                                                                 #{mod\ 645}#)
                                                               #{inits\ 712}#)))))))
                                             #{tmp\ 727}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 726}#)))
                                  ($sc-dispatch
                                    #{tmp\ 726}#
                                    '(any any any))))
                               (car #{kw\ 705}#))
                              (#{expand-body\ 662}#
                                #{req\ 702}#
                                #{opt\ 703}#
                                #{rest\ 704}#
                                (if (let ((#{t\ 746}# #{aok\ 710}#))
                                      (if #{t\ 746}#
                                        #{t\ 746}#
                                        (pair? #{out\ 711}#)))
                                  (cons #{aok\ 710}# (reverse #{out\ 711}#))
                                  #f)
                                #{body\ 706}#
                                (reverse #{vars\ 707}#)
                                #{r*\ 708}#
                                #{w*\ 709}#
                                (reverse #{inits\ 712}#)))))
                        (#{expand-opt\ 658}#
                          (lambda (#{req\ 748}#
                                   #{opt\ 749}#
                                   #{rest\ 750}#
                                   #{kw\ 751}#
                                   #{body\ 752}#
                                   #{vars\ 753}#
                                   #{r*\ 754}#
                                   #{w*\ 755}#
                                   #{out\ 756}#
                                   #{inits\ 757}#)
                            (if (pair? #{opt\ 749}#)
                              ((lambda (#{tmp\ 770}#)
                                 ((lambda (#{tmp\ 771}#)
                                    (if #{tmp\ 771}#
                                      (apply (lambda (#{id\ 774}# #{i\ 775}#)
                                               (let ((#{v\ 778}# (#{gen-var\ 373}#
                                                                   #{id\ 774}#)))
                                                 (let ((#{l\ 780}# (#{gen-labels\ 278}#
                                                                     (list #{v\ 778}#))))
                                                   (let ((#{r**\ 782}#
                                                           (#{extend-var-env\ 250}#
                                                             #{l\ 780}#
                                                             (list #{v\ 778}#)
                                                             #{r*\ 754}#)))
                                                     (let ((#{w**\ 784}#
                                                             (#{make-binding-wrap\ 307}#
                                                               (list #{id\ 774}#)
                                                               #{l\ 780}#
                                                               #{w*\ 755}#)))
                                                       (#{expand-opt\ 658}#
                                                         #{req\ 748}#
                                                         (cdr #{opt\ 749}#)
                                                         #{rest\ 750}#
                                                         #{kw\ 751}#
                                                         #{body\ 752}#
                                                         (cons #{v\ 778}#
                                                               #{vars\ 753}#)
                                                         #{r**\ 782}#
                                                         #{w**\ 784}#
                                                         (cons (syntax->datum
                                                                 #{id\ 774}#)
                                                               #{out\ 756}#)
                                                         (cons (#{chi\ 345}#
                                                                 #{i\ 775}#
                                                                 #{r*\ 754}#
                                                                 #{w*\ 755}#
                                                                 #{mod\ 645}#)
                                                               #{inits\ 757}#)))))))
                                             #{tmp\ 771}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 770}#)))
                                  ($sc-dispatch
                                    #{tmp\ 770}#
                                    '(any any))))
                               (car #{opt\ 749}#))
                              (if #{rest\ 750}#
                                (let ((#{v\ 789}# (#{gen-var\ 373}#
                                                    #{rest\ 750}#)))
                                  (let ((#{l\ 791}# (#{gen-labels\ 278}#
                                                      (list #{v\ 789}#))))
                                    (let ((#{r*\ 793}#
                                            (#{extend-var-env\ 250}#
                                              #{l\ 791}#
                                              (list #{v\ 789}#)
                                              #{r*\ 754}#)))
                                      (let ((#{w*\ 795}#
                                              (#{make-binding-wrap\ 307}#
                                                (list #{rest\ 750}#)
                                                #{l\ 791}#
                                                #{w*\ 755}#)))
                                        (#{expand-kw\ 660}#
                                          #{req\ 748}#
                                          (if (pair? #{out\ 756}#)
                                            (reverse #{out\ 756}#)
                                            #f)
                                          (syntax->datum #{rest\ 750}#)
                                          (if (pair? #{kw\ 751}#)
                                            (cdr #{kw\ 751}#)
                                            #{kw\ 751}#)
                                          #{body\ 752}#
                                          (cons #{v\ 789}# #{vars\ 753}#)
                                          #{r*\ 793}#
                                          #{w*\ 795}#
                                          (if (pair? #{kw\ 751}#)
                                            (car #{kw\ 751}#)
                                            #f)
                                          '()
                                          #{inits\ 757}#)))))
                                (#{expand-kw\ 660}#
                                  #{req\ 748}#
                                  (if (pair? #{out\ 756}#)
                                    (reverse #{out\ 756}#)
                                    #f)
                                  #f
                                  (if (pair? #{kw\ 751}#)
                                    (cdr #{kw\ 751}#)
                                    #{kw\ 751}#)
                                  #{body\ 752}#
                                  #{vars\ 753}#
                                  #{r*\ 754}#
                                  #{w*\ 755}#
                                  (if (pair? #{kw\ 751}#) (car #{kw\ 751}#) #f)
                                  '()
                                  #{inits\ 757}#)))))
                        (#{expand-req\ 656}#
                          (lambda (#{req\ 797}#
                                   #{opt\ 798}#
                                   #{rest\ 799}#
                                   #{kw\ 800}#
                                   #{body\ 801}#)
                            (let ((#{vars\ 809}#
                                    (map #{gen-var\ 373}# #{req\ 797}#))
                                  (#{labels\ 810}#
                                    (#{gen-labels\ 278}# #{req\ 797}#)))
                              (let ((#{r*\ 813}#
                                      (#{extend-var-env\ 250}#
                                        #{labels\ 810}#
                                        #{vars\ 809}#
                                        #{r\ 642}#))
                                    (#{w*\ 814}#
                                      (#{make-binding-wrap\ 307}#
                                        #{req\ 797}#
                                        #{labels\ 810}#
                                        #{w\ 643}#)))
                                (#{expand-opt\ 658}#
                                  (map syntax->datum #{req\ 797}#)
                                  #{opt\ 798}#
                                  #{rest\ 799}#
                                  #{kw\ 800}#
                                  #{body\ 801}#
                                  (reverse #{vars\ 809}#)
                                  #{r*\ 813}#
                                  #{w*\ 814}#
                                  '()
                                  '()))))))
                 ((lambda (#{tmp\ 815}#)
                    ((lambda (#{tmp\ 816}#)
                       (if #{tmp\ 816}#
                         (apply (lambda () (values #f #f)) #{tmp\ 816}#)
                         ((lambda (#{tmp\ 817}#)
                            (if #{tmp\ 817}#
                              (apply (lambda (#{args\ 824}#
                                              #{e1\ 825}#
                                              #{e2\ 826}#
                                              #{args*\ 827}#
                                              #{e1*\ 828}#
                                              #{e2*\ 829}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{get-formals\ 646}#
                                             #{args\ 824}#))
                                         (lambda (#{req\ 830}#
                                                  #{opt\ 831}#
                                                  #{rest\ 832}#
                                                  #{kw\ 833}#)
                                           (call-with-values
                                             (lambda ()
                                               (#{expand-req\ 656}#
                                                 #{req\ 830}#
                                                 #{opt\ 831}#
                                                 #{rest\ 832}#
                                                 #{kw\ 833}#
                                                 (cons #{e1\ 825}#
                                                       #{e2\ 826}#)))
                                             (lambda (#{docstring\ 839}#
                                                      #{req\ 840}#
                                                      #{opt\ 841}#
                                                      #{rest\ 842}#
                                                      #{kw\ 843}#
                                                      #{inits\ 844}#
                                                      #{vars\ 845}#
                                                      #{body\ 846}#)
                                               (call-with-values
                                                 (lambda ()
                                                   (#{chi-lambda-case\ 369}#
                                                     #{e\ 641}#
                                                     #{r\ 642}#
                                                     #{w\ 643}#
                                                     #{s\ 644}#
                                                     #{mod\ 645}#
                                                     #{get-formals\ 646}#
                                                     (map (lambda (#{tmp\ 857}#
                                                                   #{tmp\ 856}#
                                                                   #{tmp\ 855}#)
                                                            (cons #{tmp\ 855}#
                                                                  (cons #{tmp\ 856}#
                                                                        #{tmp\ 857}#)))
                                                          #{e2*\ 829}#
                                                          #{e1*\ 828}#
                                                          #{args*\ 827}#)))
                                                 (lambda (#{docstring*\ 859}#
                                                          #{else*\ 860}#)
                                                   (values
                                                     (let ((#{t\ 865}# #{docstring\ 839}#))
                                                       (if #{t\ 865}#
                                                         #{t\ 865}#
                                                         #{docstring*\ 859}#))
                                                     (#{build-lambda-case\ 206}#
                                                       #{s\ 644}#
                                                       #{req\ 840}#
                                                       #{opt\ 841}#
                                                       #{rest\ 842}#
                                                       #{kw\ 843}#
                                                       #{inits\ 844}#
                                                       #{vars\ 845}#
                                                       #{body\ 846}#
                                                       #{else*\ 860}#)))))))))
                                     #{tmp\ 817}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 815}#)))
                          ($sc-dispatch
                            #{tmp\ 815}#
                            '((any any . each-any)
                              .
                              #(each (any any . each-any)))))))
                     ($sc-dispatch #{tmp\ 815}# (quote ()))))
                  #{clauses\ 647}#))))
           (#{lambda*-formals\ 367}#
             (lambda (#{orig-args\ 867}#)
               (letrec ((#{check\ 878}#
                          (lambda (#{req\ 879}#
                                   #{opt\ 880}#
                                   #{rest\ 881}#
                                   #{kw\ 882}#)
                            (if (#{distinct-bound-ids?\ 325}#
                                  (append
                                    #{req\ 879}#
                                    (map car #{opt\ 880}#)
                                    (if #{rest\ 881}#
                                      (list #{rest\ 881}#)
                                      '())
                                    (if (pair? #{kw\ 882}#)
                                      (map cadr (cdr #{kw\ 882}#))
                                      '())))
                              (values
                                #{req\ 879}#
                                #{opt\ 880}#
                                #{rest\ 881}#
                                #{kw\ 882}#)
                              (syntax-violation
                                'lambda*
                                "duplicate identifier in argument list"
                                #{orig-args\ 867}#))))
                        (#{rest\ 876}#
                          (lambda (#{args\ 890}#
                                   #{req\ 891}#
                                   #{opt\ 892}#
                                   #{kw\ 893}#)
                            ((lambda (#{tmp\ 898}#)
                               ((lambda (#{tmp\ 899}#)
                                  (if (if #{tmp\ 899}#
                                        (apply (lambda (#{r\ 901}#)
                                                 (#{id?\ 260}# #{r\ 901}#))
                                               #{tmp\ 899}#)
                                        #f)
                                    (apply (lambda (#{r\ 903}#)
                                             (#{check\ 878}#
                                               #{req\ 891}#
                                               #{opt\ 892}#
                                               #{r\ 903}#
                                               #{kw\ 893}#))
                                           #{tmp\ 899}#)
                                    ((lambda (#{else\ 905}#)
                                       (syntax-violation
                                         'lambda*
                                         "invalid rest argument"
                                         #{orig-args\ 867}#
                                         #{args\ 890}#))
                                     #{tmp\ 898}#)))
                                (list #{tmp\ 898}#)))
                             #{args\ 890}#)))
                        (#{key\ 874}#
                          (lambda (#{args\ 906}#
                                   #{req\ 907}#
                                   #{opt\ 908}#
                                   #{rkey\ 909}#)
                            ((lambda (#{tmp\ 914}#)
                               ((lambda (#{tmp\ 915}#)
                                  (if #{tmp\ 915}#
                                    (apply (lambda ()
                                             (#{check\ 878}#
                                               #{req\ 907}#
                                               #{opt\ 908}#
                                               #f
                                               (cons #f
                                                     (reverse #{rkey\ 909}#))))
                                           #{tmp\ 915}#)
                                    ((lambda (#{tmp\ 916}#)
                                       (if (if #{tmp\ 916}#
                                             (apply (lambda (#{a\ 919}#
                                                             #{b\ 920}#)
                                                      (#{id?\ 260}#
                                                        #{a\ 919}#))
                                                    #{tmp\ 916}#)
                                             #f)
                                         (apply (lambda (#{a\ 923}# #{b\ 924}#)
                                                  ((lambda (#{tmp\ 926}#)
                                                     ((lambda (#{k\ 928}#)
                                                        (#{key\ 874}#
                                                          #{b\ 924}#
                                                          #{req\ 907}#
                                                          #{opt\ 908}#
                                                          (cons (cons #{k\ 928}#
                                                                      (cons #{a\ 923}#
                                                                            '(#(syntax-object
                                                                                #f
                                                                                ((top)
                                                                                 #(ribcage
                                                                                   #(k)
                                                                                   #((top))
                                                                                   #("i927"))
                                                                                 #(ribcage
                                                                                   #(a
                                                                                     b)
                                                                                   #((top)
                                                                                     (top))
                                                                                   #("i921"
                                                                                     "i922"))
                                                                                 #(ribcage
                                                                                   ()
                                                                                   ()
                                                                                   ())
                                                                                 #(ribcage
                                                                                   #(args
                                                                                     req
                                                                                     opt
                                                                                     rkey)
                                                                                   #((top)
                                                                                     (top)
                                                                                     (top)
                                                                                     (top))
                                                                                   #("i910"
                                                                                     "i911"
                                                                                     "i912"
                                                                                     "i913"))
                                                                                 #(ribcage
                                                                                   (check rest
                                                                                          key
                                                                                          opt
                                                                                          req)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i877"
                                                                                    "i875"
                                                                                    "i873"
                                                                                    "i871"
                                                                                    "i869"))
                                                                                 #(ribcage
                                                                                   #(orig-args)
                                                                                   #((top))
                                                                                   #("i868"))
                                                                                 #(ribcage
                                                                                   (lambda-var-list
                                                                                     gen-var
                                                                                     strip
                                                                                     chi-lambda-case
                                                                                     lambda*-formals
                                                                                     chi-simple-lambda
                                                                                     lambda-formals
                                                                                     ellipsis?
                                                                                     chi-void
                                                                                     eval-local-transformer
                                                                                     chi-local-syntax
                                                                                     chi-body
                                                                                     chi-macro
                                                                                     chi-application
                                                                                     chi-expr
                                                                                     chi
                                                                                     chi-top
                                                                                     syntax-type
                                                                                     chi-when-list
                                                                                     chi-install-global
                                                                                     chi-top-sequence
                                                                                     chi-sequence
                                                                                     source-wrap
                                                                                     wrap
                                                                                     bound-id-member?
                                                                                     distinct-bound-ids?
                                                                                     valid-bound-ids?
                                                                                     bound-id=?
                                                                                     free-id=?
                                                                                     id-var-name
                                                                                     same-marks?
                                                                                     join-marks
                                                                                     join-wraps
                                                                                     smart-append
                                                                                     make-binding-wrap
                                                                                     extend-ribcage!
                                                                                     make-empty-ribcage
                                                                                     new-mark
                                                                                     anti-mark
                                                                                     the-anti-mark
                                                                                     top-marked?
                                                                                     top-wrap
                                                                                     empty-wrap
                                                                                     set-ribcage-labels!
                                                                                     set-ribcage-marks!
                                                                                     set-ribcage-symnames!
                                                                                     ribcage-labels
                                                                                     ribcage-marks
                                                                                     ribcage-symnames
                                                                                     ribcage?
                                                                                     make-ribcage
                                                                                     gen-labels
                                                                                     gen-label
                                                                                     make-rename
                                                                                     rename-marks
                                                                                     rename-new
                                                                                     rename-old
                                                                                     subst-rename?
                                                                                     wrap-subst
                                                                                     wrap-marks
                                                                                     make-wrap
                                                                                     id-sym-name&marks
                                                                                     id-sym-name
                                                                                     id?
                                                                                     nonsymbol-id?
                                                                                     global-extend
                                                                                     lookup
                                                                                     macros-only-env
                                                                                     extend-var-env
                                                                                     extend-env
                                                                                     null-env
                                                                                     binding-value
                                                                                     binding-type
                                                                                     make-binding
                                                                                     arg-check
                                                                                     source-annotation
                                                                                     no-source
                                                                                     set-syntax-object-module!
                                                                                     set-syntax-object-wrap!
                                                                                     set-syntax-object-expression!
                                                                                     syntax-object-module
                                                                                     syntax-object-wrap
                                                                                     syntax-object-expression
                                                                                     syntax-object?
                                                                                     make-syntax-object
                                                                                     build-lexical-var
                                                                                     build-letrec
                                                                                     build-named-let
                                                                                     build-let
                                                                                     build-sequence
                                                                                     build-data
                                                                                     build-primref
                                                                                     build-lambda-case
                                                                                     build-case-lambda
                                                                                     build-simple-lambda
                                                                                     build-global-definition
                                                                                     maybe-name-value!
                                                                                     build-global-assignment
                                                                                     build-global-reference
                                                                                     analyze-variable
                                                                                     build-lexical-assignment
                                                                                     build-lexical-reference
                                                                                     build-conditional
                                                                                     build-application
                                                                                     build-void
                                                                                     decorate-source
                                                                                     get-global-definition-hook
                                                                                     put-global-definition-hook
                                                                                     gensym-hook
                                                                                     local-eval-hook
                                                                                     top-level-eval-hook
                                                                                     fx<
                                                                                     fx=
                                                                                     fx-
                                                                                     fx+
                                                                                     *mode*
                                                                                     noexpand)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i374"
                                                                                    "i372"
                                                                                    "i370"
                                                                                    "i368"
                                                                                    "i366"
                                                                                    "i364"
                                                                                    "i362"
                                                                                    "i360"
                                                                                    "i358"
                                                                                    "i356"
                                                                                    "i354"
                                                                                    "i352"
                                                                                    "i350"
                                                                                    "i348"
                                                                                    "i346"
                                                                                    "i344"
                                                                                    "i342"
                                                                                    "i340"
                                                                                    "i338"
                                                                                    "i336"
                                                                                    "i334"
                                                                                    "i332"
                                                                                    "i330"
                                                                                    "i328"
                                                                                    "i326"
                                                                                    "i324"
                                                                                    "i322"
                                                                                    "i320"
                                                                                    "i318"
                                                                                    "i316"
                                                                                    "i314"
                                                                                    "i312"
                                                                                    "i310"
                                                                                    "i308"
                                                                                    "i306"
                                                                                    "i304"
                                                                                    "i303"
                                                                                    "i302"
                                                                                    "i300"
                                                                                    "i299"
                                                                                    "i298"
                                                                                    "i297"
                                                                                    "i296"
                                                                                    "i294"
                                                                                    "i292"
                                                                                    "i290"
                                                                                    "i288"
                                                                                    "i286"
                                                                                    "i284"
                                                                                    "i282"
                                                                                    "i280"
                                                                                    "i277"
                                                                                    "i275"
                                                                                    "i274"
                                                                                    "i273"
                                                                                    "i272"
                                                                                    "i271"
                                                                                    "i270"
                                                                                    "i268"
                                                                                    "i266"
                                                                                    "i264"
                                                                                    "i262"
                                                                                    "i261"
                                                                                    "i259"
                                                                                    "i257"
                                                                                    "i255"
                                                                                    "i253"
                                                                                    "i251"
                                                                                    "i249"
                                                                                    "i247"
                                                                                    "i246"
                                                                                    "i244"
                                                                                    "i242"
                                                                                    "i241"
                                                                                    "i240"
                                                                                    "i238"
                                                                                    "i237"
                                                                                    "i235"
                                                                                    "i233"
                                                                                    "i231"
                                                                                    "i229"
                                                                                    "i227"
                                                                                    "i225"
                                                                                    "i223"
                                                                                    "i221"
                                                                                    "i219"
                                                                                    "i217"
                                                                                    "i215"
                                                                                    "i213"
                                                                                    "i211"
                                                                                    "i209"
                                                                                    "i207"
                                                                                    "i205"
                                                                                    "i203"
                                                                                    "i201"
                                                                                    "i199"
                                                                                    "i197"
                                                                                    "i195"
                                                                                    "i193"
                                                                                    "i191"
                                                                                    "i189"
                                                                                    "i187"
                                                                                    "i185"
                                                                                    "i183"
                                                                                    "i181"
                                                                                    "i179"
                                                                                    "i177"
                                                                                    "i175"
                                                                                    "i174"
                                                                                    "i172"
                                                                                    "i170"
                                                                                    "i168"
                                                                                    "i166"
                                                                                    "i164"
                                                                                    "i162"
                                                                                    "i160"
                                                                                    "i158"))
                                                                                 #(ribcage
                                                                                   (define-structure
                                                                                     and-map*)
                                                                                   ((top)
                                                                                    (top))
                                                                                   ("i61"
                                                                                    "i59")))
                                                                                (hygiene
                                                                                  guile)))))
                                                                #{rkey\ 909}#)))
                                                      #{tmp\ 926}#))
                                                   (symbol->keyword
                                                     (syntax->datum
                                                       #{a\ 923}#))))
                                                #{tmp\ 916}#)
                                         ((lambda (#{tmp\ 929}#)
                                            (if (if #{tmp\ 929}#
                                                  (apply (lambda (#{a\ 933}#
                                                                  #{init\ 934}#
                                                                  #{b\ 935}#)
                                                           (#{id?\ 260}#
                                                             #{a\ 933}#))
                                                         #{tmp\ 929}#)
                                                  #f)
                                              (apply (lambda (#{a\ 939}#
                                                              #{init\ 940}#
                                                              #{b\ 941}#)
                                                       ((lambda (#{tmp\ 943}#)
                                                          ((lambda (#{k\ 945}#)
                                                             (#{key\ 874}#
                                                               #{b\ 941}#
                                                               #{req\ 907}#
                                                               #{opt\ 908}#
                                                               (cons (list #{k\ 945}#
                                                                           #{a\ 939}#
                                                                           #{init\ 940}#)
                                                                     #{rkey\ 909}#)))
                                                           #{tmp\ 943}#))
                                                        (symbol->keyword
                                                          (syntax->datum
                                                            #{a\ 939}#))))
                                                     #{tmp\ 929}#)
                                              ((lambda (#{tmp\ 946}#)
                                                 (if (if #{tmp\ 946}#
                                                       (apply (lambda (#{a\ 951}#
                                                                       #{init\ 952}#
                                                                       #{k\ 953}#
                                                                       #{b\ 954}#)
                                                                (if (#{id?\ 260}#
                                                                      #{a\ 951}#)
                                                                  (keyword?
                                                                    (syntax->datum
                                                                      #{k\ 953}#))
                                                                  #f))
                                                              #{tmp\ 946}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 961}#
                                                                   #{init\ 962}#
                                                                   #{k\ 963}#
                                                                   #{b\ 964}#)
                                                            (#{key\ 874}#
                                                              #{b\ 964}#
                                                              #{req\ 907}#
                                                              #{opt\ 908}#
                                                              (cons (list #{k\ 963}#
                                                                          #{a\ 961}#
                                                                          #{init\ 962}#)
                                                                    #{rkey\ 909}#)))
                                                          #{tmp\ 946}#)
                                                   ((lambda (#{tmp\ 965}#)
                                                      (if (if #{tmp\ 965}#
                                                            (apply (lambda (#{aok\ 967}#)
                                                                     (eq? (syntax->datum
                                                                            #{aok\ 967}#)
                                                                          #:allow-other-keys))
                                                                   #{tmp\ 965}#)
                                                            #f)
                                                        (apply (lambda (#{aok\ 969}#)
                                                                 (#{check\ 878}#
                                                                   #{req\ 907}#
                                                                   #{opt\ 908}#
                                                                   #f
                                                                   (cons #t
                                                                         (reverse
                                                                           #{rkey\ 909}#))))
                                                               #{tmp\ 965}#)
                                                        ((lambda (#{tmp\ 970}#)
                                                           (if (if #{tmp\ 970}#
                                                                 (apply (lambda (#{aok\ 974}#
                                                                                 #{a\ 975}#
                                                                                 #{b\ 976}#)
                                                                          (if (eq? (syntax->datum
                                                                                     #{aok\ 974}#)
                                                                                   #:allow-other-keys)
                                                                            (eq? (syntax->datum
                                                                                   #{a\ 975}#)
                                                                                 #:rest)
                                                                            #f))
                                                                        #{tmp\ 970}#)
                                                                 #f)
                                                             (apply (lambda (#{aok\ 982}#
                                                                             #{a\ 983}#
                                                                             #{b\ 984}#)
                                                                      (#{rest\ 876}#
                                                                        #{b\ 984}#
                                                                        #{req\ 907}#
                                                                        #{opt\ 908}#
                                                                        (cons #t
                                                                              (reverse
                                                                                #{rkey\ 909}#))))
                                                                    #{tmp\ 970}#)
                                                             ((lambda (#{tmp\ 985}#)
                                                                (if (if #{tmp\ 985}#
                                                                      (apply (lambda (#{aok\ 988}#
                                                                                      #{r\ 989}#)
                                                                               (if (eq? (syntax->datum
                                                                                          #{aok\ 988}#)
                                                                                        #:allow-other-keys)
                                                                                 (#{id?\ 260}#
                                                                                   #{r\ 989}#)
                                                                                 #f))
                                                                             #{tmp\ 985}#)
                                                                      #f)
                                                                  (apply (lambda (#{aok\ 994}#
                                                                                  #{r\ 995}#)
                                                                           (#{rest\ 876}#
                                                                             #{r\ 995}#
                                                                             #{req\ 907}#
                                                                             #{opt\ 908}#
                                                                             (cons #t
                                                                                   (reverse
                                                                                     #{rkey\ 909}#))))
                                                                         #{tmp\ 985}#)
                                                                  ((lambda (#{tmp\ 996}#)
                                                                     (if (if #{tmp\ 996}#
                                                                           (apply (lambda (#{a\ 999}#
                                                                                           #{b\ 1000}#)
                                                                                    (eq? (syntax->datum
                                                                                           #{a\ 999}#)
                                                                                         #:rest))
                                                                                  #{tmp\ 996}#)
                                                                           #f)
                                                                       (apply (lambda (#{a\ 1003}#
                                                                                       #{b\ 1004}#)
                                                                                (#{rest\ 876}#
                                                                                  #{b\ 1004}#
                                                                                  #{req\ 907}#
                                                                                  #{opt\ 908}#
                                                                                  (cons #f
                                                                                        (reverse
                                                                                          #{rkey\ 909}#))))
                                                                              #{tmp\ 996}#)
                                                                       ((lambda (#{tmp\ 1005}#)
                                                                          (if (if #{tmp\ 1005}#
                                                                                (apply (lambda (#{r\ 1007}#)
                                                                                         (#{id?\ 260}#
                                                                                           #{r\ 1007}#))
                                                                                       #{tmp\ 1005}#)
                                                                                #f)
                                                                            (apply (lambda (#{r\ 1009}#)
                                                                                     (#{rest\ 876}#
                                                                                       #{r\ 1009}#
                                                                                       #{req\ 907}#
                                                                                       #{opt\ 908}#
                                                                                       (cons #f
                                                                                             (reverse
                                                                                               #{rkey\ 909}#))))
                                                                                   #{tmp\ 1005}#)
                                                                            ((lambda (#{else\ 1011}#)
                                                                               (syntax-violation
                                                                                 'lambda*
                                                                                 "invalid keyword argument list"
                                                                                 #{orig-args\ 867}#
                                                                                 #{args\ 906}#))
                                                                             #{tmp\ 914}#)))
                                                                        (list #{tmp\ 914}#))))
                                                                   ($sc-dispatch
                                                                     #{tmp\ 914}#
                                                                     '(any any)))))
                                                              ($sc-dispatch
                                                                #{tmp\ 914}#
                                                                '(any .
                                                                      any)))))
                                                         ($sc-dispatch
                                                           #{tmp\ 914}#
                                                           '(any any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 914}#
                                                      '(any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 914}#
                                                 '((any any any) . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 914}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 914}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 914}# (quote ()))))
                             #{args\ 906}#)))
                        (#{opt\ 872}#
                          (lambda (#{args\ 1012}# #{req\ 1013}# #{ropt\ 1014}#)
                            ((lambda (#{tmp\ 1018}#)
                               ((lambda (#{tmp\ 1019}#)
                                  (if #{tmp\ 1019}#
                                    (apply (lambda ()
                                             (#{check\ 878}#
                                               #{req\ 1013}#
                                               (reverse #{ropt\ 1014}#)
                                               #f
                                               '()))
                                           #{tmp\ 1019}#)
                                    ((lambda (#{tmp\ 1020}#)
                                       (if (if #{tmp\ 1020}#
                                             (apply (lambda (#{a\ 1023}#
                                                             #{b\ 1024}#)
                                                      (#{id?\ 260}#
                                                        #{a\ 1023}#))
                                                    #{tmp\ 1020}#)
                                             #f)
                                         (apply (lambda (#{a\ 1027}#
                                                         #{b\ 1028}#)
                                                  (#{opt\ 872}#
                                                    #{b\ 1028}#
                                                    #{req\ 1013}#
                                                    (cons (cons #{a\ 1027}#
                                                                '(#(syntax-object
                                                                    #f
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(a b)
                                                                       #((top)
                                                                         (top))
                                                                       #("i1025"
                                                                         "i1026"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(args
                                                                         req
                                                                         ropt)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1015"
                                                                         "i1016"
                                                                         "i1017"))
                                                                     #(ribcage
                                                                       (check rest
                                                                              key
                                                                              opt
                                                                              req)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i877"
                                                                        "i875"
                                                                        "i873"
                                                                        "i871"
                                                                        "i869"))
                                                                     #(ribcage
                                                                       #(orig-args)
                                                                       #((top))
                                                                       #("i868"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         chi-lambda-case
                                                                         lambda*-formals
                                                                         chi-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         chi-void
                                                                         eval-local-transformer
                                                                         chi-local-syntax
                                                                         chi-body
                                                                         chi-macro
                                                                         chi-application
                                                                         chi-expr
                                                                         chi
                                                                         chi-top
                                                                         syntax-type
                                                                         chi-when-list
                                                                         chi-install-global
                                                                         chi-top-sequence
                                                                         chi-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         maybe-name-value!
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         *mode*
                                                                         noexpand)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i374"
                                                                        "i372"
                                                                        "i370"
                                                                        "i368"
                                                                        "i366"
                                                                        "i364"
                                                                        "i362"
                                                                        "i360"
                                                                        "i358"
                                                                        "i356"
                                                                        "i354"
                                                                        "i352"
                                                                        "i350"
                                                                        "i348"
                                                                        "i346"
                                                                        "i344"
                                                                        "i342"
                                                                        "i340"
                                                                        "i338"
                                                                        "i336"
                                                                        "i334"
                                                                        "i332"
                                                                        "i330"
                                                                        "i328"
                                                                        "i326"
                                                                        "i324"
                                                                        "i322"
                                                                        "i320"
                                                                        "i318"
                                                                        "i316"
                                                                        "i314"
                                                                        "i312"
                                                                        "i310"
                                                                        "i308"
                                                                        "i306"
                                                                        "i304"
                                                                        "i303"
                                                                        "i302"
                                                                        "i300"
                                                                        "i299"
                                                                        "i298"
                                                                        "i297"
                                                                        "i296"
                                                                        "i294"
                                                                        "i292"
                                                                        "i290"
                                                                        "i288"
                                                                        "i286"
                                                                        "i284"
                                                                        "i282"
                                                                        "i280"
                                                                        "i277"
                                                                        "i275"
                                                                        "i274"
                                                                        "i273"
                                                                        "i272"
                                                                        "i271"
                                                                        "i270"
                                                                        "i268"
                                                                        "i266"
                                                                        "i264"
                                                                        "i262"
                                                                        "i261"
                                                                        "i259"
                                                                        "i257"
                                                                        "i255"
                                                                        "i253"
                                                                        "i251"
                                                                        "i249"
                                                                        "i247"
                                                                        "i246"
                                                                        "i244"
                                                                        "i242"
                                                                        "i241"
                                                                        "i240"
                                                                        "i238"
                                                                        "i237"
                                                                        "i235"
                                                                        "i233"
                                                                        "i231"
                                                                        "i229"
                                                                        "i227"
                                                                        "i225"
                                                                        "i223"
                                                                        "i221"
                                                                        "i219"
                                                                        "i217"
                                                                        "i215"
                                                                        "i213"
                                                                        "i211"
                                                                        "i209"
                                                                        "i207"
                                                                        "i205"
                                                                        "i203"
                                                                        "i201"
                                                                        "i199"
                                                                        "i197"
                                                                        "i195"
                                                                        "i193"
                                                                        "i191"
                                                                        "i189"
                                                                        "i187"
                                                                        "i185"
                                                                        "i183"
                                                                        "i181"
                                                                        "i179"
                                                                        "i177"
                                                                        "i175"
                                                                        "i174"
                                                                        "i172"
                                                                        "i170"
                                                                        "i168"
                                                                        "i166"
                                                                        "i164"
                                                                        "i162"
                                                                        "i160"
                                                                        "i158"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         and-map*)
                                                                       ((top)
                                                                        (top))
                                                                       ("i61"
                                                                        "i59")))
                                                                    (hygiene
                                                                      guile))))
                                                          #{ropt\ 1014}#)))
                                                #{tmp\ 1020}#)
                                         ((lambda (#{tmp\ 1029}#)
                                            (if (if #{tmp\ 1029}#
                                                  (apply (lambda (#{a\ 1033}#
                                                                  #{init\ 1034}#
                                                                  #{b\ 1035}#)
                                                           (#{id?\ 260}#
                                                             #{a\ 1033}#))
                                                         #{tmp\ 1029}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1039}#
                                                              #{init\ 1040}#
                                                              #{b\ 1041}#)
                                                       (#{opt\ 872}#
                                                         #{b\ 1041}#
                                                         #{req\ 1013}#
                                                         (cons (list #{a\ 1039}#
                                                                     #{init\ 1040}#)
                                                               #{ropt\ 1014}#)))
                                                     #{tmp\ 1029}#)
                                              ((lambda (#{tmp\ 1042}#)
                                                 (if (if #{tmp\ 1042}#
                                                       (apply (lambda (#{a\ 1045}#
                                                                       #{b\ 1046}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1045}#)
                                                                     #:key))
                                                              #{tmp\ 1042}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1049}#
                                                                   #{b\ 1050}#)
                                                            (#{key\ 874}#
                                                              #{b\ 1050}#
                                                              #{req\ 1013}#
                                                              (reverse
                                                                #{ropt\ 1014}#)
                                                              '()))
                                                          #{tmp\ 1042}#)
                                                   ((lambda (#{tmp\ 1051}#)
                                                      (if (if #{tmp\ 1051}#
                                                            (apply (lambda (#{a\ 1054}#
                                                                            #{b\ 1055}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1054}#)
                                                                          #:rest))
                                                                   #{tmp\ 1051}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1058}#
                                                                        #{b\ 1059}#)
                                                                 (#{rest\ 876}#
                                                                   #{b\ 1059}#
                                                                   #{req\ 1013}#
                                                                   (reverse
                                                                     #{ropt\ 1014}#)
                                                                   '()))
                                                               #{tmp\ 1051}#)
                                                        ((lambda (#{tmp\ 1060}#)
                                                           (if (if #{tmp\ 1060}#
                                                                 (apply (lambda (#{r\ 1062}#)
                                                                          (#{id?\ 260}#
                                                                            #{r\ 1062}#))
                                                                        #{tmp\ 1060}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1064}#)
                                                                      (#{rest\ 876}#
                                                                        #{r\ 1064}#
                                                                        #{req\ 1013}#
                                                                        (reverse
                                                                          #{ropt\ 1014}#)
                                                                        '()))
                                                                    #{tmp\ 1060}#)
                                                             ((lambda (#{else\ 1066}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid optional argument list"
                                                                  #{orig-args\ 867}#
                                                                  #{args\ 1012}#))
                                                              #{tmp\ 1018}#)))
                                                         (list #{tmp\ 1018}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1018}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1018}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1018}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1018}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1018}# (quote ()))))
                             #{args\ 1012}#)))
                        (#{req\ 870}#
                          (lambda (#{args\ 1067}# #{rreq\ 1068}#)
                            ((lambda (#{tmp\ 1071}#)
                               ((lambda (#{tmp\ 1072}#)
                                  (if #{tmp\ 1072}#
                                    (apply (lambda ()
                                             (#{check\ 878}#
                                               (reverse #{rreq\ 1068}#)
                                               '()
                                               #f
                                               '()))
                                           #{tmp\ 1072}#)
                                    ((lambda (#{tmp\ 1073}#)
                                       (if (if #{tmp\ 1073}#
                                             (apply (lambda (#{a\ 1076}#
                                                             #{b\ 1077}#)
                                                      (#{id?\ 260}#
                                                        #{a\ 1076}#))
                                                    #{tmp\ 1073}#)
                                             #f)
                                         (apply (lambda (#{a\ 1080}#
                                                         #{b\ 1081}#)
                                                  (#{req\ 870}#
                                                    #{b\ 1081}#
                                                    (cons #{a\ 1080}#
                                                          #{rreq\ 1068}#)))
                                                #{tmp\ 1073}#)
                                         ((lambda (#{tmp\ 1082}#)
                                            (if (if #{tmp\ 1082}#
                                                  (apply (lambda (#{a\ 1085}#
                                                                  #{b\ 1086}#)
                                                           (eq? (syntax->datum
                                                                  #{a\ 1085}#)
                                                                #:optional))
                                                         #{tmp\ 1082}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1089}#
                                                              #{b\ 1090}#)
                                                       (#{opt\ 872}#
                                                         #{b\ 1090}#
                                                         (reverse
                                                           #{rreq\ 1068}#)
                                                         '()))
                                                     #{tmp\ 1082}#)
                                              ((lambda (#{tmp\ 1091}#)
                                                 (if (if #{tmp\ 1091}#
                                                       (apply (lambda (#{a\ 1094}#
                                                                       #{b\ 1095}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1094}#)
                                                                     #:key))
                                                              #{tmp\ 1091}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1098}#
                                                                   #{b\ 1099}#)
                                                            (#{key\ 874}#
                                                              #{b\ 1099}#
                                                              (reverse
                                                                #{rreq\ 1068}#)
                                                              '()
                                                              '()))
                                                          #{tmp\ 1091}#)
                                                   ((lambda (#{tmp\ 1100}#)
                                                      (if (if #{tmp\ 1100}#
                                                            (apply (lambda (#{a\ 1103}#
                                                                            #{b\ 1104}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1103}#)
                                                                          #:rest))
                                                                   #{tmp\ 1100}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1107}#
                                                                        #{b\ 1108}#)
                                                                 (#{rest\ 876}#
                                                                   #{b\ 1108}#
                                                                   (reverse
                                                                     #{rreq\ 1068}#)
                                                                   '()
                                                                   '()))
                                                               #{tmp\ 1100}#)
                                                        ((lambda (#{tmp\ 1109}#)
                                                           (if (if #{tmp\ 1109}#
                                                                 (apply (lambda (#{r\ 1111}#)
                                                                          (#{id?\ 260}#
                                                                            #{r\ 1111}#))
                                                                        #{tmp\ 1109}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1113}#)
                                                                      (#{rest\ 876}#
                                                                        #{r\ 1113}#
                                                                        (reverse
                                                                          #{rreq\ 1068}#)
                                                                        '()
                                                                        '()))
                                                                    #{tmp\ 1109}#)
                                                             ((lambda (#{else\ 1115}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid argument list"
                                                                  #{orig-args\ 867}#
                                                                  #{args\ 1067}#))
                                                              #{tmp\ 1071}#)))
                                                         (list #{tmp\ 1071}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1071}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1071}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1071}#
                                            '(any . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1071}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1071}# (quote ()))))
                             #{args\ 1067}#))))
                 (#{req\ 870}# #{orig-args\ 867}# (quote ())))))
           (#{chi-simple-lambda\ 365}#
             (lambda (#{e\ 1116}#
                      #{r\ 1117}#
                      #{w\ 1118}#
                      #{s\ 1119}#
                      #{mod\ 1120}#
                      #{req\ 1121}#
                      #{rest\ 1122}#
                      #{docstring\ 1123}#
                      #{body\ 1124}#)
               (let ((#{ids\ 1136}#
                       (if #{rest\ 1122}#
                         (append #{req\ 1121}# (list #{rest\ 1122}#))
                         #{req\ 1121}#)))
                 (let ((#{vars\ 1138}#
                         (map #{gen-var\ 373}# #{ids\ 1136}#)))
                   (let ((#{labels\ 1140}#
                           (#{gen-labels\ 278}# #{ids\ 1136}#)))
                     (#{build-simple-lambda\ 202}#
                       #{s\ 1119}#
                       (map syntax->datum #{req\ 1121}#)
                       (if #{rest\ 1122}#
                         (syntax->datum #{rest\ 1122}#)
                         #f)
                       #{vars\ 1138}#
                       #{docstring\ 1123}#
                       (#{chi-body\ 353}#
                         #{body\ 1124}#
                         (#{source-wrap\ 331}#
                           #{e\ 1116}#
                           #{w\ 1118}#
                           #{s\ 1119}#
                           #{mod\ 1120}#)
                         (#{extend-var-env\ 250}#
                           #{labels\ 1140}#
                           #{vars\ 1138}#
                           #{r\ 1117}#)
                         (#{make-binding-wrap\ 307}#
                           #{ids\ 1136}#
                           #{labels\ 1140}#
                           #{w\ 1118}#)
                         #{mod\ 1120}#)))))))
           (#{lambda-formals\ 363}#
             (lambda (#{orig-args\ 1143}#)
               (letrec ((#{check\ 1148}#
                          (lambda (#{req\ 1149}# #{rest\ 1150}#)
                            (if (#{distinct-bound-ids?\ 325}#
                                  (if #{rest\ 1150}#
                                    (cons #{rest\ 1150}# #{req\ 1149}#)
                                    #{req\ 1149}#))
                              (values #{req\ 1149}# #f #{rest\ 1150}# #f)
                              (syntax-violation
                                'lambda
                                "duplicate identifier in argument list"
                                #{orig-args\ 1143}#))))
                        (#{req\ 1146}#
                          (lambda (#{args\ 1156}# #{rreq\ 1157}#)
                            ((lambda (#{tmp\ 1160}#)
                               ((lambda (#{tmp\ 1161}#)
                                  (if #{tmp\ 1161}#
                                    (apply (lambda ()
                                             (#{check\ 1148}#
                                               (reverse #{rreq\ 1157}#)
                                               #f))
                                           #{tmp\ 1161}#)
                                    ((lambda (#{tmp\ 1162}#)
                                       (if (if #{tmp\ 1162}#
                                             (apply (lambda (#{a\ 1165}#
                                                             #{b\ 1166}#)
                                                      (#{id?\ 260}#
                                                        #{a\ 1165}#))
                                                    #{tmp\ 1162}#)
                                             #f)
                                         (apply (lambda (#{a\ 1169}#
                                                         #{b\ 1170}#)
                                                  (#{req\ 1146}#
                                                    #{b\ 1170}#
                                                    (cons #{a\ 1169}#
                                                          #{rreq\ 1157}#)))
                                                #{tmp\ 1162}#)
                                         ((lambda (#{tmp\ 1171}#)
                                            (if (if #{tmp\ 1171}#
                                                  (apply (lambda (#{r\ 1173}#)
                                                           (#{id?\ 260}#
                                                             #{r\ 1173}#))
                                                         #{tmp\ 1171}#)
                                                  #f)
                                              (apply (lambda (#{r\ 1175}#)
                                                       (#{check\ 1148}#
                                                         (reverse
                                                           #{rreq\ 1157}#)
                                                         #{r\ 1175}#))
                                                     #{tmp\ 1171}#)
                                              ((lambda (#{else\ 1177}#)
                                                 (syntax-violation
                                                   'lambda
                                                   "invalid argument list"
                                                   #{orig-args\ 1143}#
                                                   #{args\ 1156}#))
                                               #{tmp\ 1160}#)))
                                          (list #{tmp\ 1160}#))))
                                     ($sc-dispatch
                                       #{tmp\ 1160}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1160}# (quote ()))))
                             #{args\ 1156}#))))
                 (#{req\ 1146}# #{orig-args\ 1143}# (quote ())))))
           (#{ellipsis?\ 361}#
             (lambda (#{x\ 1178}#)
               (if (#{nonsymbol-id?\ 258}# #{x\ 1178}#)
                 (#{free-id=?\ 319}#
                   #{x\ 1178}#
                   '#(syntax-object
                      ...
                      ((top)
                       #(ribcage () () ())
                       #(ribcage () () ())
                       #(ribcage #(x) #((top)) #("i1179"))
                       #(ribcage
                         (lambda-var-list
                           gen-var
                           strip
                           chi-lambda-case
                           lambda*-formals
                           chi-simple-lambda
                           lambda-formals
                           ellipsis?
                           chi-void
                           eval-local-transformer
                           chi-local-syntax
                           chi-body
                           chi-macro
                           chi-application
                           chi-expr
                           chi
                           chi-top
                           syntax-type
                           chi-when-list
                           chi-install-global
                           chi-top-sequence
                           chi-sequence
                           source-wrap
                           wrap
                           bound-id-member?
                           distinct-bound-ids?
                           valid-bound-ids?
                           bound-id=?
                           free-id=?
                           id-var-name
                           same-marks?
                           join-marks
                           join-wraps
                           smart-append
                           make-binding-wrap
                           extend-ribcage!
                           make-empty-ribcage
                           new-mark
                           anti-mark
                           the-anti-mark
                           top-marked?
                           top-wrap
                           empty-wrap
                           set-ribcage-labels!
                           set-ribcage-marks!
                           set-ribcage-symnames!
                           ribcage-labels
                           ribcage-marks
                           ribcage-symnames
                           ribcage?
                           make-ribcage
                           gen-labels
                           gen-label
                           make-rename
                           rename-marks
                           rename-new
                           rename-old
                           subst-rename?
                           wrap-subst
                           wrap-marks
                           make-wrap
                           id-sym-name&marks
                           id-sym-name
                           id?
                           nonsymbol-id?
                           global-extend
                           lookup
                           macros-only-env
                           extend-var-env
                           extend-env
                           null-env
                           binding-value
                           binding-type
                           make-binding
                           arg-check
                           source-annotation
                           no-source
                           set-syntax-object-module!
                           set-syntax-object-wrap!
                           set-syntax-object-expression!
                           syntax-object-module
                           syntax-object-wrap
                           syntax-object-expression
                           syntax-object?
                           make-syntax-object
                           build-lexical-var
                           build-letrec
                           build-named-let
                           build-let
                           build-sequence
                           build-data
                           build-primref
                           build-lambda-case
                           build-case-lambda
                           build-simple-lambda
                           build-global-definition
                           maybe-name-value!
                           build-global-assignment
                           build-global-reference
                           analyze-variable
                           build-lexical-assignment
                           build-lexical-reference
                           build-conditional
                           build-application
                           build-void
                           decorate-source
                           get-global-definition-hook
                           put-global-definition-hook
                           gensym-hook
                           local-eval-hook
                           top-level-eval-hook
                           fx<
                           fx=
                           fx-
                           fx+
                           *mode*
                           noexpand)
                         ((top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top))
                         ("i374"
                          "i372"
                          "i370"
                          "i368"
                          "i366"
                          "i364"
                          "i362"
                          "i360"
                          "i358"
                          "i356"
                          "i354"
                          "i352"
                          "i350"
                          "i348"
                          "i346"
                          "i344"
                          "i342"
                          "i340"
                          "i338"
                          "i336"
                          "i334"
                          "i332"
                          "i330"
                          "i328"
                          "i326"
                          "i324"
                          "i322"
                          "i320"
                          "i318"
                          "i316"
                          "i314"
                          "i312"
                          "i310"
                          "i308"
                          "i306"
                          "i304"
                          "i303"
                          "i302"
                          "i300"
                          "i299"
                          "i298"
                          "i297"
                          "i296"
                          "i294"
                          "i292"
                          "i290"
                          "i288"
                          "i286"
                          "i284"
                          "i282"
                          "i280"
                          "i277"
                          "i275"
                          "i274"
                          "i273"
                          "i272"
                          "i271"
                          "i270"
                          "i268"
                          "i266"
                          "i264"
                          "i262"
                          "i261"
                          "i259"
                          "i257"
                          "i255"
                          "i253"
                          "i251"
                          "i249"
                          "i247"
                          "i246"
                          "i244"
                          "i242"
                          "i241"
                          "i240"
                          "i238"
                          "i237"
                          "i235"
                          "i233"
                          "i231"
                          "i229"
                          "i227"
                          "i225"
                          "i223"
                          "i221"
                          "i219"
                          "i217"
                          "i215"
                          "i213"
                          "i211"
                          "i209"
                          "i207"
                          "i205"
                          "i203"
                          "i201"
                          "i199"
                          "i197"
                          "i195"
                          "i193"
                          "i191"
                          "i189"
                          "i187"
                          "i185"
                          "i183"
                          "i181"
                          "i179"
                          "i177"
                          "i175"
                          "i174"
                          "i172"
                          "i170"
                          "i168"
                          "i166"
                          "i164"
                          "i162"
                          "i160"
                          "i158"))
                       #(ribcage
                         (define-structure and-map*)
                         ((top) (top))
                         ("i61" "i59")))
                      (hygiene guile)))
                 #f)))
           (#{chi-void\ 359}#
             (lambda () (#{build-void\ 182}# #f)))
           (#{eval-local-transformer\ 357}#
             (lambda (#{expanded\ 1183}# #{mod\ 1184}#)
               (let ((#{p\ 1188}#
                       (#{local-eval-hook\ 173}#
                         #{expanded\ 1183}#
                         #{mod\ 1184}#)))
                 (if (procedure? #{p\ 1188}#)
                   (cons #{p\ 1188}# (module-name (current-module)))
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 1188}#)))))
           (#{chi-local-syntax\ 355}#
             (lambda (#{rec?\ 1189}#
                      #{e\ 1190}#
                      #{r\ 1191}#
                      #{w\ 1192}#
                      #{s\ 1193}#
                      #{mod\ 1194}#
                      #{k\ 1195}#)
               ((lambda (#{tmp\ 1203}#)
                  ((lambda (#{tmp\ 1204}#)
                     (if #{tmp\ 1204}#
                       (apply (lambda (#{_\ 1210}#
                                       #{id\ 1211}#
                                       #{val\ 1212}#
                                       #{e1\ 1213}#
                                       #{e2\ 1214}#)
                                (let ((#{ids\ 1216}# #{id\ 1211}#))
                                  (if (not (#{valid-bound-ids?\ 323}#
                                             #{ids\ 1216}#))
                                    (syntax-violation
                                      #f
                                      "duplicate bound keyword"
                                      #{e\ 1190}#)
                                    (let ((#{labels\ 1219}#
                                            (#{gen-labels\ 278}#
                                              #{ids\ 1216}#)))
                                      (let ((#{new-w\ 1221}#
                                              (#{make-binding-wrap\ 307}#
                                                #{ids\ 1216}#
                                                #{labels\ 1219}#
                                                #{w\ 1192}#)))
                                        (#{k\ 1195}#
                                          (cons #{e1\ 1213}# #{e2\ 1214}#)
                                          (#{extend-env\ 248}#
                                            #{labels\ 1219}#
                                            (let ((#{w\ 1225}#
                                                    (if #{rec?\ 1189}#
                                                      #{new-w\ 1221}#
                                                      #{w\ 1192}#))
                                                  (#{trans-r\ 1226}#
                                                    (#{macros-only-env\ 252}#
                                                      #{r\ 1191}#)))
                                              (map (lambda (#{x\ 1227}#)
                                                     (cons 'macro
                                                           (#{eval-local-transformer\ 357}#
                                                             (#{chi\ 345}#
                                                               #{x\ 1227}#
                                                               #{trans-r\ 1226}#
                                                               #{w\ 1225}#
                                                               #{mod\ 1194}#)
                                                             #{mod\ 1194}#)))
                                                   #{val\ 1212}#))
                                            #{r\ 1191}#)
                                          #{new-w\ 1221}#
                                          #{s\ 1193}#
                                          #{mod\ 1194}#))))))
                              #{tmp\ 1204}#)
                       ((lambda (#{_\ 1232}#)
                          (syntax-violation
                            #f
                            "bad local syntax definition"
                            (#{source-wrap\ 331}#
                              #{e\ 1190}#
                              #{w\ 1192}#
                              #{s\ 1193}#
                              #{mod\ 1194}#)))
                        #{tmp\ 1203}#)))
                   ($sc-dispatch
                     #{tmp\ 1203}#
                     '(any #(each (any any)) any . each-any))))
                #{e\ 1190}#)))
           (#{chi-body\ 353}#
             (lambda (#{body\ 1233}#
                      #{outer-form\ 1234}#
                      #{r\ 1235}#
                      #{w\ 1236}#
                      #{mod\ 1237}#)
               (let ((#{r\ 1245}#
                       (cons '("placeholder" placeholder)
                             #{r\ 1235}#)))
                 (let ((#{ribcage\ 1247}#
                         (#{make-ribcage\ 281}#
                           '()
                           '()
                           '())))
                   (let ((#{w\ 1250}#
                           (#{make-wrap\ 265}#
                             (#{wrap-marks\ 267}# #{w\ 1236}#)
                             (cons #{ribcage\ 1247}#
                                   (#{wrap-subst\ 269}# #{w\ 1236}#)))))
                     (letrec ((#{parse\ 1259}#
                                (lambda (#{body\ 1260}#
                                         #{ids\ 1261}#
                                         #{labels\ 1262}#
                                         #{var-ids\ 1263}#
                                         #{vars\ 1264}#
                                         #{vals\ 1265}#
                                         #{bindings\ 1266}#)
                                  (if (null? #{body\ 1260}#)
                                    (syntax-violation
                                      #f
                                      "no expressions in body"
                                      #{outer-form\ 1234}#)
                                    (let ((#{e\ 1271}# (cdar #{body\ 1260}#))
                                          (#{er\ 1272}# (caar #{body\ 1260}#)))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 341}#
                                            #{e\ 1271}#
                                            #{er\ 1272}#
                                            '(())
                                            (#{source-annotation\ 239}#
                                              #{er\ 1272}#)
                                            #{ribcage\ 1247}#
                                            #{mod\ 1237}#
                                            #f))
                                        (lambda (#{type\ 1274}#
                                                 #{value\ 1275}#
                                                 #{e\ 1276}#
                                                 #{w\ 1277}#
                                                 #{s\ 1278}#
                                                 #{mod\ 1279}#)
                                          (if (memv #{type\ 1274}#
                                                    '(define-form))
                                            (let ((#{id\ 1289}#
                                                    (#{wrap\ 329}#
                                                      #{value\ 1275}#
                                                      #{w\ 1277}#
                                                      #{mod\ 1279}#))
                                                  (#{label\ 1290}#
                                                    (#{gen-label\ 276}#)))
                                              (let ((#{var\ 1292}#
                                                      (#{gen-var\ 373}#
                                                        #{id\ 1289}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 305}#
                                                    #{ribcage\ 1247}#
                                                    #{id\ 1289}#
                                                    #{label\ 1290}#)
                                                  (#{parse\ 1259}#
                                                    (cdr #{body\ 1260}#)
                                                    (cons #{id\ 1289}#
                                                          #{ids\ 1261}#)
                                                    (cons #{label\ 1290}#
                                                          #{labels\ 1262}#)
                                                    (cons #{id\ 1289}#
                                                          #{var-ids\ 1263}#)
                                                    (cons #{var\ 1292}#
                                                          #{vars\ 1264}#)
                                                    (cons (cons #{er\ 1272}#
                                                                (#{wrap\ 329}#
                                                                  #{e\ 1276}#
                                                                  #{w\ 1277}#
                                                                  #{mod\ 1279}#))
                                                          #{vals\ 1265}#)
                                                    (cons (cons 'lexical
                                                                #{var\ 1292}#)
                                                          #{bindings\ 1266}#)))))
                                            (if (memv #{type\ 1274}#
                                                      '(define-syntax-form))
                                              (let ((#{id\ 1297}#
                                                      (#{wrap\ 329}#
                                                        #{value\ 1275}#
                                                        #{w\ 1277}#
                                                        #{mod\ 1279}#))
                                                    (#{label\ 1298}#
                                                      (#{gen-label\ 276}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 305}#
                                                    #{ribcage\ 1247}#
                                                    #{id\ 1297}#
                                                    #{label\ 1298}#)
                                                  (#{parse\ 1259}#
                                                    (cdr #{body\ 1260}#)
                                                    (cons #{id\ 1297}#
                                                          #{ids\ 1261}#)
                                                    (cons #{label\ 1298}#
                                                          #{labels\ 1262}#)
                                                    #{var-ids\ 1263}#
                                                    #{vars\ 1264}#
                                                    #{vals\ 1265}#
                                                    (cons (cons 'macro
                                                                (cons #{er\ 1272}#
                                                                      (#{wrap\ 329}#
                                                                        #{e\ 1276}#
                                                                        #{w\ 1277}#
                                                                        #{mod\ 1279}#)))
                                                          #{bindings\ 1266}#))))
                                              (if (memv #{type\ 1274}#
                                                        '(begin-form))
                                                ((lambda (#{tmp\ 1301}#)
                                                   ((lambda (#{tmp\ 1302}#)
                                                      (if #{tmp\ 1302}#
                                                        (apply (lambda (#{_\ 1305}#
                                                                        #{e1\ 1306}#)
                                                                 (#{parse\ 1259}#
                                                                   (letrec ((#{f\ 1309}#
                                                                              (lambda (#{forms\ 1310}#)
                                                                                (if (null? #{forms\ 1310}#)
                                                                                  (cdr #{body\ 1260}#)
                                                                                  (cons (cons #{er\ 1272}#
                                                                                              (#{wrap\ 329}#
                                                                                                (car #{forms\ 1310}#)
                                                                                                #{w\ 1277}#
                                                                                                #{mod\ 1279}#))
                                                                                        (#{f\ 1309}#
                                                                                          (cdr #{forms\ 1310}#)))))))
                                                                     (#{f\ 1309}#
                                                                       #{e1\ 1306}#))
                                                                   #{ids\ 1261}#
                                                                   #{labels\ 1262}#
                                                                   #{var-ids\ 1263}#
                                                                   #{vars\ 1264}#
                                                                   #{vals\ 1265}#
                                                                   #{bindings\ 1266}#))
                                                               #{tmp\ 1302}#)
                                                        (syntax-violation
                                                          #f
                                                          "source expression failed to match any pattern"
                                                          #{tmp\ 1301}#)))
                                                    ($sc-dispatch
                                                      #{tmp\ 1301}#
                                                      '(any . each-any))))
                                                 #{e\ 1276}#)
                                                (if (memv #{type\ 1274}#
                                                          '(local-syntax-form))
                                                  (#{chi-local-syntax\ 355}#
                                                    #{value\ 1275}#
                                                    #{e\ 1276}#
                                                    #{er\ 1272}#
                                                    #{w\ 1277}#
                                                    #{s\ 1278}#
                                                    #{mod\ 1279}#
                                                    (lambda (#{forms\ 1313}#
                                                             #{er\ 1314}#
                                                             #{w\ 1315}#
                                                             #{s\ 1316}#
                                                             #{mod\ 1317}#)
                                                      (#{parse\ 1259}#
                                                        (letrec ((#{f\ 1325}#
                                                                   (lambda (#{forms\ 1326}#)
                                                                     (if (null? #{forms\ 1326}#)
                                                                       (cdr #{body\ 1260}#)
                                                                       (cons (cons #{er\ 1314}#
                                                                                   (#{wrap\ 329}#
                                                                                     (car #{forms\ 1326}#)
                                                                                     #{w\ 1315}#
                                                                                     #{mod\ 1317}#))
                                                                             (#{f\ 1325}#
                                                                               (cdr #{forms\ 1326}#)))))))
                                                          (#{f\ 1325}#
                                                            #{forms\ 1313}#))
                                                        #{ids\ 1261}#
                                                        #{labels\ 1262}#
                                                        #{var-ids\ 1263}#
                                                        #{vars\ 1264}#
                                                        #{vals\ 1265}#
                                                        #{bindings\ 1266}#)))
                                                  (if (null? #{ids\ 1261}#)
                                                    (#{build-sequence\ 212}#
                                                      #f
                                                      (map (lambda (#{x\ 1329}#)
                                                             (#{chi\ 345}#
                                                               (cdr #{x\ 1329}#)
                                                               (car #{x\ 1329}#)
                                                               '(())
                                                               #{mod\ 1279}#))
                                                           (cons (cons #{er\ 1272}#
                                                                       (#{source-wrap\ 331}#
                                                                         #{e\ 1276}#
                                                                         #{w\ 1277}#
                                                                         #{s\ 1278}#
                                                                         #{mod\ 1279}#))
                                                                 (cdr #{body\ 1260}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 323}#
                                                                 #{ids\ 1261}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 1234}#))
                                                      (letrec ((#{loop\ 1336}#
                                                                 (lambda (#{bs\ 1337}#
                                                                          #{er-cache\ 1338}#
                                                                          #{r-cache\ 1339}#)
                                                                   (if (not (null? #{bs\ 1337}#))
                                                                     (let ((#{b\ 1342}#
                                                                             (car #{bs\ 1337}#)))
                                                                       (if (eq? (car #{b\ 1342}#)
                                                                                'macro)
                                                                         (let ((#{er\ 1345}#
                                                                                 (cadr #{b\ 1342}#)))
                                                                           (let ((#{r-cache\ 1347}#
                                                                                   (if (eq? #{er\ 1345}#
                                                                                            #{er-cache\ 1338}#)
                                                                                     #{r-cache\ 1339}#
                                                                                     (#{macros-only-env\ 252}#
                                                                                       #{er\ 1345}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 1342}#
                                                                                 (#{eval-local-transformer\ 357}#
                                                                                   (#{chi\ 345}#
                                                                                     (cddr #{b\ 1342}#)
                                                                                     #{r-cache\ 1347}#
                                                                                     '(())
                                                                                     #{mod\ 1279}#)
                                                                                   #{mod\ 1279}#))
                                                                               (#{loop\ 1336}#
                                                                                 (cdr #{bs\ 1337}#)
                                                                                 #{er\ 1345}#
                                                                                 #{r-cache\ 1347}#))))
                                                                         (#{loop\ 1336}#
                                                                           (cdr #{bs\ 1337}#)
                                                                           #{er-cache\ 1338}#
                                                                           #{r-cache\ 1339}#)))))))
                                                        (#{loop\ 1336}#
                                                          #{bindings\ 1266}#
                                                          #f
                                                          #f))
                                                      (set-cdr!
                                                        #{r\ 1245}#
                                                        (#{extend-env\ 248}#
                                                          #{labels\ 1262}#
                                                          #{bindings\ 1266}#
                                                          (cdr #{r\ 1245}#)))
                                                      (#{build-letrec\ 218}#
                                                        #f
                                                        (map syntax->datum
                                                             #{var-ids\ 1263}#)
                                                        #{vars\ 1264}#
                                                        (map (lambda (#{x\ 1350}#)
                                                               (#{chi\ 345}#
                                                                 (cdr #{x\ 1350}#)
                                                                 (car #{x\ 1350}#)
                                                                 '(())
                                                                 #{mod\ 1279}#))
                                                             #{vals\ 1265}#)
                                                        (#{build-sequence\ 212}#
                                                          #f
                                                          (map (lambda (#{x\ 1354}#)
                                                                 (#{chi\ 345}#
                                                                   (cdr #{x\ 1354}#)
                                                                   (car #{x\ 1354}#)
                                                                   '(())
                                                                   #{mod\ 1279}#))
                                                               (cons (cons #{er\ 1272}#
                                                                           (#{source-wrap\ 331}#
                                                                             #{e\ 1276}#
                                                                             #{w\ 1277}#
                                                                             #{s\ 1278}#
                                                                             #{mod\ 1279}#))
                                                                     (cdr #{body\ 1260}#))))))))))))))))))
                       (#{parse\ 1259}#
                         (map (lambda (#{x\ 1267}#)
                                (cons #{r\ 1245}#
                                      (#{wrap\ 329}#
                                        #{x\ 1267}#
                                        #{w\ 1250}#
                                        #{mod\ 1237}#)))
                              #{body\ 1233}#)
                         '()
                         '()
                         '()
                         '()
                         '()
                         '())))))))
           (#{chi-macro\ 351}#
             (lambda (#{p\ 1357}#
                      #{e\ 1358}#
                      #{r\ 1359}#
                      #{w\ 1360}#
                      #{rib\ 1361}#
                      #{mod\ 1362}#)
               (letrec ((#{rebuild-macro-output\ 1370}#
                          (lambda (#{x\ 1371}# #{m\ 1372}#)
                            (if (pair? #{x\ 1371}#)
                              (cons (#{rebuild-macro-output\ 1370}#
                                      (car #{x\ 1371}#)
                                      #{m\ 1372}#)
                                    (#{rebuild-macro-output\ 1370}#
                                      (cdr #{x\ 1371}#)
                                      #{m\ 1372}#))
                              (if (#{syntax-object?\ 224}# #{x\ 1371}#)
                                (let ((#{w\ 1380}#
                                        (#{syntax-object-wrap\ 228}#
                                          #{x\ 1371}#)))
                                  (let ((#{ms\ 1383}#
                                          (#{wrap-marks\ 267}# #{w\ 1380}#))
                                        (#{s\ 1384}#
                                          (#{wrap-subst\ 269}# #{w\ 1380}#)))
                                    (if (if (pair? #{ms\ 1383}#)
                                          (eq? (car #{ms\ 1383}#) #f)
                                          #f)
                                      (#{make-syntax-object\ 222}#
                                        (#{syntax-object-expression\ 226}#
                                          #{x\ 1371}#)
                                        (#{make-wrap\ 265}#
                                          (cdr #{ms\ 1383}#)
                                          (if #{rib\ 1361}#
                                            (cons #{rib\ 1361}#
                                                  (cdr #{s\ 1384}#))
                                            (cdr #{s\ 1384}#)))
                                        (#{syntax-object-module\ 230}#
                                          #{x\ 1371}#))
                                      (#{make-syntax-object\ 222}#
                                        (#{syntax-object-expression\ 226}#
                                          #{x\ 1371}#)
                                        (#{make-wrap\ 265}#
                                          (cons #{m\ 1372}# #{ms\ 1383}#)
                                          (if #{rib\ 1361}#
                                            (cons #{rib\ 1361}#
                                                  (cons 'shift
                                                        #{s\ 1384}#))
                                            (cons (quote shift) #{s\ 1384}#)))
                                        (cons 'hygiene
                                              (cdr #{p\ 1357}#))))))
                                (if (vector? #{x\ 1371}#)
                                  (let ((#{n\ 1392}#
                                          (vector-length #{x\ 1371}#)))
                                    (let ((#{v\ 1394}#
                                            (make-vector #{n\ 1392}#)))
                                      (letrec ((#{loop\ 1397}#
                                                 (lambda (#{i\ 1398}#)
                                                   (if (#{fx=\ 167}#
                                                         #{i\ 1398}#
                                                         #{n\ 1392}#)
                                                     (begin
                                                       (if #f #f)
                                                       #{v\ 1394}#)
                                                     (begin
                                                       (vector-set!
                                                         #{v\ 1394}#
                                                         #{i\ 1398}#
                                                         (#{rebuild-macro-output\ 1370}#
                                                           (vector-ref
                                                             #{x\ 1371}#
                                                             #{i\ 1398}#)
                                                           #{m\ 1372}#))
                                                       (#{loop\ 1397}#
                                                         (#{fx+\ 163}#
                                                           #{i\ 1398}#
                                                           1)))))))
                                        (#{loop\ 1397}# 0))))
                                  (if (symbol? #{x\ 1371}#)
                                    (syntax-violation
                                      #f
                                      "encountered raw symbol in macro output"
                                      (#{source-wrap\ 331}#
                                        #{e\ 1358}#
                                        #{w\ 1360}#
                                        (#{wrap-subst\ 269}# #{w\ 1360}#)
                                        #{mod\ 1362}#)
                                      #{x\ 1371}#)
                                    #{x\ 1371}#)))))))
                 (#{rebuild-macro-output\ 1370}#
                   ((car #{p\ 1357}#)
                    (#{wrap\ 329}#
                      #{e\ 1358}#
                      (#{anti-mark\ 301}# #{w\ 1360}#)
                      #{mod\ 1362}#))
                   (gensym "m")))))
           (#{chi-application\ 349}#
             (lambda (#{x\ 1405}#
                      #{e\ 1406}#
                      #{r\ 1407}#
                      #{w\ 1408}#
                      #{s\ 1409}#
                      #{mod\ 1410}#)
               ((lambda (#{tmp\ 1417}#)
                  ((lambda (#{tmp\ 1418}#)
                     (if #{tmp\ 1418}#
                       (apply (lambda (#{e0\ 1421}# #{e1\ 1422}#)
                                (#{build-application\ 184}#
                                  #{s\ 1409}#
                                  #{x\ 1405}#
                                  (map (lambda (#{e\ 1423}#)
                                         (#{chi\ 345}#
                                           #{e\ 1423}#
                                           #{r\ 1407}#
                                           #{w\ 1408}#
                                           #{mod\ 1410}#))
                                       #{e1\ 1422}#)))
                              #{tmp\ 1418}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 1417}#)))
                   ($sc-dispatch
                     #{tmp\ 1417}#
                     '(any . each-any))))
                #{e\ 1406}#)))
           (#{chi-expr\ 347}#
             (lambda (#{type\ 1426}#
                      #{value\ 1427}#
                      #{e\ 1428}#
                      #{r\ 1429}#
                      #{w\ 1430}#
                      #{s\ 1431}#
                      #{mod\ 1432}#)
               (if (memv #{type\ 1426}# (quote (lexical)))
                 (#{build-lexical-reference\ 188}#
                   'value
                   #{s\ 1431}#
                   #{e\ 1428}#
                   #{value\ 1427}#)
                 (if (memv #{type\ 1426}# (quote (core core-form)))
                   (#{value\ 1427}#
                     #{e\ 1428}#
                     #{r\ 1429}#
                     #{w\ 1430}#
                     #{s\ 1431}#
                     #{mod\ 1432}#)
                   (if (memv #{type\ 1426}# (quote (module-ref)))
                     (call-with-values
                       (lambda () (#{value\ 1427}# #{e\ 1428}#))
                       (lambda (#{id\ 1443}# #{mod\ 1444}#)
                         (#{build-global-reference\ 194}#
                           #{s\ 1431}#
                           #{id\ 1443}#
                           #{mod\ 1444}#)))
                     (if (memv #{type\ 1426}# (quote (lexical-call)))
                       (#{chi-application\ 349}#
                         (#{build-lexical-reference\ 188}#
                           'fun
                           (#{source-annotation\ 239}# (car #{e\ 1428}#))
                           (car #{e\ 1428}#)
                           #{value\ 1427}#)
                         #{e\ 1428}#
                         #{r\ 1429}#
                         #{w\ 1430}#
                         #{s\ 1431}#
                         #{mod\ 1432}#)
                       (if (memv #{type\ 1426}# (quote (global-call)))
                         (#{chi-application\ 349}#
                           (#{build-global-reference\ 194}#
                             (#{source-annotation\ 239}# (car #{e\ 1428}#))
                             (if (#{syntax-object?\ 224}# #{value\ 1427}#)
                               (#{syntax-object-expression\ 226}#
                                 #{value\ 1427}#)
                               #{value\ 1427}#)
                             (if (#{syntax-object?\ 224}# #{value\ 1427}#)
                               (#{syntax-object-module\ 230}# #{value\ 1427}#)
                               #{mod\ 1432}#))
                           #{e\ 1428}#
                           #{r\ 1429}#
                           #{w\ 1430}#
                           #{s\ 1431}#
                           #{mod\ 1432}#)
                         (if (memv #{type\ 1426}# (quote (constant)))
                           (#{build-data\ 210}#
                             #{s\ 1431}#
                             (#{strip\ 371}#
                               (#{source-wrap\ 331}#
                                 #{e\ 1428}#
                                 #{w\ 1430}#
                                 #{s\ 1431}#
                                 #{mod\ 1432}#)
                               '(())))
                           (if (memv #{type\ 1426}# (quote (global)))
                             (#{build-global-reference\ 194}#
                               #{s\ 1431}#
                               #{value\ 1427}#
                               #{mod\ 1432}#)
                             (if (memv #{type\ 1426}# (quote (call)))
                               (#{chi-application\ 349}#
                                 (#{chi\ 345}#
                                   (car #{e\ 1428}#)
                                   #{r\ 1429}#
                                   #{w\ 1430}#
                                   #{mod\ 1432}#)
                                 #{e\ 1428}#
                                 #{r\ 1429}#
                                 #{w\ 1430}#
                                 #{s\ 1431}#
                                 #{mod\ 1432}#)
                               (if (memv #{type\ 1426}# (quote (begin-form)))
                                 ((lambda (#{tmp\ 1454}#)
                                    ((lambda (#{tmp\ 1455}#)
                                       (if #{tmp\ 1455}#
                                         (apply (lambda (#{_\ 1459}#
                                                         #{e1\ 1460}#
                                                         #{e2\ 1461}#)
                                                  (#{chi-sequence\ 333}#
                                                    (cons #{e1\ 1460}#
                                                          #{e2\ 1461}#)
                                                    #{r\ 1429}#
                                                    #{w\ 1430}#
                                                    #{s\ 1431}#
                                                    #{mod\ 1432}#))
                                                #{tmp\ 1455}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 1454}#)))
                                     ($sc-dispatch
                                       #{tmp\ 1454}#
                                       '(any any . each-any))))
                                  #{e\ 1428}#)
                                 (if (memv #{type\ 1426}#
                                           '(local-syntax-form))
                                   (#{chi-local-syntax\ 355}#
                                     #{value\ 1427}#
                                     #{e\ 1428}#
                                     #{r\ 1429}#
                                     #{w\ 1430}#
                                     #{s\ 1431}#
                                     #{mod\ 1432}#
                                     #{chi-sequence\ 333}#)
                                   (if (memv #{type\ 1426}#
                                             '(eval-when-form))
                                     ((lambda (#{tmp\ 1465}#)
                                        ((lambda (#{tmp\ 1466}#)
                                           (if #{tmp\ 1466}#
                                             (apply (lambda (#{_\ 1471}#
                                                             #{x\ 1472}#
                                                             #{e1\ 1473}#
                                                             #{e2\ 1474}#)
                                                      (let ((#{when-list\ 1476}#
                                                              (#{chi-when-list\ 339}#
                                                                #{e\ 1428}#
                                                                #{x\ 1472}#
                                                                #{w\ 1430}#)))
                                                        (if (memq 'eval
                                                                  #{when-list\ 1476}#)
                                                          (#{chi-sequence\ 333}#
                                                            (cons #{e1\ 1473}#
                                                                  #{e2\ 1474}#)
                                                            #{r\ 1429}#
                                                            #{w\ 1430}#
                                                            #{s\ 1431}#
                                                            #{mod\ 1432}#)
                                                          (#{chi-void\ 359}#))))
                                                    #{tmp\ 1466}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{tmp\ 1465}#)))
                                         ($sc-dispatch
                                           #{tmp\ 1465}#
                                           '(any each-any any . each-any))))
                                      #{e\ 1428}#)
                                     (if (memv #{type\ 1426}#
                                               '(define-form
                                                  define-syntax-form))
                                       (syntax-violation
                                         #f
                                         "definition in expression context"
                                         #{e\ 1428}#
                                         (#{wrap\ 329}#
                                           #{value\ 1427}#
                                           #{w\ 1430}#
                                           #{mod\ 1432}#))
                                       (if (memv #{type\ 1426}#
                                                 '(syntax))
                                         (syntax-violation
                                           #f
                                           "reference to pattern variable outside syntax form"
                                           (#{source-wrap\ 331}#
                                             #{e\ 1428}#
                                             #{w\ 1430}#
                                             #{s\ 1431}#
                                             #{mod\ 1432}#))
                                         (if (memv #{type\ 1426}#
                                                   '(displaced-lexical))
                                           (syntax-violation
                                             #f
                                             "reference to identifier outside its scope"
                                             (#{source-wrap\ 331}#
                                               #{e\ 1428}#
                                               #{w\ 1430}#
                                               #{s\ 1431}#
                                               #{mod\ 1432}#))
                                           (syntax-violation
                                             #f
                                             "unexpected syntax"
                                             (#{source-wrap\ 331}#
                                               #{e\ 1428}#
                                               #{w\ 1430}#
                                               #{s\ 1431}#
                                               #{mod\ 1432}#))))))))))))))))))
           (#{chi\ 345}#
             (lambda (#{e\ 1483}#
                      #{r\ 1484}#
                      #{w\ 1485}#
                      #{mod\ 1486}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 341}#
                     #{e\ 1483}#
                     #{r\ 1484}#
                     #{w\ 1485}#
                     (#{source-annotation\ 239}# #{e\ 1483}#)
                     #f
                     #{mod\ 1486}#
                     #f))
                 (lambda (#{type\ 1491}#
                          #{value\ 1492}#
                          #{e\ 1493}#
                          #{w\ 1494}#
                          #{s\ 1495}#
                          #{mod\ 1496}#)
                   (#{chi-expr\ 347}#
                     #{type\ 1491}#
                     #{value\ 1492}#
                     #{e\ 1493}#
                     #{r\ 1484}#
                     #{w\ 1494}#
                     #{s\ 1495}#
                     #{mod\ 1496}#)))))
           (#{chi-top\ 343}#
             (lambda (#{e\ 1503}#
                      #{r\ 1504}#
                      #{w\ 1505}#
                      #{m\ 1506}#
                      #{esew\ 1507}#
                      #{mod\ 1508}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 341}#
                     #{e\ 1503}#
                     #{r\ 1504}#
                     #{w\ 1505}#
                     (#{source-annotation\ 239}# #{e\ 1503}#)
                     #f
                     #{mod\ 1508}#
                     #f))
                 (lambda (#{type\ 1529}#
                          #{value\ 1530}#
                          #{e\ 1531}#
                          #{w\ 1532}#
                          #{s\ 1533}#
                          #{mod\ 1534}#)
                   (if (memv #{type\ 1529}# (quote (begin-form)))
                     ((lambda (#{tmp\ 1542}#)
                        ((lambda (#{tmp\ 1543}#)
                           (if #{tmp\ 1543}#
                             (apply (lambda (#{_\ 1545}#) (#{chi-void\ 359}#))
                                    #{tmp\ 1543}#)
                             ((lambda (#{tmp\ 1546}#)
                                (if #{tmp\ 1546}#
                                  (apply (lambda (#{_\ 1550}#
                                                  #{e1\ 1551}#
                                                  #{e2\ 1552}#)
                                           (#{chi-top-sequence\ 335}#
                                             (cons #{e1\ 1551}# #{e2\ 1552}#)
                                             #{r\ 1504}#
                                             #{w\ 1532}#
                                             #{s\ 1533}#
                                             #{m\ 1506}#
                                             #{esew\ 1507}#
                                             #{mod\ 1534}#))
                                         #{tmp\ 1546}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 1542}#)))
                              ($sc-dispatch
                                #{tmp\ 1542}#
                                '(any any . each-any)))))
                         ($sc-dispatch #{tmp\ 1542}# (quote (any)))))
                      #{e\ 1531}#)
                     (if (memv #{type\ 1529}# (quote (local-syntax-form)))
                       (#{chi-local-syntax\ 355}#
                         #{value\ 1530}#
                         #{e\ 1531}#
                         #{r\ 1504}#
                         #{w\ 1532}#
                         #{s\ 1533}#
                         #{mod\ 1534}#
                         (lambda (#{body\ 1555}#
                                  #{r\ 1556}#
                                  #{w\ 1557}#
                                  #{s\ 1558}#
                                  #{mod\ 1559}#)
                           (#{chi-top-sequence\ 335}#
                             #{body\ 1555}#
                             #{r\ 1556}#
                             #{w\ 1557}#
                             #{s\ 1558}#
                             #{m\ 1506}#
                             #{esew\ 1507}#
                             #{mod\ 1559}#)))
                       (if (memv #{type\ 1529}# (quote (eval-when-form)))
                         ((lambda (#{tmp\ 1566}#)
                            ((lambda (#{tmp\ 1567}#)
                               (if #{tmp\ 1567}#
                                 (apply (lambda (#{_\ 1572}#
                                                 #{x\ 1573}#
                                                 #{e1\ 1574}#
                                                 #{e2\ 1575}#)
                                          (let ((#{when-list\ 1578}#
                                                  (#{chi-when-list\ 339}#
                                                    #{e\ 1531}#
                                                    #{x\ 1573}#
                                                    #{w\ 1532}#))
                                                (#{body\ 1579}#
                                                  (cons #{e1\ 1574}#
                                                        #{e2\ 1575}#)))
                                            (if (eq? #{m\ 1506}# (quote e))
                                              (if (memq 'eval
                                                        #{when-list\ 1578}#)
                                                (#{chi-top-sequence\ 335}#
                                                  #{body\ 1579}#
                                                  #{r\ 1504}#
                                                  #{w\ 1532}#
                                                  #{s\ 1533}#
                                                  'e
                                                  '(eval)
                                                  #{mod\ 1534}#)
                                                (#{chi-void\ 359}#))
                                              (if (memq 'load
                                                        #{when-list\ 1578}#)
                                                (if (let ((#{t\ 1588}#
                                                            (memq 'compile
                                                                  #{when-list\ 1578}#)))
                                                      (if #{t\ 1588}#
                                                        #{t\ 1588}#
                                                        (if (eq? #{m\ 1506}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list\ 1578}#)
                                                          #f)))
                                                  (#{chi-top-sequence\ 335}#
                                                    #{body\ 1579}#
                                                    #{r\ 1504}#
                                                    #{w\ 1532}#
                                                    #{s\ 1533}#
                                                    'c&e
                                                    '(compile load)
                                                    #{mod\ 1534}#)
                                                  (if (memq #{m\ 1506}#
                                                            '(c c&e))
                                                    (#{chi-top-sequence\ 335}#
                                                      #{body\ 1579}#
                                                      #{r\ 1504}#
                                                      #{w\ 1532}#
                                                      #{s\ 1533}#
                                                      'c
                                                      '(load)
                                                      #{mod\ 1534}#)
                                                    (#{chi-void\ 359}#)))
                                                (if (let ((#{t\ 1596}#
                                                            (memq 'compile
                                                                  #{when-list\ 1578}#)))
                                                      (if #{t\ 1596}#
                                                        #{t\ 1596}#
                                                        (if (eq? #{m\ 1506}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list\ 1578}#)
                                                          #f)))
                                                  (begin
                                                    (#{top-level-eval-hook\ 171}#
                                                      (#{chi-top-sequence\ 335}#
                                                        #{body\ 1579}#
                                                        #{r\ 1504}#
                                                        #{w\ 1532}#
                                                        #{s\ 1533}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1534}#)
                                                      #{mod\ 1534}#)
                                                    (#{chi-void\ 359}#))
                                                  (#{chi-void\ 359}#))))))
                                        #{tmp\ 1567}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{tmp\ 1566}#)))
                             ($sc-dispatch
                               #{tmp\ 1566}#
                               '(any each-any any . each-any))))
                          #{e\ 1531}#)
                         (if (memv #{type\ 1529}#
                                   '(define-syntax-form))
                           (let ((#{n\ 1604}#
                                   (#{id-var-name\ 317}#
                                     #{value\ 1530}#
                                     #{w\ 1532}#))
                                 (#{r\ 1605}#
                                   (#{macros-only-env\ 252}# #{r\ 1504}#)))
                             (if (memv #{m\ 1506}# (quote (c)))
                               (if (memq (quote compile) #{esew\ 1507}#)
                                 (let ((#{e\ 1608}#
                                         (#{chi-install-global\ 337}#
                                           #{n\ 1604}#
                                           (#{chi\ 345}#
                                             #{e\ 1531}#
                                             #{r\ 1605}#
                                             #{w\ 1532}#
                                             #{mod\ 1534}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 171}#
                                       #{e\ 1608}#
                                       #{mod\ 1534}#)
                                     (if (memq (quote load) #{esew\ 1507}#)
                                       #{e\ 1608}#
                                       (#{chi-void\ 359}#))))
                                 (if (memq (quote load) #{esew\ 1507}#)
                                   (#{chi-install-global\ 337}#
                                     #{n\ 1604}#
                                     (#{chi\ 345}#
                                       #{e\ 1531}#
                                       #{r\ 1605}#
                                       #{w\ 1532}#
                                       #{mod\ 1534}#))
                                   (#{chi-void\ 359}#)))
                               (if (memv #{m\ 1506}# (quote (c&e)))
                                 (let ((#{e\ 1611}#
                                         (#{chi-install-global\ 337}#
                                           #{n\ 1604}#
                                           (#{chi\ 345}#
                                             #{e\ 1531}#
                                             #{r\ 1605}#
                                             #{w\ 1532}#
                                             #{mod\ 1534}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 171}#
                                       #{e\ 1611}#
                                       #{mod\ 1534}#)
                                     #{e\ 1611}#))
                                 (begin
                                   (if (memq (quote eval) #{esew\ 1507}#)
                                     (#{top-level-eval-hook\ 171}#
                                       (#{chi-install-global\ 337}#
                                         #{n\ 1604}#
                                         (#{chi\ 345}#
                                           #{e\ 1531}#
                                           #{r\ 1605}#
                                           #{w\ 1532}#
                                           #{mod\ 1534}#))
                                       #{mod\ 1534}#))
                                   (#{chi-void\ 359}#)))))
                           (if (memv #{type\ 1529}# (quote (define-form)))
                             (let ((#{n\ 1616}#
                                     (#{id-var-name\ 317}#
                                       #{value\ 1530}#
                                       #{w\ 1532}#)))
                               (let ((#{type\ 1618}#
                                       (#{binding-type\ 243}#
                                         (#{lookup\ 254}#
                                           #{n\ 1616}#
                                           #{r\ 1504}#
                                           #{mod\ 1534}#))))
                                 (if (memv #{type\ 1618}#
                                           '(global core macro module-ref))
                                   (begin
                                     (if (if (not (module-local-variable
                                                    (current-module)
                                                    #{n\ 1616}#))
                                           (current-module)
                                           #f)
                                       (let ((#{old\ 1623}#
                                               (module-variable
                                                 (current-module)
                                                 #{n\ 1616}#)))
                                         (module-define!
                                           (current-module)
                                           #{n\ 1616}#
                                           (if (variable? #{old\ 1623}#)
                                             (variable-ref #{old\ 1623}#)
                                             #f))))
                                     (let ((#{x\ 1626}#
                                             (#{build-global-definition\ 200}#
                                               #{s\ 1533}#
                                               #{n\ 1616}#
                                               (#{chi\ 345}#
                                                 #{e\ 1531}#
                                                 #{r\ 1504}#
                                                 #{w\ 1532}#
                                                 #{mod\ 1534}#))))
                                       (begin
                                         (if (eq? #{m\ 1506}# (quote c&e))
                                           (#{top-level-eval-hook\ 171}#
                                             #{x\ 1626}#
                                             #{mod\ 1534}#))
                                         #{x\ 1626}#)))
                                   (if (memv #{type\ 1618}#
                                             '(displaced-lexical))
                                     (syntax-violation
                                       #f
                                       "identifier out of context"
                                       #{e\ 1531}#
                                       (#{wrap\ 329}#
                                         #{value\ 1530}#
                                         #{w\ 1532}#
                                         #{mod\ 1534}#))
                                     (syntax-violation
                                       #f
                                       "cannot define keyword at top level"
                                       #{e\ 1531}#
                                       (#{wrap\ 329}#
                                         #{value\ 1530}#
                                         #{w\ 1532}#
                                         #{mod\ 1534}#))))))
                             (let ((#{x\ 1632}#
                                     (#{chi-expr\ 347}#
                                       #{type\ 1529}#
                                       #{value\ 1530}#
                                       #{e\ 1531}#
                                       #{r\ 1504}#
                                       #{w\ 1532}#
                                       #{s\ 1533}#
                                       #{mod\ 1534}#)))
                               (begin
                                 (if (eq? #{m\ 1506}# (quote c&e))
                                   (#{top-level-eval-hook\ 171}#
                                     #{x\ 1632}#
                                     #{mod\ 1534}#))
                                 #{x\ 1632}#)))))))))))
           (#{syntax-type\ 341}#
             (lambda (#{e\ 1633}#
                      #{r\ 1634}#
                      #{w\ 1635}#
                      #{s\ 1636}#
                      #{rib\ 1637}#
                      #{mod\ 1638}#
                      #{for-car?\ 1639}#)
               (if (symbol? #{e\ 1633}#)
                 (let ((#{n\ 1651}#
                         (#{id-var-name\ 317}# #{e\ 1633}# #{w\ 1635}#)))
                   (let ((#{b\ 1653}#
                           (#{lookup\ 254}#
                             #{n\ 1651}#
                             #{r\ 1634}#
                             #{mod\ 1638}#)))
                     (let ((#{type\ 1655}#
                             (#{binding-type\ 243}# #{b\ 1653}#)))
                       (if (memv #{type\ 1655}# (quote (lexical)))
                         (values
                           #{type\ 1655}#
                           (#{binding-value\ 245}# #{b\ 1653}#)
                           #{e\ 1633}#
                           #{w\ 1635}#
                           #{s\ 1636}#
                           #{mod\ 1638}#)
                         (if (memv #{type\ 1655}# (quote (global)))
                           (values
                             #{type\ 1655}#
                             #{n\ 1651}#
                             #{e\ 1633}#
                             #{w\ 1635}#
                             #{s\ 1636}#
                             #{mod\ 1638}#)
                           (if (memv #{type\ 1655}# (quote (macro)))
                             (if #{for-car?\ 1639}#
                               (values
                                 #{type\ 1655}#
                                 (#{binding-value\ 245}# #{b\ 1653}#)
                                 #{e\ 1633}#
                                 #{w\ 1635}#
                                 #{s\ 1636}#
                                 #{mod\ 1638}#)
                               (#{syntax-type\ 341}#
                                 (#{chi-macro\ 351}#
                                   (#{binding-value\ 245}# #{b\ 1653}#)
                                   #{e\ 1633}#
                                   #{r\ 1634}#
                                   #{w\ 1635}#
                                   #{rib\ 1637}#
                                   #{mod\ 1638}#)
                                 #{r\ 1634}#
                                 '(())
                                 #{s\ 1636}#
                                 #{rib\ 1637}#
                                 #{mod\ 1638}#
                                 #f))
                             (values
                               #{type\ 1655}#
                               (#{binding-value\ 245}# #{b\ 1653}#)
                               #{e\ 1633}#
                               #{w\ 1635}#
                               #{s\ 1636}#
                               #{mod\ 1638}#)))))))
                 (if (pair? #{e\ 1633}#)
                   (let ((#{first\ 1664}# (car #{e\ 1633}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 341}#
                           #{first\ 1664}#
                           #{r\ 1634}#
                           #{w\ 1635}#
                           #{s\ 1636}#
                           #{rib\ 1637}#
                           #{mod\ 1638}#
                           #t))
                       (lambda (#{ftype\ 1665}#
                                #{fval\ 1666}#
                                #{fe\ 1667}#
                                #{fw\ 1668}#
                                #{fs\ 1669}#
                                #{fmod\ 1670}#)
                         (if (memv #{ftype\ 1665}# (quote (lexical)))
                           (values
                             'lexical-call
                             #{fval\ 1666}#
                             #{e\ 1633}#
                             #{w\ 1635}#
                             #{s\ 1636}#
                             #{mod\ 1638}#)
                           (if (memv #{ftype\ 1665}# (quote (global)))
                             (values
                               'global-call
                               (#{make-syntax-object\ 222}#
                                 #{fval\ 1666}#
                                 #{w\ 1635}#
                                 #{fmod\ 1670}#)
                               #{e\ 1633}#
                               #{w\ 1635}#
                               #{s\ 1636}#
                               #{mod\ 1638}#)
                             (if (memv #{ftype\ 1665}# (quote (macro)))
                               (#{syntax-type\ 341}#
                                 (#{chi-macro\ 351}#
                                   #{fval\ 1666}#
                                   #{e\ 1633}#
                                   #{r\ 1634}#
                                   #{w\ 1635}#
                                   #{rib\ 1637}#
                                   #{mod\ 1638}#)
                                 #{r\ 1634}#
                                 '(())
                                 #{s\ 1636}#
                                 #{rib\ 1637}#
                                 #{mod\ 1638}#
                                 #{for-car?\ 1639}#)
                               (if (memv #{ftype\ 1665}# (quote (module-ref)))
                                 (call-with-values
                                   (lambda () (#{fval\ 1666}# #{e\ 1633}#))
                                   (lambda (#{sym\ 1682}# #{mod\ 1683}#)
                                     (#{syntax-type\ 341}#
                                       #{sym\ 1682}#
                                       #{r\ 1634}#
                                       #{w\ 1635}#
                                       #{s\ 1636}#
                                       #{rib\ 1637}#
                                       #{mod\ 1683}#
                                       #{for-car?\ 1639}#)))
                                 (if (memv #{ftype\ 1665}# (quote (core)))
                                   (values
                                     'core-form
                                     #{fval\ 1666}#
                                     #{e\ 1633}#
                                     #{w\ 1635}#
                                     #{s\ 1636}#
                                     #{mod\ 1638}#)
                                   (if (memv #{ftype\ 1665}#
                                             '(local-syntax))
                                     (values
                                       'local-syntax-form
                                       #{fval\ 1666}#
                                       #{e\ 1633}#
                                       #{w\ 1635}#
                                       #{s\ 1636}#
                                       #{mod\ 1638}#)
                                     (if (memv #{ftype\ 1665}# (quote (begin)))
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 1633}#
                                         #{w\ 1635}#
                                         #{s\ 1636}#
                                         #{mod\ 1638}#)
                                       (if (memv #{ftype\ 1665}#
                                                 '(eval-when))
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 1633}#
                                           #{w\ 1635}#
                                           #{s\ 1636}#
                                           #{mod\ 1638}#)
                                         (if (memv #{ftype\ 1665}#
                                                   '(define))
                                           ((lambda (#{tmp\ 1691}#)
                                              ((lambda (#{tmp\ 1692}#)
                                                 (if (if #{tmp\ 1692}#
                                                       (apply (lambda (#{_\ 1696}#
                                                                       #{name\ 1697}#
                                                                       #{val\ 1698}#)
                                                                (#{id?\ 260}#
                                                                  #{name\ 1697}#))
                                                              #{tmp\ 1692}#)
                                                       #f)
                                                   (apply (lambda (#{_\ 1702}#
                                                                   #{name\ 1703}#
                                                                   #{val\ 1704}#)
                                                            (values
                                                              'define-form
                                                              #{name\ 1703}#
                                                              #{val\ 1704}#
                                                              #{w\ 1635}#
                                                              #{s\ 1636}#
                                                              #{mod\ 1638}#))
                                                          #{tmp\ 1692}#)
                                                   ((lambda (#{tmp\ 1705}#)
                                                      (if (if #{tmp\ 1705}#
                                                            (apply (lambda (#{_\ 1711}#
                                                                            #{name\ 1712}#
                                                                            #{args\ 1713}#
                                                                            #{e1\ 1714}#
                                                                            #{e2\ 1715}#)
                                                                     (if (#{id?\ 260}#
                                                                           #{name\ 1712}#)
                                                                       (#{valid-bound-ids?\ 323}#
                                                                         (#{lambda-var-list\ 375}#
                                                                           #{args\ 1713}#))
                                                                       #f))
                                                                   #{tmp\ 1705}#)
                                                            #f)
                                                        (apply (lambda (#{_\ 1723}#
                                                                        #{name\ 1724}#
                                                                        #{args\ 1725}#
                                                                        #{e1\ 1726}#
                                                                        #{e2\ 1727}#)
                                                                 (values
                                                                   'define-form
                                                                   (#{wrap\ 329}#
                                                                     #{name\ 1724}#
                                                                     #{w\ 1635}#
                                                                     #{mod\ 1638}#)
                                                                   (#{decorate-source\ 180}#
                                                                     (cons '#(syntax-object
                                                                              lambda
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(_
                                                                                   name
                                                                                   args
                                                                                   e1
                                                                                   e2)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1718"
                                                                                   "i1719"
                                                                                   "i1720"
                                                                                   "i1721"
                                                                                   "i1722"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(ftype
                                                                                   fval
                                                                                   fe
                                                                                   fw
                                                                                   fs
                                                                                   fmod)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1671"
                                                                                   "i1672"
                                                                                   "i1673"
                                                                                   "i1674"
                                                                                   "i1675"
                                                                                   "i1676"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(first)
                                                                                 #((top))
                                                                                 #("i1663"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(e
                                                                                   r
                                                                                   w
                                                                                   s
                                                                                   rib
                                                                                   mod
                                                                                   for-car?)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1640"
                                                                                   "i1641"
                                                                                   "i1642"
                                                                                   "i1643"
                                                                                   "i1644"
                                                                                   "i1645"
                                                                                   "i1646"))
                                                                               #(ribcage
                                                                                 (lambda-var-list
                                                                                   gen-var
                                                                                   strip
                                                                                   chi-lambda-case
                                                                                   lambda*-formals
                                                                                   chi-simple-lambda
                                                                                   lambda-formals
                                                                                   ellipsis?
                                                                                   chi-void
                                                                                   eval-local-transformer
                                                                                   chi-local-syntax
                                                                                   chi-body
                                                                                   chi-macro
                                                                                   chi-application
                                                                                   chi-expr
                                                                                   chi
                                                                                   chi-top
                                                                                   syntax-type
                                                                                   chi-when-list
                                                                                   chi-install-global
                                                                                   chi-top-sequence
                                                                                   chi-sequence
                                                                                   source-wrap
                                                                                   wrap
                                                                                   bound-id-member?
                                                                                   distinct-bound-ids?
                                                                                   valid-bound-ids?
                                                                                   bound-id=?
                                                                                   free-id=?
                                                                                   id-var-name
                                                                                   same-marks?
                                                                                   join-marks
                                                                                   join-wraps
                                                                                   smart-append
                                                                                   make-binding-wrap
                                                                                   extend-ribcage!
                                                                                   make-empty-ribcage
                                                                                   new-mark
                                                                                   anti-mark
                                                                                   the-anti-mark
                                                                                   top-marked?
                                                                                   top-wrap
                                                                                   empty-wrap
                                                                                   set-ribcage-labels!
                                                                                   set-ribcage-marks!
                                                                                   set-ribcage-symnames!
                                                                                   ribcage-labels
                                                                                   ribcage-marks
                                                                                   ribcage-symnames
                                                                                   ribcage?
                                                                                   make-ribcage
                                                                                   gen-labels
                                                                                   gen-label
                                                                                   make-rename
                                                                                   rename-marks
                                                                                   rename-new
                                                                                   rename-old
                                                                                   subst-rename?
                                                                                   wrap-subst
                                                                                   wrap-marks
                                                                                   make-wrap
                                                                                   id-sym-name&marks
                                                                                   id-sym-name
                                                                                   id?
                                                                                   nonsymbol-id?
                                                                                   global-extend
                                                                                   lookup
                                                                                   macros-only-env
                                                                                   extend-var-env
                                                                                   extend-env
                                                                                   null-env
                                                                                   binding-value
                                                                                   binding-type
                                                                                   make-binding
                                                                                   arg-check
                                                                                   source-annotation
                                                                                   no-source
                                                                                   set-syntax-object-module!
                                                                                   set-syntax-object-wrap!
                                                                                   set-syntax-object-expression!
                                                                                   syntax-object-module
                                                                                   syntax-object-wrap
                                                                                   syntax-object-expression
                                                                                   syntax-object?
                                                                                   make-syntax-object
                                                                                   build-lexical-var
                                                                                   build-letrec
                                                                                   build-named-let
                                                                                   build-let
                                                                                   build-sequence
                                                                                   build-data
                                                                                   build-primref
                                                                                   build-lambda-case
                                                                                   build-case-lambda
                                                                                   build-simple-lambda
                                                                                   build-global-definition
                                                                                   maybe-name-value!
                                                                                   build-global-assignment
                                                                                   build-global-reference
                                                                                   analyze-variable
                                                                                   build-lexical-assignment
                                                                                   build-lexical-reference
                                                                                   build-conditional
                                                                                   build-application
                                                                                   build-void
                                                                                   decorate-source
                                                                                   get-global-definition-hook
                                                                                   put-global-definition-hook
                                                                                   gensym-hook
                                                                                   local-eval-hook
                                                                                   top-level-eval-hook
                                                                                   fx<
                                                                                   fx=
                                                                                   fx-
                                                                                   fx+
                                                                                   *mode*
                                                                                   noexpand)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i374"
                                                                                  "i372"
                                                                                  "i370"
                                                                                  "i368"
                                                                                  "i366"
                                                                                  "i364"
                                                                                  "i362"
                                                                                  "i360"
                                                                                  "i358"
                                                                                  "i356"
                                                                                  "i354"
                                                                                  "i352"
                                                                                  "i350"
                                                                                  "i348"
                                                                                  "i346"
                                                                                  "i344"
                                                                                  "i342"
                                                                                  "i340"
                                                                                  "i338"
                                                                                  "i336"
                                                                                  "i334"
                                                                                  "i332"
                                                                                  "i330"
                                                                                  "i328"
                                                                                  "i326"
                                                                                  "i324"
                                                                                  "i322"
                                                                                  "i320"
                                                                                  "i318"
                                                                                  "i316"
                                                                                  "i314"
                                                                                  "i312"
                                                                                  "i310"
                                                                                  "i308"
                                                                                  "i306"
                                                                                  "i304"
                                                                                  "i303"
                                                                                  "i302"
                                                                                  "i300"
                                                                                  "i299"
                                                                                  "i298"
                                                                                  "i297"
                                                                                  "i296"
                                                                                  "i294"
                                                                                  "i292"
                                                                                  "i290"
                                                                                  "i288"
                                                                                  "i286"
                                                                                  "i284"
                                                                                  "i282"
                                                                                  "i280"
                                                                                  "i277"
                                                                                  "i275"
                                                                                  "i274"
                                                                                  "i273"
                                                                                  "i272"
                                                                                  "i271"
                                                                                  "i270"
                                                                                  "i268"
                                                                                  "i266"
                                                                                  "i264"
                                                                                  "i262"
                                                                                  "i261"
                                                                                  "i259"
                                                                                  "i257"
                                                                                  "i255"
                                                                                  "i253"
                                                                                  "i251"
                                                                                  "i249"
                                                                                  "i247"
                                                                                  "i246"
                                                                                  "i244"
                                                                                  "i242"
                                                                                  "i241"
                                                                                  "i240"
                                                                                  "i238"
                                                                                  "i237"
                                                                                  "i235"
                                                                                  "i233"
                                                                                  "i231"
                                                                                  "i229"
                                                                                  "i227"
                                                                                  "i225"
                                                                                  "i223"
                                                                                  "i221"
                                                                                  "i219"
                                                                                  "i217"
                                                                                  "i215"
                                                                                  "i213"
                                                                                  "i211"
                                                                                  "i209"
                                                                                  "i207"
                                                                                  "i205"
                                                                                  "i203"
                                                                                  "i201"
                                                                                  "i199"
                                                                                  "i197"
                                                                                  "i195"
                                                                                  "i193"
                                                                                  "i191"
                                                                                  "i189"
                                                                                  "i187"
                                                                                  "i185"
                                                                                  "i183"
                                                                                  "i181"
                                                                                  "i179"
                                                                                  "i177"
                                                                                  "i175"
                                                                                  "i174"
                                                                                  "i172"
                                                                                  "i170"
                                                                                  "i168"
                                                                                  "i166"
                                                                                  "i164"
                                                                                  "i162"
                                                                                  "i160"
                                                                                  "i158"))
                                                                               #(ribcage
                                                                                 (define-structure
                                                                                   and-map*)
                                                                                 ((top)
                                                                                  (top))
                                                                                 ("i61"
                                                                                  "i59")))
                                                                              (hygiene
                                                                                guile))
                                                                           (#{wrap\ 329}#
                                                                             (cons #{args\ 1725}#
                                                                                   (cons #{e1\ 1726}#
                                                                                         #{e2\ 1727}#))
                                                                             #{w\ 1635}#
                                                                             #{mod\ 1638}#))
                                                                     #{s\ 1636}#)
                                                                   '(())
                                                                   #{s\ 1636}#
                                                                   #{mod\ 1638}#))
                                                               #{tmp\ 1705}#)
                                                        ((lambda (#{tmp\ 1730}#)
                                                           (if (if #{tmp\ 1730}#
                                                                 (apply (lambda (#{_\ 1733}#
                                                                                 #{name\ 1734}#)
                                                                          (#{id?\ 260}#
                                                                            #{name\ 1734}#))
                                                                        #{tmp\ 1730}#)
                                                                 #f)
                                                             (apply (lambda (#{_\ 1737}#
                                                                             #{name\ 1738}#)
                                                                      (values
                                                                        'define-form
                                                                        (#{wrap\ 329}#
                                                                          #{name\ 1738}#
                                                                          #{w\ 1635}#
                                                                          #{mod\ 1638}#)
                                                                        '(#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1735"
                                                                                 "i1736"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1671"
                                                                                 "i1672"
                                                                                 "i1673"
                                                                                 "i1674"
                                                                                 "i1675"
                                                                                 "i1676"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1663"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1640"
                                                                                 "i1641"
                                                                                 "i1642"
                                                                                 "i1643"
                                                                                 "i1644"
                                                                                 "i1645"
                                                                                 "i1646"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 *mode*
                                                                                 noexpand)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i374"
                                                                                "i372"
                                                                                "i370"
                                                                                "i368"
                                                                                "i366"
                                                                                "i364"
                                                                                "i362"
                                                                                "i360"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i352"
                                                                                "i350"
                                                                                "i348"
                                                                                "i346"
                                                                                "i344"
                                                                                "i342"
                                                                                "i340"
                                                                                "i338"
                                                                                "i336"
                                                                                "i334"
                                                                                "i332"
                                                                                "i330"
                                                                                "i328"
                                                                                "i326"
                                                                                "i324"
                                                                                "i322"
                                                                                "i320"
                                                                                "i318"
                                                                                "i316"
                                                                                "i314"
                                                                                "i312"
                                                                                "i310"
                                                                                "i308"
                                                                                "i306"
                                                                                "i304"
                                                                                "i303"
                                                                                "i302"
                                                                                "i300"
                                                                                "i299"
                                                                                "i298"
                                                                                "i297"
                                                                                "i296"
                                                                                "i294"
                                                                                "i292"
                                                                                "i290"
                                                                                "i288"
                                                                                "i286"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i277"
                                                                                "i275"
                                                                                "i274"
                                                                                "i273"
                                                                                "i272"
                                                                                "i271"
                                                                                "i270"
                                                                                "i268"
                                                                                "i266"
                                                                                "i264"
                                                                                "i262"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i246"
                                                                                "i244"
                                                                                "i242"
                                                                                "i241"
                                                                                "i240"
                                                                                "i238"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i229"
                                                                                "i227"
                                                                                "i225"
                                                                                "i223"
                                                                                "i221"
                                                                                "i219"
                                                                                "i217"
                                                                                "i215"
                                                                                "i213"
                                                                                "i211"
                                                                                "i209"
                                                                                "i207"
                                                                                "i205"
                                                                                "i203"
                                                                                "i201"
                                                                                "i199"
                                                                                "i197"
                                                                                "i195"
                                                                                "i193"
                                                                                "i191"
                                                                                "i189"
                                                                                "i187"
                                                                                "i185"
                                                                                "i183"
                                                                                "i181"
                                                                                "i179"
                                                                                "i177"
                                                                                "i175"
                                                                                "i174"
                                                                                "i172"
                                                                                "i170"
                                                                                "i168"
                                                                                "i166"
                                                                                "i164"
                                                                                "i162"
                                                                                "i160"
                                                                                "i158"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top))
                                                                               ("i61"
                                                                                "i59")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1735"
                                                                                 "i1736"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1671"
                                                                                 "i1672"
                                                                                 "i1673"
                                                                                 "i1674"
                                                                                 "i1675"
                                                                                 "i1676"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1663"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1640"
                                                                                 "i1641"
                                                                                 "i1642"
                                                                                 "i1643"
                                                                                 "i1644"
                                                                                 "i1645"
                                                                                 "i1646"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 *mode*
                                                                                 noexpand)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i374"
                                                                                "i372"
                                                                                "i370"
                                                                                "i368"
                                                                                "i366"
                                                                                "i364"
                                                                                "i362"
                                                                                "i360"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i352"
                                                                                "i350"
                                                                                "i348"
                                                                                "i346"
                                                                                "i344"
                                                                                "i342"
                                                                                "i340"
                                                                                "i338"
                                                                                "i336"
                                                                                "i334"
                                                                                "i332"
                                                                                "i330"
                                                                                "i328"
                                                                                "i326"
                                                                                "i324"
                                                                                "i322"
                                                                                "i320"
                                                                                "i318"
                                                                                "i316"
                                                                                "i314"
                                                                                "i312"
                                                                                "i310"
                                                                                "i308"
                                                                                "i306"
                                                                                "i304"
                                                                                "i303"
                                                                                "i302"
                                                                                "i300"
                                                                                "i299"
                                                                                "i298"
                                                                                "i297"
                                                                                "i296"
                                                                                "i294"
                                                                                "i292"
                                                                                "i290"
                                                                                "i288"
                                                                                "i286"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i277"
                                                                                "i275"
                                                                                "i274"
                                                                                "i273"
                                                                                "i272"
                                                                                "i271"
                                                                                "i270"
                                                                                "i268"
                                                                                "i266"
                                                                                "i264"
                                                                                "i262"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i246"
                                                                                "i244"
                                                                                "i242"
                                                                                "i241"
                                                                                "i240"
                                                                                "i238"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i229"
                                                                                "i227"
                                                                                "i225"
                                                                                "i223"
                                                                                "i221"
                                                                                "i219"
                                                                                "i217"
                                                                                "i215"
                                                                                "i213"
                                                                                "i211"
                                                                                "i209"
                                                                                "i207"
                                                                                "i205"
                                                                                "i203"
                                                                                "i201"
                                                                                "i199"
                                                                                "i197"
                                                                                "i195"
                                                                                "i193"
                                                                                "i191"
                                                                                "i189"
                                                                                "i187"
                                                                                "i185"
                                                                                "i183"
                                                                                "i181"
                                                                                "i179"
                                                                                "i177"
                                                                                "i175"
                                                                                "i174"
                                                                                "i172"
                                                                                "i170"
                                                                                "i168"
                                                                                "i166"
                                                                                "i164"
                                                                                "i162"
                                                                                "i160"
                                                                                "i158"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top))
                                                                               ("i61"
                                                                                "i59")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1735"
                                                                                 "i1736"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1671"
                                                                                 "i1672"
                                                                                 "i1673"
                                                                                 "i1674"
                                                                                 "i1675"
                                                                                 "i1676"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1663"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1640"
                                                                                 "i1641"
                                                                                 "i1642"
                                                                                 "i1643"
                                                                                 "i1644"
                                                                                 "i1645"
                                                                                 "i1646"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 *mode*
                                                                                 noexpand)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i374"
                                                                                "i372"
                                                                                "i370"
                                                                                "i368"
                                                                                "i366"
                                                                                "i364"
                                                                                "i362"
                                                                                "i360"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i352"
                                                                                "i350"
                                                                                "i348"
                                                                                "i346"
                                                                                "i344"
                                                                                "i342"
                                                                                "i340"
                                                                                "i338"
                                                                                "i336"
                                                                                "i334"
                                                                                "i332"
                                                                                "i330"
                                                                                "i328"
                                                                                "i326"
                                                                                "i324"
                                                                                "i322"
                                                                                "i320"
                                                                                "i318"
                                                                                "i316"
                                                                                "i314"
                                                                                "i312"
                                                                                "i310"
                                                                                "i308"
                                                                                "i306"
                                                                                "i304"
                                                                                "i303"
                                                                                "i302"
                                                                                "i300"
                                                                                "i299"
                                                                                "i298"
                                                                                "i297"
                                                                                "i296"
                                                                                "i294"
                                                                                "i292"
                                                                                "i290"
                                                                                "i288"
                                                                                "i286"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i277"
                                                                                "i275"
                                                                                "i274"
                                                                                "i273"
                                                                                "i272"
                                                                                "i271"
                                                                                "i270"
                                                                                "i268"
                                                                                "i266"
                                                                                "i264"
                                                                                "i262"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i246"
                                                                                "i244"
                                                                                "i242"
                                                                                "i241"
                                                                                "i240"
                                                                                "i238"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i229"
                                                                                "i227"
                                                                                "i225"
                                                                                "i223"
                                                                                "i221"
                                                                                "i219"
                                                                                "i217"
                                                                                "i215"
                                                                                "i213"
                                                                                "i211"
                                                                                "i209"
                                                                                "i207"
                                                                                "i205"
                                                                                "i203"
                                                                                "i201"
                                                                                "i199"
                                                                                "i197"
                                                                                "i195"
                                                                                "i193"
                                                                                "i191"
                                                                                "i189"
                                                                                "i187"
                                                                                "i185"
                                                                                "i183"
                                                                                "i181"
                                                                                "i179"
                                                                                "i177"
                                                                                "i175"
                                                                                "i174"
                                                                                "i172"
                                                                                "i170"
                                                                                "i168"
                                                                                "i166"
                                                                                "i164"
                                                                                "i162"
                                                                                "i160"
                                                                                "i158"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top))
                                                                               ("i61"
                                                                                "i59")))
                                                                            (hygiene
                                                                              guile)))
                                                                        '(())
                                                                        #{s\ 1636}#
                                                                        #{mod\ 1638}#))
                                                                    #{tmp\ 1730}#)
                                                             (syntax-violation
                                                               #f
                                                               "source expression failed to match any pattern"
                                                               #{tmp\ 1691}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 1691}#
                                                           '(any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1691}#
                                                      '(any (any . any)
                                                            any
                                                            .
                                                            each-any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1691}#
                                                 '(any any any))))
                                            #{e\ 1633}#)
                                           (if (memv #{ftype\ 1665}#
                                                     '(define-syntax))
                                             ((lambda (#{tmp\ 1741}#)
                                                ((lambda (#{tmp\ 1742}#)
                                                   (if (if #{tmp\ 1742}#
                                                         (apply (lambda (#{_\ 1746}#
                                                                         #{name\ 1747}#
                                                                         #{val\ 1748}#)
                                                                  (#{id?\ 260}#
                                                                    #{name\ 1747}#))
                                                                #{tmp\ 1742}#)
                                                         #f)
                                                     (apply (lambda (#{_\ 1752}#
                                                                     #{name\ 1753}#
                                                                     #{val\ 1754}#)
                                                              (values
                                                                'define-syntax-form
                                                                #{name\ 1753}#
                                                                #{val\ 1754}#
                                                                #{w\ 1635}#
                                                                #{s\ 1636}#
                                                                #{mod\ 1638}#))
                                                            #{tmp\ 1742}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 1741}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 1741}#
                                                   '(any any any))))
                                              #{e\ 1633}#)
                                             (values
                                               'call
                                               #f
                                               #{e\ 1633}#
                                               #{w\ 1635}#
                                               #{s\ 1636}#
                                               #{mod\ 1638}#))))))))))))))
                   (if (#{syntax-object?\ 224}# #{e\ 1633}#)
                     (#{syntax-type\ 341}#
                       (#{syntax-object-expression\ 226}# #{e\ 1633}#)
                       #{r\ 1634}#
                       (#{join-wraps\ 311}#
                         #{w\ 1635}#
                         (#{syntax-object-wrap\ 228}# #{e\ 1633}#))
                       #{s\ 1636}#
                       #{rib\ 1637}#
                       (let ((#{t\ 1760}#
                               (#{syntax-object-module\ 230}# #{e\ 1633}#)))
                         (if #{t\ 1760}# #{t\ 1760}# #{mod\ 1638}#))
                       #{for-car?\ 1639}#)
                     (if (self-evaluating? #{e\ 1633}#)
                       (values
                         'constant
                         #f
                         #{e\ 1633}#
                         #{w\ 1635}#
                         #{s\ 1636}#
                         #{mod\ 1638}#)
                       (values
                         'other
                         #f
                         #{e\ 1633}#
                         #{w\ 1635}#
                         #{s\ 1636}#
                         #{mod\ 1638}#)))))))
           (#{chi-when-list\ 339}#
             (lambda (#{e\ 1765}# #{when-list\ 1766}# #{w\ 1767}#)
               (letrec ((#{f\ 1774}#
                          (lambda (#{when-list\ 1775}# #{situations\ 1776}#)
                            (if (null? #{when-list\ 1775}#)
                              #{situations\ 1776}#
                              (#{f\ 1774}#
                                (cdr #{when-list\ 1775}#)
                                (cons (let ((#{x\ 1778}#
                                              (car #{when-list\ 1775}#)))
                                        (if (#{free-id=?\ 319}#
                                              #{x\ 1778}#
                                              '#(syntax-object
                                                 compile
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i1777"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i1771" "i1772" "i1773"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i1768" "i1769" "i1770"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      maybe-name-value!
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      *mode*
                                                      noexpand)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i374"
                                                     "i372"
                                                     "i370"
                                                     "i368"
                                                     "i366"
                                                     "i364"
                                                     "i362"
                                                     "i360"
                                                     "i358"
                                                     "i356"
                                                     "i354"
                                                     "i352"
                                                     "i350"
                                                     "i348"
                                                     "i346"
                                                     "i344"
                                                     "i342"
                                                     "i340"
                                                     "i338"
                                                     "i336"
                                                     "i334"
                                                     "i332"
                                                     "i330"
                                                     "i328"
                                                     "i326"
                                                     "i324"
                                                     "i322"
                                                     "i320"
                                                     "i318"
                                                     "i316"
                                                     "i314"
                                                     "i312"
                                                     "i310"
                                                     "i308"
                                                     "i306"
                                                     "i304"
                                                     "i303"
                                                     "i302"
                                                     "i300"
                                                     "i299"
                                                     "i298"
                                                     "i297"
                                                     "i296"
                                                     "i294"
                                                     "i292"
                                                     "i290"
                                                     "i288"
                                                     "i286"
                                                     "i284"
                                                     "i282"
                                                     "i280"
                                                     "i277"
                                                     "i275"
                                                     "i274"
                                                     "i273"
                                                     "i272"
                                                     "i271"
                                                     "i270"
                                                     "i268"
                                                     "i266"
                                                     "i264"
                                                     "i262"
                                                     "i261"
                                                     "i259"
                                                     "i257"
                                                     "i255"
                                                     "i253"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i246"
                                                     "i244"
                                                     "i242"
                                                     "i241"
                                                     "i240"
                                                     "i238"
                                                     "i237"
                                                     "i235"
                                                     "i233"
                                                     "i231"
                                                     "i229"
                                                     "i227"
                                                     "i225"
                                                     "i223"
                                                     "i221"
                                                     "i219"
                                                     "i217"
                                                     "i215"
                                                     "i213"
                                                     "i211"
                                                     "i209"
                                                     "i207"
                                                     "i205"
                                                     "i203"
                                                     "i201"
                                                     "i199"
                                                     "i197"
                                                     "i195"
                                                     "i193"
                                                     "i191"
                                                     "i189"
                                                     "i187"
                                                     "i185"
                                                     "i183"
                                                     "i181"
                                                     "i179"
                                                     "i177"
                                                     "i175"
                                                     "i174"
                                                     "i172"
                                                     "i170"
                                                     "i168"
                                                     "i166"
                                                     "i164"
                                                     "i162"
                                                     "i160"
                                                     "i158"))
                                                  #(ribcage
                                                    (define-structure and-map*)
                                                    ((top) (top))
                                                    ("i61" "i59")))
                                                 (hygiene guile)))
                                          'compile
                                          (if (#{free-id=?\ 319}#
                                                #{x\ 1778}#
                                                '#(syntax-object
                                                   load
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i1777"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f when-list situations)
                                                      #((top) (top) (top))
                                                      #("i1771"
                                                        "i1772"
                                                        "i1773"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e when-list w)
                                                      #((top) (top) (top))
                                                      #("i1768"
                                                        "i1769"
                                                        "i1770"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        *mode*
                                                        noexpand)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i374"
                                                       "i372"
                                                       "i370"
                                                       "i368"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i360"
                                                       "i358"
                                                       "i356"
                                                       "i354"
                                                       "i352"
                                                       "i350"
                                                       "i348"
                                                       "i346"
                                                       "i344"
                                                       "i342"
                                                       "i340"
                                                       "i338"
                                                       "i336"
                                                       "i334"
                                                       "i332"
                                                       "i330"
                                                       "i328"
                                                       "i326"
                                                       "i324"
                                                       "i322"
                                                       "i320"
                                                       "i318"
                                                       "i316"
                                                       "i314"
                                                       "i312"
                                                       "i310"
                                                       "i308"
                                                       "i306"
                                                       "i304"
                                                       "i303"
                                                       "i302"
                                                       "i300"
                                                       "i299"
                                                       "i298"
                                                       "i297"
                                                       "i296"
                                                       "i294"
                                                       "i292"
                                                       "i290"
                                                       "i288"
                                                       "i286"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i277"
                                                       "i275"
                                                       "i274"
                                                       "i273"
                                                       "i272"
                                                       "i271"
                                                       "i270"
                                                       "i268"
                                                       "i266"
                                                       "i264"
                                                       "i262"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i246"
                                                       "i244"
                                                       "i242"
                                                       "i241"
                                                       "i240"
                                                       "i238"
                                                       "i237"
                                                       "i235"
                                                       "i233"
                                                       "i231"
                                                       "i229"
                                                       "i227"
                                                       "i225"
                                                       "i223"
                                                       "i221"
                                                       "i219"
                                                       "i217"
                                                       "i215"
                                                       "i213"
                                                       "i211"
                                                       "i209"
                                                       "i207"
                                                       "i205"
                                                       "i203"
                                                       "i201"
                                                       "i199"
                                                       "i197"
                                                       "i195"
                                                       "i193"
                                                       "i191"
                                                       "i189"
                                                       "i187"
                                                       "i185"
                                                       "i183"
                                                       "i181"
                                                       "i179"
                                                       "i177"
                                                       "i175"
                                                       "i174"
                                                       "i172"
                                                       "i170"
                                                       "i168"
                                                       "i166"
                                                       "i164"
                                                       "i162"
                                                       "i160"
                                                       "i158"))
                                                    #(ribcage
                                                      (define-structure
                                                        and-map*)
                                                      ((top) (top))
                                                      ("i61" "i59")))
                                                   (hygiene guile)))
                                            'load
                                            (if (#{free-id=?\ 319}#
                                                  #{x\ 1778}#
                                                  '#(syntax-object
                                                     eval
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i1777"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f
                                                          when-list
                                                          situations)
                                                        #((top) (top) (top))
                                                        #("i1771"
                                                          "i1772"
                                                          "i1773"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(e when-list w)
                                                        #((top) (top) (top))
                                                        #("i1768"
                                                          "i1769"
                                                          "i1770"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          chi-lambda-case
                                                          lambda*-formals
                                                          chi-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          chi-void
                                                          eval-local-transformer
                                                          chi-local-syntax
                                                          chi-body
                                                          chi-macro
                                                          chi-application
                                                          chi-expr
                                                          chi
                                                          chi-top
                                                          syntax-type
                                                          chi-when-list
                                                          chi-install-global
                                                          chi-top-sequence
                                                          chi-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          maybe-name-value!
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          *mode*
                                                          noexpand)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i374"
                                                         "i372"
                                                         "i370"
                                                         "i368"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i356"
                                                         "i354"
                                                         "i352"
                                                         "i350"
                                                         "i348"
                                                         "i346"
                                                         "i344"
                                                         "i342"
                                                         "i340"
                                                         "i338"
                                                         "i336"
                                                         "i334"
                                                         "i332"
                                                         "i330"
                                                         "i328"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i306"
                                                         "i304"
                                                         "i303"
                                                         "i302"
                                                         "i300"
                                                         "i299"
                                                         "i298"
                                                         "i297"
                                                         "i296"
                                                         "i294"
                                                         "i292"
                                                         "i290"
                                                         "i288"
                                                         "i286"
                                                         "i284"
                                                         "i282"
                                                         "i280"
                                                         "i277"
                                                         "i275"
                                                         "i274"
                                                         "i273"
                                                         "i272"
                                                         "i271"
                                                         "i270"
                                                         "i268"
                                                         "i266"
                                                         "i264"
                                                         "i262"
                                                         "i261"
                                                         "i259"
                                                         "i257"
                                                         "i255"
                                                         "i253"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i246"
                                                         "i244"
                                                         "i242"
                                                         "i241"
                                                         "i240"
                                                         "i238"
                                                         "i237"
                                                         "i235"
                                                         "i233"
                                                         "i231"
                                                         "i229"
                                                         "i227"
                                                         "i225"
                                                         "i223"
                                                         "i221"
                                                         "i219"
                                                         "i217"
                                                         "i215"
                                                         "i213"
                                                         "i211"
                                                         "i209"
                                                         "i207"
                                                         "i205"
                                                         "i203"
                                                         "i201"
                                                         "i199"
                                                         "i197"
                                                         "i195"
                                                         "i193"
                                                         "i191"
                                                         "i189"
                                                         "i187"
                                                         "i185"
                                                         "i183"
                                                         "i181"
                                                         "i179"
                                                         "i177"
                                                         "i175"
                                                         "i174"
                                                         "i172"
                                                         "i170"
                                                         "i168"
                                                         "i166"
                                                         "i164"
                                                         "i162"
                                                         "i160"
                                                         "i158"))
                                                      #(ribcage
                                                        (define-structure
                                                          and-map*)
                                                        ((top) (top))
                                                        ("i61" "i59")))
                                                     (hygiene guile)))
                                              'eval
                                              (syntax-violation
                                                'eval-when
                                                "invalid situation"
                                                #{e\ 1765}#
                                                (#{wrap\ 329}#
                                                  #{x\ 1778}#
                                                  #{w\ 1767}#
                                                  #f))))))
                                      #{situations\ 1776}#))))))
                 (#{f\ 1774}# #{when-list\ 1766}# (quote ())))))
           (#{chi-install-global\ 337}#
             (lambda (#{name\ 1786}# #{e\ 1787}#)
               (#{build-global-definition\ 200}#
                 #f
                 #{name\ 1786}#
                 (if (let ((#{v\ 1792}#
                             (module-variable
                               (current-module)
                               #{name\ 1786}#)))
                       (if #{v\ 1792}#
                         (if (variable-bound? #{v\ 1792}#)
                           (if (macro? (variable-ref #{v\ 1792}#))
                             (not (eq? (macro-type (variable-ref #{v\ 1792}#))
                                       'syncase-macro))
                             #f)
                           #f)
                         #f))
                   (#{build-application\ 184}#
                     #f
                     (#{build-primref\ 208}#
                       #f
                       'make-extended-syncase-macro)
                     (list (#{build-application\ 184}#
                             #f
                             (#{build-primref\ 208}# #f (quote module-ref))
                             (list (#{build-application\ 184}#
                                     #f
                                     (#{build-primref\ 208}#
                                       #f
                                       'current-module)
                                     '())
                                   (#{build-data\ 210}# #f #{name\ 1786}#)))
                           (#{build-data\ 210}# #f (quote macro))
                           (#{build-application\ 184}#
                             #f
                             (#{build-primref\ 208}# #f (quote cons))
                             (list #{e\ 1787}#
                                   (#{build-application\ 184}#
                                     #f
                                     (#{build-primref\ 208}#
                                       #f
                                       'module-name)
                                     (list (#{build-application\ 184}#
                                             #f
                                             (#{build-primref\ 208}#
                                               #f
                                               'current-module)
                                             '())))))))
                   (#{build-application\ 184}#
                     #f
                     (#{build-primref\ 208}#
                       #f
                       'make-syncase-macro)
                     (list (#{build-data\ 210}# #f (quote macro))
                           (#{build-application\ 184}#
                             #f
                             (#{build-primref\ 208}# #f (quote cons))
                             (list #{e\ 1787}#
                                   (#{build-application\ 184}#
                                     #f
                                     (#{build-primref\ 208}#
                                       #f
                                       'module-name)
                                     (list (#{build-application\ 184}#
                                             #f
                                             (#{build-primref\ 208}#
                                               #f
                                               'current-module)
                                             '())))))))))))
           (#{chi-top-sequence\ 335}#
             (lambda (#{body\ 1820}#
                      #{r\ 1821}#
                      #{w\ 1822}#
                      #{s\ 1823}#
                      #{m\ 1824}#
                      #{esew\ 1825}#
                      #{mod\ 1826}#)
               (#{build-sequence\ 212}#
                 #{s\ 1823}#
                 (letrec ((#{dobody\ 1841}#
                            (lambda (#{body\ 1842}#
                                     #{r\ 1843}#
                                     #{w\ 1844}#
                                     #{m\ 1845}#
                                     #{esew\ 1846}#
                                     #{mod\ 1847}#)
                              (if (null? #{body\ 1842}#)
                                '()
                                (let ((#{first\ 1849}#
                                        (#{chi-top\ 343}#
                                          (car #{body\ 1842}#)
                                          #{r\ 1843}#
                                          #{w\ 1844}#
                                          #{m\ 1845}#
                                          #{esew\ 1846}#
                                          #{mod\ 1847}#)))
                                  (cons #{first\ 1849}#
                                        (#{dobody\ 1841}#
                                          (cdr #{body\ 1842}#)
                                          #{r\ 1843}#
                                          #{w\ 1844}#
                                          #{m\ 1845}#
                                          #{esew\ 1846}#
                                          #{mod\ 1847}#)))))))
                   (#{dobody\ 1841}#
                     #{body\ 1820}#
                     #{r\ 1821}#
                     #{w\ 1822}#
                     #{m\ 1824}#
                     #{esew\ 1825}#
                     #{mod\ 1826}#)))))
           (#{chi-sequence\ 333}#
             (lambda (#{body\ 1850}#
                      #{r\ 1851}#
                      #{w\ 1852}#
                      #{s\ 1853}#
                      #{mod\ 1854}#)
               (#{build-sequence\ 212}#
                 #{s\ 1853}#
                 (letrec ((#{dobody\ 1865}#
                            (lambda (#{body\ 1866}#
                                     #{r\ 1867}#
                                     #{w\ 1868}#
                                     #{mod\ 1869}#)
                              (if (null? #{body\ 1866}#)
                                '()
                                (let ((#{first\ 1871}#
                                        (#{chi\ 345}#
                                          (car #{body\ 1866}#)
                                          #{r\ 1867}#
                                          #{w\ 1868}#
                                          #{mod\ 1869}#)))
                                  (cons #{first\ 1871}#
                                        (#{dobody\ 1865}#
                                          (cdr #{body\ 1866}#)
                                          #{r\ 1867}#
                                          #{w\ 1868}#
                                          #{mod\ 1869}#)))))))
                   (#{dobody\ 1865}#
                     #{body\ 1850}#
                     #{r\ 1851}#
                     #{w\ 1852}#
                     #{mod\ 1854}#)))))
           (#{source-wrap\ 331}#
             (lambda (#{x\ 1872}#
                      #{w\ 1873}#
                      #{s\ 1874}#
                      #{defmod\ 1875}#)
               (#{wrap\ 329}#
                 (#{decorate-source\ 180}#
                   #{x\ 1872}#
                   #{s\ 1874}#)
                 #{w\ 1873}#
                 #{defmod\ 1875}#)))
           (#{wrap\ 329}#
             (lambda (#{x\ 1880}# #{w\ 1881}# #{defmod\ 1882}#)
               (if (if (null? (#{wrap-marks\ 267}# #{w\ 1881}#))
                     (null? (#{wrap-subst\ 269}# #{w\ 1881}#))
                     #f)
                 #{x\ 1880}#
                 (if (#{syntax-object?\ 224}# #{x\ 1880}#)
                   (#{make-syntax-object\ 222}#
                     (#{syntax-object-expression\ 226}# #{x\ 1880}#)
                     (#{join-wraps\ 311}#
                       #{w\ 1881}#
                       (#{syntax-object-wrap\ 228}# #{x\ 1880}#))
                     (#{syntax-object-module\ 230}# #{x\ 1880}#))
                   (if (null? #{x\ 1880}#)
                     #{x\ 1880}#
                     (#{make-syntax-object\ 222}#
                       #{x\ 1880}#
                       #{w\ 1881}#
                       #{defmod\ 1882}#))))))
           (#{bound-id-member?\ 327}#
             (lambda (#{x\ 1895}# #{list\ 1896}#)
               (if (not (null? #{list\ 1896}#))
                 (let ((#{t\ 1903}#
                         (#{bound-id=?\ 321}#
                           #{x\ 1895}#
                           (car #{list\ 1896}#))))
                   (if #{t\ 1903}#
                     #{t\ 1903}#
                     (#{bound-id-member?\ 327}#
                       #{x\ 1895}#
                       (cdr #{list\ 1896}#))))
                 #f)))
           (#{distinct-bound-ids?\ 325}#
             (lambda (#{ids\ 1905}#)
               (letrec ((#{distinct?\ 1909}#
                          (lambda (#{ids\ 1910}#)
                            (let ((#{t\ 1913}# (null? #{ids\ 1910}#)))
                              (if #{t\ 1913}#
                                #{t\ 1913}#
                                (if (not (#{bound-id-member?\ 327}#
                                           (car #{ids\ 1910}#)
                                           (cdr #{ids\ 1910}#)))
                                  (#{distinct?\ 1909}# (cdr #{ids\ 1910}#))
                                  #f))))))
                 (#{distinct?\ 1909}# #{ids\ 1905}#))))
           (#{valid-bound-ids?\ 323}#
             (lambda (#{ids\ 1917}#)
               (if (letrec ((#{all-ids?\ 1922}#
                              (lambda (#{ids\ 1923}#)
                                (let ((#{t\ 1926}# (null? #{ids\ 1923}#)))
                                  (if #{t\ 1926}#
                                    #{t\ 1926}#
                                    (if (#{id?\ 260}# (car #{ids\ 1923}#))
                                      (#{all-ids?\ 1922}# (cdr #{ids\ 1923}#))
                                      #f))))))
                     (#{all-ids?\ 1922}# #{ids\ 1917}#))
                 (#{distinct-bound-ids?\ 325}# #{ids\ 1917}#)
                 #f)))
           (#{bound-id=?\ 321}#
             (lambda (#{i\ 1931}# #{j\ 1932}#)
               (if (if (#{syntax-object?\ 224}# #{i\ 1931}#)
                     (#{syntax-object?\ 224}# #{j\ 1932}#)
                     #f)
                 (if (eq? (#{syntax-object-expression\ 226}# #{i\ 1931}#)
                          (#{syntax-object-expression\ 226}# #{j\ 1932}#))
                   (#{same-marks?\ 315}#
                     (#{wrap-marks\ 267}#
                       (#{syntax-object-wrap\ 228}# #{i\ 1931}#))
                     (#{wrap-marks\ 267}#
                       (#{syntax-object-wrap\ 228}# #{j\ 1932}#)))
                   #f)
                 (eq? #{i\ 1931}# #{j\ 1932}#))))
           (#{free-id=?\ 319}#
             (lambda (#{i\ 1939}# #{j\ 1940}#)
               (if (eq? (let ((#{x\ 1946}# #{i\ 1939}#))
                          (if (#{syntax-object?\ 224}# #{x\ 1946}#)
                            (#{syntax-object-expression\ 226}# #{x\ 1946}#)
                            #{x\ 1946}#))
                        (let ((#{x\ 1949}# #{j\ 1940}#))
                          (if (#{syntax-object?\ 224}# #{x\ 1949}#)
                            (#{syntax-object-expression\ 226}# #{x\ 1949}#)
                            #{x\ 1949}#)))
                 (eq? (#{id-var-name\ 317}# #{i\ 1939}# (quote (())))
                      (#{id-var-name\ 317}# #{j\ 1940}# (quote (()))))
                 #f)))
           (#{id-var-name\ 317}#
             (lambda (#{id\ 1953}# #{w\ 1954}#)
               (letrec ((#{search-vector-rib\ 1963}#
                          (lambda (#{sym\ 1975}#
                                   #{subst\ 1976}#
                                   #{marks\ 1977}#
                                   #{symnames\ 1978}#
                                   #{ribcage\ 1979}#)
                            (let ((#{n\ 1986}#
                                    (vector-length #{symnames\ 1978}#)))
                              (letrec ((#{f\ 1989}#
                                         (lambda (#{i\ 1990}#)
                                           (if (#{fx=\ 167}#
                                                 #{i\ 1990}#
                                                 #{n\ 1986}#)
                                             (#{search\ 1959}#
                                               #{sym\ 1975}#
                                               (cdr #{subst\ 1976}#)
                                               #{marks\ 1977}#)
                                             (if (if (eq? (vector-ref
                                                            #{symnames\ 1978}#
                                                            #{i\ 1990}#)
                                                          #{sym\ 1975}#)
                                                   (#{same-marks?\ 315}#
                                                     #{marks\ 1977}#
                                                     (vector-ref
                                                       (#{ribcage-marks\ 287}#
                                                         #{ribcage\ 1979}#)
                                                       #{i\ 1990}#))
                                                   #f)
                                               (values
                                                 (vector-ref
                                                   (#{ribcage-labels\ 289}#
                                                     #{ribcage\ 1979}#)
                                                   #{i\ 1990}#)
                                                 #{marks\ 1977}#)
                                               (#{f\ 1989}#
                                                 (#{fx+\ 163}#
                                                   #{i\ 1990}#
                                                   1)))))))
                                (#{f\ 1989}# 0)))))
                        (#{search-list-rib\ 1961}#
                          (lambda (#{sym\ 1998}#
                                   #{subst\ 1999}#
                                   #{marks\ 2000}#
                                   #{symnames\ 2001}#
                                   #{ribcage\ 2002}#)
                            (letrec ((#{f\ 2011}#
                                       (lambda (#{symnames\ 2012}# #{i\ 2013}#)
                                         (if (null? #{symnames\ 2012}#)
                                           (#{search\ 1959}#
                                             #{sym\ 1998}#
                                             (cdr #{subst\ 1999}#)
                                             #{marks\ 2000}#)
                                           (if (if (eq? (car #{symnames\ 2012}#)
                                                        #{sym\ 1998}#)
                                                 (#{same-marks?\ 315}#
                                                   #{marks\ 2000}#
                                                   (list-ref
                                                     (#{ribcage-marks\ 287}#
                                                       #{ribcage\ 2002}#)
                                                     #{i\ 2013}#))
                                                 #f)
                                             (values
                                               (list-ref
                                                 (#{ribcage-labels\ 289}#
                                                   #{ribcage\ 2002}#)
                                                 #{i\ 2013}#)
                                               #{marks\ 2000}#)
                                             (#{f\ 2011}#
                                               (cdr #{symnames\ 2012}#)
                                               (#{fx+\ 163}#
                                                 #{i\ 2013}#
                                                 1)))))))
                              (#{f\ 2011}# #{symnames\ 2001}# 0))))
                        (#{search\ 1959}#
                          (lambda (#{sym\ 2021}#
                                   #{subst\ 2022}#
                                   #{marks\ 2023}#)
                            (if (null? #{subst\ 2022}#)
                              (values #f #{marks\ 2023}#)
                              (let ((#{fst\ 2028}# (car #{subst\ 2022}#)))
                                (if (eq? #{fst\ 2028}# (quote shift))
                                  (#{search\ 1959}#
                                    #{sym\ 2021}#
                                    (cdr #{subst\ 2022}#)
                                    (cdr #{marks\ 2023}#))
                                  (let ((#{symnames\ 2030}#
                                          (#{ribcage-symnames\ 285}#
                                            #{fst\ 2028}#)))
                                    (if (vector? #{symnames\ 2030}#)
                                      (#{search-vector-rib\ 1963}#
                                        #{sym\ 2021}#
                                        #{subst\ 2022}#
                                        #{marks\ 2023}#
                                        #{symnames\ 2030}#
                                        #{fst\ 2028}#)
                                      (#{search-list-rib\ 1961}#
                                        #{sym\ 2021}#
                                        #{subst\ 2022}#
                                        #{marks\ 2023}#
                                        #{symnames\ 2030}#
                                        #{fst\ 2028}#)))))))))
                 (if (symbol? #{id\ 1953}#)
                   (let ((#{t\ 2033}#
                           (call-with-values
                             (lambda ()
                               (#{search\ 1959}#
                                 #{id\ 1953}#
                                 (#{wrap-subst\ 269}# #{w\ 1954}#)
                                 (#{wrap-marks\ 267}# #{w\ 1954}#)))
                             (lambda (#{x\ 2035}# . #{ignore\ 2036}#)
                               #{x\ 2035}#))))
                     (if #{t\ 2033}# #{t\ 2033}# #{id\ 1953}#))
                   (if (#{syntax-object?\ 224}# #{id\ 1953}#)
                     (let ((#{id\ 2044}#
                             (#{syntax-object-expression\ 226}# #{id\ 1953}#))
                           (#{w1\ 2045}#
                             (#{syntax-object-wrap\ 228}# #{id\ 1953}#)))
                       (let ((#{marks\ 2047}#
                               (#{join-marks\ 313}#
                                 (#{wrap-marks\ 267}# #{w\ 1954}#)
                                 (#{wrap-marks\ 267}# #{w1\ 2045}#))))
                         (call-with-values
                           (lambda ()
                             (#{search\ 1959}#
                               #{id\ 2044}#
                               (#{wrap-subst\ 269}# #{w\ 1954}#)
                               #{marks\ 2047}#))
                           (lambda (#{new-id\ 2048}# #{marks\ 2049}#)
                             (let ((#{t\ 2054}# #{new-id\ 2048}#))
                               (if #{t\ 2054}#
                                 #{t\ 2054}#
                                 (let ((#{t\ 2057}#
                                         (call-with-values
                                           (lambda ()
                                             (#{search\ 1959}#
                                               #{id\ 2044}#
                                               (#{wrap-subst\ 269}#
                                                 #{w1\ 2045}#)
                                               #{marks\ 2049}#))
                                           (lambda (#{x\ 2059}#
                                                    .
                                                    #{ignore\ 2060}#)
                                             #{x\ 2059}#))))
                                   (if #{t\ 2057}#
                                     #{t\ 2057}#
                                     #{id\ 2044}#))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 1953}#))))))
           (#{same-marks?\ 315}#
             (lambda (#{x\ 2065}# #{y\ 2066}#)
               (let ((#{t\ 2071}# (eq? #{x\ 2065}# #{y\ 2066}#)))
                 (if #{t\ 2071}#
                   #{t\ 2071}#
                   (if (not (null? #{x\ 2065}#))
                     (if (not (null? #{y\ 2066}#))
                       (if (eq? (car #{x\ 2065}#) (car #{y\ 2066}#))
                         (#{same-marks?\ 315}#
                           (cdr #{x\ 2065}#)
                           (cdr #{y\ 2066}#))
                         #f)
                       #f)
                     #f)))))
           (#{join-marks\ 313}#
             (lambda (#{m1\ 2077}# #{m2\ 2078}#)
               (#{smart-append\ 309}# #{m1\ 2077}# #{m2\ 2078}#)))
           (#{join-wraps\ 311}#
             (lambda (#{w1\ 2081}# #{w2\ 2082}#)
               (let ((#{m1\ 2087}# (#{wrap-marks\ 267}# #{w1\ 2081}#))
                     (#{s1\ 2088}# (#{wrap-subst\ 269}# #{w1\ 2081}#)))
                 (if (null? #{m1\ 2087}#)
                   (if (null? #{s1\ 2088}#)
                     #{w2\ 2082}#
                     (#{make-wrap\ 265}#
                       (#{wrap-marks\ 267}# #{w2\ 2082}#)
                       (#{smart-append\ 309}#
                         #{s1\ 2088}#
                         (#{wrap-subst\ 269}# #{w2\ 2082}#))))
                   (#{make-wrap\ 265}#
                     (#{smart-append\ 309}#
                       #{m1\ 2087}#
                       (#{wrap-marks\ 267}# #{w2\ 2082}#))
                     (#{smart-append\ 309}#
                       #{s1\ 2088}#
                       (#{wrap-subst\ 269}# #{w2\ 2082}#)))))))
           (#{smart-append\ 309}#
             (lambda (#{m1\ 2089}# #{m2\ 2090}#)
               (if (null? #{m2\ 2090}#)
                 #{m1\ 2089}#
                 (append #{m1\ 2089}# #{m2\ 2090}#))))
           (#{make-binding-wrap\ 307}#
             (lambda (#{ids\ 2093}# #{labels\ 2094}# #{w\ 2095}#)
               (if (null? #{ids\ 2093}#)
                 #{w\ 2095}#
                 (#{make-wrap\ 265}#
                   (#{wrap-marks\ 267}# #{w\ 2095}#)
                   (cons (let ((#{labelvec\ 2100}#
                                 (list->vector #{labels\ 2094}#)))
                           (let ((#{n\ 2102}#
                                   (vector-length #{labelvec\ 2100}#)))
                             (let ((#{symnamevec\ 2105}#
                                     (make-vector #{n\ 2102}#))
                                   (#{marksvec\ 2106}#
                                     (make-vector #{n\ 2102}#)))
                               (begin
                                 (letrec ((#{f\ 2110}#
                                            (lambda (#{ids\ 2111}# #{i\ 2112}#)
                                              (if (not (null? #{ids\ 2111}#))
                                                (call-with-values
                                                  (lambda ()
                                                    (#{id-sym-name&marks\ 263}#
                                                      (car #{ids\ 2111}#)
                                                      #{w\ 2095}#))
                                                  (lambda (#{symname\ 2113}#
                                                           #{marks\ 2114}#)
                                                    (begin
                                                      (vector-set!
                                                        #{symnamevec\ 2105}#
                                                        #{i\ 2112}#
                                                        #{symname\ 2113}#)
                                                      (vector-set!
                                                        #{marksvec\ 2106}#
                                                        #{i\ 2112}#
                                                        #{marks\ 2114}#)
                                                      (#{f\ 2110}#
                                                        (cdr #{ids\ 2111}#)
                                                        (#{fx+\ 163}#
                                                          #{i\ 2112}#
                                                          1)))))))))
                                   (#{f\ 2110}# #{ids\ 2093}# 0))
                                 (#{make-ribcage\ 281}#
                                   #{symnamevec\ 2105}#
                                   #{marksvec\ 2106}#
                                   #{labelvec\ 2100}#)))))
                         (#{wrap-subst\ 269}# #{w\ 2095}#))))))
           (#{extend-ribcage!\ 305}#
             (lambda (#{ribcage\ 2117}# #{id\ 2118}# #{label\ 2119}#)
               (begin
                 (#{set-ribcage-symnames!\ 291}#
                   #{ribcage\ 2117}#
                   (cons (#{syntax-object-expression\ 226}# #{id\ 2118}#)
                         (#{ribcage-symnames\ 285}# #{ribcage\ 2117}#)))
                 (#{set-ribcage-marks!\ 293}#
                   #{ribcage\ 2117}#
                   (cons (#{wrap-marks\ 267}#
                           (#{syntax-object-wrap\ 228}# #{id\ 2118}#))
                         (#{ribcage-marks\ 287}# #{ribcage\ 2117}#)))
                 (#{set-ribcage-labels!\ 295}#
                   #{ribcage\ 2117}#
                   (cons #{label\ 2119}#
                         (#{ribcage-labels\ 289}# #{ribcage\ 2117}#))))))
           (#{anti-mark\ 301}#
             (lambda (#{w\ 2123}#)
               (#{make-wrap\ 265}#
                 (cons #f (#{wrap-marks\ 267}# #{w\ 2123}#))
                 (cons 'shift
                       (#{wrap-subst\ 269}# #{w\ 2123}#)))))
           (#{set-ribcage-labels!\ 295}#
             (lambda (#{x\ 2126}# #{update\ 2127}#)
               (vector-set! #{x\ 2126}# 3 #{update\ 2127}#)))
           (#{set-ribcage-marks!\ 293}#
             (lambda (#{x\ 2130}# #{update\ 2131}#)
               (vector-set! #{x\ 2130}# 2 #{update\ 2131}#)))
           (#{set-ribcage-symnames!\ 291}#
             (lambda (#{x\ 2134}# #{update\ 2135}#)
               (vector-set! #{x\ 2134}# 1 #{update\ 2135}#)))
           (#{ribcage-labels\ 289}#
             (lambda (#{x\ 2138}#) (vector-ref #{x\ 2138}# 3)))
           (#{ribcage-marks\ 287}#
             (lambda (#{x\ 2140}#) (vector-ref #{x\ 2140}# 2)))
           (#{ribcage-symnames\ 285}#
             (lambda (#{x\ 2142}#) (vector-ref #{x\ 2142}# 1)))
           (#{ribcage?\ 283}#
             (lambda (#{x\ 2144}#)
               (if (vector? #{x\ 2144}#)
                 (if (= (vector-length #{x\ 2144}#) 4)
                   (eq? (vector-ref #{x\ 2144}# 0) (quote ribcage))
                   #f)
                 #f)))
           (#{make-ribcage\ 281}#
             (lambda (#{symnames\ 2149}#
                      #{marks\ 2150}#
                      #{labels\ 2151}#)
               (vector
                 'ribcage
                 #{symnames\ 2149}#
                 #{marks\ 2150}#
                 #{labels\ 2151}#)))
           (#{gen-labels\ 278}#
             (lambda (#{ls\ 2155}#)
               (if (null? #{ls\ 2155}#)
                 '()
                 (cons (#{gen-label\ 276}#)
                       (#{gen-labels\ 278}# (cdr #{ls\ 2155}#))))))
           (#{gen-label\ 276}#
             (lambda () (symbol->string (gensym "i"))))
           (#{wrap-subst\ 269}# cdr)
           (#{wrap-marks\ 267}# car)
           (#{make-wrap\ 265}# cons)
           (#{id-sym-name&marks\ 263}#
             (lambda (#{x\ 2157}# #{w\ 2158}#)
               (if (#{syntax-object?\ 224}# #{x\ 2157}#)
                 (values
                   (#{syntax-object-expression\ 226}# #{x\ 2157}#)
                   (#{join-marks\ 313}#
                     (#{wrap-marks\ 267}# #{w\ 2158}#)
                     (#{wrap-marks\ 267}#
                       (#{syntax-object-wrap\ 228}# #{x\ 2157}#))))
                 (values
                   #{x\ 2157}#
                   (#{wrap-marks\ 267}# #{w\ 2158}#)))))
           (#{id?\ 260}#
             (lambda (#{x\ 2161}#)
               (if (symbol? #{x\ 2161}#)
                 #t
                 (if (#{syntax-object?\ 224}# #{x\ 2161}#)
                   (symbol?
                     (#{syntax-object-expression\ 226}# #{x\ 2161}#))
                   #f))))
           (#{nonsymbol-id?\ 258}#
             (lambda (#{x\ 2168}#)
               (if (#{syntax-object?\ 224}# #{x\ 2168}#)
                 (symbol?
                   (#{syntax-object-expression\ 226}# #{x\ 2168}#))
                 #f)))
           (#{global-extend\ 256}#
             (lambda (#{type\ 2172}# #{sym\ 2173}# #{val\ 2174}#)
               (#{put-global-definition-hook\ 176}#
                 #{sym\ 2173}#
                 #{type\ 2172}#
                 #{val\ 2174}#)))
           (#{lookup\ 254}#
             (lambda (#{x\ 2178}# #{r\ 2179}# #{mod\ 2180}#)
               (let ((#{t\ 2186}# (assq #{x\ 2178}# #{r\ 2179}#)))
                 (if #{t\ 2186}#
                   (cdr #{t\ 2186}#)
                   (if (symbol? #{x\ 2178}#)
                     (let ((#{t\ 2192}#
                             (#{get-global-definition-hook\ 178}#
                               #{x\ 2178}#
                               #{mod\ 2180}#)))
                       (if #{t\ 2192}# #{t\ 2192}# (quote (global))))
                     '(displaced-lexical))))))
           (#{macros-only-env\ 252}#
             (lambda (#{r\ 2197}#)
               (if (null? #{r\ 2197}#)
                 '()
                 (let ((#{a\ 2200}# (car #{r\ 2197}#)))
                   (if (eq? (cadr #{a\ 2200}#) (quote macro))
                     (cons #{a\ 2200}#
                           (#{macros-only-env\ 252}# (cdr #{r\ 2197}#)))
                     (#{macros-only-env\ 252}# (cdr #{r\ 2197}#)))))))
           (#{extend-var-env\ 250}#
             (lambda (#{labels\ 2201}# #{vars\ 2202}# #{r\ 2203}#)
               (if (null? #{labels\ 2201}#)
                 #{r\ 2203}#
                 (#{extend-var-env\ 250}#
                   (cdr #{labels\ 2201}#)
                   (cdr #{vars\ 2202}#)
                   (cons (cons (car #{labels\ 2201}#)
                               (cons (quote lexical) (car #{vars\ 2202}#)))
                         #{r\ 2203}#)))))
           (#{extend-env\ 248}#
             (lambda (#{labels\ 2208}# #{bindings\ 2209}# #{r\ 2210}#)
               (if (null? #{labels\ 2208}#)
                 #{r\ 2210}#
                 (#{extend-env\ 248}#
                   (cdr #{labels\ 2208}#)
                   (cdr #{bindings\ 2209}#)
                   (cons (cons (car #{labels\ 2208}#)
                               (car #{bindings\ 2209}#))
                         #{r\ 2210}#)))))
           (#{binding-value\ 245}# cdr)
           (#{binding-type\ 243}# car)
           (#{source-annotation\ 239}#
             (lambda (#{x\ 2214}#)
               (if (#{syntax-object?\ 224}# #{x\ 2214}#)
                 (#{source-annotation\ 239}#
                   (#{syntax-object-expression\ 226}# #{x\ 2214}#))
                 (if (pair? #{x\ 2214}#)
                   (let ((#{props\ 2221}# (source-properties #{x\ 2214}#)))
                     (if (pair? #{props\ 2221}#) #{props\ 2221}# #f))
                   #f))))
           (#{set-syntax-object-module!\ 236}#
             (lambda (#{x\ 2223}# #{update\ 2224}#)
               (vector-set! #{x\ 2223}# 3 #{update\ 2224}#)))
           (#{set-syntax-object-wrap!\ 234}#
             (lambda (#{x\ 2227}# #{update\ 2228}#)
               (vector-set! #{x\ 2227}# 2 #{update\ 2228}#)))
           (#{set-syntax-object-expression!\ 232}#
             (lambda (#{x\ 2231}# #{update\ 2232}#)
               (vector-set! #{x\ 2231}# 1 #{update\ 2232}#)))
           (#{syntax-object-module\ 230}#
             (lambda (#{x\ 2235}#) (vector-ref #{x\ 2235}# 3)))
           (#{syntax-object-wrap\ 228}#
             (lambda (#{x\ 2237}#) (vector-ref #{x\ 2237}# 2)))
           (#{syntax-object-expression\ 226}#
             (lambda (#{x\ 2239}#) (vector-ref #{x\ 2239}# 1)))
           (#{syntax-object?\ 224}#
             (lambda (#{x\ 2241}#)
               (if (vector? #{x\ 2241}#)
                 (if (= (vector-length #{x\ 2241}#) 4)
                   (eq? (vector-ref #{x\ 2241}# 0)
                        'syntax-object)
                   #f)
                 #f)))
           (#{make-syntax-object\ 222}#
             (lambda (#{expression\ 2246}#
                      #{wrap\ 2247}#
                      #{module\ 2248}#)
               (vector
                 'syntax-object
                 #{expression\ 2246}#
                 #{wrap\ 2247}#
                 #{module\ 2248}#)))
           (#{build-letrec\ 218}#
             (lambda (#{src\ 2252}#
                      #{ids\ 2253}#
                      #{vars\ 2254}#
                      #{val-exps\ 2255}#
                      #{body-exp\ 2256}#)
               (if (null? #{vars\ 2254}#)
                 #{body-exp\ 2256}#
                 (let ((#{atom-key\ 2264}# (fluid-ref #{*mode*\ 161}#)))
                   (if (memv #{atom-key\ 2264}# (quote (c)))
                     (begin
                       (for-each
                         #{maybe-name-value!\ 198}#
                         #{ids\ 2253}#
                         #{val-exps\ 2255}#)
                       ((@ (language tree-il) make-letrec)
                        #{src\ 2252}#
                        #{ids\ 2253}#
                        #{vars\ 2254}#
                        #{val-exps\ 2255}#
                        #{body-exp\ 2256}#))
                     (#{decorate-source\ 180}#
                       (list 'letrec
                             (map list #{vars\ 2254}# #{val-exps\ 2255}#)
                             #{body-exp\ 2256}#)
                       #{src\ 2252}#))))))
           (#{build-named-let\ 216}#
             (lambda (#{src\ 2268}#
                      #{ids\ 2269}#
                      #{vars\ 2270}#
                      #{val-exps\ 2271}#
                      #{body-exp\ 2272}#)
               (let ((#{f\ 2282}# (car #{vars\ 2270}#))
                     (#{f-name\ 2283}# (car #{ids\ 2269}#))
                     (#{vars\ 2284}# (cdr #{vars\ 2270}#))
                     (#{ids\ 2285}# (cdr #{ids\ 2269}#)))
                 (let ((#{atom-key\ 2288}# (fluid-ref #{*mode*\ 161}#)))
                   (if (memv #{atom-key\ 2288}# (quote (c)))
                     (let ((#{proc\ 2291}#
                             (#{build-simple-lambda\ 202}#
                               #{src\ 2268}#
                               #{ids\ 2285}#
                               #f
                               #{vars\ 2284}#
                               #f
                               #{body-exp\ 2272}#)))
                       (begin
                         (#{maybe-name-value!\ 198}#
                           #{f-name\ 2283}#
                           #{proc\ 2291}#)
                         (for-each
                           #{maybe-name-value!\ 198}#
                           #{ids\ 2285}#
                           #{val-exps\ 2271}#)
                         ((@ (language tree-il) make-letrec)
                          #{src\ 2268}#
                          (list #{f-name\ 2283}#)
                          (list #{f\ 2282}#)
                          (list #{proc\ 2291}#)
                          (#{build-application\ 184}#
                            #{src\ 2268}#
                            (#{build-lexical-reference\ 188}#
                              'fun
                              #{src\ 2268}#
                              #{f-name\ 2283}#
                              #{f\ 2282}#)
                            #{val-exps\ 2271}#))))
                     (#{decorate-source\ 180}#
                       (list 'letrec
                             (list (list #{f\ 2282}#
                                         (list 'lambda
                                               #{vars\ 2284}#
                                               #{body-exp\ 2272}#)))
                             (cons #{f\ 2282}# #{val-exps\ 2271}#))
                       #{src\ 2268}#))))))
           (#{build-let\ 214}#
             (lambda (#{src\ 2294}#
                      #{ids\ 2295}#
                      #{vars\ 2296}#
                      #{val-exps\ 2297}#
                      #{body-exp\ 2298}#)
               (if (null? #{vars\ 2296}#)
                 #{body-exp\ 2298}#
                 (let ((#{atom-key\ 2306}# (fluid-ref #{*mode*\ 161}#)))
                   (if (memv #{atom-key\ 2306}# (quote (c)))
                     (begin
                       (for-each
                         #{maybe-name-value!\ 198}#
                         #{ids\ 2295}#
                         #{val-exps\ 2297}#)
                       ((@ (language tree-il) make-let)
                        #{src\ 2294}#
                        #{ids\ 2295}#
                        #{vars\ 2296}#
                        #{val-exps\ 2297}#
                        #{body-exp\ 2298}#))
                     (#{decorate-source\ 180}#
                       (list 'let
                             (map list #{vars\ 2296}# #{val-exps\ 2297}#)
                             #{body-exp\ 2298}#)
                       #{src\ 2294}#))))))
           (#{build-sequence\ 212}#
             (lambda (#{src\ 2310}# #{exps\ 2311}#)
               (if (null? (cdr #{exps\ 2311}#))
                 (car #{exps\ 2311}#)
                 (let ((#{atom-key\ 2316}# (fluid-ref #{*mode*\ 161}#)))
                   (if (memv #{atom-key\ 2316}# (quote (c)))
                     ((@ (language tree-il) make-sequence)
                      #{src\ 2310}#
                      #{exps\ 2311}#)
                     (#{decorate-source\ 180}#
                       (cons (quote begin) #{exps\ 2311}#)
                       #{src\ 2310}#))))))
           (#{build-data\ 210}#
             (lambda (#{src\ 2320}# #{exp\ 2321}#)
               (let ((#{atom-key\ 2326}# (fluid-ref #{*mode*\ 161}#)))
                 (if (memv #{atom-key\ 2326}# (quote (c)))
                   ((@ (language tree-il) make-const)
                    #{src\ 2320}#
                    #{exp\ 2321}#)
                   (#{decorate-source\ 180}#
                     (if (if (self-evaluating? #{exp\ 2321}#)
                           (not (vector? #{exp\ 2321}#))
                           #f)
                       #{exp\ 2321}#
                       (list (quote quote) #{exp\ 2321}#))
                     #{src\ 2320}#)))))
           (#{build-primref\ 208}#
             (lambda (#{src\ 2331}# #{name\ 2332}#)
               (if (equal?
                     (module-name (current-module))
                     '(guile))
                 (let ((#{atom-key\ 2337}# (fluid-ref #{*mode*\ 161}#)))
                   (if (memv #{atom-key\ 2337}# (quote (c)))
                     ((@ (language tree-il) make-toplevel-ref)
                      #{src\ 2331}#
                      #{name\ 2332}#)
                     (#{decorate-source\ 180}#
                       #{name\ 2332}#
                       #{src\ 2331}#)))
                 (let ((#{atom-key\ 2342}# (fluid-ref #{*mode*\ 161}#)))
                   (if (memv #{atom-key\ 2342}# (quote (c)))
                     ((@ (language tree-il) make-module-ref)
                      #{src\ 2331}#
                      '(guile)
                      #{name\ 2332}#
                      #f)
                     (#{decorate-source\ 180}#
                       (list (quote @@) (quote (guile)) #{name\ 2332}#)
                       #{src\ 2331}#))))))
           (#{build-lambda-case\ 206}#
             (lambda (#{src\ 2346}#
                      #{req\ 2347}#
                      #{opt\ 2348}#
                      #{rest\ 2349}#
                      #{kw\ 2350}#
                      #{inits\ 2351}#
                      #{vars\ 2352}#
                      #{body\ 2353}#
                      #{else-case\ 2354}#)
               (let ((#{atom-key\ 2366}# (fluid-ref #{*mode*\ 161}#)))
                 (if (memv #{atom-key\ 2366}# (quote (c)))
                   ((@ (language tree-il) make-lambda-case)
                    #{src\ 2346}#
                    #{req\ 2347}#
                    #{opt\ 2348}#
                    #{rest\ 2349}#
                    #{kw\ 2350}#
                    #{inits\ 2351}#
                    #{vars\ 2352}#
                    #{body\ 2353}#
                    #{else-case\ 2354}#)
                   (let ((#{nreq\ 2371}# (length #{req\ 2347}#)))
                     (let ((#{nopt\ 2373}#
                             (if #{opt\ 2348}# (length #{opt\ 2348}#) 0)))
                       (let ((#{rest-idx\ 2375}#
                               (if #{rest\ 2349}#
                                 (+ #{nreq\ 2371}# #{nopt\ 2373}#)
                                 #f)))
                         (let ((#{allow-other-keys?\ 2379}#
                                 (if #{kw\ 2350}# (car #{kw\ 2350}#) #f)))
                           (let ((#{kw-indices\ 2381}#
                                   (map (lambda (#{x\ 2382}#)
                                          (cons (car #{x\ 2382}#)
                                                (list-index
                                                  #{vars\ 2352}#
                                                  (caddr #{x\ 2382}#))))
                                        (if #{kw\ 2350}#
                                          (cdr #{kw\ 2350}#)
                                          '()))))
                             (let ((#{nargs\ 2385}#
                                     (apply max
                                            (+ #{nreq\ 2371}#
                                               #{nopt\ 2373}#
                                               (if #{rest\ 2349}# 1 0))
                                            (map 1+
                                                 (map cdr
                                                      #{kw-indices\ 2381}#)))))
                               (begin
                                 (let ((#{t\ 2388}#
                                         (= #{nargs\ 2385}#
                                            (length #{vars\ 2352}#)
                                            (+ #{nreq\ 2371}#
                                               (length #{inits\ 2351}#)
                                               (if #{rest\ 2349}# 1 0)))))
                                   (if #{t\ 2388}#
                                     #{t\ 2388}#
                                     (error "something went wrong"
                                            #{req\ 2347}#
                                            #{opt\ 2348}#
                                            #{rest\ 2349}#
                                            #{kw\ 2350}#
                                            #{inits\ 2351}#
                                            #{vars\ 2352}#
                                            #{nreq\ 2371}#
                                            #{nopt\ 2373}#
                                            #{kw-indices\ 2381}#
                                            #{nargs\ 2385}#)))
                                 (#{decorate-source\ 180}#
                                   (cons (list (cons '(@@ (ice-9 optargs)
                                                          parse-lambda-case)
                                                     (cons (list 'quote
                                                                 (list #{nreq\ 2371}#
                                                                       #{nopt\ 2373}#
                                                                       #{rest-idx\ 2375}#
                                                                       #{nargs\ 2385}#
                                                                       #{allow-other-keys?\ 2379}#
                                                                       #{kw-indices\ 2381}#))
                                                           (cons (cons 'list
                                                                       (map (lambda (#{i\ 2391}#)
                                                                              (list 'lambda
                                                                                    #{vars\ 2352}#
                                                                                    #{i\ 2391}#))
                                                                            #{inits\ 2351}#))
                                                                 '(%%args))))
                                               '=>
                                               (list 'lambda
                                                     '(%%args)
                                                     (cons 'apply
                                                           (cons (list 'lambda
                                                                       #{vars\ 2352}#
                                                                       #{body\ 2353}#)
                                                                 '(%%args)))))
                                         (let ((#{t\ 2396}#
                                                 #{else-case\ 2354}#))
                                           (if #{t\ 2396}#
                                             #{t\ 2396}#
                                             '((%%args
                                                 (scm-error
                                                   'wrong-number-of-args
                                                   #f
                                                   "Wrong number of arguments"
                                                   '()
                                                   %%args))))))
                                   #{src\ 2346}#))))))))))))
           (#{build-case-lambda\ 204}#
             (lambda (#{src\ 2399}#
                      #{docstring\ 2400}#
                      #{body\ 2401}#)
               (let ((#{atom-key\ 2407}# (fluid-ref #{*mode*\ 161}#)))
                 (if (memv #{atom-key\ 2407}# (quote (c)))
                   ((@ (language tree-il) make-lambda)
                    #{src\ 2399}#
                    (if #{docstring\ 2400}#
                      (list (cons (quote documentation) #{docstring\ 2400}#))
                      '())
                    #{body\ 2401}#)
                   (#{decorate-source\ 180}#
                     (cons 'lambda
                           (cons '%%args
                                 (append
                                   (if #{docstring\ 2400}#
                                     (list #{docstring\ 2400}#)
                                     '())
                                   (list (cons (quote cond) #{body\ 2401}#)))))
                     #{src\ 2399}#)))))
           (#{build-simple-lambda\ 202}#
             (lambda (#{src\ 2412}#
                      #{req\ 2413}#
                      #{rest\ 2414}#
                      #{vars\ 2415}#
                      #{docstring\ 2416}#
                      #{exp\ 2417}#)
               (let ((#{atom-key\ 2426}# (fluid-ref #{*mode*\ 161}#)))
                 (if (memv #{atom-key\ 2426}# (quote (c)))
                   ((@ (language tree-il) make-lambda)
                    #{src\ 2412}#
                    (if #{docstring\ 2416}#
                      (list (cons (quote documentation) #{docstring\ 2416}#))
                      '())
                    ((@ (language tree-il) make-lambda-case)
                     #{src\ 2412}#
                     #{req\ 2413}#
                     #f
                     #{rest\ 2414}#
                     #f
                     '()
                     #{vars\ 2415}#
                     #{exp\ 2417}#
                     #f))
                   (#{decorate-source\ 180}#
                     (cons 'lambda
                           (cons (if #{rest\ 2414}#
                                   (apply cons* #{vars\ 2415}#)
                                   #{vars\ 2415}#)
                                 (append
                                   (if #{docstring\ 2416}#
                                     (list #{docstring\ 2416}#)
                                     '())
                                   (list #{exp\ 2417}#))))
                     #{src\ 2412}#)))))
           (#{build-global-definition\ 200}#
             (lambda (#{source\ 2431}# #{var\ 2432}# #{exp\ 2433}#)
               (let ((#{atom-key\ 2439}# (fluid-ref #{*mode*\ 161}#)))
                 (if (memv #{atom-key\ 2439}# (quote (c)))
                   (begin
                     (#{maybe-name-value!\ 198}#
                       #{var\ 2432}#
                       #{exp\ 2433}#)
                     ((@ (language tree-il) make-toplevel-define)
                      #{source\ 2431}#
                      #{var\ 2432}#
                      #{exp\ 2433}#))
                   (#{decorate-source\ 180}#
                     (list (quote define) #{var\ 2432}# #{exp\ 2433}#)
                     #{source\ 2431}#)))))
           (#{maybe-name-value!\ 198}#
             (lambda (#{name\ 2443}# #{val\ 2444}#)
               (if ((@ (language tree-il) lambda?) #{val\ 2444}#)
                 (let ((#{meta\ 2450}#
                         ((@ (language tree-il) lambda-meta)
                          #{val\ 2444}#)))
                   (if (not (assq (quote name) #{meta\ 2450}#))
                     ((setter (@ (language tree-il) lambda-meta))
                      #{val\ 2444}#
                      (acons 'name
                             #{name\ 2443}#
                             #{meta\ 2450}#)))))))
           (#{build-global-assignment\ 196}#
             (lambda (#{source\ 2451}#
                      #{var\ 2452}#
                      #{exp\ 2453}#
                      #{mod\ 2454}#)
               (#{analyze-variable\ 192}#
                 #{mod\ 2454}#
                 #{var\ 2452}#
                 (lambda (#{mod\ 2459}# #{var\ 2460}# #{public?\ 2461}#)
                   (let ((#{atom-key\ 2467}# (fluid-ref #{*mode*\ 161}#)))
                     (if (memv #{atom-key\ 2467}# (quote (c)))
                       ((@ (language tree-il) make-module-set)
                        #{source\ 2451}#
                        #{mod\ 2459}#
                        #{var\ 2460}#
                        #{public?\ 2461}#
                        #{exp\ 2453}#)
                       (#{decorate-source\ 180}#
                         (list 'set!
                               (list (if #{public?\ 2461}#
                                       '@
                                       '@@)
                                     #{mod\ 2459}#
                                     #{var\ 2460}#)
                               #{exp\ 2453}#)
                         #{source\ 2451}#))))
                 (lambda (#{var\ 2471}#)
                   (let ((#{atom-key\ 2475}# (fluid-ref #{*mode*\ 161}#)))
                     (if (memv #{atom-key\ 2475}# (quote (c)))
                       ((@ (language tree-il) make-toplevel-set)
                        #{source\ 2451}#
                        #{var\ 2471}#
                        #{exp\ 2453}#)
                       (#{decorate-source\ 180}#
                         (list (quote set!) #{var\ 2471}# #{exp\ 2453}#)
                         #{source\ 2451}#)))))))
           (#{build-global-reference\ 194}#
             (lambda (#{source\ 2479}# #{var\ 2480}# #{mod\ 2481}#)
               (#{analyze-variable\ 192}#
                 #{mod\ 2481}#
                 #{var\ 2480}#
                 (lambda (#{mod\ 2485}# #{var\ 2486}# #{public?\ 2487}#)
                   (let ((#{atom-key\ 2493}# (fluid-ref #{*mode*\ 161}#)))
                     (if (memv #{atom-key\ 2493}# (quote (c)))
                       ((@ (language tree-il) make-module-ref)
                        #{source\ 2479}#
                        #{mod\ 2485}#
                        #{var\ 2486}#
                        #{public?\ 2487}#)
                       (#{decorate-source\ 180}#
                         (list (if #{public?\ 2487}# (quote @) (quote @@))
                               #{mod\ 2485}#
                               #{var\ 2486}#)
                         #{source\ 2479}#))))
                 (lambda (#{var\ 2496}#)
                   (let ((#{atom-key\ 2500}# (fluid-ref #{*mode*\ 161}#)))
                     (if (memv #{atom-key\ 2500}# (quote (c)))
                       ((@ (language tree-il) make-toplevel-ref)
                        #{source\ 2479}#
                        #{var\ 2496}#)
                       (#{decorate-source\ 180}#
                         #{var\ 2496}#
                         #{source\ 2479}#)))))))
           (#{analyze-variable\ 192}#
             (lambda (#{mod\ 2503}#
                      #{var\ 2504}#
                      #{modref-cont\ 2505}#
                      #{bare-cont\ 2506}#)
               (if (not #{mod\ 2503}#)
                 (#{bare-cont\ 2506}# #{var\ 2504}#)
                 (let ((#{kind\ 2513}# (car #{mod\ 2503}#))
                       (#{mod\ 2514}# (cdr #{mod\ 2503}#)))
                   (if (memv #{kind\ 2513}# (quote (public)))
                     (#{modref-cont\ 2505}#
                       #{mod\ 2514}#
                       #{var\ 2504}#
                       #t)
                     (if (memv #{kind\ 2513}# (quote (private)))
                       (if (not (equal?
                                  #{mod\ 2514}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 2505}#
                           #{mod\ 2514}#
                           #{var\ 2504}#
                           #f)
                         (#{bare-cont\ 2506}# #{var\ 2504}#))
                       (if (memv #{kind\ 2513}# (quote (bare)))
                         (#{bare-cont\ 2506}# #{var\ 2504}#)
                         (if (memv #{kind\ 2513}# (quote (hygiene)))
                           (if (if (not (equal?
                                          #{mod\ 2514}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 2514}#)
                                   #{var\ 2504}#)
                                 #f)
                             (#{modref-cont\ 2505}#
                               #{mod\ 2514}#
                               #{var\ 2504}#
                               #f)
                             (#{bare-cont\ 2506}# #{var\ 2504}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 2504}#
                             #{mod\ 2514}#)))))))))
           (#{build-lexical-assignment\ 190}#
             (lambda (#{source\ 2522}#
                      #{name\ 2523}#
                      #{var\ 2524}#
                      #{exp\ 2525}#)
               (let ((#{atom-key\ 2532}# (fluid-ref #{*mode*\ 161}#)))
                 (if (memv #{atom-key\ 2532}# (quote (c)))
                   ((@ (language tree-il) make-lexical-set)
                    #{source\ 2522}#
                    #{name\ 2523}#
                    #{var\ 2524}#
                    #{exp\ 2525}#)
                   (#{decorate-source\ 180}#
                     (list (quote set!) #{var\ 2524}# #{exp\ 2525}#)
                     #{source\ 2522}#)))))
           (#{build-lexical-reference\ 188}#
             (lambda (#{type\ 2536}#
                      #{source\ 2537}#
                      #{name\ 2538}#
                      #{var\ 2539}#)
               (let ((#{atom-key\ 2546}# (fluid-ref #{*mode*\ 161}#)))
                 (if (memv #{atom-key\ 2546}# (quote (c)))
                   ((@ (language tree-il) make-lexical-ref)
                    #{source\ 2537}#
                    #{name\ 2538}#
                    #{var\ 2539}#)
                   (#{decorate-source\ 180}#
                     #{var\ 2539}#
                     #{source\ 2537}#)))))
           (#{build-conditional\ 186}#
             (lambda (#{source\ 2549}#
                      #{test-exp\ 2550}#
                      #{then-exp\ 2551}#
                      #{else-exp\ 2552}#)
               (let ((#{atom-key\ 2559}# (fluid-ref #{*mode*\ 161}#)))
                 (if (memv #{atom-key\ 2559}# (quote (c)))
                   ((@ (language tree-il) make-conditional)
                    #{source\ 2549}#
                    #{test-exp\ 2550}#
                    #{then-exp\ 2551}#
                    #{else-exp\ 2552}#)
                   (#{decorate-source\ 180}#
                     (if (equal? #{else-exp\ 2552}# (quote (if #f #f)))
                       (list 'if
                             #{test-exp\ 2550}#
                             #{then-exp\ 2551}#)
                       (list 'if
                             #{test-exp\ 2550}#
                             #{then-exp\ 2551}#
                             #{else-exp\ 2552}#))
                     #{source\ 2549}#)))))
           (#{build-application\ 184}#
             (lambda (#{source\ 2564}#
                      #{fun-exp\ 2565}#
                      #{arg-exps\ 2566}#)
               (let ((#{atom-key\ 2572}# (fluid-ref #{*mode*\ 161}#)))
                 (if (memv #{atom-key\ 2572}# (quote (c)))
                   ((@ (language tree-il) make-application)
                    #{source\ 2564}#
                    #{fun-exp\ 2565}#
                    #{arg-exps\ 2566}#)
                   (#{decorate-source\ 180}#
                     (cons #{fun-exp\ 2565}# #{arg-exps\ 2566}#)
                     #{source\ 2564}#)))))
           (#{build-void\ 182}#
             (lambda (#{source\ 2576}#)
               (let ((#{atom-key\ 2580}# (fluid-ref #{*mode*\ 161}#)))
                 (if (memv #{atom-key\ 2580}# (quote (c)))
                   ((@ (language tree-il) make-void)
                    #{source\ 2576}#)
                   (#{decorate-source\ 180}#
                     '(if #f #f)
                     #{source\ 2576}#)))))
           (#{decorate-source\ 180}#
             (lambda (#{e\ 2583}# #{s\ 2584}#)
               (begin
                 (if (if (pair? #{e\ 2583}#) #{s\ 2584}# #f)
                   (set-source-properties! #{e\ 2583}# #{s\ 2584}#))
                 #{e\ 2583}#)))
           (#{get-global-definition-hook\ 178}#
             (lambda (#{symbol\ 2589}# #{module\ 2590}#)
               (begin
                 (if (if (not #{module\ 2590}#) (current-module) #f)
                   (warn "module system is booted, we should have a module"
                         #{symbol\ 2589}#))
                 (let ((#{v\ 2596}#
                         (module-variable
                           (if #{module\ 2590}#
                             (resolve-module (cdr #{module\ 2590}#))
                             (current-module))
                           #{symbol\ 2589}#)))
                   (if #{v\ 2596}#
                     (if (variable-bound? #{v\ 2596}#)
                       (let ((#{val\ 2601}# (variable-ref #{v\ 2596}#)))
                         (if (macro? #{val\ 2601}#)
                           (if (syncase-macro-type #{val\ 2601}#)
                             (cons (syncase-macro-type #{val\ 2601}#)
                                   (syncase-macro-binding #{val\ 2601}#))
                             #f)
                           #f))
                       #f)
                     #f)))))
           (#{put-global-definition-hook\ 176}#
             (lambda (#{symbol\ 2605}# #{type\ 2606}# #{val\ 2607}#)
               (let ((#{existing\ 2612}#
                       (let ((#{v\ 2614}#
                               (module-variable
                                 (current-module)
                                 #{symbol\ 2605}#)))
                         (if #{v\ 2614}#
                           (if (variable-bound? #{v\ 2614}#)
                             (let ((#{val\ 2619}# (variable-ref #{v\ 2614}#)))
                               (if (macro? #{val\ 2619}#)
                                 (if (not (syncase-macro-type #{val\ 2619}#))
                                   #{val\ 2619}#
                                   #f)
                                 #f))
                             #f)
                           #f))))
                 (module-define!
                   (current-module)
                   #{symbol\ 2605}#
                   (if #{existing\ 2612}#
                     (make-extended-syncase-macro
                       #{existing\ 2612}#
                       #{type\ 2606}#
                       #{val\ 2607}#)
                     (make-syncase-macro #{type\ 2606}# #{val\ 2607}#))))))
           (#{local-eval-hook\ 173}#
             (lambda (#{x\ 2623}# #{mod\ 2624}#)
               (primitive-eval
                 (list #{noexpand\ 159}#
                       (let ((#{atom-key\ 2630}# (fluid-ref #{*mode*\ 161}#)))
                         (if (memv #{atom-key\ 2630}# (quote (c)))
                           ((@ (language tree-il) tree-il->scheme)
                            #{x\ 2623}#)
                           #{x\ 2623}#))))))
           (#{top-level-eval-hook\ 171}#
             (lambda (#{x\ 2633}# #{mod\ 2634}#)
               (primitive-eval
                 (list #{noexpand\ 159}#
                       (let ((#{atom-key\ 2640}# (fluid-ref #{*mode*\ 161}#)))
                         (if (memv #{atom-key\ 2640}# (quote (c)))
                           ((@ (language tree-il) tree-il->scheme)
                            #{x\ 2633}#)
                           #{x\ 2633}#))))))
           (#{fx<\ 169}# <)
           (#{fx=\ 167}# =)
           (#{fx-\ 165}# -)
           (#{fx+\ 163}# +)
           (#{*mode*\ 161}# (make-fluid))
           (#{noexpand\ 159}# "noexpand"))
    (begin
      (#{global-extend\ 256}#
        'local-syntax
        'letrec-syntax
        #t)
      (#{global-extend\ 256}#
        'local-syntax
        'let-syntax
        #f)
      (#{global-extend\ 256}#
        'core
        'fluid-let-syntax
        (lambda (#{e\ 2643}#
                 #{r\ 2644}#
                 #{w\ 2645}#
                 #{s\ 2646}#
                 #{mod\ 2647}#)
          ((lambda (#{tmp\ 2653}#)
             ((lambda (#{tmp\ 2654}#)
                (if (if #{tmp\ 2654}#
                      (apply (lambda (#{_\ 2660}#
                                      #{var\ 2661}#
                                      #{val\ 2662}#
                                      #{e1\ 2663}#
                                      #{e2\ 2664}#)
                               (#{valid-bound-ids?\ 323}# #{var\ 2661}#))
                             #{tmp\ 2654}#)
                      #f)
                  (apply (lambda (#{_\ 2671}#
                                  #{var\ 2672}#
                                  #{val\ 2673}#
                                  #{e1\ 2674}#
                                  #{e2\ 2675}#)
                           (let ((#{names\ 2677}#
                                   (map (lambda (#{x\ 2678}#)
                                          (#{id-var-name\ 317}#
                                            #{x\ 2678}#
                                            #{w\ 2645}#))
                                        #{var\ 2672}#)))
                             (begin
                               (for-each
                                 (lambda (#{id\ 2681}# #{n\ 2682}#)
                                   (let ((#{atom-key\ 2687}#
                                           (#{binding-type\ 243}#
                                             (#{lookup\ 254}#
                                               #{n\ 2682}#
                                               #{r\ 2644}#
                                               #{mod\ 2647}#))))
                                     (if (memv #{atom-key\ 2687}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'fluid-let-syntax
                                         "identifier out of context"
                                         #{e\ 2643}#
                                         (#{source-wrap\ 331}#
                                           #{id\ 2681}#
                                           #{w\ 2645}#
                                           #{s\ 2646}#
                                           #{mod\ 2647}#)))))
                                 #{var\ 2672}#
                                 #{names\ 2677}#)
                               (#{chi-body\ 353}#
                                 (cons #{e1\ 2674}# #{e2\ 2675}#)
                                 (#{source-wrap\ 331}#
                                   #{e\ 2643}#
                                   #{w\ 2645}#
                                   #{s\ 2646}#
                                   #{mod\ 2647}#)
                                 (#{extend-env\ 248}#
                                   #{names\ 2677}#
                                   (let ((#{trans-r\ 2692}#
                                           (#{macros-only-env\ 252}#
                                             #{r\ 2644}#)))
                                     (map (lambda (#{x\ 2693}#)
                                            (cons 'macro
                                                  (#{eval-local-transformer\ 357}#
                                                    (#{chi\ 345}#
                                                      #{x\ 2693}#
                                                      #{trans-r\ 2692}#
                                                      #{w\ 2645}#
                                                      #{mod\ 2647}#)
                                                    #{mod\ 2647}#)))
                                          #{val\ 2673}#))
                                   #{r\ 2644}#)
                                 #{w\ 2645}#
                                 #{mod\ 2647}#))))
                         #{tmp\ 2654}#)
                  ((lambda (#{_\ 2698}#)
                     (syntax-violation
                       'fluid-let-syntax
                       "bad syntax"
                       (#{source-wrap\ 331}#
                         #{e\ 2643}#
                         #{w\ 2645}#
                         #{s\ 2646}#
                         #{mod\ 2647}#)))
                   #{tmp\ 2653}#)))
              ($sc-dispatch
                #{tmp\ 2653}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 2643}#)))
      (#{global-extend\ 256}#
        'core
        'quote
        (lambda (#{e\ 2699}#
                 #{r\ 2700}#
                 #{w\ 2701}#
                 #{s\ 2702}#
                 #{mod\ 2703}#)
          ((lambda (#{tmp\ 2709}#)
             ((lambda (#{tmp\ 2710}#)
                (if #{tmp\ 2710}#
                  (apply (lambda (#{_\ 2713}# #{e\ 2714}#)
                           (#{build-data\ 210}#
                             #{s\ 2702}#
                             (#{strip\ 371}# #{e\ 2714}# #{w\ 2701}#)))
                         #{tmp\ 2710}#)
                  ((lambda (#{_\ 2716}#)
                     (syntax-violation
                       'quote
                       "bad syntax"
                       (#{source-wrap\ 331}#
                         #{e\ 2699}#
                         #{w\ 2701}#
                         #{s\ 2702}#
                         #{mod\ 2703}#)))
                   #{tmp\ 2709}#)))
              ($sc-dispatch #{tmp\ 2709}# (quote (any any)))))
           #{e\ 2699}#)))
      (#{global-extend\ 256}#
        'core
        'syntax
        (letrec ((#{regen\ 2732}#
                   (lambda (#{x\ 2733}#)
                     (let ((#{atom-key\ 2737}# (car #{x\ 2733}#)))
                       (if (memv #{atom-key\ 2737}# (quote (ref)))
                         (#{build-lexical-reference\ 188}#
                           'value
                           #f
                           (cadr #{x\ 2733}#)
                           (cadr #{x\ 2733}#))
                         (if (memv #{atom-key\ 2737}# (quote (primitive)))
                           (#{build-primref\ 208}# #f (cadr #{x\ 2733}#))
                           (if (memv #{atom-key\ 2737}# (quote (quote)))
                             (#{build-data\ 210}# #f (cadr #{x\ 2733}#))
                             (if (memv #{atom-key\ 2737}# (quote (lambda)))
                               (if (list? (cadr #{x\ 2733}#))
                                 (#{build-simple-lambda\ 202}#
                                   #f
                                   (cadr #{x\ 2733}#)
                                   #f
                                   (cadr #{x\ 2733}#)
                                   #f
                                   (#{regen\ 2732}# (caddr #{x\ 2733}#)))
                                 (error "how did we get here" #{x\ 2733}#))
                               (#{build-application\ 184}#
                                 #f
                                 (#{build-primref\ 208}# #f (car #{x\ 2733}#))
                                 (map #{regen\ 2732}#
                                      (cdr #{x\ 2733}#))))))))))
                 (#{gen-vector\ 2730}#
                   (lambda (#{x\ 2749}#)
                     (if (eq? (car #{x\ 2749}#) (quote list))
                       (cons (quote vector) (cdr #{x\ 2749}#))
                       (if (eq? (car #{x\ 2749}#) (quote quote))
                         (list 'quote
                               (list->vector (cadr #{x\ 2749}#)))
                         (list (quote list->vector) #{x\ 2749}#)))))
                 (#{gen-append\ 2728}#
                   (lambda (#{x\ 2759}# #{y\ 2760}#)
                     (if (equal? #{y\ 2760}# (quote (quote ())))
                       #{x\ 2759}#
                       (list (quote append) #{x\ 2759}# #{y\ 2760}#))))
                 (#{gen-cons\ 2726}#
                   (lambda (#{x\ 2764}# #{y\ 2765}#)
                     (let ((#{atom-key\ 2770}# (car #{y\ 2765}#)))
                       (if (memv #{atom-key\ 2770}# (quote (quote)))
                         (if (eq? (car #{x\ 2764}#) (quote quote))
                           (list 'quote
                                 (cons (cadr #{x\ 2764}#) (cadr #{y\ 2765}#)))
                           (if (eq? (cadr #{y\ 2765}#) (quote ()))
                             (list (quote list) #{x\ 2764}#)
                             (list (quote cons) #{x\ 2764}# #{y\ 2765}#)))
                         (if (memv #{atom-key\ 2770}# (quote (list)))
                           (cons 'list
                                 (cons #{x\ 2764}# (cdr #{y\ 2765}#)))
                           (list (quote cons) #{x\ 2764}# #{y\ 2765}#))))))
                 (#{gen-map\ 2724}#
                   (lambda (#{e\ 2779}# #{map-env\ 2780}#)
                     (let ((#{formals\ 2785}# (map cdr #{map-env\ 2780}#))
                           (#{actuals\ 2786}#
                             (map (lambda (#{x\ 2787}#)
                                    (list (quote ref) (car #{x\ 2787}#)))
                                  #{map-env\ 2780}#)))
                       (if (eq? (car #{e\ 2779}#) (quote ref))
                         (car #{actuals\ 2786}#)
                         (if (and-map
                               (lambda (#{x\ 2794}#)
                                 (if (eq? (car #{x\ 2794}#) (quote ref))
                                   (memq (cadr #{x\ 2794}#) #{formals\ 2785}#)
                                   #f))
                               (cdr #{e\ 2779}#))
                           (cons 'map
                                 (cons (list 'primitive
                                             (car #{e\ 2779}#))
                                       (map (let ((#{r\ 2800}#
                                                    (map cons
                                                         #{formals\ 2785}#
                                                         #{actuals\ 2786}#)))
                                              (lambda (#{x\ 2801}#)
                                                (cdr (assq (cadr #{x\ 2801}#)
                                                           #{r\ 2800}#))))
                                            (cdr #{e\ 2779}#))))
                           (cons 'map
                                 (cons (list 'lambda
                                             #{formals\ 2785}#
                                             #{e\ 2779}#)
                                       #{actuals\ 2786}#)))))))
                 (#{gen-mappend\ 2722}#
                   (lambda (#{e\ 2805}# #{map-env\ 2806}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 2724}# #{e\ 2805}# #{map-env\ 2806}#))))
                 (#{gen-ref\ 2720}#
                   (lambda (#{src\ 2810}#
                            #{var\ 2811}#
                            #{level\ 2812}#
                            #{maps\ 2813}#)
                     (if (#{fx=\ 167}# #{level\ 2812}# 0)
                       (values #{var\ 2811}# #{maps\ 2813}#)
                       (if (null? #{maps\ 2813}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 2810}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 2720}#
                               #{src\ 2810}#
                               #{var\ 2811}#
                               (#{fx-\ 165}# #{level\ 2812}# 1)
                               (cdr #{maps\ 2813}#)))
                           (lambda (#{outer-var\ 2818}# #{outer-maps\ 2819}#)
                             (let ((#{b\ 2823}#
                                     (assq #{outer-var\ 2818}#
                                           (car #{maps\ 2813}#))))
                               (if #{b\ 2823}#
                                 (values (cdr #{b\ 2823}#) #{maps\ 2813}#)
                                 (let ((#{inner-var\ 2825}#
                                         (#{gen-var\ 373}# (quote tmp))))
                                   (values
                                     #{inner-var\ 2825}#
                                     (cons (cons (cons #{outer-var\ 2818}#
                                                       #{inner-var\ 2825}#)
                                                 (car #{maps\ 2813}#))
                                           #{outer-maps\ 2819}#)))))))))))
                 (#{gen-syntax\ 2718}#
                   (lambda (#{src\ 2826}#
                            #{e\ 2827}#
                            #{r\ 2828}#
                            #{maps\ 2829}#
                            #{ellipsis?\ 2830}#
                            #{mod\ 2831}#)
                     (if (#{id?\ 260}# #{e\ 2827}#)
                       (let ((#{label\ 2839}#
                               (#{id-var-name\ 317}#
                                 #{e\ 2827}#
                                 '(()))))
                         (let ((#{b\ 2842}#
                                 (#{lookup\ 254}#
                                   #{label\ 2839}#
                                   #{r\ 2828}#
                                   #{mod\ 2831}#)))
                           (if (eq? (#{binding-type\ 243}# #{b\ 2842}#)
                                    'syntax)
                             (call-with-values
                               (lambda ()
                                 (let ((#{var.lev\ 2844}#
                                         (#{binding-value\ 245}# #{b\ 2842}#)))
                                   (#{gen-ref\ 2720}#
                                     #{src\ 2826}#
                                     (car #{var.lev\ 2844}#)
                                     (cdr #{var.lev\ 2844}#)
                                     #{maps\ 2829}#)))
                               (lambda (#{var\ 2845}# #{maps\ 2846}#)
                                 (values
                                   (list (quote ref) #{var\ 2845}#)
                                   #{maps\ 2846}#)))
                             (if (#{ellipsis?\ 2830}# #{e\ 2827}#)
                               (syntax-violation
                                 'syntax
                                 "misplaced ellipsis"
                                 #{src\ 2826}#)
                               (values
                                 (list (quote quote) #{e\ 2827}#)
                                 #{maps\ 2829}#)))))
                       ((lambda (#{tmp\ 2851}#)
                          ((lambda (#{tmp\ 2852}#)
                             (if (if #{tmp\ 2852}#
                                   (apply (lambda (#{dots\ 2855}# #{e\ 2856}#)
                                            (#{ellipsis?\ 2830}#
                                              #{dots\ 2855}#))
                                          #{tmp\ 2852}#)
                                   #f)
                               (apply (lambda (#{dots\ 2859}# #{e\ 2860}#)
                                        (#{gen-syntax\ 2718}#
                                          #{src\ 2826}#
                                          #{e\ 2860}#
                                          #{r\ 2828}#
                                          #{maps\ 2829}#
                                          (lambda (#{x\ 2861}#) #f)
                                          #{mod\ 2831}#))
                                      #{tmp\ 2852}#)
                               ((lambda (#{tmp\ 2863}#)
                                  (if (if #{tmp\ 2863}#
                                        (apply (lambda (#{x\ 2867}#
                                                        #{dots\ 2868}#
                                                        #{y\ 2869}#)
                                                 (#{ellipsis?\ 2830}#
                                                   #{dots\ 2868}#))
                                               #{tmp\ 2863}#)
                                        #f)
                                    (apply (lambda (#{x\ 2873}#
                                                    #{dots\ 2874}#
                                                    #{y\ 2875}#)
                                             (letrec ((#{f\ 2879}#
                                                        (lambda (#{y\ 2880}#
                                                                 #{k\ 2881}#)
                                                          ((lambda (#{tmp\ 2888}#)
                                                             ((lambda (#{tmp\ 2889}#)
                                                                (if (if #{tmp\ 2889}#
                                                                      (apply (lambda (#{dots\ 2892}#
                                                                                      #{y\ 2893}#)
                                                                               (#{ellipsis?\ 2830}#
                                                                                 #{dots\ 2892}#))
                                                                             #{tmp\ 2889}#)
                                                                      #f)
                                                                  (apply (lambda (#{dots\ 2896}#
                                                                                  #{y\ 2897}#)
                                                                           (#{f\ 2879}#
                                                                             #{y\ 2897}#
                                                                             (lambda (#{maps\ 2898}#)
                                                                               (call-with-values
                                                                                 (lambda ()
                                                                                   (#{k\ 2881}#
                                                                                     (cons '()
                                                                                           #{maps\ 2898}#)))
                                                                                 (lambda (#{x\ 2900}#
                                                                                          #{maps\ 2901}#)
                                                                                   (if (null? (car #{maps\ 2901}#))
                                                                                     (syntax-violation
                                                                                       'syntax
                                                                                       "extra ellipsis"
                                                                                       #{src\ 2826}#)
                                                                                     (values
                                                                                       (#{gen-mappend\ 2722}#
                                                                                         #{x\ 2900}#
                                                                                         (car #{maps\ 2901}#))
                                                                                       (cdr #{maps\ 2901}#))))))))
                                                                         #{tmp\ 2889}#)
                                                                  ((lambda (#{_\ 2905}#)
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (#{gen-syntax\ 2718}#
                                                                           #{src\ 2826}#
                                                                           #{y\ 2880}#
                                                                           #{r\ 2828}#
                                                                           #{maps\ 2829}#
                                                                           #{ellipsis?\ 2830}#
                                                                           #{mod\ 2831}#))
                                                                       (lambda (#{y\ 2906}#
                                                                                #{maps\ 2907}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{k\ 2881}#
                                                                               #{maps\ 2907}#))
                                                                           (lambda (#{x\ 2910}#
                                                                                    #{maps\ 2911}#)
                                                                             (values
                                                                               (#{gen-append\ 2728}#
                                                                                 #{x\ 2910}#
                                                                                 #{y\ 2906}#)
                                                                               #{maps\ 2911}#))))))
                                                                   #{tmp\ 2888}#)))
                                                              ($sc-dispatch
                                                                #{tmp\ 2888}#
                                                                '(any . any))))
                                                           #{y\ 2880}#))))
                                               (#{f\ 2879}#
                                                 #{y\ 2875}#
                                                 (lambda (#{maps\ 2882}#)
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{gen-syntax\ 2718}#
                                                         #{src\ 2826}#
                                                         #{x\ 2873}#
                                                         #{r\ 2828}#
                                                         (cons '()
                                                               #{maps\ 2882}#)
                                                         #{ellipsis?\ 2830}#
                                                         #{mod\ 2831}#))
                                                     (lambda (#{x\ 2884}#
                                                              #{maps\ 2885}#)
                                                       (if (null? (car #{maps\ 2885}#))
                                                         (syntax-violation
                                                           'syntax
                                                           "extra ellipsis"
                                                           #{src\ 2826}#)
                                                         (values
                                                           (#{gen-map\ 2724}#
                                                             #{x\ 2884}#
                                                             (car #{maps\ 2885}#))
                                                           (cdr #{maps\ 2885}#)))))))))
                                           #{tmp\ 2863}#)
                                    ((lambda (#{tmp\ 2914}#)
                                       (if #{tmp\ 2914}#
                                         (apply (lambda (#{x\ 2917}#
                                                         #{y\ 2918}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{gen-syntax\ 2718}#
                                                        #{src\ 2826}#
                                                        #{x\ 2917}#
                                                        #{r\ 2828}#
                                                        #{maps\ 2829}#
                                                        #{ellipsis?\ 2830}#
                                                        #{mod\ 2831}#))
                                                    (lambda (#{x\ 2919}#
                                                             #{maps\ 2920}#)
                                                      (call-with-values
                                                        (lambda ()
                                                          (#{gen-syntax\ 2718}#
                                                            #{src\ 2826}#
                                                            #{y\ 2918}#
                                                            #{r\ 2828}#
                                                            #{maps\ 2920}#
                                                            #{ellipsis?\ 2830}#
                                                            #{mod\ 2831}#))
                                                        (lambda (#{y\ 2923}#
                                                                 #{maps\ 2924}#)
                                                          (values
                                                            (#{gen-cons\ 2726}#
                                                              #{x\ 2919}#
                                                              #{y\ 2923}#)
                                                            #{maps\ 2924}#))))))
                                                #{tmp\ 2914}#)
                                         ((lambda (#{tmp\ 2927}#)
                                            (if #{tmp\ 2927}#
                                              (apply (lambda (#{e1\ 2930}#
                                                              #{e2\ 2931}#)
                                                       (call-with-values
                                                         (lambda ()
                                                           (#{gen-syntax\ 2718}#
                                                             #{src\ 2826}#
                                                             (cons #{e1\ 2930}#
                                                                   #{e2\ 2931}#)
                                                             #{r\ 2828}#
                                                             #{maps\ 2829}#
                                                             #{ellipsis?\ 2830}#
                                                             #{mod\ 2831}#))
                                                         (lambda (#{e\ 2933}#
                                                                  #{maps\ 2934}#)
                                                           (values
                                                             (#{gen-vector\ 2730}#
                                                               #{e\ 2933}#)
                                                             #{maps\ 2934}#))))
                                                     #{tmp\ 2927}#)
                                              ((lambda (#{_\ 2938}#)
                                                 (values
                                                   (list 'quote
                                                         #{e\ 2827}#)
                                                   #{maps\ 2829}#))
                                               #{tmp\ 2851}#)))
                                          ($sc-dispatch
                                            #{tmp\ 2851}#
                                            '#(vector (any . each-any))))))
                                     ($sc-dispatch
                                       #{tmp\ 2851}#
                                       '(any . any)))))
                                ($sc-dispatch
                                  #{tmp\ 2851}#
                                  '(any any . any)))))
                           ($sc-dispatch #{tmp\ 2851}# (quote (any any)))))
                        #{e\ 2827}#)))))
          (lambda (#{e\ 2940}#
                   #{r\ 2941}#
                   #{w\ 2942}#
                   #{s\ 2943}#
                   #{mod\ 2944}#)
            (let ((#{e\ 2951}#
                    (#{source-wrap\ 331}#
                      #{e\ 2940}#
                      #{w\ 2942}#
                      #{s\ 2943}#
                      #{mod\ 2944}#)))
              ((lambda (#{tmp\ 2952}#)
                 ((lambda (#{tmp\ 2953}#)
                    (if #{tmp\ 2953}#
                      (apply (lambda (#{_\ 2956}# #{x\ 2957}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax\ 2718}#
                                     #{e\ 2951}#
                                     #{x\ 2957}#
                                     #{r\ 2941}#
                                     '()
                                     #{ellipsis?\ 361}#
                                     #{mod\ 2944}#))
                                 (lambda (#{e\ 2958}# #{maps\ 2959}#)
                                   (#{regen\ 2732}# #{e\ 2958}#))))
                             #{tmp\ 2953}#)
                      ((lambda (#{_\ 2963}#)
                         (syntax-violation
                           'syntax
                           "bad `syntax' form"
                           #{e\ 2951}#))
                       #{tmp\ 2952}#)))
                  ($sc-dispatch #{tmp\ 2952}# (quote (any any)))))
               #{e\ 2951}#)))))
      (#{global-extend\ 256}#
        'core
        'lambda
        (lambda (#{e\ 2964}#
                 #{r\ 2965}#
                 #{w\ 2966}#
                 #{s\ 2967}#
                 #{mod\ 2968}#)
          ((lambda (#{tmp\ 2974}#)
             ((lambda (#{tmp\ 2975}#)
                (if (if #{tmp\ 2975}#
                      (apply (lambda (#{_\ 2981}#
                                      #{args\ 2982}#
                                      #{docstring\ 2983}#
                                      #{e1\ 2984}#
                                      #{e2\ 2985}#)
                               (string? (syntax->datum #{docstring\ 2983}#)))
                             #{tmp\ 2975}#)
                      #f)
                  (apply (lambda (#{_\ 2991}#
                                  #{args\ 2992}#
                                  #{docstring\ 2993}#
                                  #{e1\ 2994}#
                                  #{e2\ 2995}#)
                           (call-with-values
                             (lambda ()
                               (#{lambda-formals\ 363}# #{args\ 2992}#))
                             (lambda (#{req\ 2996}#
                                      #{opt\ 2997}#
                                      #{rest\ 2998}#
                                      #{kw\ 2999}#)
                               (#{chi-simple-lambda\ 365}#
                                 #{e\ 2964}#
                                 #{r\ 2965}#
                                 #{w\ 2966}#
                                 #{s\ 2967}#
                                 #{mod\ 2968}#
                                 #{req\ 2996}#
                                 #{rest\ 2998}#
                                 (syntax->datum #{docstring\ 2993}#)
                                 (cons #{e1\ 2994}# #{e2\ 2995}#)))))
                         #{tmp\ 2975}#)
                  ((lambda (#{tmp\ 3005}#)
                     (if #{tmp\ 3005}#
                       (apply (lambda (#{_\ 3010}#
                                       #{args\ 3011}#
                                       #{e1\ 3012}#
                                       #{e2\ 3013}#)
                                (call-with-values
                                  (lambda ()
                                    (#{lambda-formals\ 363}# #{args\ 3011}#))
                                  (lambda (#{req\ 3014}#
                                           #{opt\ 3015}#
                                           #{rest\ 3016}#
                                           #{kw\ 3017}#)
                                    (#{chi-simple-lambda\ 365}#
                                      #{e\ 2964}#
                                      #{r\ 2965}#
                                      #{w\ 2966}#
                                      #{s\ 2967}#
                                      #{mod\ 2968}#
                                      #{req\ 3014}#
                                      #{rest\ 3016}#
                                      #f
                                      (cons #{e1\ 3012}# #{e2\ 3013}#)))))
                              #{tmp\ 3005}#)
                       ((lambda (#{_\ 3024}#)
                          (syntax-violation
                            'lambda
                            "bad lambda"
                            #{e\ 2964}#))
                        #{tmp\ 2974}#)))
                   ($sc-dispatch
                     #{tmp\ 2974}#
                     '(any any any . each-any)))))
              ($sc-dispatch
                #{tmp\ 2974}#
                '(any any any any . each-any))))
           #{e\ 2964}#)))
      (#{global-extend\ 256}#
        'core
        'lambda*
        (lambda (#{e\ 3025}#
                 #{r\ 3026}#
                 #{w\ 3027}#
                 #{s\ 3028}#
                 #{mod\ 3029}#)
          ((lambda (#{tmp\ 3035}#)
             ((lambda (#{tmp\ 3036}#)
                (if #{tmp\ 3036}#
                  (apply (lambda (#{_\ 3041}#
                                  #{args\ 3042}#
                                  #{e1\ 3043}#
                                  #{e2\ 3044}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 369}#
                                 #{e\ 3025}#
                                 #{r\ 3026}#
                                 #{w\ 3027}#
                                 #{s\ 3028}#
                                 #{mod\ 3029}#
                                 #{lambda*-formals\ 367}#
                                 (list (cons #{args\ 3042}#
                                             (cons #{e1\ 3043}#
                                                   #{e2\ 3044}#)))))
                             (lambda (#{docstring\ 3046}# #{lcase\ 3047}#)
                               (#{build-case-lambda\ 204}#
                                 #{s\ 3028}#
                                 #{docstring\ 3046}#
                                 #{lcase\ 3047}#))))
                         #{tmp\ 3036}#)
                  ((lambda (#{_\ 3051}#)
                     (syntax-violation
                       'lambda
                       "bad lambda*"
                       #{e\ 3025}#))
                   #{tmp\ 3035}#)))
              ($sc-dispatch
                #{tmp\ 3035}#
                '(any any any . each-any))))
           #{e\ 3025}#)))
      (#{global-extend\ 256}#
        'core
        'case-lambda
        (lambda (#{e\ 3052}#
                 #{r\ 3053}#
                 #{w\ 3054}#
                 #{s\ 3055}#
                 #{mod\ 3056}#)
          ((lambda (#{tmp\ 3062}#)
             ((lambda (#{tmp\ 3063}#)
                (if #{tmp\ 3063}#
                  (apply (lambda (#{_\ 3071}#
                                  #{args\ 3072}#
                                  #{e1\ 3073}#
                                  #{e2\ 3074}#
                                  #{args*\ 3075}#
                                  #{e1*\ 3076}#
                                  #{e2*\ 3077}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 369}#
                                 #{e\ 3052}#
                                 #{r\ 3053}#
                                 #{w\ 3054}#
                                 #{s\ 3055}#
                                 #{mod\ 3056}#
                                 #{lambda-formals\ 363}#
                                 (cons (cons #{args\ 3072}#
                                             (cons #{e1\ 3073}# #{e2\ 3074}#))
                                       (map (lambda (#{tmp\ 3081}#
                                                     #{tmp\ 3080}#
                                                     #{tmp\ 3079}#)
                                              (cons #{tmp\ 3079}#
                                                    (cons #{tmp\ 3080}#
                                                          #{tmp\ 3081}#)))
                                            #{e2*\ 3077}#
                                            #{e1*\ 3076}#
                                            #{args*\ 3075}#))))
                             (lambda (#{docstring\ 3083}# #{lcase\ 3084}#)
                               (#{build-case-lambda\ 204}#
                                 #{s\ 3055}#
                                 #{docstring\ 3083}#
                                 #{lcase\ 3084}#))))
                         #{tmp\ 3063}#)
                  ((lambda (#{_\ 3088}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda"
                       #{e\ 3052}#))
                   #{tmp\ 3062}#)))
              ($sc-dispatch
                #{tmp\ 3062}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3052}#)))
      (#{global-extend\ 256}#
        'core
        'case-lambda*
        (lambda (#{e\ 3089}#
                 #{r\ 3090}#
                 #{w\ 3091}#
                 #{s\ 3092}#
                 #{mod\ 3093}#)
          ((lambda (#{tmp\ 3099}#)
             ((lambda (#{tmp\ 3100}#)
                (if #{tmp\ 3100}#
                  (apply (lambda (#{_\ 3108}#
                                  #{args\ 3109}#
                                  #{e1\ 3110}#
                                  #{e2\ 3111}#
                                  #{args*\ 3112}#
                                  #{e1*\ 3113}#
                                  #{e2*\ 3114}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 369}#
                                 #{e\ 3089}#
                                 #{r\ 3090}#
                                 #{w\ 3091}#
                                 #{s\ 3092}#
                                 #{mod\ 3093}#
                                 #{lambda*-formals\ 367}#
                                 (cons (cons #{args\ 3109}#
                                             (cons #{e1\ 3110}# #{e2\ 3111}#))
                                       (map (lambda (#{tmp\ 3118}#
                                                     #{tmp\ 3117}#
                                                     #{tmp\ 3116}#)
                                              (cons #{tmp\ 3116}#
                                                    (cons #{tmp\ 3117}#
                                                          #{tmp\ 3118}#)))
                                            #{e2*\ 3114}#
                                            #{e1*\ 3113}#
                                            #{args*\ 3112}#))))
                             (lambda (#{docstring\ 3120}# #{lcase\ 3121}#)
                               (#{build-case-lambda\ 204}#
                                 #{s\ 3092}#
                                 #{docstring\ 3120}#
                                 #{lcase\ 3121}#))))
                         #{tmp\ 3100}#)
                  ((lambda (#{_\ 3125}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda*"
                       #{e\ 3089}#))
                   #{tmp\ 3099}#)))
              ($sc-dispatch
                #{tmp\ 3099}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3089}#)))
      (#{global-extend\ 256}#
        'core
        'let
        (letrec ((#{chi-let\ 3127}#
                   (lambda (#{e\ 3128}#
                            #{r\ 3129}#
                            #{w\ 3130}#
                            #{s\ 3131}#
                            #{mod\ 3132}#
                            #{constructor\ 3133}#
                            #{ids\ 3134}#
                            #{vals\ 3135}#
                            #{exps\ 3136}#)
                     (if (not (#{valid-bound-ids?\ 323}# #{ids\ 3134}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 3128}#)
                       (let ((#{labels\ 3148}#
                               (#{gen-labels\ 278}# #{ids\ 3134}#))
                             (#{new-vars\ 3149}#
                               (map #{gen-var\ 373}# #{ids\ 3134}#)))
                         (let ((#{nw\ 3152}#
                                 (#{make-binding-wrap\ 307}#
                                   #{ids\ 3134}#
                                   #{labels\ 3148}#
                                   #{w\ 3130}#))
                               (#{nr\ 3153}#
                                 (#{extend-var-env\ 250}#
                                   #{labels\ 3148}#
                                   #{new-vars\ 3149}#
                                   #{r\ 3129}#)))
                           (#{constructor\ 3133}#
                             #{s\ 3131}#
                             (map syntax->datum #{ids\ 3134}#)
                             #{new-vars\ 3149}#
                             (map (lambda (#{x\ 3154}#)
                                    (#{chi\ 345}#
                                      #{x\ 3154}#
                                      #{r\ 3129}#
                                      #{w\ 3130}#
                                      #{mod\ 3132}#))
                                  #{vals\ 3135}#)
                             (#{chi-body\ 353}#
                               #{exps\ 3136}#
                               (#{source-wrap\ 331}#
                                 #{e\ 3128}#
                                 #{nw\ 3152}#
                                 #{s\ 3131}#
                                 #{mod\ 3132}#)
                               #{nr\ 3153}#
                               #{nw\ 3152}#
                               #{mod\ 3132}#))))))))
          (lambda (#{e\ 3156}#
                   #{r\ 3157}#
                   #{w\ 3158}#
                   #{s\ 3159}#
                   #{mod\ 3160}#)
            ((lambda (#{tmp\ 3166}#)
               ((lambda (#{tmp\ 3167}#)
                  (if (if #{tmp\ 3167}#
                        (apply (lambda (#{_\ 3173}#
                                        #{id\ 3174}#
                                        #{val\ 3175}#
                                        #{e1\ 3176}#
                                        #{e2\ 3177}#)
                                 (and-map #{id?\ 260}# #{id\ 3174}#))
                               #{tmp\ 3167}#)
                        #f)
                    (apply (lambda (#{_\ 3184}#
                                    #{id\ 3185}#
                                    #{val\ 3186}#
                                    #{e1\ 3187}#
                                    #{e2\ 3188}#)
                             (#{chi-let\ 3127}#
                               #{e\ 3156}#
                               #{r\ 3157}#
                               #{w\ 3158}#
                               #{s\ 3159}#
                               #{mod\ 3160}#
                               #{build-let\ 214}#
                               #{id\ 3185}#
                               #{val\ 3186}#
                               (cons #{e1\ 3187}# #{e2\ 3188}#)))
                           #{tmp\ 3167}#)
                    ((lambda (#{tmp\ 3192}#)
                       (if (if #{tmp\ 3192}#
                             (apply (lambda (#{_\ 3199}#
                                             #{f\ 3200}#
                                             #{id\ 3201}#
                                             #{val\ 3202}#
                                             #{e1\ 3203}#
                                             #{e2\ 3204}#)
                                      (if (#{id?\ 260}# #{f\ 3200}#)
                                        (and-map #{id?\ 260}# #{id\ 3201}#)
                                        #f))
                                    #{tmp\ 3192}#)
                             #f)
                         (apply (lambda (#{_\ 3214}#
                                         #{f\ 3215}#
                                         #{id\ 3216}#
                                         #{val\ 3217}#
                                         #{e1\ 3218}#
                                         #{e2\ 3219}#)
                                  (#{chi-let\ 3127}#
                                    #{e\ 3156}#
                                    #{r\ 3157}#
                                    #{w\ 3158}#
                                    #{s\ 3159}#
                                    #{mod\ 3160}#
                                    #{build-named-let\ 216}#
                                    (cons #{f\ 3215}# #{id\ 3216}#)
                                    #{val\ 3217}#
                                    (cons #{e1\ 3218}# #{e2\ 3219}#)))
                                #{tmp\ 3192}#)
                         ((lambda (#{_\ 3224}#)
                            (syntax-violation
                              'let
                              "bad let"
                              (#{source-wrap\ 331}#
                                #{e\ 3156}#
                                #{w\ 3158}#
                                #{s\ 3159}#
                                #{mod\ 3160}#)))
                          #{tmp\ 3166}#)))
                     ($sc-dispatch
                       #{tmp\ 3166}#
                       '(any any #(each (any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 3166}#
                  '(any #(each (any any)) any . each-any))))
             #{e\ 3156}#))))
      (#{global-extend\ 256}#
        'core
        'letrec
        (lambda (#{e\ 3225}#
                 #{r\ 3226}#
                 #{w\ 3227}#
                 #{s\ 3228}#
                 #{mod\ 3229}#)
          ((lambda (#{tmp\ 3235}#)
             ((lambda (#{tmp\ 3236}#)
                (if (if #{tmp\ 3236}#
                      (apply (lambda (#{_\ 3242}#
                                      #{id\ 3243}#
                                      #{val\ 3244}#
                                      #{e1\ 3245}#
                                      #{e2\ 3246}#)
                               (and-map #{id?\ 260}# #{id\ 3243}#))
                             #{tmp\ 3236}#)
                      #f)
                  (apply (lambda (#{_\ 3253}#
                                  #{id\ 3254}#
                                  #{val\ 3255}#
                                  #{e1\ 3256}#
                                  #{e2\ 3257}#)
                           (let ((#{ids\ 3259}# #{id\ 3254}#))
                             (if (not (#{valid-bound-ids?\ 323}#
                                        #{ids\ 3259}#))
                               (syntax-violation
                                 'letrec
                                 "duplicate bound variable"
                                 #{e\ 3225}#)
                               (let ((#{labels\ 3263}#
                                       (#{gen-labels\ 278}# #{ids\ 3259}#))
                                     (#{new-vars\ 3264}#
                                       (map #{gen-var\ 373}# #{ids\ 3259}#)))
                                 (let ((#{w\ 3267}#
                                         (#{make-binding-wrap\ 307}#
                                           #{ids\ 3259}#
                                           #{labels\ 3263}#
                                           #{w\ 3227}#))
                                       (#{r\ 3268}#
                                         (#{extend-var-env\ 250}#
                                           #{labels\ 3263}#
                                           #{new-vars\ 3264}#
                                           #{r\ 3226}#)))
                                   (#{build-letrec\ 218}#
                                     #{s\ 3228}#
                                     (map syntax->datum #{ids\ 3259}#)
                                     #{new-vars\ 3264}#
                                     (map (lambda (#{x\ 3269}#)
                                            (#{chi\ 345}#
                                              #{x\ 3269}#
                                              #{r\ 3268}#
                                              #{w\ 3267}#
                                              #{mod\ 3229}#))
                                          #{val\ 3255}#)
                                     (#{chi-body\ 353}#
                                       (cons #{e1\ 3256}# #{e2\ 3257}#)
                                       (#{source-wrap\ 331}#
                                         #{e\ 3225}#
                                         #{w\ 3267}#
                                         #{s\ 3228}#
                                         #{mod\ 3229}#)
                                       #{r\ 3268}#
                                       #{w\ 3267}#
                                       #{mod\ 3229}#)))))))
                         #{tmp\ 3236}#)
                  ((lambda (#{_\ 3274}#)
                     (syntax-violation
                       'letrec
                       "bad letrec"
                       (#{source-wrap\ 331}#
                         #{e\ 3225}#
                         #{w\ 3227}#
                         #{s\ 3228}#
                         #{mod\ 3229}#)))
                   #{tmp\ 3235}#)))
              ($sc-dispatch
                #{tmp\ 3235}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3225}#)))
      (#{global-extend\ 256}#
        'core
        'set!
        (lambda (#{e\ 3275}#
                 #{r\ 3276}#
                 #{w\ 3277}#
                 #{s\ 3278}#
                 #{mod\ 3279}#)
          ((lambda (#{tmp\ 3285}#)
             ((lambda (#{tmp\ 3286}#)
                (if (if #{tmp\ 3286}#
                      (apply (lambda (#{_\ 3290}# #{id\ 3291}# #{val\ 3292}#)
                               (#{id?\ 260}# #{id\ 3291}#))
                             #{tmp\ 3286}#)
                      #f)
                  (apply (lambda (#{_\ 3296}# #{id\ 3297}# #{val\ 3298}#)
                           (let ((#{val\ 3301}#
                                   (#{chi\ 345}#
                                     #{val\ 3298}#
                                     #{r\ 3276}#
                                     #{w\ 3277}#
                                     #{mod\ 3279}#))
                                 (#{n\ 3302}#
                                   (#{id-var-name\ 317}#
                                     #{id\ 3297}#
                                     #{w\ 3277}#)))
                             (let ((#{b\ 3304}#
                                     (#{lookup\ 254}#
                                       #{n\ 3302}#
                                       #{r\ 3276}#
                                       #{mod\ 3279}#)))
                               (let ((#{atom-key\ 3307}#
                                       (#{binding-type\ 243}# #{b\ 3304}#)))
                                 (if (memv #{atom-key\ 3307}#
                                           '(lexical))
                                   (#{build-lexical-assignment\ 190}#
                                     #{s\ 3278}#
                                     (syntax->datum #{id\ 3297}#)
                                     (#{binding-value\ 245}# #{b\ 3304}#)
                                     #{val\ 3301}#)
                                   (if (memv #{atom-key\ 3307}#
                                             '(global))
                                     (#{build-global-assignment\ 196}#
                                       #{s\ 3278}#
                                       #{n\ 3302}#
                                       #{val\ 3301}#
                                       #{mod\ 3279}#)
                                     (if (memv #{atom-key\ 3307}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'set!
                                         "identifier out of context"
                                         (#{wrap\ 329}#
                                           #{id\ 3297}#
                                           #{w\ 3277}#
                                           #{mod\ 3279}#))
                                       (syntax-violation
                                         'set!
                                         "bad set!"
                                         (#{source-wrap\ 331}#
                                           #{e\ 3275}#
                                           #{w\ 3277}#
                                           #{s\ 3278}#
                                           #{mod\ 3279}#)))))))))
                         #{tmp\ 3286}#)
                  ((lambda (#{tmp\ 3312}#)
                     (if #{tmp\ 3312}#
                       (apply (lambda (#{_\ 3317}#
                                       #{head\ 3318}#
                                       #{tail\ 3319}#
                                       #{val\ 3320}#)
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type\ 341}#
                                      #{head\ 3318}#
                                      #{r\ 3276}#
                                      '(())
                                      #f
                                      #f
                                      #{mod\ 3279}#
                                      #t))
                                  (lambda (#{type\ 3323}#
                                           #{value\ 3324}#
                                           #{ee\ 3325}#
                                           #{ww\ 3326}#
                                           #{ss\ 3327}#
                                           #{modmod\ 3328}#)
                                    (if (memv #{type\ 3323}#
                                              '(module-ref))
                                      (let ((#{val\ 3337}#
                                              (#{chi\ 345}#
                                                #{val\ 3320}#
                                                #{r\ 3276}#
                                                #{w\ 3277}#
                                                #{mod\ 3279}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 3324}#
                                              (cons #{head\ 3318}#
                                                    #{tail\ 3319}#)))
                                          (lambda (#{id\ 3339}# #{mod\ 3340}#)
                                            (#{build-global-assignment\ 196}#
                                              #{s\ 3278}#
                                              #{id\ 3339}#
                                              #{val\ 3337}#
                                              #{mod\ 3340}#))))
                                      (#{build-application\ 184}#
                                        #{s\ 3278}#
                                        (#{chi\ 345}#
                                          (list '#(syntax-object
                                                   setter
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(type
                                                        value
                                                        ee
                                                        ww
                                                        ss
                                                        modmod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3329"
                                                        "i3330"
                                                        "i3331"
                                                        "i3332"
                                                        "i3333"
                                                        "i3334"))
                                                    #(ribcage
                                                      #(_ head tail val)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3313"
                                                        "i3314"
                                                        "i3315"
                                                        "i3316"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e r w s mod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3280"
                                                        "i3281"
                                                        "i3282"
                                                        "i3283"
                                                        "i3284"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        *mode*
                                                        noexpand)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i374"
                                                       "i372"
                                                       "i370"
                                                       "i368"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i360"
                                                       "i358"
                                                       "i356"
                                                       "i354"
                                                       "i352"
                                                       "i350"
                                                       "i348"
                                                       "i346"
                                                       "i344"
                                                       "i342"
                                                       "i340"
                                                       "i338"
                                                       "i336"
                                                       "i334"
                                                       "i332"
                                                       "i330"
                                                       "i328"
                                                       "i326"
                                                       "i324"
                                                       "i322"
                                                       "i320"
                                                       "i318"
                                                       "i316"
                                                       "i314"
                                                       "i312"
                                                       "i310"
                                                       "i308"
                                                       "i306"
                                                       "i304"
                                                       "i303"
                                                       "i302"
                                                       "i300"
                                                       "i299"
                                                       "i298"
                                                       "i297"
                                                       "i296"
                                                       "i294"
                                                       "i292"
                                                       "i290"
                                                       "i288"
                                                       "i286"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i277"
                                                       "i275"
                                                       "i274"
                                                       "i273"
                                                       "i272"
                                                       "i271"
                                                       "i270"
                                                       "i268"
                                                       "i266"
                                                       "i264"
                                                       "i262"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i246"
                                                       "i244"
                                                       "i242"
                                                       "i241"
                                                       "i240"
                                                       "i238"
                                                       "i237"
                                                       "i235"
                                                       "i233"
                                                       "i231"
                                                       "i229"
                                                       "i227"
                                                       "i225"
                                                       "i223"
                                                       "i221"
                                                       "i219"
                                                       "i217"
                                                       "i215"
                                                       "i213"
                                                       "i211"
                                                       "i209"
                                                       "i207"
                                                       "i205"
                                                       "i203"
                                                       "i201"
                                                       "i199"
                                                       "i197"
                                                       "i195"
                                                       "i193"
                                                       "i191"
                                                       "i189"
                                                       "i187"
                                                       "i185"
                                                       "i183"
                                                       "i181"
                                                       "i179"
                                                       "i177"
                                                       "i175"
                                                       "i174"
                                                       "i172"
                                                       "i170"
                                                       "i168"
                                                       "i166"
                                                       "i164"
                                                       "i162"
                                                       "i160"
                                                       "i158"))
                                                    #(ribcage
                                                      (define-structure
                                                        and-map*)
                                                      ((top) (top))
                                                      ("i61" "i59")))
                                                   (hygiene guile))
                                                #{head\ 3318}#)
                                          #{r\ 3276}#
                                          #{w\ 3277}#
                                          #{mod\ 3279}#)
                                        (map (lambda (#{e\ 3344}#)
                                               (#{chi\ 345}#
                                                 #{e\ 3344}#
                                                 #{r\ 3276}#
                                                 #{w\ 3277}#
                                                 #{mod\ 3279}#))
                                             (append
                                               #{tail\ 3319}#
                                               (list #{val\ 3320}#))))))))
                              #{tmp\ 3312}#)
                       ((lambda (#{_\ 3348}#)
                          (syntax-violation
                            'set!
                            "bad set!"
                            (#{source-wrap\ 331}#
                              #{e\ 3275}#
                              #{w\ 3277}#
                              #{s\ 3278}#
                              #{mod\ 3279}#)))
                        #{tmp\ 3285}#)))
                   ($sc-dispatch
                     #{tmp\ 3285}#
                     '(any (any . each-any) any)))))
              ($sc-dispatch
                #{tmp\ 3285}#
                '(any any any))))
           #{e\ 3275}#)))
      (#{global-extend\ 256}#
        'module-ref
        '@
        (lambda (#{e\ 3349}#)
          ((lambda (#{tmp\ 3351}#)
             ((lambda (#{tmp\ 3352}#)
                (if (if #{tmp\ 3352}#
                      (apply (lambda (#{_\ 3356}# #{mod\ 3357}# #{id\ 3358}#)
                               (if (and-map #{id?\ 260}# #{mod\ 3357}#)
                                 (#{id?\ 260}# #{id\ 3358}#)
                                 #f))
                             #{tmp\ 3352}#)
                      #f)
                  (apply (lambda (#{_\ 3365}# #{mod\ 3366}# #{id\ 3367}#)
                           (values
                             (syntax->datum #{id\ 3367}#)
                             (syntax->datum
                               (cons '#(syntax-object
                                        public
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i3362" "i3363" "i3364"))
                                         #(ribcage () () ())
                                         #(ribcage #(e) #((top)) #("i3350"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             *mode*
                                             noexpand)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i374"
                                            "i372"
                                            "i370"
                                            "i368"
                                            "i366"
                                            "i364"
                                            "i362"
                                            "i360"
                                            "i358"
                                            "i356"
                                            "i354"
                                            "i352"
                                            "i350"
                                            "i348"
                                            "i346"
                                            "i344"
                                            "i342"
                                            "i340"
                                            "i338"
                                            "i336"
                                            "i334"
                                            "i332"
                                            "i330"
                                            "i328"
                                            "i326"
                                            "i324"
                                            "i322"
                                            "i320"
                                            "i318"
                                            "i316"
                                            "i314"
                                            "i312"
                                            "i310"
                                            "i308"
                                            "i306"
                                            "i304"
                                            "i303"
                                            "i302"
                                            "i300"
                                            "i299"
                                            "i298"
                                            "i297"
                                            "i296"
                                            "i294"
                                            "i292"
                                            "i290"
                                            "i288"
                                            "i286"
                                            "i284"
                                            "i282"
                                            "i280"
                                            "i277"
                                            "i275"
                                            "i274"
                                            "i273"
                                            "i272"
                                            "i271"
                                            "i270"
                                            "i268"
                                            "i266"
                                            "i264"
                                            "i262"
                                            "i261"
                                            "i259"
                                            "i257"
                                            "i255"
                                            "i253"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i246"
                                            "i244"
                                            "i242"
                                            "i241"
                                            "i240"
                                            "i238"
                                            "i237"
                                            "i235"
                                            "i233"
                                            "i231"
                                            "i229"
                                            "i227"
                                            "i225"
                                            "i223"
                                            "i221"
                                            "i219"
                                            "i217"
                                            "i215"
                                            "i213"
                                            "i211"
                                            "i209"
                                            "i207"
                                            "i205"
                                            "i203"
                                            "i201"
                                            "i199"
                                            "i197"
                                            "i195"
                                            "i193"
                                            "i191"
                                            "i189"
                                            "i187"
                                            "i185"
                                            "i183"
                                            "i181"
                                            "i179"
                                            "i177"
                                            "i175"
                                            "i174"
                                            "i172"
                                            "i170"
                                            "i168"
                                            "i166"
                                            "i164"
                                            "i162"
                                            "i160"
                                            "i158"))
                                         #(ribcage
                                           (define-structure and-map*)
                                           ((top) (top))
                                           ("i61" "i59")))
                                        (hygiene guile))
                                     #{mod\ 3366}#))))
                         #{tmp\ 3352}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3351}#)))
              ($sc-dispatch
                #{tmp\ 3351}#
                '(any each-any any))))
           #{e\ 3349}#)))
      (#{global-extend\ 256}#
        'module-ref
        '@@
        (lambda (#{e\ 3369}#)
          ((lambda (#{tmp\ 3371}#)
             ((lambda (#{tmp\ 3372}#)
                (if (if #{tmp\ 3372}#
                      (apply (lambda (#{_\ 3376}# #{mod\ 3377}# #{id\ 3378}#)
                               (if (and-map #{id?\ 260}# #{mod\ 3377}#)
                                 (#{id?\ 260}# #{id\ 3378}#)
                                 #f))
                             #{tmp\ 3372}#)
                      #f)
                  (apply (lambda (#{_\ 3385}# #{mod\ 3386}# #{id\ 3387}#)
                           (values
                             (syntax->datum #{id\ 3387}#)
                             (syntax->datum
                               (cons '#(syntax-object
                                        private
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i3382" "i3383" "i3384"))
                                         #(ribcage () () ())
                                         #(ribcage #(e) #((top)) #("i3370"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             *mode*
                                             noexpand)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i374"
                                            "i372"
                                            "i370"
                                            "i368"
                                            "i366"
                                            "i364"
                                            "i362"
                                            "i360"
                                            "i358"
                                            "i356"
                                            "i354"
                                            "i352"
                                            "i350"
                                            "i348"
                                            "i346"
                                            "i344"
                                            "i342"
                                            "i340"
                                            "i338"
                                            "i336"
                                            "i334"
                                            "i332"
                                            "i330"
                                            "i328"
                                            "i326"
                                            "i324"
                                            "i322"
                                            "i320"
                                            "i318"
                                            "i316"
                                            "i314"
                                            "i312"
                                            "i310"
                                            "i308"
                                            "i306"
                                            "i304"
                                            "i303"
                                            "i302"
                                            "i300"
                                            "i299"
                                            "i298"
                                            "i297"
                                            "i296"
                                            "i294"
                                            "i292"
                                            "i290"
                                            "i288"
                                            "i286"
                                            "i284"
                                            "i282"
                                            "i280"
                                            "i277"
                                            "i275"
                                            "i274"
                                            "i273"
                                            "i272"
                                            "i271"
                                            "i270"
                                            "i268"
                                            "i266"
                                            "i264"
                                            "i262"
                                            "i261"
                                            "i259"
                                            "i257"
                                            "i255"
                                            "i253"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i246"
                                            "i244"
                                            "i242"
                                            "i241"
                                            "i240"
                                            "i238"
                                            "i237"
                                            "i235"
                                            "i233"
                                            "i231"
                                            "i229"
                                            "i227"
                                            "i225"
                                            "i223"
                                            "i221"
                                            "i219"
                                            "i217"
                                            "i215"
                                            "i213"
                                            "i211"
                                            "i209"
                                            "i207"
                                            "i205"
                                            "i203"
                                            "i201"
                                            "i199"
                                            "i197"
                                            "i195"
                                            "i193"
                                            "i191"
                                            "i189"
                                            "i187"
                                            "i185"
                                            "i183"
                                            "i181"
                                            "i179"
                                            "i177"
                                            "i175"
                                            "i174"
                                            "i172"
                                            "i170"
                                            "i168"
                                            "i166"
                                            "i164"
                                            "i162"
                                            "i160"
                                            "i158"))
                                         #(ribcage
                                           (define-structure and-map*)
                                           ((top) (top))
                                           ("i61" "i59")))
                                        (hygiene guile))
                                     #{mod\ 3386}#))))
                         #{tmp\ 3372}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3371}#)))
              ($sc-dispatch
                #{tmp\ 3371}#
                '(any each-any any))))
           #{e\ 3369}#)))
      (#{global-extend\ 256}#
        'core
        'if
        (lambda (#{e\ 3389}#
                 #{r\ 3390}#
                 #{w\ 3391}#
                 #{s\ 3392}#
                 #{mod\ 3393}#)
          ((lambda (#{tmp\ 3399}#)
             ((lambda (#{tmp\ 3400}#)
                (if #{tmp\ 3400}#
                  (apply (lambda (#{_\ 3404}# #{test\ 3405}# #{then\ 3406}#)
                           (#{build-conditional\ 186}#
                             #{s\ 3392}#
                             (#{chi\ 345}#
                               #{test\ 3405}#
                               #{r\ 3390}#
                               #{w\ 3391}#
                               #{mod\ 3393}#)
                             (#{chi\ 345}#
                               #{then\ 3406}#
                               #{r\ 3390}#
                               #{w\ 3391}#
                               #{mod\ 3393}#)
                             (#{build-void\ 182}# #f)))
                         #{tmp\ 3400}#)
                  ((lambda (#{tmp\ 3408}#)
                     (if #{tmp\ 3408}#
                       (apply (lambda (#{_\ 3413}#
                                       #{test\ 3414}#
                                       #{then\ 3415}#
                                       #{else\ 3416}#)
                                (#{build-conditional\ 186}#
                                  #{s\ 3392}#
                                  (#{chi\ 345}#
                                    #{test\ 3414}#
                                    #{r\ 3390}#
                                    #{w\ 3391}#
                                    #{mod\ 3393}#)
                                  (#{chi\ 345}#
                                    #{then\ 3415}#
                                    #{r\ 3390}#
                                    #{w\ 3391}#
                                    #{mod\ 3393}#)
                                  (#{chi\ 345}#
                                    #{else\ 3416}#
                                    #{r\ 3390}#
                                    #{w\ 3391}#
                                    #{mod\ 3393}#)))
                              #{tmp\ 3408}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 3399}#)))
                   ($sc-dispatch
                     #{tmp\ 3399}#
                     '(any any any any)))))
              ($sc-dispatch
                #{tmp\ 3399}#
                '(any any any))))
           #{e\ 3389}#)))
      (#{global-extend\ 256}#
        'begin
        'begin
        '())
      (#{global-extend\ 256}#
        'define
        'define
        '())
      (#{global-extend\ 256}#
        'define-syntax
        'define-syntax
        '())
      (#{global-extend\ 256}#
        'eval-when
        'eval-when
        '())
      (#{global-extend\ 256}#
        'core
        'syntax-case
        (letrec ((#{gen-syntax-case\ 3424}#
                   (lambda (#{x\ 3425}#
                            #{keys\ 3426}#
                            #{clauses\ 3427}#
                            #{r\ 3428}#
                            #{mod\ 3429}#)
                     (if (null? #{clauses\ 3427}#)
                       (#{build-application\ 184}#
                         #f
                         (#{build-primref\ 208}#
                           #f
                           'syntax-violation)
                         (list (#{build-data\ 210}# #f #f)
                               (#{build-data\ 210}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 3425}#))
                       ((lambda (#{tmp\ 3439}#)
                          ((lambda (#{tmp\ 3440}#)
                             (if #{tmp\ 3440}#
                               (apply (lambda (#{pat\ 3443}# #{exp\ 3444}#)
                                        (if (if (#{id?\ 260}# #{pat\ 3443}#)
                                              (and-map
                                                (lambda (#{x\ 3447}#)
                                                  (not (#{free-id=?\ 319}#
                                                         #{pat\ 3443}#
                                                         #{x\ 3447}#)))
                                                (cons '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(pat exp)
                                                            #((top) (top))
                                                            #("i3441" "i3442"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x
                                                              keys
                                                              clauses
                                                              r
                                                              mod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3430"
                                                              "i3431"
                                                              "i3432"
                                                              "i3433"
                                                              "i3434"))
                                                          #(ribcage
                                                            (gen-syntax-case
                                                              gen-clause
                                                              build-dispatch-call
                                                              convert-pattern)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i3423"
                                                             "i3421"
                                                             "i3419"
                                                             "i3417"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              chi-top
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              maybe-name-value!
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              *mode*
                                                              noexpand)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i374"
                                                             "i372"
                                                             "i370"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i356"
                                                             "i354"
                                                             "i352"
                                                             "i350"
                                                             "i348"
                                                             "i346"
                                                             "i344"
                                                             "i342"
                                                             "i340"
                                                             "i338"
                                                             "i336"
                                                             "i334"
                                                             "i332"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i306"
                                                             "i304"
                                                             "i303"
                                                             "i302"
                                                             "i300"
                                                             "i299"
                                                             "i298"
                                                             "i297"
                                                             "i296"
                                                             "i294"
                                                             "i292"
                                                             "i290"
                                                             "i288"
                                                             "i286"
                                                             "i284"
                                                             "i282"
                                                             "i280"
                                                             "i277"
                                                             "i275"
                                                             "i274"
                                                             "i273"
                                                             "i272"
                                                             "i271"
                                                             "i270"
                                                             "i268"
                                                             "i266"
                                                             "i264"
                                                             "i262"
                                                             "i261"
                                                             "i259"
                                                             "i257"
                                                             "i255"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i246"
                                                             "i244"
                                                             "i242"
                                                             "i241"
                                                             "i240"
                                                             "i238"
                                                             "i237"
                                                             "i235"
                                                             "i233"
                                                             "i231"
                                                             "i229"
                                                             "i227"
                                                             "i225"
                                                             "i223"
                                                             "i221"
                                                             "i219"
                                                             "i217"
                                                             "i215"
                                                             "i213"
                                                             "i211"
                                                             "i209"
                                                             "i207"
                                                             "i205"
                                                             "i203"
                                                             "i201"
                                                             "i199"
                                                             "i197"
                                                             "i195"
                                                             "i193"
                                                             "i191"
                                                             "i189"
                                                             "i187"
                                                             "i185"
                                                             "i183"
                                                             "i181"
                                                             "i179"
                                                             "i177"
                                                             "i175"
                                                             "i174"
                                                             "i172"
                                                             "i170"
                                                             "i168"
                                                             "i166"
                                                             "i164"
                                                             "i162"
                                                             "i160"
                                                             "i158"))
                                                          #(ribcage
                                                            (define-structure
                                                              and-map*)
                                                            ((top) (top))
                                                            ("i61" "i59")))
                                                         (hygiene guile))
                                                      #{keys\ 3426}#))
                                              #f)
                                          (let ((#{labels\ 3451}#
                                                  (list (#{gen-label\ 276}#)))
                                                (#{var\ 3452}#
                                                  (#{gen-var\ 373}#
                                                    #{pat\ 3443}#)))
                                            (#{build-application\ 184}#
                                              #f
                                              (#{build-simple-lambda\ 202}#
                                                #f
                                                (list (syntax->datum
                                                        #{pat\ 3443}#))
                                                #f
                                                (list #{var\ 3452}#)
                                                #f
                                                (#{chi\ 345}#
                                                  #{exp\ 3444}#
                                                  (#{extend-env\ 248}#
                                                    #{labels\ 3451}#
                                                    (list (cons 'syntax
                                                                (cons #{var\ 3452}#
                                                                      0)))
                                                    #{r\ 3428}#)
                                                  (#{make-binding-wrap\ 307}#
                                                    (list #{pat\ 3443}#)
                                                    #{labels\ 3451}#
                                                    '(()))
                                                  #{mod\ 3429}#))
                                              (list #{x\ 3425}#)))
                                          (#{gen-clause\ 3422}#
                                            #{x\ 3425}#
                                            #{keys\ 3426}#
                                            (cdr #{clauses\ 3427}#)
                                            #{r\ 3428}#
                                            #{pat\ 3443}#
                                            #t
                                            #{exp\ 3444}#
                                            #{mod\ 3429}#)))
                                      #{tmp\ 3440}#)
                               ((lambda (#{tmp\ 3458}#)
                                  (if #{tmp\ 3458}#
                                    (apply (lambda (#{pat\ 3462}#
                                                    #{fender\ 3463}#
                                                    #{exp\ 3464}#)
                                             (#{gen-clause\ 3422}#
                                               #{x\ 3425}#
                                               #{keys\ 3426}#
                                               (cdr #{clauses\ 3427}#)
                                               #{r\ 3428}#
                                               #{pat\ 3462}#
                                               #{fender\ 3463}#
                                               #{exp\ 3464}#
                                               #{mod\ 3429}#))
                                           #{tmp\ 3458}#)
                                    ((lambda (#{_\ 3466}#)
                                       (syntax-violation
                                         'syntax-case
                                         "invalid clause"
                                         (car #{clauses\ 3427}#)))
                                     #{tmp\ 3439}#)))
                                ($sc-dispatch
                                  #{tmp\ 3439}#
                                  '(any any any)))))
                           ($sc-dispatch #{tmp\ 3439}# (quote (any any)))))
                        (car #{clauses\ 3427}#)))))
                 (#{gen-clause\ 3422}#
                   (lambda (#{x\ 3467}#
                            #{keys\ 3468}#
                            #{clauses\ 3469}#
                            #{r\ 3470}#
                            #{pat\ 3471}#
                            #{fender\ 3472}#
                            #{exp\ 3473}#
                            #{mod\ 3474}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 3418}#
                           #{pat\ 3471}#
                           #{keys\ 3468}#))
                       (lambda (#{p\ 3483}# #{pvars\ 3484}#)
                         (if (not (#{distinct-bound-ids?\ 325}#
                                    (map car #{pvars\ 3484}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 3471}#)
                           (if (not (and-map
                                      (lambda (#{x\ 3491}#)
                                        (not (#{ellipsis?\ 361}#
                                               (car #{x\ 3491}#))))
                                      #{pvars\ 3484}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 3471}#)
                             (let ((#{y\ 3495}#
                                     (#{gen-var\ 373}# (quote tmp))))
                               (#{build-application\ 184}#
                                 #f
                                 (#{build-simple-lambda\ 202}#
                                   #f
                                   (list (quote tmp))
                                   #f
                                   (list #{y\ 3495}#)
                                   #f
                                   (let ((#{y\ 3499}#
                                           (#{build-lexical-reference\ 188}#
                                             'value
                                             #f
                                             'tmp
                                             #{y\ 3495}#)))
                                     (#{build-conditional\ 186}#
                                       #f
                                       ((lambda (#{tmp\ 3502}#)
                                          ((lambda (#{tmp\ 3503}#)
                                             (if #{tmp\ 3503}#
                                               (apply (lambda () #{y\ 3499}#)
                                                      #{tmp\ 3503}#)
                                               ((lambda (#{_\ 3505}#)
                                                  (#{build-conditional\ 186}#
                                                    #f
                                                    #{y\ 3499}#
                                                    (#{build-dispatch-call\ 3420}#
                                                      #{pvars\ 3484}#
                                                      #{fender\ 3472}#
                                                      #{y\ 3499}#
                                                      #{r\ 3470}#
                                                      #{mod\ 3474}#)
                                                    (#{build-data\ 210}#
                                                      #f
                                                      #f)))
                                                #{tmp\ 3502}#)))
                                           ($sc-dispatch
                                             #{tmp\ 3502}#
                                             '#(atom #t))))
                                        #{fender\ 3472}#)
                                       (#{build-dispatch-call\ 3420}#
                                         #{pvars\ 3484}#
                                         #{exp\ 3473}#
                                         #{y\ 3499}#
                                         #{r\ 3470}#
                                         #{mod\ 3474}#)
                                       (#{gen-syntax-case\ 3424}#
                                         #{x\ 3467}#
                                         #{keys\ 3468}#
                                         #{clauses\ 3469}#
                                         #{r\ 3470}#
                                         #{mod\ 3474}#))))
                                 (list (if (eq? #{p\ 3483}# (quote any))
                                         (#{build-application\ 184}#
                                           #f
                                           (#{build-primref\ 208}#
                                             #f
                                             'list)
                                           (list #{x\ 3467}#))
                                         (#{build-application\ 184}#
                                           #f
                                           (#{build-primref\ 208}#
                                             #f
                                             '$sc-dispatch)
                                           (list #{x\ 3467}#
                                                 (#{build-data\ 210}#
                                                   #f
                                                   #{p\ 3483}#)))))))))))))
                 (#{build-dispatch-call\ 3420}#
                   (lambda (#{pvars\ 3513}#
                            #{exp\ 3514}#
                            #{y\ 3515}#
                            #{r\ 3516}#
                            #{mod\ 3517}#)
                     (let ((#{ids\ 3525}# (map car #{pvars\ 3513}#))
                           (#{levels\ 3526}# (map cdr #{pvars\ 3513}#)))
                       (let ((#{labels\ 3529}#
                               (#{gen-labels\ 278}# #{ids\ 3525}#))
                             (#{new-vars\ 3530}#
                               (map #{gen-var\ 373}# #{ids\ 3525}#)))
                         (#{build-application\ 184}#
                           #f
                           (#{build-primref\ 208}# #f (quote apply))
                           (list (#{build-simple-lambda\ 202}#
                                   #f
                                   (map syntax->datum #{ids\ 3525}#)
                                   #f
                                   #{new-vars\ 3530}#
                                   #f
                                   (#{chi\ 345}#
                                     #{exp\ 3514}#
                                     (#{extend-env\ 248}#
                                       #{labels\ 3529}#
                                       (map (lambda (#{var\ 3534}#
                                                     #{level\ 3535}#)
                                              (cons 'syntax
                                                    (cons #{var\ 3534}#
                                                          #{level\ 3535}#)))
                                            #{new-vars\ 3530}#
                                            (map cdr #{pvars\ 3513}#))
                                       #{r\ 3516}#)
                                     (#{make-binding-wrap\ 307}#
                                       #{ids\ 3525}#
                                       #{labels\ 3529}#
                                       '(()))
                                     #{mod\ 3517}#))
                                 #{y\ 3515}#))))))
                 (#{convert-pattern\ 3418}#
                   (lambda (#{pattern\ 3541}# #{keys\ 3542}#)
                     (letrec ((#{cvt\ 3548}#
                                (lambda (#{p\ 3549}# #{n\ 3550}# #{ids\ 3551}#)
                                  (if (#{id?\ 260}# #{p\ 3549}#)
                                    (if (#{bound-id-member?\ 327}#
                                          #{p\ 3549}#
                                          #{keys\ 3542}#)
                                      (values
                                        (vector (quote free-id) #{p\ 3549}#)
                                        #{ids\ 3551}#)
                                      (values
                                        'any
                                        (cons (cons #{p\ 3549}# #{n\ 3550}#)
                                              #{ids\ 3551}#)))
                                    ((lambda (#{tmp\ 3555}#)
                                       ((lambda (#{tmp\ 3556}#)
                                          (if (if #{tmp\ 3556}#
                                                (apply (lambda (#{x\ 3559}#
                                                                #{dots\ 3560}#)
                                                         (#{ellipsis?\ 361}#
                                                           #{dots\ 3560}#))
                                                       #{tmp\ 3556}#)
                                                #f)
                                            (apply (lambda (#{x\ 3563}#
                                                            #{dots\ 3564}#)
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{cvt\ 3548}#
                                                           #{x\ 3563}#
                                                           (#{fx+\ 163}#
                                                             #{n\ 3550}#
                                                             1)
                                                           #{ids\ 3551}#))
                                                       (lambda (#{p\ 3565}#
                                                                #{ids\ 3566}#)
                                                         (values
                                                           (if (eq? #{p\ 3565}#
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               #{p\ 3565}#))
                                                           #{ids\ 3566}#))))
                                                   #{tmp\ 3556}#)
                                            ((lambda (#{tmp\ 3569}#)
                                               (if (if #{tmp\ 3569}#
                                                     (apply (lambda (#{x\ 3573}#
                                                                     #{dots\ 3574}#
                                                                     #{ys\ 3575}#)
                                                              (#{ellipsis?\ 361}#
                                                                #{dots\ 3574}#))
                                                            #{tmp\ 3569}#)
                                                     #f)
                                                 (apply (lambda (#{x\ 3579}#
                                                                 #{dots\ 3580}#
                                                                 #{ys\ 3581}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{cvt*\ 3546}#
                                                                #{ys\ 3581}#
                                                                #{n\ 3550}#
                                                                #{ids\ 3551}#))
                                                            (lambda (#{ys\ 3583}#
                                                                     #{ids\ 3584}#)
                                                              (call-with-values
                                                                (lambda ()
                                                                  (#{cvt\ 3548}#
                                                                    #{x\ 3579}#
                                                                    (+ #{n\ 3550}#
                                                                       1)
                                                                    #{ids\ 3584}#))
                                                                (lambda (#{x\ 3587}#
                                                                         #{ids\ 3588}#)
                                                                  (values
                                                                    (list->vector
                                                                      (cons 'each+
                                                                            (cons #{x\ 3587}#
                                                                                  (cons (reverse
                                                                                          #{ys\ 3583}#)
                                                                                        '(())))))
                                                                    #{ids\ 3588}#))))))
                                                        #{tmp\ 3569}#)
                                                 ((lambda (#{tmp\ 3592}#)
                                                    (if #{tmp\ 3592}#
                                                      (apply (lambda (#{x\ 3595}#
                                                                      #{y\ 3596}#)
                                                               (call-with-values
                                                                 (lambda ()
                                                                   (#{cvt\ 3548}#
                                                                     #{y\ 3596}#
                                                                     #{n\ 3550}#
                                                                     #{ids\ 3551}#))
                                                                 (lambda (#{y\ 3597}#
                                                                          #{ids\ 3598}#)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (#{cvt\ 3548}#
                                                                         #{x\ 3595}#
                                                                         #{n\ 3550}#
                                                                         #{ids\ 3598}#))
                                                                     (lambda (#{x\ 3601}#
                                                                              #{ids\ 3602}#)
                                                                       (values
                                                                         (cons #{x\ 3601}#
                                                                               #{y\ 3597}#)
                                                                         #{ids\ 3602}#))))))
                                                             #{tmp\ 3592}#)
                                                      ((lambda (#{tmp\ 3605}#)
                                                         (if #{tmp\ 3605}#
                                                           (apply (lambda ()
                                                                    (values
                                                                      '()
                                                                      #{ids\ 3551}#))
                                                                  #{tmp\ 3605}#)
                                                           ((lambda (#{tmp\ 3606}#)
                                                              (if #{tmp\ 3606}#
                                                                (apply (lambda (#{x\ 3608}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{cvt\ 3548}#
                                                                               #{x\ 3608}#
                                                                               #{n\ 3550}#
                                                                               #{ids\ 3551}#))
                                                                           (lambda (#{p\ 3610}#
                                                                                    #{ids\ 3611}#)
                                                                             (values
                                                                               (vector
                                                                                 'vector
                                                                                 #{p\ 3610}#)
                                                                               #{ids\ 3611}#))))
                                                                       #{tmp\ 3606}#)
                                                                ((lambda (#{x\ 3615}#)
                                                                   (values
                                                                     (vector
                                                                       'atom
                                                                       (#{strip\ 371}#
                                                                         #{p\ 3549}#
                                                                         '(())))
                                                                     #{ids\ 3551}#))
                                                                 #{tmp\ 3555}#)))
                                                            ($sc-dispatch
                                                              #{tmp\ 3555}#
                                                              '#(vector
                                                                 each-any)))))
                                                       ($sc-dispatch
                                                         #{tmp\ 3555}#
                                                         '()))))
                                                  ($sc-dispatch
                                                    #{tmp\ 3555}#
                                                    '(any . any)))))
                                             ($sc-dispatch
                                               #{tmp\ 3555}#
                                               '(any any . each-any)))))
                                        ($sc-dispatch
                                          #{tmp\ 3555}#
                                          '(any any))))
                                     #{p\ 3549}#))))
                              (#{cvt*\ 3546}#
                                (lambda (#{p*\ 3617}#
                                         #{n\ 3618}#
                                         #{ids\ 3619}#)
                                  (if (null? #{p*\ 3617}#)
                                    (values (quote ()) #{ids\ 3619}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt*\ 3546}#
                                          (cdr #{p*\ 3617}#)
                                          #{n\ 3618}#
                                          #{ids\ 3619}#))
                                      (lambda (#{y\ 3623}# #{ids\ 3624}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 3548}#
                                              (car #{p*\ 3617}#)
                                              #{n\ 3618}#
                                              #{ids\ 3624}#))
                                          (lambda (#{x\ 3627}# #{ids\ 3628}#)
                                            (values
                                              (cons #{x\ 3627}# #{y\ 3623}#)
                                              #{ids\ 3628}#)))))))))
                       (#{cvt\ 3548}# #{pattern\ 3541}# 0 (quote ()))))))
          (lambda (#{e\ 3631}#
                   #{r\ 3632}#
                   #{w\ 3633}#
                   #{s\ 3634}#
                   #{mod\ 3635}#)
            (let ((#{e\ 3642}#
                    (#{source-wrap\ 331}#
                      #{e\ 3631}#
                      #{w\ 3633}#
                      #{s\ 3634}#
                      #{mod\ 3635}#)))
              ((lambda (#{tmp\ 3643}#)
                 ((lambda (#{tmp\ 3644}#)
                    (if #{tmp\ 3644}#
                      (apply (lambda (#{_\ 3649}#
                                      #{val\ 3650}#
                                      #{key\ 3651}#
                                      #{m\ 3652}#)
                               (if (and-map
                                     (lambda (#{x\ 3653}#)
                                       (if (#{id?\ 260}# #{x\ 3653}#)
                                         (not (#{ellipsis?\ 361}# #{x\ 3653}#))
                                         #f))
                                     #{key\ 3651}#)
                                 (let ((#{x\ 3659}#
                                         (#{gen-var\ 373}# (quote tmp))))
                                   (#{build-application\ 184}#
                                     #{s\ 3634}#
                                     (#{build-simple-lambda\ 202}#
                                       #f
                                       (list (quote tmp))
                                       #f
                                       (list #{x\ 3659}#)
                                       #f
                                       (#{gen-syntax-case\ 3424}#
                                         (#{build-lexical-reference\ 188}#
                                           'value
                                           #f
                                           'tmp
                                           #{x\ 3659}#)
                                         #{key\ 3651}#
                                         #{m\ 3652}#
                                         #{r\ 3632}#
                                         #{mod\ 3635}#))
                                     (list (#{chi\ 345}#
                                             #{val\ 3650}#
                                             #{r\ 3632}#
                                             '(())
                                             #{mod\ 3635}#))))
                                 (syntax-violation
                                   'syntax-case
                                   "invalid literals list"
                                   #{e\ 3642}#)))
                             #{tmp\ 3644}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 3643}#)))
                  ($sc-dispatch
                    #{tmp\ 3643}#
                    '(any any each-any . each-any))))
               #{e\ 3642}#)))))
      (set! sc-expand
        (lambda (#{x\ 3665}# . #{rest\ 3666}#)
          (if (if (pair? #{x\ 3665}#)
                (equal? (car #{x\ 3665}#) #{noexpand\ 159}#)
                #f)
            (cadr #{x\ 3665}#)
            (let ((#{m\ 3673}#
                    (if (null? #{rest\ 3666}#)
                      'e
                      (car #{rest\ 3666}#)))
                  (#{esew\ 3674}#
                    (if (let ((#{t\ 3677}# (null? #{rest\ 3666}#)))
                          (if #{t\ 3677}#
                            #{t\ 3677}#
                            (null? (cdr #{rest\ 3666}#))))
                      '(eval)
                      (cadr #{rest\ 3666}#))))
              (with-fluid*
                #{*mode*\ 161}#
                #{m\ 3673}#
                (lambda ()
                  (#{chi-top\ 343}#
                    #{x\ 3665}#
                    '()
                    '((top))
                    #{m\ 3673}#
                    #{esew\ 3674}#
                    (cons 'hygiene
                          (module-name (current-module))))))))))
      (set! identifier?
        (lambda (#{x\ 3681}#)
          (#{nonsymbol-id?\ 258}# #{x\ 3681}#)))
      (set! datum->syntax
        (lambda (#{id\ 3683}# #{datum\ 3684}#)
          (#{make-syntax-object\ 222}#
            #{datum\ 3684}#
            (#{syntax-object-wrap\ 228}# #{id\ 3683}#)
            #f)))
      (set! syntax->datum
        (lambda (#{x\ 3687}#)
          (#{strip\ 371}# #{x\ 3687}# (quote (())))))
      (set! generate-temporaries
        (lambda (#{ls\ 3690}#)
          (begin
            (let ((#{x\ 3694}# #{ls\ 3690}#))
              (if (not (list? #{x\ 3694}#))
                (syntax-violation
                  'generate-temporaries
                  "invalid argument"
                  #{x\ 3694}#)))
            (map (lambda (#{x\ 3695}#)
                   (#{wrap\ 329}# (gensym) (quote ((top))) #f))
                 #{ls\ 3690}#))))
      (set! free-identifier=?
        (lambda (#{x\ 3699}# #{y\ 3700}#)
          (begin
            (let ((#{x\ 3705}# #{x\ 3699}#))
              (if (not (#{nonsymbol-id?\ 258}# #{x\ 3705}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 3705}#)))
            (let ((#{x\ 3708}# #{y\ 3700}#))
              (if (not (#{nonsymbol-id?\ 258}# #{x\ 3708}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 3708}#)))
            (#{free-id=?\ 319}# #{x\ 3699}# #{y\ 3700}#))))
      (set! bound-identifier=?
        (lambda (#{x\ 3709}# #{y\ 3710}#)
          (begin
            (let ((#{x\ 3715}# #{x\ 3709}#))
              (if (not (#{nonsymbol-id?\ 258}# #{x\ 3715}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 3715}#)))
            (let ((#{x\ 3718}# #{y\ 3710}#))
              (if (not (#{nonsymbol-id?\ 258}# #{x\ 3718}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 3718}#)))
            (#{bound-id=?\ 321}# #{x\ 3709}# #{y\ 3710}#))))
      (set! syntax-violation
        (lambda (#{who\ 3719}#
                 #{message\ 3720}#
                 #{form\ 3721}#
                 .
                 #{subform\ 3722}#)
          (begin
            (let ((#{x\ 3729}# #{who\ 3719}#))
              (if (not ((lambda (#{x\ 3730}#)
                          (let ((#{t\ 3734}# (not #{x\ 3730}#)))
                            (if #{t\ 3734}#
                              #{t\ 3734}#
                              (let ((#{t\ 3737}# (string? #{x\ 3730}#)))
                                (if #{t\ 3737}#
                                  #{t\ 3737}#
                                  (symbol? #{x\ 3730}#))))))
                        #{x\ 3729}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 3729}#)))
            (let ((#{x\ 3741}# #{message\ 3720}#))
              (if (not (string? #{x\ 3741}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 3741}#)))
            (scm-error
              'syntax-error
              'sc-expand
              (string-append
                (if #{who\ 3719}# "~a: " "")
                "~a "
                (if (null? #{subform\ 3722}#)
                  "in ~a"
                  "in subform `~s' of `~s'"))
              (let ((#{tail\ 3743}#
                      (cons #{message\ 3720}#
                            (map (lambda (#{x\ 3744}#)
                                   (#{strip\ 371}# #{x\ 3744}# (quote (()))))
                                 (append
                                   #{subform\ 3722}#
                                   (list #{form\ 3721}#))))))
                (if #{who\ 3719}#
                  (cons #{who\ 3719}# #{tail\ 3743}#)
                  #{tail\ 3743}#))
              #f))))
      (letrec ((#{match\ 3760}#
                 (lambda (#{e\ 3761}#
                          #{p\ 3762}#
                          #{w\ 3763}#
                          #{r\ 3764}#
                          #{mod\ 3765}#)
                   (if (not #{r\ 3764}#)
                     #f
                     (if (eq? #{p\ 3762}# (quote any))
                       (cons (#{wrap\ 329}#
                               #{e\ 3761}#
                               #{w\ 3763}#
                               #{mod\ 3765}#)
                             #{r\ 3764}#)
                       (if (#{syntax-object?\ 224}# #{e\ 3761}#)
                         (#{match*\ 3758}#
                           (#{syntax-object-expression\ 226}# #{e\ 3761}#)
                           #{p\ 3762}#
                           (#{join-wraps\ 311}#
                             #{w\ 3763}#
                             (#{syntax-object-wrap\ 228}# #{e\ 3761}#))
                           #{r\ 3764}#
                           (#{syntax-object-module\ 230}# #{e\ 3761}#))
                         (#{match*\ 3758}#
                           #{e\ 3761}#
                           #{p\ 3762}#
                           #{w\ 3763}#
                           #{r\ 3764}#
                           #{mod\ 3765}#))))))
               (#{match*\ 3758}#
                 (lambda (#{e\ 3778}#
                          #{p\ 3779}#
                          #{w\ 3780}#
                          #{r\ 3781}#
                          #{mod\ 3782}#)
                   (if (null? #{p\ 3779}#)
                     (if (null? #{e\ 3778}#) #{r\ 3781}# #f)
                     (if (pair? #{p\ 3779}#)
                       (if (pair? #{e\ 3778}#)
                         (#{match\ 3760}#
                           (car #{e\ 3778}#)
                           (car #{p\ 3779}#)
                           #{w\ 3780}#
                           (#{match\ 3760}#
                             (cdr #{e\ 3778}#)
                             (cdr #{p\ 3779}#)
                             #{w\ 3780}#
                             #{r\ 3781}#
                             #{mod\ 3782}#)
                           #{mod\ 3782}#)
                         #f)
                       (if (eq? #{p\ 3779}# (quote each-any))
                         (let ((#{l\ 3799}#
                                 (#{match-each-any\ 3752}#
                                   #{e\ 3778}#
                                   #{w\ 3780}#
                                   #{mod\ 3782}#)))
                           (if #{l\ 3799}#
                             (cons #{l\ 3799}# #{r\ 3781}#)
                             #f))
                         (let ((#{atom-key\ 3805}# (vector-ref #{p\ 3779}# 0)))
                           (if (memv #{atom-key\ 3805}# (quote (each)))
                             (if (null? #{e\ 3778}#)
                               (#{match-empty\ 3754}#
                                 (vector-ref #{p\ 3779}# 1)
                                 #{r\ 3781}#)
                               (let ((#{l\ 3808}#
                                       (#{match-each\ 3748}#
                                         #{e\ 3778}#
                                         (vector-ref #{p\ 3779}# 1)
                                         #{w\ 3780}#
                                         #{mod\ 3782}#)))
                                 (if #{l\ 3808}#
                                   (letrec ((#{collect\ 3813}#
                                              (lambda (#{l\ 3814}#)
                                                (if (null? (car #{l\ 3814}#))
                                                  #{r\ 3781}#
                                                  (cons (map car #{l\ 3814}#)
                                                        (#{collect\ 3813}#
                                                          (map cdr
                                                               #{l\ 3814}#)))))))
                                     (#{collect\ 3813}# #{l\ 3808}#))
                                   #f)))
                             (if (memv #{atom-key\ 3805}# (quote (each+)))
                               (call-with-values
                                 (lambda ()
                                   (#{match-each+\ 3750}#
                                     #{e\ 3778}#
                                     (vector-ref #{p\ 3779}# 1)
                                     (vector-ref #{p\ 3779}# 2)
                                     (vector-ref #{p\ 3779}# 3)
                                     #{w\ 3780}#
                                     #{r\ 3781}#
                                     #{mod\ 3782}#))
                                 (lambda (#{xr*\ 3816}#
                                          #{y-pat\ 3817}#
                                          #{r\ 3818}#)
                                   (if #{r\ 3818}#
                                     (if (null? #{y-pat\ 3817}#)
                                       (if (null? #{xr*\ 3816}#)
                                         (#{match-empty\ 3754}#
                                           (vector-ref #{p\ 3779}# 1)
                                           #{r\ 3818}#)
                                         (#{combine\ 3756}#
                                           #{xr*\ 3816}#
                                           #{r\ 3818}#))
                                       #f)
                                     #f)))
                               (if (memv #{atom-key\ 3805}# (quote (free-id)))
                                 (if (#{id?\ 260}# #{e\ 3778}#)
                                   (if (#{free-id=?\ 319}#
                                         (#{wrap\ 329}#
                                           #{e\ 3778}#
                                           #{w\ 3780}#
                                           #{mod\ 3782}#)
                                         (vector-ref #{p\ 3779}# 1))
                                     #{r\ 3781}#
                                     #f)
                                   #f)
                                 (if (memv #{atom-key\ 3805}# (quote (atom)))
                                   (if (equal?
                                         (vector-ref #{p\ 3779}# 1)
                                         (#{strip\ 371}#
                                           #{e\ 3778}#
                                           #{w\ 3780}#))
                                     #{r\ 3781}#
                                     #f)
                                   (if (memv #{atom-key\ 3805}#
                                             '(vector))
                                     (if (vector? #{e\ 3778}#)
                                       (#{match\ 3760}#
                                         (vector->list #{e\ 3778}#)
                                         (vector-ref #{p\ 3779}# 1)
                                         #{w\ 3780}#
                                         #{r\ 3781}#
                                         #{mod\ 3782}#)
                                       #f))))))))))))
               (#{combine\ 3756}#
                 (lambda (#{r*\ 3835}# #{r\ 3836}#)
                   (if (null? (car #{r*\ 3835}#))
                     #{r\ 3836}#
                     (cons (map car #{r*\ 3835}#)
                           (#{combine\ 3756}#
                             (map cdr #{r*\ 3835}#)
                             #{r\ 3836}#)))))
               (#{match-empty\ 3754}#
                 (lambda (#{p\ 3839}# #{r\ 3840}#)
                   (if (null? #{p\ 3839}#)
                     #{r\ 3840}#
                     (if (eq? #{p\ 3839}# (quote any))
                       (cons (quote ()) #{r\ 3840}#)
                       (if (pair? #{p\ 3839}#)
                         (#{match-empty\ 3754}#
                           (car #{p\ 3839}#)
                           (#{match-empty\ 3754}#
                             (cdr #{p\ 3839}#)
                             #{r\ 3840}#))
                         (if (eq? #{p\ 3839}# (quote each-any))
                           (cons (quote ()) #{r\ 3840}#)
                           (let ((#{atom-key\ 3854}#
                                   (vector-ref #{p\ 3839}# 0)))
                             (if (memv #{atom-key\ 3854}# (quote (each)))
                               (#{match-empty\ 3754}#
                                 (vector-ref #{p\ 3839}# 1)
                                 #{r\ 3840}#)
                               (if (memv #{atom-key\ 3854}# (quote (each+)))
                                 (#{match-empty\ 3754}#
                                   (vector-ref #{p\ 3839}# 1)
                                   (#{match-empty\ 3754}#
                                     (reverse (vector-ref #{p\ 3839}# 2))
                                     (#{match-empty\ 3754}#
                                       (vector-ref #{p\ 3839}# 3)
                                       #{r\ 3840}#)))
                                 (if (memv #{atom-key\ 3854}#
                                           '(free-id atom))
                                   #{r\ 3840}#
                                   (if (memv #{atom-key\ 3854}#
                                             '(vector))
                                     (#{match-empty\ 3754}#
                                       (vector-ref #{p\ 3839}# 1)
                                       #{r\ 3840}#))))))))))))
               (#{match-each-any\ 3752}#
                 (lambda (#{e\ 3859}# #{w\ 3860}# #{mod\ 3861}#)
                   (if (pair? #{e\ 3859}#)
                     (let ((#{l\ 3868}#
                             (#{match-each-any\ 3752}#
                               (cdr #{e\ 3859}#)
                               #{w\ 3860}#
                               #{mod\ 3861}#)))
                       (if #{l\ 3868}#
                         (cons (#{wrap\ 329}#
                                 (car #{e\ 3859}#)
                                 #{w\ 3860}#
                                 #{mod\ 3861}#)
                               #{l\ 3868}#)
                         #f))
                     (if (null? #{e\ 3859}#)
                       '()
                       (if (#{syntax-object?\ 224}# #{e\ 3859}#)
                         (#{match-each-any\ 3752}#
                           (#{syntax-object-expression\ 226}# #{e\ 3859}#)
                           (#{join-wraps\ 311}#
                             #{w\ 3860}#
                             (#{syntax-object-wrap\ 228}# #{e\ 3859}#))
                           #{mod\ 3861}#)
                         #f)))))
               (#{match-each+\ 3750}#
                 (lambda (#{e\ 3876}#
                          #{x-pat\ 3877}#
                          #{y-pat\ 3878}#
                          #{z-pat\ 3879}#
                          #{w\ 3880}#
                          #{r\ 3881}#
                          #{mod\ 3882}#)
                   (letrec ((#{f\ 3893}#
                              (lambda (#{e\ 3894}# #{w\ 3895}#)
                                (if (pair? #{e\ 3894}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{f\ 3893}#
                                        (cdr #{e\ 3894}#)
                                        #{w\ 3895}#))
                                    (lambda (#{xr*\ 3898}#
                                             #{y-pat\ 3899}#
                                             #{r\ 3900}#)
                                      (if #{r\ 3900}#
                                        (if (null? #{y-pat\ 3899}#)
                                          (let ((#{xr\ 3905}#
                                                  (#{match\ 3760}#
                                                    (car #{e\ 3894}#)
                                                    #{x-pat\ 3877}#
                                                    #{w\ 3895}#
                                                    '()
                                                    #{mod\ 3882}#)))
                                            (if #{xr\ 3905}#
                                              (values
                                                (cons #{xr\ 3905}#
                                                      #{xr*\ 3898}#)
                                                #{y-pat\ 3899}#
                                                #{r\ 3900}#)
                                              (values #f #f #f)))
                                          (values
                                            '()
                                            (cdr #{y-pat\ 3899}#)
                                            (#{match\ 3760}#
                                              (car #{e\ 3894}#)
                                              (car #{y-pat\ 3899}#)
                                              #{w\ 3895}#
                                              #{r\ 3900}#
                                              #{mod\ 3882}#)))
                                        (values #f #f #f))))
                                  (if (#{syntax-object?\ 224}# #{e\ 3894}#)
                                    (#{f\ 3893}#
                                      (#{syntax-object-expression\ 226}#
                                        #{e\ 3894}#)
                                      (#{join-wraps\ 311}#
                                        #{w\ 3895}#
                                        #{e\ 3894}#))
                                    (values
                                      '()
                                      #{y-pat\ 3878}#
                                      (#{match\ 3760}#
                                        #{e\ 3894}#
                                        #{z-pat\ 3879}#
                                        #{w\ 3895}#
                                        #{r\ 3881}#
                                        #{mod\ 3882}#)))))))
                     (#{f\ 3893}# #{e\ 3876}# #{w\ 3880}#))))
               (#{match-each\ 3748}#
                 (lambda (#{e\ 3909}#
                          #{p\ 3910}#
                          #{w\ 3911}#
                          #{mod\ 3912}#)
                   (if (pair? #{e\ 3909}#)
                     (let ((#{first\ 3920}#
                             (#{match\ 3760}#
                               (car #{e\ 3909}#)
                               #{p\ 3910}#
                               #{w\ 3911}#
                               '()
                               #{mod\ 3912}#)))
                       (if #{first\ 3920}#
                         (let ((#{rest\ 3924}#
                                 (#{match-each\ 3748}#
                                   (cdr #{e\ 3909}#)
                                   #{p\ 3910}#
                                   #{w\ 3911}#
                                   #{mod\ 3912}#)))
                           (if #{rest\ 3924}#
                             (cons #{first\ 3920}# #{rest\ 3924}#)
                             #f))
                         #f))
                     (if (null? #{e\ 3909}#)
                       '()
                       (if (#{syntax-object?\ 224}# #{e\ 3909}#)
                         (#{match-each\ 3748}#
                           (#{syntax-object-expression\ 226}# #{e\ 3909}#)
                           #{p\ 3910}#
                           (#{join-wraps\ 311}#
                             #{w\ 3911}#
                             (#{syntax-object-wrap\ 228}# #{e\ 3909}#))
                           (#{syntax-object-module\ 230}# #{e\ 3909}#))
                         #f))))))
        (set! $sc-dispatch
          (lambda (#{e\ 3932}# #{p\ 3933}#)
            (if (eq? #{p\ 3933}# (quote any))
              (list #{e\ 3932}#)
              (if (#{syntax-object?\ 224}# #{e\ 3932}#)
                (#{match*\ 3758}#
                  (#{syntax-object-expression\ 226}# #{e\ 3932}#)
                  #{p\ 3933}#
                  (#{syntax-object-wrap\ 228}# #{e\ 3932}#)
                  '()
                  (#{syntax-object-module\ 230}# #{e\ 3932}#))
                (#{match*\ 3758}#
                  #{e\ 3932}#
                  #{p\ 3933}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syncase-macro
    'macro
    (cons (lambda (#{x\ 3942}#)
            ((lambda (#{tmp\ 3944}#)
               ((lambda (#{tmp\ 3945}#)
                  (if #{tmp\ 3945}#
                    (apply (lambda (#{_\ 3949}# #{e1\ 3950}# #{e2\ 3951}#)
                             (cons '#(syntax-object
                                      begin
                                      ((top)
                                       #(ribcage
                                         #(_ e1 e2)
                                         #((top) (top) (top))
                                         #("i3946" "i3947" "i3948"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i3943")))
                                      (hygiene guile))
                                   (cons #{e1\ 3950}# #{e2\ 3951}#)))
                           #{tmp\ 3945}#)
                    ((lambda (#{tmp\ 3953}#)
                       (if #{tmp\ 3953}#
                         (apply (lambda (#{_\ 3959}#
                                         #{out\ 3960}#
                                         #{in\ 3961}#
                                         #{e1\ 3962}#
                                         #{e2\ 3963}#)
                                  (list '#(syntax-object
                                           syntax-case
                                           ((top)
                                            #(ribcage
                                              #(_ out in e1 e2)
                                              #((top) (top) (top) (top) (top))
                                              #("i3954"
                                                "i3955"
                                                "i3956"
                                                "i3957"
                                                "i3958"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i3943")))
                                           (hygiene guile))
                                        #{in\ 3961}#
                                        '()
                                        (list #{out\ 3960}#
                                              (cons '#(syntax-object
                                                       begin
                                                       ((top)
                                                        #(ribcage
                                                          #(_ out in e1 e2)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i3954"
                                                            "i3955"
                                                            "i3956"
                                                            "i3957"
                                                            "i3958"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i3943")))
                                                       (hygiene guile))
                                                    (cons #{e1\ 3962}#
                                                          #{e2\ 3963}#)))))
                                #{tmp\ 3953}#)
                         ((lambda (#{tmp\ 3965}#)
                            (if #{tmp\ 3965}#
                              (apply (lambda (#{_\ 3971}#
                                              #{out\ 3972}#
                                              #{in\ 3973}#
                                              #{e1\ 3974}#
                                              #{e2\ 3975}#)
                                       (list '#(syntax-object
                                                syntax-case
                                                ((top)
                                                 #(ribcage
                                                   #(_ out in e1 e2)
                                                   #((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                   #("i3966"
                                                     "i3967"
                                                     "i3968"
                                                     "i3969"
                                                     "i3970"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i3943")))
                                                (hygiene guile))
                                             (cons '#(syntax-object
                                                      list
                                                      ((top)
                                                       #(ribcage
                                                         #(_ out in e1 e2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i3966"
                                                           "i3967"
                                                           "i3968"
                                                           "i3969"
                                                           "i3970"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i3943")))
                                                      (hygiene guile))
                                                   #{in\ 3973}#)
                                             '()
                                             (list #{out\ 3972}#
                                                   (cons '#(syntax-object
                                                            begin
                                                            ((top)
                                                             #(ribcage
                                                               #(_
                                                                 out
                                                                 in
                                                                 e1
                                                                 e2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i3966"
                                                                 "i3967"
                                                                 "i3968"
                                                                 "i3969"
                                                                 "i3970"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i3943")))
                                                            (hygiene guile))
                                                         (cons #{e1\ 3974}#
                                                               #{e2\ 3975}#)))))
                                     #{tmp\ 3965}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 3944}#)))
                          ($sc-dispatch
                            #{tmp\ 3944}#
                            '(any #(each (any any)) any . each-any)))))
                     ($sc-dispatch
                       #{tmp\ 3944}#
                       '(any ((any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 3944}#
                  '(any () any . each-any))))
             #{x\ 3942}#))
          (module-name (current-module)))))

(define syntax-rules
  (make-syncase-macro
    'macro
    (cons (lambda (#{x\ 3979}#)
            ((lambda (#{tmp\ 3981}#)
               ((lambda (#{tmp\ 3982}#)
                  (if #{tmp\ 3982}#
                    (apply (lambda (#{_\ 3988}#
                                    #{k\ 3989}#
                                    #{keyword\ 3990}#
                                    #{pattern\ 3991}#
                                    #{template\ 3992}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ k keyword pattern template)
                                         #((top) (top) (top) (top) (top))
                                         #("i3983"
                                           "i3984"
                                           "i3985"
                                           "i3986"
                                           "i3987"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i3980")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ k keyword pattern template)
                                          #((top) (top) (top) (top) (top))
                                          #("i3983"
                                            "i3984"
                                            "i3985"
                                            "i3986"
                                            "i3987"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i3980")))
                                       (hygiene guile)))
                                   (cons '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ k keyword pattern template)
                                               #((top) (top) (top) (top) (top))
                                               #("i3983"
                                                 "i3984"
                                                 "i3985"
                                                 "i3986"
                                                 "i3987"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i3980")))
                                            (hygiene guile))
                                         (cons '#(syntax-object
                                                  x
                                                  ((top)
                                                   #(ribcage
                                                     #(_
                                                       k
                                                       keyword
                                                       pattern
                                                       template)
                                                     #((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                     #("i3983"
                                                       "i3984"
                                                       "i3985"
                                                       "i3986"
                                                       "i3987"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i3980")))
                                                  (hygiene guile))
                                               (cons #{k\ 3989}#
                                                     (map (lambda (#{tmp\ 3995}#
                                                                   #{tmp\ 3994}#)
                                                            (list (cons '#(syntax-object
                                                                           dummy
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i3983"
                                                                                "i3984"
                                                                                "i3985"
                                                                                "i3986"
                                                                                "i3987"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i3980")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 3994}#)
                                                                  (list '#(syntax-object
                                                                           syntax
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i3983"
                                                                                "i3984"
                                                                                "i3985"
                                                                                "i3986"
                                                                                "i3987"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i3980")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 3995}#)))
                                                          #{template\ 3992}#
                                                          #{pattern\ 3991}#))))))
                           #{tmp\ 3982}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 3981}#)))
                ($sc-dispatch
                  #{tmp\ 3981}#
                  '(any each-any . #(each ((any . any) any))))))
             #{x\ 3979}#))
          (module-name (current-module)))))

(define let*
  (make-extended-syncase-macro
    (module-ref (current-module) (quote let*))
    'macro
    (cons (lambda (#{x\ 3996}#)
            ((lambda (#{tmp\ 3998}#)
               ((lambda (#{tmp\ 3999}#)
                  (if (if #{tmp\ 3999}#
                        (apply (lambda (#{let*\ 4005}#
                                        #{x\ 4006}#
                                        #{v\ 4007}#
                                        #{e1\ 4008}#
                                        #{e2\ 4009}#)
                                 (and-map identifier? #{x\ 4006}#))
                               #{tmp\ 3999}#)
                        #f)
                    (apply (lambda (#{let*\ 4016}#
                                    #{x\ 4017}#
                                    #{v\ 4018}#
                                    #{e1\ 4019}#
                                    #{e2\ 4020}#)
                             (letrec ((#{f\ 4023}#
                                        (lambda (#{bindings\ 4024}#)
                                          (if (null? #{bindings\ 4024}#)
                                            (cons '#(syntax-object
                                                     let
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f bindings)
                                                        #((top) (top))
                                                        #("i4021" "i4022"))
                                                      #(ribcage
                                                        #(let* x v e1 e2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4011"
                                                          "i4012"
                                                          "i4013"
                                                          "i4014"
                                                          "i4015"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i3997")))
                                                     (hygiene guile))
                                                  (cons '()
                                                        (cons #{e1\ 4019}#
                                                              #{e2\ 4020}#)))
                                            ((lambda (#{tmp\ 4029}#)
                                               ((lambda (#{tmp\ 4030}#)
                                                  (if #{tmp\ 4030}#
                                                    (apply (lambda (#{body\ 4033}#
                                                                    #{binding\ 4034}#)
                                                             (list '#(syntax-object
                                                                      let
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(body
                                                                           binding)
                                                                         #((top)
                                                                           (top))
                                                                         #("i4031"
                                                                           "i4032"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           bindings)
                                                                         #((top)
                                                                           (top))
                                                                         #("i4021"
                                                                           "i4022"))
                                                                       #(ribcage
                                                                         #(let*
                                                                           x
                                                                           v
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4011"
                                                                           "i4012"
                                                                           "i4013"
                                                                           "i4014"
                                                                           "i4015"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i3997")))
                                                                      (hygiene
                                                                        guile))
                                                                   (list #{binding\ 4034}#)
                                                                   #{body\ 4033}#))
                                                           #{tmp\ 4030}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 4029}#)))
                                                ($sc-dispatch
                                                  #{tmp\ 4029}#
                                                  '(any any))))
                                             (list (#{f\ 4023}#
                                                     (cdr #{bindings\ 4024}#))
                                                   (car #{bindings\ 4024}#)))))))
                               (#{f\ 4023}#
                                 (map list #{x\ 4017}# #{v\ 4018}#))))
                           #{tmp\ 3999}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 3998}#)))
                ($sc-dispatch
                  #{tmp\ 3998}#
                  '(any #(each (any any)) any . each-any))))
             #{x\ 3996}#))
          (module-name (current-module)))))

(define do
  (make-syncase-macro
    'macro
    (cons (lambda (#{orig-x\ 4035}#)
            ((lambda (#{tmp\ 4037}#)
               ((lambda (#{tmp\ 4038}#)
                  (if #{tmp\ 4038}#
                    (apply (lambda (#{_\ 4046}#
                                    #{var\ 4047}#
                                    #{init\ 4048}#
                                    #{step\ 4049}#
                                    #{e0\ 4050}#
                                    #{e1\ 4051}#
                                    #{c\ 4052}#)
                             ((lambda (#{tmp\ 4054}#)
                                ((lambda (#{tmp\ 4055}#)
                                   (if #{tmp\ 4055}#
                                     (apply (lambda (#{step\ 4057}#)
                                              ((lambda (#{tmp\ 4058}#)
                                                 ((lambda (#{tmp\ 4059}#)
                                                    (if #{tmp\ 4059}#
                                                      (apply (lambda ()
                                                               (list '#(syntax-object
                                                                        let
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4056"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4039"
                                                                             "i4040"
                                                                             "i4041"
                                                                             "i4042"
                                                                             "i4043"
                                                                             "i4044"
                                                                             "i4045"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4036")))
                                                                        (hygiene
                                                                          guile))
                                                                     '#(syntax-object
                                                                        doloop
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4056"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4039"
                                                                             "i4040"
                                                                             "i4041"
                                                                             "i4042"
                                                                             "i4043"
                                                                             "i4044"
                                                                             "i4045"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4036")))
                                                                        (hygiene
                                                                          guile))
                                                                     (map list
                                                                          #{var\ 4047}#
                                                                          #{init\ 4048}#)
                                                                     (list '#(syntax-object
                                                                              if
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i4056"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i4039"
                                                                                   "i4040"
                                                                                   "i4041"
                                                                                   "i4042"
                                                                                   "i4043"
                                                                                   "i4044"
                                                                                   "i4045"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i4036")))
                                                                              (hygiene
                                                                                guile))
                                                                           (list '#(syntax-object
                                                                                    not
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i4056"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i4039"
                                                                                         "i4040"
                                                                                         "i4041"
                                                                                         "i4042"
                                                                                         "i4043"
                                                                                         "i4044"
                                                                                         "i4045"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i4036")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 #{e0\ 4050}#)
                                                                           (cons '#(syntax-object
                                                                                    begin
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i4056"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i4039"
                                                                                         "i4040"
                                                                                         "i4041"
                                                                                         "i4042"
                                                                                         "i4043"
                                                                                         "i4044"
                                                                                         "i4045"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i4036")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 (append
                                                                                   #{c\ 4052}#
                                                                                   (list (cons '#(syntax-object
                                                                                                  doloop
                                                                                                  ((top)
                                                                                                   #(ribcage
                                                                                                     #(step)
                                                                                                     #((top))
                                                                                                     #("i4056"))
                                                                                                   #(ribcage
                                                                                                     #(_
                                                                                                       var
                                                                                                       init
                                                                                                       step
                                                                                                       e0
                                                                                                       e1
                                                                                                       c)
                                                                                                     #((top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top))
                                                                                                     #("i4039"
                                                                                                       "i4040"
                                                                                                       "i4041"
                                                                                                       "i4042"
                                                                                                       "i4043"
                                                                                                       "i4044"
                                                                                                       "i4045"))
                                                                                                   #(ribcage
                                                                                                     ()
                                                                                                     ()
                                                                                                     ())
                                                                                                   #(ribcage
                                                                                                     #(orig-x)
                                                                                                     #((top))
                                                                                                     #("i4036")))
                                                                                                  (hygiene
                                                                                                    guile))
                                                                                               #{step\ 4057}#)))))))
                                                             #{tmp\ 4059}#)
                                                      ((lambda (#{tmp\ 4064}#)
                                                         (if #{tmp\ 4064}#
                                                           (apply (lambda (#{e1\ 4067}#
                                                                           #{e2\ 4068}#)
                                                                    (list '#(syntax-object
                                                                             let
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4065"
                                                                                  "i4066"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4056"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4039"
                                                                                  "i4040"
                                                                                  "i4041"
                                                                                  "i4042"
                                                                                  "i4043"
                                                                                  "i4044"
                                                                                  "i4045"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4036")))
                                                                             (hygiene
                                                                               guile))
                                                                          '#(syntax-object
                                                                             doloop
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4065"
                                                                                  "i4066"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4056"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4039"
                                                                                  "i4040"
                                                                                  "i4041"
                                                                                  "i4042"
                                                                                  "i4043"
                                                                                  "i4044"
                                                                                  "i4045"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4036")))
                                                                             (hygiene
                                                                               guile))
                                                                          (map list
                                                                               #{var\ 4047}#
                                                                               #{init\ 4048}#)
                                                                          (list '#(syntax-object
                                                                                   if
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4065"
                                                                                        "i4066"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i4056"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4039"
                                                                                        "i4040"
                                                                                        "i4041"
                                                                                        "i4042"
                                                                                        "i4043"
                                                                                        "i4044"
                                                                                        "i4045"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i4036")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                #{e0\ 4050}#
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i4065"
                                                                                              "i4066"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i4056"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4039"
                                                                                              "i4040"
                                                                                              "i4041"
                                                                                              "i4042"
                                                                                              "i4043"
                                                                                              "i4044"
                                                                                              "i4045"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i4036")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (cons #{e1\ 4067}#
                                                                                            #{e2\ 4068}#))
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i4065"
                                                                                              "i4066"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i4056"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4039"
                                                                                              "i4040"
                                                                                              "i4041"
                                                                                              "i4042"
                                                                                              "i4043"
                                                                                              "i4044"
                                                                                              "i4045"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i4036")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (append
                                                                                        #{c\ 4052}#
                                                                                        (list (cons '#(syntax-object
                                                                                                       doloop
                                                                                                       ((top)
                                                                                                        #(ribcage
                                                                                                          #(e1
                                                                                                            e2)
                                                                                                          #((top)
                                                                                                            (top))
                                                                                                          #("i4065"
                                                                                                            "i4066"))
                                                                                                        #(ribcage
                                                                                                          #(step)
                                                                                                          #((top))
                                                                                                          #("i4056"))
                                                                                                        #(ribcage
                                                                                                          #(_
                                                                                                            var
                                                                                                            init
                                                                                                            step
                                                                                                            e0
                                                                                                            e1
                                                                                                            c)
                                                                                                          #((top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top))
                                                                                                          #("i4039"
                                                                                                            "i4040"
                                                                                                            "i4041"
                                                                                                            "i4042"
                                                                                                            "i4043"
                                                                                                            "i4044"
                                                                                                            "i4045"))
                                                                                                        #(ribcage
                                                                                                          ()
                                                                                                          ()
                                                                                                          ())
                                                                                                        #(ribcage
                                                                                                          #(orig-x)
                                                                                                          #((top))
                                                                                                          #("i4036")))
                                                                                                       (hygiene
                                                                                                         guile))
                                                                                                    #{step\ 4057}#)))))))
                                                                  #{tmp\ 4064}#)
                                                           (syntax-violation
                                                             #f
                                                             "source expression failed to match any pattern"
                                                             #{tmp\ 4058}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4058}#
                                                         '(any . each-any)))))
                                                  ($sc-dispatch
                                                    #{tmp\ 4058}#
                                                    '())))
                                               #{e1\ 4051}#))
                                            #{tmp\ 4055}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp\ 4054}#)))
                                 ($sc-dispatch
                                   #{tmp\ 4054}#
                                   'each-any)))
                              (map (lambda (#{v\ 4075}# #{s\ 4076}#)
                                     ((lambda (#{tmp\ 4079}#)
                                        ((lambda (#{tmp\ 4080}#)
                                           (if #{tmp\ 4080}#
                                             (apply (lambda () #{v\ 4075}#)
                                                    #{tmp\ 4080}#)
                                             ((lambda (#{tmp\ 4081}#)
                                                (if #{tmp\ 4081}#
                                                  (apply (lambda (#{e\ 4083}#)
                                                           #{e\ 4083}#)
                                                         #{tmp\ 4081}#)
                                                  ((lambda (#{_\ 4085}#)
                                                     (syntax-violation
                                                       'do
                                                       "bad step expression"
                                                       #{orig-x\ 4035}#
                                                       #{s\ 4076}#))
                                                   #{tmp\ 4079}#)))
                                              ($sc-dispatch
                                                #{tmp\ 4079}#
                                                '(any)))))
                                         ($sc-dispatch
                                           #{tmp\ 4079}#
                                           '())))
                                      #{s\ 4076}#))
                                   #{var\ 4047}#
                                   #{step\ 4049}#)))
                           #{tmp\ 4038}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4037}#)))
                ($sc-dispatch
                  #{tmp\ 4037}#
                  '(any #(each (any any . any))
                        (any . each-any)
                        .
                        each-any))))
             #{orig-x\ 4035}#))
          (module-name (current-module)))))

(define quasiquote
  (make-syncase-macro
    'macro
    (cons (letrec ((#{quasicons\ 4092}#
                     (lambda (#{x\ 4096}# #{y\ 4097}#)
                       ((lambda (#{tmp\ 4101}#)
                          ((lambda (#{tmp\ 4102}#)
                             (if #{tmp\ 4102}#
                               (apply (lambda (#{x\ 4105}# #{y\ 4106}#)
                                        ((lambda (#{tmp\ 4107}#)
                                           ((lambda (#{tmp\ 4108}#)
                                              (if #{tmp\ 4108}#
                                                (apply (lambda (#{dy\ 4110}#)
                                                         ((lambda (#{tmp\ 4111}#)
                                                            ((lambda (#{tmp\ 4112}#)
                                                               (if #{tmp\ 4112}#
                                                                 (apply (lambda (#{dx\ 4114}#)
                                                                          (list '#(syntax-object
                                                                                   quote
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(dx)
                                                                                      #((top))
                                                                                      #("i4113"))
                                                                                    #(ribcage
                                                                                      #(dy)
                                                                                      #((top))
                                                                                      #("i4109"))
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4103"
                                                                                        "i4104"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4098"
                                                                                        "i4099"))
                                                                                    #(ribcage
                                                                                      #(quasicons
                                                                                        quasiappend
                                                                                        quasivector
                                                                                        quasi)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4088"
                                                                                        "i4089"
                                                                                        "i4090"
                                                                                        "i4091")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{dx\ 4114}#
                                                                                      #{dy\ 4110}#)))
                                                                        #{tmp\ 4112}#)
                                                                 ((lambda (#{_\ 4116}#)
                                                                    (if (null? #{dy\ 4110}#)
                                                                      (list '#(syntax-object
                                                                               list
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i4115"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i4109"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4103"
                                                                                    "i4104"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4098"
                                                                                    "i4099"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i4088"
                                                                                    "i4089"
                                                                                    "i4090"
                                                                                    "i4091")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 4105}#)
                                                                      (list '#(syntax-object
                                                                               cons
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i4115"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i4109"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4103"
                                                                                    "i4104"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4098"
                                                                                    "i4099"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i4088"
                                                                                    "i4089"
                                                                                    "i4090"
                                                                                    "i4091")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 4105}#
                                                                            #{y\ 4106}#)))
                                                                  #{tmp\ 4111}#)))
                                                             ($sc-dispatch
                                                               #{tmp\ 4111}#
                                                               '(#(free-id
                                                                   #(syntax-object
                                                                     quote
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(dy)
                                                                        #((top))
                                                                        #("i4109"))
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i4103"
                                                                          "i4104"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i4098"
                                                                          "i4099"))
                                                                      #(ribcage
                                                                        #(quasicons
                                                                          quasiappend
                                                                          quasivector
                                                                          quasi)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i4088"
                                                                          "i4089"
                                                                          "i4090"
                                                                          "i4091")))
                                                                     (hygiene
                                                                       guile)))
                                                                 any))))
                                                          #{x\ 4105}#))
                                                       #{tmp\ 4108}#)
                                                ((lambda (#{tmp\ 4117}#)
                                                   (if #{tmp\ 4117}#
                                                     (apply (lambda (#{stuff\ 4119}#)
                                                              (cons '#(syntax-object
                                                                       list
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(stuff)
                                                                          #((top))
                                                                          #("i4118"))
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4103"
                                                                            "i4104"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4098"
                                                                            "i4099"))
                                                                        #(ribcage
                                                                          #(quasicons
                                                                            quasiappend
                                                                            quasivector
                                                                            quasi)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4088"
                                                                            "i4089"
                                                                            "i4090"
                                                                            "i4091")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{x\ 4105}#
                                                                          #{stuff\ 4119}#)))
                                                            #{tmp\ 4117}#)
                                                     ((lambda (#{else\ 4121}#)
                                                        (list '#(syntax-object
                                                                 cons
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i4120"))
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4103"
                                                                      "i4104"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4098"
                                                                      "i4099"))
                                                                  #(ribcage
                                                                    #(quasicons
                                                                      quasiappend
                                                                      quasivector
                                                                      quasi)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4088"
                                                                      "i4089"
                                                                      "i4090"
                                                                      "i4091")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x\ 4105}#
                                                              #{y\ 4106}#))
                                                      #{tmp\ 4107}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 4107}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         list
                                                         ((top)
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i4103" "i4104"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i4098" "i4099"))
                                                          #(ribcage
                                                            #(quasicons
                                                              quasiappend
                                                              quasivector
                                                              quasi)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4088"
                                                              "i4089"
                                                              "i4090"
                                                              "i4091")))
                                                         (hygiene guile)))
                                                     .
                                                     any)))))
                                            ($sc-dispatch
                                              #{tmp\ 4107}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4103" "i4104"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4098" "i4099"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i4088"
                                                         "i4089"
                                                         "i4090"
                                                         "i4091")))
                                                    (hygiene guile)))
                                                any))))
                                         #{y\ 4106}#))
                                      #{tmp\ 4102}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4101}#)))
                           ($sc-dispatch #{tmp\ 4101}# (quote (any any)))))
                        (list #{x\ 4096}# #{y\ 4097}#))))
                   (#{quasiappend\ 4093}#
                     (lambda (#{x\ 4122}# #{y\ 4123}#)
                       ((lambda (#{tmp\ 4127}#)
                          ((lambda (#{tmp\ 4128}#)
                             (if #{tmp\ 4128}#
                               (apply (lambda (#{x\ 4131}# #{y\ 4132}#)
                                        ((lambda (#{tmp\ 4133}#)
                                           ((lambda (#{tmp\ 4134}#)
                                              (if #{tmp\ 4134}#
                                                (apply (lambda () #{x\ 4131}#)
                                                       #{tmp\ 4134}#)
                                                ((lambda (#{_\ 4136}#)
                                                   (list '#(syntax-object
                                                            append
                                                            ((top)
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i4135"))
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i4129"
                                                                 "i4130"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i4124"
                                                                 "i4125"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4088"
                                                                 "i4089"
                                                                 "i4090"
                                                                 "i4091")))
                                                            (hygiene guile))
                                                         #{x\ 4131}#
                                                         #{y\ 4132}#))
                                                 #{tmp\ 4133}#)))
                                            ($sc-dispatch
                                              #{tmp\ 4133}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4129" "i4130"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4124" "i4125"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i4088"
                                                         "i4089"
                                                         "i4090"
                                                         "i4091")))
                                                    (hygiene guile)))
                                                ()))))
                                         #{y\ 4132}#))
                                      #{tmp\ 4128}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4127}#)))
                           ($sc-dispatch #{tmp\ 4127}# (quote (any any)))))
                        (list #{x\ 4122}# #{y\ 4123}#))))
                   (#{quasivector\ 4094}#
                     (lambda (#{x\ 4137}#)
                       ((lambda (#{tmp\ 4140}#)
                          ((lambda (#{x\ 4142}#)
                             ((lambda (#{tmp\ 4143}#)
                                ((lambda (#{tmp\ 4144}#)
                                   (if #{tmp\ 4144}#
                                     (apply (lambda (#{x\ 4146}#)
                                              (list '#(syntax-object
                                                       quote
                                                       ((top)
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4145"))
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4141"))
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4138"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4088"
                                                            "i4089"
                                                            "i4090"
                                                            "i4091")))
                                                       (hygiene guile))
                                                    (list->vector
                                                      #{x\ 4146}#)))
                                            #{tmp\ 4144}#)
                                     ((lambda (#{tmp\ 4148}#)
                                        (if #{tmp\ 4148}#
                                          (apply (lambda (#{x\ 4150}#)
                                                   (cons '#(syntax-object
                                                            vector
                                                            ((top)
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4149"))
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4141"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4138"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4088"
                                                                 "i4089"
                                                                 "i4090"
                                                                 "i4091")))
                                                            (hygiene guile))
                                                         #{x\ 4150}#))
                                                 #{tmp\ 4148}#)
                                          ((lambda (#{_\ 4153}#)
                                             (list '#(syntax-object
                                                      list->vector
                                                      ((top)
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i4152"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4141"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4138"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4088"
                                                           "i4089"
                                                           "i4090"
                                                           "i4091")))
                                                      (hygiene guile))
                                                   #{x\ 4142}#))
                                           #{tmp\ 4143}#)))
                                      ($sc-dispatch
                                        #{tmp\ 4143}#
                                        '(#(free-id
                                            #(syntax-object
                                              list
                                              ((top)
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4141"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4138"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4088"
                                                   "i4089"
                                                   "i4090"
                                                   "i4091")))
                                              (hygiene guile)))
                                          .
                                          each-any)))))
                                 ($sc-dispatch
                                   #{tmp\ 4143}#
                                   '(#(free-id
                                       #(syntax-object
                                         quote
                                         ((top)
                                          #(ribcage #(x) #((top)) #("i4141"))
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4138"))
                                          #(ribcage
                                            #(quasicons
                                              quasiappend
                                              quasivector
                                              quasi)
                                            #((top) (top) (top) (top))
                                            #("i4088"
                                              "i4089"
                                              "i4090"
                                              "i4091")))
                                         (hygiene guile)))
                                     each-any))))
                              #{x\ 4142}#))
                           #{tmp\ 4140}#))
                        #{x\ 4137}#)))
                   (#{quasi\ 4095}#
                     (lambda (#{p\ 4154}# #{lev\ 4155}#)
                       ((lambda (#{tmp\ 4158}#)
                          ((lambda (#{tmp\ 4159}#)
                             (if #{tmp\ 4159}#
                               (apply (lambda (#{p\ 4161}#)
                                        (if (= #{lev\ 4155}# 0)
                                          #{p\ 4161}#
                                          (#{quasicons\ 4092}#
                                            '(#(syntax-object
                                                quote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i4160"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i4156" "i4157"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4088"
                                                     "i4089"
                                                     "i4090"
                                                     "i4091")))
                                                (hygiene guile))
                                              #(syntax-object
                                                unquote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i4160"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i4156" "i4157"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4088"
                                                     "i4089"
                                                     "i4090"
                                                     "i4091")))
                                                (hygiene guile)))
                                            (#{quasi\ 4095}#
                                              (list #{p\ 4161}#)
                                              (- #{lev\ 4155}# 1)))))
                                      #{tmp\ 4159}#)
                               ((lambda (#{tmp\ 4162}#)
                                  (if (if #{tmp\ 4162}#
                                        (apply (lambda (#{args\ 4164}#)
                                                 (= #{lev\ 4155}# 0))
                                               #{tmp\ 4162}#)
                                        #f)
                                    (apply (lambda (#{args\ 4166}#)
                                             (syntax-violation
                                               'unquote
                                               "unquote takes exactly one argument"
                                               #{p\ 4154}#
                                               (cons '#(syntax-object
                                                        unquote
                                                        ((top)
                                                         #(ribcage
                                                           #(args)
                                                           #((top))
                                                           #("i4165"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(p lev)
                                                           #((top) (top))
                                                           #("i4156" "i4157"))
                                                         #(ribcage
                                                           #(quasicons
                                                             quasiappend
                                                             quasivector
                                                             quasi)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i4088"
                                                             "i4089"
                                                             "i4090"
                                                             "i4091")))
                                                        (hygiene guile))
                                                     #{args\ 4166}#)))
                                           #{tmp\ 4162}#)
                                    ((lambda (#{tmp\ 4167}#)
                                       (if #{tmp\ 4167}#
                                         (apply (lambda (#{p\ 4170}#
                                                         #{q\ 4171}#)
                                                  (if (= #{lev\ 4155}# 0)
                                                    (#{quasiappend\ 4093}#
                                                      #{p\ 4170}#
                                                      (#{quasi\ 4095}#
                                                        #{q\ 4171}#
                                                        #{lev\ 4155}#))
                                                    (#{quasicons\ 4092}#
                                                      (#{quasicons\ 4092}#
                                                        '(#(syntax-object
                                                            quote
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i4168"
                                                                 "i4169"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4156"
                                                                 "i4157"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4088"
                                                                 "i4089"
                                                                 "i4090"
                                                                 "i4091")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            unquote-splicing
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i4168"
                                                                 "i4169"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4156"
                                                                 "i4157"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4088"
                                                                 "i4089"
                                                                 "i4090"
                                                                 "i4091")))
                                                            (hygiene guile)))
                                                        (#{quasi\ 4095}#
                                                          (list #{p\ 4170}#)
                                                          (- #{lev\ 4155}# 1)))
                                                      (#{quasi\ 4095}#
                                                        #{q\ 4171}#
                                                        #{lev\ 4155}#))))
                                                #{tmp\ 4167}#)
                                         ((lambda (#{tmp\ 4172}#)
                                            (if (if #{tmp\ 4172}#
                                                  (apply (lambda (#{args\ 4175}#
                                                                  #{q\ 4176}#)
                                                           (= #{lev\ 4155}# 0))
                                                         #{tmp\ 4172}#)
                                                  #f)
                                              (apply (lambda (#{args\ 4179}#
                                                              #{q\ 4180}#)
                                                       (syntax-violation
                                                         'unquote-splicing
                                                         "unquote-splicing takes exactly one argument"
                                                         #{p\ 4154}#
                                                         (cons '#(syntax-object
                                                                  unquote-splicing
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(args q)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4177"
                                                                       "i4178"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4156"
                                                                       "i4157"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4088"
                                                                       "i4089"
                                                                       "i4090"
                                                                       "i4091")))
                                                                  (hygiene
                                                                    guile))
                                                               #{args\ 4179}#)))
                                                     #{tmp\ 4172}#)
                                              ((lambda (#{tmp\ 4181}#)
                                                 (if #{tmp\ 4181}#
                                                   (apply (lambda (#{p\ 4183}#)
                                                            (#{quasicons\ 4092}#
                                                              '(#(syntax-object
                                                                  quote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i4182"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4156"
                                                                       "i4157"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4088"
                                                                       "i4089"
                                                                       "i4090"
                                                                       "i4091")))
                                                                  (hygiene
                                                                    guile))
                                                                #(syntax-object
                                                                  quasiquote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i4182"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4156"
                                                                       "i4157"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4088"
                                                                       "i4089"
                                                                       "i4090"
                                                                       "i4091")))
                                                                  (hygiene
                                                                    guile)))
                                                              (#{quasi\ 4095}#
                                                                (list #{p\ 4183}#)
                                                                (+ #{lev\ 4155}#
                                                                   1))))
                                                          #{tmp\ 4181}#)
                                                   ((lambda (#{tmp\ 4184}#)
                                                      (if #{tmp\ 4184}#
                                                        (apply (lambda (#{p\ 4187}#
                                                                        #{q\ 4188}#)
                                                                 (#{quasicons\ 4092}#
                                                                   (#{quasi\ 4095}#
                                                                     #{p\ 4187}#
                                                                     #{lev\ 4155}#)
                                                                   (#{quasi\ 4095}#
                                                                     #{q\ 4188}#
                                                                     #{lev\ 4155}#)))
                                                               #{tmp\ 4184}#)
                                                        ((lambda (#{tmp\ 4189}#)
                                                           (if #{tmp\ 4189}#
                                                             (apply (lambda (#{x\ 4191}#)
                                                                      (#{quasivector\ 4094}#
                                                                        (#{quasi\ 4095}#
                                                                          #{x\ 4191}#
                                                                          #{lev\ 4155}#)))
                                                                    #{tmp\ 4189}#)
                                                             ((lambda (#{p\ 4194}#)
                                                                (list '#(syntax-object
                                                                         quote
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(p)
                                                                            #((top))
                                                                            #("i4193"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(p
                                                                              lev)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4156"
                                                                              "i4157"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i4088"
                                                                              "i4089"
                                                                              "i4090"
                                                                              "i4091")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{p\ 4194}#))
                                                              #{tmp\ 4158}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 4158}#
                                                           '#(vector
                                                              each-any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 4158}#
                                                      '(any . any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 4158}#
                                                 '(#(free-id
                                                     #(syntax-object
                                                       quasiquote
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i4156" "i4157"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4088"
                                                            "i4089"
                                                            "i4090"
                                                            "i4091")))
                                                       (hygiene guile)))
                                                   any)))))
                                          ($sc-dispatch
                                            #{tmp\ 4158}#
                                            '((#(free-id
                                                 #(syntax-object
                                                   unquote-splicing
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i4156" "i4157"))
                                                    #(ribcage
                                                      #(quasicons
                                                        quasiappend
                                                        quasivector
                                                        quasi)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4088"
                                                        "i4089"
                                                        "i4090"
                                                        "i4091")))
                                                   (hygiene guile)))
                                               .
                                               any)
                                              .
                                              any)))))
                                     ($sc-dispatch
                                       #{tmp\ 4158}#
                                       '((#(free-id
                                            #(syntax-object
                                              unquote-splicing
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(p lev)
                                                 #((top) (top))
                                                 #("i4156" "i4157"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4088"
                                                   "i4089"
                                                   "i4090"
                                                   "i4091")))
                                              (hygiene guile)))
                                          any)
                                         .
                                         any)))))
                                ($sc-dispatch
                                  #{tmp\ 4158}#
                                  '(#(free-id
                                      #(syntax-object
                                        unquote
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i4156" "i4157"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i4088" "i4089" "i4090" "i4091")))
                                        (hygiene guile)))
                                    .
                                    any)))))
                           ($sc-dispatch
                             #{tmp\ 4158}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i4156" "i4157"))
                                    #(ribcage
                                      #(quasicons
                                        quasiappend
                                        quasivector
                                        quasi)
                                      #((top) (top) (top) (top))
                                      #("i4088" "i4089" "i4090" "i4091")))
                                   (hygiene guile)))
                               any))))
                        #{p\ 4154}#))))
            (lambda (#{x\ 4195}#)
              ((lambda (#{tmp\ 4197}#)
                 ((lambda (#{tmp\ 4198}#)
                    (if #{tmp\ 4198}#
                      (apply (lambda (#{_\ 4201}# #{e\ 4202}#)
                               (#{quasi\ 4095}# #{e\ 4202}# 0))
                             #{tmp\ 4198}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4197}#)))
                  ($sc-dispatch #{tmp\ 4197}# (quote (any any)))))
               #{x\ 4195}#)))
          (module-name (current-module)))))

(define include
  (make-syncase-macro
    'macro
    (cons (lambda (#{x\ 4203}#)
            (letrec ((#{read-file\ 4206}#
                       (lambda (#{fn\ 4207}# #{k\ 4208}#)
                         (let ((#{p\ 4212}# (open-input-file #{fn\ 4207}#)))
                           (letrec ((#{f\ 4215}#
                                      (lambda (#{x\ 4216}#)
                                        (if (eof-object? #{x\ 4216}#)
                                          (begin
                                            (close-input-port #{p\ 4212}#)
                                            '())
                                          (cons (datum->syntax
                                                  #{k\ 4208}#
                                                  #{x\ 4216}#)
                                                (#{f\ 4215}#
                                                  (read #{p\ 4212}#)))))))
                             (#{f\ 4215}# (read #{p\ 4212}#)))))))
              ((lambda (#{tmp\ 4217}#)
                 ((lambda (#{tmp\ 4218}#)
                    (if #{tmp\ 4218}#
                      (apply (lambda (#{k\ 4221}# #{filename\ 4222}#)
                               (let ((#{fn\ 4224}#
                                       (syntax->datum #{filename\ 4222}#)))
                                 ((lambda (#{tmp\ 4226}#)
                                    ((lambda (#{tmp\ 4227}#)
                                       (if #{tmp\ 4227}#
                                         (apply (lambda (#{exp\ 4229}#)
                                                  (cons '#(syntax-object
                                                           begin
                                                           ((top)
                                                            #(ribcage
                                                              #(exp)
                                                              #((top))
                                                              #("i4228"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(fn)
                                                              #((top))
                                                              #("i4223"))
                                                            #(ribcage
                                                              #(k filename)
                                                              #((top) (top))
                                                              #("i4219"
                                                                "i4220"))
                                                            #(ribcage
                                                              (read-file)
                                                              ((top))
                                                              ("i4205"))
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i4204")))
                                                           (hygiene guile))
                                                        #{exp\ 4229}#))
                                                #{tmp\ 4227}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 4226}#)))
                                     ($sc-dispatch
                                       #{tmp\ 4226}#
                                       'each-any)))
                                  (#{read-file\ 4206}#
                                    #{fn\ 4224}#
                                    #{k\ 4221}#))))
                             #{tmp\ 4218}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4217}#)))
                  ($sc-dispatch #{tmp\ 4217}# (quote (any any)))))
               #{x\ 4203}#)))
          (module-name (current-module)))))

(define include-from-path
  (make-syncase-macro
    'macro
    (cons (lambda (#{x\ 4231}#)
            ((lambda (#{tmp\ 4233}#)
               ((lambda (#{tmp\ 4234}#)
                  (if #{tmp\ 4234}#
                    (apply (lambda (#{k\ 4237}# #{filename\ 4238}#)
                             (let ((#{fn\ 4240}#
                                     (syntax->datum #{filename\ 4238}#)))
                               ((lambda (#{tmp\ 4242}#)
                                  ((lambda (#{fn\ 4244}#)
                                     (list '#(syntax-object
                                              include
                                              ((top)
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i4243"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i4239"))
                                               #(ribcage
                                                 #(k filename)
                                                 #((top) (top))
                                                 #("i4235" "i4236"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4232")))
                                              (hygiene guile))
                                           #{fn\ 4244}#))
                                   #{tmp\ 4242}#))
                                (let ((#{t\ 4247}#
                                        (%search-load-path #{fn\ 4240}#)))
                                  (if #{t\ 4247}#
                                    #{t\ 4247}#
                                    (syntax-violation
                                      'include-from-path
                                      "file not found in path"
                                      #{x\ 4231}#
                                      #{filename\ 4238}#))))))
                           #{tmp\ 4234}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4233}#)))
                ($sc-dispatch #{tmp\ 4233}# (quote (any any)))))
             #{x\ 4231}#))
          (module-name (current-module)))))

(define unquote
  (make-syncase-macro
    'macro
    (cons (lambda (#{x\ 4249}#)
            ((lambda (#{tmp\ 4251}#)
               ((lambda (#{tmp\ 4252}#)
                  (if #{tmp\ 4252}#
                    (apply (lambda (#{_\ 4255}# #{e\ 4256}#)
                             (syntax-violation
                               'unquote
                               "expression not valid outside of quasiquote"
                               #{x\ 4249}#))
                           #{tmp\ 4252}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4251}#)))
                ($sc-dispatch #{tmp\ 4251}# (quote (any any)))))
             #{x\ 4249}#))
          (module-name (current-module)))))

(define unquote-splicing
  (make-syncase-macro
    'macro
    (cons (lambda (#{x\ 4257}#)
            ((lambda (#{tmp\ 4259}#)
               ((lambda (#{tmp\ 4260}#)
                  (if #{tmp\ 4260}#
                    (apply (lambda (#{_\ 4263}# #{e\ 4264}#)
                             (syntax-violation
                               'unquote-splicing
                               "expression not valid outside of quasiquote"
                               #{x\ 4257}#))
                           #{tmp\ 4260}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4259}#)))
                ($sc-dispatch #{tmp\ 4259}# (quote (any any)))))
             #{x\ 4257}#))
          (module-name (current-module)))))

(define case
  (make-syncase-macro
    'macro
    (cons (lambda (#{x\ 4265}#)
            ((lambda (#{tmp\ 4267}#)
               ((lambda (#{tmp\ 4268}#)
                  (if #{tmp\ 4268}#
                    (apply (lambda (#{_\ 4273}#
                                    #{e\ 4274}#
                                    #{m1\ 4275}#
                                    #{m2\ 4276}#)
                             ((lambda (#{tmp\ 4278}#)
                                ((lambda (#{body\ 4280}#)
                                   (list '#(syntax-object
                                            let
                                            ((top)
                                             #(ribcage
                                               #(body)
                                               #((top))
                                               #("i4279"))
                                             #(ribcage
                                               #(_ e m1 m2)
                                               #((top) (top) (top) (top))
                                               #("i4269"
                                                 "i4270"
                                                 "i4271"
                                                 "i4272"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4266")))
                                            (hygiene guile))
                                         (list (list '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(body)
                                                           #((top))
                                                           #("i4279"))
                                                         #(ribcage
                                                           #(_ e m1 m2)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i4269"
                                                             "i4270"
                                                             "i4271"
                                                             "i4272"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4266")))
                                                        (hygiene guile))
                                                     #{e\ 4274}#))
                                         #{body\ 4280}#))
                                 #{tmp\ 4278}#))
                              (letrec ((#{f\ 4284}#
                                         (lambda (#{clause\ 4285}#
                                                  #{clauses\ 4286}#)
                                           (if (null? #{clauses\ 4286}#)
                                             ((lambda (#{tmp\ 4288}#)
                                                ((lambda (#{tmp\ 4289}#)
                                                   (if #{tmp\ 4289}#
                                                     (apply (lambda (#{e1\ 4292}#
                                                                     #{e2\ 4293}#)
                                                              (cons '#(syntax-object
                                                                       begin
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4290"
                                                                            "i4291"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(f
                                                                            clause
                                                                            clauses)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4281"
                                                                            "i4282"
                                                                            "i4283"))
                                                                        #(ribcage
                                                                          #(_
                                                                            e
                                                                            m1
                                                                            m2)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4269"
                                                                            "i4270"
                                                                            "i4271"
                                                                            "i4272"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x)
                                                                          #((top))
                                                                          #("i4266")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{e1\ 4292}#
                                                                          #{e2\ 4293}#)))
                                                            #{tmp\ 4289}#)
                                                     ((lambda (#{tmp\ 4295}#)
                                                        (if #{tmp\ 4295}#
                                                          (apply (lambda (#{k\ 4299}#
                                                                          #{e1\ 4300}#
                                                                          #{e2\ 4301}#)
                                                                   (list '#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4296"
                                                                                 "i4297"
                                                                                 "i4298"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4281"
                                                                                 "i4282"
                                                                                 "i4283"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4269"
                                                                                 "i4270"
                                                                                 "i4271"
                                                                                 "i4272"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4266")))
                                                                            (hygiene
                                                                              guile))
                                                                         (list '#(syntax-object
                                                                                  memv
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4296"
                                                                                       "i4297"
                                                                                       "i4298"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4281"
                                                                                       "i4282"
                                                                                       "i4283"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4269"
                                                                                       "i4270"
                                                                                       "i4271"
                                                                                       "i4272"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4266")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               '#(syntax-object
                                                                                  t
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4296"
                                                                                       "i4297"
                                                                                       "i4298"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4281"
                                                                                       "i4282"
                                                                                       "i4283"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4269"
                                                                                       "i4270"
                                                                                       "i4271"
                                                                                       "i4272"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4266")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (list '#(syntax-object
                                                                                        quote
                                                                                        ((top)
                                                                                         #(ribcage
                                                                                           #(k
                                                                                             e1
                                                                                             e2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4296"
                                                                                             "i4297"
                                                                                             "i4298"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(f
                                                                                             clause
                                                                                             clauses)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4281"
                                                                                             "i4282"
                                                                                             "i4283"))
                                                                                         #(ribcage
                                                                                           #(_
                                                                                             e
                                                                                             m1
                                                                                             m2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4269"
                                                                                             "i4270"
                                                                                             "i4271"
                                                                                             "i4272"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(x)
                                                                                           #((top))
                                                                                           #("i4266")))
                                                                                        (hygiene
                                                                                          guile))
                                                                                     #{k\ 4299}#))
                                                                         (cons '#(syntax-object
                                                                                  begin
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4296"
                                                                                       "i4297"
                                                                                       "i4298"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4281"
                                                                                       "i4282"
                                                                                       "i4283"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4269"
                                                                                       "i4270"
                                                                                       "i4271"
                                                                                       "i4272"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4266")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (cons #{e1\ 4300}#
                                                                                     #{e2\ 4301}#))))
                                                                 #{tmp\ 4295}#)
                                                          ((lambda (#{_\ 4305}#)
                                                             (syntax-violation
                                                               'case
                                                               "bad clause"
                                                               #{x\ 4265}#
                                                               #{clause\ 4285}#))
                                                           #{tmp\ 4288}#)))
                                                      ($sc-dispatch
                                                        #{tmp\ 4288}#
                                                        '(each-any
                                                           any
                                                           .
                                                           each-any)))))
                                                 ($sc-dispatch
                                                   #{tmp\ 4288}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         else
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(f clause clauses)
                                                            #((top)
                                                              (top)
                                                              (top))
                                                            #("i4281"
                                                              "i4282"
                                                              "i4283"))
                                                          #(ribcage
                                                            #(_ e m1 m2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4269"
                                                              "i4270"
                                                              "i4271"
                                                              "i4272"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4266")))
                                                         (hygiene guile)))
                                                     any
                                                     .
                                                     each-any))))
                                              #{clause\ 4285}#)
                                             ((lambda (#{tmp\ 4307}#)
                                                ((lambda (#{rest\ 4309}#)
                                                   ((lambda (#{tmp\ 4310}#)
                                                      ((lambda (#{tmp\ 4311}#)
                                                         (if #{tmp\ 4311}#
                                                           (apply (lambda (#{k\ 4315}#
                                                                           #{e1\ 4316}#
                                                                           #{e2\ 4317}#)
                                                                    (list '#(syntax-object
                                                                             if
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4312"
                                                                                  "i4313"
                                                                                  "i4314"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4308"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4281"
                                                                                  "i4282"
                                                                                  "i4283"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4269"
                                                                                  "i4270"
                                                                                  "i4271"
                                                                                  "i4272"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4266")))
                                                                             (hygiene
                                                                               guile))
                                                                          (list '#(syntax-object
                                                                                   memv
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4312"
                                                                                        "i4313"
                                                                                        "i4314"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4308"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4281"
                                                                                        "i4282"
                                                                                        "i4283"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4269"
                                                                                        "i4270"
                                                                                        "i4271"
                                                                                        "i4272"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4266")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                '#(syntax-object
                                                                                   t
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4312"
                                                                                        "i4313"
                                                                                        "i4314"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4308"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4281"
                                                                                        "i4282"
                                                                                        "i4283"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4269"
                                                                                        "i4270"
                                                                                        "i4271"
                                                                                        "i4272"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4266")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (list '#(syntax-object
                                                                                         quote
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(k
                                                                                              e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4312"
                                                                                              "i4313"
                                                                                              "i4314"))
                                                                                          #(ribcage
                                                                                            #(rest)
                                                                                            #((top))
                                                                                            #("i4308"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(f
                                                                                              clause
                                                                                              clauses)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4281"
                                                                                              "i4282"
                                                                                              "i4283"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              e
                                                                                              m1
                                                                                              m2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4269"
                                                                                              "i4270"
                                                                                              "i4271"
                                                                                              "i4272"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(x)
                                                                                            #((top))
                                                                                            #("i4266")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      #{k\ 4315}#))
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4312"
                                                                                        "i4313"
                                                                                        "i4314"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4308"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4281"
                                                                                        "i4282"
                                                                                        "i4283"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4269"
                                                                                        "i4270"
                                                                                        "i4271"
                                                                                        "i4272"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4266")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{e1\ 4316}#
                                                                                      #{e2\ 4317}#))
                                                                          #{rest\ 4309}#))
                                                                  #{tmp\ 4311}#)
                                                           ((lambda (#{_\ 4321}#)
                                                              (syntax-violation
                                                                'case
                                                                "bad clause"
                                                                #{x\ 4265}#
                                                                #{clause\ 4285}#))
                                                            #{tmp\ 4310}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4310}#
                                                         '(each-any
                                                            any
                                                            .
                                                            each-any))))
                                                    #{clause\ 4285}#))
                                                 #{tmp\ 4307}#))
                                              (#{f\ 4284}#
                                                (car #{clauses\ 4286}#)
                                                (cdr #{clauses\ 4286}#)))))))
                                (#{f\ 4284}# #{m1\ 4275}# #{m2\ 4276}#))))
                           #{tmp\ 4268}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4267}#)))
                ($sc-dispatch
                  #{tmp\ 4267}#
                  '(any any any . each-any))))
             #{x\ 4265}#))
          (module-name (current-module)))))

(define identifier-syntax
  (make-syncase-macro
    'macro
    (cons (lambda (#{x\ 4322}#)
            ((lambda (#{tmp\ 4324}#)
               ((lambda (#{tmp\ 4325}#)
                  (if #{tmp\ 4325}#
                    (apply (lambda (#{_\ 4328}# #{e\ 4329}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i4326" "i4327"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4323")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ e)
                                          #((top) (top))
                                          #("i4326" "i4327"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4323")))
                                       (hygiene guile)))
                                   (list '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4326" "i4327"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4323")))
                                            (hygiene guile))
                                         '#(syntax-object
                                            x
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4326" "i4327"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4323")))
                                            (hygiene guile))
                                         '()
                                         (list '#(syntax-object
                                                  id
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i4326" "i4327"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4323")))
                                                  (hygiene guile))
                                               '(#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i4326" "i4327"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4323")))
                                                   (hygiene guile))
                                                 (#(syntax-object
                                                    syntax
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i4326" "i4327"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4323")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    id
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i4326" "i4327"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4323")))
                                                    (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i4326" "i4327"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4323")))
                                                        (hygiene guile))
                                                     #{e\ 4329}#))
                                         (list (cons #{_\ 4328}#
                                                     '(#(syntax-object
                                                         x
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4326" "i4327"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4323")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4326" "i4327"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4323")))
                                                         (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i4326" "i4327"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4323")))
                                                        (hygiene guile))
                                                     (cons #{e\ 4329}#
                                                           '(#(syntax-object
                                                               x
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4326"
                                                                    "i4327"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i4323")))
                                                               (hygiene guile))
                                                             #(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4326"
                                                                    "i4327"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i4323")))
                                                               (hygiene
                                                                 guile)))))))))
                           #{tmp\ 4325}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4324}#)))
                ($sc-dispatch #{tmp\ 4324}# (quote (any any)))))
             #{x\ 4322}#))
          (module-name (current-module)))))

(define define*
  (make-syncase-macro
    'macro
    (cons (lambda (#{x\ 4331}#)
            ((lambda (#{tmp\ 4333}#)
               ((lambda (#{tmp\ 4334}#)
                  (if #{tmp\ 4334}#
                    (apply (lambda (#{dummy\ 4340}#
                                    #{id\ 4341}#
                                    #{args\ 4342}#
                                    #{b0\ 4343}#
                                    #{b1\ 4344}#)
                             (list '#(syntax-object
                                      define
                                      ((top)
                                       #(ribcage
                                         #(dummy id args b0 b1)
                                         #((m4330 top) (top) (top) (top) (top))
                                         #("i4335"
                                           "i4336"
                                           "i4337"
                                           "i4338"
                                           "i4339"))
                                       #(ribcage () () ())
                                       #(ribcage
                                         #(x)
                                         #((m4330 top))
                                         #("i4332")))
                                      (hygiene guile))
                                   #{id\ 4341}#
                                   (cons '#(syntax-object
                                            lambda*
                                            ((top)
                                             #(ribcage
                                               #(dummy id args b0 b1)
                                               #((m4330 top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                               #("i4335"
                                                 "i4336"
                                                 "i4337"
                                                 "i4338"
                                                 "i4339"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((m4330 top))
                                               #("i4332")))
                                            (hygiene guile))
                                         (cons #{args\ 4342}#
                                               (cons #{b0\ 4343}#
                                                     #{b1\ 4344}#)))))
                           #{tmp\ 4334}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4333}#)))
                ($sc-dispatch
                  #{tmp\ 4333}#
                  '(any (any . any) any . each-any))))
             #{x\ 4331}#))
          (module-name (current-module)))))

