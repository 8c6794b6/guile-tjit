(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec ((#{and-map*\ 30}#
           (lambda (#{f\ 202}# #{first\ 203}# . #{rest\ 204}#)
             (let ((#{t\ 210}# (null? #{first\ 203}#)))
               (if #{t\ 210}#
                 #{t\ 210}#
                 (if (null? #{rest\ 204}#)
                   (letrec ((#{andmap\ 214}#
                              (lambda (#{first\ 215}#)
                                (let ((#{x\ 218}# (car #{first\ 215}#))
                                      (#{first\ 219}# (cdr #{first\ 215}#)))
                                  (if (null? #{first\ 219}#)
                                    (#{f\ 202}# #{x\ 218}#)
                                    (if (#{f\ 202}# #{x\ 218}#)
                                      (#{andmap\ 214}# #{first\ 219}#)
                                      #f))))))
                     (#{andmap\ 214}# #{first\ 203}#))
                   (letrec ((#{andmap\ 225}#
                              (lambda (#{first\ 226}# #{rest\ 227}#)
                                (let ((#{x\ 232}# (car #{first\ 226}#))
                                      (#{xr\ 233}# (map car #{rest\ 227}#))
                                      (#{first\ 234}# (cdr #{first\ 226}#))
                                      (#{rest\ 235}# (map cdr #{rest\ 227}#)))
                                  (if (null? #{first\ 234}#)
                                    (apply #{f\ 202}#
                                           (cons #{x\ 232}# #{xr\ 233}#))
                                    (if (apply #{f\ 202}#
                                               (cons #{x\ 232}# #{xr\ 233}#))
                                      (#{andmap\ 225}#
                                        #{first\ 234}#
                                        #{rest\ 235}#)
                                      #f))))))
                     (#{andmap\ 225}# #{first\ 203}# #{rest\ 204}#))))))))
  (letrec ((#{lambda-var-list\ 497}#
             (lambda (#{vars\ 712}#)
               (letrec ((#{lvl\ 718}#
                          (lambda (#{vars\ 719}# #{ls\ 720}# #{w\ 721}#)
                            (if (pair? #{vars\ 719}#)
                              (#{lvl\ 718}#
                                (cdr #{vars\ 719}#)
                                (cons (#{wrap\ 451}#
                                        (car #{vars\ 719}#)
                                        #{w\ 721}#
                                        #f)
                                      #{ls\ 720}#)
                                #{w\ 721}#)
                              (if (#{id?\ 382}# #{vars\ 719}#)
                                (cons (#{wrap\ 451}#
                                        #{vars\ 719}#
                                        #{w\ 721}#
                                        #f)
                                      #{ls\ 720}#)
                                (if (null? #{vars\ 719}#)
                                  #{ls\ 720}#
                                  (if (#{syntax-object?\ 346}# #{vars\ 719}#)
                                    (#{lvl\ 718}#
                                      (#{syntax-object-expression\ 348}#
                                        #{vars\ 719}#)
                                      #{ls\ 720}#
                                      (#{join-wraps\ 433}#
                                        #{w\ 721}#
                                        (#{syntax-object-wrap\ 350}#
                                          #{vars\ 719}#)))
                                    (cons #{vars\ 719}# #{ls\ 720}#))))))))
                 (#{lvl\ 718}#
                   #{vars\ 712}#
                   '()
                   '(())))))
           (#{gen-var\ 495}#
             (lambda (#{id\ 732}#)
               (let ((#{id\ 735}#
                       (if (#{syntax-object?\ 346}# #{id\ 732}#)
                         (#{syntax-object-expression\ 348}# #{id\ 732}#)
                         #{id\ 732}#)))
                 (gensym
                   (string-append (symbol->string #{id\ 735}#) " ")))))
           (#{strip\ 493}#
             (lambda (#{x\ 737}# #{w\ 738}#)
               (if (memq 'top
                         (#{wrap-marks\ 389}# #{w\ 738}#))
                 #{x\ 737}#
                 (letrec ((#{f\ 744}# (lambda (#{x\ 745}#)
                                        (if (#{syntax-object?\ 346}#
                                              #{x\ 745}#)
                                          (#{strip\ 493}#
                                            (#{syntax-object-expression\ 348}#
                                              #{x\ 745}#)
                                            (#{syntax-object-wrap\ 350}#
                                              #{x\ 745}#))
                                          (if (pair? #{x\ 745}#)
                                            (let ((#{a\ 752}# (#{f\ 744}# (car #{x\ 745}#)))
                                                  (#{d\ 753}# (#{f\ 744}# (cdr #{x\ 745}#))))
                                              (if (if (eq? #{a\ 752}#
                                                           (car #{x\ 745}#))
                                                    (eq? #{d\ 753}#
                                                         (cdr #{x\ 745}#))
                                                    #f)
                                                #{x\ 745}#
                                                (cons #{a\ 752}# #{d\ 753}#)))
                                            (if (vector? #{x\ 745}#)
                                              (let ((#{old\ 759}#
                                                      (vector->list
                                                        #{x\ 745}#)))
                                                (let ((#{new\ 761}#
                                                        (map #{f\ 744}#
                                                             #{old\ 759}#)))
                                                  (if (#{and-map*\ 30}#
                                                        eq?
                                                        #{old\ 759}#
                                                        #{new\ 761}#)
                                                    #{x\ 745}#
                                                    (list->vector
                                                      #{new\ 761}#))))
                                              #{x\ 745}#))))))
                   (#{f\ 744}# #{x\ 737}#)))))
           (#{chi-lambda-case\ 491}#
             (lambda (#{e\ 763}#
                      #{r\ 764}#
                      #{w\ 765}#
                      #{s\ 766}#
                      #{mod\ 767}#
                      #{get-formals\ 768}#
                      #{clauses\ 769}#)
               (letrec ((#{expand-body\ 784}#
                          (lambda (#{req\ 785}#
                                   #{opt\ 786}#
                                   #{rest\ 787}#
                                   #{kw\ 788}#
                                   #{body\ 789}#
                                   #{vars\ 790}#
                                   #{r*\ 791}#
                                   #{w*\ 792}#
                                   #{inits\ 793}#
                                   #{meta\ 794}#)
                            ((lambda (#{tmp\ 805}#)
                               ((lambda (#{tmp\ 806}#)
                                  (if (if #{tmp\ 806}#
                                        (apply (lambda (#{docstring\ 810}#
                                                        #{e1\ 811}#
                                                        #{e2\ 812}#)
                                                 (string?
                                                   (syntax->datum
                                                     #{docstring\ 810}#)))
                                               #{tmp\ 806}#)
                                        #f)
                                    (apply (lambda (#{docstring\ 816}#
                                                    #{e1\ 817}#
                                                    #{e2\ 818}#)
                                             (#{expand-body\ 784}#
                                               #{req\ 785}#
                                               #{opt\ 786}#
                                               #{rest\ 787}#
                                               #{kw\ 788}#
                                               (cons #{e1\ 817}# #{e2\ 818}#)
                                               #{vars\ 790}#
                                               #{r*\ 791}#
                                               #{w*\ 792}#
                                               #{inits\ 793}#
                                               (append
                                                 #{meta\ 794}#
                                                 (list (cons 'documentation
                                                             (syntax->datum
                                                               #{docstring\ 816}#))))))
                                           #{tmp\ 806}#)
                                    ((lambda (#{tmp\ 821}#)
                                       (if #{tmp\ 821}#
                                         (apply (lambda (#{k\ 826}#
                                                         #{v\ 827}#
                                                         #{e1\ 828}#
                                                         #{e2\ 829}#)
                                                  (#{expand-body\ 784}#
                                                    #{req\ 785}#
                                                    #{opt\ 786}#
                                                    #{rest\ 787}#
                                                    #{kw\ 788}#
                                                    (cons #{e1\ 828}#
                                                          #{e2\ 829}#)
                                                    #{vars\ 790}#
                                                    #{r*\ 791}#
                                                    #{w*\ 792}#
                                                    #{inits\ 793}#
                                                    (append
                                                      #{meta\ 794}#
                                                      (syntax->datum
                                                        (map cons
                                                             #{k\ 826}#
                                                             #{v\ 827}#)))))
                                                #{tmp\ 821}#)
                                         ((lambda (#{tmp\ 833}#)
                                            (if #{tmp\ 833}#
                                              (apply (lambda (#{e1\ 836}#
                                                              #{e2\ 837}#)
                                                       (values
                                                         #{meta\ 794}#
                                                         #{req\ 785}#
                                                         #{opt\ 786}#
                                                         #{rest\ 787}#
                                                         #{kw\ 788}#
                                                         #{inits\ 793}#
                                                         #{vars\ 790}#
                                                         (#{chi-body\ 475}#
                                                           (cons #{e1\ 836}#
                                                                 #{e2\ 837}#)
                                                           (#{source-wrap\ 453}#
                                                             #{e\ 763}#
                                                             #{w\ 765}#
                                                             #{s\ 766}#
                                                             #{mod\ 767}#)
                                                           #{r*\ 791}#
                                                           #{w*\ 792}#
                                                           #{mod\ 767}#)))
                                                     #{tmp\ 833}#)
                                              (syntax-violation
                                                #f
                                                "source expression failed to match any pattern"
                                                #{tmp\ 805}#)))
                                          ($sc-dispatch
                                            #{tmp\ 805}#
                                            '(any . each-any)))))
                                     ($sc-dispatch
                                       #{tmp\ 805}#
                                       '(#(vector #(each (any . any)))
                                         any
                                         .
                                         each-any)))))
                                ($sc-dispatch
                                  #{tmp\ 805}#
                                  '(any any . each-any))))
                             #{body\ 789}#)))
                        (#{expand-kw\ 782}#
                          (lambda (#{req\ 839}#
                                   #{opt\ 840}#
                                   #{rest\ 841}#
                                   #{kw\ 842}#
                                   #{body\ 843}#
                                   #{vars\ 844}#
                                   #{r*\ 845}#
                                   #{w*\ 846}#
                                   #{aok\ 847}#
                                   #{out\ 848}#
                                   #{inits\ 849}#)
                            (if (pair? #{kw\ 842}#)
                              ((lambda (#{tmp\ 863}#)
                                 ((lambda (#{tmp\ 864}#)
                                    (if #{tmp\ 864}#
                                      (apply (lambda (#{k\ 868}#
                                                      #{id\ 869}#
                                                      #{i\ 870}#)
                                               (let ((#{v\ 873}# (#{gen-var\ 495}#
                                                                   #{id\ 869}#)))
                                                 (let ((#{l\ 875}# (#{gen-labels\ 400}#
                                                                     (list #{v\ 873}#))))
                                                   (let ((#{r**\ 877}#
                                                           (#{extend-var-env\ 372}#
                                                             #{l\ 875}#
                                                             (list #{v\ 873}#)
                                                             #{r*\ 845}#)))
                                                     (let ((#{w**\ 879}#
                                                             (#{make-binding-wrap\ 429}#
                                                               (list #{id\ 869}#)
                                                               #{l\ 875}#
                                                               #{w*\ 846}#)))
                                                       (#{expand-kw\ 782}#
                                                         #{req\ 839}#
                                                         #{opt\ 840}#
                                                         #{rest\ 841}#
                                                         (cdr #{kw\ 842}#)
                                                         #{body\ 843}#
                                                         (cons #{v\ 873}#
                                                               #{vars\ 844}#)
                                                         #{r**\ 877}#
                                                         #{w**\ 879}#
                                                         #{aok\ 847}#
                                                         (cons (list (syntax->datum
                                                                       #{k\ 868}#)
                                                                     (syntax->datum
                                                                       #{id\ 869}#)
                                                                     #{v\ 873}#)
                                                               #{out\ 848}#)
                                                         (cons (#{chi\ 467}#
                                                                 #{i\ 870}#
                                                                 #{r*\ 845}#
                                                                 #{w*\ 846}#
                                                                 #{mod\ 767}#)
                                                               #{inits\ 849}#)))))))
                                             #{tmp\ 864}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 863}#)))
                                  ($sc-dispatch
                                    #{tmp\ 863}#
                                    '(any any any))))
                               (car #{kw\ 842}#))
                              (#{expand-body\ 784}#
                                #{req\ 839}#
                                #{opt\ 840}#
                                #{rest\ 841}#
                                (if (let ((#{t\ 883}# #{aok\ 847}#))
                                      (if #{t\ 883}#
                                        #{t\ 883}#
                                        (pair? #{out\ 848}#)))
                                  (cons #{aok\ 847}# (reverse #{out\ 848}#))
                                  #f)
                                #{body\ 843}#
                                (reverse #{vars\ 844}#)
                                #{r*\ 845}#
                                #{w*\ 846}#
                                (reverse #{inits\ 849}#)
                                '()))))
                        (#{expand-opt\ 780}#
                          (lambda (#{req\ 885}#
                                   #{opt\ 886}#
                                   #{rest\ 887}#
                                   #{kw\ 888}#
                                   #{body\ 889}#
                                   #{vars\ 890}#
                                   #{r*\ 891}#
                                   #{w*\ 892}#
                                   #{out\ 893}#
                                   #{inits\ 894}#)
                            (if (pair? #{opt\ 886}#)
                              ((lambda (#{tmp\ 907}#)
                                 ((lambda (#{tmp\ 908}#)
                                    (if #{tmp\ 908}#
                                      (apply (lambda (#{id\ 911}# #{i\ 912}#)
                                               (let ((#{v\ 915}# (#{gen-var\ 495}#
                                                                   #{id\ 911}#)))
                                                 (let ((#{l\ 917}# (#{gen-labels\ 400}#
                                                                     (list #{v\ 915}#))))
                                                   (let ((#{r**\ 919}#
                                                           (#{extend-var-env\ 372}#
                                                             #{l\ 917}#
                                                             (list #{v\ 915}#)
                                                             #{r*\ 891}#)))
                                                     (let ((#{w**\ 921}#
                                                             (#{make-binding-wrap\ 429}#
                                                               (list #{id\ 911}#)
                                                               #{l\ 917}#
                                                               #{w*\ 892}#)))
                                                       (#{expand-opt\ 780}#
                                                         #{req\ 885}#
                                                         (cdr #{opt\ 886}#)
                                                         #{rest\ 887}#
                                                         #{kw\ 888}#
                                                         #{body\ 889}#
                                                         (cons #{v\ 915}#
                                                               #{vars\ 890}#)
                                                         #{r**\ 919}#
                                                         #{w**\ 921}#
                                                         (cons (syntax->datum
                                                                 #{id\ 911}#)
                                                               #{out\ 893}#)
                                                         (cons (#{chi\ 467}#
                                                                 #{i\ 912}#
                                                                 #{r*\ 891}#
                                                                 #{w*\ 892}#
                                                                 #{mod\ 767}#)
                                                               #{inits\ 894}#)))))))
                                             #{tmp\ 908}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 907}#)))
                                  ($sc-dispatch
                                    #{tmp\ 907}#
                                    '(any any))))
                               (car #{opt\ 886}#))
                              (if #{rest\ 887}#
                                (let ((#{v\ 926}# (#{gen-var\ 495}#
                                                    #{rest\ 887}#)))
                                  (let ((#{l\ 928}# (#{gen-labels\ 400}#
                                                      (list #{v\ 926}#))))
                                    (let ((#{r*\ 930}#
                                            (#{extend-var-env\ 372}#
                                              #{l\ 928}#
                                              (list #{v\ 926}#)
                                              #{r*\ 891}#)))
                                      (let ((#{w*\ 932}#
                                              (#{make-binding-wrap\ 429}#
                                                (list #{rest\ 887}#)
                                                #{l\ 928}#
                                                #{w*\ 892}#)))
                                        (#{expand-kw\ 782}#
                                          #{req\ 885}#
                                          (if (pair? #{out\ 893}#)
                                            (reverse #{out\ 893}#)
                                            #f)
                                          (syntax->datum #{rest\ 887}#)
                                          (if (pair? #{kw\ 888}#)
                                            (cdr #{kw\ 888}#)
                                            #{kw\ 888}#)
                                          #{body\ 889}#
                                          (cons #{v\ 926}# #{vars\ 890}#)
                                          #{r*\ 930}#
                                          #{w*\ 932}#
                                          (if (pair? #{kw\ 888}#)
                                            (car #{kw\ 888}#)
                                            #f)
                                          '()
                                          #{inits\ 894}#)))))
                                (#{expand-kw\ 782}#
                                  #{req\ 885}#
                                  (if (pair? #{out\ 893}#)
                                    (reverse #{out\ 893}#)
                                    #f)
                                  #f
                                  (if (pair? #{kw\ 888}#)
                                    (cdr #{kw\ 888}#)
                                    #{kw\ 888}#)
                                  #{body\ 889}#
                                  #{vars\ 890}#
                                  #{r*\ 891}#
                                  #{w*\ 892}#
                                  (if (pair? #{kw\ 888}#) (car #{kw\ 888}#) #f)
                                  '()
                                  #{inits\ 894}#)))))
                        (#{expand-req\ 778}#
                          (lambda (#{req\ 934}#
                                   #{opt\ 935}#
                                   #{rest\ 936}#
                                   #{kw\ 937}#
                                   #{body\ 938}#)
                            (let ((#{vars\ 946}#
                                    (map #{gen-var\ 495}# #{req\ 934}#))
                                  (#{labels\ 947}#
                                    (#{gen-labels\ 400}# #{req\ 934}#)))
                              (let ((#{r*\ 950}#
                                      (#{extend-var-env\ 372}#
                                        #{labels\ 947}#
                                        #{vars\ 946}#
                                        #{r\ 764}#))
                                    (#{w*\ 951}#
                                      (#{make-binding-wrap\ 429}#
                                        #{req\ 934}#
                                        #{labels\ 947}#
                                        #{w\ 765}#)))
                                (#{expand-opt\ 780}#
                                  (map syntax->datum #{req\ 934}#)
                                  #{opt\ 935}#
                                  #{rest\ 936}#
                                  #{kw\ 937}#
                                  #{body\ 938}#
                                  (reverse #{vars\ 946}#)
                                  #{r*\ 950}#
                                  #{w*\ 951}#
                                  '()
                                  '()))))))
                 ((lambda (#{tmp\ 952}#)
                    ((lambda (#{tmp\ 953}#)
                       (if #{tmp\ 953}#
                         (apply (lambda () (values (quote ()) #f))
                                #{tmp\ 953}#)
                         ((lambda (#{tmp\ 954}#)
                            (if #{tmp\ 954}#
                              (apply (lambda (#{args\ 961}#
                                              #{e1\ 962}#
                                              #{e2\ 963}#
                                              #{args*\ 964}#
                                              #{e1*\ 965}#
                                              #{e2*\ 966}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{get-formals\ 768}#
                                             #{args\ 961}#))
                                         (lambda (#{req\ 967}#
                                                  #{opt\ 968}#
                                                  #{rest\ 969}#
                                                  #{kw\ 970}#)
                                           (call-with-values
                                             (lambda ()
                                               (#{expand-req\ 778}#
                                                 #{req\ 967}#
                                                 #{opt\ 968}#
                                                 #{rest\ 969}#
                                                 #{kw\ 970}#
                                                 (cons #{e1\ 962}#
                                                       #{e2\ 963}#)))
                                             (lambda (#{meta\ 976}#
                                                      #{req\ 977}#
                                                      #{opt\ 978}#
                                                      #{rest\ 979}#
                                                      #{kw\ 980}#
                                                      #{inits\ 981}#
                                                      #{vars\ 982}#
                                                      #{body\ 983}#)
                                               (call-with-values
                                                 (lambda ()
                                                   (#{chi-lambda-case\ 491}#
                                                     #{e\ 763}#
                                                     #{r\ 764}#
                                                     #{w\ 765}#
                                                     #{s\ 766}#
                                                     #{mod\ 767}#
                                                     #{get-formals\ 768}#
                                                     (map (lambda (#{tmp\ 994}#
                                                                   #{tmp\ 993}#
                                                                   #{tmp\ 992}#)
                                                            (cons #{tmp\ 992}#
                                                                  (cons #{tmp\ 993}#
                                                                        #{tmp\ 994}#)))
                                                          #{e2*\ 966}#
                                                          #{e1*\ 965}#
                                                          #{args*\ 964}#)))
                                                 (lambda (#{meta*\ 996}#
                                                          #{else*\ 997}#)
                                                   (values
                                                     (append
                                                       #{meta\ 976}#
                                                       #{meta*\ 996}#)
                                                     (#{build-lambda-case\ 328}#
                                                       #{s\ 766}#
                                                       #{req\ 977}#
                                                       #{opt\ 978}#
                                                       #{rest\ 979}#
                                                       #{kw\ 980}#
                                                       #{inits\ 981}#
                                                       #{vars\ 982}#
                                                       #{body\ 983}#
                                                       #{else*\ 997}#)))))))))
                                     #{tmp\ 954}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 952}#)))
                          ($sc-dispatch
                            #{tmp\ 952}#
                            '((any any . each-any)
                              .
                              #(each (any any . each-any)))))))
                     ($sc-dispatch #{tmp\ 952}# (quote ()))))
                  #{clauses\ 769}#))))
           (#{lambda*-formals\ 489}#
             (lambda (#{orig-args\ 1000}#)
               (letrec ((#{check\ 1011}#
                          (lambda (#{req\ 1012}#
                                   #{opt\ 1013}#
                                   #{rest\ 1014}#
                                   #{kw\ 1015}#)
                            (if (#{distinct-bound-ids?\ 447}#
                                  (append
                                    #{req\ 1012}#
                                    (map car #{opt\ 1013}#)
                                    (if #{rest\ 1014}#
                                      (list #{rest\ 1014}#)
                                      '())
                                    (if (pair? #{kw\ 1015}#)
                                      (map cadr (cdr #{kw\ 1015}#))
                                      '())))
                              (values
                                #{req\ 1012}#
                                #{opt\ 1013}#
                                #{rest\ 1014}#
                                #{kw\ 1015}#)
                              (syntax-violation
                                'lambda*
                                "duplicate identifier in argument list"
                                #{orig-args\ 1000}#))))
                        (#{rest\ 1009}#
                          (lambda (#{args\ 1023}#
                                   #{req\ 1024}#
                                   #{opt\ 1025}#
                                   #{kw\ 1026}#)
                            ((lambda (#{tmp\ 1031}#)
                               ((lambda (#{tmp\ 1032}#)
                                  (if (if #{tmp\ 1032}#
                                        (apply (lambda (#{r\ 1034}#)
                                                 (#{id?\ 382}# #{r\ 1034}#))
                                               #{tmp\ 1032}#)
                                        #f)
                                    (apply (lambda (#{r\ 1036}#)
                                             (#{check\ 1011}#
                                               #{req\ 1024}#
                                               #{opt\ 1025}#
                                               #{r\ 1036}#
                                               #{kw\ 1026}#))
                                           #{tmp\ 1032}#)
                                    ((lambda (#{else\ 1038}#)
                                       (syntax-violation
                                         'lambda*
                                         "invalid rest argument"
                                         #{orig-args\ 1000}#
                                         #{args\ 1023}#))
                                     #{tmp\ 1031}#)))
                                (list #{tmp\ 1031}#)))
                             #{args\ 1023}#)))
                        (#{key\ 1007}#
                          (lambda (#{args\ 1039}#
                                   #{req\ 1040}#
                                   #{opt\ 1041}#
                                   #{rkey\ 1042}#)
                            ((lambda (#{tmp\ 1047}#)
                               ((lambda (#{tmp\ 1048}#)
                                  (if #{tmp\ 1048}#
                                    (apply (lambda ()
                                             (#{check\ 1011}#
                                               #{req\ 1040}#
                                               #{opt\ 1041}#
                                               #f
                                               (cons #f
                                                     (reverse
                                                       #{rkey\ 1042}#))))
                                           #{tmp\ 1048}#)
                                    ((lambda (#{tmp\ 1049}#)
                                       (if (if #{tmp\ 1049}#
                                             (apply (lambda (#{a\ 1052}#
                                                             #{b\ 1053}#)
                                                      (#{id?\ 382}#
                                                        #{a\ 1052}#))
                                                    #{tmp\ 1049}#)
                                             #f)
                                         (apply (lambda (#{a\ 1056}#
                                                         #{b\ 1057}#)
                                                  ((lambda (#{tmp\ 1059}#)
                                                     ((lambda (#{k\ 1061}#)
                                                        (#{key\ 1007}#
                                                          #{b\ 1057}#
                                                          #{req\ 1040}#
                                                          #{opt\ 1041}#
                                                          (cons (cons #{k\ 1061}#
                                                                      (cons #{a\ 1056}#
                                                                            '(#(syntax-object
                                                                                #f
                                                                                ((top)
                                                                                 #(ribcage
                                                                                   #(k)
                                                                                   #((top))
                                                                                   #("i1060"))
                                                                                 #(ribcage
                                                                                   #(a
                                                                                     b)
                                                                                   #((top)
                                                                                     (top))
                                                                                   #("i1054"
                                                                                     "i1055"))
                                                                                 #(ribcage
                                                                                   ()
                                                                                   ()
                                                                                   ())
                                                                                 #(ribcage
                                                                                   #(args
                                                                                     req
                                                                                     opt
                                                                                     rkey)
                                                                                   #((top)
                                                                                     (top)
                                                                                     (top)
                                                                                     (top))
                                                                                   #("i1043"
                                                                                     "i1044"
                                                                                     "i1045"
                                                                                     "i1046"))
                                                                                 #(ribcage
                                                                                   (check rest
                                                                                          key
                                                                                          opt
                                                                                          req)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i1010"
                                                                                    "i1008"
                                                                                    "i1006"
                                                                                    "i1004"
                                                                                    "i1002"))
                                                                                 #(ribcage
                                                                                   #(orig-args)
                                                                                   #((top))
                                                                                   #("i1001"))
                                                                                 #(ribcage
                                                                                   (lambda-var-list
                                                                                     gen-var
                                                                                     strip
                                                                                     chi-lambda-case
                                                                                     lambda*-formals
                                                                                     chi-simple-lambda
                                                                                     lambda-formals
                                                                                     ellipsis?
                                                                                     chi-void
                                                                                     eval-local-transformer
                                                                                     chi-local-syntax
                                                                                     chi-body
                                                                                     chi-macro
                                                                                     chi-application
                                                                                     chi-expr
                                                                                     chi
                                                                                     chi-top
                                                                                     syntax-type
                                                                                     chi-when-list
                                                                                     chi-install-global
                                                                                     chi-top-sequence
                                                                                     chi-sequence
                                                                                     source-wrap
                                                                                     wrap
                                                                                     bound-id-member?
                                                                                     distinct-bound-ids?
                                                                                     valid-bound-ids?
                                                                                     bound-id=?
                                                                                     free-id=?
                                                                                     id-var-name
                                                                                     same-marks?
                                                                                     join-marks
                                                                                     join-wraps
                                                                                     smart-append
                                                                                     make-binding-wrap
                                                                                     extend-ribcage!
                                                                                     make-empty-ribcage
                                                                                     new-mark
                                                                                     anti-mark
                                                                                     the-anti-mark
                                                                                     top-marked?
                                                                                     top-wrap
                                                                                     empty-wrap
                                                                                     set-ribcage-labels!
                                                                                     set-ribcage-marks!
                                                                                     set-ribcage-symnames!
                                                                                     ribcage-labels
                                                                                     ribcage-marks
                                                                                     ribcage-symnames
                                                                                     ribcage?
                                                                                     make-ribcage
                                                                                     gen-labels
                                                                                     gen-label
                                                                                     make-rename
                                                                                     rename-marks
                                                                                     rename-new
                                                                                     rename-old
                                                                                     subst-rename?
                                                                                     wrap-subst
                                                                                     wrap-marks
                                                                                     make-wrap
                                                                                     id-sym-name&marks
                                                                                     id-sym-name
                                                                                     id?
                                                                                     nonsymbol-id?
                                                                                     global-extend
                                                                                     lookup
                                                                                     macros-only-env
                                                                                     extend-var-env
                                                                                     extend-env
                                                                                     null-env
                                                                                     binding-value
                                                                                     binding-type
                                                                                     make-binding
                                                                                     arg-check
                                                                                     source-annotation
                                                                                     no-source
                                                                                     set-syntax-object-module!
                                                                                     set-syntax-object-wrap!
                                                                                     set-syntax-object-expression!
                                                                                     syntax-object-module
                                                                                     syntax-object-wrap
                                                                                     syntax-object-expression
                                                                                     syntax-object?
                                                                                     make-syntax-object
                                                                                     build-lexical-var
                                                                                     build-letrec
                                                                                     build-named-let
                                                                                     build-let
                                                                                     build-sequence
                                                                                     build-data
                                                                                     build-primref
                                                                                     build-lambda-case
                                                                                     build-case-lambda
                                                                                     build-simple-lambda
                                                                                     build-global-definition
                                                                                     maybe-name-value!
                                                                                     build-global-assignment
                                                                                     build-global-reference
                                                                                     analyze-variable
                                                                                     build-lexical-assignment
                                                                                     build-lexical-reference
                                                                                     build-dynlet
                                                                                     build-conditional
                                                                                     build-application
                                                                                     build-void
                                                                                     decorate-source
                                                                                     get-global-definition-hook
                                                                                     put-global-definition-hook
                                                                                     gensym-hook
                                                                                     local-eval-hook
                                                                                     top-level-eval-hook
                                                                                     fx<
                                                                                     fx=
                                                                                     fx-
                                                                                     fx+
                                                                                     set-lambda-meta!
                                                                                     lambda-meta
                                                                                     lambda?
                                                                                     make-dynlet
                                                                                     make-letrec
                                                                                     make-let
                                                                                     make-lambda-case
                                                                                     make-lambda
                                                                                     make-sequence
                                                                                     make-application
                                                                                     make-conditional
                                                                                     make-toplevel-define
                                                                                     make-toplevel-set
                                                                                     make-toplevel-ref
                                                                                     make-module-set
                                                                                     make-module-ref
                                                                                     make-lexical-set
                                                                                     make-lexical-ref
                                                                                     make-primitive-ref
                                                                                     make-const
                                                                                     make-void)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i496"
                                                                                    "i494"
                                                                                    "i492"
                                                                                    "i490"
                                                                                    "i488"
                                                                                    "i486"
                                                                                    "i484"
                                                                                    "i482"
                                                                                    "i480"
                                                                                    "i478"
                                                                                    "i476"
                                                                                    "i474"
                                                                                    "i472"
                                                                                    "i470"
                                                                                    "i468"
                                                                                    "i466"
                                                                                    "i464"
                                                                                    "i462"
                                                                                    "i460"
                                                                                    "i458"
                                                                                    "i456"
                                                                                    "i454"
                                                                                    "i452"
                                                                                    "i450"
                                                                                    "i448"
                                                                                    "i446"
                                                                                    "i444"
                                                                                    "i442"
                                                                                    "i440"
                                                                                    "i438"
                                                                                    "i436"
                                                                                    "i434"
                                                                                    "i432"
                                                                                    "i430"
                                                                                    "i428"
                                                                                    "i426"
                                                                                    "i425"
                                                                                    "i424"
                                                                                    "i422"
                                                                                    "i421"
                                                                                    "i420"
                                                                                    "i419"
                                                                                    "i418"
                                                                                    "i416"
                                                                                    "i414"
                                                                                    "i412"
                                                                                    "i410"
                                                                                    "i408"
                                                                                    "i406"
                                                                                    "i404"
                                                                                    "i402"
                                                                                    "i399"
                                                                                    "i397"
                                                                                    "i396"
                                                                                    "i395"
                                                                                    "i394"
                                                                                    "i393"
                                                                                    "i392"
                                                                                    "i390"
                                                                                    "i388"
                                                                                    "i386"
                                                                                    "i384"
                                                                                    "i383"
                                                                                    "i381"
                                                                                    "i379"
                                                                                    "i377"
                                                                                    "i375"
                                                                                    "i373"
                                                                                    "i371"
                                                                                    "i369"
                                                                                    "i368"
                                                                                    "i366"
                                                                                    "i364"
                                                                                    "i363"
                                                                                    "i362"
                                                                                    "i360"
                                                                                    "i359"
                                                                                    "i357"
                                                                                    "i355"
                                                                                    "i353"
                                                                                    "i351"
                                                                                    "i349"
                                                                                    "i347"
                                                                                    "i345"
                                                                                    "i343"
                                                                                    "i341"
                                                                                    "i339"
                                                                                    "i337"
                                                                                    "i335"
                                                                                    "i333"
                                                                                    "i331"
                                                                                    "i329"
                                                                                    "i327"
                                                                                    "i325"
                                                                                    "i323"
                                                                                    "i321"
                                                                                    "i319"
                                                                                    "i317"
                                                                                    "i315"
                                                                                    "i313"
                                                                                    "i311"
                                                                                    "i309"
                                                                                    "i307"
                                                                                    "i305"
                                                                                    "i303"
                                                                                    "i301"
                                                                                    "i299"
                                                                                    "i297"
                                                                                    "i295"
                                                                                    "i294"
                                                                                    "i292"
                                                                                    "i290"
                                                                                    "i288"
                                                                                    "i286"
                                                                                    "i284"
                                                                                    "i282"
                                                                                    "i280"
                                                                                    "i278"
                                                                                    "i276"
                                                                                    "i273"
                                                                                    "i271"
                                                                                    "i269"
                                                                                    "i267"
                                                                                    "i265"
                                                                                    "i263"
                                                                                    "i261"
                                                                                    "i259"
                                                                                    "i257"
                                                                                    "i255"
                                                                                    "i253"
                                                                                    "i251"
                                                                                    "i249"
                                                                                    "i247"
                                                                                    "i245"
                                                                                    "i243"
                                                                                    "i241"
                                                                                    "i239"))
                                                                                 #(ribcage
                                                                                   (define-structure
                                                                                     define-expansion-accessors
                                                                                     define-expansion-constructors
                                                                                     and-map*)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i33"
                                                                                    "i32"
                                                                                    "i31"
                                                                                    "i29")))
                                                                                (hygiene
                                                                                  guile)))))
                                                                #{rkey\ 1042}#)))
                                                      #{tmp\ 1059}#))
                                                   (symbol->keyword
                                                     (syntax->datum
                                                       #{a\ 1056}#))))
                                                #{tmp\ 1049}#)
                                         ((lambda (#{tmp\ 1062}#)
                                            (if (if #{tmp\ 1062}#
                                                  (apply (lambda (#{a\ 1066}#
                                                                  #{init\ 1067}#
                                                                  #{b\ 1068}#)
                                                           (#{id?\ 382}#
                                                             #{a\ 1066}#))
                                                         #{tmp\ 1062}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1072}#
                                                              #{init\ 1073}#
                                                              #{b\ 1074}#)
                                                       ((lambda (#{tmp\ 1076}#)
                                                          ((lambda (#{k\ 1078}#)
                                                             (#{key\ 1007}#
                                                               #{b\ 1074}#
                                                               #{req\ 1040}#
                                                               #{opt\ 1041}#
                                                               (cons (list #{k\ 1078}#
                                                                           #{a\ 1072}#
                                                                           #{init\ 1073}#)
                                                                     #{rkey\ 1042}#)))
                                                           #{tmp\ 1076}#))
                                                        (symbol->keyword
                                                          (syntax->datum
                                                            #{a\ 1072}#))))
                                                     #{tmp\ 1062}#)
                                              ((lambda (#{tmp\ 1079}#)
                                                 (if (if #{tmp\ 1079}#
                                                       (apply (lambda (#{a\ 1084}#
                                                                       #{init\ 1085}#
                                                                       #{k\ 1086}#
                                                                       #{b\ 1087}#)
                                                                (if (#{id?\ 382}#
                                                                      #{a\ 1084}#)
                                                                  (keyword?
                                                                    (syntax->datum
                                                                      #{k\ 1086}#))
                                                                  #f))
                                                              #{tmp\ 1079}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1094}#
                                                                   #{init\ 1095}#
                                                                   #{k\ 1096}#
                                                                   #{b\ 1097}#)
                                                            (#{key\ 1007}#
                                                              #{b\ 1097}#
                                                              #{req\ 1040}#
                                                              #{opt\ 1041}#
                                                              (cons (list #{k\ 1096}#
                                                                          #{a\ 1094}#
                                                                          #{init\ 1095}#)
                                                                    #{rkey\ 1042}#)))
                                                          #{tmp\ 1079}#)
                                                   ((lambda (#{tmp\ 1098}#)
                                                      (if (if #{tmp\ 1098}#
                                                            (apply (lambda (#{aok\ 1100}#)
                                                                     (eq? (syntax->datum
                                                                            #{aok\ 1100}#)
                                                                          #:allow-other-keys))
                                                                   #{tmp\ 1098}#)
                                                            #f)
                                                        (apply (lambda (#{aok\ 1102}#)
                                                                 (#{check\ 1011}#
                                                                   #{req\ 1040}#
                                                                   #{opt\ 1041}#
                                                                   #f
                                                                   (cons #t
                                                                         (reverse
                                                                           #{rkey\ 1042}#))))
                                                               #{tmp\ 1098}#)
                                                        ((lambda (#{tmp\ 1103}#)
                                                           (if (if #{tmp\ 1103}#
                                                                 (apply (lambda (#{aok\ 1107}#
                                                                                 #{a\ 1108}#
                                                                                 #{b\ 1109}#)
                                                                          (if (eq? (syntax->datum
                                                                                     #{aok\ 1107}#)
                                                                                   #:allow-other-keys)
                                                                            (eq? (syntax->datum
                                                                                   #{a\ 1108}#)
                                                                                 #:rest)
                                                                            #f))
                                                                        #{tmp\ 1103}#)
                                                                 #f)
                                                             (apply (lambda (#{aok\ 1115}#
                                                                             #{a\ 1116}#
                                                                             #{b\ 1117}#)
                                                                      (#{rest\ 1009}#
                                                                        #{b\ 1117}#
                                                                        #{req\ 1040}#
                                                                        #{opt\ 1041}#
                                                                        (cons #t
                                                                              (reverse
                                                                                #{rkey\ 1042}#))))
                                                                    #{tmp\ 1103}#)
                                                             ((lambda (#{tmp\ 1118}#)
                                                                (if (if #{tmp\ 1118}#
                                                                      (apply (lambda (#{aok\ 1121}#
                                                                                      #{r\ 1122}#)
                                                                               (if (eq? (syntax->datum
                                                                                          #{aok\ 1121}#)
                                                                                        #:allow-other-keys)
                                                                                 (#{id?\ 382}#
                                                                                   #{r\ 1122}#)
                                                                                 #f))
                                                                             #{tmp\ 1118}#)
                                                                      #f)
                                                                  (apply (lambda (#{aok\ 1127}#
                                                                                  #{r\ 1128}#)
                                                                           (#{rest\ 1009}#
                                                                             #{r\ 1128}#
                                                                             #{req\ 1040}#
                                                                             #{opt\ 1041}#
                                                                             (cons #t
                                                                                   (reverse
                                                                                     #{rkey\ 1042}#))))
                                                                         #{tmp\ 1118}#)
                                                                  ((lambda (#{tmp\ 1129}#)
                                                                     (if (if #{tmp\ 1129}#
                                                                           (apply (lambda (#{a\ 1132}#
                                                                                           #{b\ 1133}#)
                                                                                    (eq? (syntax->datum
                                                                                           #{a\ 1132}#)
                                                                                         #:rest))
                                                                                  #{tmp\ 1129}#)
                                                                           #f)
                                                                       (apply (lambda (#{a\ 1136}#
                                                                                       #{b\ 1137}#)
                                                                                (#{rest\ 1009}#
                                                                                  #{b\ 1137}#
                                                                                  #{req\ 1040}#
                                                                                  #{opt\ 1041}#
                                                                                  (cons #f
                                                                                        (reverse
                                                                                          #{rkey\ 1042}#))))
                                                                              #{tmp\ 1129}#)
                                                                       ((lambda (#{tmp\ 1138}#)
                                                                          (if (if #{tmp\ 1138}#
                                                                                (apply (lambda (#{r\ 1140}#)
                                                                                         (#{id?\ 382}#
                                                                                           #{r\ 1140}#))
                                                                                       #{tmp\ 1138}#)
                                                                                #f)
                                                                            (apply (lambda (#{r\ 1142}#)
                                                                                     (#{rest\ 1009}#
                                                                                       #{r\ 1142}#
                                                                                       #{req\ 1040}#
                                                                                       #{opt\ 1041}#
                                                                                       (cons #f
                                                                                             (reverse
                                                                                               #{rkey\ 1042}#))))
                                                                                   #{tmp\ 1138}#)
                                                                            ((lambda (#{else\ 1144}#)
                                                                               (syntax-violation
                                                                                 'lambda*
                                                                                 "invalid keyword argument list"
                                                                                 #{orig-args\ 1000}#
                                                                                 #{args\ 1039}#))
                                                                             #{tmp\ 1047}#)))
                                                                        (list #{tmp\ 1047}#))))
                                                                   ($sc-dispatch
                                                                     #{tmp\ 1047}#
                                                                     '(any any)))))
                                                              ($sc-dispatch
                                                                #{tmp\ 1047}#
                                                                '(any .
                                                                      any)))))
                                                         ($sc-dispatch
                                                           #{tmp\ 1047}#
                                                           '(any any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1047}#
                                                      '(any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1047}#
                                                 '((any any any) . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1047}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1047}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1047}# (quote ()))))
                             #{args\ 1039}#)))
                        (#{opt\ 1005}#
                          (lambda (#{args\ 1145}# #{req\ 1146}# #{ropt\ 1147}#)
                            ((lambda (#{tmp\ 1151}#)
                               ((lambda (#{tmp\ 1152}#)
                                  (if #{tmp\ 1152}#
                                    (apply (lambda ()
                                             (#{check\ 1011}#
                                               #{req\ 1146}#
                                               (reverse #{ropt\ 1147}#)
                                               #f
                                               '()))
                                           #{tmp\ 1152}#)
                                    ((lambda (#{tmp\ 1153}#)
                                       (if (if #{tmp\ 1153}#
                                             (apply (lambda (#{a\ 1156}#
                                                             #{b\ 1157}#)
                                                      (#{id?\ 382}#
                                                        #{a\ 1156}#))
                                                    #{tmp\ 1153}#)
                                             #f)
                                         (apply (lambda (#{a\ 1160}#
                                                         #{b\ 1161}#)
                                                  (#{opt\ 1005}#
                                                    #{b\ 1161}#
                                                    #{req\ 1146}#
                                                    (cons (cons #{a\ 1160}#
                                                                '(#(syntax-object
                                                                    #f
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(a b)
                                                                       #((top)
                                                                         (top))
                                                                       #("i1158"
                                                                         "i1159"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(args
                                                                         req
                                                                         ropt)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1148"
                                                                         "i1149"
                                                                         "i1150"))
                                                                     #(ribcage
                                                                       (check rest
                                                                              key
                                                                              opt
                                                                              req)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i1010"
                                                                        "i1008"
                                                                        "i1006"
                                                                        "i1004"
                                                                        "i1002"))
                                                                     #(ribcage
                                                                       #(orig-args)
                                                                       #((top))
                                                                       #("i1001"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         chi-lambda-case
                                                                         lambda*-formals
                                                                         chi-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         chi-void
                                                                         eval-local-transformer
                                                                         chi-local-syntax
                                                                         chi-body
                                                                         chi-macro
                                                                         chi-application
                                                                         chi-expr
                                                                         chi
                                                                         chi-top
                                                                         syntax-type
                                                                         chi-when-list
                                                                         chi-install-global
                                                                         chi-top-sequence
                                                                         chi-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         maybe-name-value!
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i496"
                                                                        "i494"
                                                                        "i492"
                                                                        "i490"
                                                                        "i488"
                                                                        "i486"
                                                                        "i484"
                                                                        "i482"
                                                                        "i480"
                                                                        "i478"
                                                                        "i476"
                                                                        "i474"
                                                                        "i472"
                                                                        "i470"
                                                                        "i468"
                                                                        "i466"
                                                                        "i464"
                                                                        "i462"
                                                                        "i460"
                                                                        "i458"
                                                                        "i456"
                                                                        "i454"
                                                                        "i452"
                                                                        "i450"
                                                                        "i448"
                                                                        "i446"
                                                                        "i444"
                                                                        "i442"
                                                                        "i440"
                                                                        "i438"
                                                                        "i436"
                                                                        "i434"
                                                                        "i432"
                                                                        "i430"
                                                                        "i428"
                                                                        "i426"
                                                                        "i425"
                                                                        "i424"
                                                                        "i422"
                                                                        "i421"
                                                                        "i420"
                                                                        "i419"
                                                                        "i418"
                                                                        "i416"
                                                                        "i414"
                                                                        "i412"
                                                                        "i410"
                                                                        "i408"
                                                                        "i406"
                                                                        "i404"
                                                                        "i402"
                                                                        "i399"
                                                                        "i397"
                                                                        "i396"
                                                                        "i395"
                                                                        "i394"
                                                                        "i393"
                                                                        "i392"
                                                                        "i390"
                                                                        "i388"
                                                                        "i386"
                                                                        "i384"
                                                                        "i383"
                                                                        "i381"
                                                                        "i379"
                                                                        "i377"
                                                                        "i375"
                                                                        "i373"
                                                                        "i371"
                                                                        "i369"
                                                                        "i368"
                                                                        "i366"
                                                                        "i364"
                                                                        "i363"
                                                                        "i362"
                                                                        "i360"
                                                                        "i359"
                                                                        "i357"
                                                                        "i355"
                                                                        "i353"
                                                                        "i351"
                                                                        "i349"
                                                                        "i347"
                                                                        "i345"
                                                                        "i343"
                                                                        "i341"
                                                                        "i339"
                                                                        "i337"
                                                                        "i335"
                                                                        "i333"
                                                                        "i331"
                                                                        "i329"
                                                                        "i327"
                                                                        "i325"
                                                                        "i323"
                                                                        "i321"
                                                                        "i319"
                                                                        "i317"
                                                                        "i315"
                                                                        "i313"
                                                                        "i311"
                                                                        "i309"
                                                                        "i307"
                                                                        "i305"
                                                                        "i303"
                                                                        "i301"
                                                                        "i299"
                                                                        "i297"
                                                                        "i295"
                                                                        "i294"
                                                                        "i292"
                                                                        "i290"
                                                                        "i288"
                                                                        "i286"
                                                                        "i284"
                                                                        "i282"
                                                                        "i280"
                                                                        "i278"
                                                                        "i276"
                                                                        "i273"
                                                                        "i271"
                                                                        "i269"
                                                                        "i267"
                                                                        "i265"
                                                                        "i263"
                                                                        "i261"
                                                                        "i259"
                                                                        "i257"
                                                                        "i255"
                                                                        "i253"
                                                                        "i251"
                                                                        "i249"
                                                                        "i247"
                                                                        "i245"
                                                                        "i243"
                                                                        "i241"
                                                                        "i239"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors
                                                                         and-map*)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i33"
                                                                        "i32"
                                                                        "i31"
                                                                        "i29")))
                                                                    (hygiene
                                                                      guile))))
                                                          #{ropt\ 1147}#)))
                                                #{tmp\ 1153}#)
                                         ((lambda (#{tmp\ 1162}#)
                                            (if (if #{tmp\ 1162}#
                                                  (apply (lambda (#{a\ 1166}#
                                                                  #{init\ 1167}#
                                                                  #{b\ 1168}#)
                                                           (#{id?\ 382}#
                                                             #{a\ 1166}#))
                                                         #{tmp\ 1162}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1172}#
                                                              #{init\ 1173}#
                                                              #{b\ 1174}#)
                                                       (#{opt\ 1005}#
                                                         #{b\ 1174}#
                                                         #{req\ 1146}#
                                                         (cons (list #{a\ 1172}#
                                                                     #{init\ 1173}#)
                                                               #{ropt\ 1147}#)))
                                                     #{tmp\ 1162}#)
                                              ((lambda (#{tmp\ 1175}#)
                                                 (if (if #{tmp\ 1175}#
                                                       (apply (lambda (#{a\ 1178}#
                                                                       #{b\ 1179}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1178}#)
                                                                     #:key))
                                                              #{tmp\ 1175}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1182}#
                                                                   #{b\ 1183}#)
                                                            (#{key\ 1007}#
                                                              #{b\ 1183}#
                                                              #{req\ 1146}#
                                                              (reverse
                                                                #{ropt\ 1147}#)
                                                              '()))
                                                          #{tmp\ 1175}#)
                                                   ((lambda (#{tmp\ 1184}#)
                                                      (if (if #{tmp\ 1184}#
                                                            (apply (lambda (#{a\ 1187}#
                                                                            #{b\ 1188}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1187}#)
                                                                          #:rest))
                                                                   #{tmp\ 1184}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1191}#
                                                                        #{b\ 1192}#)
                                                                 (#{rest\ 1009}#
                                                                   #{b\ 1192}#
                                                                   #{req\ 1146}#
                                                                   (reverse
                                                                     #{ropt\ 1147}#)
                                                                   '()))
                                                               #{tmp\ 1184}#)
                                                        ((lambda (#{tmp\ 1193}#)
                                                           (if (if #{tmp\ 1193}#
                                                                 (apply (lambda (#{r\ 1195}#)
                                                                          (#{id?\ 382}#
                                                                            #{r\ 1195}#))
                                                                        #{tmp\ 1193}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1197}#)
                                                                      (#{rest\ 1009}#
                                                                        #{r\ 1197}#
                                                                        #{req\ 1146}#
                                                                        (reverse
                                                                          #{ropt\ 1147}#)
                                                                        '()))
                                                                    #{tmp\ 1193}#)
                                                             ((lambda (#{else\ 1199}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid optional argument list"
                                                                  #{orig-args\ 1000}#
                                                                  #{args\ 1145}#))
                                                              #{tmp\ 1151}#)))
                                                         (list #{tmp\ 1151}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1151}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1151}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1151}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1151}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1151}# (quote ()))))
                             #{args\ 1145}#)))
                        (#{req\ 1003}#
                          (lambda (#{args\ 1200}# #{rreq\ 1201}#)
                            ((lambda (#{tmp\ 1204}#)
                               ((lambda (#{tmp\ 1205}#)
                                  (if #{tmp\ 1205}#
                                    (apply (lambda ()
                                             (#{check\ 1011}#
                                               (reverse #{rreq\ 1201}#)
                                               '()
                                               #f
                                               '()))
                                           #{tmp\ 1205}#)
                                    ((lambda (#{tmp\ 1206}#)
                                       (if (if #{tmp\ 1206}#
                                             (apply (lambda (#{a\ 1209}#
                                                             #{b\ 1210}#)
                                                      (#{id?\ 382}#
                                                        #{a\ 1209}#))
                                                    #{tmp\ 1206}#)
                                             #f)
                                         (apply (lambda (#{a\ 1213}#
                                                         #{b\ 1214}#)
                                                  (#{req\ 1003}#
                                                    #{b\ 1214}#
                                                    (cons #{a\ 1213}#
                                                          #{rreq\ 1201}#)))
                                                #{tmp\ 1206}#)
                                         ((lambda (#{tmp\ 1215}#)
                                            (if (if #{tmp\ 1215}#
                                                  (apply (lambda (#{a\ 1218}#
                                                                  #{b\ 1219}#)
                                                           (eq? (syntax->datum
                                                                  #{a\ 1218}#)
                                                                #:optional))
                                                         #{tmp\ 1215}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1222}#
                                                              #{b\ 1223}#)
                                                       (#{opt\ 1005}#
                                                         #{b\ 1223}#
                                                         (reverse
                                                           #{rreq\ 1201}#)
                                                         '()))
                                                     #{tmp\ 1215}#)
                                              ((lambda (#{tmp\ 1224}#)
                                                 (if (if #{tmp\ 1224}#
                                                       (apply (lambda (#{a\ 1227}#
                                                                       #{b\ 1228}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1227}#)
                                                                     #:key))
                                                              #{tmp\ 1224}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1231}#
                                                                   #{b\ 1232}#)
                                                            (#{key\ 1007}#
                                                              #{b\ 1232}#
                                                              (reverse
                                                                #{rreq\ 1201}#)
                                                              '()
                                                              '()))
                                                          #{tmp\ 1224}#)
                                                   ((lambda (#{tmp\ 1233}#)
                                                      (if (if #{tmp\ 1233}#
                                                            (apply (lambda (#{a\ 1236}#
                                                                            #{b\ 1237}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1236}#)
                                                                          #:rest))
                                                                   #{tmp\ 1233}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1240}#
                                                                        #{b\ 1241}#)
                                                                 (#{rest\ 1009}#
                                                                   #{b\ 1241}#
                                                                   (reverse
                                                                     #{rreq\ 1201}#)
                                                                   '()
                                                                   '()))
                                                               #{tmp\ 1233}#)
                                                        ((lambda (#{tmp\ 1242}#)
                                                           (if (if #{tmp\ 1242}#
                                                                 (apply (lambda (#{r\ 1244}#)
                                                                          (#{id?\ 382}#
                                                                            #{r\ 1244}#))
                                                                        #{tmp\ 1242}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1246}#)
                                                                      (#{rest\ 1009}#
                                                                        #{r\ 1246}#
                                                                        (reverse
                                                                          #{rreq\ 1201}#)
                                                                        '()
                                                                        '()))
                                                                    #{tmp\ 1242}#)
                                                             ((lambda (#{else\ 1248}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid argument list"
                                                                  #{orig-args\ 1000}#
                                                                  #{args\ 1200}#))
                                                              #{tmp\ 1204}#)))
                                                         (list #{tmp\ 1204}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1204}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1204}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1204}#
                                            '(any . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1204}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1204}# (quote ()))))
                             #{args\ 1200}#))))
                 (#{req\ 1003}# #{orig-args\ 1000}# (quote ())))))
           (#{chi-simple-lambda\ 487}#
             (lambda (#{e\ 1249}#
                      #{r\ 1250}#
                      #{w\ 1251}#
                      #{s\ 1252}#
                      #{mod\ 1253}#
                      #{req\ 1254}#
                      #{rest\ 1255}#
                      #{meta\ 1256}#
                      #{body\ 1257}#)
               (let ((#{ids\ 1269}#
                       (if #{rest\ 1255}#
                         (append #{req\ 1254}# (list #{rest\ 1255}#))
                         #{req\ 1254}#)))
                 (let ((#{vars\ 1271}#
                         (map #{gen-var\ 495}# #{ids\ 1269}#)))
                   (let ((#{labels\ 1273}#
                           (#{gen-labels\ 400}# #{ids\ 1269}#)))
                     (#{build-simple-lambda\ 324}#
                       #{s\ 1252}#
                       (map syntax->datum #{req\ 1254}#)
                       (if #{rest\ 1255}#
                         (syntax->datum #{rest\ 1255}#)
                         #f)
                       #{vars\ 1271}#
                       #{meta\ 1256}#
                       (#{chi-body\ 475}#
                         #{body\ 1257}#
                         (#{source-wrap\ 453}#
                           #{e\ 1249}#
                           #{w\ 1251}#
                           #{s\ 1252}#
                           #{mod\ 1253}#)
                         (#{extend-var-env\ 372}#
                           #{labels\ 1273}#
                           #{vars\ 1271}#
                           #{r\ 1250}#)
                         (#{make-binding-wrap\ 429}#
                           #{ids\ 1269}#
                           #{labels\ 1273}#
                           #{w\ 1251}#)
                         #{mod\ 1253}#)))))))
           (#{lambda-formals\ 485}#
             (lambda (#{orig-args\ 1276}#)
               (letrec ((#{check\ 1281}#
                          (lambda (#{req\ 1282}# #{rest\ 1283}#)
                            (if (#{distinct-bound-ids?\ 447}#
                                  (if #{rest\ 1283}#
                                    (cons #{rest\ 1283}# #{req\ 1282}#)
                                    #{req\ 1282}#))
                              (values #{req\ 1282}# #f #{rest\ 1283}# #f)
                              (syntax-violation
                                'lambda
                                "duplicate identifier in argument list"
                                #{orig-args\ 1276}#))))
                        (#{req\ 1279}#
                          (lambda (#{args\ 1289}# #{rreq\ 1290}#)
                            ((lambda (#{tmp\ 1293}#)
                               ((lambda (#{tmp\ 1294}#)
                                  (if #{tmp\ 1294}#
                                    (apply (lambda ()
                                             (#{check\ 1281}#
                                               (reverse #{rreq\ 1290}#)
                                               #f))
                                           #{tmp\ 1294}#)
                                    ((lambda (#{tmp\ 1295}#)
                                       (if (if #{tmp\ 1295}#
                                             (apply (lambda (#{a\ 1298}#
                                                             #{b\ 1299}#)
                                                      (#{id?\ 382}#
                                                        #{a\ 1298}#))
                                                    #{tmp\ 1295}#)
                                             #f)
                                         (apply (lambda (#{a\ 1302}#
                                                         #{b\ 1303}#)
                                                  (#{req\ 1279}#
                                                    #{b\ 1303}#
                                                    (cons #{a\ 1302}#
                                                          #{rreq\ 1290}#)))
                                                #{tmp\ 1295}#)
                                         ((lambda (#{tmp\ 1304}#)
                                            (if (if #{tmp\ 1304}#
                                                  (apply (lambda (#{r\ 1306}#)
                                                           (#{id?\ 382}#
                                                             #{r\ 1306}#))
                                                         #{tmp\ 1304}#)
                                                  #f)
                                              (apply (lambda (#{r\ 1308}#)
                                                       (#{check\ 1281}#
                                                         (reverse
                                                           #{rreq\ 1290}#)
                                                         #{r\ 1308}#))
                                                     #{tmp\ 1304}#)
                                              ((lambda (#{else\ 1310}#)
                                                 (syntax-violation
                                                   'lambda
                                                   "invalid argument list"
                                                   #{orig-args\ 1276}#
                                                   #{args\ 1289}#))
                                               #{tmp\ 1293}#)))
                                          (list #{tmp\ 1293}#))))
                                     ($sc-dispatch
                                       #{tmp\ 1293}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1293}# (quote ()))))
                             #{args\ 1289}#))))
                 (#{req\ 1279}# #{orig-args\ 1276}# (quote ())))))
           (#{ellipsis?\ 483}#
             (lambda (#{x\ 1311}#)
               (if (#{nonsymbol-id?\ 380}# #{x\ 1311}#)
                 (#{free-id=?\ 441}#
                   #{x\ 1311}#
                   '#(syntax-object
                      ...
                      ((top)
                       #(ribcage () () ())
                       #(ribcage () () ())
                       #(ribcage #(x) #((top)) #("i1312"))
                       #(ribcage
                         (lambda-var-list
                           gen-var
                           strip
                           chi-lambda-case
                           lambda*-formals
                           chi-simple-lambda
                           lambda-formals
                           ellipsis?
                           chi-void
                           eval-local-transformer
                           chi-local-syntax
                           chi-body
                           chi-macro
                           chi-application
                           chi-expr
                           chi
                           chi-top
                           syntax-type
                           chi-when-list
                           chi-install-global
                           chi-top-sequence
                           chi-sequence
                           source-wrap
                           wrap
                           bound-id-member?
                           distinct-bound-ids?
                           valid-bound-ids?
                           bound-id=?
                           free-id=?
                           id-var-name
                           same-marks?
                           join-marks
                           join-wraps
                           smart-append
                           make-binding-wrap
                           extend-ribcage!
                           make-empty-ribcage
                           new-mark
                           anti-mark
                           the-anti-mark
                           top-marked?
                           top-wrap
                           empty-wrap
                           set-ribcage-labels!
                           set-ribcage-marks!
                           set-ribcage-symnames!
                           ribcage-labels
                           ribcage-marks
                           ribcage-symnames
                           ribcage?
                           make-ribcage
                           gen-labels
                           gen-label
                           make-rename
                           rename-marks
                           rename-new
                           rename-old
                           subst-rename?
                           wrap-subst
                           wrap-marks
                           make-wrap
                           id-sym-name&marks
                           id-sym-name
                           id?
                           nonsymbol-id?
                           global-extend
                           lookup
                           macros-only-env
                           extend-var-env
                           extend-env
                           null-env
                           binding-value
                           binding-type
                           make-binding
                           arg-check
                           source-annotation
                           no-source
                           set-syntax-object-module!
                           set-syntax-object-wrap!
                           set-syntax-object-expression!
                           syntax-object-module
                           syntax-object-wrap
                           syntax-object-expression
                           syntax-object?
                           make-syntax-object
                           build-lexical-var
                           build-letrec
                           build-named-let
                           build-let
                           build-sequence
                           build-data
                           build-primref
                           build-lambda-case
                           build-case-lambda
                           build-simple-lambda
                           build-global-definition
                           maybe-name-value!
                           build-global-assignment
                           build-global-reference
                           analyze-variable
                           build-lexical-assignment
                           build-lexical-reference
                           build-dynlet
                           build-conditional
                           build-application
                           build-void
                           decorate-source
                           get-global-definition-hook
                           put-global-definition-hook
                           gensym-hook
                           local-eval-hook
                           top-level-eval-hook
                           fx<
                           fx=
                           fx-
                           fx+
                           set-lambda-meta!
                           lambda-meta
                           lambda?
                           make-dynlet
                           make-letrec
                           make-let
                           make-lambda-case
                           make-lambda
                           make-sequence
                           make-application
                           make-conditional
                           make-toplevel-define
                           make-toplevel-set
                           make-toplevel-ref
                           make-module-set
                           make-module-ref
                           make-lexical-set
                           make-lexical-ref
                           make-primitive-ref
                           make-const
                           make-void)
                         ((top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top))
                         ("i496"
                          "i494"
                          "i492"
                          "i490"
                          "i488"
                          "i486"
                          "i484"
                          "i482"
                          "i480"
                          "i478"
                          "i476"
                          "i474"
                          "i472"
                          "i470"
                          "i468"
                          "i466"
                          "i464"
                          "i462"
                          "i460"
                          "i458"
                          "i456"
                          "i454"
                          "i452"
                          "i450"
                          "i448"
                          "i446"
                          "i444"
                          "i442"
                          "i440"
                          "i438"
                          "i436"
                          "i434"
                          "i432"
                          "i430"
                          "i428"
                          "i426"
                          "i425"
                          "i424"
                          "i422"
                          "i421"
                          "i420"
                          "i419"
                          "i418"
                          "i416"
                          "i414"
                          "i412"
                          "i410"
                          "i408"
                          "i406"
                          "i404"
                          "i402"
                          "i399"
                          "i397"
                          "i396"
                          "i395"
                          "i394"
                          "i393"
                          "i392"
                          "i390"
                          "i388"
                          "i386"
                          "i384"
                          "i383"
                          "i381"
                          "i379"
                          "i377"
                          "i375"
                          "i373"
                          "i371"
                          "i369"
                          "i368"
                          "i366"
                          "i364"
                          "i363"
                          "i362"
                          "i360"
                          "i359"
                          "i357"
                          "i355"
                          "i353"
                          "i351"
                          "i349"
                          "i347"
                          "i345"
                          "i343"
                          "i341"
                          "i339"
                          "i337"
                          "i335"
                          "i333"
                          "i331"
                          "i329"
                          "i327"
                          "i325"
                          "i323"
                          "i321"
                          "i319"
                          "i317"
                          "i315"
                          "i313"
                          "i311"
                          "i309"
                          "i307"
                          "i305"
                          "i303"
                          "i301"
                          "i299"
                          "i297"
                          "i295"
                          "i294"
                          "i292"
                          "i290"
                          "i288"
                          "i286"
                          "i284"
                          "i282"
                          "i280"
                          "i278"
                          "i276"
                          "i273"
                          "i271"
                          "i269"
                          "i267"
                          "i265"
                          "i263"
                          "i261"
                          "i259"
                          "i257"
                          "i255"
                          "i253"
                          "i251"
                          "i249"
                          "i247"
                          "i245"
                          "i243"
                          "i241"
                          "i239"))
                       #(ribcage
                         (define-structure
                           define-expansion-accessors
                           define-expansion-constructors
                           and-map*)
                         ((top) (top) (top) (top))
                         ("i33" "i32" "i31" "i29")))
                      (hygiene guile)))
                 #f)))
           (#{chi-void\ 481}#
             (lambda () (#{build-void\ 302}# #f)))
           (#{eval-local-transformer\ 479}#
             (lambda (#{expanded\ 1316}# #{mod\ 1317}#)
               (let ((#{p\ 1321}#
                       (#{local-eval-hook\ 293}#
                         #{expanded\ 1316}#
                         #{mod\ 1317}#)))
                 (if (procedure? #{p\ 1321}#)
                   #{p\ 1321}#
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 1321}#)))))
           (#{chi-local-syntax\ 477}#
             (lambda (#{rec?\ 1322}#
                      #{e\ 1323}#
                      #{r\ 1324}#
                      #{w\ 1325}#
                      #{s\ 1326}#
                      #{mod\ 1327}#
                      #{k\ 1328}#)
               ((lambda (#{tmp\ 1336}#)
                  ((lambda (#{tmp\ 1337}#)
                     (if #{tmp\ 1337}#
                       (apply (lambda (#{_\ 1343}#
                                       #{id\ 1344}#
                                       #{val\ 1345}#
                                       #{e1\ 1346}#
                                       #{e2\ 1347}#)
                                (let ((#{ids\ 1349}# #{id\ 1344}#))
                                  (if (not (#{valid-bound-ids?\ 445}#
                                             #{ids\ 1349}#))
                                    (syntax-violation
                                      #f
                                      "duplicate bound keyword"
                                      #{e\ 1323}#)
                                    (let ((#{labels\ 1352}#
                                            (#{gen-labels\ 400}#
                                              #{ids\ 1349}#)))
                                      (let ((#{new-w\ 1354}#
                                              (#{make-binding-wrap\ 429}#
                                                #{ids\ 1349}#
                                                #{labels\ 1352}#
                                                #{w\ 1325}#)))
                                        (#{k\ 1328}#
                                          (cons #{e1\ 1346}# #{e2\ 1347}#)
                                          (#{extend-env\ 370}#
                                            #{labels\ 1352}#
                                            (let ((#{w\ 1358}#
                                                    (if #{rec?\ 1322}#
                                                      #{new-w\ 1354}#
                                                      #{w\ 1325}#))
                                                  (#{trans-r\ 1359}#
                                                    (#{macros-only-env\ 374}#
                                                      #{r\ 1324}#)))
                                              (map (lambda (#{x\ 1360}#)
                                                     (cons 'macro
                                                           (#{eval-local-transformer\ 479}#
                                                             (#{chi\ 467}#
                                                               #{x\ 1360}#
                                                               #{trans-r\ 1359}#
                                                               #{w\ 1358}#
                                                               #{mod\ 1327}#)
                                                             #{mod\ 1327}#)))
                                                   #{val\ 1345}#))
                                            #{r\ 1324}#)
                                          #{new-w\ 1354}#
                                          #{s\ 1326}#
                                          #{mod\ 1327}#))))))
                              #{tmp\ 1337}#)
                       ((lambda (#{_\ 1365}#)
                          (syntax-violation
                            #f
                            "bad local syntax definition"
                            (#{source-wrap\ 453}#
                              #{e\ 1323}#
                              #{w\ 1325}#
                              #{s\ 1326}#
                              #{mod\ 1327}#)))
                        #{tmp\ 1336}#)))
                   ($sc-dispatch
                     #{tmp\ 1336}#
                     '(any #(each (any any)) any . each-any))))
                #{e\ 1323}#)))
           (#{chi-body\ 475}#
             (lambda (#{body\ 1366}#
                      #{outer-form\ 1367}#
                      #{r\ 1368}#
                      #{w\ 1369}#
                      #{mod\ 1370}#)
               (let ((#{r\ 1378}#
                       (cons '("placeholder" placeholder)
                             #{r\ 1368}#)))
                 (let ((#{ribcage\ 1380}#
                         (#{make-ribcage\ 403}#
                           '()
                           '()
                           '())))
                   (let ((#{w\ 1383}#
                           (#{make-wrap\ 387}#
                             (#{wrap-marks\ 389}# #{w\ 1369}#)
                             (cons #{ribcage\ 1380}#
                                   (#{wrap-subst\ 391}# #{w\ 1369}#)))))
                     (letrec ((#{parse\ 1392}#
                                (lambda (#{body\ 1393}#
                                         #{ids\ 1394}#
                                         #{labels\ 1395}#
                                         #{var-ids\ 1396}#
                                         #{vars\ 1397}#
                                         #{vals\ 1398}#
                                         #{bindings\ 1399}#)
                                  (if (null? #{body\ 1393}#)
                                    (syntax-violation
                                      #f
                                      "no expressions in body"
                                      #{outer-form\ 1367}#)
                                    (let ((#{e\ 1404}# (cdar #{body\ 1393}#))
                                          (#{er\ 1405}# (caar #{body\ 1393}#)))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 463}#
                                            #{e\ 1404}#
                                            #{er\ 1405}#
                                            '(())
                                            (#{source-annotation\ 361}#
                                              #{er\ 1405}#)
                                            #{ribcage\ 1380}#
                                            #{mod\ 1370}#
                                            #f))
                                        (lambda (#{type\ 1407}#
                                                 #{value\ 1408}#
                                                 #{e\ 1409}#
                                                 #{w\ 1410}#
                                                 #{s\ 1411}#
                                                 #{mod\ 1412}#)
                                          (if (memv #{type\ 1407}#
                                                    '(define-form))
                                            (let ((#{id\ 1422}#
                                                    (#{wrap\ 451}#
                                                      #{value\ 1408}#
                                                      #{w\ 1410}#
                                                      #{mod\ 1412}#))
                                                  (#{label\ 1423}#
                                                    (#{gen-label\ 398}#)))
                                              (let ((#{var\ 1425}#
                                                      (#{gen-var\ 495}#
                                                        #{id\ 1422}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 427}#
                                                    #{ribcage\ 1380}#
                                                    #{id\ 1422}#
                                                    #{label\ 1423}#)
                                                  (#{parse\ 1392}#
                                                    (cdr #{body\ 1393}#)
                                                    (cons #{id\ 1422}#
                                                          #{ids\ 1394}#)
                                                    (cons #{label\ 1423}#
                                                          #{labels\ 1395}#)
                                                    (cons #{id\ 1422}#
                                                          #{var-ids\ 1396}#)
                                                    (cons #{var\ 1425}#
                                                          #{vars\ 1397}#)
                                                    (cons (cons #{er\ 1405}#
                                                                (#{wrap\ 451}#
                                                                  #{e\ 1409}#
                                                                  #{w\ 1410}#
                                                                  #{mod\ 1412}#))
                                                          #{vals\ 1398}#)
                                                    (cons (cons 'lexical
                                                                #{var\ 1425}#)
                                                          #{bindings\ 1399}#)))))
                                            (if (memv #{type\ 1407}#
                                                      '(define-syntax-form))
                                              (let ((#{id\ 1430}#
                                                      (#{wrap\ 451}#
                                                        #{value\ 1408}#
                                                        #{w\ 1410}#
                                                        #{mod\ 1412}#))
                                                    (#{label\ 1431}#
                                                      (#{gen-label\ 398}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 427}#
                                                    #{ribcage\ 1380}#
                                                    #{id\ 1430}#
                                                    #{label\ 1431}#)
                                                  (#{parse\ 1392}#
                                                    (cdr #{body\ 1393}#)
                                                    (cons #{id\ 1430}#
                                                          #{ids\ 1394}#)
                                                    (cons #{label\ 1431}#
                                                          #{labels\ 1395}#)
                                                    #{var-ids\ 1396}#
                                                    #{vars\ 1397}#
                                                    #{vals\ 1398}#
                                                    (cons (cons 'macro
                                                                (cons #{er\ 1405}#
                                                                      (#{wrap\ 451}#
                                                                        #{e\ 1409}#
                                                                        #{w\ 1410}#
                                                                        #{mod\ 1412}#)))
                                                          #{bindings\ 1399}#))))
                                              (if (memv #{type\ 1407}#
                                                        '(begin-form))
                                                ((lambda (#{tmp\ 1434}#)
                                                   ((lambda (#{tmp\ 1435}#)
                                                      (if #{tmp\ 1435}#
                                                        (apply (lambda (#{_\ 1438}#
                                                                        #{e1\ 1439}#)
                                                                 (#{parse\ 1392}#
                                                                   (letrec ((#{f\ 1442}#
                                                                              (lambda (#{forms\ 1443}#)
                                                                                (if (null? #{forms\ 1443}#)
                                                                                  (cdr #{body\ 1393}#)
                                                                                  (cons (cons #{er\ 1405}#
                                                                                              (#{wrap\ 451}#
                                                                                                (car #{forms\ 1443}#)
                                                                                                #{w\ 1410}#
                                                                                                #{mod\ 1412}#))
                                                                                        (#{f\ 1442}#
                                                                                          (cdr #{forms\ 1443}#)))))))
                                                                     (#{f\ 1442}#
                                                                       #{e1\ 1439}#))
                                                                   #{ids\ 1394}#
                                                                   #{labels\ 1395}#
                                                                   #{var-ids\ 1396}#
                                                                   #{vars\ 1397}#
                                                                   #{vals\ 1398}#
                                                                   #{bindings\ 1399}#))
                                                               #{tmp\ 1435}#)
                                                        (syntax-violation
                                                          #f
                                                          "source expression failed to match any pattern"
                                                          #{tmp\ 1434}#)))
                                                    ($sc-dispatch
                                                      #{tmp\ 1434}#
                                                      '(any . each-any))))
                                                 #{e\ 1409}#)
                                                (if (memv #{type\ 1407}#
                                                          '(local-syntax-form))
                                                  (#{chi-local-syntax\ 477}#
                                                    #{value\ 1408}#
                                                    #{e\ 1409}#
                                                    #{er\ 1405}#
                                                    #{w\ 1410}#
                                                    #{s\ 1411}#
                                                    #{mod\ 1412}#
                                                    (lambda (#{forms\ 1446}#
                                                             #{er\ 1447}#
                                                             #{w\ 1448}#
                                                             #{s\ 1449}#
                                                             #{mod\ 1450}#)
                                                      (#{parse\ 1392}#
                                                        (letrec ((#{f\ 1458}#
                                                                   (lambda (#{forms\ 1459}#)
                                                                     (if (null? #{forms\ 1459}#)
                                                                       (cdr #{body\ 1393}#)
                                                                       (cons (cons #{er\ 1447}#
                                                                                   (#{wrap\ 451}#
                                                                                     (car #{forms\ 1459}#)
                                                                                     #{w\ 1448}#
                                                                                     #{mod\ 1450}#))
                                                                             (#{f\ 1458}#
                                                                               (cdr #{forms\ 1459}#)))))))
                                                          (#{f\ 1458}#
                                                            #{forms\ 1446}#))
                                                        #{ids\ 1394}#
                                                        #{labels\ 1395}#
                                                        #{var-ids\ 1396}#
                                                        #{vars\ 1397}#
                                                        #{vals\ 1398}#
                                                        #{bindings\ 1399}#)))
                                                  (if (null? #{ids\ 1394}#)
                                                    (#{build-sequence\ 334}#
                                                      #f
                                                      (map (lambda (#{x\ 1462}#)
                                                             (#{chi\ 467}#
                                                               (cdr #{x\ 1462}#)
                                                               (car #{x\ 1462}#)
                                                               '(())
                                                               #{mod\ 1412}#))
                                                           (cons (cons #{er\ 1405}#
                                                                       (#{source-wrap\ 453}#
                                                                         #{e\ 1409}#
                                                                         #{w\ 1410}#
                                                                         #{s\ 1411}#
                                                                         #{mod\ 1412}#))
                                                                 (cdr #{body\ 1393}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 445}#
                                                                 #{ids\ 1394}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 1367}#))
                                                      (letrec ((#{loop\ 1469}#
                                                                 (lambda (#{bs\ 1470}#
                                                                          #{er-cache\ 1471}#
                                                                          #{r-cache\ 1472}#)
                                                                   (if (not (null? #{bs\ 1470}#))
                                                                     (let ((#{b\ 1475}#
                                                                             (car #{bs\ 1470}#)))
                                                                       (if (eq? (car #{b\ 1475}#)
                                                                                'macro)
                                                                         (let ((#{er\ 1478}#
                                                                                 (cadr #{b\ 1475}#)))
                                                                           (let ((#{r-cache\ 1480}#
                                                                                   (if (eq? #{er\ 1478}#
                                                                                            #{er-cache\ 1471}#)
                                                                                     #{r-cache\ 1472}#
                                                                                     (#{macros-only-env\ 374}#
                                                                                       #{er\ 1478}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 1475}#
                                                                                 (#{eval-local-transformer\ 479}#
                                                                                   (#{chi\ 467}#
                                                                                     (cddr #{b\ 1475}#)
                                                                                     #{r-cache\ 1480}#
                                                                                     '(())
                                                                                     #{mod\ 1412}#)
                                                                                   #{mod\ 1412}#))
                                                                               (#{loop\ 1469}#
                                                                                 (cdr #{bs\ 1470}#)
                                                                                 #{er\ 1478}#
                                                                                 #{r-cache\ 1480}#))))
                                                                         (#{loop\ 1469}#
                                                                           (cdr #{bs\ 1470}#)
                                                                           #{er-cache\ 1471}#
                                                                           #{r-cache\ 1472}#)))))))
                                                        (#{loop\ 1469}#
                                                          #{bindings\ 1399}#
                                                          #f
                                                          #f))
                                                      (set-cdr!
                                                        #{r\ 1378}#
                                                        (#{extend-env\ 370}#
                                                          #{labels\ 1395}#
                                                          #{bindings\ 1399}#
                                                          (cdr #{r\ 1378}#)))
                                                      (#{build-letrec\ 340}#
                                                        #f
                                                        (map syntax->datum
                                                             #{var-ids\ 1396}#)
                                                        #{vars\ 1397}#
                                                        (map (lambda (#{x\ 1483}#)
                                                               (#{chi\ 467}#
                                                                 (cdr #{x\ 1483}#)
                                                                 (car #{x\ 1483}#)
                                                                 '(())
                                                                 #{mod\ 1412}#))
                                                             #{vals\ 1398}#)
                                                        (#{build-sequence\ 334}#
                                                          #f
                                                          (map (lambda (#{x\ 1487}#)
                                                                 (#{chi\ 467}#
                                                                   (cdr #{x\ 1487}#)
                                                                   (car #{x\ 1487}#)
                                                                   '(())
                                                                   #{mod\ 1412}#))
                                                               (cons (cons #{er\ 1405}#
                                                                           (#{source-wrap\ 453}#
                                                                             #{e\ 1409}#
                                                                             #{w\ 1410}#
                                                                             #{s\ 1411}#
                                                                             #{mod\ 1412}#))
                                                                     (cdr #{body\ 1393}#))))))))))))))))))
                       (#{parse\ 1392}#
                         (map (lambda (#{x\ 1400}#)
                                (cons #{r\ 1378}#
                                      (#{wrap\ 451}#
                                        #{x\ 1400}#
                                        #{w\ 1383}#
                                        #{mod\ 1370}#)))
                              #{body\ 1366}#)
                         '()
                         '()
                         '()
                         '()
                         '()
                         '())))))))
           (#{chi-macro\ 473}#
             (lambda (#{p\ 1490}#
                      #{e\ 1491}#
                      #{r\ 1492}#
                      #{w\ 1493}#
                      #{s\ 1494}#
                      #{rib\ 1495}#
                      #{mod\ 1496}#)
               (letrec ((#{rebuild-macro-output\ 1505}#
                          (lambda (#{x\ 1506}# #{m\ 1507}#)
                            (if (pair? #{x\ 1506}#)
                              (#{decorate-source\ 300}#
                                (cons (#{rebuild-macro-output\ 1505}#
                                        (car #{x\ 1506}#)
                                        #{m\ 1507}#)
                                      (#{rebuild-macro-output\ 1505}#
                                        (cdr #{x\ 1506}#)
                                        #{m\ 1507}#))
                                #{s\ 1494}#)
                              (if (#{syntax-object?\ 346}# #{x\ 1506}#)
                                (let ((#{w\ 1515}#
                                        (#{syntax-object-wrap\ 350}#
                                          #{x\ 1506}#)))
                                  (let ((#{ms\ 1518}#
                                          (#{wrap-marks\ 389}# #{w\ 1515}#))
                                        (#{s\ 1519}#
                                          (#{wrap-subst\ 391}# #{w\ 1515}#)))
                                    (if (if (pair? #{ms\ 1518}#)
                                          (eq? (car #{ms\ 1518}#) #f)
                                          #f)
                                      (#{make-syntax-object\ 344}#
                                        (#{syntax-object-expression\ 348}#
                                          #{x\ 1506}#)
                                        (#{make-wrap\ 387}#
                                          (cdr #{ms\ 1518}#)
                                          (if #{rib\ 1495}#
                                            (cons #{rib\ 1495}#
                                                  (cdr #{s\ 1519}#))
                                            (cdr #{s\ 1519}#)))
                                        (#{syntax-object-module\ 352}#
                                          #{x\ 1506}#))
                                      (#{make-syntax-object\ 344}#
                                        (#{decorate-source\ 300}#
                                          (#{syntax-object-expression\ 348}#
                                            #{x\ 1506}#)
                                          #{s\ 1519}#)
                                        (#{make-wrap\ 387}#
                                          (cons #{m\ 1507}# #{ms\ 1518}#)
                                          (if #{rib\ 1495}#
                                            (cons #{rib\ 1495}#
                                                  (cons 'shift
                                                        #{s\ 1519}#))
                                            (cons (quote shift) #{s\ 1519}#)))
                                        (#{syntax-object-module\ 352}#
                                          #{x\ 1506}#)))))
                                (if (vector? #{x\ 1506}#)
                                  (let ((#{n\ 1527}#
                                          (vector-length #{x\ 1506}#)))
                                    (let ((#{v\ 1529}#
                                            (#{decorate-source\ 300}#
                                              (make-vector #{n\ 1527}#)
                                              #{x\ 1506}#)))
                                      (letrec ((#{loop\ 1532}#
                                                 (lambda (#{i\ 1533}#)
                                                   (if (#{fx=\ 287}#
                                                         #{i\ 1533}#
                                                         #{n\ 1527}#)
                                                     (begin
                                                       (if #f #f)
                                                       #{v\ 1529}#)
                                                     (begin
                                                       (vector-set!
                                                         #{v\ 1529}#
                                                         #{i\ 1533}#
                                                         (#{rebuild-macro-output\ 1505}#
                                                           (vector-ref
                                                             #{x\ 1506}#
                                                             #{i\ 1533}#)
                                                           #{m\ 1507}#))
                                                       (#{loop\ 1532}#
                                                         (#{fx+\ 283}#
                                                           #{i\ 1533}#
                                                           1)))))))
                                        (#{loop\ 1532}# 0))))
                                  (if (symbol? #{x\ 1506}#)
                                    (syntax-violation
                                      #f
                                      "encountered raw symbol in macro output"
                                      (#{source-wrap\ 453}#
                                        #{e\ 1491}#
                                        #{w\ 1493}#
                                        (#{wrap-subst\ 391}# #{w\ 1493}#)
                                        #{mod\ 1496}#)
                                      #{x\ 1506}#)
                                    (#{decorate-source\ 300}#
                                      #{x\ 1506}#
                                      #{s\ 1494}#))))))))
                 (#{rebuild-macro-output\ 1505}#
                   (#{p\ 1490}#
                     (#{source-wrap\ 453}#
                       #{e\ 1491}#
                       (#{anti-mark\ 423}# #{w\ 1493}#)
                       #{s\ 1494}#
                       #{mod\ 1496}#))
                   (gensym "m")))))
           (#{chi-application\ 471}#
             (lambda (#{x\ 1540}#
                      #{e\ 1541}#
                      #{r\ 1542}#
                      #{w\ 1543}#
                      #{s\ 1544}#
                      #{mod\ 1545}#)
               ((lambda (#{tmp\ 1552}#)
                  ((lambda (#{tmp\ 1553}#)
                     (if #{tmp\ 1553}#
                       (apply (lambda (#{e0\ 1556}# #{e1\ 1557}#)
                                (#{build-application\ 304}#
                                  #{s\ 1544}#
                                  #{x\ 1540}#
                                  (map (lambda (#{e\ 1558}#)
                                         (#{chi\ 467}#
                                           #{e\ 1558}#
                                           #{r\ 1542}#
                                           #{w\ 1543}#
                                           #{mod\ 1545}#))
                                       #{e1\ 1557}#)))
                              #{tmp\ 1553}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 1552}#)))
                   ($sc-dispatch
                     #{tmp\ 1552}#
                     '(any . each-any))))
                #{e\ 1541}#)))
           (#{chi-expr\ 469}#
             (lambda (#{type\ 1561}#
                      #{value\ 1562}#
                      #{e\ 1563}#
                      #{r\ 1564}#
                      #{w\ 1565}#
                      #{s\ 1566}#
                      #{mod\ 1567}#)
               (if (memv #{type\ 1561}# (quote (lexical)))
                 (#{build-lexical-reference\ 310}#
                   'value
                   #{s\ 1566}#
                   #{e\ 1563}#
                   #{value\ 1562}#)
                 (if (memv #{type\ 1561}# (quote (core core-form)))
                   (#{value\ 1562}#
                     #{e\ 1563}#
                     #{r\ 1564}#
                     #{w\ 1565}#
                     #{s\ 1566}#
                     #{mod\ 1567}#)
                   (if (memv #{type\ 1561}# (quote (module-ref)))
                     (call-with-values
                       (lambda ()
                         (#{value\ 1562}#
                           #{e\ 1563}#
                           #{r\ 1564}#
                           #{w\ 1565}#))
                       (lambda (#{e\ 1578}#
                                #{r\ 1579}#
                                #{w\ 1580}#
                                #{s\ 1581}#
                                #{mod\ 1582}#)
                         (#{chi\ 467}#
                           #{e\ 1578}#
                           #{r\ 1579}#
                           #{w\ 1580}#
                           #{mod\ 1582}#)))
                     (if (memv #{type\ 1561}# (quote (lexical-call)))
                       (#{chi-application\ 471}#
                         (let ((#{id\ 1590}# (car #{e\ 1563}#)))
                           (#{build-lexical-reference\ 310}#
                             'fun
                             (#{source-annotation\ 361}# #{id\ 1590}#)
                             (if (#{syntax-object?\ 346}# #{id\ 1590}#)
                               (syntax->datum #{id\ 1590}#)
                               #{id\ 1590}#)
                             #{value\ 1562}#))
                         #{e\ 1563}#
                         #{r\ 1564}#
                         #{w\ 1565}#
                         #{s\ 1566}#
                         #{mod\ 1567}#)
                       (if (memv #{type\ 1561}# (quote (global-call)))
                         (#{chi-application\ 471}#
                           (#{build-global-reference\ 316}#
                             (#{source-annotation\ 361}# (car #{e\ 1563}#))
                             (if (#{syntax-object?\ 346}# #{value\ 1562}#)
                               (#{syntax-object-expression\ 348}#
                                 #{value\ 1562}#)
                               #{value\ 1562}#)
                             (if (#{syntax-object?\ 346}# #{value\ 1562}#)
                               (#{syntax-object-module\ 352}# #{value\ 1562}#)
                               #{mod\ 1567}#))
                           #{e\ 1563}#
                           #{r\ 1564}#
                           #{w\ 1565}#
                           #{s\ 1566}#
                           #{mod\ 1567}#)
                         (if (memv #{type\ 1561}# (quote (constant)))
                           (#{build-data\ 332}#
                             #{s\ 1566}#
                             (#{strip\ 493}#
                               (#{source-wrap\ 453}#
                                 #{e\ 1563}#
                                 #{w\ 1565}#
                                 #{s\ 1566}#
                                 #{mod\ 1567}#)
                               '(())))
                           (if (memv #{type\ 1561}# (quote (global)))
                             (#{build-global-reference\ 316}#
                               #{s\ 1566}#
                               #{value\ 1562}#
                               #{mod\ 1567}#)
                             (if (memv #{type\ 1561}# (quote (call)))
                               (#{chi-application\ 471}#
                                 (#{chi\ 467}#
                                   (car #{e\ 1563}#)
                                   #{r\ 1564}#
                                   #{w\ 1565}#
                                   #{mod\ 1567}#)
                                 #{e\ 1563}#
                                 #{r\ 1564}#
                                 #{w\ 1565}#
                                 #{s\ 1566}#
                                 #{mod\ 1567}#)
                               (if (memv #{type\ 1561}# (quote (begin-form)))
                                 ((lambda (#{tmp\ 1597}#)
                                    ((lambda (#{tmp\ 1598}#)
                                       (if #{tmp\ 1598}#
                                         (apply (lambda (#{_\ 1602}#
                                                         #{e1\ 1603}#
                                                         #{e2\ 1604}#)
                                                  (#{chi-sequence\ 455}#
                                                    (cons #{e1\ 1603}#
                                                          #{e2\ 1604}#)
                                                    #{r\ 1564}#
                                                    #{w\ 1565}#
                                                    #{s\ 1566}#
                                                    #{mod\ 1567}#))
                                                #{tmp\ 1598}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 1597}#)))
                                     ($sc-dispatch
                                       #{tmp\ 1597}#
                                       '(any any . each-any))))
                                  #{e\ 1563}#)
                                 (if (memv #{type\ 1561}#
                                           '(local-syntax-form))
                                   (#{chi-local-syntax\ 477}#
                                     #{value\ 1562}#
                                     #{e\ 1563}#
                                     #{r\ 1564}#
                                     #{w\ 1565}#
                                     #{s\ 1566}#
                                     #{mod\ 1567}#
                                     #{chi-sequence\ 455}#)
                                   (if (memv #{type\ 1561}#
                                             '(eval-when-form))
                                     ((lambda (#{tmp\ 1608}#)
                                        ((lambda (#{tmp\ 1609}#)
                                           (if #{tmp\ 1609}#
                                             (apply (lambda (#{_\ 1614}#
                                                             #{x\ 1615}#
                                                             #{e1\ 1616}#
                                                             #{e2\ 1617}#)
                                                      (let ((#{when-list\ 1619}#
                                                              (#{chi-when-list\ 461}#
                                                                #{e\ 1563}#
                                                                #{x\ 1615}#
                                                                #{w\ 1565}#)))
                                                        (if (memq 'eval
                                                                  #{when-list\ 1619}#)
                                                          (#{chi-sequence\ 455}#
                                                            (cons #{e1\ 1616}#
                                                                  #{e2\ 1617}#)
                                                            #{r\ 1564}#
                                                            #{w\ 1565}#
                                                            #{s\ 1566}#
                                                            #{mod\ 1567}#)
                                                          (#{chi-void\ 481}#))))
                                                    #{tmp\ 1609}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{tmp\ 1608}#)))
                                         ($sc-dispatch
                                           #{tmp\ 1608}#
                                           '(any each-any any . each-any))))
                                      #{e\ 1563}#)
                                     (if (memv #{type\ 1561}#
                                               '(define-form
                                                  define-syntax-form))
                                       (syntax-violation
                                         #f
                                         "definition in expression context"
                                         #{e\ 1563}#
                                         (#{wrap\ 451}#
                                           #{value\ 1562}#
                                           #{w\ 1565}#
                                           #{mod\ 1567}#))
                                       (if (memv #{type\ 1561}#
                                                 '(syntax))
                                         (syntax-violation
                                           #f
                                           "reference to pattern variable outside syntax form"
                                           (#{source-wrap\ 453}#
                                             #{e\ 1563}#
                                             #{w\ 1565}#
                                             #{s\ 1566}#
                                             #{mod\ 1567}#))
                                         (if (memv #{type\ 1561}#
                                                   '(displaced-lexical))
                                           (syntax-violation
                                             #f
                                             "reference to identifier outside its scope"
                                             (#{source-wrap\ 453}#
                                               #{e\ 1563}#
                                               #{w\ 1565}#
                                               #{s\ 1566}#
                                               #{mod\ 1567}#))
                                           (syntax-violation
                                             #f
                                             "unexpected syntax"
                                             (#{source-wrap\ 453}#
                                               #{e\ 1563}#
                                               #{w\ 1565}#
                                               #{s\ 1566}#
                                               #{mod\ 1567}#))))))))))))))))))
           (#{chi\ 467}#
             (lambda (#{e\ 1626}#
                      #{r\ 1627}#
                      #{w\ 1628}#
                      #{mod\ 1629}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 463}#
                     #{e\ 1626}#
                     #{r\ 1627}#
                     #{w\ 1628}#
                     (#{source-annotation\ 361}# #{e\ 1626}#)
                     #f
                     #{mod\ 1629}#
                     #f))
                 (lambda (#{type\ 1634}#
                          #{value\ 1635}#
                          #{e\ 1636}#
                          #{w\ 1637}#
                          #{s\ 1638}#
                          #{mod\ 1639}#)
                   (#{chi-expr\ 469}#
                     #{type\ 1634}#
                     #{value\ 1635}#
                     #{e\ 1636}#
                     #{r\ 1627}#
                     #{w\ 1637}#
                     #{s\ 1638}#
                     #{mod\ 1639}#)))))
           (#{chi-top\ 465}#
             (lambda (#{e\ 1646}#
                      #{r\ 1647}#
                      #{w\ 1648}#
                      #{m\ 1649}#
                      #{esew\ 1650}#
                      #{mod\ 1651}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 463}#
                     #{e\ 1646}#
                     #{r\ 1647}#
                     #{w\ 1648}#
                     (#{source-annotation\ 361}# #{e\ 1646}#)
                     #f
                     #{mod\ 1651}#
                     #f))
                 (lambda (#{type\ 1672}#
                          #{value\ 1673}#
                          #{e\ 1674}#
                          #{w\ 1675}#
                          #{s\ 1676}#
                          #{mod\ 1677}#)
                   (if (memv #{type\ 1672}# (quote (begin-form)))
                     ((lambda (#{tmp\ 1685}#)
                        ((lambda (#{tmp\ 1686}#)
                           (if #{tmp\ 1686}#
                             (apply (lambda (#{_\ 1688}#) (#{chi-void\ 481}#))
                                    #{tmp\ 1686}#)
                             ((lambda (#{tmp\ 1689}#)
                                (if #{tmp\ 1689}#
                                  (apply (lambda (#{_\ 1693}#
                                                  #{e1\ 1694}#
                                                  #{e2\ 1695}#)
                                           (#{chi-top-sequence\ 457}#
                                             (cons #{e1\ 1694}# #{e2\ 1695}#)
                                             #{r\ 1647}#
                                             #{w\ 1675}#
                                             #{s\ 1676}#
                                             #{m\ 1649}#
                                             #{esew\ 1650}#
                                             #{mod\ 1677}#))
                                         #{tmp\ 1689}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 1685}#)))
                              ($sc-dispatch
                                #{tmp\ 1685}#
                                '(any any . each-any)))))
                         ($sc-dispatch #{tmp\ 1685}# (quote (any)))))
                      #{e\ 1674}#)
                     (if (memv #{type\ 1672}# (quote (local-syntax-form)))
                       (#{chi-local-syntax\ 477}#
                         #{value\ 1673}#
                         #{e\ 1674}#
                         #{r\ 1647}#
                         #{w\ 1675}#
                         #{s\ 1676}#
                         #{mod\ 1677}#
                         (lambda (#{body\ 1698}#
                                  #{r\ 1699}#
                                  #{w\ 1700}#
                                  #{s\ 1701}#
                                  #{mod\ 1702}#)
                           (#{chi-top-sequence\ 457}#
                             #{body\ 1698}#
                             #{r\ 1699}#
                             #{w\ 1700}#
                             #{s\ 1701}#
                             #{m\ 1649}#
                             #{esew\ 1650}#
                             #{mod\ 1702}#)))
                       (if (memv #{type\ 1672}# (quote (eval-when-form)))
                         ((lambda (#{tmp\ 1709}#)
                            ((lambda (#{tmp\ 1710}#)
                               (if #{tmp\ 1710}#
                                 (apply (lambda (#{_\ 1715}#
                                                 #{x\ 1716}#
                                                 #{e1\ 1717}#
                                                 #{e2\ 1718}#)
                                          (let ((#{when-list\ 1721}#
                                                  (#{chi-when-list\ 461}#
                                                    #{e\ 1674}#
                                                    #{x\ 1716}#
                                                    #{w\ 1675}#))
                                                (#{body\ 1722}#
                                                  (cons #{e1\ 1717}#
                                                        #{e2\ 1718}#)))
                                            (if (eq? #{m\ 1649}# (quote e))
                                              (if (memq 'eval
                                                        #{when-list\ 1721}#)
                                                (#{chi-top-sequence\ 457}#
                                                  #{body\ 1722}#
                                                  #{r\ 1647}#
                                                  #{w\ 1675}#
                                                  #{s\ 1676}#
                                                  (if (memq 'expand
                                                            #{when-list\ 1721}#)
                                                    'c&e
                                                    'e)
                                                  '(eval)
                                                  #{mod\ 1677}#)
                                                (begin
                                                  (if (memq 'expand
                                                            #{when-list\ 1721}#)
                                                    (#{top-level-eval-hook\ 291}#
                                                      (#{chi-top-sequence\ 457}#
                                                        #{body\ 1722}#
                                                        #{r\ 1647}#
                                                        #{w\ 1675}#
                                                        #{s\ 1676}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1677}#)
                                                      #{mod\ 1677}#))
                                                  (#{chi-void\ 481}#)))
                                              (if (memq 'load
                                                        #{when-list\ 1721}#)
                                                (if (let ((#{t\ 1731}#
                                                            (memq 'compile
                                                                  #{when-list\ 1721}#)))
                                                      (if #{t\ 1731}#
                                                        #{t\ 1731}#
                                                        (let ((#{t\ 1734}#
                                                                (memq 'expand
                                                                      #{when-list\ 1721}#)))
                                                          (if #{t\ 1734}#
                                                            #{t\ 1734}#
                                                            (if (eq? #{m\ 1649}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 1721}#)
                                                              #f)))))
                                                  (#{chi-top-sequence\ 457}#
                                                    #{body\ 1722}#
                                                    #{r\ 1647}#
                                                    #{w\ 1675}#
                                                    #{s\ 1676}#
                                                    'c&e
                                                    '(compile load)
                                                    #{mod\ 1677}#)
                                                  (if (memq #{m\ 1649}#
                                                            '(c c&e))
                                                    (#{chi-top-sequence\ 457}#
                                                      #{body\ 1722}#
                                                      #{r\ 1647}#
                                                      #{w\ 1675}#
                                                      #{s\ 1676}#
                                                      'c
                                                      '(load)
                                                      #{mod\ 1677}#)
                                                    (#{chi-void\ 481}#)))
                                                (if (let ((#{t\ 1742}#
                                                            (memq 'compile
                                                                  #{when-list\ 1721}#)))
                                                      (if #{t\ 1742}#
                                                        #{t\ 1742}#
                                                        (let ((#{t\ 1745}#
                                                                (memq 'expand
                                                                      #{when-list\ 1721}#)))
                                                          (if #{t\ 1745}#
                                                            #{t\ 1745}#
                                                            (if (eq? #{m\ 1649}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 1721}#)
                                                              #f)))))
                                                  (begin
                                                    (#{top-level-eval-hook\ 291}#
                                                      (#{chi-top-sequence\ 457}#
                                                        #{body\ 1722}#
                                                        #{r\ 1647}#
                                                        #{w\ 1675}#
                                                        #{s\ 1676}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1677}#)
                                                      #{mod\ 1677}#)
                                                    (#{chi-void\ 481}#))
                                                  (#{chi-void\ 481}#))))))
                                        #{tmp\ 1710}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{tmp\ 1709}#)))
                             ($sc-dispatch
                               #{tmp\ 1709}#
                               '(any each-any any . each-any))))
                          #{e\ 1674}#)
                         (if (memv #{type\ 1672}#
                                   '(define-syntax-form))
                           (let ((#{n\ 1753}#
                                   (#{id-var-name\ 439}#
                                     #{value\ 1673}#
                                     #{w\ 1675}#))
                                 (#{r\ 1754}#
                                   (#{macros-only-env\ 374}# #{r\ 1647}#)))
                             (if (memv #{m\ 1649}# (quote (c)))
                               (if (memq (quote compile) #{esew\ 1650}#)
                                 (let ((#{e\ 1757}#
                                         (#{chi-install-global\ 459}#
                                           #{n\ 1753}#
                                           (#{chi\ 467}#
                                             #{e\ 1674}#
                                             #{r\ 1754}#
                                             #{w\ 1675}#
                                             #{mod\ 1677}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 291}#
                                       #{e\ 1757}#
                                       #{mod\ 1677}#)
                                     (if (memq (quote load) #{esew\ 1650}#)
                                       #{e\ 1757}#
                                       (#{chi-void\ 481}#))))
                                 (if (memq (quote load) #{esew\ 1650}#)
                                   (#{chi-install-global\ 459}#
                                     #{n\ 1753}#
                                     (#{chi\ 467}#
                                       #{e\ 1674}#
                                       #{r\ 1754}#
                                       #{w\ 1675}#
                                       #{mod\ 1677}#))
                                   (#{chi-void\ 481}#)))
                               (if (memv #{m\ 1649}# (quote (c&e)))
                                 (let ((#{e\ 1760}#
                                         (#{chi-install-global\ 459}#
                                           #{n\ 1753}#
                                           (#{chi\ 467}#
                                             #{e\ 1674}#
                                             #{r\ 1754}#
                                             #{w\ 1675}#
                                             #{mod\ 1677}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 291}#
                                       #{e\ 1760}#
                                       #{mod\ 1677}#)
                                     #{e\ 1760}#))
                                 (begin
                                   (if (memq (quote eval) #{esew\ 1650}#)
                                     (#{top-level-eval-hook\ 291}#
                                       (#{chi-install-global\ 459}#
                                         #{n\ 1753}#
                                         (#{chi\ 467}#
                                           #{e\ 1674}#
                                           #{r\ 1754}#
                                           #{w\ 1675}#
                                           #{mod\ 1677}#))
                                       #{mod\ 1677}#))
                                   (#{chi-void\ 481}#)))))
                           (if (memv #{type\ 1672}# (quote (define-form)))
                             (let ((#{n\ 1765}#
                                     (#{id-var-name\ 439}#
                                       #{value\ 1673}#
                                       #{w\ 1675}#)))
                               (let ((#{type\ 1767}#
                                       (#{binding-type\ 365}#
                                         (#{lookup\ 376}#
                                           #{n\ 1765}#
                                           #{r\ 1647}#
                                           #{mod\ 1677}#))))
                                 (if (memv #{type\ 1767}#
                                           '(global core macro module-ref))
                                   (begin
                                     (if (if (memq #{m\ 1649}# (quote (c c&e)))
                                           (if (not (module-local-variable
                                                      (current-module)
                                                      #{n\ 1765}#))
                                             (current-module)
                                             #f)
                                           #f)
                                       (let ((#{old\ 1773}#
                                               (module-variable
                                                 (current-module)
                                                 #{n\ 1765}#)))
                                         (module-define!
                                           (current-module)
                                           #{n\ 1765}#
                                           (if (variable? #{old\ 1773}#)
                                             (variable-ref #{old\ 1773}#)
                                             #f))))
                                     (let ((#{x\ 1776}#
                                             (#{build-global-definition\ 322}#
                                               #{s\ 1676}#
                                               #{n\ 1765}#
                                               (#{chi\ 467}#
                                                 #{e\ 1674}#
                                                 #{r\ 1647}#
                                                 #{w\ 1675}#
                                                 #{mod\ 1677}#))))
                                       (begin
                                         (if (eq? #{m\ 1649}# (quote c&e))
                                           (#{top-level-eval-hook\ 291}#
                                             #{x\ 1776}#
                                             #{mod\ 1677}#))
                                         #{x\ 1776}#)))
                                   (if (memv #{type\ 1767}#
                                             '(displaced-lexical))
                                     (syntax-violation
                                       #f
                                       "identifier out of context"
                                       #{e\ 1674}#
                                       (#{wrap\ 451}#
                                         #{value\ 1673}#
                                         #{w\ 1675}#
                                         #{mod\ 1677}#))
                                     (syntax-violation
                                       #f
                                       "cannot define keyword at top level"
                                       #{e\ 1674}#
                                       (#{wrap\ 451}#
                                         #{value\ 1673}#
                                         #{w\ 1675}#
                                         #{mod\ 1677}#))))))
                             (let ((#{x\ 1782}#
                                     (#{chi-expr\ 469}#
                                       #{type\ 1672}#
                                       #{value\ 1673}#
                                       #{e\ 1674}#
                                       #{r\ 1647}#
                                       #{w\ 1675}#
                                       #{s\ 1676}#
                                       #{mod\ 1677}#)))
                               (begin
                                 (if (eq? #{m\ 1649}# (quote c&e))
                                   (#{top-level-eval-hook\ 291}#
                                     #{x\ 1782}#
                                     #{mod\ 1677}#))
                                 #{x\ 1782}#)))))))))))
           (#{syntax-type\ 463}#
             (lambda (#{e\ 1783}#
                      #{r\ 1784}#
                      #{w\ 1785}#
                      #{s\ 1786}#
                      #{rib\ 1787}#
                      #{mod\ 1788}#
                      #{for-car?\ 1789}#)
               (if (symbol? #{e\ 1783}#)
                 (let ((#{n\ 1801}#
                         (#{id-var-name\ 439}# #{e\ 1783}# #{w\ 1785}#)))
                   (let ((#{b\ 1803}#
                           (#{lookup\ 376}#
                             #{n\ 1801}#
                             #{r\ 1784}#
                             #{mod\ 1788}#)))
                     (let ((#{type\ 1805}#
                             (#{binding-type\ 365}# #{b\ 1803}#)))
                       (if (memv #{type\ 1805}# (quote (lexical)))
                         (values
                           #{type\ 1805}#
                           (#{binding-value\ 367}# #{b\ 1803}#)
                           #{e\ 1783}#
                           #{w\ 1785}#
                           #{s\ 1786}#
                           #{mod\ 1788}#)
                         (if (memv #{type\ 1805}# (quote (global)))
                           (values
                             #{type\ 1805}#
                             #{n\ 1801}#
                             #{e\ 1783}#
                             #{w\ 1785}#
                             #{s\ 1786}#
                             #{mod\ 1788}#)
                           (if (memv #{type\ 1805}# (quote (macro)))
                             (if #{for-car?\ 1789}#
                               (values
                                 #{type\ 1805}#
                                 (#{binding-value\ 367}# #{b\ 1803}#)
                                 #{e\ 1783}#
                                 #{w\ 1785}#
                                 #{s\ 1786}#
                                 #{mod\ 1788}#)
                               (#{syntax-type\ 463}#
                                 (#{chi-macro\ 473}#
                                   (#{binding-value\ 367}# #{b\ 1803}#)
                                   #{e\ 1783}#
                                   #{r\ 1784}#
                                   #{w\ 1785}#
                                   #{s\ 1786}#
                                   #{rib\ 1787}#
                                   #{mod\ 1788}#)
                                 #{r\ 1784}#
                                 '(())
                                 #{s\ 1786}#
                                 #{rib\ 1787}#
                                 #{mod\ 1788}#
                                 #f))
                             (values
                               #{type\ 1805}#
                               (#{binding-value\ 367}# #{b\ 1803}#)
                               #{e\ 1783}#
                               #{w\ 1785}#
                               #{s\ 1786}#
                               #{mod\ 1788}#)))))))
                 (if (pair? #{e\ 1783}#)
                   (let ((#{first\ 1814}# (car #{e\ 1783}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 463}#
                           #{first\ 1814}#
                           #{r\ 1784}#
                           #{w\ 1785}#
                           #{s\ 1786}#
                           #{rib\ 1787}#
                           #{mod\ 1788}#
                           #t))
                       (lambda (#{ftype\ 1815}#
                                #{fval\ 1816}#
                                #{fe\ 1817}#
                                #{fw\ 1818}#
                                #{fs\ 1819}#
                                #{fmod\ 1820}#)
                         (if (memv #{ftype\ 1815}# (quote (lexical)))
                           (values
                             'lexical-call
                             #{fval\ 1816}#
                             #{e\ 1783}#
                             #{w\ 1785}#
                             #{s\ 1786}#
                             #{mod\ 1788}#)
                           (if (memv #{ftype\ 1815}# (quote (global)))
                             (values
                               'global-call
                               (#{make-syntax-object\ 344}#
                                 #{fval\ 1816}#
                                 #{w\ 1785}#
                                 #{fmod\ 1820}#)
                               #{e\ 1783}#
                               #{w\ 1785}#
                               #{s\ 1786}#
                               #{mod\ 1788}#)
                             (if (memv #{ftype\ 1815}# (quote (macro)))
                               (#{syntax-type\ 463}#
                                 (#{chi-macro\ 473}#
                                   #{fval\ 1816}#
                                   #{e\ 1783}#
                                   #{r\ 1784}#
                                   #{w\ 1785}#
                                   #{s\ 1786}#
                                   #{rib\ 1787}#
                                   #{mod\ 1788}#)
                                 #{r\ 1784}#
                                 '(())
                                 #{s\ 1786}#
                                 #{rib\ 1787}#
                                 #{mod\ 1788}#
                                 #{for-car?\ 1789}#)
                               (if (memv #{ftype\ 1815}# (quote (module-ref)))
                                 (call-with-values
                                   (lambda ()
                                     (#{fval\ 1816}#
                                       #{e\ 1783}#
                                       #{r\ 1784}#
                                       #{w\ 1785}#))
                                   (lambda (#{e\ 1832}#
                                            #{r\ 1833}#
                                            #{w\ 1834}#
                                            #{s\ 1835}#
                                            #{mod\ 1836}#)
                                     (#{syntax-type\ 463}#
                                       #{e\ 1832}#
                                       #{r\ 1833}#
                                       #{w\ 1834}#
                                       #{s\ 1835}#
                                       #{rib\ 1787}#
                                       #{mod\ 1836}#
                                       #{for-car?\ 1789}#)))
                                 (if (memv #{ftype\ 1815}# (quote (core)))
                                   (values
                                     'core-form
                                     #{fval\ 1816}#
                                     #{e\ 1783}#
                                     #{w\ 1785}#
                                     #{s\ 1786}#
                                     #{mod\ 1788}#)
                                   (if (memv #{ftype\ 1815}#
                                             '(local-syntax))
                                     (values
                                       'local-syntax-form
                                       #{fval\ 1816}#
                                       #{e\ 1783}#
                                       #{w\ 1785}#
                                       #{s\ 1786}#
                                       #{mod\ 1788}#)
                                     (if (memv #{ftype\ 1815}# (quote (begin)))
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 1783}#
                                         #{w\ 1785}#
                                         #{s\ 1786}#
                                         #{mod\ 1788}#)
                                       (if (memv #{ftype\ 1815}#
                                                 '(eval-when))
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 1783}#
                                           #{w\ 1785}#
                                           #{s\ 1786}#
                                           #{mod\ 1788}#)
                                         (if (memv #{ftype\ 1815}#
                                                   '(define))
                                           ((lambda (#{tmp\ 1847}#)
                                              ((lambda (#{tmp\ 1848}#)
                                                 (if (if #{tmp\ 1848}#
                                                       (apply (lambda (#{_\ 1852}#
                                                                       #{name\ 1853}#
                                                                       #{val\ 1854}#)
                                                                (#{id?\ 382}#
                                                                  #{name\ 1853}#))
                                                              #{tmp\ 1848}#)
                                                       #f)
                                                   (apply (lambda (#{_\ 1858}#
                                                                   #{name\ 1859}#
                                                                   #{val\ 1860}#)
                                                            (values
                                                              'define-form
                                                              #{name\ 1859}#
                                                              #{val\ 1860}#
                                                              #{w\ 1785}#
                                                              #{s\ 1786}#
                                                              #{mod\ 1788}#))
                                                          #{tmp\ 1848}#)
                                                   ((lambda (#{tmp\ 1861}#)
                                                      (if (if #{tmp\ 1861}#
                                                            (apply (lambda (#{_\ 1867}#
                                                                            #{name\ 1868}#
                                                                            #{args\ 1869}#
                                                                            #{e1\ 1870}#
                                                                            #{e2\ 1871}#)
                                                                     (if (#{id?\ 382}#
                                                                           #{name\ 1868}#)
                                                                       (#{valid-bound-ids?\ 445}#
                                                                         (#{lambda-var-list\ 497}#
                                                                           #{args\ 1869}#))
                                                                       #f))
                                                                   #{tmp\ 1861}#)
                                                            #f)
                                                        (apply (lambda (#{_\ 1879}#
                                                                        #{name\ 1880}#
                                                                        #{args\ 1881}#
                                                                        #{e1\ 1882}#
                                                                        #{e2\ 1883}#)
                                                                 (values
                                                                   'define-form
                                                                   (#{wrap\ 451}#
                                                                     #{name\ 1880}#
                                                                     #{w\ 1785}#
                                                                     #{mod\ 1788}#)
                                                                   (#{decorate-source\ 300}#
                                                                     (cons '#(syntax-object
                                                                              lambda
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(_
                                                                                   name
                                                                                   args
                                                                                   e1
                                                                                   e2)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1874"
                                                                                   "i1875"
                                                                                   "i1876"
                                                                                   "i1877"
                                                                                   "i1878"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(ftype
                                                                                   fval
                                                                                   fe
                                                                                   fw
                                                                                   fs
                                                                                   fmod)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1821"
                                                                                   "i1822"
                                                                                   "i1823"
                                                                                   "i1824"
                                                                                   "i1825"
                                                                                   "i1826"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(first)
                                                                                 #((top))
                                                                                 #("i1813"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(e
                                                                                   r
                                                                                   w
                                                                                   s
                                                                                   rib
                                                                                   mod
                                                                                   for-car?)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1790"
                                                                                   "i1791"
                                                                                   "i1792"
                                                                                   "i1793"
                                                                                   "i1794"
                                                                                   "i1795"
                                                                                   "i1796"))
                                                                               #(ribcage
                                                                                 (lambda-var-list
                                                                                   gen-var
                                                                                   strip
                                                                                   chi-lambda-case
                                                                                   lambda*-formals
                                                                                   chi-simple-lambda
                                                                                   lambda-formals
                                                                                   ellipsis?
                                                                                   chi-void
                                                                                   eval-local-transformer
                                                                                   chi-local-syntax
                                                                                   chi-body
                                                                                   chi-macro
                                                                                   chi-application
                                                                                   chi-expr
                                                                                   chi
                                                                                   chi-top
                                                                                   syntax-type
                                                                                   chi-when-list
                                                                                   chi-install-global
                                                                                   chi-top-sequence
                                                                                   chi-sequence
                                                                                   source-wrap
                                                                                   wrap
                                                                                   bound-id-member?
                                                                                   distinct-bound-ids?
                                                                                   valid-bound-ids?
                                                                                   bound-id=?
                                                                                   free-id=?
                                                                                   id-var-name
                                                                                   same-marks?
                                                                                   join-marks
                                                                                   join-wraps
                                                                                   smart-append
                                                                                   make-binding-wrap
                                                                                   extend-ribcage!
                                                                                   make-empty-ribcage
                                                                                   new-mark
                                                                                   anti-mark
                                                                                   the-anti-mark
                                                                                   top-marked?
                                                                                   top-wrap
                                                                                   empty-wrap
                                                                                   set-ribcage-labels!
                                                                                   set-ribcage-marks!
                                                                                   set-ribcage-symnames!
                                                                                   ribcage-labels
                                                                                   ribcage-marks
                                                                                   ribcage-symnames
                                                                                   ribcage?
                                                                                   make-ribcage
                                                                                   gen-labels
                                                                                   gen-label
                                                                                   make-rename
                                                                                   rename-marks
                                                                                   rename-new
                                                                                   rename-old
                                                                                   subst-rename?
                                                                                   wrap-subst
                                                                                   wrap-marks
                                                                                   make-wrap
                                                                                   id-sym-name&marks
                                                                                   id-sym-name
                                                                                   id?
                                                                                   nonsymbol-id?
                                                                                   global-extend
                                                                                   lookup
                                                                                   macros-only-env
                                                                                   extend-var-env
                                                                                   extend-env
                                                                                   null-env
                                                                                   binding-value
                                                                                   binding-type
                                                                                   make-binding
                                                                                   arg-check
                                                                                   source-annotation
                                                                                   no-source
                                                                                   set-syntax-object-module!
                                                                                   set-syntax-object-wrap!
                                                                                   set-syntax-object-expression!
                                                                                   syntax-object-module
                                                                                   syntax-object-wrap
                                                                                   syntax-object-expression
                                                                                   syntax-object?
                                                                                   make-syntax-object
                                                                                   build-lexical-var
                                                                                   build-letrec
                                                                                   build-named-let
                                                                                   build-let
                                                                                   build-sequence
                                                                                   build-data
                                                                                   build-primref
                                                                                   build-lambda-case
                                                                                   build-case-lambda
                                                                                   build-simple-lambda
                                                                                   build-global-definition
                                                                                   maybe-name-value!
                                                                                   build-global-assignment
                                                                                   build-global-reference
                                                                                   analyze-variable
                                                                                   build-lexical-assignment
                                                                                   build-lexical-reference
                                                                                   build-dynlet
                                                                                   build-conditional
                                                                                   build-application
                                                                                   build-void
                                                                                   decorate-source
                                                                                   get-global-definition-hook
                                                                                   put-global-definition-hook
                                                                                   gensym-hook
                                                                                   local-eval-hook
                                                                                   top-level-eval-hook
                                                                                   fx<
                                                                                   fx=
                                                                                   fx-
                                                                                   fx+
                                                                                   set-lambda-meta!
                                                                                   lambda-meta
                                                                                   lambda?
                                                                                   make-dynlet
                                                                                   make-letrec
                                                                                   make-let
                                                                                   make-lambda-case
                                                                                   make-lambda
                                                                                   make-sequence
                                                                                   make-application
                                                                                   make-conditional
                                                                                   make-toplevel-define
                                                                                   make-toplevel-set
                                                                                   make-toplevel-ref
                                                                                   make-module-set
                                                                                   make-module-ref
                                                                                   make-lexical-set
                                                                                   make-lexical-ref
                                                                                   make-primitive-ref
                                                                                   make-const
                                                                                   make-void)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i496"
                                                                                  "i494"
                                                                                  "i492"
                                                                                  "i490"
                                                                                  "i488"
                                                                                  "i486"
                                                                                  "i484"
                                                                                  "i482"
                                                                                  "i480"
                                                                                  "i478"
                                                                                  "i476"
                                                                                  "i474"
                                                                                  "i472"
                                                                                  "i470"
                                                                                  "i468"
                                                                                  "i466"
                                                                                  "i464"
                                                                                  "i462"
                                                                                  "i460"
                                                                                  "i458"
                                                                                  "i456"
                                                                                  "i454"
                                                                                  "i452"
                                                                                  "i450"
                                                                                  "i448"
                                                                                  "i446"
                                                                                  "i444"
                                                                                  "i442"
                                                                                  "i440"
                                                                                  "i438"
                                                                                  "i436"
                                                                                  "i434"
                                                                                  "i432"
                                                                                  "i430"
                                                                                  "i428"
                                                                                  "i426"
                                                                                  "i425"
                                                                                  "i424"
                                                                                  "i422"
                                                                                  "i421"
                                                                                  "i420"
                                                                                  "i419"
                                                                                  "i418"
                                                                                  "i416"
                                                                                  "i414"
                                                                                  "i412"
                                                                                  "i410"
                                                                                  "i408"
                                                                                  "i406"
                                                                                  "i404"
                                                                                  "i402"
                                                                                  "i399"
                                                                                  "i397"
                                                                                  "i396"
                                                                                  "i395"
                                                                                  "i394"
                                                                                  "i393"
                                                                                  "i392"
                                                                                  "i390"
                                                                                  "i388"
                                                                                  "i386"
                                                                                  "i384"
                                                                                  "i383"
                                                                                  "i381"
                                                                                  "i379"
                                                                                  "i377"
                                                                                  "i375"
                                                                                  "i373"
                                                                                  "i371"
                                                                                  "i369"
                                                                                  "i368"
                                                                                  "i366"
                                                                                  "i364"
                                                                                  "i363"
                                                                                  "i362"
                                                                                  "i360"
                                                                                  "i359"
                                                                                  "i357"
                                                                                  "i355"
                                                                                  "i353"
                                                                                  "i351"
                                                                                  "i349"
                                                                                  "i347"
                                                                                  "i345"
                                                                                  "i343"
                                                                                  "i341"
                                                                                  "i339"
                                                                                  "i337"
                                                                                  "i335"
                                                                                  "i333"
                                                                                  "i331"
                                                                                  "i329"
                                                                                  "i327"
                                                                                  "i325"
                                                                                  "i323"
                                                                                  "i321"
                                                                                  "i319"
                                                                                  "i317"
                                                                                  "i315"
                                                                                  "i313"
                                                                                  "i311"
                                                                                  "i309"
                                                                                  "i307"
                                                                                  "i305"
                                                                                  "i303"
                                                                                  "i301"
                                                                                  "i299"
                                                                                  "i297"
                                                                                  "i295"
                                                                                  "i294"
                                                                                  "i292"
                                                                                  "i290"
                                                                                  "i288"
                                                                                  "i286"
                                                                                  "i284"
                                                                                  "i282"
                                                                                  "i280"
                                                                                  "i278"
                                                                                  "i276"
                                                                                  "i273"
                                                                                  "i271"
                                                                                  "i269"
                                                                                  "i267"
                                                                                  "i265"
                                                                                  "i263"
                                                                                  "i261"
                                                                                  "i259"
                                                                                  "i257"
                                                                                  "i255"
                                                                                  "i253"
                                                                                  "i251"
                                                                                  "i249"
                                                                                  "i247"
                                                                                  "i245"
                                                                                  "i243"
                                                                                  "i241"
                                                                                  "i239"))
                                                                               #(ribcage
                                                                                 (define-structure
                                                                                   define-expansion-accessors
                                                                                   define-expansion-constructors
                                                                                   and-map*)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i33"
                                                                                  "i32"
                                                                                  "i31"
                                                                                  "i29")))
                                                                              (hygiene
                                                                                guile))
                                                                           (#{wrap\ 451}#
                                                                             (cons #{args\ 1881}#
                                                                                   (cons #{e1\ 1882}#
                                                                                         #{e2\ 1883}#))
                                                                             #{w\ 1785}#
                                                                             #{mod\ 1788}#))
                                                                     #{s\ 1786}#)
                                                                   '(())
                                                                   #{s\ 1786}#
                                                                   #{mod\ 1788}#))
                                                               #{tmp\ 1861}#)
                                                        ((lambda (#{tmp\ 1886}#)
                                                           (if (if #{tmp\ 1886}#
                                                                 (apply (lambda (#{_\ 1889}#
                                                                                 #{name\ 1890}#)
                                                                          (#{id?\ 382}#
                                                                            #{name\ 1890}#))
                                                                        #{tmp\ 1886}#)
                                                                 #f)
                                                             (apply (lambda (#{_\ 1893}#
                                                                             #{name\ 1894}#)
                                                                      (values
                                                                        'define-form
                                                                        (#{wrap\ 451}#
                                                                          #{name\ 1894}#
                                                                          #{w\ 1785}#
                                                                          #{mod\ 1788}#)
                                                                        '(#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1891"
                                                                                 "i1892"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1821"
                                                                                 "i1822"
                                                                                 "i1823"
                                                                                 "i1824"
                                                                                 "i1825"
                                                                                 "i1826"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1813"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1790"
                                                                                 "i1791"
                                                                                 "i1792"
                                                                                 "i1793"
                                                                                 "i1794"
                                                                                 "i1795"
                                                                                 "i1796"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 set-lambda-meta!
                                                                                 lambda-meta
                                                                                 lambda?
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i496"
                                                                                "i494"
                                                                                "i492"
                                                                                "i490"
                                                                                "i488"
                                                                                "i486"
                                                                                "i484"
                                                                                "i482"
                                                                                "i480"
                                                                                "i478"
                                                                                "i476"
                                                                                "i474"
                                                                                "i472"
                                                                                "i470"
                                                                                "i468"
                                                                                "i466"
                                                                                "i464"
                                                                                "i462"
                                                                                "i460"
                                                                                "i458"
                                                                                "i456"
                                                                                "i454"
                                                                                "i452"
                                                                                "i450"
                                                                                "i448"
                                                                                "i446"
                                                                                "i444"
                                                                                "i442"
                                                                                "i440"
                                                                                "i438"
                                                                                "i436"
                                                                                "i434"
                                                                                "i432"
                                                                                "i430"
                                                                                "i428"
                                                                                "i426"
                                                                                "i425"
                                                                                "i424"
                                                                                "i422"
                                                                                "i421"
                                                                                "i420"
                                                                                "i419"
                                                                                "i418"
                                                                                "i416"
                                                                                "i414"
                                                                                "i412"
                                                                                "i410"
                                                                                "i408"
                                                                                "i406"
                                                                                "i404"
                                                                                "i402"
                                                                                "i399"
                                                                                "i397"
                                                                                "i396"
                                                                                "i395"
                                                                                "i394"
                                                                                "i393"
                                                                                "i392"
                                                                                "i390"
                                                                                "i388"
                                                                                "i386"
                                                                                "i384"
                                                                                "i383"
                                                                                "i381"
                                                                                "i379"
                                                                                "i377"
                                                                                "i375"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i368"
                                                                                "i366"
                                                                                "i364"
                                                                                "i363"
                                                                                "i362"
                                                                                "i360"
                                                                                "i359"
                                                                                "i357"
                                                                                "i355"
                                                                                "i353"
                                                                                "i351"
                                                                                "i349"
                                                                                "i347"
                                                                                "i345"
                                                                                "i343"
                                                                                "i341"
                                                                                "i339"
                                                                                "i337"
                                                                                "i335"
                                                                                "i333"
                                                                                "i331"
                                                                                "i329"
                                                                                "i327"
                                                                                "i325"
                                                                                "i323"
                                                                                "i321"
                                                                                "i319"
                                                                                "i317"
                                                                                "i315"
                                                                                "i313"
                                                                                "i311"
                                                                                "i309"
                                                                                "i307"
                                                                                "i305"
                                                                                "i303"
                                                                                "i301"
                                                                                "i299"
                                                                                "i297"
                                                                                "i295"
                                                                                "i294"
                                                                                "i292"
                                                                                "i290"
                                                                                "i288"
                                                                                "i286"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i278"
                                                                                "i276"
                                                                                "i273"
                                                                                "i271"
                                                                                "i269"
                                                                                "i267"
                                                                                "i265"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-accessors
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i33"
                                                                                "i32"
                                                                                "i31"
                                                                                "i29")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1891"
                                                                                 "i1892"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1821"
                                                                                 "i1822"
                                                                                 "i1823"
                                                                                 "i1824"
                                                                                 "i1825"
                                                                                 "i1826"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1813"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1790"
                                                                                 "i1791"
                                                                                 "i1792"
                                                                                 "i1793"
                                                                                 "i1794"
                                                                                 "i1795"
                                                                                 "i1796"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 set-lambda-meta!
                                                                                 lambda-meta
                                                                                 lambda?
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i496"
                                                                                "i494"
                                                                                "i492"
                                                                                "i490"
                                                                                "i488"
                                                                                "i486"
                                                                                "i484"
                                                                                "i482"
                                                                                "i480"
                                                                                "i478"
                                                                                "i476"
                                                                                "i474"
                                                                                "i472"
                                                                                "i470"
                                                                                "i468"
                                                                                "i466"
                                                                                "i464"
                                                                                "i462"
                                                                                "i460"
                                                                                "i458"
                                                                                "i456"
                                                                                "i454"
                                                                                "i452"
                                                                                "i450"
                                                                                "i448"
                                                                                "i446"
                                                                                "i444"
                                                                                "i442"
                                                                                "i440"
                                                                                "i438"
                                                                                "i436"
                                                                                "i434"
                                                                                "i432"
                                                                                "i430"
                                                                                "i428"
                                                                                "i426"
                                                                                "i425"
                                                                                "i424"
                                                                                "i422"
                                                                                "i421"
                                                                                "i420"
                                                                                "i419"
                                                                                "i418"
                                                                                "i416"
                                                                                "i414"
                                                                                "i412"
                                                                                "i410"
                                                                                "i408"
                                                                                "i406"
                                                                                "i404"
                                                                                "i402"
                                                                                "i399"
                                                                                "i397"
                                                                                "i396"
                                                                                "i395"
                                                                                "i394"
                                                                                "i393"
                                                                                "i392"
                                                                                "i390"
                                                                                "i388"
                                                                                "i386"
                                                                                "i384"
                                                                                "i383"
                                                                                "i381"
                                                                                "i379"
                                                                                "i377"
                                                                                "i375"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i368"
                                                                                "i366"
                                                                                "i364"
                                                                                "i363"
                                                                                "i362"
                                                                                "i360"
                                                                                "i359"
                                                                                "i357"
                                                                                "i355"
                                                                                "i353"
                                                                                "i351"
                                                                                "i349"
                                                                                "i347"
                                                                                "i345"
                                                                                "i343"
                                                                                "i341"
                                                                                "i339"
                                                                                "i337"
                                                                                "i335"
                                                                                "i333"
                                                                                "i331"
                                                                                "i329"
                                                                                "i327"
                                                                                "i325"
                                                                                "i323"
                                                                                "i321"
                                                                                "i319"
                                                                                "i317"
                                                                                "i315"
                                                                                "i313"
                                                                                "i311"
                                                                                "i309"
                                                                                "i307"
                                                                                "i305"
                                                                                "i303"
                                                                                "i301"
                                                                                "i299"
                                                                                "i297"
                                                                                "i295"
                                                                                "i294"
                                                                                "i292"
                                                                                "i290"
                                                                                "i288"
                                                                                "i286"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i278"
                                                                                "i276"
                                                                                "i273"
                                                                                "i271"
                                                                                "i269"
                                                                                "i267"
                                                                                "i265"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-accessors
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i33"
                                                                                "i32"
                                                                                "i31"
                                                                                "i29")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1891"
                                                                                 "i1892"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1821"
                                                                                 "i1822"
                                                                                 "i1823"
                                                                                 "i1824"
                                                                                 "i1825"
                                                                                 "i1826"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1813"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1790"
                                                                                 "i1791"
                                                                                 "i1792"
                                                                                 "i1793"
                                                                                 "i1794"
                                                                                 "i1795"
                                                                                 "i1796"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 set-lambda-meta!
                                                                                 lambda-meta
                                                                                 lambda?
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i496"
                                                                                "i494"
                                                                                "i492"
                                                                                "i490"
                                                                                "i488"
                                                                                "i486"
                                                                                "i484"
                                                                                "i482"
                                                                                "i480"
                                                                                "i478"
                                                                                "i476"
                                                                                "i474"
                                                                                "i472"
                                                                                "i470"
                                                                                "i468"
                                                                                "i466"
                                                                                "i464"
                                                                                "i462"
                                                                                "i460"
                                                                                "i458"
                                                                                "i456"
                                                                                "i454"
                                                                                "i452"
                                                                                "i450"
                                                                                "i448"
                                                                                "i446"
                                                                                "i444"
                                                                                "i442"
                                                                                "i440"
                                                                                "i438"
                                                                                "i436"
                                                                                "i434"
                                                                                "i432"
                                                                                "i430"
                                                                                "i428"
                                                                                "i426"
                                                                                "i425"
                                                                                "i424"
                                                                                "i422"
                                                                                "i421"
                                                                                "i420"
                                                                                "i419"
                                                                                "i418"
                                                                                "i416"
                                                                                "i414"
                                                                                "i412"
                                                                                "i410"
                                                                                "i408"
                                                                                "i406"
                                                                                "i404"
                                                                                "i402"
                                                                                "i399"
                                                                                "i397"
                                                                                "i396"
                                                                                "i395"
                                                                                "i394"
                                                                                "i393"
                                                                                "i392"
                                                                                "i390"
                                                                                "i388"
                                                                                "i386"
                                                                                "i384"
                                                                                "i383"
                                                                                "i381"
                                                                                "i379"
                                                                                "i377"
                                                                                "i375"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i368"
                                                                                "i366"
                                                                                "i364"
                                                                                "i363"
                                                                                "i362"
                                                                                "i360"
                                                                                "i359"
                                                                                "i357"
                                                                                "i355"
                                                                                "i353"
                                                                                "i351"
                                                                                "i349"
                                                                                "i347"
                                                                                "i345"
                                                                                "i343"
                                                                                "i341"
                                                                                "i339"
                                                                                "i337"
                                                                                "i335"
                                                                                "i333"
                                                                                "i331"
                                                                                "i329"
                                                                                "i327"
                                                                                "i325"
                                                                                "i323"
                                                                                "i321"
                                                                                "i319"
                                                                                "i317"
                                                                                "i315"
                                                                                "i313"
                                                                                "i311"
                                                                                "i309"
                                                                                "i307"
                                                                                "i305"
                                                                                "i303"
                                                                                "i301"
                                                                                "i299"
                                                                                "i297"
                                                                                "i295"
                                                                                "i294"
                                                                                "i292"
                                                                                "i290"
                                                                                "i288"
                                                                                "i286"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i278"
                                                                                "i276"
                                                                                "i273"
                                                                                "i271"
                                                                                "i269"
                                                                                "i267"
                                                                                "i265"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-accessors
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i33"
                                                                                "i32"
                                                                                "i31"
                                                                                "i29")))
                                                                            (hygiene
                                                                              guile)))
                                                                        '(())
                                                                        #{s\ 1786}#
                                                                        #{mod\ 1788}#))
                                                                    #{tmp\ 1886}#)
                                                             (syntax-violation
                                                               #f
                                                               "source expression failed to match any pattern"
                                                               #{tmp\ 1847}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 1847}#
                                                           '(any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1847}#
                                                      '(any (any . any)
                                                            any
                                                            .
                                                            each-any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1847}#
                                                 '(any any any))))
                                            #{e\ 1783}#)
                                           (if (memv #{ftype\ 1815}#
                                                     '(define-syntax))
                                             ((lambda (#{tmp\ 1897}#)
                                                ((lambda (#{tmp\ 1898}#)
                                                   (if (if #{tmp\ 1898}#
                                                         (apply (lambda (#{_\ 1902}#
                                                                         #{name\ 1903}#
                                                                         #{val\ 1904}#)
                                                                  (#{id?\ 382}#
                                                                    #{name\ 1903}#))
                                                                #{tmp\ 1898}#)
                                                         #f)
                                                     (apply (lambda (#{_\ 1908}#
                                                                     #{name\ 1909}#
                                                                     #{val\ 1910}#)
                                                              (values
                                                                'define-syntax-form
                                                                #{name\ 1909}#
                                                                #{val\ 1910}#
                                                                #{w\ 1785}#
                                                                #{s\ 1786}#
                                                                #{mod\ 1788}#))
                                                            #{tmp\ 1898}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 1897}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 1897}#
                                                   '(any any any))))
                                              #{e\ 1783}#)
                                             (values
                                               'call
                                               #f
                                               #{e\ 1783}#
                                               #{w\ 1785}#
                                               #{s\ 1786}#
                                               #{mod\ 1788}#))))))))))))))
                   (if (#{syntax-object?\ 346}# #{e\ 1783}#)
                     (#{syntax-type\ 463}#
                       (#{syntax-object-expression\ 348}# #{e\ 1783}#)
                       #{r\ 1784}#
                       (#{join-wraps\ 433}#
                         #{w\ 1785}#
                         (#{syntax-object-wrap\ 350}# #{e\ 1783}#))
                       (let ((#{t\ 1916}#
                               (#{source-annotation\ 361}# #{e\ 1783}#)))
                         (if #{t\ 1916}# #{t\ 1916}# #{s\ 1786}#))
                       #{rib\ 1787}#
                       (let ((#{t\ 1920}#
                               (#{syntax-object-module\ 352}# #{e\ 1783}#)))
                         (if #{t\ 1920}# #{t\ 1920}# #{mod\ 1788}#))
                       #{for-car?\ 1789}#)
                     (if (self-evaluating? #{e\ 1783}#)
                       (values
                         'constant
                         #f
                         #{e\ 1783}#
                         #{w\ 1785}#
                         #{s\ 1786}#
                         #{mod\ 1788}#)
                       (values
                         'other
                         #f
                         #{e\ 1783}#
                         #{w\ 1785}#
                         #{s\ 1786}#
                         #{mod\ 1788}#)))))))
           (#{chi-when-list\ 461}#
             (lambda (#{e\ 1925}# #{when-list\ 1926}# #{w\ 1927}#)
               (letrec ((#{f\ 1934}#
                          (lambda (#{when-list\ 1935}# #{situations\ 1936}#)
                            (if (null? #{when-list\ 1935}#)
                              #{situations\ 1936}#
                              (#{f\ 1934}#
                                (cdr #{when-list\ 1935}#)
                                (cons (let ((#{x\ 1938}#
                                              (car #{when-list\ 1935}#)))
                                        (if (#{free-id=?\ 441}#
                                              #{x\ 1938}#
                                              '#(syntax-object
                                                 compile
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i1937"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i1931" "i1932" "i1933"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i1928" "i1929" "i1930"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      maybe-name-value!
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i496"
                                                     "i494"
                                                     "i492"
                                                     "i490"
                                                     "i488"
                                                     "i486"
                                                     "i484"
                                                     "i482"
                                                     "i480"
                                                     "i478"
                                                     "i476"
                                                     "i474"
                                                     "i472"
                                                     "i470"
                                                     "i468"
                                                     "i466"
                                                     "i464"
                                                     "i462"
                                                     "i460"
                                                     "i458"
                                                     "i456"
                                                     "i454"
                                                     "i452"
                                                     "i450"
                                                     "i448"
                                                     "i446"
                                                     "i444"
                                                     "i442"
                                                     "i440"
                                                     "i438"
                                                     "i436"
                                                     "i434"
                                                     "i432"
                                                     "i430"
                                                     "i428"
                                                     "i426"
                                                     "i425"
                                                     "i424"
                                                     "i422"
                                                     "i421"
                                                     "i420"
                                                     "i419"
                                                     "i418"
                                                     "i416"
                                                     "i414"
                                                     "i412"
                                                     "i410"
                                                     "i408"
                                                     "i406"
                                                     "i404"
                                                     "i402"
                                                     "i399"
                                                     "i397"
                                                     "i396"
                                                     "i395"
                                                     "i394"
                                                     "i393"
                                                     "i392"
                                                     "i390"
                                                     "i388"
                                                     "i386"
                                                     "i384"
                                                     "i383"
                                                     "i381"
                                                     "i379"
                                                     "i377"
                                                     "i375"
                                                     "i373"
                                                     "i371"
                                                     "i369"
                                                     "i368"
                                                     "i366"
                                                     "i364"
                                                     "i363"
                                                     "i362"
                                                     "i360"
                                                     "i359"
                                                     "i357"
                                                     "i355"
                                                     "i353"
                                                     "i351"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i329"
                                                     "i327"
                                                     "i325"
                                                     "i323"
                                                     "i321"
                                                     "i319"
                                                     "i317"
                                                     "i315"
                                                     "i313"
                                                     "i311"
                                                     "i309"
                                                     "i307"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i294"
                                                     "i292"
                                                     "i290"
                                                     "i288"
                                                     "i286"
                                                     "i284"
                                                     "i282"
                                                     "i280"
                                                     "i278"
                                                     "i276"
                                                     "i273"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i259"
                                                     "i257"
                                                     "i255"
                                                     "i253"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i243"
                                                     "i241"
                                                     "i239"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top) (top))
                                                    ("i33" "i32" "i31" "i29")))
                                                 (hygiene guile)))
                                          'compile
                                          (if (#{free-id=?\ 441}#
                                                #{x\ 1938}#
                                                '#(syntax-object
                                                   load
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i1937"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f when-list situations)
                                                      #((top) (top) (top))
                                                      #("i1931"
                                                        "i1932"
                                                        "i1933"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e when-list w)
                                                      #((top) (top) (top))
                                                      #("i1928"
                                                        "i1929"
                                                        "i1930"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i496"
                                                       "i494"
                                                       "i492"
                                                       "i490"
                                                       "i488"
                                                       "i486"
                                                       "i484"
                                                       "i482"
                                                       "i480"
                                                       "i478"
                                                       "i476"
                                                       "i474"
                                                       "i472"
                                                       "i470"
                                                       "i468"
                                                       "i466"
                                                       "i464"
                                                       "i462"
                                                       "i460"
                                                       "i458"
                                                       "i456"
                                                       "i454"
                                                       "i452"
                                                       "i450"
                                                       "i448"
                                                       "i446"
                                                       "i444"
                                                       "i442"
                                                       "i440"
                                                       "i438"
                                                       "i436"
                                                       "i434"
                                                       "i432"
                                                       "i430"
                                                       "i428"
                                                       "i426"
                                                       "i425"
                                                       "i424"
                                                       "i422"
                                                       "i421"
                                                       "i420"
                                                       "i419"
                                                       "i418"
                                                       "i416"
                                                       "i414"
                                                       "i412"
                                                       "i410"
                                                       "i408"
                                                       "i406"
                                                       "i404"
                                                       "i402"
                                                       "i399"
                                                       "i397"
                                                       "i396"
                                                       "i395"
                                                       "i394"
                                                       "i393"
                                                       "i392"
                                                       "i390"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i383"
                                                       "i381"
                                                       "i379"
                                                       "i377"
                                                       "i375"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i368"
                                                       "i366"
                                                       "i364"
                                                       "i363"
                                                       "i362"
                                                       "i360"
                                                       "i359"
                                                       "i357"
                                                       "i355"
                                                       "i353"
                                                       "i351"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i329"
                                                       "i327"
                                                       "i325"
                                                       "i323"
                                                       "i321"
                                                       "i319"
                                                       "i317"
                                                       "i315"
                                                       "i313"
                                                       "i311"
                                                       "i309"
                                                       "i307"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i294"
                                                       "i292"
                                                       "i290"
                                                       "i288"
                                                       "i286"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i278"
                                                       "i276"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i33"
                                                       "i32"
                                                       "i31"
                                                       "i29")))
                                                   (hygiene guile)))
                                            'load
                                            (if (#{free-id=?\ 441}#
                                                  #{x\ 1938}#
                                                  '#(syntax-object
                                                     eval
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i1937"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f
                                                          when-list
                                                          situations)
                                                        #((top) (top) (top))
                                                        #("i1931"
                                                          "i1932"
                                                          "i1933"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(e when-list w)
                                                        #((top) (top) (top))
                                                        #("i1928"
                                                          "i1929"
                                                          "i1930"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          chi-lambda-case
                                                          lambda*-formals
                                                          chi-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          chi-void
                                                          eval-local-transformer
                                                          chi-local-syntax
                                                          chi-body
                                                          chi-macro
                                                          chi-application
                                                          chi-expr
                                                          chi
                                                          chi-top
                                                          syntax-type
                                                          chi-when-list
                                                          chi-install-global
                                                          chi-top-sequence
                                                          chi-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          maybe-name-value!
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i496"
                                                         "i494"
                                                         "i492"
                                                         "i490"
                                                         "i488"
                                                         "i486"
                                                         "i484"
                                                         "i482"
                                                         "i480"
                                                         "i478"
                                                         "i476"
                                                         "i474"
                                                         "i472"
                                                         "i470"
                                                         "i468"
                                                         "i466"
                                                         "i464"
                                                         "i462"
                                                         "i460"
                                                         "i458"
                                                         "i456"
                                                         "i454"
                                                         "i452"
                                                         "i450"
                                                         "i448"
                                                         "i446"
                                                         "i444"
                                                         "i442"
                                                         "i440"
                                                         "i438"
                                                         "i436"
                                                         "i434"
                                                         "i432"
                                                         "i430"
                                                         "i428"
                                                         "i426"
                                                         "i425"
                                                         "i424"
                                                         "i422"
                                                         "i421"
                                                         "i420"
                                                         "i419"
                                                         "i418"
                                                         "i416"
                                                         "i414"
                                                         "i412"
                                                         "i410"
                                                         "i408"
                                                         "i406"
                                                         "i404"
                                                         "i402"
                                                         "i399"
                                                         "i397"
                                                         "i396"
                                                         "i395"
                                                         "i394"
                                                         "i393"
                                                         "i392"
                                                         "i390"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i383"
                                                         "i381"
                                                         "i379"
                                                         "i377"
                                                         "i375"
                                                         "i373"
                                                         "i371"
                                                         "i369"
                                                         "i368"
                                                         "i366"
                                                         "i364"
                                                         "i363"
                                                         "i362"
                                                         "i360"
                                                         "i359"
                                                         "i357"
                                                         "i355"
                                                         "i353"
                                                         "i351"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i329"
                                                         "i327"
                                                         "i325"
                                                         "i323"
                                                         "i321"
                                                         "i319"
                                                         "i317"
                                                         "i315"
                                                         "i313"
                                                         "i311"
                                                         "i309"
                                                         "i307"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i294"
                                                         "i292"
                                                         "i290"
                                                         "i288"
                                                         "i286"
                                                         "i284"
                                                         "i282"
                                                         "i280"
                                                         "i278"
                                                         "i276"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i259"
                                                         "i257"
                                                         "i255"
                                                         "i253"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i243"
                                                         "i241"
                                                         "i239"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors
                                                          and-map*)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i33"
                                                         "i32"
                                                         "i31"
                                                         "i29")))
                                                     (hygiene guile)))
                                              'eval
                                              (if (#{free-id=?\ 441}#
                                                    #{x\ 1938}#
                                                    '#(syntax-object
                                                       expand
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i1937"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f
                                                            when-list
                                                            situations)
                                                          #((top) (top) (top))
                                                          #("i1931"
                                                            "i1932"
                                                            "i1933"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(e when-list w)
                                                          #((top) (top) (top))
                                                          #("i1928"
                                                            "i1929"
                                                            "i1930"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            chi-lambda-case
                                                            lambda*-formals
                                                            chi-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            chi-void
                                                            eval-local-transformer
                                                            chi-local-syntax
                                                            chi-body
                                                            chi-macro
                                                            chi-application
                                                            chi-expr
                                                            chi
                                                            chi-top
                                                            syntax-type
                                                            chi-when-list
                                                            chi-install-global
                                                            chi-top-sequence
                                                            chi-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            maybe-name-value!
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i496"
                                                           "i494"
                                                           "i492"
                                                           "i490"
                                                           "i488"
                                                           "i486"
                                                           "i484"
                                                           "i482"
                                                           "i480"
                                                           "i478"
                                                           "i476"
                                                           "i474"
                                                           "i472"
                                                           "i470"
                                                           "i468"
                                                           "i466"
                                                           "i464"
                                                           "i462"
                                                           "i460"
                                                           "i458"
                                                           "i456"
                                                           "i454"
                                                           "i452"
                                                           "i450"
                                                           "i448"
                                                           "i446"
                                                           "i444"
                                                           "i442"
                                                           "i440"
                                                           "i438"
                                                           "i436"
                                                           "i434"
                                                           "i432"
                                                           "i430"
                                                           "i428"
                                                           "i426"
                                                           "i425"
                                                           "i424"
                                                           "i422"
                                                           "i421"
                                                           "i420"
                                                           "i419"
                                                           "i418"
                                                           "i416"
                                                           "i414"
                                                           "i412"
                                                           "i410"
                                                           "i408"
                                                           "i406"
                                                           "i404"
                                                           "i402"
                                                           "i399"
                                                           "i397"
                                                           "i396"
                                                           "i395"
                                                           "i394"
                                                           "i393"
                                                           "i392"
                                                           "i390"
                                                           "i388"
                                                           "i386"
                                                           "i384"
                                                           "i383"
                                                           "i381"
                                                           "i379"
                                                           "i377"
                                                           "i375"
                                                           "i373"
                                                           "i371"
                                                           "i369"
                                                           "i368"
                                                           "i366"
                                                           "i364"
                                                           "i363"
                                                           "i362"
                                                           "i360"
                                                           "i359"
                                                           "i357"
                                                           "i355"
                                                           "i353"
                                                           "i351"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i329"
                                                           "i327"
                                                           "i325"
                                                           "i323"
                                                           "i321"
                                                           "i319"
                                                           "i317"
                                                           "i315"
                                                           "i313"
                                                           "i311"
                                                           "i309"
                                                           "i307"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i294"
                                                           "i292"
                                                           "i290"
                                                           "i288"
                                                           "i286"
                                                           "i284"
                                                           "i282"
                                                           "i280"
                                                           "i278"
                                                           "i276"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i259"
                                                           "i257"
                                                           "i255"
                                                           "i253"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i243"
                                                           "i241"
                                                           "i239"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors
                                                            and-map*)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i33"
                                                           "i32"
                                                           "i31"
                                                           "i29")))
                                                       (hygiene guile)))
                                                'expand
                                                (syntax-violation
                                                  'eval-when
                                                  "invalid situation"
                                                  #{e\ 1925}#
                                                  (#{wrap\ 451}#
                                                    #{x\ 1938}#
                                                    #{w\ 1927}#
                                                    #f)))))))
                                      #{situations\ 1936}#))))))
                 (#{f\ 1934}# #{when-list\ 1926}# (quote ())))))
           (#{chi-install-global\ 459}#
             (lambda (#{name\ 1948}# #{e\ 1949}#)
               (#{build-global-definition\ 322}#
                 #f
                 #{name\ 1948}#
                 (#{build-application\ 304}#
                   #f
                   (#{build-primref\ 330}#
                     #f
                     'make-syntax-transformer)
                   (list (#{build-data\ 332}# #f #{name\ 1948}#)
                         (#{build-data\ 332}# #f (quote macro))
                         #{e\ 1949}#)))))
           (#{chi-top-sequence\ 457}#
             (lambda (#{body\ 1957}#
                      #{r\ 1958}#
                      #{w\ 1959}#
                      #{s\ 1960}#
                      #{m\ 1961}#
                      #{esew\ 1962}#
                      #{mod\ 1963}#)
               (#{build-sequence\ 334}#
                 #{s\ 1960}#
                 (letrec ((#{dobody\ 1979}#
                            (lambda (#{body\ 1980}#
                                     #{r\ 1981}#
                                     #{w\ 1982}#
                                     #{m\ 1983}#
                                     #{esew\ 1984}#
                                     #{mod\ 1985}#
                                     #{out\ 1986}#)
                              (if (null? #{body\ 1980}#)
                                (reverse #{out\ 1986}#)
                                (#{dobody\ 1979}#
                                  (cdr #{body\ 1980}#)
                                  #{r\ 1981}#
                                  #{w\ 1982}#
                                  #{m\ 1983}#
                                  #{esew\ 1984}#
                                  #{mod\ 1985}#
                                  (cons (#{chi-top\ 465}#
                                          (car #{body\ 1980}#)
                                          #{r\ 1981}#
                                          #{w\ 1982}#
                                          #{m\ 1983}#
                                          #{esew\ 1984}#
                                          #{mod\ 1985}#)
                                        #{out\ 1986}#))))))
                   (#{dobody\ 1979}#
                     #{body\ 1957}#
                     #{r\ 1958}#
                     #{w\ 1959}#
                     #{m\ 1961}#
                     #{esew\ 1962}#
                     #{mod\ 1963}#
                     '())))))
           (#{chi-sequence\ 455}#
             (lambda (#{body\ 1987}#
                      #{r\ 1988}#
                      #{w\ 1989}#
                      #{s\ 1990}#
                      #{mod\ 1991}#)
               (#{build-sequence\ 334}#
                 #{s\ 1990}#
                 (letrec ((#{dobody\ 2002}#
                            (lambda (#{body\ 2003}#
                                     #{r\ 2004}#
                                     #{w\ 2005}#
                                     #{mod\ 2006}#)
                              (if (null? #{body\ 2003}#)
                                '()
                                (let ((#{first\ 2008}#
                                        (#{chi\ 467}#
                                          (car #{body\ 2003}#)
                                          #{r\ 2004}#
                                          #{w\ 2005}#
                                          #{mod\ 2006}#)))
                                  (cons #{first\ 2008}#
                                        (#{dobody\ 2002}#
                                          (cdr #{body\ 2003}#)
                                          #{r\ 2004}#
                                          #{w\ 2005}#
                                          #{mod\ 2006}#)))))))
                   (#{dobody\ 2002}#
                     #{body\ 1987}#
                     #{r\ 1988}#
                     #{w\ 1989}#
                     #{mod\ 1991}#)))))
           (#{source-wrap\ 453}#
             (lambda (#{x\ 2009}#
                      #{w\ 2010}#
                      #{s\ 2011}#
                      #{defmod\ 2012}#)
               (#{wrap\ 451}#
                 (#{decorate-source\ 300}#
                   #{x\ 2009}#
                   #{s\ 2011}#)
                 #{w\ 2010}#
                 #{defmod\ 2012}#)))
           (#{wrap\ 451}#
             (lambda (#{x\ 2017}# #{w\ 2018}# #{defmod\ 2019}#)
               (if (if (null? (#{wrap-marks\ 389}# #{w\ 2018}#))
                     (null? (#{wrap-subst\ 391}# #{w\ 2018}#))
                     #f)
                 #{x\ 2017}#
                 (if (#{syntax-object?\ 346}# #{x\ 2017}#)
                   (#{make-syntax-object\ 344}#
                     (#{syntax-object-expression\ 348}# #{x\ 2017}#)
                     (#{join-wraps\ 433}#
                       #{w\ 2018}#
                       (#{syntax-object-wrap\ 350}# #{x\ 2017}#))
                     (#{syntax-object-module\ 352}# #{x\ 2017}#))
                   (if (null? #{x\ 2017}#)
                     #{x\ 2017}#
                     (#{make-syntax-object\ 344}#
                       #{x\ 2017}#
                       #{w\ 2018}#
                       #{defmod\ 2019}#))))))
           (#{bound-id-member?\ 449}#
             (lambda (#{x\ 2032}# #{list\ 2033}#)
               (if (not (null? #{list\ 2033}#))
                 (let ((#{t\ 2040}#
                         (#{bound-id=?\ 443}#
                           #{x\ 2032}#
                           (car #{list\ 2033}#))))
                   (if #{t\ 2040}#
                     #{t\ 2040}#
                     (#{bound-id-member?\ 449}#
                       #{x\ 2032}#
                       (cdr #{list\ 2033}#))))
                 #f)))
           (#{distinct-bound-ids?\ 447}#
             (lambda (#{ids\ 2042}#)
               (letrec ((#{distinct?\ 2046}#
                          (lambda (#{ids\ 2047}#)
                            (let ((#{t\ 2050}# (null? #{ids\ 2047}#)))
                              (if #{t\ 2050}#
                                #{t\ 2050}#
                                (if (not (#{bound-id-member?\ 449}#
                                           (car #{ids\ 2047}#)
                                           (cdr #{ids\ 2047}#)))
                                  (#{distinct?\ 2046}# (cdr #{ids\ 2047}#))
                                  #f))))))
                 (#{distinct?\ 2046}# #{ids\ 2042}#))))
           (#{valid-bound-ids?\ 445}#
             (lambda (#{ids\ 2054}#)
               (if (letrec ((#{all-ids?\ 2059}#
                              (lambda (#{ids\ 2060}#)
                                (let ((#{t\ 2063}# (null? #{ids\ 2060}#)))
                                  (if #{t\ 2063}#
                                    #{t\ 2063}#
                                    (if (#{id?\ 382}# (car #{ids\ 2060}#))
                                      (#{all-ids?\ 2059}# (cdr #{ids\ 2060}#))
                                      #f))))))
                     (#{all-ids?\ 2059}# #{ids\ 2054}#))
                 (#{distinct-bound-ids?\ 447}# #{ids\ 2054}#)
                 #f)))
           (#{bound-id=?\ 443}#
             (lambda (#{i\ 2068}# #{j\ 2069}#)
               (if (if (#{syntax-object?\ 346}# #{i\ 2068}#)
                     (#{syntax-object?\ 346}# #{j\ 2069}#)
                     #f)
                 (if (eq? (#{syntax-object-expression\ 348}# #{i\ 2068}#)
                          (#{syntax-object-expression\ 348}# #{j\ 2069}#))
                   (#{same-marks?\ 437}#
                     (#{wrap-marks\ 389}#
                       (#{syntax-object-wrap\ 350}# #{i\ 2068}#))
                     (#{wrap-marks\ 389}#
                       (#{syntax-object-wrap\ 350}# #{j\ 2069}#)))
                   #f)
                 (eq? #{i\ 2068}# #{j\ 2069}#))))
           (#{free-id=?\ 441}#
             (lambda (#{i\ 2076}# #{j\ 2077}#)
               (if (eq? (let ((#{x\ 2083}# #{i\ 2076}#))
                          (if (#{syntax-object?\ 346}# #{x\ 2083}#)
                            (#{syntax-object-expression\ 348}# #{x\ 2083}#)
                            #{x\ 2083}#))
                        (let ((#{x\ 2086}# #{j\ 2077}#))
                          (if (#{syntax-object?\ 346}# #{x\ 2086}#)
                            (#{syntax-object-expression\ 348}# #{x\ 2086}#)
                            #{x\ 2086}#)))
                 (eq? (#{id-var-name\ 439}# #{i\ 2076}# (quote (())))
                      (#{id-var-name\ 439}# #{j\ 2077}# (quote (()))))
                 #f)))
           (#{id-var-name\ 439}#
             (lambda (#{id\ 2090}# #{w\ 2091}#)
               (letrec ((#{search-vector-rib\ 2100}#
                          (lambda (#{sym\ 2112}#
                                   #{subst\ 2113}#
                                   #{marks\ 2114}#
                                   #{symnames\ 2115}#
                                   #{ribcage\ 2116}#)
                            (let ((#{n\ 2123}#
                                    (vector-length #{symnames\ 2115}#)))
                              (letrec ((#{f\ 2126}#
                                         (lambda (#{i\ 2127}#)
                                           (if (#{fx=\ 287}#
                                                 #{i\ 2127}#
                                                 #{n\ 2123}#)
                                             (#{search\ 2096}#
                                               #{sym\ 2112}#
                                               (cdr #{subst\ 2113}#)
                                               #{marks\ 2114}#)
                                             (if (if (eq? (vector-ref
                                                            #{symnames\ 2115}#
                                                            #{i\ 2127}#)
                                                          #{sym\ 2112}#)
                                                   (#{same-marks?\ 437}#
                                                     #{marks\ 2114}#
                                                     (vector-ref
                                                       (#{ribcage-marks\ 409}#
                                                         #{ribcage\ 2116}#)
                                                       #{i\ 2127}#))
                                                   #f)
                                               (values
                                                 (vector-ref
                                                   (#{ribcage-labels\ 411}#
                                                     #{ribcage\ 2116}#)
                                                   #{i\ 2127}#)
                                                 #{marks\ 2114}#)
                                               (#{f\ 2126}#
                                                 (#{fx+\ 283}#
                                                   #{i\ 2127}#
                                                   1)))))))
                                (#{f\ 2126}# 0)))))
                        (#{search-list-rib\ 2098}#
                          (lambda (#{sym\ 2135}#
                                   #{subst\ 2136}#
                                   #{marks\ 2137}#
                                   #{symnames\ 2138}#
                                   #{ribcage\ 2139}#)
                            (letrec ((#{f\ 2148}#
                                       (lambda (#{symnames\ 2149}# #{i\ 2150}#)
                                         (if (null? #{symnames\ 2149}#)
                                           (#{search\ 2096}#
                                             #{sym\ 2135}#
                                             (cdr #{subst\ 2136}#)
                                             #{marks\ 2137}#)
                                           (if (if (eq? (car #{symnames\ 2149}#)
                                                        #{sym\ 2135}#)
                                                 (#{same-marks?\ 437}#
                                                   #{marks\ 2137}#
                                                   (list-ref
                                                     (#{ribcage-marks\ 409}#
                                                       #{ribcage\ 2139}#)
                                                     #{i\ 2150}#))
                                                 #f)
                                             (values
                                               (list-ref
                                                 (#{ribcage-labels\ 411}#
                                                   #{ribcage\ 2139}#)
                                                 #{i\ 2150}#)
                                               #{marks\ 2137}#)
                                             (#{f\ 2148}#
                                               (cdr #{symnames\ 2149}#)
                                               (#{fx+\ 283}#
                                                 #{i\ 2150}#
                                                 1)))))))
                              (#{f\ 2148}# #{symnames\ 2138}# 0))))
                        (#{search\ 2096}#
                          (lambda (#{sym\ 2158}#
                                   #{subst\ 2159}#
                                   #{marks\ 2160}#)
                            (if (null? #{subst\ 2159}#)
                              (values #f #{marks\ 2160}#)
                              (let ((#{fst\ 2165}# (car #{subst\ 2159}#)))
                                (if (eq? #{fst\ 2165}# (quote shift))
                                  (#{search\ 2096}#
                                    #{sym\ 2158}#
                                    (cdr #{subst\ 2159}#)
                                    (cdr #{marks\ 2160}#))
                                  (let ((#{symnames\ 2167}#
                                          (#{ribcage-symnames\ 407}#
                                            #{fst\ 2165}#)))
                                    (if (vector? #{symnames\ 2167}#)
                                      (#{search-vector-rib\ 2100}#
                                        #{sym\ 2158}#
                                        #{subst\ 2159}#
                                        #{marks\ 2160}#
                                        #{symnames\ 2167}#
                                        #{fst\ 2165}#)
                                      (#{search-list-rib\ 2098}#
                                        #{sym\ 2158}#
                                        #{subst\ 2159}#
                                        #{marks\ 2160}#
                                        #{symnames\ 2167}#
                                        #{fst\ 2165}#)))))))))
                 (if (symbol? #{id\ 2090}#)
                   (let ((#{t\ 2170}#
                           (call-with-values
                             (lambda ()
                               (#{search\ 2096}#
                                 #{id\ 2090}#
                                 (#{wrap-subst\ 391}# #{w\ 2091}#)
                                 (#{wrap-marks\ 389}# #{w\ 2091}#)))
                             (lambda (#{x\ 2172}# . #{ignore\ 2173}#)
                               #{x\ 2172}#))))
                     (if #{t\ 2170}# #{t\ 2170}# #{id\ 2090}#))
                   (if (#{syntax-object?\ 346}# #{id\ 2090}#)
                     (let ((#{id\ 2181}#
                             (#{syntax-object-expression\ 348}# #{id\ 2090}#))
                           (#{w1\ 2182}#
                             (#{syntax-object-wrap\ 350}# #{id\ 2090}#)))
                       (let ((#{marks\ 2184}#
                               (#{join-marks\ 435}#
                                 (#{wrap-marks\ 389}# #{w\ 2091}#)
                                 (#{wrap-marks\ 389}# #{w1\ 2182}#))))
                         (call-with-values
                           (lambda ()
                             (#{search\ 2096}#
                               #{id\ 2181}#
                               (#{wrap-subst\ 391}# #{w\ 2091}#)
                               #{marks\ 2184}#))
                           (lambda (#{new-id\ 2185}# #{marks\ 2186}#)
                             (let ((#{t\ 2191}# #{new-id\ 2185}#))
                               (if #{t\ 2191}#
                                 #{t\ 2191}#
                                 (let ((#{t\ 2194}#
                                         (call-with-values
                                           (lambda ()
                                             (#{search\ 2096}#
                                               #{id\ 2181}#
                                               (#{wrap-subst\ 391}#
                                                 #{w1\ 2182}#)
                                               #{marks\ 2186}#))
                                           (lambda (#{x\ 2196}#
                                                    .
                                                    #{ignore\ 2197}#)
                                             #{x\ 2196}#))))
                                   (if #{t\ 2194}#
                                     #{t\ 2194}#
                                     #{id\ 2181}#))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 2090}#))))))
           (#{same-marks?\ 437}#
             (lambda (#{x\ 2202}# #{y\ 2203}#)
               (let ((#{t\ 2208}# (eq? #{x\ 2202}# #{y\ 2203}#)))
                 (if #{t\ 2208}#
                   #{t\ 2208}#
                   (if (not (null? #{x\ 2202}#))
                     (if (not (null? #{y\ 2203}#))
                       (if (eq? (car #{x\ 2202}#) (car #{y\ 2203}#))
                         (#{same-marks?\ 437}#
                           (cdr #{x\ 2202}#)
                           (cdr #{y\ 2203}#))
                         #f)
                       #f)
                     #f)))))
           (#{join-marks\ 435}#
             (lambda (#{m1\ 2214}# #{m2\ 2215}#)
               (#{smart-append\ 431}# #{m1\ 2214}# #{m2\ 2215}#)))
           (#{join-wraps\ 433}#
             (lambda (#{w1\ 2218}# #{w2\ 2219}#)
               (let ((#{m1\ 2224}# (#{wrap-marks\ 389}# #{w1\ 2218}#))
                     (#{s1\ 2225}# (#{wrap-subst\ 391}# #{w1\ 2218}#)))
                 (if (null? #{m1\ 2224}#)
                   (if (null? #{s1\ 2225}#)
                     #{w2\ 2219}#
                     (#{make-wrap\ 387}#
                       (#{wrap-marks\ 389}# #{w2\ 2219}#)
                       (#{smart-append\ 431}#
                         #{s1\ 2225}#
                         (#{wrap-subst\ 391}# #{w2\ 2219}#))))
                   (#{make-wrap\ 387}#
                     (#{smart-append\ 431}#
                       #{m1\ 2224}#
                       (#{wrap-marks\ 389}# #{w2\ 2219}#))
                     (#{smart-append\ 431}#
                       #{s1\ 2225}#
                       (#{wrap-subst\ 391}# #{w2\ 2219}#)))))))
           (#{smart-append\ 431}#
             (lambda (#{m1\ 2226}# #{m2\ 2227}#)
               (if (null? #{m2\ 2227}#)
                 #{m1\ 2226}#
                 (append #{m1\ 2226}# #{m2\ 2227}#))))
           (#{make-binding-wrap\ 429}#
             (lambda (#{ids\ 2230}# #{labels\ 2231}# #{w\ 2232}#)
               (if (null? #{ids\ 2230}#)
                 #{w\ 2232}#
                 (#{make-wrap\ 387}#
                   (#{wrap-marks\ 389}# #{w\ 2232}#)
                   (cons (let ((#{labelvec\ 2237}#
                                 (list->vector #{labels\ 2231}#)))
                           (let ((#{n\ 2239}#
                                   (vector-length #{labelvec\ 2237}#)))
                             (let ((#{symnamevec\ 2242}#
                                     (make-vector #{n\ 2239}#))
                                   (#{marksvec\ 2243}#
                                     (make-vector #{n\ 2239}#)))
                               (begin
                                 (letrec ((#{f\ 2247}#
                                            (lambda (#{ids\ 2248}# #{i\ 2249}#)
                                              (if (not (null? #{ids\ 2248}#))
                                                (call-with-values
                                                  (lambda ()
                                                    (#{id-sym-name&marks\ 385}#
                                                      (car #{ids\ 2248}#)
                                                      #{w\ 2232}#))
                                                  (lambda (#{symname\ 2250}#
                                                           #{marks\ 2251}#)
                                                    (begin
                                                      (vector-set!
                                                        #{symnamevec\ 2242}#
                                                        #{i\ 2249}#
                                                        #{symname\ 2250}#)
                                                      (vector-set!
                                                        #{marksvec\ 2243}#
                                                        #{i\ 2249}#
                                                        #{marks\ 2251}#)
                                                      (#{f\ 2247}#
                                                        (cdr #{ids\ 2248}#)
                                                        (#{fx+\ 283}#
                                                          #{i\ 2249}#
                                                          1)))))))))
                                   (#{f\ 2247}# #{ids\ 2230}# 0))
                                 (#{make-ribcage\ 403}#
                                   #{symnamevec\ 2242}#
                                   #{marksvec\ 2243}#
                                   #{labelvec\ 2237}#)))))
                         (#{wrap-subst\ 391}# #{w\ 2232}#))))))
           (#{extend-ribcage!\ 427}#
             (lambda (#{ribcage\ 2254}# #{id\ 2255}# #{label\ 2256}#)
               (begin
                 (#{set-ribcage-symnames!\ 413}#
                   #{ribcage\ 2254}#
                   (cons (#{syntax-object-expression\ 348}# #{id\ 2255}#)
                         (#{ribcage-symnames\ 407}# #{ribcage\ 2254}#)))
                 (#{set-ribcage-marks!\ 415}#
                   #{ribcage\ 2254}#
                   (cons (#{wrap-marks\ 389}#
                           (#{syntax-object-wrap\ 350}# #{id\ 2255}#))
                         (#{ribcage-marks\ 409}# #{ribcage\ 2254}#)))
                 (#{set-ribcage-labels!\ 417}#
                   #{ribcage\ 2254}#
                   (cons #{label\ 2256}#
                         (#{ribcage-labels\ 411}# #{ribcage\ 2254}#))))))
           (#{anti-mark\ 423}#
             (lambda (#{w\ 2260}#)
               (#{make-wrap\ 387}#
                 (cons #f (#{wrap-marks\ 389}# #{w\ 2260}#))
                 (cons 'shift
                       (#{wrap-subst\ 391}# #{w\ 2260}#)))))
           (#{set-ribcage-labels!\ 417}#
             (lambda (#{x\ 2263}# #{update\ 2264}#)
               (vector-set! #{x\ 2263}# 3 #{update\ 2264}#)))
           (#{set-ribcage-marks!\ 415}#
             (lambda (#{x\ 2267}# #{update\ 2268}#)
               (vector-set! #{x\ 2267}# 2 #{update\ 2268}#)))
           (#{set-ribcage-symnames!\ 413}#
             (lambda (#{x\ 2271}# #{update\ 2272}#)
               (vector-set! #{x\ 2271}# 1 #{update\ 2272}#)))
           (#{ribcage-labels\ 411}#
             (lambda (#{x\ 2275}#) (vector-ref #{x\ 2275}# 3)))
           (#{ribcage-marks\ 409}#
             (lambda (#{x\ 2277}#) (vector-ref #{x\ 2277}# 2)))
           (#{ribcage-symnames\ 407}#
             (lambda (#{x\ 2279}#) (vector-ref #{x\ 2279}# 1)))
           (#{ribcage?\ 405}#
             (lambda (#{x\ 2281}#)
               (if (vector? #{x\ 2281}#)
                 (if (= (vector-length #{x\ 2281}#) 4)
                   (eq? (vector-ref #{x\ 2281}# 0) (quote ribcage))
                   #f)
                 #f)))
           (#{make-ribcage\ 403}#
             (lambda (#{symnames\ 2286}#
                      #{marks\ 2287}#
                      #{labels\ 2288}#)
               (vector
                 'ribcage
                 #{symnames\ 2286}#
                 #{marks\ 2287}#
                 #{labels\ 2288}#)))
           (#{gen-labels\ 400}#
             (lambda (#{ls\ 2292}#)
               (if (null? #{ls\ 2292}#)
                 '()
                 (cons (#{gen-label\ 398}#)
                       (#{gen-labels\ 400}# (cdr #{ls\ 2292}#))))))
           (#{gen-label\ 398}#
             (lambda () (symbol->string (gensym "i"))))
           (#{wrap-subst\ 391}# cdr)
           (#{wrap-marks\ 389}# car)
           (#{make-wrap\ 387}# cons)
           (#{id-sym-name&marks\ 385}#
             (lambda (#{x\ 2294}# #{w\ 2295}#)
               (if (#{syntax-object?\ 346}# #{x\ 2294}#)
                 (values
                   (#{syntax-object-expression\ 348}# #{x\ 2294}#)
                   (#{join-marks\ 435}#
                     (#{wrap-marks\ 389}# #{w\ 2295}#)
                     (#{wrap-marks\ 389}#
                       (#{syntax-object-wrap\ 350}# #{x\ 2294}#))))
                 (values
                   #{x\ 2294}#
                   (#{wrap-marks\ 389}# #{w\ 2295}#)))))
           (#{id?\ 382}#
             (lambda (#{x\ 2298}#)
               (if (symbol? #{x\ 2298}#)
                 #t
                 (if (#{syntax-object?\ 346}# #{x\ 2298}#)
                   (symbol?
                     (#{syntax-object-expression\ 348}# #{x\ 2298}#))
                   #f))))
           (#{nonsymbol-id?\ 380}#
             (lambda (#{x\ 2305}#)
               (if (#{syntax-object?\ 346}# #{x\ 2305}#)
                 (symbol?
                   (#{syntax-object-expression\ 348}# #{x\ 2305}#))
                 #f)))
           (#{global-extend\ 378}#
             (lambda (#{type\ 2309}# #{sym\ 2310}# #{val\ 2311}#)
               (#{put-global-definition-hook\ 296}#
                 #{sym\ 2310}#
                 #{type\ 2309}#
                 #{val\ 2311}#)))
           (#{lookup\ 376}#
             (lambda (#{x\ 2315}# #{r\ 2316}# #{mod\ 2317}#)
               (let ((#{t\ 2323}# (assq #{x\ 2315}# #{r\ 2316}#)))
                 (if #{t\ 2323}#
                   (cdr #{t\ 2323}#)
                   (if (symbol? #{x\ 2315}#)
                     (let ((#{t\ 2329}#
                             (#{get-global-definition-hook\ 298}#
                               #{x\ 2315}#
                               #{mod\ 2317}#)))
                       (if #{t\ 2329}# #{t\ 2329}# (quote (global))))
                     '(displaced-lexical))))))
           (#{macros-only-env\ 374}#
             (lambda (#{r\ 2334}#)
               (if (null? #{r\ 2334}#)
                 '()
                 (let ((#{a\ 2337}# (car #{r\ 2334}#)))
                   (if (eq? (cadr #{a\ 2337}#) (quote macro))
                     (cons #{a\ 2337}#
                           (#{macros-only-env\ 374}# (cdr #{r\ 2334}#)))
                     (#{macros-only-env\ 374}# (cdr #{r\ 2334}#)))))))
           (#{extend-var-env\ 372}#
             (lambda (#{labels\ 2338}# #{vars\ 2339}# #{r\ 2340}#)
               (if (null? #{labels\ 2338}#)
                 #{r\ 2340}#
                 (#{extend-var-env\ 372}#
                   (cdr #{labels\ 2338}#)
                   (cdr #{vars\ 2339}#)
                   (cons (cons (car #{labels\ 2338}#)
                               (cons (quote lexical) (car #{vars\ 2339}#)))
                         #{r\ 2340}#)))))
           (#{extend-env\ 370}#
             (lambda (#{labels\ 2345}# #{bindings\ 2346}# #{r\ 2347}#)
               (if (null? #{labels\ 2345}#)
                 #{r\ 2347}#
                 (#{extend-env\ 370}#
                   (cdr #{labels\ 2345}#)
                   (cdr #{bindings\ 2346}#)
                   (cons (cons (car #{labels\ 2345}#)
                               (car #{bindings\ 2346}#))
                         #{r\ 2347}#)))))
           (#{binding-value\ 367}# cdr)
           (#{binding-type\ 365}# car)
           (#{source-annotation\ 361}#
             (lambda (#{x\ 2351}#)
               (if (#{syntax-object?\ 346}# #{x\ 2351}#)
                 (#{source-annotation\ 361}#
                   (#{syntax-object-expression\ 348}# #{x\ 2351}#))
                 (if (pair? #{x\ 2351}#)
                   (let ((#{props\ 2358}# (source-properties #{x\ 2351}#)))
                     (if (pair? #{props\ 2358}#) #{props\ 2358}# #f))
                   #f))))
           (#{set-syntax-object-module!\ 358}#
             (lambda (#{x\ 2360}# #{update\ 2361}#)
               (vector-set! #{x\ 2360}# 3 #{update\ 2361}#)))
           (#{set-syntax-object-wrap!\ 356}#
             (lambda (#{x\ 2364}# #{update\ 2365}#)
               (vector-set! #{x\ 2364}# 2 #{update\ 2365}#)))
           (#{set-syntax-object-expression!\ 354}#
             (lambda (#{x\ 2368}# #{update\ 2369}#)
               (vector-set! #{x\ 2368}# 1 #{update\ 2369}#)))
           (#{syntax-object-module\ 352}#
             (lambda (#{x\ 2372}#) (vector-ref #{x\ 2372}# 3)))
           (#{syntax-object-wrap\ 350}#
             (lambda (#{x\ 2374}#) (vector-ref #{x\ 2374}# 2)))
           (#{syntax-object-expression\ 348}#
             (lambda (#{x\ 2376}#) (vector-ref #{x\ 2376}# 1)))
           (#{syntax-object?\ 346}#
             (lambda (#{x\ 2378}#)
               (if (vector? #{x\ 2378}#)
                 (if (= (vector-length #{x\ 2378}#) 4)
                   (eq? (vector-ref #{x\ 2378}# 0)
                        'syntax-object)
                   #f)
                 #f)))
           (#{make-syntax-object\ 344}#
             (lambda (#{expression\ 2383}#
                      #{wrap\ 2384}#
                      #{module\ 2385}#)
               (vector
                 'syntax-object
                 #{expression\ 2383}#
                 #{wrap\ 2384}#
                 #{module\ 2385}#)))
           (#{build-letrec\ 340}#
             (lambda (#{src\ 2389}#
                      #{ids\ 2390}#
                      #{vars\ 2391}#
                      #{val-exps\ 2392}#
                      #{body-exp\ 2393}#)
               (if (null? #{vars\ 2391}#)
                 #{body-exp\ 2393}#
                 (begin
                   (for-each
                     #{maybe-name-value!\ 320}#
                     #{ids\ 2390}#
                     #{val-exps\ 2392}#)
                   (#{make-letrec\ 272}#
                     #{src\ 2389}#
                     #f
                     #{ids\ 2390}#
                     #{vars\ 2391}#
                     #{val-exps\ 2392}#
                     #{body-exp\ 2393}#)))))
           (#{build-named-let\ 338}#
             (lambda (#{src\ 2399}#
                      #{ids\ 2400}#
                      #{vars\ 2401}#
                      #{val-exps\ 2402}#
                      #{body-exp\ 2403}#)
               (let ((#{f\ 2413}# (car #{vars\ 2401}#))
                     (#{f-name\ 2414}# (car #{ids\ 2400}#))
                     (#{vars\ 2415}# (cdr #{vars\ 2401}#))
                     (#{ids\ 2416}# (cdr #{ids\ 2400}#)))
                 (let ((#{proc\ 2418}#
                         (#{build-simple-lambda\ 324}#
                           #{src\ 2399}#
                           #{ids\ 2416}#
                           #f
                           #{vars\ 2415}#
                           '()
                           #{body-exp\ 2403}#)))
                   (begin
                     (#{maybe-name-value!\ 320}#
                       #{f-name\ 2414}#
                       #{proc\ 2418}#)
                     (for-each
                       #{maybe-name-value!\ 320}#
                       #{ids\ 2416}#
                       #{val-exps\ 2402}#)
                     (#{make-letrec\ 272}#
                       #{src\ 2399}#
                       #f
                       (list #{f-name\ 2414}#)
                       (list #{f\ 2413}#)
                       (list #{proc\ 2418}#)
                       (#{build-application\ 304}#
                         #{src\ 2399}#
                         (#{build-lexical-reference\ 310}#
                           'fun
                           #{src\ 2399}#
                           #{f-name\ 2414}#
                           #{f\ 2413}#)
                         #{val-exps\ 2402}#)))))))
           (#{build-let\ 336}#
             (lambda (#{src\ 2419}#
                      #{ids\ 2420}#
                      #{vars\ 2421}#
                      #{val-exps\ 2422}#
                      #{body-exp\ 2423}#)
               (begin
                 (for-each
                   #{maybe-name-value!\ 320}#
                   #{ids\ 2420}#
                   #{val-exps\ 2422}#)
                 (if (null? #{vars\ 2421}#)
                   #{body-exp\ 2423}#
                   (#{make-let\ 270}#
                     #{src\ 2419}#
                     #{ids\ 2420}#
                     #{vars\ 2421}#
                     #{val-exps\ 2422}#
                     #{body-exp\ 2423}#)))))
           (#{build-sequence\ 334}#
             (lambda (#{src\ 2429}# #{exps\ 2430}#)
               (if (null? (cdr #{exps\ 2430}#))
                 (car #{exps\ 2430}#)
                 (#{make-sequence\ 264}#
                   #{src\ 2429}#
                   #{exps\ 2430}#))))
           (#{build-data\ 332}#
             (lambda (#{src\ 2433}# #{exp\ 2434}#)
               (#{make-const\ 242}# #{src\ 2433}# #{exp\ 2434}#)))
           (#{build-primref\ 330}#
             (lambda (#{src\ 2437}# #{name\ 2438}#)
               (if (equal?
                     (module-name (current-module))
                     '(guile))
                 (#{make-toplevel-ref\ 254}#
                   #{src\ 2437}#
                   #{name\ 2438}#)
                 (#{make-module-ref\ 250}#
                   #{src\ 2437}#
                   '(guile)
                   #{name\ 2438}#
                   #f))))
           (#{build-lambda-case\ 328}#
             (lambda (#{src\ 2441}#
                      #{req\ 2442}#
                      #{opt\ 2443}#
                      #{rest\ 2444}#
                      #{kw\ 2445}#
                      #{inits\ 2446}#
                      #{vars\ 2447}#
                      #{body\ 2448}#
                      #{else-case\ 2449}#)
               (#{make-lambda-case\ 268}#
                 #{src\ 2441}#
                 #{req\ 2442}#
                 #{opt\ 2443}#
                 #{rest\ 2444}#
                 #{kw\ 2445}#
                 #{inits\ 2446}#
                 #{vars\ 2447}#
                 #{body\ 2448}#
                 #{else-case\ 2449}#)))
           (#{build-case-lambda\ 326}#
             (lambda (#{src\ 2459}# #{meta\ 2460}# #{body\ 2461}#)
               (#{make-lambda\ 266}#
                 #{src\ 2459}#
                 #{meta\ 2460}#
                 #{body\ 2461}#)))
           (#{build-simple-lambda\ 324}#
             (lambda (#{src\ 2465}#
                      #{req\ 2466}#
                      #{rest\ 2467}#
                      #{vars\ 2468}#
                      #{meta\ 2469}#
                      #{exp\ 2470}#)
               (#{make-lambda\ 266}#
                 #{src\ 2465}#
                 #{meta\ 2469}#
                 (#{make-lambda-case\ 268}#
                   #{src\ 2465}#
                   #{req\ 2466}#
                   #f
                   #{rest\ 2467}#
                   #f
                   '()
                   #{vars\ 2468}#
                   #{exp\ 2470}#
                   #f))))
           (#{build-global-definition\ 322}#
             (lambda (#{source\ 2477}# #{var\ 2478}# #{exp\ 2479}#)
               (begin
                 (#{maybe-name-value!\ 320}#
                   #{var\ 2478}#
                   #{exp\ 2479}#)
                 (#{make-toplevel-define\ 258}#
                   #{source\ 2477}#
                   #{var\ 2478}#
                   #{exp\ 2479}#))))
           (#{maybe-name-value!\ 320}#
             (lambda (#{name\ 2483}# #{val\ 2484}#)
               (if (#{lambda?\ 277}# #{val\ 2484}#)
                 (let ((#{meta\ 2488}#
                         (#{lambda-meta\ 279}# #{val\ 2484}#)))
                   (if (not (assq (quote name) #{meta\ 2488}#))
                     (#{set-lambda-meta!\ 281}#
                       #{val\ 2484}#
                       (acons 'name
                              #{name\ 2483}#
                              #{meta\ 2488}#)))))))
           (#{build-global-assignment\ 318}#
             (lambda (#{source\ 2489}#
                      #{var\ 2490}#
                      #{exp\ 2491}#
                      #{mod\ 2492}#)
               (#{analyze-variable\ 314}#
                 #{mod\ 2492}#
                 #{var\ 2490}#
                 (lambda (#{mod\ 2497}# #{var\ 2498}# #{public?\ 2499}#)
                   (#{make-module-set\ 252}#
                     #{source\ 2489}#
                     #{mod\ 2497}#
                     #{var\ 2498}#
                     #{public?\ 2499}#
                     #{exp\ 2491}#))
                 (lambda (#{var\ 2503}#)
                   (#{make-toplevel-set\ 256}#
                     #{source\ 2489}#
                     #{var\ 2503}#
                     #{exp\ 2491}#)))))
           (#{build-global-reference\ 316}#
             (lambda (#{source\ 2505}# #{var\ 2506}# #{mod\ 2507}#)
               (#{analyze-variable\ 314}#
                 #{mod\ 2507}#
                 #{var\ 2506}#
                 (lambda (#{mod\ 2511}# #{var\ 2512}# #{public?\ 2513}#)
                   (#{make-module-ref\ 250}#
                     #{source\ 2505}#
                     #{mod\ 2511}#
                     #{var\ 2512}#
                     #{public?\ 2513}#))
                 (lambda (#{var\ 2517}#)
                   (#{make-toplevel-ref\ 254}#
                     #{source\ 2505}#
                     #{var\ 2517}#)))))
           (#{analyze-variable\ 314}#
             (lambda (#{mod\ 2519}#
                      #{var\ 2520}#
                      #{modref-cont\ 2521}#
                      #{bare-cont\ 2522}#)
               (if (not #{mod\ 2519}#)
                 (#{bare-cont\ 2522}# #{var\ 2520}#)
                 (let ((#{kind\ 2529}# (car #{mod\ 2519}#))
                       (#{mod\ 2530}# (cdr #{mod\ 2519}#)))
                   (if (memv #{kind\ 2529}# (quote (public)))
                     (#{modref-cont\ 2521}#
                       #{mod\ 2530}#
                       #{var\ 2520}#
                       #t)
                     (if (memv #{kind\ 2529}# (quote (private)))
                       (if (not (equal?
                                  #{mod\ 2530}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 2521}#
                           #{mod\ 2530}#
                           #{var\ 2520}#
                           #f)
                         (#{bare-cont\ 2522}# #{var\ 2520}#))
                       (if (memv #{kind\ 2529}# (quote (bare)))
                         (#{bare-cont\ 2522}# #{var\ 2520}#)
                         (if (memv #{kind\ 2529}# (quote (hygiene)))
                           (if (if (not (equal?
                                          #{mod\ 2530}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 2530}#)
                                   #{var\ 2520}#)
                                 #f)
                             (#{modref-cont\ 2521}#
                               #{mod\ 2530}#
                               #{var\ 2520}#
                               #f)
                             (#{bare-cont\ 2522}# #{var\ 2520}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 2520}#
                             #{mod\ 2530}#)))))))))
           (#{build-lexical-assignment\ 312}#
             (lambda (#{source\ 2538}#
                      #{name\ 2539}#
                      #{var\ 2540}#
                      #{exp\ 2541}#)
               (#{make-lexical-set\ 248}#
                 #{source\ 2538}#
                 #{name\ 2539}#
                 #{var\ 2540}#
                 #{exp\ 2541}#)))
           (#{build-lexical-reference\ 310}#
             (lambda (#{type\ 2546}#
                      #{source\ 2547}#
                      #{name\ 2548}#
                      #{var\ 2549}#)
               (#{make-lexical-ref\ 246}#
                 #{source\ 2547}#
                 #{name\ 2548}#
                 #{var\ 2549}#)))
           (#{build-dynlet\ 308}#
             (lambda (#{source\ 2554}#
                      #{fluids\ 2555}#
                      #{vals\ 2556}#
                      #{body\ 2557}#)
               (#{make-dynlet\ 274}#
                 #{source\ 2554}#
                 #{fluids\ 2555}#
                 #{vals\ 2556}#
                 #{body\ 2557}#)))
           (#{build-conditional\ 306}#
             (lambda (#{source\ 2562}#
                      #{test-exp\ 2563}#
                      #{then-exp\ 2564}#
                      #{else-exp\ 2565}#)
               (#{make-conditional\ 260}#
                 #{source\ 2562}#
                 #{test-exp\ 2563}#
                 #{then-exp\ 2564}#
                 #{else-exp\ 2565}#)))
           (#{build-application\ 304}#
             (lambda (#{source\ 2570}#
                      #{fun-exp\ 2571}#
                      #{arg-exps\ 2572}#)
               (#{make-application\ 262}#
                 #{source\ 2570}#
                 #{fun-exp\ 2571}#
                 #{arg-exps\ 2572}#)))
           (#{build-void\ 302}#
             (lambda (#{source\ 2576}#)
               (#{make-void\ 240}# #{source\ 2576}#)))
           (#{decorate-source\ 300}#
             (lambda (#{e\ 2578}# #{s\ 2579}#)
               (begin
                 (if (if (pair? #{e\ 2578}#) #{s\ 2579}# #f)
                   (set-source-properties! #{e\ 2578}# #{s\ 2579}#))
                 #{e\ 2578}#)))
           (#{get-global-definition-hook\ 298}#
             (lambda (#{symbol\ 2584}# #{module\ 2585}#)
               (begin
                 (if (if (not #{module\ 2585}#) (current-module) #f)
                   (warn "module system is booted, we should have a module"
                         #{symbol\ 2584}#))
                 (let ((#{v\ 2591}#
                         (module-variable
                           (if #{module\ 2585}#
                             (resolve-module (cdr #{module\ 2585}#))
                             (current-module))
                           #{symbol\ 2584}#)))
                   (if #{v\ 2591}#
                     (if (variable-bound? #{v\ 2591}#)
                       (let ((#{val\ 2596}# (variable-ref #{v\ 2591}#)))
                         (if (macro? #{val\ 2596}#)
                           (if (macro-type #{val\ 2596}#)
                             (cons (macro-type #{val\ 2596}#)
                                   (macro-binding #{val\ 2596}#))
                             #f)
                           #f))
                       #f)
                     #f)))))
           (#{put-global-definition-hook\ 296}#
             (lambda (#{symbol\ 2600}# #{type\ 2601}# #{val\ 2602}#)
               (module-define!
                 (current-module)
                 #{symbol\ 2600}#
                 (make-syntax-transformer
                   #{symbol\ 2600}#
                   #{type\ 2601}#
                   #{val\ 2602}#))))
           (#{local-eval-hook\ 293}#
             (lambda (#{x\ 2606}# #{mod\ 2607}#)
               (primitive-eval #{x\ 2606}#)))
           (#{top-level-eval-hook\ 291}#
             (lambda (#{x\ 2610}# #{mod\ 2611}#)
               (primitive-eval #{x\ 2610}#)))
           (#{fx<\ 289}# <)
           (#{fx=\ 287}# =)
           (#{fx-\ 285}# -)
           (#{fx+\ 283}# +)
           (#{set-lambda-meta!\ 281}#
             (lambda (#{x\ 2614}# #{v\ 2615}#)
               (struct-set! #{x\ 2614}# 1 #{v\ 2615}#)))
           (#{lambda-meta\ 279}#
             (lambda (#{x\ 2618}#) (struct-ref #{x\ 2618}# 1)))
           (#{lambda?\ 277}#
             (lambda (#{x\ 2620}#)
               (if (struct? #{x\ 2620}#)
                 (eq? (struct-vtable #{x\ 2620}#)
                      (vector-ref %expanded-vtables 13))
                 #f)))
           (#{make-dynlet\ 274}#
             (lambda (#{src\ 2624}#
                      #{fluids\ 2625}#
                      #{vals\ 2626}#
                      #{body\ 2627}#)
               (make-struct
                 (vector-ref %expanded-vtables 17)
                 0
                 #{src\ 2624}#
                 #{fluids\ 2625}#
                 #{vals\ 2626}#
                 #{body\ 2627}#)))
           (#{make-letrec\ 272}#
             (lambda (#{src\ 2632}#
                      #{in-order?\ 2633}#
                      #{names\ 2634}#
                      #{gensyms\ 2635}#
                      #{vals\ 2636}#
                      #{body\ 2637}#)
               (make-struct
                 (vector-ref %expanded-vtables 16)
                 0
                 #{src\ 2632}#
                 #{in-order?\ 2633}#
                 #{names\ 2634}#
                 #{gensyms\ 2635}#
                 #{vals\ 2636}#
                 #{body\ 2637}#)))
           (#{make-let\ 270}#
             (lambda (#{src\ 2644}#
                      #{names\ 2645}#
                      #{gensyms\ 2646}#
                      #{vals\ 2647}#
                      #{body\ 2648}#)
               (make-struct
                 (vector-ref %expanded-vtables 15)
                 0
                 #{src\ 2644}#
                 #{names\ 2645}#
                 #{gensyms\ 2646}#
                 #{vals\ 2647}#
                 #{body\ 2648}#)))
           (#{make-lambda-case\ 268}#
             (lambda (#{src\ 2654}#
                      #{req\ 2655}#
                      #{opt\ 2656}#
                      #{rest\ 2657}#
                      #{kw\ 2658}#
                      #{inits\ 2659}#
                      #{gensyms\ 2660}#
                      #{body\ 2661}#
                      #{alternate\ 2662}#)
               (make-struct
                 (vector-ref %expanded-vtables 14)
                 0
                 #{src\ 2654}#
                 #{req\ 2655}#
                 #{opt\ 2656}#
                 #{rest\ 2657}#
                 #{kw\ 2658}#
                 #{inits\ 2659}#
                 #{gensyms\ 2660}#
                 #{body\ 2661}#
                 #{alternate\ 2662}#)))
           (#{make-lambda\ 266}#
             (lambda (#{src\ 2672}# #{meta\ 2673}# #{body\ 2674}#)
               (make-struct
                 (vector-ref %expanded-vtables 13)
                 0
                 #{src\ 2672}#
                 #{meta\ 2673}#
                 #{body\ 2674}#)))
           (#{make-sequence\ 264}#
             (lambda (#{src\ 2678}# #{exps\ 2679}#)
               (make-struct
                 (vector-ref %expanded-vtables 12)
                 0
                 #{src\ 2678}#
                 #{exps\ 2679}#)))
           (#{make-application\ 262}#
             (lambda (#{src\ 2682}# #{proc\ 2683}# #{args\ 2684}#)
               (make-struct
                 (vector-ref %expanded-vtables 11)
                 0
                 #{src\ 2682}#
                 #{proc\ 2683}#
                 #{args\ 2684}#)))
           (#{make-conditional\ 260}#
             (lambda (#{src\ 2688}#
                      #{test\ 2689}#
                      #{consequent\ 2690}#
                      #{alternate\ 2691}#)
               (make-struct
                 (vector-ref %expanded-vtables 10)
                 0
                 #{src\ 2688}#
                 #{test\ 2689}#
                 #{consequent\ 2690}#
                 #{alternate\ 2691}#)))
           (#{make-toplevel-define\ 258}#
             (lambda (#{src\ 2696}# #{name\ 2697}# #{exp\ 2698}#)
               (make-struct
                 (vector-ref %expanded-vtables 9)
                 0
                 #{src\ 2696}#
                 #{name\ 2697}#
                 #{exp\ 2698}#)))
           (#{make-toplevel-set\ 256}#
             (lambda (#{src\ 2702}# #{name\ 2703}# #{exp\ 2704}#)
               (make-struct
                 (vector-ref %expanded-vtables 8)
                 0
                 #{src\ 2702}#
                 #{name\ 2703}#
                 #{exp\ 2704}#)))
           (#{make-toplevel-ref\ 254}#
             (lambda (#{src\ 2708}# #{name\ 2709}#)
               (make-struct
                 (vector-ref %expanded-vtables 7)
                 0
                 #{src\ 2708}#
                 #{name\ 2709}#)))
           (#{make-module-set\ 252}#
             (lambda (#{src\ 2712}#
                      #{mod\ 2713}#
                      #{name\ 2714}#
                      #{public?\ 2715}#
                      #{exp\ 2716}#)
               (make-struct
                 (vector-ref %expanded-vtables 6)
                 0
                 #{src\ 2712}#
                 #{mod\ 2713}#
                 #{name\ 2714}#
                 #{public?\ 2715}#
                 #{exp\ 2716}#)))
           (#{make-module-ref\ 250}#
             (lambda (#{src\ 2722}#
                      #{mod\ 2723}#
                      #{name\ 2724}#
                      #{public?\ 2725}#)
               (make-struct
                 (vector-ref %expanded-vtables 5)
                 0
                 #{src\ 2722}#
                 #{mod\ 2723}#
                 #{name\ 2724}#
                 #{public?\ 2725}#)))
           (#{make-lexical-set\ 248}#
             (lambda (#{src\ 2730}#
                      #{name\ 2731}#
                      #{gensym\ 2732}#
                      #{exp\ 2733}#)
               (make-struct
                 (vector-ref %expanded-vtables 4)
                 0
                 #{src\ 2730}#
                 #{name\ 2731}#
                 #{gensym\ 2732}#
                 #{exp\ 2733}#)))
           (#{make-lexical-ref\ 246}#
             (lambda (#{src\ 2738}# #{name\ 2739}# #{gensym\ 2740}#)
               (make-struct
                 (vector-ref %expanded-vtables 3)
                 0
                 #{src\ 2738}#
                 #{name\ 2739}#
                 #{gensym\ 2740}#)))
           (#{make-primitive-ref\ 244}#
             (lambda (#{src\ 2744}# #{name\ 2745}#)
               (make-struct
                 (vector-ref %expanded-vtables 2)
                 0
                 #{src\ 2744}#
                 #{name\ 2745}#)))
           (#{make-const\ 242}#
             (lambda (#{src\ 2748}# #{exp\ 2749}#)
               (make-struct
                 (vector-ref %expanded-vtables 1)
                 0
                 #{src\ 2748}#
                 #{exp\ 2749}#)))
           (#{make-void\ 240}#
             (lambda (#{src\ 2752}#)
               (make-struct
                 (vector-ref %expanded-vtables 0)
                 0
                 #{src\ 2752}#))))
    (begin
      (#{global-extend\ 378}#
        'local-syntax
        'letrec-syntax
        #t)
      (#{global-extend\ 378}#
        'local-syntax
        'let-syntax
        #f)
      (#{global-extend\ 378}#
        'core
        'fluid-let-syntax
        (lambda (#{e\ 2754}#
                 #{r\ 2755}#
                 #{w\ 2756}#
                 #{s\ 2757}#
                 #{mod\ 2758}#)
          ((lambda (#{tmp\ 2764}#)
             ((lambda (#{tmp\ 2765}#)
                (if (if #{tmp\ 2765}#
                      (apply (lambda (#{_\ 2771}#
                                      #{var\ 2772}#
                                      #{val\ 2773}#
                                      #{e1\ 2774}#
                                      #{e2\ 2775}#)
                               (#{valid-bound-ids?\ 445}# #{var\ 2772}#))
                             #{tmp\ 2765}#)
                      #f)
                  (apply (lambda (#{_\ 2782}#
                                  #{var\ 2783}#
                                  #{val\ 2784}#
                                  #{e1\ 2785}#
                                  #{e2\ 2786}#)
                           (let ((#{names\ 2788}#
                                   (map (lambda (#{x\ 2789}#)
                                          (#{id-var-name\ 439}#
                                            #{x\ 2789}#
                                            #{w\ 2756}#))
                                        #{var\ 2783}#)))
                             (begin
                               (for-each
                                 (lambda (#{id\ 2792}# #{n\ 2793}#)
                                   (let ((#{atom-key\ 2798}#
                                           (#{binding-type\ 365}#
                                             (#{lookup\ 376}#
                                               #{n\ 2793}#
                                               #{r\ 2755}#
                                               #{mod\ 2758}#))))
                                     (if (memv #{atom-key\ 2798}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'fluid-let-syntax
                                         "identifier out of context"
                                         #{e\ 2754}#
                                         (#{source-wrap\ 453}#
                                           #{id\ 2792}#
                                           #{w\ 2756}#
                                           #{s\ 2757}#
                                           #{mod\ 2758}#)))))
                                 #{var\ 2783}#
                                 #{names\ 2788}#)
                               (#{chi-body\ 475}#
                                 (cons #{e1\ 2785}# #{e2\ 2786}#)
                                 (#{source-wrap\ 453}#
                                   #{e\ 2754}#
                                   #{w\ 2756}#
                                   #{s\ 2757}#
                                   #{mod\ 2758}#)
                                 (#{extend-env\ 370}#
                                   #{names\ 2788}#
                                   (let ((#{trans-r\ 2803}#
                                           (#{macros-only-env\ 374}#
                                             #{r\ 2755}#)))
                                     (map (lambda (#{x\ 2804}#)
                                            (cons 'macro
                                                  (#{eval-local-transformer\ 479}#
                                                    (#{chi\ 467}#
                                                      #{x\ 2804}#
                                                      #{trans-r\ 2803}#
                                                      #{w\ 2756}#
                                                      #{mod\ 2758}#)
                                                    #{mod\ 2758}#)))
                                          #{val\ 2784}#))
                                   #{r\ 2755}#)
                                 #{w\ 2756}#
                                 #{mod\ 2758}#))))
                         #{tmp\ 2765}#)
                  ((lambda (#{_\ 2809}#)
                     (syntax-violation
                       'fluid-let-syntax
                       "bad syntax"
                       (#{source-wrap\ 453}#
                         #{e\ 2754}#
                         #{w\ 2756}#
                         #{s\ 2757}#
                         #{mod\ 2758}#)))
                   #{tmp\ 2764}#)))
              ($sc-dispatch
                #{tmp\ 2764}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 2754}#)))
      (#{global-extend\ 378}#
        'core
        'quote
        (lambda (#{e\ 2810}#
                 #{r\ 2811}#
                 #{w\ 2812}#
                 #{s\ 2813}#
                 #{mod\ 2814}#)
          ((lambda (#{tmp\ 2820}#)
             ((lambda (#{tmp\ 2821}#)
                (if #{tmp\ 2821}#
                  (apply (lambda (#{_\ 2824}# #{e\ 2825}#)
                           (#{build-data\ 332}#
                             #{s\ 2813}#
                             (#{strip\ 493}# #{e\ 2825}# #{w\ 2812}#)))
                         #{tmp\ 2821}#)
                  ((lambda (#{_\ 2827}#)
                     (syntax-violation
                       'quote
                       "bad syntax"
                       (#{source-wrap\ 453}#
                         #{e\ 2810}#
                         #{w\ 2812}#
                         #{s\ 2813}#
                         #{mod\ 2814}#)))
                   #{tmp\ 2820}#)))
              ($sc-dispatch #{tmp\ 2820}# (quote (any any)))))
           #{e\ 2810}#)))
      (#{global-extend\ 378}#
        'core
        'syntax
        (letrec ((#{regen\ 2843}#
                   (lambda (#{x\ 2844}#)
                     (let ((#{atom-key\ 2848}# (car #{x\ 2844}#)))
                       (if (memv #{atom-key\ 2848}# (quote (ref)))
                         (#{build-lexical-reference\ 310}#
                           'value
                           #f
                           (cadr #{x\ 2844}#)
                           (cadr #{x\ 2844}#))
                         (if (memv #{atom-key\ 2848}# (quote (primitive)))
                           (#{build-primref\ 330}# #f (cadr #{x\ 2844}#))
                           (if (memv #{atom-key\ 2848}# (quote (quote)))
                             (#{build-data\ 332}# #f (cadr #{x\ 2844}#))
                             (if (memv #{atom-key\ 2848}# (quote (lambda)))
                               (if (list? (cadr #{x\ 2844}#))
                                 (#{build-simple-lambda\ 324}#
                                   #f
                                   (cadr #{x\ 2844}#)
                                   #f
                                   (cadr #{x\ 2844}#)
                                   '()
                                   (#{regen\ 2843}# (caddr #{x\ 2844}#)))
                                 (error "how did we get here" #{x\ 2844}#))
                               (#{build-application\ 304}#
                                 #f
                                 (#{build-primref\ 330}# #f (car #{x\ 2844}#))
                                 (map #{regen\ 2843}#
                                      (cdr #{x\ 2844}#))))))))))
                 (#{gen-vector\ 2841}#
                   (lambda (#{x\ 2860}#)
                     (if (eq? (car #{x\ 2860}#) (quote list))
                       (cons (quote vector) (cdr #{x\ 2860}#))
                       (if (eq? (car #{x\ 2860}#) (quote quote))
                         (list 'quote
                               (list->vector (cadr #{x\ 2860}#)))
                         (list (quote list->vector) #{x\ 2860}#)))))
                 (#{gen-append\ 2839}#
                   (lambda (#{x\ 2870}# #{y\ 2871}#)
                     (if (equal? #{y\ 2871}# (quote (quote ())))
                       #{x\ 2870}#
                       (list (quote append) #{x\ 2870}# #{y\ 2871}#))))
                 (#{gen-cons\ 2837}#
                   (lambda (#{x\ 2875}# #{y\ 2876}#)
                     (let ((#{atom-key\ 2881}# (car #{y\ 2876}#)))
                       (if (memv #{atom-key\ 2881}# (quote (quote)))
                         (if (eq? (car #{x\ 2875}#) (quote quote))
                           (list 'quote
                                 (cons (cadr #{x\ 2875}#) (cadr #{y\ 2876}#)))
                           (if (eq? (cadr #{y\ 2876}#) (quote ()))
                             (list (quote list) #{x\ 2875}#)
                             (list (quote cons) #{x\ 2875}# #{y\ 2876}#)))
                         (if (memv #{atom-key\ 2881}# (quote (list)))
                           (cons 'list
                                 (cons #{x\ 2875}# (cdr #{y\ 2876}#)))
                           (list (quote cons) #{x\ 2875}# #{y\ 2876}#))))))
                 (#{gen-map\ 2835}#
                   (lambda (#{e\ 2890}# #{map-env\ 2891}#)
                     (let ((#{formals\ 2896}# (map cdr #{map-env\ 2891}#))
                           (#{actuals\ 2897}#
                             (map (lambda (#{x\ 2898}#)
                                    (list (quote ref) (car #{x\ 2898}#)))
                                  #{map-env\ 2891}#)))
                       (if (eq? (car #{e\ 2890}#) (quote ref))
                         (car #{actuals\ 2897}#)
                         (if (and-map
                               (lambda (#{x\ 2905}#)
                                 (if (eq? (car #{x\ 2905}#) (quote ref))
                                   (memq (cadr #{x\ 2905}#) #{formals\ 2896}#)
                                   #f))
                               (cdr #{e\ 2890}#))
                           (cons 'map
                                 (cons (list 'primitive
                                             (car #{e\ 2890}#))
                                       (map (let ((#{r\ 2911}#
                                                    (map cons
                                                         #{formals\ 2896}#
                                                         #{actuals\ 2897}#)))
                                              (lambda (#{x\ 2912}#)
                                                (cdr (assq (cadr #{x\ 2912}#)
                                                           #{r\ 2911}#))))
                                            (cdr #{e\ 2890}#))))
                           (cons 'map
                                 (cons (list 'lambda
                                             #{formals\ 2896}#
                                             #{e\ 2890}#)
                                       #{actuals\ 2897}#)))))))
                 (#{gen-mappend\ 2833}#
                   (lambda (#{e\ 2916}# #{map-env\ 2917}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 2835}# #{e\ 2916}# #{map-env\ 2917}#))))
                 (#{gen-ref\ 2831}#
                   (lambda (#{src\ 2921}#
                            #{var\ 2922}#
                            #{level\ 2923}#
                            #{maps\ 2924}#)
                     (if (#{fx=\ 287}# #{level\ 2923}# 0)
                       (values #{var\ 2922}# #{maps\ 2924}#)
                       (if (null? #{maps\ 2924}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 2921}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 2831}#
                               #{src\ 2921}#
                               #{var\ 2922}#
                               (#{fx-\ 285}# #{level\ 2923}# 1)
                               (cdr #{maps\ 2924}#)))
                           (lambda (#{outer-var\ 2929}# #{outer-maps\ 2930}#)
                             (let ((#{b\ 2934}#
                                     (assq #{outer-var\ 2929}#
                                           (car #{maps\ 2924}#))))
                               (if #{b\ 2934}#
                                 (values (cdr #{b\ 2934}#) #{maps\ 2924}#)
                                 (let ((#{inner-var\ 2936}#
                                         (#{gen-var\ 495}# (quote tmp))))
                                   (values
                                     #{inner-var\ 2936}#
                                     (cons (cons (cons #{outer-var\ 2929}#
                                                       #{inner-var\ 2936}#)
                                                 (car #{maps\ 2924}#))
                                           #{outer-maps\ 2930}#)))))))))))
                 (#{gen-syntax\ 2829}#
                   (lambda (#{src\ 2937}#
                            #{e\ 2938}#
                            #{r\ 2939}#
                            #{maps\ 2940}#
                            #{ellipsis?\ 2941}#
                            #{mod\ 2942}#)
                     (if (#{id?\ 382}# #{e\ 2938}#)
                       (let ((#{label\ 2950}#
                               (#{id-var-name\ 439}#
                                 #{e\ 2938}#
                                 '(()))))
                         (let ((#{b\ 2953}#
                                 (#{lookup\ 376}#
                                   #{label\ 2950}#
                                   #{r\ 2939}#
                                   #{mod\ 2942}#)))
                           (if (eq? (#{binding-type\ 365}# #{b\ 2953}#)
                                    'syntax)
                             (call-with-values
                               (lambda ()
                                 (let ((#{var.lev\ 2955}#
                                         (#{binding-value\ 367}# #{b\ 2953}#)))
                                   (#{gen-ref\ 2831}#
                                     #{src\ 2937}#
                                     (car #{var.lev\ 2955}#)
                                     (cdr #{var.lev\ 2955}#)
                                     #{maps\ 2940}#)))
                               (lambda (#{var\ 2956}# #{maps\ 2957}#)
                                 (values
                                   (list (quote ref) #{var\ 2956}#)
                                   #{maps\ 2957}#)))
                             (if (#{ellipsis?\ 2941}# #{e\ 2938}#)
                               (syntax-violation
                                 'syntax
                                 "misplaced ellipsis"
                                 #{src\ 2937}#)
                               (values
                                 (list (quote quote) #{e\ 2938}#)
                                 #{maps\ 2940}#)))))
                       ((lambda (#{tmp\ 2962}#)
                          ((lambda (#{tmp\ 2963}#)
                             (if (if #{tmp\ 2963}#
                                   (apply (lambda (#{dots\ 2966}# #{e\ 2967}#)
                                            (#{ellipsis?\ 2941}#
                                              #{dots\ 2966}#))
                                          #{tmp\ 2963}#)
                                   #f)
                               (apply (lambda (#{dots\ 2970}# #{e\ 2971}#)
                                        (#{gen-syntax\ 2829}#
                                          #{src\ 2937}#
                                          #{e\ 2971}#
                                          #{r\ 2939}#
                                          #{maps\ 2940}#
                                          (lambda (#{x\ 2972}#) #f)
                                          #{mod\ 2942}#))
                                      #{tmp\ 2963}#)
                               ((lambda (#{tmp\ 2974}#)
                                  (if (if #{tmp\ 2974}#
                                        (apply (lambda (#{x\ 2978}#
                                                        #{dots\ 2979}#
                                                        #{y\ 2980}#)
                                                 (#{ellipsis?\ 2941}#
                                                   #{dots\ 2979}#))
                                               #{tmp\ 2974}#)
                                        #f)
                                    (apply (lambda (#{x\ 2984}#
                                                    #{dots\ 2985}#
                                                    #{y\ 2986}#)
                                             (letrec ((#{f\ 2990}#
                                                        (lambda (#{y\ 2991}#
                                                                 #{k\ 2992}#)
                                                          ((lambda (#{tmp\ 2999}#)
                                                             ((lambda (#{tmp\ 3000}#)
                                                                (if (if #{tmp\ 3000}#
                                                                      (apply (lambda (#{dots\ 3003}#
                                                                                      #{y\ 3004}#)
                                                                               (#{ellipsis?\ 2941}#
                                                                                 #{dots\ 3003}#))
                                                                             #{tmp\ 3000}#)
                                                                      #f)
                                                                  (apply (lambda (#{dots\ 3007}#
                                                                                  #{y\ 3008}#)
                                                                           (#{f\ 2990}#
                                                                             #{y\ 3008}#
                                                                             (lambda (#{maps\ 3009}#)
                                                                               (call-with-values
                                                                                 (lambda ()
                                                                                   (#{k\ 2992}#
                                                                                     (cons '()
                                                                                           #{maps\ 3009}#)))
                                                                                 (lambda (#{x\ 3011}#
                                                                                          #{maps\ 3012}#)
                                                                                   (if (null? (car #{maps\ 3012}#))
                                                                                     (syntax-violation
                                                                                       'syntax
                                                                                       "extra ellipsis"
                                                                                       #{src\ 2937}#)
                                                                                     (values
                                                                                       (#{gen-mappend\ 2833}#
                                                                                         #{x\ 3011}#
                                                                                         (car #{maps\ 3012}#))
                                                                                       (cdr #{maps\ 3012}#))))))))
                                                                         #{tmp\ 3000}#)
                                                                  ((lambda (#{_\ 3016}#)
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (#{gen-syntax\ 2829}#
                                                                           #{src\ 2937}#
                                                                           #{y\ 2991}#
                                                                           #{r\ 2939}#
                                                                           #{maps\ 2940}#
                                                                           #{ellipsis?\ 2941}#
                                                                           #{mod\ 2942}#))
                                                                       (lambda (#{y\ 3017}#
                                                                                #{maps\ 3018}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{k\ 2992}#
                                                                               #{maps\ 3018}#))
                                                                           (lambda (#{x\ 3021}#
                                                                                    #{maps\ 3022}#)
                                                                             (values
                                                                               (#{gen-append\ 2839}#
                                                                                 #{x\ 3021}#
                                                                                 #{y\ 3017}#)
                                                                               #{maps\ 3022}#))))))
                                                                   #{tmp\ 2999}#)))
                                                              ($sc-dispatch
                                                                #{tmp\ 2999}#
                                                                '(any . any))))
                                                           #{y\ 2991}#))))
                                               (#{f\ 2990}#
                                                 #{y\ 2986}#
                                                 (lambda (#{maps\ 2993}#)
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{gen-syntax\ 2829}#
                                                         #{src\ 2937}#
                                                         #{x\ 2984}#
                                                         #{r\ 2939}#
                                                         (cons '()
                                                               #{maps\ 2993}#)
                                                         #{ellipsis?\ 2941}#
                                                         #{mod\ 2942}#))
                                                     (lambda (#{x\ 2995}#
                                                              #{maps\ 2996}#)
                                                       (if (null? (car #{maps\ 2996}#))
                                                         (syntax-violation
                                                           'syntax
                                                           "extra ellipsis"
                                                           #{src\ 2937}#)
                                                         (values
                                                           (#{gen-map\ 2835}#
                                                             #{x\ 2995}#
                                                             (car #{maps\ 2996}#))
                                                           (cdr #{maps\ 2996}#)))))))))
                                           #{tmp\ 2974}#)
                                    ((lambda (#{tmp\ 3025}#)
                                       (if #{tmp\ 3025}#
                                         (apply (lambda (#{x\ 3028}#
                                                         #{y\ 3029}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{gen-syntax\ 2829}#
                                                        #{src\ 2937}#
                                                        #{x\ 3028}#
                                                        #{r\ 2939}#
                                                        #{maps\ 2940}#
                                                        #{ellipsis?\ 2941}#
                                                        #{mod\ 2942}#))
                                                    (lambda (#{x\ 3030}#
                                                             #{maps\ 3031}#)
                                                      (call-with-values
                                                        (lambda ()
                                                          (#{gen-syntax\ 2829}#
                                                            #{src\ 2937}#
                                                            #{y\ 3029}#
                                                            #{r\ 2939}#
                                                            #{maps\ 3031}#
                                                            #{ellipsis?\ 2941}#
                                                            #{mod\ 2942}#))
                                                        (lambda (#{y\ 3034}#
                                                                 #{maps\ 3035}#)
                                                          (values
                                                            (#{gen-cons\ 2837}#
                                                              #{x\ 3030}#
                                                              #{y\ 3034}#)
                                                            #{maps\ 3035}#))))))
                                                #{tmp\ 3025}#)
                                         ((lambda (#{tmp\ 3038}#)
                                            (if #{tmp\ 3038}#
                                              (apply (lambda (#{e1\ 3041}#
                                                              #{e2\ 3042}#)
                                                       (call-with-values
                                                         (lambda ()
                                                           (#{gen-syntax\ 2829}#
                                                             #{src\ 2937}#
                                                             (cons #{e1\ 3041}#
                                                                   #{e2\ 3042}#)
                                                             #{r\ 2939}#
                                                             #{maps\ 2940}#
                                                             #{ellipsis?\ 2941}#
                                                             #{mod\ 2942}#))
                                                         (lambda (#{e\ 3044}#
                                                                  #{maps\ 3045}#)
                                                           (values
                                                             (#{gen-vector\ 2841}#
                                                               #{e\ 3044}#)
                                                             #{maps\ 3045}#))))
                                                     #{tmp\ 3038}#)
                                              ((lambda (#{_\ 3049}#)
                                                 (values
                                                   (list 'quote
                                                         #{e\ 2938}#)
                                                   #{maps\ 2940}#))
                                               #{tmp\ 2962}#)))
                                          ($sc-dispatch
                                            #{tmp\ 2962}#
                                            '#(vector (any . each-any))))))
                                     ($sc-dispatch
                                       #{tmp\ 2962}#
                                       '(any . any)))))
                                ($sc-dispatch
                                  #{tmp\ 2962}#
                                  '(any any . any)))))
                           ($sc-dispatch #{tmp\ 2962}# (quote (any any)))))
                        #{e\ 2938}#)))))
          (lambda (#{e\ 3051}#
                   #{r\ 3052}#
                   #{w\ 3053}#
                   #{s\ 3054}#
                   #{mod\ 3055}#)
            (let ((#{e\ 3062}#
                    (#{source-wrap\ 453}#
                      #{e\ 3051}#
                      #{w\ 3053}#
                      #{s\ 3054}#
                      #{mod\ 3055}#)))
              ((lambda (#{tmp\ 3063}#)
                 ((lambda (#{tmp\ 3064}#)
                    (if #{tmp\ 3064}#
                      (apply (lambda (#{_\ 3067}# #{x\ 3068}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax\ 2829}#
                                     #{e\ 3062}#
                                     #{x\ 3068}#
                                     #{r\ 3052}#
                                     '()
                                     #{ellipsis?\ 483}#
                                     #{mod\ 3055}#))
                                 (lambda (#{e\ 3069}# #{maps\ 3070}#)
                                   (#{regen\ 2843}# #{e\ 3069}#))))
                             #{tmp\ 3064}#)
                      ((lambda (#{_\ 3074}#)
                         (syntax-violation
                           'syntax
                           "bad `syntax' form"
                           #{e\ 3062}#))
                       #{tmp\ 3063}#)))
                  ($sc-dispatch #{tmp\ 3063}# (quote (any any)))))
               #{e\ 3062}#)))))
      (#{global-extend\ 378}#
        'core
        'lambda
        (lambda (#{e\ 3075}#
                 #{r\ 3076}#
                 #{w\ 3077}#
                 #{s\ 3078}#
                 #{mod\ 3079}#)
          ((lambda (#{tmp\ 3085}#)
             ((lambda (#{tmp\ 3086}#)
                (if #{tmp\ 3086}#
                  (apply (lambda (#{_\ 3091}#
                                  #{args\ 3092}#
                                  #{e1\ 3093}#
                                  #{e2\ 3094}#)
                           (call-with-values
                             (lambda ()
                               (#{lambda-formals\ 485}# #{args\ 3092}#))
                             (lambda (#{req\ 3095}#
                                      #{opt\ 3096}#
                                      #{rest\ 3097}#
                                      #{kw\ 3098}#)
                               (letrec ((#{lp\ 3106}#
                                          (lambda (#{body\ 3107}#
                                                   #{meta\ 3108}#)
                                            ((lambda (#{tmp\ 3110}#)
                                               ((lambda (#{tmp\ 3111}#)
                                                  (if (if #{tmp\ 3111}#
                                                        (apply (lambda (#{docstring\ 3115}#
                                                                        #{e1\ 3116}#
                                                                        #{e2\ 3117}#)
                                                                 (string?
                                                                   (syntax->datum
                                                                     #{docstring\ 3115}#)))
                                                               #{tmp\ 3111}#)
                                                        #f)
                                                    (apply (lambda (#{docstring\ 3121}#
                                                                    #{e1\ 3122}#
                                                                    #{e2\ 3123}#)
                                                             (#{lp\ 3106}#
                                                               (cons #{e1\ 3122}#
                                                                     #{e2\ 3123}#)
                                                               (append
                                                                 #{meta\ 3108}#
                                                                 (list (cons 'documentation
                                                                             (syntax->datum
                                                                               #{docstring\ 3121}#))))))
                                                           #{tmp\ 3111}#)
                                                    ((lambda (#{tmp\ 3126}#)
                                                       (if #{tmp\ 3126}#
                                                         (apply (lambda (#{k\ 3131}#
                                                                         #{v\ 3132}#
                                                                         #{e1\ 3133}#
                                                                         #{e2\ 3134}#)
                                                                  (#{lp\ 3106}#
                                                                    (cons #{e1\ 3133}#
                                                                          #{e2\ 3134}#)
                                                                    (append
                                                                      #{meta\ 3108}#
                                                                      (syntax->datum
                                                                        (map cons
                                                                             #{k\ 3131}#
                                                                             #{v\ 3132}#)))))
                                                                #{tmp\ 3126}#)
                                                         ((lambda (#{_\ 3139}#)
                                                            (#{chi-simple-lambda\ 487}#
                                                              #{e\ 3075}#
                                                              #{r\ 3076}#
                                                              #{w\ 3077}#
                                                              #{s\ 3078}#
                                                              #{mod\ 3079}#
                                                              #{req\ 3095}#
                                                              #{rest\ 3097}#
                                                              #{meta\ 3108}#
                                                              #{body\ 3107}#))
                                                          #{tmp\ 3110}#)))
                                                     ($sc-dispatch
                                                       #{tmp\ 3110}#
                                                       '(#(vector
                                                           #(each (any . any)))
                                                         any
                                                         .
                                                         each-any)))))
                                                ($sc-dispatch
                                                  #{tmp\ 3110}#
                                                  '(any any . each-any))))
                                             #{body\ 3107}#))))
                                 (#{lp\ 3106}#
                                   (cons #{e1\ 3093}# #{e2\ 3094}#)
                                   '())))))
                         #{tmp\ 3086}#)
                  ((lambda (#{_\ 3141}#)
                     (syntax-violation
                       'lambda
                       "bad lambda"
                       #{e\ 3075}#))
                   #{tmp\ 3085}#)))
              ($sc-dispatch
                #{tmp\ 3085}#
                '(any any any . each-any))))
           #{e\ 3075}#)))
      (#{global-extend\ 378}#
        'core
        'lambda*
        (lambda (#{e\ 3142}#
                 #{r\ 3143}#
                 #{w\ 3144}#
                 #{s\ 3145}#
                 #{mod\ 3146}#)
          ((lambda (#{tmp\ 3152}#)
             ((lambda (#{tmp\ 3153}#)
                (if #{tmp\ 3153}#
                  (apply (lambda (#{_\ 3158}#
                                  #{args\ 3159}#
                                  #{e1\ 3160}#
                                  #{e2\ 3161}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 491}#
                                 #{e\ 3142}#
                                 #{r\ 3143}#
                                 #{w\ 3144}#
                                 #{s\ 3145}#
                                 #{mod\ 3146}#
                                 #{lambda*-formals\ 489}#
                                 (list (cons #{args\ 3159}#
                                             (cons #{e1\ 3160}#
                                                   #{e2\ 3161}#)))))
                             (lambda (#{meta\ 3163}# #{lcase\ 3164}#)
                               (#{build-case-lambda\ 326}#
                                 #{s\ 3145}#
                                 #{meta\ 3163}#
                                 #{lcase\ 3164}#))))
                         #{tmp\ 3153}#)
                  ((lambda (#{_\ 3168}#)
                     (syntax-violation
                       'lambda
                       "bad lambda*"
                       #{e\ 3142}#))
                   #{tmp\ 3152}#)))
              ($sc-dispatch
                #{tmp\ 3152}#
                '(any any any . each-any))))
           #{e\ 3142}#)))
      (#{global-extend\ 378}#
        'core
        'case-lambda
        (lambda (#{e\ 3169}#
                 #{r\ 3170}#
                 #{w\ 3171}#
                 #{s\ 3172}#
                 #{mod\ 3173}#)
          ((lambda (#{tmp\ 3179}#)
             ((lambda (#{tmp\ 3180}#)
                (if #{tmp\ 3180}#
                  (apply (lambda (#{_\ 3188}#
                                  #{args\ 3189}#
                                  #{e1\ 3190}#
                                  #{e2\ 3191}#
                                  #{args*\ 3192}#
                                  #{e1*\ 3193}#
                                  #{e2*\ 3194}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 491}#
                                 #{e\ 3169}#
                                 #{r\ 3170}#
                                 #{w\ 3171}#
                                 #{s\ 3172}#
                                 #{mod\ 3173}#
                                 #{lambda-formals\ 485}#
                                 (cons (cons #{args\ 3189}#
                                             (cons #{e1\ 3190}# #{e2\ 3191}#))
                                       (map (lambda (#{tmp\ 3198}#
                                                     #{tmp\ 3197}#
                                                     #{tmp\ 3196}#)
                                              (cons #{tmp\ 3196}#
                                                    (cons #{tmp\ 3197}#
                                                          #{tmp\ 3198}#)))
                                            #{e2*\ 3194}#
                                            #{e1*\ 3193}#
                                            #{args*\ 3192}#))))
                             (lambda (#{meta\ 3200}# #{lcase\ 3201}#)
                               (#{build-case-lambda\ 326}#
                                 #{s\ 3172}#
                                 #{meta\ 3200}#
                                 #{lcase\ 3201}#))))
                         #{tmp\ 3180}#)
                  ((lambda (#{_\ 3205}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda"
                       #{e\ 3169}#))
                   #{tmp\ 3179}#)))
              ($sc-dispatch
                #{tmp\ 3179}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3169}#)))
      (#{global-extend\ 378}#
        'core
        'case-lambda*
        (lambda (#{e\ 3206}#
                 #{r\ 3207}#
                 #{w\ 3208}#
                 #{s\ 3209}#
                 #{mod\ 3210}#)
          ((lambda (#{tmp\ 3216}#)
             ((lambda (#{tmp\ 3217}#)
                (if #{tmp\ 3217}#
                  (apply (lambda (#{_\ 3225}#
                                  #{args\ 3226}#
                                  #{e1\ 3227}#
                                  #{e2\ 3228}#
                                  #{args*\ 3229}#
                                  #{e1*\ 3230}#
                                  #{e2*\ 3231}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 491}#
                                 #{e\ 3206}#
                                 #{r\ 3207}#
                                 #{w\ 3208}#
                                 #{s\ 3209}#
                                 #{mod\ 3210}#
                                 #{lambda*-formals\ 489}#
                                 (cons (cons #{args\ 3226}#
                                             (cons #{e1\ 3227}# #{e2\ 3228}#))
                                       (map (lambda (#{tmp\ 3235}#
                                                     #{tmp\ 3234}#
                                                     #{tmp\ 3233}#)
                                              (cons #{tmp\ 3233}#
                                                    (cons #{tmp\ 3234}#
                                                          #{tmp\ 3235}#)))
                                            #{e2*\ 3231}#
                                            #{e1*\ 3230}#
                                            #{args*\ 3229}#))))
                             (lambda (#{meta\ 3237}# #{lcase\ 3238}#)
                               (#{build-case-lambda\ 326}#
                                 #{s\ 3209}#
                                 #{meta\ 3237}#
                                 #{lcase\ 3238}#))))
                         #{tmp\ 3217}#)
                  ((lambda (#{_\ 3242}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda*"
                       #{e\ 3206}#))
                   #{tmp\ 3216}#)))
              ($sc-dispatch
                #{tmp\ 3216}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3206}#)))
      (#{global-extend\ 378}#
        'core
        'let
        (letrec ((#{chi-let\ 3244}#
                   (lambda (#{e\ 3245}#
                            #{r\ 3246}#
                            #{w\ 3247}#
                            #{s\ 3248}#
                            #{mod\ 3249}#
                            #{constructor\ 3250}#
                            #{ids\ 3251}#
                            #{vals\ 3252}#
                            #{exps\ 3253}#)
                     (if (not (#{valid-bound-ids?\ 445}# #{ids\ 3251}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 3245}#)
                       (let ((#{labels\ 3265}#
                               (#{gen-labels\ 400}# #{ids\ 3251}#))
                             (#{new-vars\ 3266}#
                               (map #{gen-var\ 495}# #{ids\ 3251}#)))
                         (let ((#{nw\ 3269}#
                                 (#{make-binding-wrap\ 429}#
                                   #{ids\ 3251}#
                                   #{labels\ 3265}#
                                   #{w\ 3247}#))
                               (#{nr\ 3270}#
                                 (#{extend-var-env\ 372}#
                                   #{labels\ 3265}#
                                   #{new-vars\ 3266}#
                                   #{r\ 3246}#)))
                           (#{constructor\ 3250}#
                             #{s\ 3248}#
                             (map syntax->datum #{ids\ 3251}#)
                             #{new-vars\ 3266}#
                             (map (lambda (#{x\ 3271}#)
                                    (#{chi\ 467}#
                                      #{x\ 3271}#
                                      #{r\ 3246}#
                                      #{w\ 3247}#
                                      #{mod\ 3249}#))
                                  #{vals\ 3252}#)
                             (#{chi-body\ 475}#
                               #{exps\ 3253}#
                               (#{source-wrap\ 453}#
                                 #{e\ 3245}#
                                 #{nw\ 3269}#
                                 #{s\ 3248}#
                                 #{mod\ 3249}#)
                               #{nr\ 3270}#
                               #{nw\ 3269}#
                               #{mod\ 3249}#))))))))
          (lambda (#{e\ 3273}#
                   #{r\ 3274}#
                   #{w\ 3275}#
                   #{s\ 3276}#
                   #{mod\ 3277}#)
            ((lambda (#{tmp\ 3283}#)
               ((lambda (#{tmp\ 3284}#)
                  (if (if #{tmp\ 3284}#
                        (apply (lambda (#{_\ 3290}#
                                        #{id\ 3291}#
                                        #{val\ 3292}#
                                        #{e1\ 3293}#
                                        #{e2\ 3294}#)
                                 (and-map #{id?\ 382}# #{id\ 3291}#))
                               #{tmp\ 3284}#)
                        #f)
                    (apply (lambda (#{_\ 3301}#
                                    #{id\ 3302}#
                                    #{val\ 3303}#
                                    #{e1\ 3304}#
                                    #{e2\ 3305}#)
                             (#{chi-let\ 3244}#
                               #{e\ 3273}#
                               #{r\ 3274}#
                               #{w\ 3275}#
                               #{s\ 3276}#
                               #{mod\ 3277}#
                               #{build-let\ 336}#
                               #{id\ 3302}#
                               #{val\ 3303}#
                               (cons #{e1\ 3304}# #{e2\ 3305}#)))
                           #{tmp\ 3284}#)
                    ((lambda (#{tmp\ 3309}#)
                       (if (if #{tmp\ 3309}#
                             (apply (lambda (#{_\ 3316}#
                                             #{f\ 3317}#
                                             #{id\ 3318}#
                                             #{val\ 3319}#
                                             #{e1\ 3320}#
                                             #{e2\ 3321}#)
                                      (if (#{id?\ 382}# #{f\ 3317}#)
                                        (and-map #{id?\ 382}# #{id\ 3318}#)
                                        #f))
                                    #{tmp\ 3309}#)
                             #f)
                         (apply (lambda (#{_\ 3331}#
                                         #{f\ 3332}#
                                         #{id\ 3333}#
                                         #{val\ 3334}#
                                         #{e1\ 3335}#
                                         #{e2\ 3336}#)
                                  (#{chi-let\ 3244}#
                                    #{e\ 3273}#
                                    #{r\ 3274}#
                                    #{w\ 3275}#
                                    #{s\ 3276}#
                                    #{mod\ 3277}#
                                    #{build-named-let\ 338}#
                                    (cons #{f\ 3332}# #{id\ 3333}#)
                                    #{val\ 3334}#
                                    (cons #{e1\ 3335}# #{e2\ 3336}#)))
                                #{tmp\ 3309}#)
                         ((lambda (#{_\ 3341}#)
                            (syntax-violation
                              'let
                              "bad let"
                              (#{source-wrap\ 453}#
                                #{e\ 3273}#
                                #{w\ 3275}#
                                #{s\ 3276}#
                                #{mod\ 3277}#)))
                          #{tmp\ 3283}#)))
                     ($sc-dispatch
                       #{tmp\ 3283}#
                       '(any any #(each (any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 3283}#
                  '(any #(each (any any)) any . each-any))))
             #{e\ 3273}#))))
      (#{global-extend\ 378}#
        'core
        'letrec
        (lambda (#{e\ 3342}#
                 #{r\ 3343}#
                 #{w\ 3344}#
                 #{s\ 3345}#
                 #{mod\ 3346}#)
          ((lambda (#{tmp\ 3352}#)
             ((lambda (#{tmp\ 3353}#)
                (if (if #{tmp\ 3353}#
                      (apply (lambda (#{_\ 3359}#
                                      #{id\ 3360}#
                                      #{val\ 3361}#
                                      #{e1\ 3362}#
                                      #{e2\ 3363}#)
                               (and-map #{id?\ 382}# #{id\ 3360}#))
                             #{tmp\ 3353}#)
                      #f)
                  (apply (lambda (#{_\ 3370}#
                                  #{id\ 3371}#
                                  #{val\ 3372}#
                                  #{e1\ 3373}#
                                  #{e2\ 3374}#)
                           (let ((#{ids\ 3376}# #{id\ 3371}#))
                             (if (not (#{valid-bound-ids?\ 445}#
                                        #{ids\ 3376}#))
                               (syntax-violation
                                 'letrec
                                 "duplicate bound variable"
                                 #{e\ 3342}#)
                               (let ((#{labels\ 3380}#
                                       (#{gen-labels\ 400}# #{ids\ 3376}#))
                                     (#{new-vars\ 3381}#
                                       (map #{gen-var\ 495}# #{ids\ 3376}#)))
                                 (let ((#{w\ 3384}#
                                         (#{make-binding-wrap\ 429}#
                                           #{ids\ 3376}#
                                           #{labels\ 3380}#
                                           #{w\ 3344}#))
                                       (#{r\ 3385}#
                                         (#{extend-var-env\ 372}#
                                           #{labels\ 3380}#
                                           #{new-vars\ 3381}#
                                           #{r\ 3343}#)))
                                   (#{build-letrec\ 340}#
                                     #{s\ 3345}#
                                     (map syntax->datum #{ids\ 3376}#)
                                     #{new-vars\ 3381}#
                                     (map (lambda (#{x\ 3386}#)
                                            (#{chi\ 467}#
                                              #{x\ 3386}#
                                              #{r\ 3385}#
                                              #{w\ 3384}#
                                              #{mod\ 3346}#))
                                          #{val\ 3372}#)
                                     (#{chi-body\ 475}#
                                       (cons #{e1\ 3373}# #{e2\ 3374}#)
                                       (#{source-wrap\ 453}#
                                         #{e\ 3342}#
                                         #{w\ 3384}#
                                         #{s\ 3345}#
                                         #{mod\ 3346}#)
                                       #{r\ 3385}#
                                       #{w\ 3384}#
                                       #{mod\ 3346}#)))))))
                         #{tmp\ 3353}#)
                  ((lambda (#{_\ 3391}#)
                     (syntax-violation
                       'letrec
                       "bad letrec"
                       (#{source-wrap\ 453}#
                         #{e\ 3342}#
                         #{w\ 3344}#
                         #{s\ 3345}#
                         #{mod\ 3346}#)))
                   #{tmp\ 3352}#)))
              ($sc-dispatch
                #{tmp\ 3352}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3342}#)))
      (#{global-extend\ 378}#
        'core
        'set!
        (lambda (#{e\ 3392}#
                 #{r\ 3393}#
                 #{w\ 3394}#
                 #{s\ 3395}#
                 #{mod\ 3396}#)
          ((lambda (#{tmp\ 3402}#)
             ((lambda (#{tmp\ 3403}#)
                (if (if #{tmp\ 3403}#
                      (apply (lambda (#{_\ 3407}# #{id\ 3408}# #{val\ 3409}#)
                               (#{id?\ 382}# #{id\ 3408}#))
                             #{tmp\ 3403}#)
                      #f)
                  (apply (lambda (#{_\ 3413}# #{id\ 3414}# #{val\ 3415}#)
                           (let ((#{val\ 3418}#
                                   (#{chi\ 467}#
                                     #{val\ 3415}#
                                     #{r\ 3393}#
                                     #{w\ 3394}#
                                     #{mod\ 3396}#))
                                 (#{n\ 3419}#
                                   (#{id-var-name\ 439}#
                                     #{id\ 3414}#
                                     #{w\ 3394}#)))
                             (let ((#{b\ 3421}#
                                     (#{lookup\ 376}#
                                       #{n\ 3419}#
                                       #{r\ 3393}#
                                       #{mod\ 3396}#)))
                               (let ((#{atom-key\ 3424}#
                                       (#{binding-type\ 365}# #{b\ 3421}#)))
                                 (if (memv #{atom-key\ 3424}#
                                           '(lexical))
                                   (#{build-lexical-assignment\ 312}#
                                     #{s\ 3395}#
                                     (syntax->datum #{id\ 3414}#)
                                     (#{binding-value\ 367}# #{b\ 3421}#)
                                     #{val\ 3418}#)
                                   (if (memv #{atom-key\ 3424}#
                                             '(global))
                                     (#{build-global-assignment\ 318}#
                                       #{s\ 3395}#
                                       #{n\ 3419}#
                                       #{val\ 3418}#
                                       #{mod\ 3396}#)
                                     (if (memv #{atom-key\ 3424}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'set!
                                         "identifier out of context"
                                         (#{wrap\ 451}#
                                           #{id\ 3414}#
                                           #{w\ 3394}#
                                           #{mod\ 3396}#))
                                       (syntax-violation
                                         'set!
                                         "bad set!"
                                         (#{source-wrap\ 453}#
                                           #{e\ 3392}#
                                           #{w\ 3394}#
                                           #{s\ 3395}#
                                           #{mod\ 3396}#)))))))))
                         #{tmp\ 3403}#)
                  ((lambda (#{tmp\ 3429}#)
                     (if #{tmp\ 3429}#
                       (apply (lambda (#{_\ 3434}#
                                       #{head\ 3435}#
                                       #{tail\ 3436}#
                                       #{val\ 3437}#)
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type\ 463}#
                                      #{head\ 3435}#
                                      #{r\ 3393}#
                                      '(())
                                      #f
                                      #f
                                      #{mod\ 3396}#
                                      #t))
                                  (lambda (#{type\ 3440}#
                                           #{value\ 3441}#
                                           #{ee\ 3442}#
                                           #{ww\ 3443}#
                                           #{ss\ 3444}#
                                           #{modmod\ 3445}#)
                                    (if (memv #{type\ 3440}#
                                              '(module-ref))
                                      (let ((#{val\ 3454}#
                                              (#{chi\ 467}#
                                                #{val\ 3437}#
                                                #{r\ 3393}#
                                                #{w\ 3394}#
                                                #{mod\ 3396}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 3441}#
                                              (cons #{head\ 3435}#
                                                    #{tail\ 3436}#)
                                              #{r\ 3393}#
                                              #{w\ 3394}#))
                                          (lambda (#{e\ 3456}#
                                                   #{r\ 3457}#
                                                   #{w\ 3458}#
                                                   #{s*\ 3459}#
                                                   #{mod\ 3460}#)
                                            ((lambda (#{tmp\ 3466}#)
                                               ((lambda (#{tmp\ 3467}#)
                                                  (if (if #{tmp\ 3467}#
                                                        (apply (lambda (#{e\ 3469}#)
                                                                 (#{id?\ 382}#
                                                                   #{e\ 3469}#))
                                                               #{tmp\ 3467}#)
                                                        #f)
                                                    (apply (lambda (#{e\ 3471}#)
                                                             (#{build-global-assignment\ 318}#
                                                               #{s\ 3395}#
                                                               (syntax->datum
                                                                 #{e\ 3471}#)
                                                               #{val\ 3454}#
                                                               #{mod\ 3460}#))
                                                           #{tmp\ 3467}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 3466}#)))
                                                (list #{tmp\ 3466}#)))
                                             #{e\ 3456}#))))
                                      (#{build-application\ 304}#
                                        #{s\ 3395}#
                                        (#{chi\ 467}#
                                          (list '#(syntax-object
                                                   setter
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(type
                                                        value
                                                        ee
                                                        ww
                                                        ss
                                                        modmod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3446"
                                                        "i3447"
                                                        "i3448"
                                                        "i3449"
                                                        "i3450"
                                                        "i3451"))
                                                    #(ribcage
                                                      #(_ head tail val)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3430"
                                                        "i3431"
                                                        "i3432"
                                                        "i3433"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e r w s mod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3397"
                                                        "i3398"
                                                        "i3399"
                                                        "i3400"
                                                        "i3401"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i496"
                                                       "i494"
                                                       "i492"
                                                       "i490"
                                                       "i488"
                                                       "i486"
                                                       "i484"
                                                       "i482"
                                                       "i480"
                                                       "i478"
                                                       "i476"
                                                       "i474"
                                                       "i472"
                                                       "i470"
                                                       "i468"
                                                       "i466"
                                                       "i464"
                                                       "i462"
                                                       "i460"
                                                       "i458"
                                                       "i456"
                                                       "i454"
                                                       "i452"
                                                       "i450"
                                                       "i448"
                                                       "i446"
                                                       "i444"
                                                       "i442"
                                                       "i440"
                                                       "i438"
                                                       "i436"
                                                       "i434"
                                                       "i432"
                                                       "i430"
                                                       "i428"
                                                       "i426"
                                                       "i425"
                                                       "i424"
                                                       "i422"
                                                       "i421"
                                                       "i420"
                                                       "i419"
                                                       "i418"
                                                       "i416"
                                                       "i414"
                                                       "i412"
                                                       "i410"
                                                       "i408"
                                                       "i406"
                                                       "i404"
                                                       "i402"
                                                       "i399"
                                                       "i397"
                                                       "i396"
                                                       "i395"
                                                       "i394"
                                                       "i393"
                                                       "i392"
                                                       "i390"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i383"
                                                       "i381"
                                                       "i379"
                                                       "i377"
                                                       "i375"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i368"
                                                       "i366"
                                                       "i364"
                                                       "i363"
                                                       "i362"
                                                       "i360"
                                                       "i359"
                                                       "i357"
                                                       "i355"
                                                       "i353"
                                                       "i351"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i329"
                                                       "i327"
                                                       "i325"
                                                       "i323"
                                                       "i321"
                                                       "i319"
                                                       "i317"
                                                       "i315"
                                                       "i313"
                                                       "i311"
                                                       "i309"
                                                       "i307"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i294"
                                                       "i292"
                                                       "i290"
                                                       "i288"
                                                       "i286"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i278"
                                                       "i276"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i33"
                                                       "i32"
                                                       "i31"
                                                       "i29")))
                                                   (hygiene guile))
                                                #{head\ 3435}#)
                                          #{r\ 3393}#
                                          #{w\ 3394}#
                                          #{mod\ 3396}#)
                                        (map (lambda (#{e\ 3473}#)
                                               (#{chi\ 467}#
                                                 #{e\ 3473}#
                                                 #{r\ 3393}#
                                                 #{w\ 3394}#
                                                 #{mod\ 3396}#))
                                             (append
                                               #{tail\ 3436}#
                                               (list #{val\ 3437}#))))))))
                              #{tmp\ 3429}#)
                       ((lambda (#{_\ 3477}#)
                          (syntax-violation
                            'set!
                            "bad set!"
                            (#{source-wrap\ 453}#
                              #{e\ 3392}#
                              #{w\ 3394}#
                              #{s\ 3395}#
                              #{mod\ 3396}#)))
                        #{tmp\ 3402}#)))
                   ($sc-dispatch
                     #{tmp\ 3402}#
                     '(any (any . each-any) any)))))
              ($sc-dispatch
                #{tmp\ 3402}#
                '(any any any))))
           #{e\ 3392}#)))
      (#{global-extend\ 378}#
        'module-ref
        '@
        (lambda (#{e\ 3478}# #{r\ 3479}# #{w\ 3480}#)
          ((lambda (#{tmp\ 3484}#)
             ((lambda (#{tmp\ 3485}#)
                (if (if #{tmp\ 3485}#
                      (apply (lambda (#{_\ 3489}# #{mod\ 3490}# #{id\ 3491}#)
                               (if (and-map #{id?\ 382}# #{mod\ 3490}#)
                                 (#{id?\ 382}# #{id\ 3491}#)
                                 #f))
                             #{tmp\ 3485}#)
                      #f)
                  (apply (lambda (#{_\ 3498}# #{mod\ 3499}# #{id\ 3500}#)
                           (values
                             (syntax->datum #{id\ 3500}#)
                             #{r\ 3479}#
                             #{w\ 3480}#
                             #f
                             (syntax->datum
                               (cons '#(syntax-object
                                        public
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i3495" "i3496" "i3497"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(e r w)
                                           #((top) (top) (top))
                                           #("i3481" "i3482" "i3483"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             set-lambda-meta!
                                             lambda-meta
                                             lambda?
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i496"
                                            "i494"
                                            "i492"
                                            "i490"
                                            "i488"
                                            "i486"
                                            "i484"
                                            "i482"
                                            "i480"
                                            "i478"
                                            "i476"
                                            "i474"
                                            "i472"
                                            "i470"
                                            "i468"
                                            "i466"
                                            "i464"
                                            "i462"
                                            "i460"
                                            "i458"
                                            "i456"
                                            "i454"
                                            "i452"
                                            "i450"
                                            "i448"
                                            "i446"
                                            "i444"
                                            "i442"
                                            "i440"
                                            "i438"
                                            "i436"
                                            "i434"
                                            "i432"
                                            "i430"
                                            "i428"
                                            "i426"
                                            "i425"
                                            "i424"
                                            "i422"
                                            "i421"
                                            "i420"
                                            "i419"
                                            "i418"
                                            "i416"
                                            "i414"
                                            "i412"
                                            "i410"
                                            "i408"
                                            "i406"
                                            "i404"
                                            "i402"
                                            "i399"
                                            "i397"
                                            "i396"
                                            "i395"
                                            "i394"
                                            "i393"
                                            "i392"
                                            "i390"
                                            "i388"
                                            "i386"
                                            "i384"
                                            "i383"
                                            "i381"
                                            "i379"
                                            "i377"
                                            "i375"
                                            "i373"
                                            "i371"
                                            "i369"
                                            "i368"
                                            "i366"
                                            "i364"
                                            "i363"
                                            "i362"
                                            "i360"
                                            "i359"
                                            "i357"
                                            "i355"
                                            "i353"
                                            "i351"
                                            "i349"
                                            "i347"
                                            "i345"
                                            "i343"
                                            "i341"
                                            "i339"
                                            "i337"
                                            "i335"
                                            "i333"
                                            "i331"
                                            "i329"
                                            "i327"
                                            "i325"
                                            "i323"
                                            "i321"
                                            "i319"
                                            "i317"
                                            "i315"
                                            "i313"
                                            "i311"
                                            "i309"
                                            "i307"
                                            "i305"
                                            "i303"
                                            "i301"
                                            "i299"
                                            "i297"
                                            "i295"
                                            "i294"
                                            "i292"
                                            "i290"
                                            "i288"
                                            "i286"
                                            "i284"
                                            "i282"
                                            "i280"
                                            "i278"
                                            "i276"
                                            "i273"
                                            "i271"
                                            "i269"
                                            "i267"
                                            "i265"
                                            "i263"
                                            "i261"
                                            "i259"
                                            "i257"
                                            "i255"
                                            "i253"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i245"
                                            "i243"
                                            "i241"
                                            "i239"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-accessors
                                             define-expansion-constructors
                                             and-map*)
                                           ((top) (top) (top) (top))
                                           ("i33" "i32" "i31" "i29")))
                                        (hygiene guile))
                                     #{mod\ 3499}#))))
                         #{tmp\ 3485}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3484}#)))
              ($sc-dispatch
                #{tmp\ 3484}#
                '(any each-any any))))
           #{e\ 3478}#)))
      (#{global-extend\ 378}#
        'module-ref
        '@@
        (lambda (#{e\ 3502}# #{r\ 3503}# #{w\ 3504}#)
          (letrec ((#{remodulate\ 3509}#
                     (lambda (#{x\ 3510}# #{mod\ 3511}#)
                       (if (pair? #{x\ 3510}#)
                         (cons (#{remodulate\ 3509}#
                                 (car #{x\ 3510}#)
                                 #{mod\ 3511}#)
                               (#{remodulate\ 3509}#
                                 (cdr #{x\ 3510}#)
                                 #{mod\ 3511}#))
                         (if (#{syntax-object?\ 346}# #{x\ 3510}#)
                           (#{make-syntax-object\ 344}#
                             (#{remodulate\ 3509}#
                               (#{syntax-object-expression\ 348}# #{x\ 3510}#)
                               #{mod\ 3511}#)
                             (#{syntax-object-wrap\ 350}# #{x\ 3510}#)
                             #{mod\ 3511}#)
                           (if (vector? #{x\ 3510}#)
                             (let ((#{n\ 3522}# (vector-length #{x\ 3510}#)))
                               (let ((#{v\ 3524}# (make-vector #{n\ 3522}#)))
                                 (letrec ((#{loop\ 3527}#
                                            (lambda (#{i\ 3528}#)
                                              (if (#{fx=\ 287}#
                                                    #{i\ 3528}#
                                                    #{n\ 3522}#)
                                                (begin (if #f #f) #{v\ 3524}#)
                                                (begin
                                                  (vector-set!
                                                    #{v\ 3524}#
                                                    #{i\ 3528}#
                                                    (#{remodulate\ 3509}#
                                                      (vector-ref
                                                        #{x\ 3510}#
                                                        #{i\ 3528}#)
                                                      #{mod\ 3511}#))
                                                  (#{loop\ 3527}#
                                                    (#{fx+\ 283}#
                                                      #{i\ 3528}#
                                                      1)))))))
                                   (#{loop\ 3527}# 0))))
                             #{x\ 3510}#))))))
            ((lambda (#{tmp\ 3532}#)
               ((lambda (#{tmp\ 3533}#)
                  (if (if #{tmp\ 3533}#
                        (apply (lambda (#{_\ 3537}#
                                        #{mod\ 3538}#
                                        #{exp\ 3539}#)
                                 (and-map #{id?\ 382}# #{mod\ 3538}#))
                               #{tmp\ 3533}#)
                        #f)
                    (apply (lambda (#{_\ 3544}# #{mod\ 3545}# #{exp\ 3546}#)
                             (let ((#{mod\ 3548}#
                                     (syntax->datum
                                       (cons '#(syntax-object
                                                private
                                                ((top)
                                                 #(ribcage
                                                   #(_ mod exp)
                                                   #((top) (top) (top))
                                                   #("i3541" "i3542" "i3543"))
                                                 #(ribcage
                                                   (remodulate)
                                                   ((top))
                                                   ("i3508"))
                                                 #(ribcage
                                                   #(e r w)
                                                   #((top) (top) (top))
                                                   #("i3505" "i3506" "i3507"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     chi-lambda-case
                                                     lambda*-formals
                                                     chi-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     chi-void
                                                     eval-local-transformer
                                                     chi-local-syntax
                                                     chi-body
                                                     chi-macro
                                                     chi-application
                                                     chi-expr
                                                     chi
                                                     chi-top
                                                     syntax-type
                                                     chi-when-list
                                                     chi-install-global
                                                     chi-top-sequence
                                                     chi-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     maybe-name-value!
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i496"
                                                    "i494"
                                                    "i492"
                                                    "i490"
                                                    "i488"
                                                    "i486"
                                                    "i484"
                                                    "i482"
                                                    "i480"
                                                    "i478"
                                                    "i476"
                                                    "i474"
                                                    "i472"
                                                    "i470"
                                                    "i468"
                                                    "i466"
                                                    "i464"
                                                    "i462"
                                                    "i460"
                                                    "i458"
                                                    "i456"
                                                    "i454"
                                                    "i452"
                                                    "i450"
                                                    "i448"
                                                    "i446"
                                                    "i444"
                                                    "i442"
                                                    "i440"
                                                    "i438"
                                                    "i436"
                                                    "i434"
                                                    "i432"
                                                    "i430"
                                                    "i428"
                                                    "i426"
                                                    "i425"
                                                    "i424"
                                                    "i422"
                                                    "i421"
                                                    "i420"
                                                    "i419"
                                                    "i418"
                                                    "i416"
                                                    "i414"
                                                    "i412"
                                                    "i410"
                                                    "i408"
                                                    "i406"
                                                    "i404"
                                                    "i402"
                                                    "i399"
                                                    "i397"
                                                    "i396"
                                                    "i395"
                                                    "i394"
                                                    "i393"
                                                    "i392"
                                                    "i390"
                                                    "i388"
                                                    "i386"
                                                    "i384"
                                                    "i383"
                                                    "i381"
                                                    "i379"
                                                    "i377"
                                                    "i375"
                                                    "i373"
                                                    "i371"
                                                    "i369"
                                                    "i368"
                                                    "i366"
                                                    "i364"
                                                    "i363"
                                                    "i362"
                                                    "i360"
                                                    "i359"
                                                    "i357"
                                                    "i355"
                                                    "i353"
                                                    "i351"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i329"
                                                    "i327"
                                                    "i325"
                                                    "i323"
                                                    "i321"
                                                    "i319"
                                                    "i317"
                                                    "i315"
                                                    "i313"
                                                    "i311"
                                                    "i309"
                                                    "i307"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i294"
                                                    "i292"
                                                    "i290"
                                                    "i288"
                                                    "i286"
                                                    "i284"
                                                    "i282"
                                                    "i280"
                                                    "i278"
                                                    "i276"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i259"
                                                    "i257"
                                                    "i255"
                                                    "i253"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i243"
                                                    "i241"
                                                    "i239"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors
                                                     and-map*)
                                                   ((top) (top) (top) (top))
                                                   ("i33" "i32" "i31" "i29")))
                                                (hygiene guile))
                                             #{mod\ 3545}#))))
                               (values
                                 (#{remodulate\ 3509}#
                                   #{exp\ 3546}#
                                   #{mod\ 3548}#)
                                 #{r\ 3503}#
                                 #{w\ 3504}#
                                 (#{source-annotation\ 361}# #{exp\ 3546}#)
                                 #{mod\ 3548}#)))
                           #{tmp\ 3533}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 3532}#)))
                ($sc-dispatch
                  #{tmp\ 3532}#
                  '(any each-any any))))
             #{e\ 3502}#))))
      (#{global-extend\ 378}#
        'core
        'if
        (lambda (#{e\ 3550}#
                 #{r\ 3551}#
                 #{w\ 3552}#
                 #{s\ 3553}#
                 #{mod\ 3554}#)
          ((lambda (#{tmp\ 3560}#)
             ((lambda (#{tmp\ 3561}#)
                (if #{tmp\ 3561}#
                  (apply (lambda (#{_\ 3565}# #{test\ 3566}# #{then\ 3567}#)
                           (#{build-conditional\ 306}#
                             #{s\ 3553}#
                             (#{chi\ 467}#
                               #{test\ 3566}#
                               #{r\ 3551}#
                               #{w\ 3552}#
                               #{mod\ 3554}#)
                             (#{chi\ 467}#
                               #{then\ 3567}#
                               #{r\ 3551}#
                               #{w\ 3552}#
                               #{mod\ 3554}#)
                             (#{build-void\ 302}# #f)))
                         #{tmp\ 3561}#)
                  ((lambda (#{tmp\ 3569}#)
                     (if #{tmp\ 3569}#
                       (apply (lambda (#{_\ 3574}#
                                       #{test\ 3575}#
                                       #{then\ 3576}#
                                       #{else\ 3577}#)
                                (#{build-conditional\ 306}#
                                  #{s\ 3553}#
                                  (#{chi\ 467}#
                                    #{test\ 3575}#
                                    #{r\ 3551}#
                                    #{w\ 3552}#
                                    #{mod\ 3554}#)
                                  (#{chi\ 467}#
                                    #{then\ 3576}#
                                    #{r\ 3551}#
                                    #{w\ 3552}#
                                    #{mod\ 3554}#)
                                  (#{chi\ 467}#
                                    #{else\ 3577}#
                                    #{r\ 3551}#
                                    #{w\ 3552}#
                                    #{mod\ 3554}#)))
                              #{tmp\ 3569}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 3560}#)))
                   ($sc-dispatch
                     #{tmp\ 3560}#
                     '(any any any any)))))
              ($sc-dispatch
                #{tmp\ 3560}#
                '(any any any))))
           #{e\ 3550}#)))
      (#{global-extend\ 378}#
        'core
        'with-fluids
        (lambda (#{e\ 3578}#
                 #{r\ 3579}#
                 #{w\ 3580}#
                 #{s\ 3581}#
                 #{mod\ 3582}#)
          ((lambda (#{tmp\ 3588}#)
             ((lambda (#{tmp\ 3589}#)
                (if #{tmp\ 3589}#
                  (apply (lambda (#{_\ 3595}#
                                  #{fluid\ 3596}#
                                  #{val\ 3597}#
                                  #{b\ 3598}#
                                  #{b*\ 3599}#)
                           (#{build-dynlet\ 308}#
                             #{s\ 3581}#
                             (map (lambda (#{x\ 3600}#)
                                    (#{chi\ 467}#
                                      #{x\ 3600}#
                                      #{r\ 3579}#
                                      #{w\ 3580}#
                                      #{mod\ 3582}#))
                                  #{fluid\ 3596}#)
                             (map (lambda (#{x\ 3603}#)
                                    (#{chi\ 467}#
                                      #{x\ 3603}#
                                      #{r\ 3579}#
                                      #{w\ 3580}#
                                      #{mod\ 3582}#))
                                  #{val\ 3597}#)
                             (#{chi-body\ 475}#
                               (cons #{b\ 3598}# #{b*\ 3599}#)
                               (#{source-wrap\ 453}#
                                 #{e\ 3578}#
                                 #{w\ 3580}#
                                 #{s\ 3581}#
                                 #{mod\ 3582}#)
                               #{r\ 3579}#
                               #{w\ 3580}#
                               #{mod\ 3582}#)))
                         #{tmp\ 3589}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3588}#)))
              ($sc-dispatch
                #{tmp\ 3588}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3578}#)))
      (#{global-extend\ 378}#
        'begin
        'begin
        '())
      (#{global-extend\ 378}#
        'define
        'define
        '())
      (#{global-extend\ 378}#
        'define-syntax
        'define-syntax
        '())
      (#{global-extend\ 378}#
        'eval-when
        'eval-when
        '())
      (#{global-extend\ 378}#
        'core
        'syntax-case
        (letrec ((#{gen-syntax-case\ 3614}#
                   (lambda (#{x\ 3615}#
                            #{keys\ 3616}#
                            #{clauses\ 3617}#
                            #{r\ 3618}#
                            #{mod\ 3619}#)
                     (if (null? #{clauses\ 3617}#)
                       (#{build-application\ 304}#
                         #f
                         (#{build-primref\ 330}#
                           #f
                           'syntax-violation)
                         (list (#{build-data\ 332}# #f #f)
                               (#{build-data\ 332}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 3615}#))
                       ((lambda (#{tmp\ 3629}#)
                          ((lambda (#{tmp\ 3630}#)
                             (if #{tmp\ 3630}#
                               (apply (lambda (#{pat\ 3633}# #{exp\ 3634}#)
                                        (if (if (#{id?\ 382}# #{pat\ 3633}#)
                                              (and-map
                                                (lambda (#{x\ 3637}#)
                                                  (not (#{free-id=?\ 441}#
                                                         #{pat\ 3633}#
                                                         #{x\ 3637}#)))
                                                (cons '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(pat exp)
                                                            #((top) (top))
                                                            #("i3631" "i3632"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x
                                                              keys
                                                              clauses
                                                              r
                                                              mod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3620"
                                                              "i3621"
                                                              "i3622"
                                                              "i3623"
                                                              "i3624"))
                                                          #(ribcage
                                                            (gen-syntax-case
                                                              gen-clause
                                                              build-dispatch-call
                                                              convert-pattern)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i3613"
                                                             "i3611"
                                                             "i3609"
                                                             "i3607"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              chi-top
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              maybe-name-value!
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i496"
                                                             "i494"
                                                             "i492"
                                                             "i490"
                                                             "i488"
                                                             "i486"
                                                             "i484"
                                                             "i482"
                                                             "i480"
                                                             "i478"
                                                             "i476"
                                                             "i474"
                                                             "i472"
                                                             "i470"
                                                             "i468"
                                                             "i466"
                                                             "i464"
                                                             "i462"
                                                             "i460"
                                                             "i458"
                                                             "i456"
                                                             "i454"
                                                             "i452"
                                                             "i450"
                                                             "i448"
                                                             "i446"
                                                             "i444"
                                                             "i442"
                                                             "i440"
                                                             "i438"
                                                             "i436"
                                                             "i434"
                                                             "i432"
                                                             "i430"
                                                             "i428"
                                                             "i426"
                                                             "i425"
                                                             "i424"
                                                             "i422"
                                                             "i421"
                                                             "i420"
                                                             "i419"
                                                             "i418"
                                                             "i416"
                                                             "i414"
                                                             "i412"
                                                             "i410"
                                                             "i408"
                                                             "i406"
                                                             "i404"
                                                             "i402"
                                                             "i399"
                                                             "i397"
                                                             "i396"
                                                             "i395"
                                                             "i394"
                                                             "i393"
                                                             "i392"
                                                             "i390"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i383"
                                                             "i381"
                                                             "i379"
                                                             "i377"
                                                             "i375"
                                                             "i373"
                                                             "i371"
                                                             "i369"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i363"
                                                             "i362"
                                                             "i360"
                                                             "i359"
                                                             "i357"
                                                             "i355"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i329"
                                                             "i327"
                                                             "i325"
                                                             "i323"
                                                             "i321"
                                                             "i319"
                                                             "i317"
                                                             "i315"
                                                             "i313"
                                                             "i311"
                                                             "i309"
                                                             "i307"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i294"
                                                             "i292"
                                                             "i290"
                                                             "i288"
                                                             "i286"
                                                             "i284"
                                                             "i282"
                                                             "i280"
                                                             "i278"
                                                             "i276"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i259"
                                                             "i257"
                                                             "i255"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i243"
                                                             "i241"
                                                             "i239"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors
                                                              and-map*)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i33"
                                                             "i32"
                                                             "i31"
                                                             "i29")))
                                                         (hygiene guile))
                                                      #{keys\ 3616}#))
                                              #f)
                                          (let ((#{labels\ 3641}#
                                                  (list (#{gen-label\ 398}#)))
                                                (#{var\ 3642}#
                                                  (#{gen-var\ 495}#
                                                    #{pat\ 3633}#)))
                                            (#{build-application\ 304}#
                                              #f
                                              (#{build-simple-lambda\ 324}#
                                                #f
                                                (list (syntax->datum
                                                        #{pat\ 3633}#))
                                                #f
                                                (list #{var\ 3642}#)
                                                '()
                                                (#{chi\ 467}#
                                                  #{exp\ 3634}#
                                                  (#{extend-env\ 370}#
                                                    #{labels\ 3641}#
                                                    (list (cons 'syntax
                                                                (cons #{var\ 3642}#
                                                                      0)))
                                                    #{r\ 3618}#)
                                                  (#{make-binding-wrap\ 429}#
                                                    (list #{pat\ 3633}#)
                                                    #{labels\ 3641}#
                                                    '(()))
                                                  #{mod\ 3619}#))
                                              (list #{x\ 3615}#)))
                                          (#{gen-clause\ 3612}#
                                            #{x\ 3615}#
                                            #{keys\ 3616}#
                                            (cdr #{clauses\ 3617}#)
                                            #{r\ 3618}#
                                            #{pat\ 3633}#
                                            #t
                                            #{exp\ 3634}#
                                            #{mod\ 3619}#)))
                                      #{tmp\ 3630}#)
                               ((lambda (#{tmp\ 3648}#)
                                  (if #{tmp\ 3648}#
                                    (apply (lambda (#{pat\ 3652}#
                                                    #{fender\ 3653}#
                                                    #{exp\ 3654}#)
                                             (#{gen-clause\ 3612}#
                                               #{x\ 3615}#
                                               #{keys\ 3616}#
                                               (cdr #{clauses\ 3617}#)
                                               #{r\ 3618}#
                                               #{pat\ 3652}#
                                               #{fender\ 3653}#
                                               #{exp\ 3654}#
                                               #{mod\ 3619}#))
                                           #{tmp\ 3648}#)
                                    ((lambda (#{_\ 3656}#)
                                       (syntax-violation
                                         'syntax-case
                                         "invalid clause"
                                         (car #{clauses\ 3617}#)))
                                     #{tmp\ 3629}#)))
                                ($sc-dispatch
                                  #{tmp\ 3629}#
                                  '(any any any)))))
                           ($sc-dispatch #{tmp\ 3629}# (quote (any any)))))
                        (car #{clauses\ 3617}#)))))
                 (#{gen-clause\ 3612}#
                   (lambda (#{x\ 3657}#
                            #{keys\ 3658}#
                            #{clauses\ 3659}#
                            #{r\ 3660}#
                            #{pat\ 3661}#
                            #{fender\ 3662}#
                            #{exp\ 3663}#
                            #{mod\ 3664}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 3608}#
                           #{pat\ 3661}#
                           #{keys\ 3658}#))
                       (lambda (#{p\ 3673}# #{pvars\ 3674}#)
                         (if (not (#{distinct-bound-ids?\ 447}#
                                    (map car #{pvars\ 3674}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 3661}#)
                           (if (not (and-map
                                      (lambda (#{x\ 3681}#)
                                        (not (#{ellipsis?\ 483}#
                                               (car #{x\ 3681}#))))
                                      #{pvars\ 3674}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 3661}#)
                             (let ((#{y\ 3685}#
                                     (#{gen-var\ 495}# (quote tmp))))
                               (#{build-application\ 304}#
                                 #f
                                 (#{build-simple-lambda\ 324}#
                                   #f
                                   (list (quote tmp))
                                   #f
                                   (list #{y\ 3685}#)
                                   '()
                                   (let ((#{y\ 3689}#
                                           (#{build-lexical-reference\ 310}#
                                             'value
                                             #f
                                             'tmp
                                             #{y\ 3685}#)))
                                     (#{build-conditional\ 306}#
                                       #f
                                       ((lambda (#{tmp\ 3692}#)
                                          ((lambda (#{tmp\ 3693}#)
                                             (if #{tmp\ 3693}#
                                               (apply (lambda () #{y\ 3689}#)
                                                      #{tmp\ 3693}#)
                                               ((lambda (#{_\ 3695}#)
                                                  (#{build-conditional\ 306}#
                                                    #f
                                                    #{y\ 3689}#
                                                    (#{build-dispatch-call\ 3610}#
                                                      #{pvars\ 3674}#
                                                      #{fender\ 3662}#
                                                      #{y\ 3689}#
                                                      #{r\ 3660}#
                                                      #{mod\ 3664}#)
                                                    (#{build-data\ 332}#
                                                      #f
                                                      #f)))
                                                #{tmp\ 3692}#)))
                                           ($sc-dispatch
                                             #{tmp\ 3692}#
                                             '#(atom #t))))
                                        #{fender\ 3662}#)
                                       (#{build-dispatch-call\ 3610}#
                                         #{pvars\ 3674}#
                                         #{exp\ 3663}#
                                         #{y\ 3689}#
                                         #{r\ 3660}#
                                         #{mod\ 3664}#)
                                       (#{gen-syntax-case\ 3614}#
                                         #{x\ 3657}#
                                         #{keys\ 3658}#
                                         #{clauses\ 3659}#
                                         #{r\ 3660}#
                                         #{mod\ 3664}#))))
                                 (list (if (eq? #{p\ 3673}# (quote any))
                                         (#{build-application\ 304}#
                                           #f
                                           (#{build-primref\ 330}#
                                             #f
                                             'list)
                                           (list #{x\ 3657}#))
                                         (#{build-application\ 304}#
                                           #f
                                           (#{build-primref\ 330}#
                                             #f
                                             '$sc-dispatch)
                                           (list #{x\ 3657}#
                                                 (#{build-data\ 332}#
                                                   #f
                                                   #{p\ 3673}#)))))))))))))
                 (#{build-dispatch-call\ 3610}#
                   (lambda (#{pvars\ 3703}#
                            #{exp\ 3704}#
                            #{y\ 3705}#
                            #{r\ 3706}#
                            #{mod\ 3707}#)
                     (let ((#{ids\ 3715}# (map car #{pvars\ 3703}#))
                           (#{levels\ 3716}# (map cdr #{pvars\ 3703}#)))
                       (let ((#{labels\ 3719}#
                               (#{gen-labels\ 400}# #{ids\ 3715}#))
                             (#{new-vars\ 3720}#
                               (map #{gen-var\ 495}# #{ids\ 3715}#)))
                         (#{build-application\ 304}#
                           #f
                           (#{build-primref\ 330}# #f (quote apply))
                           (list (#{build-simple-lambda\ 324}#
                                   #f
                                   (map syntax->datum #{ids\ 3715}#)
                                   #f
                                   #{new-vars\ 3720}#
                                   '()
                                   (#{chi\ 467}#
                                     #{exp\ 3704}#
                                     (#{extend-env\ 370}#
                                       #{labels\ 3719}#
                                       (map (lambda (#{var\ 3724}#
                                                     #{level\ 3725}#)
                                              (cons 'syntax
                                                    (cons #{var\ 3724}#
                                                          #{level\ 3725}#)))
                                            #{new-vars\ 3720}#
                                            (map cdr #{pvars\ 3703}#))
                                       #{r\ 3706}#)
                                     (#{make-binding-wrap\ 429}#
                                       #{ids\ 3715}#
                                       #{labels\ 3719}#
                                       '(()))
                                     #{mod\ 3707}#))
                                 #{y\ 3705}#))))))
                 (#{convert-pattern\ 3608}#
                   (lambda (#{pattern\ 3731}# #{keys\ 3732}#)
                     (letrec ((#{cvt\ 3738}#
                                (lambda (#{p\ 3739}# #{n\ 3740}# #{ids\ 3741}#)
                                  (if (#{id?\ 382}# #{p\ 3739}#)
                                    (if (#{bound-id-member?\ 449}#
                                          #{p\ 3739}#
                                          #{keys\ 3732}#)
                                      (values
                                        (vector (quote free-id) #{p\ 3739}#)
                                        #{ids\ 3741}#)
                                      (values
                                        'any
                                        (cons (cons #{p\ 3739}# #{n\ 3740}#)
                                              #{ids\ 3741}#)))
                                    ((lambda (#{tmp\ 3745}#)
                                       ((lambda (#{tmp\ 3746}#)
                                          (if (if #{tmp\ 3746}#
                                                (apply (lambda (#{x\ 3749}#
                                                                #{dots\ 3750}#)
                                                         (#{ellipsis?\ 483}#
                                                           #{dots\ 3750}#))
                                                       #{tmp\ 3746}#)
                                                #f)
                                            (apply (lambda (#{x\ 3753}#
                                                            #{dots\ 3754}#)
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{cvt\ 3738}#
                                                           #{x\ 3753}#
                                                           (#{fx+\ 283}#
                                                             #{n\ 3740}#
                                                             1)
                                                           #{ids\ 3741}#))
                                                       (lambda (#{p\ 3755}#
                                                                #{ids\ 3756}#)
                                                         (values
                                                           (if (eq? #{p\ 3755}#
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               #{p\ 3755}#))
                                                           #{ids\ 3756}#))))
                                                   #{tmp\ 3746}#)
                                            ((lambda (#{tmp\ 3759}#)
                                               (if (if #{tmp\ 3759}#
                                                     (apply (lambda (#{x\ 3763}#
                                                                     #{dots\ 3764}#
                                                                     #{ys\ 3765}#)
                                                              (#{ellipsis?\ 483}#
                                                                #{dots\ 3764}#))
                                                            #{tmp\ 3759}#)
                                                     #f)
                                                 (apply (lambda (#{x\ 3769}#
                                                                 #{dots\ 3770}#
                                                                 #{ys\ 3771}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{cvt*\ 3736}#
                                                                #{ys\ 3771}#
                                                                #{n\ 3740}#
                                                                #{ids\ 3741}#))
                                                            (lambda (#{ys\ 3773}#
                                                                     #{ids\ 3774}#)
                                                              (call-with-values
                                                                (lambda ()
                                                                  (#{cvt\ 3738}#
                                                                    #{x\ 3769}#
                                                                    (+ #{n\ 3740}#
                                                                       1)
                                                                    #{ids\ 3774}#))
                                                                (lambda (#{x\ 3777}#
                                                                         #{ids\ 3778}#)
                                                                  (values
                                                                    (list->vector
                                                                      (cons 'each+
                                                                            (cons #{x\ 3777}#
                                                                                  (cons (reverse
                                                                                          #{ys\ 3773}#)
                                                                                        '(())))))
                                                                    #{ids\ 3778}#))))))
                                                        #{tmp\ 3759}#)
                                                 ((lambda (#{tmp\ 3782}#)
                                                    (if #{tmp\ 3782}#
                                                      (apply (lambda (#{x\ 3785}#
                                                                      #{y\ 3786}#)
                                                               (call-with-values
                                                                 (lambda ()
                                                                   (#{cvt\ 3738}#
                                                                     #{y\ 3786}#
                                                                     #{n\ 3740}#
                                                                     #{ids\ 3741}#))
                                                                 (lambda (#{y\ 3787}#
                                                                          #{ids\ 3788}#)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (#{cvt\ 3738}#
                                                                         #{x\ 3785}#
                                                                         #{n\ 3740}#
                                                                         #{ids\ 3788}#))
                                                                     (lambda (#{x\ 3791}#
                                                                              #{ids\ 3792}#)
                                                                       (values
                                                                         (cons #{x\ 3791}#
                                                                               #{y\ 3787}#)
                                                                         #{ids\ 3792}#))))))
                                                             #{tmp\ 3782}#)
                                                      ((lambda (#{tmp\ 3795}#)
                                                         (if #{tmp\ 3795}#
                                                           (apply (lambda ()
                                                                    (values
                                                                      '()
                                                                      #{ids\ 3741}#))
                                                                  #{tmp\ 3795}#)
                                                           ((lambda (#{tmp\ 3796}#)
                                                              (if #{tmp\ 3796}#
                                                                (apply (lambda (#{x\ 3798}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{cvt\ 3738}#
                                                                               #{x\ 3798}#
                                                                               #{n\ 3740}#
                                                                               #{ids\ 3741}#))
                                                                           (lambda (#{p\ 3800}#
                                                                                    #{ids\ 3801}#)
                                                                             (values
                                                                               (vector
                                                                                 'vector
                                                                                 #{p\ 3800}#)
                                                                               #{ids\ 3801}#))))
                                                                       #{tmp\ 3796}#)
                                                                ((lambda (#{x\ 3805}#)
                                                                   (values
                                                                     (vector
                                                                       'atom
                                                                       (#{strip\ 493}#
                                                                         #{p\ 3739}#
                                                                         '(())))
                                                                     #{ids\ 3741}#))
                                                                 #{tmp\ 3745}#)))
                                                            ($sc-dispatch
                                                              #{tmp\ 3745}#
                                                              '#(vector
                                                                 each-any)))))
                                                       ($sc-dispatch
                                                         #{tmp\ 3745}#
                                                         '()))))
                                                  ($sc-dispatch
                                                    #{tmp\ 3745}#
                                                    '(any . any)))))
                                             ($sc-dispatch
                                               #{tmp\ 3745}#
                                               '(any any . each-any)))))
                                        ($sc-dispatch
                                          #{tmp\ 3745}#
                                          '(any any))))
                                     #{p\ 3739}#))))
                              (#{cvt*\ 3736}#
                                (lambda (#{p*\ 3807}#
                                         #{n\ 3808}#
                                         #{ids\ 3809}#)
                                  (if (null? #{p*\ 3807}#)
                                    (values (quote ()) #{ids\ 3809}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt*\ 3736}#
                                          (cdr #{p*\ 3807}#)
                                          #{n\ 3808}#
                                          #{ids\ 3809}#))
                                      (lambda (#{y\ 3813}# #{ids\ 3814}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 3738}#
                                              (car #{p*\ 3807}#)
                                              #{n\ 3808}#
                                              #{ids\ 3814}#))
                                          (lambda (#{x\ 3817}# #{ids\ 3818}#)
                                            (values
                                              (cons #{x\ 3817}# #{y\ 3813}#)
                                              #{ids\ 3818}#)))))))))
                       (#{cvt\ 3738}# #{pattern\ 3731}# 0 (quote ()))))))
          (lambda (#{e\ 3821}#
                   #{r\ 3822}#
                   #{w\ 3823}#
                   #{s\ 3824}#
                   #{mod\ 3825}#)
            (let ((#{e\ 3832}#
                    (#{source-wrap\ 453}#
                      #{e\ 3821}#
                      #{w\ 3823}#
                      #{s\ 3824}#
                      #{mod\ 3825}#)))
              ((lambda (#{tmp\ 3833}#)
                 ((lambda (#{tmp\ 3834}#)
                    (if #{tmp\ 3834}#
                      (apply (lambda (#{_\ 3839}#
                                      #{val\ 3840}#
                                      #{key\ 3841}#
                                      #{m\ 3842}#)
                               (if (and-map
                                     (lambda (#{x\ 3843}#)
                                       (if (#{id?\ 382}# #{x\ 3843}#)
                                         (not (#{ellipsis?\ 483}# #{x\ 3843}#))
                                         #f))
                                     #{key\ 3841}#)
                                 (let ((#{x\ 3849}#
                                         (#{gen-var\ 495}# (quote tmp))))
                                   (#{build-application\ 304}#
                                     #{s\ 3824}#
                                     (#{build-simple-lambda\ 324}#
                                       #f
                                       (list (quote tmp))
                                       #f
                                       (list #{x\ 3849}#)
                                       '()
                                       (#{gen-syntax-case\ 3614}#
                                         (#{build-lexical-reference\ 310}#
                                           'value
                                           #f
                                           'tmp
                                           #{x\ 3849}#)
                                         #{key\ 3841}#
                                         #{m\ 3842}#
                                         #{r\ 3822}#
                                         #{mod\ 3825}#))
                                     (list (#{chi\ 467}#
                                             #{val\ 3840}#
                                             #{r\ 3822}#
                                             '(())
                                             #{mod\ 3825}#))))
                                 (syntax-violation
                                   'syntax-case
                                   "invalid literals list"
                                   #{e\ 3832}#)))
                             #{tmp\ 3834}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 3833}#)))
                  ($sc-dispatch
                    #{tmp\ 3833}#
                    '(any any each-any . each-any))))
               #{e\ 3832}#)))))
      (set! macroexpand
        (lambda*
          (#{x\ 3855}#
            #:optional
            (#{m\ 3857}# (quote e))
            (#{esew\ 3859}# (quote (eval))))
          (#{chi-top\ 465}#
            #{x\ 3855}#
            '()
            '((top))
            #{m\ 3857}#
            #{esew\ 3859}#
            (cons 'hygiene
                  (module-name (current-module))))))
      (set! identifier?
        (lambda (#{x\ 3863}#)
          (#{nonsymbol-id?\ 380}# #{x\ 3863}#)))
      (set! datum->syntax
        (lambda (#{id\ 3865}# #{datum\ 3866}#)
          (#{make-syntax-object\ 344}#
            #{datum\ 3866}#
            (#{syntax-object-wrap\ 350}# #{id\ 3865}#)
            (#{syntax-object-module\ 352}# #{id\ 3865}#))))
      (set! syntax->datum
        (lambda (#{x\ 3869}#)
          (#{strip\ 493}# #{x\ 3869}# (quote (())))))
      (set! syntax-source
        (lambda (#{x\ 3872}#)
          (#{source-annotation\ 361}# #{x\ 3872}#)))
      (set! generate-temporaries
        (lambda (#{ls\ 3874}#)
          (begin
            (let ((#{x\ 3878}# #{ls\ 3874}#))
              (if (not (list? #{x\ 3878}#))
                (syntax-violation
                  'generate-temporaries
                  "invalid argument"
                  #{x\ 3878}#)))
            (map (lambda (#{x\ 3879}#)
                   (#{wrap\ 451}# (gensym) (quote ((top))) #f))
                 #{ls\ 3874}#))))
      (set! free-identifier=?
        (lambda (#{x\ 3883}# #{y\ 3884}#)
          (begin
            (let ((#{x\ 3889}# #{x\ 3883}#))
              (if (not (#{nonsymbol-id?\ 380}# #{x\ 3889}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 3889}#)))
            (let ((#{x\ 3892}# #{y\ 3884}#))
              (if (not (#{nonsymbol-id?\ 380}# #{x\ 3892}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 3892}#)))
            (#{free-id=?\ 441}# #{x\ 3883}# #{y\ 3884}#))))
      (set! bound-identifier=?
        (lambda (#{x\ 3893}# #{y\ 3894}#)
          (begin
            (let ((#{x\ 3899}# #{x\ 3893}#))
              (if (not (#{nonsymbol-id?\ 380}# #{x\ 3899}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 3899}#)))
            (let ((#{x\ 3902}# #{y\ 3894}#))
              (if (not (#{nonsymbol-id?\ 380}# #{x\ 3902}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 3902}#)))
            (#{bound-id=?\ 443}# #{x\ 3893}# #{y\ 3894}#))))
      (set! syntax-violation
        (lambda (#{who\ 3903}#
                 #{message\ 3904}#
                 #{form\ 3905}#
                 .
                 #{subform\ 3906}#)
          (begin
            (let ((#{x\ 3913}# #{who\ 3903}#))
              (if (not ((lambda (#{x\ 3914}#)
                          (let ((#{t\ 3918}# (not #{x\ 3914}#)))
                            (if #{t\ 3918}#
                              #{t\ 3918}#
                              (let ((#{t\ 3921}# (string? #{x\ 3914}#)))
                                (if #{t\ 3921}#
                                  #{t\ 3921}#
                                  (symbol? #{x\ 3914}#))))))
                        #{x\ 3913}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 3913}#)))
            (let ((#{x\ 3925}# #{message\ 3904}#))
              (if (not (string? #{x\ 3925}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 3925}#)))
            (scm-error
              'syntax-error
              'macroexpand
              (string-append
                (if #{who\ 3903}# "~a: " "")
                "~a "
                (if (null? #{subform\ 3906}#)
                  "in ~a"
                  "in subform `~s' of `~s'"))
              (let ((#{tail\ 3927}#
                      (cons #{message\ 3904}#
                            (map (lambda (#{x\ 3928}#)
                                   (#{strip\ 493}# #{x\ 3928}# (quote (()))))
                                 (append
                                   #{subform\ 3906}#
                                   (list #{form\ 3905}#))))))
                (if #{who\ 3903}#
                  (cons #{who\ 3903}# #{tail\ 3927}#)
                  #{tail\ 3927}#))
              #f))))
      (letrec ((#{match\ 3944}#
                 (lambda (#{e\ 3945}#
                          #{p\ 3946}#
                          #{w\ 3947}#
                          #{r\ 3948}#
                          #{mod\ 3949}#)
                   (if (not #{r\ 3948}#)
                     #f
                     (if (eq? #{p\ 3946}# (quote any))
                       (cons (#{wrap\ 451}#
                               #{e\ 3945}#
                               #{w\ 3947}#
                               #{mod\ 3949}#)
                             #{r\ 3948}#)
                       (if (#{syntax-object?\ 346}# #{e\ 3945}#)
                         (#{match*\ 3942}#
                           (#{syntax-object-expression\ 348}# #{e\ 3945}#)
                           #{p\ 3946}#
                           (#{join-wraps\ 433}#
                             #{w\ 3947}#
                             (#{syntax-object-wrap\ 350}# #{e\ 3945}#))
                           #{r\ 3948}#
                           (#{syntax-object-module\ 352}# #{e\ 3945}#))
                         (#{match*\ 3942}#
                           #{e\ 3945}#
                           #{p\ 3946}#
                           #{w\ 3947}#
                           #{r\ 3948}#
                           #{mod\ 3949}#))))))
               (#{match*\ 3942}#
                 (lambda (#{e\ 3962}#
                          #{p\ 3963}#
                          #{w\ 3964}#
                          #{r\ 3965}#
                          #{mod\ 3966}#)
                   (if (null? #{p\ 3963}#)
                     (if (null? #{e\ 3962}#) #{r\ 3965}# #f)
                     (if (pair? #{p\ 3963}#)
                       (if (pair? #{e\ 3962}#)
                         (#{match\ 3944}#
                           (car #{e\ 3962}#)
                           (car #{p\ 3963}#)
                           #{w\ 3964}#
                           (#{match\ 3944}#
                             (cdr #{e\ 3962}#)
                             (cdr #{p\ 3963}#)
                             #{w\ 3964}#
                             #{r\ 3965}#
                             #{mod\ 3966}#)
                           #{mod\ 3966}#)
                         #f)
                       (if (eq? #{p\ 3963}# (quote each-any))
                         (let ((#{l\ 3983}#
                                 (#{match-each-any\ 3936}#
                                   #{e\ 3962}#
                                   #{w\ 3964}#
                                   #{mod\ 3966}#)))
                           (if #{l\ 3983}#
                             (cons #{l\ 3983}# #{r\ 3965}#)
                             #f))
                         (let ((#{atom-key\ 3989}# (vector-ref #{p\ 3963}# 0)))
                           (if (memv #{atom-key\ 3989}# (quote (each)))
                             (if (null? #{e\ 3962}#)
                               (#{match-empty\ 3938}#
                                 (vector-ref #{p\ 3963}# 1)
                                 #{r\ 3965}#)
                               (let ((#{l\ 3992}#
                                       (#{match-each\ 3932}#
                                         #{e\ 3962}#
                                         (vector-ref #{p\ 3963}# 1)
                                         #{w\ 3964}#
                                         #{mod\ 3966}#)))
                                 (if #{l\ 3992}#
                                   (letrec ((#{collect\ 3997}#
                                              (lambda (#{l\ 3998}#)
                                                (if (null? (car #{l\ 3998}#))
                                                  #{r\ 3965}#
                                                  (cons (map car #{l\ 3998}#)
                                                        (#{collect\ 3997}#
                                                          (map cdr
                                                               #{l\ 3998}#)))))))
                                     (#{collect\ 3997}# #{l\ 3992}#))
                                   #f)))
                             (if (memv #{atom-key\ 3989}# (quote (each+)))
                               (call-with-values
                                 (lambda ()
                                   (#{match-each+\ 3934}#
                                     #{e\ 3962}#
                                     (vector-ref #{p\ 3963}# 1)
                                     (vector-ref #{p\ 3963}# 2)
                                     (vector-ref #{p\ 3963}# 3)
                                     #{w\ 3964}#
                                     #{r\ 3965}#
                                     #{mod\ 3966}#))
                                 (lambda (#{xr*\ 4000}#
                                          #{y-pat\ 4001}#
                                          #{r\ 4002}#)
                                   (if #{r\ 4002}#
                                     (if (null? #{y-pat\ 4001}#)
                                       (if (null? #{xr*\ 4000}#)
                                         (#{match-empty\ 3938}#
                                           (vector-ref #{p\ 3963}# 1)
                                           #{r\ 4002}#)
                                         (#{combine\ 3940}#
                                           #{xr*\ 4000}#
                                           #{r\ 4002}#))
                                       #f)
                                     #f)))
                               (if (memv #{atom-key\ 3989}# (quote (free-id)))
                                 (if (#{id?\ 382}# #{e\ 3962}#)
                                   (if (#{free-id=?\ 441}#
                                         (#{wrap\ 451}#
                                           #{e\ 3962}#
                                           #{w\ 3964}#
                                           #{mod\ 3966}#)
                                         (vector-ref #{p\ 3963}# 1))
                                     #{r\ 3965}#
                                     #f)
                                   #f)
                                 (if (memv #{atom-key\ 3989}# (quote (atom)))
                                   (if (equal?
                                         (vector-ref #{p\ 3963}# 1)
                                         (#{strip\ 493}#
                                           #{e\ 3962}#
                                           #{w\ 3964}#))
                                     #{r\ 3965}#
                                     #f)
                                   (if (memv #{atom-key\ 3989}#
                                             '(vector))
                                     (if (vector? #{e\ 3962}#)
                                       (#{match\ 3944}#
                                         (vector->list #{e\ 3962}#)
                                         (vector-ref #{p\ 3963}# 1)
                                         #{w\ 3964}#
                                         #{r\ 3965}#
                                         #{mod\ 3966}#)
                                       #f))))))))))))
               (#{combine\ 3940}#
                 (lambda (#{r*\ 4019}# #{r\ 4020}#)
                   (if (null? (car #{r*\ 4019}#))
                     #{r\ 4020}#
                     (cons (map car #{r*\ 4019}#)
                           (#{combine\ 3940}#
                             (map cdr #{r*\ 4019}#)
                             #{r\ 4020}#)))))
               (#{match-empty\ 3938}#
                 (lambda (#{p\ 4023}# #{r\ 4024}#)
                   (if (null? #{p\ 4023}#)
                     #{r\ 4024}#
                     (if (eq? #{p\ 4023}# (quote any))
                       (cons (quote ()) #{r\ 4024}#)
                       (if (pair? #{p\ 4023}#)
                         (#{match-empty\ 3938}#
                           (car #{p\ 4023}#)
                           (#{match-empty\ 3938}#
                             (cdr #{p\ 4023}#)
                             #{r\ 4024}#))
                         (if (eq? #{p\ 4023}# (quote each-any))
                           (cons (quote ()) #{r\ 4024}#)
                           (let ((#{atom-key\ 4038}#
                                   (vector-ref #{p\ 4023}# 0)))
                             (if (memv #{atom-key\ 4038}# (quote (each)))
                               (#{match-empty\ 3938}#
                                 (vector-ref #{p\ 4023}# 1)
                                 #{r\ 4024}#)
                               (if (memv #{atom-key\ 4038}# (quote (each+)))
                                 (#{match-empty\ 3938}#
                                   (vector-ref #{p\ 4023}# 1)
                                   (#{match-empty\ 3938}#
                                     (reverse (vector-ref #{p\ 4023}# 2))
                                     (#{match-empty\ 3938}#
                                       (vector-ref #{p\ 4023}# 3)
                                       #{r\ 4024}#)))
                                 (if (memv #{atom-key\ 4038}#
                                           '(free-id atom))
                                   #{r\ 4024}#
                                   (if (memv #{atom-key\ 4038}#
                                             '(vector))
                                     (#{match-empty\ 3938}#
                                       (vector-ref #{p\ 4023}# 1)
                                       #{r\ 4024}#))))))))))))
               (#{match-each-any\ 3936}#
                 (lambda (#{e\ 4043}# #{w\ 4044}# #{mod\ 4045}#)
                   (if (pair? #{e\ 4043}#)
                     (let ((#{l\ 4052}#
                             (#{match-each-any\ 3936}#
                               (cdr #{e\ 4043}#)
                               #{w\ 4044}#
                               #{mod\ 4045}#)))
                       (if #{l\ 4052}#
                         (cons (#{wrap\ 451}#
                                 (car #{e\ 4043}#)
                                 #{w\ 4044}#
                                 #{mod\ 4045}#)
                               #{l\ 4052}#)
                         #f))
                     (if (null? #{e\ 4043}#)
                       '()
                       (if (#{syntax-object?\ 346}# #{e\ 4043}#)
                         (#{match-each-any\ 3936}#
                           (#{syntax-object-expression\ 348}# #{e\ 4043}#)
                           (#{join-wraps\ 433}#
                             #{w\ 4044}#
                             (#{syntax-object-wrap\ 350}# #{e\ 4043}#))
                           #{mod\ 4045}#)
                         #f)))))
               (#{match-each+\ 3934}#
                 (lambda (#{e\ 4060}#
                          #{x-pat\ 4061}#
                          #{y-pat\ 4062}#
                          #{z-pat\ 4063}#
                          #{w\ 4064}#
                          #{r\ 4065}#
                          #{mod\ 4066}#)
                   (letrec ((#{f\ 4077}#
                              (lambda (#{e\ 4078}# #{w\ 4079}#)
                                (if (pair? #{e\ 4078}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{f\ 4077}#
                                        (cdr #{e\ 4078}#)
                                        #{w\ 4079}#))
                                    (lambda (#{xr*\ 4082}#
                                             #{y-pat\ 4083}#
                                             #{r\ 4084}#)
                                      (if #{r\ 4084}#
                                        (if (null? #{y-pat\ 4083}#)
                                          (let ((#{xr\ 4089}#
                                                  (#{match\ 3944}#
                                                    (car #{e\ 4078}#)
                                                    #{x-pat\ 4061}#
                                                    #{w\ 4079}#
                                                    '()
                                                    #{mod\ 4066}#)))
                                            (if #{xr\ 4089}#
                                              (values
                                                (cons #{xr\ 4089}#
                                                      #{xr*\ 4082}#)
                                                #{y-pat\ 4083}#
                                                #{r\ 4084}#)
                                              (values #f #f #f)))
                                          (values
                                            '()
                                            (cdr #{y-pat\ 4083}#)
                                            (#{match\ 3944}#
                                              (car #{e\ 4078}#)
                                              (car #{y-pat\ 4083}#)
                                              #{w\ 4079}#
                                              #{r\ 4084}#
                                              #{mod\ 4066}#)))
                                        (values #f #f #f))))
                                  (if (#{syntax-object?\ 346}# #{e\ 4078}#)
                                    (#{f\ 4077}#
                                      (#{syntax-object-expression\ 348}#
                                        #{e\ 4078}#)
                                      (#{join-wraps\ 433}#
                                        #{w\ 4079}#
                                        #{e\ 4078}#))
                                    (values
                                      '()
                                      #{y-pat\ 4062}#
                                      (#{match\ 3944}#
                                        #{e\ 4078}#
                                        #{z-pat\ 4063}#
                                        #{w\ 4079}#
                                        #{r\ 4065}#
                                        #{mod\ 4066}#)))))))
                     (#{f\ 4077}# #{e\ 4060}# #{w\ 4064}#))))
               (#{match-each\ 3932}#
                 (lambda (#{e\ 4093}#
                          #{p\ 4094}#
                          #{w\ 4095}#
                          #{mod\ 4096}#)
                   (if (pair? #{e\ 4093}#)
                     (let ((#{first\ 4104}#
                             (#{match\ 3944}#
                               (car #{e\ 4093}#)
                               #{p\ 4094}#
                               #{w\ 4095}#
                               '()
                               #{mod\ 4096}#)))
                       (if #{first\ 4104}#
                         (let ((#{rest\ 4108}#
                                 (#{match-each\ 3932}#
                                   (cdr #{e\ 4093}#)
                                   #{p\ 4094}#
                                   #{w\ 4095}#
                                   #{mod\ 4096}#)))
                           (if #{rest\ 4108}#
                             (cons #{first\ 4104}# #{rest\ 4108}#)
                             #f))
                         #f))
                     (if (null? #{e\ 4093}#)
                       '()
                       (if (#{syntax-object?\ 346}# #{e\ 4093}#)
                         (#{match-each\ 3932}#
                           (#{syntax-object-expression\ 348}# #{e\ 4093}#)
                           #{p\ 4094}#
                           (#{join-wraps\ 433}#
                             #{w\ 4095}#
                             (#{syntax-object-wrap\ 350}# #{e\ 4093}#))
                           (#{syntax-object-module\ 352}# #{e\ 4093}#))
                         #f))))))
        (set! $sc-dispatch
          (lambda (#{e\ 4116}# #{p\ 4117}#)
            (if (eq? #{p\ 4117}# (quote any))
              (list #{e\ 4116}#)
              (if (#{syntax-object?\ 346}# #{e\ 4116}#)
                (#{match*\ 3942}#
                  (#{syntax-object-expression\ 348}# #{e\ 4116}#)
                  #{p\ 4117}#
                  (#{syntax-object-wrap\ 350}# #{e\ 4116}#)
                  '()
                  (#{syntax-object-module\ 352}# #{e\ 4116}#))
                (#{match*\ 3942}#
                  #{e\ 4116}#
                  #{p\ 4117}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x\ 4126}#)
      ((lambda (#{tmp\ 4128}#)
         ((lambda (#{tmp\ 4129}#)
            (if #{tmp\ 4129}#
              (apply (lambda (#{_\ 4133}# #{e1\ 4134}# #{e2\ 4135}#)
                       (cons '#(syntax-object
                                begin
                                ((top)
                                 #(ribcage
                                   #(_ e1 e2)
                                   #((top) (top) (top))
                                   #("i4130" "i4131" "i4132"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4127")))
                                (hygiene guile))
                             (cons #{e1\ 4134}# #{e2\ 4135}#)))
                     #{tmp\ 4129}#)
              ((lambda (#{tmp\ 4137}#)
                 (if #{tmp\ 4137}#
                   (apply (lambda (#{_\ 4143}#
                                   #{out\ 4144}#
                                   #{in\ 4145}#
                                   #{e1\ 4146}#
                                   #{e2\ 4147}#)
                            (list '#(syntax-object
                                     syntax-case
                                     ((top)
                                      #(ribcage
                                        #(_ out in e1 e2)
                                        #((top) (top) (top) (top) (top))
                                        #("i4138"
                                          "i4139"
                                          "i4140"
                                          "i4141"
                                          "i4142"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4127")))
                                     (hygiene guile))
                                  #{in\ 4145}#
                                  '()
                                  (list #{out\ 4144}#
                                        (cons '#(syntax-object
                                                 begin
                                                 ((top)
                                                  #(ribcage
                                                    #(_ out in e1 e2)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i4138"
                                                      "i4139"
                                                      "i4140"
                                                      "i4141"
                                                      "i4142"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4127")))
                                                 (hygiene guile))
                                              (cons #{e1\ 4146}#
                                                    #{e2\ 4147}#)))))
                          #{tmp\ 4137}#)
                   ((lambda (#{tmp\ 4149}#)
                      (if #{tmp\ 4149}#
                        (apply (lambda (#{_\ 4155}#
                                        #{out\ 4156}#
                                        #{in\ 4157}#
                                        #{e1\ 4158}#
                                        #{e2\ 4159}#)
                                 (list '#(syntax-object
                                          syntax-case
                                          ((top)
                                           #(ribcage
                                             #(_ out in e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i4150"
                                               "i4151"
                                               "i4152"
                                               "i4153"
                                               "i4154"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i4127")))
                                          (hygiene guile))
                                       (cons '#(syntax-object
                                                list
                                                ((top)
                                                 #(ribcage
                                                   #(_ out in e1 e2)
                                                   #((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                   #("i4150"
                                                     "i4151"
                                                     "i4152"
                                                     "i4153"
                                                     "i4154"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4127")))
                                                (hygiene guile))
                                             #{in\ 4157}#)
                                       '()
                                       (list #{out\ 4156}#
                                             (cons '#(syntax-object
                                                      begin
                                                      ((top)
                                                       #(ribcage
                                                         #(_ out in e1 e2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4150"
                                                           "i4151"
                                                           "i4152"
                                                           "i4153"
                                                           "i4154"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4127")))
                                                      (hygiene guile))
                                                   (cons #{e1\ 4158}#
                                                         #{e2\ 4159}#)))))
                               #{tmp\ 4149}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp\ 4128}#)))
                    ($sc-dispatch
                      #{tmp\ 4128}#
                      '(any #(each (any any)) any . each-any)))))
               ($sc-dispatch
                 #{tmp\ 4128}#
                 '(any ((any any)) any . each-any)))))
          ($sc-dispatch
            #{tmp\ 4128}#
            '(any () any . each-any))))
       #{x\ 4126}#))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x\ 4163}#)
      ((lambda (#{tmp\ 4165}#)
         ((lambda (#{tmp\ 4166}#)
            (if #{tmp\ 4166}#
              (apply (lambda (#{_\ 4172}#
                              #{k\ 4173}#
                              #{keyword\ 4174}#
                              #{pattern\ 4175}#
                              #{template\ 4176}#)
                       (list '#(syntax-object
                                lambda
                                ((top)
                                 #(ribcage
                                   #(_ k keyword pattern template)
                                   #((top) (top) (top) (top) (top))
                                   #("i4167" "i4168" "i4169" "i4170" "i4171"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4164")))
                                (hygiene guile))
                             '(#(syntax-object
                                 x
                                 ((top)
                                  #(ribcage
                                    #(_ k keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i4167" "i4168" "i4169" "i4170" "i4171"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4164")))
                                 (hygiene guile)))
                             (vector
                               '(#(syntax-object
                                   macro-type
                                   ((top)
                                    #(ribcage
                                      #(_ k keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i4167"
                                        "i4168"
                                        "i4169"
                                        "i4170"
                                        "i4171"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4164")))
                                   (hygiene guile))
                                 .
                                 #(syntax-object
                                   syntax-rules
                                   ((top)
                                    #(ribcage
                                      #(_ k keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i4167"
                                        "i4168"
                                        "i4169"
                                        "i4170"
                                        "i4171"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4164")))
                                   (hygiene guile)))
                               (cons '#(syntax-object
                                        patterns
                                        ((top)
                                         #(ribcage
                                           #(_ k keyword pattern template)
                                           #((top) (top) (top) (top) (top))
                                           #("i4167"
                                             "i4168"
                                             "i4169"
                                             "i4170"
                                             "i4171"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i4164")))
                                        (hygiene guile))
                                     #{pattern\ 4175}#))
                             (cons '#(syntax-object
                                      syntax-case
                                      ((top)
                                       #(ribcage
                                         #(_ k keyword pattern template)
                                         #((top) (top) (top) (top) (top))
                                         #("i4167"
                                           "i4168"
                                           "i4169"
                                           "i4170"
                                           "i4171"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4164")))
                                      (hygiene guile))
                                   (cons '#(syntax-object
                                            x
                                            ((top)
                                             #(ribcage
                                               #(_ k keyword pattern template)
                                               #((top) (top) (top) (top) (top))
                                               #("i4167"
                                                 "i4168"
                                                 "i4169"
                                                 "i4170"
                                                 "i4171"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4164")))
                                            (hygiene guile))
                                         (cons #{k\ 4173}#
                                               (map (lambda (#{tmp\ 4180}#
                                                             #{tmp\ 4179}#)
                                                      (list (cons '#(syntax-object
                                                                     dummy
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(_
                                                                          k
                                                                          keyword
                                                                          pattern
                                                                          template)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i4167"
                                                                          "i4168"
                                                                          "i4169"
                                                                          "i4170"
                                                                          "i4171"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x)
                                                                        #((top))
                                                                        #("i4164")))
                                                                     (hygiene
                                                                       guile))
                                                                  #{tmp\ 4179}#)
                                                            (list '#(syntax-object
                                                                     syntax
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(_
                                                                          k
                                                                          keyword
                                                                          pattern
                                                                          template)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i4167"
                                                                          "i4168"
                                                                          "i4169"
                                                                          "i4170"
                                                                          "i4171"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x)
                                                                        #((top))
                                                                        #("i4164")))
                                                                     (hygiene
                                                                       guile))
                                                                  #{tmp\ 4180}#)))
                                                    #{template\ 4176}#
                                                    #{pattern\ 4175}#))))))
                     #{tmp\ 4166}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4165}#)))
          ($sc-dispatch
            #{tmp\ 4165}#
            '(any each-any . #(each ((any . any) any))))))
       #{x\ 4163}#))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x\ 4181}#)
      ((lambda (#{tmp\ 4183}#)
         ((lambda (#{tmp\ 4184}#)
            (if (if #{tmp\ 4184}#
                  (apply (lambda (#{let*\ 4190}#
                                  #{x\ 4191}#
                                  #{v\ 4192}#
                                  #{e1\ 4193}#
                                  #{e2\ 4194}#)
                           (and-map identifier? #{x\ 4191}#))
                         #{tmp\ 4184}#)
                  #f)
              (apply (lambda (#{let*\ 4201}#
                              #{x\ 4202}#
                              #{v\ 4203}#
                              #{e1\ 4204}#
                              #{e2\ 4205}#)
                       (letrec ((#{f\ 4208}#
                                  (lambda (#{bindings\ 4209}#)
                                    (if (null? #{bindings\ 4209}#)
                                      (cons '#(syntax-object
                                               let
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f bindings)
                                                  #((top) (top))
                                                  #("i4206" "i4207"))
                                                #(ribcage
                                                  #(let* x v e1 e2)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i4196"
                                                    "i4197"
                                                    "i4198"
                                                    "i4199"
                                                    "i4200"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i4182")))
                                               (hygiene guile))
                                            (cons '()
                                                  (cons #{e1\ 4204}#
                                                        #{e2\ 4205}#)))
                                      ((lambda (#{tmp\ 4214}#)
                                         ((lambda (#{tmp\ 4215}#)
                                            (if #{tmp\ 4215}#
                                              (apply (lambda (#{body\ 4218}#
                                                              #{binding\ 4219}#)
                                                       (list '#(syntax-object
                                                                let
                                                                ((top)
                                                                 #(ribcage
                                                                   #(body
                                                                     binding)
                                                                   #((top)
                                                                     (top))
                                                                   #("i4216"
                                                                     "i4217"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     bindings)
                                                                   #((top)
                                                                     (top))
                                                                   #("i4206"
                                                                     "i4207"))
                                                                 #(ribcage
                                                                   #(let*
                                                                     x
                                                                     v
                                                                     e1
                                                                     e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i4196"
                                                                     "i4197"
                                                                     "i4198"
                                                                     "i4199"
                                                                     "i4200"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i4182")))
                                                                (hygiene
                                                                  guile))
                                                             (list #{binding\ 4219}#)
                                                             #{body\ 4218}#))
                                                     #{tmp\ 4215}#)
                                              (syntax-violation
                                                #f
                                                "source expression failed to match any pattern"
                                                #{tmp\ 4214}#)))
                                          ($sc-dispatch
                                            #{tmp\ 4214}#
                                            '(any any))))
                                       (list (#{f\ 4208}#
                                               (cdr #{bindings\ 4209}#))
                                             (car #{bindings\ 4209}#)))))))
                         (#{f\ 4208}# (map list #{x\ 4202}# #{v\ 4203}#))))
                     #{tmp\ 4184}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4183}#)))
          ($sc-dispatch
            #{tmp\ 4183}#
            '(any #(each (any any)) any . each-any))))
       #{x\ 4181}#))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x\ 4220}#)
      ((lambda (#{tmp\ 4222}#)
         ((lambda (#{tmp\ 4223}#)
            (if #{tmp\ 4223}#
              (apply (lambda (#{_\ 4231}#
                              #{var\ 4232}#
                              #{init\ 4233}#
                              #{step\ 4234}#
                              #{e0\ 4235}#
                              #{e1\ 4236}#
                              #{c\ 4237}#)
                       ((lambda (#{tmp\ 4239}#)
                          ((lambda (#{tmp\ 4240}#)
                             (if #{tmp\ 4240}#
                               (apply (lambda (#{step\ 4242}#)
                                        ((lambda (#{tmp\ 4243}#)
                                           ((lambda (#{tmp\ 4244}#)
                                              (if #{tmp\ 4244}#
                                                (apply (lambda ()
                                                         (list '#(syntax-object
                                                                  let
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(step)
                                                                     #((top))
                                                                     #("i4241"))
                                                                   #(ribcage
                                                                     #(_
                                                                       var
                                                                       init
                                                                       step
                                                                       e0
                                                                       e1
                                                                       c)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4224"
                                                                       "i4225"
                                                                       "i4226"
                                                                       "i4227"
                                                                       "i4228"
                                                                       "i4229"
                                                                       "i4230"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(orig-x)
                                                                     #((top))
                                                                     #("i4221")))
                                                                  (hygiene
                                                                    guile))
                                                               '#(syntax-object
                                                                  doloop
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(step)
                                                                     #((top))
                                                                     #("i4241"))
                                                                   #(ribcage
                                                                     #(_
                                                                       var
                                                                       init
                                                                       step
                                                                       e0
                                                                       e1
                                                                       c)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4224"
                                                                       "i4225"
                                                                       "i4226"
                                                                       "i4227"
                                                                       "i4228"
                                                                       "i4229"
                                                                       "i4230"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(orig-x)
                                                                     #((top))
                                                                     #("i4221")))
                                                                  (hygiene
                                                                    guile))
                                                               (map list
                                                                    #{var\ 4232}#
                                                                    #{init\ 4233}#)
                                                               (list '#(syntax-object
                                                                        if
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4241"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4224"
                                                                             "i4225"
                                                                             "i4226"
                                                                             "i4227"
                                                                             "i4228"
                                                                             "i4229"
                                                                             "i4230"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4221")))
                                                                        (hygiene
                                                                          guile))
                                                                     (list '#(syntax-object
                                                                              not
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i4241"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i4224"
                                                                                   "i4225"
                                                                                   "i4226"
                                                                                   "i4227"
                                                                                   "i4228"
                                                                                   "i4229"
                                                                                   "i4230"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i4221")))
                                                                              (hygiene
                                                                                guile))
                                                                           #{e0\ 4235}#)
                                                                     (cons '#(syntax-object
                                                                              begin
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i4241"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i4224"
                                                                                   "i4225"
                                                                                   "i4226"
                                                                                   "i4227"
                                                                                   "i4228"
                                                                                   "i4229"
                                                                                   "i4230"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i4221")))
                                                                              (hygiene
                                                                                guile))
                                                                           (append
                                                                             #{c\ 4237}#
                                                                             (list (cons '#(syntax-object
                                                                                            doloop
                                                                                            ((top)
                                                                                             #(ribcage
                                                                                               #(step)
                                                                                               #((top))
                                                                                               #("i4241"))
                                                                                             #(ribcage
                                                                                               #(_
                                                                                                 var
                                                                                                 init
                                                                                                 step
                                                                                                 e0
                                                                                                 e1
                                                                                                 c)
                                                                                               #((top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top)
                                                                                                 (top))
                                                                                               #("i4224"
                                                                                                 "i4225"
                                                                                                 "i4226"
                                                                                                 "i4227"
                                                                                                 "i4228"
                                                                                                 "i4229"
                                                                                                 "i4230"))
                                                                                             #(ribcage
                                                                                               ()
                                                                                               ()
                                                                                               ())
                                                                                             #(ribcage
                                                                                               #(orig-x)
                                                                                               #((top))
                                                                                               #("i4221")))
                                                                                            (hygiene
                                                                                              guile))
                                                                                         #{step\ 4242}#)))))))
                                                       #{tmp\ 4244}#)
                                                ((lambda (#{tmp\ 4249}#)
                                                   (if #{tmp\ 4249}#
                                                     (apply (lambda (#{e1\ 4252}#
                                                                     #{e2\ 4253}#)
                                                              (list '#(syntax-object
                                                                       let
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4250"
                                                                            "i4251"))
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i4241"))
                                                                        #(ribcage
                                                                          #(_
                                                                            var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4224"
                                                                            "i4225"
                                                                            "i4226"
                                                                            "i4227"
                                                                            "i4228"
                                                                            "i4229"
                                                                            "i4230"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i4221")))
                                                                       (hygiene
                                                                         guile))
                                                                    '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4250"
                                                                            "i4251"))
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i4241"))
                                                                        #(ribcage
                                                                          #(_
                                                                            var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4224"
                                                                            "i4225"
                                                                            "i4226"
                                                                            "i4227"
                                                                            "i4228"
                                                                            "i4229"
                                                                            "i4230"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i4221")))
                                                                       (hygiene
                                                                         guile))
                                                                    (map list
                                                                         #{var\ 4232}#
                                                                         #{init\ 4233}#)
                                                                    (list '#(syntax-object
                                                                             if
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4250"
                                                                                  "i4251"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4241"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4224"
                                                                                  "i4225"
                                                                                  "i4226"
                                                                                  "i4227"
                                                                                  "i4228"
                                                                                  "i4229"
                                                                                  "i4230"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4221")))
                                                                             (hygiene
                                                                               guile))
                                                                          #{e0\ 4235}#
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4250"
                                                                                        "i4251"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i4241"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4224"
                                                                                        "i4225"
                                                                                        "i4226"
                                                                                        "i4227"
                                                                                        "i4228"
                                                                                        "i4229"
                                                                                        "i4230"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i4221")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{e1\ 4252}#
                                                                                      #{e2\ 4253}#))
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4250"
                                                                                        "i4251"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i4241"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4224"
                                                                                        "i4225"
                                                                                        "i4226"
                                                                                        "i4227"
                                                                                        "i4228"
                                                                                        "i4229"
                                                                                        "i4230"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i4221")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (append
                                                                                  #{c\ 4237}#
                                                                                  (list (cons '#(syntax-object
                                                                                                 doloop
                                                                                                 ((top)
                                                                                                  #(ribcage
                                                                                                    #(e1
                                                                                                      e2)
                                                                                                    #((top)
                                                                                                      (top))
                                                                                                    #("i4250"
                                                                                                      "i4251"))
                                                                                                  #(ribcage
                                                                                                    #(step)
                                                                                                    #((top))
                                                                                                    #("i4241"))
                                                                                                  #(ribcage
                                                                                                    #(_
                                                                                                      var
                                                                                                      init
                                                                                                      step
                                                                                                      e0
                                                                                                      e1
                                                                                                      c)
                                                                                                    #((top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top)
                                                                                                      (top))
                                                                                                    #("i4224"
                                                                                                      "i4225"
                                                                                                      "i4226"
                                                                                                      "i4227"
                                                                                                      "i4228"
                                                                                                      "i4229"
                                                                                                      "i4230"))
                                                                                                  #(ribcage
                                                                                                    ()
                                                                                                    ()
                                                                                                    ())
                                                                                                  #(ribcage
                                                                                                    #(orig-x)
                                                                                                    #((top))
                                                                                                    #("i4221")))
                                                                                                 (hygiene
                                                                                                   guile))
                                                                                              #{step\ 4242}#)))))))
                                                            #{tmp\ 4249}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 4243}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 4243}#
                                                   '(any . each-any)))))
                                            ($sc-dispatch
                                              #{tmp\ 4243}#
                                              '())))
                                         #{e1\ 4236}#))
                                      #{tmp\ 4240}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4239}#)))
                           ($sc-dispatch #{tmp\ 4239}# (quote each-any))))
                        (map (lambda (#{v\ 4260}# #{s\ 4261}#)
                               ((lambda (#{tmp\ 4264}#)
                                  ((lambda (#{tmp\ 4265}#)
                                     (if #{tmp\ 4265}#
                                       (apply (lambda () #{v\ 4260}#)
                                              #{tmp\ 4265}#)
                                       ((lambda (#{tmp\ 4266}#)
                                          (if #{tmp\ 4266}#
                                            (apply (lambda (#{e\ 4268}#)
                                                     #{e\ 4268}#)
                                                   #{tmp\ 4266}#)
                                            ((lambda (#{_\ 4270}#)
                                               (syntax-violation
                                                 'do
                                                 "bad step expression"
                                                 #{orig-x\ 4220}#
                                                 #{s\ 4261}#))
                                             #{tmp\ 4264}#)))
                                        ($sc-dispatch
                                          #{tmp\ 4264}#
                                          '(any)))))
                                   ($sc-dispatch #{tmp\ 4264}# (quote ()))))
                                #{s\ 4261}#))
                             #{var\ 4232}#
                             #{step\ 4234}#)))
                     #{tmp\ 4223}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4222}#)))
          ($sc-dispatch
            #{tmp\ 4222}#
            '(any #(each (any any . any))
                  (any . each-any)
                  .
                  each-any))))
       #{orig-x\ 4220}#))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec ((#{quasicons\ 4277}#
               (lambda (#{x\ 4281}# #{y\ 4282}#)
                 ((lambda (#{tmp\ 4286}#)
                    ((lambda (#{tmp\ 4287}#)
                       (if #{tmp\ 4287}#
                         (apply (lambda (#{x\ 4290}# #{y\ 4291}#)
                                  ((lambda (#{tmp\ 4292}#)
                                     ((lambda (#{tmp\ 4293}#)
                                        (if #{tmp\ 4293}#
                                          (apply (lambda (#{dy\ 4295}#)
                                                   ((lambda (#{tmp\ 4296}#)
                                                      ((lambda (#{tmp\ 4297}#)
                                                         (if #{tmp\ 4297}#
                                                           (apply (lambda (#{dx\ 4299}#)
                                                                    (list '#(syntax-object
                                                                             quote
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(dx)
                                                                                #((top))
                                                                                #("i4298"))
                                                                              #(ribcage
                                                                                #(dy)
                                                                                #((top))
                                                                                #("i4294"))
                                                                              #(ribcage
                                                                                #(x
                                                                                  y)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4288"
                                                                                  "i4289"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x
                                                                                  y)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4283"
                                                                                  "i4284"))
                                                                              #(ribcage
                                                                                #(quasicons
                                                                                  quasiappend
                                                                                  quasivector
                                                                                  quasi)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4273"
                                                                                  "i4274"
                                                                                  "i4275"
                                                                                  "i4276")))
                                                                             (hygiene
                                                                               guile))
                                                                          (cons #{dx\ 4299}#
                                                                                #{dy\ 4295}#)))
                                                                  #{tmp\ 4297}#)
                                                           ((lambda (#{_\ 4301}#)
                                                              (if (null? #{dy\ 4295}#)
                                                                (list '#(syntax-object
                                                                         list
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(_)
                                                                            #((top))
                                                                            #("i4300"))
                                                                          #(ribcage
                                                                            #(dy)
                                                                            #((top))
                                                                            #("i4294"))
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4288"
                                                                              "i4289"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4283"
                                                                              "i4284"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i4273"
                                                                              "i4274"
                                                                              "i4275"
                                                                              "i4276")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{x\ 4290}#)
                                                                (list '#(syntax-object
                                                                         cons
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(_)
                                                                            #((top))
                                                                            #("i4300"))
                                                                          #(ribcage
                                                                            #(dy)
                                                                            #((top))
                                                                            #("i4294"))
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4288"
                                                                              "i4289"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(x
                                                                              y)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4283"
                                                                              "i4284"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i4273"
                                                                              "i4274"
                                                                              "i4275"
                                                                              "i4276")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{x\ 4290}#
                                                                      #{y\ 4291}#)))
                                                            #{tmp\ 4296}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4296}#
                                                         '(#(free-id
                                                             #(syntax-object
                                                               quote
                                                               ((top)
                                                                #(ribcage
                                                                  #(dy)
                                                                  #((top))
                                                                  #("i4294"))
                                                                #(ribcage
                                                                  #(x y)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4288"
                                                                    "i4289"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x y)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4283"
                                                                    "i4284"))
                                                                #(ribcage
                                                                  #(quasicons
                                                                    quasiappend
                                                                    quasivector
                                                                    quasi)
                                                                  #((top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                  #("i4273"
                                                                    "i4274"
                                                                    "i4275"
                                                                    "i4276")))
                                                               (hygiene
                                                                 guile)))
                                                           any))))
                                                    #{x\ 4290}#))
                                                 #{tmp\ 4293}#)
                                          ((lambda (#{tmp\ 4302}#)
                                             (if #{tmp\ 4302}#
                                               (apply (lambda (#{stuff\ 4304}#)
                                                        (cons '#(syntax-object
                                                                 list
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(stuff)
                                                                    #((top))
                                                                    #("i4303"))
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4288"
                                                                      "i4289"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4283"
                                                                      "i4284"))
                                                                  #(ribcage
                                                                    #(quasicons
                                                                      quasiappend
                                                                      quasivector
                                                                      quasi)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4273"
                                                                      "i4274"
                                                                      "i4275"
                                                                      "i4276")))
                                                                 (hygiene
                                                                   guile))
                                                              (cons #{x\ 4290}#
                                                                    #{stuff\ 4304}#)))
                                                      #{tmp\ 4302}#)
                                               ((lambda (#{else\ 4306}#)
                                                  (list '#(syntax-object
                                                           cons
                                                           ((top)
                                                            #(ribcage
                                                              #(else)
                                                              #((top))
                                                              #("i4305"))
                                                            #(ribcage
                                                              #(x y)
                                                              #((top) (top))
                                                              #("i4288"
                                                                "i4289"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(x y)
                                                              #((top) (top))
                                                              #("i4283"
                                                                "i4284"))
                                                            #(ribcage
                                                              #(quasicons
                                                                quasiappend
                                                                quasivector
                                                                quasi)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i4273"
                                                                "i4274"
                                                                "i4275"
                                                                "i4276")))
                                                           (hygiene guile))
                                                        #{x\ 4290}#
                                                        #{y\ 4291}#))
                                                #{tmp\ 4292}#)))
                                           ($sc-dispatch
                                             #{tmp\ 4292}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   list
                                                   ((top)
                                                    #(ribcage
                                                      #(x y)
                                                      #((top) (top))
                                                      #("i4288" "i4289"))
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x y)
                                                      #((top) (top))
                                                      #("i4283" "i4284"))
                                                    #(ribcage
                                                      #(quasicons
                                                        quasiappend
                                                        quasivector
                                                        quasi)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4273"
                                                        "i4274"
                                                        "i4275"
                                                        "i4276")))
                                                   (hygiene guile)))
                                               .
                                               any)))))
                                      ($sc-dispatch
                                        #{tmp\ 4292}#
                                        '(#(free-id
                                            #(syntax-object
                                              quote
                                              ((top)
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4288" "i4289"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4283" "i4284"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4273"
                                                   "i4274"
                                                   "i4275"
                                                   "i4276")))
                                              (hygiene guile)))
                                          any))))
                                   #{y\ 4291}#))
                                #{tmp\ 4287}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 4286}#)))
                     ($sc-dispatch #{tmp\ 4286}# (quote (any any)))))
                  (list #{x\ 4281}# #{y\ 4282}#))))
             (#{quasiappend\ 4278}#
               (lambda (#{x\ 4307}# #{y\ 4308}#)
                 ((lambda (#{tmp\ 4312}#)
                    ((lambda (#{tmp\ 4313}#)
                       (if #{tmp\ 4313}#
                         (apply (lambda (#{x\ 4316}# #{y\ 4317}#)
                                  ((lambda (#{tmp\ 4318}#)
                                     ((lambda (#{tmp\ 4319}#)
                                        (if #{tmp\ 4319}#
                                          (apply (lambda () #{x\ 4316}#)
                                                 #{tmp\ 4319}#)
                                          ((lambda (#{_\ 4321}#)
                                             (list '#(syntax-object
                                                      append
                                                      ((top)
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i4320"))
                                                       #(ribcage
                                                         #(x y)
                                                         #((top) (top))
                                                         #("i4314" "i4315"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x y)
                                                         #((top) (top))
                                                         #("i4309" "i4310"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4273"
                                                           "i4274"
                                                           "i4275"
                                                           "i4276")))
                                                      (hygiene guile))
                                                   #{x\ 4316}#
                                                   #{y\ 4317}#))
                                           #{tmp\ 4318}#)))
                                      ($sc-dispatch
                                        #{tmp\ 4318}#
                                        '(#(free-id
                                            #(syntax-object
                                              quote
                                              ((top)
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4314" "i4315"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4309" "i4310"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4273"
                                                   "i4274"
                                                   "i4275"
                                                   "i4276")))
                                              (hygiene guile)))
                                          ()))))
                                   #{y\ 4317}#))
                                #{tmp\ 4313}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 4312}#)))
                     ($sc-dispatch #{tmp\ 4312}# (quote (any any)))))
                  (list #{x\ 4307}# #{y\ 4308}#))))
             (#{quasivector\ 4279}#
               (lambda (#{x\ 4322}#)
                 ((lambda (#{tmp\ 4325}#)
                    ((lambda (#{x\ 4327}#)
                       ((lambda (#{tmp\ 4328}#)
                          ((lambda (#{tmp\ 4329}#)
                             (if #{tmp\ 4329}#
                               (apply (lambda (#{x\ 4331}#)
                                        (list '#(syntax-object
                                                 quote
                                                 ((top)
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4330"))
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4326"))
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i4323"))
                                                  #(ribcage
                                                    #(quasicons
                                                      quasiappend
                                                      quasivector
                                                      quasi)
                                                    #((top) (top) (top) (top))
                                                    #("i4273"
                                                      "i4274"
                                                      "i4275"
                                                      "i4276")))
                                                 (hygiene guile))
                                              (list->vector #{x\ 4331}#)))
                                      #{tmp\ 4329}#)
                               ((lambda (#{tmp\ 4333}#)
                                  (if #{tmp\ 4333}#
                                    (apply (lambda (#{x\ 4335}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4334"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4326"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4323"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4273"
                                                           "i4274"
                                                           "i4275"
                                                           "i4276")))
                                                      (hygiene guile))
                                                   #{x\ 4335}#))
                                           #{tmp\ 4333}#)
                                    ((lambda (#{_\ 4338}#)
                                       (list '#(syntax-object
                                                list->vector
                                                ((top)
                                                 #(ribcage
                                                   #(_)
                                                   #((top))
                                                   #("i4337"))
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4326"))
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4323"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4273"
                                                     "i4274"
                                                     "i4275"
                                                     "i4276")))
                                                (hygiene guile))
                                             #{x\ 4327}#))
                                     #{tmp\ 4328}#)))
                                ($sc-dispatch
                                  #{tmp\ 4328}#
                                  '(#(free-id
                                      #(syntax-object
                                        list
                                        ((top)
                                         #(ribcage #(x) #((top)) #("i4326"))
                                         #(ribcage () () ())
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i4323"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i4273" "i4274" "i4275" "i4276")))
                                        (hygiene guile)))
                                    .
                                    each-any)))))
                           ($sc-dispatch
                             #{tmp\ 4328}#
                             '(#(free-id
                                 #(syntax-object
                                   quote
                                   ((top)
                                    #(ribcage #(x) #((top)) #("i4326"))
                                    #(ribcage () () ())
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4323"))
                                    #(ribcage
                                      #(quasicons
                                        quasiappend
                                        quasivector
                                        quasi)
                                      #((top) (top) (top) (top))
                                      #("i4273" "i4274" "i4275" "i4276")))
                                   (hygiene guile)))
                               each-any))))
                        #{x\ 4327}#))
                     #{tmp\ 4325}#))
                  #{x\ 4322}#)))
             (#{quasi\ 4280}#
               (lambda (#{p\ 4339}# #{lev\ 4340}#)
                 ((lambda (#{tmp\ 4343}#)
                    ((lambda (#{tmp\ 4344}#)
                       (if #{tmp\ 4344}#
                         (apply (lambda (#{p\ 4346}#)
                                  (if (= #{lev\ 4340}# 0)
                                    #{p\ 4346}#
                                    (#{quasicons\ 4277}#
                                      '(#(syntax-object
                                          quote
                                          ((top)
                                           #(ribcage #(p) #((top)) #("i4345"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p lev)
                                             #((top) (top))
                                             #("i4341" "i4342"))
                                           #(ribcage
                                             #(quasicons
                                               quasiappend
                                               quasivector
                                               quasi)
                                             #((top) (top) (top) (top))
                                             #("i4273"
                                               "i4274"
                                               "i4275"
                                               "i4276")))
                                          (hygiene guile))
                                        #(syntax-object
                                          unquote
                                          ((top)
                                           #(ribcage #(p) #((top)) #("i4345"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p lev)
                                             #((top) (top))
                                             #("i4341" "i4342"))
                                           #(ribcage
                                             #(quasicons
                                               quasiappend
                                               quasivector
                                               quasi)
                                             #((top) (top) (top) (top))
                                             #("i4273"
                                               "i4274"
                                               "i4275"
                                               "i4276")))
                                          (hygiene guile)))
                                      (#{quasi\ 4280}#
                                        (list #{p\ 4346}#)
                                        (- #{lev\ 4340}# 1)))))
                                #{tmp\ 4344}#)
                         ((lambda (#{tmp\ 4347}#)
                            (if (if #{tmp\ 4347}#
                                  (apply (lambda (#{args\ 4349}#)
                                           (= #{lev\ 4340}# 0))
                                         #{tmp\ 4347}#)
                                  #f)
                              (apply (lambda (#{args\ 4351}#)
                                       (syntax-violation
                                         'unquote
                                         "unquote takes exactly one argument"
                                         #{p\ 4339}#
                                         (cons '#(syntax-object
                                                  unquote
                                                  ((top)
                                                   #(ribcage
                                                     #(args)
                                                     #((top))
                                                     #("i4350"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(p lev)
                                                     #((top) (top))
                                                     #("i4341" "i4342"))
                                                   #(ribcage
                                                     #(quasicons
                                                       quasiappend
                                                       quasivector
                                                       quasi)
                                                     #((top) (top) (top) (top))
                                                     #("i4273"
                                                       "i4274"
                                                       "i4275"
                                                       "i4276")))
                                                  (hygiene guile))
                                               #{args\ 4351}#)))
                                     #{tmp\ 4347}#)
                              ((lambda (#{tmp\ 4352}#)
                                 (if #{tmp\ 4352}#
                                   (apply (lambda (#{p\ 4355}# #{q\ 4356}#)
                                            (if (= #{lev\ 4340}# 0)
                                              (#{quasiappend\ 4278}#
                                                #{p\ 4355}#
                                                (#{quasi\ 4280}#
                                                  #{q\ 4356}#
                                                  #{lev\ 4340}#))
                                              (#{quasicons\ 4277}#
                                                (#{quasicons\ 4277}#
                                                  '(#(syntax-object
                                                      quote
                                                      ((top)
                                                       #(ribcage
                                                         #(p q)
                                                         #((top) (top))
                                                         #("i4353" "i4354"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(p lev)
                                                         #((top) (top))
                                                         #("i4341" "i4342"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4273"
                                                           "i4274"
                                                           "i4275"
                                                           "i4276")))
                                                      (hygiene guile))
                                                    #(syntax-object
                                                      unquote-splicing
                                                      ((top)
                                                       #(ribcage
                                                         #(p q)
                                                         #((top) (top))
                                                         #("i4353" "i4354"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(p lev)
                                                         #((top) (top))
                                                         #("i4341" "i4342"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4273"
                                                           "i4274"
                                                           "i4275"
                                                           "i4276")))
                                                      (hygiene guile)))
                                                  (#{quasi\ 4280}#
                                                    (list #{p\ 4355}#)
                                                    (- #{lev\ 4340}# 1)))
                                                (#{quasi\ 4280}#
                                                  #{q\ 4356}#
                                                  #{lev\ 4340}#))))
                                          #{tmp\ 4352}#)
                                   ((lambda (#{tmp\ 4357}#)
                                      (if (if #{tmp\ 4357}#
                                            (apply (lambda (#{args\ 4360}#
                                                            #{q\ 4361}#)
                                                     (= #{lev\ 4340}# 0))
                                                   #{tmp\ 4357}#)
                                            #f)
                                        (apply (lambda (#{args\ 4364}#
                                                        #{q\ 4365}#)
                                                 (syntax-violation
                                                   'unquote-splicing
                                                   "unquote-splicing takes exactly one argument"
                                                   #{p\ 4339}#
                                                   (cons '#(syntax-object
                                                            unquote-splicing
                                                            ((top)
                                                             #(ribcage
                                                               #(args q)
                                                               #((top) (top))
                                                               #("i4362"
                                                                 "i4363"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4341"
                                                                 "i4342"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4273"
                                                                 "i4274"
                                                                 "i4275"
                                                                 "i4276")))
                                                            (hygiene guile))
                                                         #{args\ 4364}#)))
                                               #{tmp\ 4357}#)
                                        ((lambda (#{tmp\ 4366}#)
                                           (if #{tmp\ 4366}#
                                             (apply (lambda (#{p\ 4368}#)
                                                      (#{quasicons\ 4277}#
                                                        '(#(syntax-object
                                                            quote
                                                            ((top)
                                                             #(ribcage
                                                               #(p)
                                                               #((top))
                                                               #("i4367"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4341"
                                                                 "i4342"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4273"
                                                                 "i4274"
                                                                 "i4275"
                                                                 "i4276")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            quasiquote
                                                            ((top)
                                                             #(ribcage
                                                               #(p)
                                                               #((top))
                                                               #("i4367"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4341"
                                                                 "i4342"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4273"
                                                                 "i4274"
                                                                 "i4275"
                                                                 "i4276")))
                                                            (hygiene guile)))
                                                        (#{quasi\ 4280}#
                                                          (list #{p\ 4368}#)
                                                          (+ #{lev\ 4340}#
                                                             1))))
                                                    #{tmp\ 4366}#)
                                             ((lambda (#{tmp\ 4369}#)
                                                (if #{tmp\ 4369}#
                                                  (apply (lambda (#{p\ 4372}#
                                                                  #{q\ 4373}#)
                                                           (#{quasicons\ 4277}#
                                                             (#{quasi\ 4280}#
                                                               #{p\ 4372}#
                                                               #{lev\ 4340}#)
                                                             (#{quasi\ 4280}#
                                                               #{q\ 4373}#
                                                               #{lev\ 4340}#)))
                                                         #{tmp\ 4369}#)
                                                  ((lambda (#{tmp\ 4374}#)
                                                     (if #{tmp\ 4374}#
                                                       (apply (lambda (#{x\ 4376}#)
                                                                (#{quasivector\ 4279}#
                                                                  (#{quasi\ 4280}#
                                                                    #{x\ 4376}#
                                                                    #{lev\ 4340}#)))
                                                              #{tmp\ 4374}#)
                                                       ((lambda (#{p\ 4379}#)
                                                          (list '#(syntax-object
                                                                   quote
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(p)
                                                                      #((top))
                                                                      #("i4378"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(p lev)
                                                                      #((top)
                                                                        (top))
                                                                      #("i4341"
                                                                        "i4342"))
                                                                    #(ribcage
                                                                      #(quasicons
                                                                        quasiappend
                                                                        quasivector
                                                                        quasi)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i4273"
                                                                        "i4274"
                                                                        "i4275"
                                                                        "i4276")))
                                                                   (hygiene
                                                                     guile))
                                                                #{p\ 4379}#))
                                                        #{tmp\ 4343}#)))
                                                   ($sc-dispatch
                                                     #{tmp\ 4343}#
                                                     '#(vector each-any)))))
                                              ($sc-dispatch
                                                #{tmp\ 4343}#
                                                '(any . any)))))
                                         ($sc-dispatch
                                           #{tmp\ 4343}#
                                           '(#(free-id
                                               #(syntax-object
                                                 quasiquote
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i4341" "i4342"))
                                                  #(ribcage
                                                    #(quasicons
                                                      quasiappend
                                                      quasivector
                                                      quasi)
                                                    #((top) (top) (top) (top))
                                                    #("i4273"
                                                      "i4274"
                                                      "i4275"
                                                      "i4276")))
                                                 (hygiene guile)))
                                             any)))))
                                    ($sc-dispatch
                                      #{tmp\ 4343}#
                                      '((#(free-id
                                           #(syntax-object
                                             unquote-splicing
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i4341" "i4342"))
                                              #(ribcage
                                                #(quasicons
                                                  quasiappend
                                                  quasivector
                                                  quasi)
                                                #((top) (top) (top) (top))
                                                #("i4273"
                                                  "i4274"
                                                  "i4275"
                                                  "i4276")))
                                             (hygiene guile)))
                                         .
                                         any)
                                        .
                                        any)))))
                               ($sc-dispatch
                                 #{tmp\ 4343}#
                                 '((#(free-id
                                      #(syntax-object
                                        unquote-splicing
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i4341" "i4342"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i4273" "i4274" "i4275" "i4276")))
                                        (hygiene guile)))
                                    any)
                                   .
                                   any)))))
                          ($sc-dispatch
                            #{tmp\ 4343}#
                            '(#(free-id
                                #(syntax-object
                                  unquote
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage
                                     #(p lev)
                                     #((top) (top))
                                     #("i4341" "i4342"))
                                   #(ribcage
                                     #(quasicons quasiappend quasivector quasi)
                                     #((top) (top) (top) (top))
                                     #("i4273" "i4274" "i4275" "i4276")))
                                  (hygiene guile)))
                              .
                              any)))))
                     ($sc-dispatch
                       #{tmp\ 4343}#
                       '(#(free-id
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4341" "i4342"))
                              #(ribcage
                                #(quasicons quasiappend quasivector quasi)
                                #((top) (top) (top) (top))
                                #("i4273" "i4274" "i4275" "i4276")))
                             (hygiene guile)))
                         any))))
                  #{p\ 4339}#))))
      (lambda (#{x\ 4380}#)
        ((lambda (#{tmp\ 4382}#)
           ((lambda (#{tmp\ 4383}#)
              (if #{tmp\ 4383}#
                (apply (lambda (#{_\ 4386}# #{e\ 4387}#)
                         (#{quasi\ 4280}# #{e\ 4387}# 0))
                       #{tmp\ 4383}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4382}#)))
            ($sc-dispatch #{tmp\ 4382}# (quote (any any)))))
         #{x\ 4380}#)))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x\ 4388}#)
      (letrec ((#{read-file\ 4391}#
                 (lambda (#{fn\ 4392}# #{k\ 4393}#)
                   (let ((#{p\ 4397}# (open-input-file #{fn\ 4392}#)))
                     (letrec ((#{f\ 4401}#
                                (lambda (#{x\ 4402}# #{result\ 4403}#)
                                  (if (eof-object? #{x\ 4402}#)
                                    (begin
                                      (close-input-port #{p\ 4397}#)
                                      (reverse #{result\ 4403}#))
                                    (#{f\ 4401}#
                                      (read #{p\ 4397}#)
                                      (cons (datum->syntax
                                              #{k\ 4393}#
                                              #{x\ 4402}#)
                                            #{result\ 4403}#))))))
                       (#{f\ 4401}# (read #{p\ 4397}#) (quote ())))))))
        ((lambda (#{tmp\ 4404}#)
           ((lambda (#{tmp\ 4405}#)
              (if #{tmp\ 4405}#
                (apply (lambda (#{k\ 4408}# #{filename\ 4409}#)
                         (let ((#{fn\ 4411}#
                                 (syntax->datum #{filename\ 4409}#)))
                           ((lambda (#{tmp\ 4413}#)
                              ((lambda (#{tmp\ 4414}#)
                                 (if #{tmp\ 4414}#
                                   (apply (lambda (#{exp\ 4416}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage
                                                        #(exp)
                                                        #((top))
                                                        #("i4415"))
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(fn)
                                                        #((top))
                                                        #("i4410"))
                                                      #(ribcage
                                                        #(k filename)
                                                        #((top) (top))
                                                        #("i4406" "i4407"))
                                                      #(ribcage
                                                        (read-file)
                                                        ((top))
                                                        ("i4390"))
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4389")))
                                                     (hygiene guile))
                                                  #{exp\ 4416}#))
                                          #{tmp\ 4414}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{tmp\ 4413}#)))
                               ($sc-dispatch #{tmp\ 4413}# (quote each-any))))
                            (#{read-file\ 4391}#
                              #{fn\ 4411}#
                              #{filename\ 4409}#))))
                       #{tmp\ 4405}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 4404}#)))
            ($sc-dispatch #{tmp\ 4404}# (quote (any any)))))
         #{x\ 4388}#)))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x\ 4418}#)
      ((lambda (#{tmp\ 4420}#)
         ((lambda (#{tmp\ 4421}#)
            (if #{tmp\ 4421}#
              (apply (lambda (#{k\ 4424}# #{filename\ 4425}#)
                       (let ((#{fn\ 4427}# (syntax->datum #{filename\ 4425}#)))
                         ((lambda (#{tmp\ 4429}#)
                            ((lambda (#{fn\ 4431}#)
                               (list '#(syntax-object
                                        include
                                        ((top)
                                         #(ribcage #(fn) #((top)) #("i4430"))
                                         #(ribcage () () ())
                                         #(ribcage () () ())
                                         #(ribcage #(fn) #((top)) #("i4426"))
                                         #(ribcage
                                           #(k filename)
                                           #((top) (top))
                                           #("i4422" "i4423"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i4419")))
                                        (hygiene guile))
                                     #{fn\ 4431}#))
                             #{tmp\ 4429}#))
                          (datum->syntax
                            #{filename\ 4425}#
                            (let ((#{t\ 4434}#
                                    (%search-load-path #{fn\ 4427}#)))
                              (if #{t\ 4434}#
                                #{t\ 4434}#
                                (syntax-violation
                                  'include-from-path
                                  "file not found in path"
                                  #{x\ 4418}#
                                  #{filename\ 4425}#)))))))
                     #{tmp\ 4421}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4420}#)))
          ($sc-dispatch #{tmp\ 4420}# (quote (any any)))))
       #{x\ 4418}#))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x\ 4436}#)
      ((lambda (#{tmp\ 4438}#)
         ((lambda (#{tmp\ 4439}#)
            (if #{tmp\ 4439}#
              (apply (lambda (#{_\ 4442}# #{e\ 4443}#)
                       (syntax-violation
                         'unquote
                         "expression not valid outside of quasiquote"
                         #{x\ 4436}#))
                     #{tmp\ 4439}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4438}#)))
          ($sc-dispatch #{tmp\ 4438}# (quote (any any)))))
       #{x\ 4436}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x\ 4444}#)
      ((lambda (#{tmp\ 4446}#)
         ((lambda (#{tmp\ 4447}#)
            (if #{tmp\ 4447}#
              (apply (lambda (#{_\ 4450}# #{e\ 4451}#)
                       (syntax-violation
                         'unquote-splicing
                         "expression not valid outside of quasiquote"
                         #{x\ 4444}#))
                     #{tmp\ 4447}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4446}#)))
          ($sc-dispatch #{tmp\ 4446}# (quote (any any)))))
       #{x\ 4444}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x\ 4452}#)
      ((lambda (#{tmp\ 4454}#)
         ((lambda (#{tmp\ 4455}#)
            (if #{tmp\ 4455}#
              (apply (lambda (#{_\ 4460}#
                              #{e\ 4461}#
                              #{m1\ 4462}#
                              #{m2\ 4463}#)
                       ((lambda (#{tmp\ 4465}#)
                          ((lambda (#{body\ 4467}#)
                             (list '#(syntax-object
                                      let
                                      ((top)
                                       #(ribcage #(body) #((top)) #("i4466"))
                                       #(ribcage
                                         #(_ e m1 m2)
                                         #((top) (top) (top) (top))
                                         #("i4456" "i4457" "i4458" "i4459"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4453")))
                                      (hygiene guile))
                                   (list (list '#(syntax-object
                                                  t
                                                  ((top)
                                                   #(ribcage
                                                     #(body)
                                                     #((top))
                                                     #("i4466"))
                                                   #(ribcage
                                                     #(_ e m1 m2)
                                                     #((top) (top) (top) (top))
                                                     #("i4456"
                                                       "i4457"
                                                       "i4458"
                                                       "i4459"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4453")))
                                                  (hygiene guile))
                                               #{e\ 4461}#))
                                   #{body\ 4467}#))
                           #{tmp\ 4465}#))
                        (letrec ((#{f\ 4471}#
                                   (lambda (#{clause\ 4472}# #{clauses\ 4473}#)
                                     (if (null? #{clauses\ 4473}#)
                                       ((lambda (#{tmp\ 4475}#)
                                          ((lambda (#{tmp\ 4476}#)
                                             (if #{tmp\ 4476}#
                                               (apply (lambda (#{e1\ 4479}#
                                                               #{e2\ 4480}#)
                                                        (cons '#(syntax-object
                                                                 begin
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(e1 e2)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4477"
                                                                      "i4478"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f
                                                                      clause
                                                                      clauses)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4468"
                                                                      "i4469"
                                                                      "i4470"))
                                                                  #(ribcage
                                                                    #(_
                                                                      e
                                                                      m1
                                                                      m2)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4456"
                                                                      "i4457"
                                                                      "i4458"
                                                                      "i4459"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i4453")))
                                                                 (hygiene
                                                                   guile))
                                                              (cons #{e1\ 4479}#
                                                                    #{e2\ 4480}#)))
                                                      #{tmp\ 4476}#)
                                               ((lambda (#{tmp\ 4482}#)
                                                  (if #{tmp\ 4482}#
                                                    (apply (lambda (#{k\ 4486}#
                                                                    #{e1\ 4487}#
                                                                    #{e2\ 4488}#)
                                                             (list '#(syntax-object
                                                                      if
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(k
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4483"
                                                                           "i4484"
                                                                           "i4485"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           clause
                                                                           clauses)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4468"
                                                                           "i4469"
                                                                           "i4470"))
                                                                       #(ribcage
                                                                         #(_
                                                                           e
                                                                           m1
                                                                           m2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4456"
                                                                           "i4457"
                                                                           "i4458"
                                                                           "i4459"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i4453")))
                                                                      (hygiene
                                                                        guile))
                                                                   (list '#(syntax-object
                                                                            memv
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4483"
                                                                                 "i4484"
                                                                                 "i4485"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4468"
                                                                                 "i4469"
                                                                                 "i4470"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4456"
                                                                                 "i4457"
                                                                                 "i4458"
                                                                                 "i4459"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4453")))
                                                                            (hygiene
                                                                              guile))
                                                                         '#(syntax-object
                                                                            t
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4483"
                                                                                 "i4484"
                                                                                 "i4485"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4468"
                                                                                 "i4469"
                                                                                 "i4470"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4456"
                                                                                 "i4457"
                                                                                 "i4458"
                                                                                 "i4459"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4453")))
                                                                            (hygiene
                                                                              guile))
                                                                         (list '#(syntax-object
                                                                                  quote
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4483"
                                                                                       "i4484"
                                                                                       "i4485"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4468"
                                                                                       "i4469"
                                                                                       "i4470"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4456"
                                                                                       "i4457"
                                                                                       "i4458"
                                                                                       "i4459"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4453")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               #{k\ 4486}#))
                                                                   (cons '#(syntax-object
                                                                            begin
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4483"
                                                                                 "i4484"
                                                                                 "i4485"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4468"
                                                                                 "i4469"
                                                                                 "i4470"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4456"
                                                                                 "i4457"
                                                                                 "i4458"
                                                                                 "i4459"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4453")))
                                                                            (hygiene
                                                                              guile))
                                                                         (cons #{e1\ 4487}#
                                                                               #{e2\ 4488}#))))
                                                           #{tmp\ 4482}#)
                                                    ((lambda (#{_\ 4492}#)
                                                       (syntax-violation
                                                         'case
                                                         "bad clause"
                                                         #{x\ 4452}#
                                                         #{clause\ 4472}#))
                                                     #{tmp\ 4475}#)))
                                                ($sc-dispatch
                                                  #{tmp\ 4475}#
                                                  '(each-any
                                                     any
                                                     .
                                                     each-any)))))
                                           ($sc-dispatch
                                             #{tmp\ 4475}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   else
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f clause clauses)
                                                      #((top) (top) (top))
                                                      #("i4468"
                                                        "i4469"
                                                        "i4470"))
                                                    #(ribcage
                                                      #(_ e m1 m2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4456"
                                                        "i4457"
                                                        "i4458"
                                                        "i4459"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4453")))
                                                   (hygiene guile)))
                                               any
                                               .
                                               each-any))))
                                        #{clause\ 4472}#)
                                       ((lambda (#{tmp\ 4494}#)
                                          ((lambda (#{rest\ 4496}#)
                                             ((lambda (#{tmp\ 4497}#)
                                                ((lambda (#{tmp\ 4498}#)
                                                   (if #{tmp\ 4498}#
                                                     (apply (lambda (#{k\ 4502}#
                                                                     #{e1\ 4503}#
                                                                     #{e2\ 4504}#)
                                                              (list '#(syntax-object
                                                                       if
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(k
                                                                            e1
                                                                            e2)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4499"
                                                                            "i4500"
                                                                            "i4501"))
                                                                        #(ribcage
                                                                          #(rest)
                                                                          #((top))
                                                                          #("i4495"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(f
                                                                            clause
                                                                            clauses)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4468"
                                                                            "i4469"
                                                                            "i4470"))
                                                                        #(ribcage
                                                                          #(_
                                                                            e
                                                                            m1
                                                                            m2)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4456"
                                                                            "i4457"
                                                                            "i4458"
                                                                            "i4459"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x)
                                                                          #((top))
                                                                          #("i4453")))
                                                                       (hygiene
                                                                         guile))
                                                                    (list '#(syntax-object
                                                                             memv
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4499"
                                                                                  "i4500"
                                                                                  "i4501"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4495"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4468"
                                                                                  "i4469"
                                                                                  "i4470"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4456"
                                                                                  "i4457"
                                                                                  "i4458"
                                                                                  "i4459"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4453")))
                                                                             (hygiene
                                                                               guile))
                                                                          '#(syntax-object
                                                                             t
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4499"
                                                                                  "i4500"
                                                                                  "i4501"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4495"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4468"
                                                                                  "i4469"
                                                                                  "i4470"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4456"
                                                                                  "i4457"
                                                                                  "i4458"
                                                                                  "i4459"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4453")))
                                                                             (hygiene
                                                                               guile))
                                                                          (list '#(syntax-object
                                                                                   quote
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4499"
                                                                                        "i4500"
                                                                                        "i4501"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4495"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4468"
                                                                                        "i4469"
                                                                                        "i4470"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4456"
                                                                                        "i4457"
                                                                                        "i4458"
                                                                                        "i4459"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4453")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                #{k\ 4502}#))
                                                                    (cons '#(syntax-object
                                                                             begin
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4499"
                                                                                  "i4500"
                                                                                  "i4501"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4495"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4468"
                                                                                  "i4469"
                                                                                  "i4470"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4456"
                                                                                  "i4457"
                                                                                  "i4458"
                                                                                  "i4459"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4453")))
                                                                             (hygiene
                                                                               guile))
                                                                          (cons #{e1\ 4503}#
                                                                                #{e2\ 4504}#))
                                                                    #{rest\ 4496}#))
                                                            #{tmp\ 4498}#)
                                                     ((lambda (#{_\ 4508}#)
                                                        (syntax-violation
                                                          'case
                                                          "bad clause"
                                                          #{x\ 4452}#
                                                          #{clause\ 4472}#))
                                                      #{tmp\ 4497}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 4497}#
                                                   '(each-any
                                                      any
                                                      .
                                                      each-any))))
                                              #{clause\ 4472}#))
                                           #{tmp\ 4494}#))
                                        (#{f\ 4471}#
                                          (car #{clauses\ 4473}#)
                                          (cdr #{clauses\ 4473}#)))))))
                          (#{f\ 4471}# #{m1\ 4462}# #{m2\ 4463}#))))
                     #{tmp\ 4455}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4454}#)))
          ($sc-dispatch
            #{tmp\ 4454}#
            '(any any any . each-any))))
       #{x\ 4452}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x\ 4509}#)
      ((lambda (#{tmp\ 4511}#)
         ((lambda (#{tmp\ 4512}#)
            (if #{tmp\ 4512}#
              (apply (lambda (#{_\ 4515}# #{e\ 4516}#)
                       (list '#(syntax-object
                                lambda
                                ((top)
                                 #(ribcage
                                   #(_ e)
                                   #((top) (top))
                                   #("i4513" "i4514"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4510")))
                                (hygiene guile))
                             '(#(syntax-object
                                 x
                                 ((top)
                                  #(ribcage
                                    #(_ e)
                                    #((top) (top))
                                    #("i4513" "i4514"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4510")))
                                 (hygiene guile)))
                             '#((#(syntax-object
                                   macro-type
                                   ((top)
                                    #(ribcage
                                      #(_ e)
                                      #((top) (top))
                                      #("i4513" "i4514"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4510")))
                                   (hygiene guile))
                                 .
                                 #(syntax-object
                                   identifier-syntax
                                   ((top)
                                    #(ribcage
                                      #(_ e)
                                      #((top) (top))
                                      #("i4513" "i4514"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4510")))
                                   (hygiene guile))))
                             (list '#(syntax-object
                                      syntax-case
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i4513" "i4514"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4510")))
                                      (hygiene guile))
                                   '#(syntax-object
                                      x
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i4513" "i4514"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4510")))
                                      (hygiene guile))
                                   '()
                                   (list '#(syntax-object
                                            id
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4513" "i4514"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4510")))
                                            (hygiene guile))
                                         '(#(syntax-object
                                             identifier?
                                             ((top)
                                              #(ribcage
                                                #(_ e)
                                                #((top) (top))
                                                #("i4513" "i4514"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i4510")))
                                             (hygiene guile))
                                           (#(syntax-object
                                              syntax
                                              ((top)
                                               #(ribcage
                                                 #(_ e)
                                                 #((top) (top))
                                                 #("i4513" "i4514"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4510")))
                                              (hygiene guile))
                                            #(syntax-object
                                              id
                                              ((top)
                                               #(ribcage
                                                 #(_ e)
                                                 #((top) (top))
                                                 #("i4513" "i4514"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4510")))
                                              (hygiene guile))))
                                         (list '#(syntax-object
                                                  syntax
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i4513" "i4514"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4510")))
                                                  (hygiene guile))
                                               #{e\ 4516}#))
                                   (list (cons #{_\ 4515}#
                                               '(#(syntax-object
                                                   x
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i4513" "i4514"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4510")))
                                                   (hygiene guile))
                                                 #(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i4513" "i4514"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4510")))
                                                   (hygiene guile))))
                                         (list '#(syntax-object
                                                  syntax
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i4513" "i4514"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4510")))
                                                  (hygiene guile))
                                               (cons #{e\ 4516}#
                                                     '(#(syntax-object
                                                         x
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4513" "i4514"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4510")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4513" "i4514"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4510")))
                                                         (hygiene
                                                           guile)))))))))
                     #{tmp\ 4512}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{tmp\ 4511}#)))
          ($sc-dispatch #{tmp\ 4511}# (quote (any any)))))
       #{x\ 4509}#))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x\ 4517}#)
      ((lambda (#{tmp\ 4519}#)
         ((lambda (#{tmp\ 4520}#)
            (if #{tmp\ 4520}#
              (apply (lambda (#{_\ 4526}#
                              #{id\ 4527}#
                              #{args\ 4528}#
                              #{b0\ 4529}#
                              #{b1\ 4530}#)
                       (list '#(syntax-object
                                define
                                ((top)
                                 #(ribcage
                                   #(_ id args b0 b1)
                                   #((top) (top) (top) (top) (top))
                                   #("i4521" "i4522" "i4523" "i4524" "i4525"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4518")))
                                (hygiene guile))
                             #{id\ 4527}#
                             (cons '#(syntax-object
                                      lambda*
                                      ((top)
                                       #(ribcage
                                         #(_ id args b0 b1)
                                         #((top) (top) (top) (top) (top))
                                         #("i4521"
                                           "i4522"
                                           "i4523"
                                           "i4524"
                                           "i4525"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4518")))
                                      (hygiene guile))
                                   (cons #{args\ 4528}#
                                         (cons #{b0\ 4529}# #{b1\ 4530}#)))))
                     #{tmp\ 4520}#)
              ((lambda (#{tmp\ 4532}#)
                 (if (if #{tmp\ 4532}#
                       (apply (lambda (#{_\ 4536}# #{id\ 4537}# #{val\ 4538}#)
                                (identifier?
                                  '#(syntax-object
                                     x
                                     ((top)
                                      #(ribcage
                                        #(_ id val)
                                        #((top) (top) (top))
                                        #("i4533" "i4534" "i4535"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4518")))
                                     (hygiene guile))))
                              #{tmp\ 4532}#)
                       #f)
                   (apply (lambda (#{_\ 4542}# #{id\ 4543}# #{val\ 4544}#)
                            (list '#(syntax-object
                                     define
                                     ((top)
                                      #(ribcage
                                        #(_ id val)
                                        #((top) (top) (top))
                                        #("i4539" "i4540" "i4541"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4518")))
                                     (hygiene guile))
                                  #{id\ 4543}#
                                  #{val\ 4544}#))
                          #{tmp\ 4532}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{tmp\ 4519}#)))
               ($sc-dispatch
                 #{tmp\ 4519}#
                 '(any any any)))))
          ($sc-dispatch
            #{tmp\ 4519}#
            '(any (any . any) any . each-any))))
       #{x\ 4517}#))))

