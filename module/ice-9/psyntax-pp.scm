(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(let ((session-id-6306 (if #f #f))
      (transformer-environment-6367 (if #f #f)))
  (letrec*
    ((top-level-eval-hook-6304
       (lambda (x-29255 mod-29256)
         (primitive-eval x-29255)))
     (get-global-definition-hook-6308
       (lambda (symbol-17518 module-17519)
         (begin
           (if (if (not module-17519) (current-module) #f)
             (warn "module system is booted, we should have a module"
                   symbol-17518))
           (let ((v-17520
                   (module-variable
                     (if module-17519
                       (resolve-module (cdr module-17519))
                       (current-module))
                     symbol-17518)))
             (if v-17520
               (if (variable-bound? v-17520)
                 (let ((val-17522 (variable-ref v-17520)))
                   (if (macro? val-17522)
                     (if (macro-type val-17522)
                       (cons (macro-type val-17522)
                             (macro-binding val-17522))
                       #f)
                     #f))
                 #f)
               #f)))))
     (maybe-name-value!-6310
       (lambda (name-17799 val-17800)
         (if (if (struct? val-17800)
               (eq? (struct-vtable val-17800)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((meta-17807 (struct-ref val-17800 1)))
             (if (not (assq 'name meta-17807))
               (let ((v-17812
                       (cons (cons 'name name-17799) meta-17807)))
                 (struct-set! val-17800 1 v-17812)))))))
     (build-application-6312
       (lambda (source-17524 fun-exp-17525 arg-exps-17526)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 11)
           source-17524
           fun-exp-17525
           arg-exps-17526)))
     (build-conditional-6313
       (lambda (source-17532
                test-exp-17533
                then-exp-17534
                else-exp-17535)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 10)
           source-17532
           test-exp-17533
           then-exp-17534
           else-exp-17535)))
     (build-dynlet-6314
       (lambda (source-17542 fluids-17543 vals-17544 body-17545)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 17)
           source-17542
           fluids-17543
           vals-17544
           body-17545)))
     (build-lexical-reference-6315
       (lambda (type-29257 source-29258 name-29259 var-29260)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           source-29258
           name-29259
           var-29260)))
     (build-lexical-assignment-6316
       (lambda (source-17552 name-17553 var-17554 exp-17555)
         (begin
           (if (if (struct? exp-17555)
                 (eq? (struct-vtable exp-17555)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-17571 (struct-ref exp-17555 1)))
               (if (not (assq 'name meta-17571))
                 (let ((v-17578
                         (cons (cons 'name name-17553) meta-17571)))
                   (struct-set! exp-17555 1 v-17578)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 4)
             source-17552
             name-17553
             var-17554
             exp-17555))))
     (analyze-variable-6317
       (lambda (mod-29266
                var-29267
                modref-cont-29268
                bare-cont-29269)
         (if (not mod-29266)
           (bare-cont-29269 var-29267)
           (let ((kind-29270 (car mod-29266))
                 (mod-29271 (cdr mod-29266)))
             (if (eqv? kind-29270 'public)
               (modref-cont-29268 mod-29271 var-29267 #t)
               (if (eqv? kind-29270 'private)
                 (if (not (equal? mod-29271 (module-name (current-module))))
                   (modref-cont-29268 mod-29271 var-29267 #f)
                   (bare-cont-29269 var-29267))
                 (if (eqv? kind-29270 'bare)
                   (bare-cont-29269 var-29267)
                   (if (eqv? kind-29270 'hygiene)
                     (if (if (not (equal?
                                    mod-29271
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module mod-29271)
                             var-29267)
                           #f)
                       (modref-cont-29268 mod-29271 var-29267 #f)
                       (bare-cont-29269 var-29267))
                     (syntax-violation
                       #f
                       "bad module kind"
                       var-29267
                       mod-29271)))))))))
     (build-global-reference-6318
       (lambda (source-29298 var-29299 mod-29300)
         (analyze-variable-6317
           mod-29300
           var-29299
           (lambda (mod-29303 var-29304 public?-29305)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               source-29298
               mod-29303
               var-29304
               public?-29305))
           (lambda (var-29313)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               source-29298
               var-29313)))))
     (build-global-assignment-6319
       (lambda (source-17587 var-17588 exp-17589 mod-17590)
         (begin
           (if (if (struct? exp-17589)
                 (eq? (struct-vtable exp-17589)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-17606 (struct-ref exp-17589 1)))
               (if (not (assq 'name meta-17606))
                 (let ((v-17613
                         (cons (cons 'name var-17588) meta-17606)))
                   (struct-set! exp-17589 1 v-17613)))))
           (analyze-variable-6317
             mod-17590
             var-17588
             (lambda (mod-17618 var-17619 public?-17620)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 6)
                 source-17587
                 mod-17618
                 var-17619
                 public?-17620
                 exp-17589))
             (lambda (var-17628)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 8)
                 source-17587
                 var-17628
                 exp-17589))))))
     (build-global-definition-6320
       (lambda (source-29319 var-29320 exp-29321)
         (begin
           (if (if (struct? exp-29321)
                 (eq? (struct-vtable exp-29321)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-29337 (struct-ref exp-29321 1)))
               (if (not (assq 'name meta-29337))
                 (let ((v-29344
                         (cons (cons 'name var-29320) meta-29337)))
                   (struct-set! exp-29321 1 v-29344)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             source-29319
             var-29320
             exp-29321))))
     (build-simple-lambda-6321
       (lambda (src-17634
                req-17635
                rest-17636
                vars-17637
                meta-17638
                exp-17639)
         (let ((body-17645
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 14)
                   src-17634
                   req-17635
                   #f
                   rest-17636
                   #f
                   '()
                   vars-17637
                   exp-17639
                   #f)))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             src-17634
             meta-17638
             body-17645))))
     (build-sequence-6326
       (lambda (src-29352 exps-29353)
         (if (null? (cdr exps-29353))
           (car exps-29353)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 12)
             src-29352
             exps-29353))))
     (build-let-6327
       (lambda (src-17657
                ids-17658
                vars-17659
                val-exps-17660
                body-exp-17661)
         (begin
           (for-each
             maybe-name-value!-6310
             ids-17658
             val-exps-17660)
           (if (null? vars-17659)
             body-exp-17661
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               src-17657
               ids-17658
               vars-17659
               val-exps-17660
               body-exp-17661)))))
     (build-named-let-6328
       (lambda (src-17685
                ids-17686
                vars-17687
                val-exps-17688
                body-exp-17689)
         (let ((f-17690 (car vars-17687))
               (f-name-17691 (car ids-17686))
               (vars-17692 (cdr vars-17687))
               (ids-17693 (cdr ids-17686)))
           (let ((proc-17694
                   (let ((body-17714
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 14)
                             src-17685
                             ids-17693
                             #f
                             #f
                             #f
                             '()
                             vars-17692
                             body-exp-17689
                             #f)))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 13)
                       src-17685
                       '()
                       body-17714))))
             (begin
               (if (if (struct? proc-17694)
                     (eq? (struct-vtable proc-17694)
                          (vector-ref %expanded-vtables 13))
                     #f)
                 (let ((meta-17738 (struct-ref proc-17694 1)))
                   (if (not (assq 'name meta-17738))
                     (let ((v-17745
                             (cons (cons 'name f-name-17691) meta-17738)))
                       (struct-set! proc-17694 1 v-17745)))))
               (for-each
                 maybe-name-value!-6310
                 ids-17693
                 val-exps-17688)
               (let ((names-17769 (list f-name-17691))
                     (gensyms-17770 (list f-17690))
                     (vals-17771 (list proc-17694))
                     (body-17772
                       (let ((fun-exp-17776
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 3)
                                 src-17685
                                 f-name-17691
                                 f-17690)))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           src-17685
                           fun-exp-17776
                           val-exps-17688))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 16)
                   src-17685
                   #f
                   names-17769
                   gensyms-17770
                   vals-17771
                   body-17772)))))))
     (build-letrec-6329
       (lambda (src-17792
                in-order?-17793
                ids-17794
                vars-17795
                val-exps-17796
                body-exp-17797)
         (if (null? vars-17795)
           body-exp-17797
           (begin
             (for-each
               maybe-name-value!-6310
               ids-17794
               val-exps-17796)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               src-17792
               in-order?-17793
               ids-17794
               vars-17795
               val-exps-17796
               body-exp-17797)))))
     (source-annotation-6338
       (lambda (x-17823)
         (if (if (vector? x-17823)
               (if (= (vector-length x-17823) 4)
                 (eq? (vector-ref x-17823 0) 'syntax-object)
                 #f)
               #f)
           (source-annotation-6338 (vector-ref x-17823 1))
           (if (pair? x-17823)
             (let ((props-17838 (source-properties x-17823)))
               (if (pair? props-17838) props-17838 #f))
             #f))))
     (extend-env-6339
       (lambda (labels-17840 bindings-17841 r-17842)
         (if (null? labels-17840)
           r-17842
           (extend-env-6339
             (cdr labels-17840)
             (cdr bindings-17841)
             (cons (cons (car labels-17840) (car bindings-17841))
                   r-17842)))))
     (extend-var-env-6340
       (lambda (labels-17843 vars-17844 r-17845)
         (if (null? labels-17843)
           r-17845
           (extend-var-env-6340
             (cdr labels-17843)
             (cdr vars-17844)
             (cons (cons (car labels-17843)
                         (cons 'lexical (car vars-17844)))
                   r-17845)))))
     (macros-only-env-6341
       (lambda (r-17846)
         (if (null? r-17846)
           '()
           (let ((a-17847 (car r-17846)))
             (if (eq? (car (cdr a-17847)) 'macro)
               (cons a-17847
                     (macros-only-env-6341 (cdr r-17846)))
               (macros-only-env-6341 (cdr r-17846)))))))
     (global-extend-6343
       (lambda (type-17849 sym-17850 val-17851)
         (module-define!
           (current-module)
           sym-17850
           (make-syntax-transformer
             sym-17850
             type-17849
             val-17851))))
     (id?-6345
       (lambda (x-11651)
         (if (symbol? x-11651)
           #t
           (if (if (vector? x-11651)
                 (if (= (vector-length x-11651) 4)
                   (eq? (vector-ref x-11651 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref x-11651 1))
             #f))))
     (gen-labels-6348
       (lambda (ls-17861)
         (if (null? ls-17861)
           '()
           (cons (string-append
                   "l-"
                   (session-id-6306)
                   (symbol->string (gensym "-")))
                 (gen-labels-6348 (cdr ls-17861))))))
     (make-binding-wrap-6359
       (lambda (ids-17865 labels-17866 w-17867)
         (if (null? ids-17865)
           w-17867
           (cons (car w-17867)
                 (cons (let ((labelvec-17868 (list->vector labels-17866)))
                         (let ((n-17869 (vector-length labelvec-17868)))
                           (let ((symnamevec-17870 (make-vector n-17869))
                                 (marksvec-17871 (make-vector n-17869)))
                             (begin
                               (letrec*
                                 ((f-17872
                                    (lambda (ids-17875 i-17876)
                                      (if (not (null? ids-17875))
                                        (call-with-values
                                          (lambda ()
                                            (let ((x-17879 (car ids-17875)))
                                              (if (if (vector? x-17879)
                                                    (if (= (vector-length
                                                             x-17879)
                                                           4)
                                                      (eq? (vector-ref
                                                             x-17879
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (values
                                                  (vector-ref x-17879 1)
                                                  (let ((m1-17895
                                                          (car w-17867))
                                                        (m2-17896
                                                          (car (vector-ref
                                                                 x-17879
                                                                 2))))
                                                    (if (null? m2-17896)
                                                      m1-17895
                                                      (append
                                                        m1-17895
                                                        m2-17896))))
                                                (values
                                                  x-17879
                                                  (car w-17867)))))
                                          (lambda (symname-17916 marks-17917)
                                            (begin
                                              (vector-set!
                                                symnamevec-17870
                                                i-17876
                                                symname-17916)
                                              (vector-set!
                                                marksvec-17871
                                                i-17876
                                                marks-17917)
                                              (f-17872
                                                (cdr ids-17875)
                                                (#{1+}# i-17876)))))))))
                                 (f-17872 ids-17865 0))
                               (vector
                                 'ribcage
                                 symnamevec-17870
                                 marksvec-17871
                                 labelvec-17868)))))
                       (cdr w-17867))))))
     (join-wraps-6361
       (lambda (w1-17926 w2-17927)
         (let ((m1-17928 (car w1-17926))
               (s1-17929 (cdr w1-17926)))
           (if (null? m1-17928)
             (if (null? s1-17929)
               w2-17927
               (cons (car w2-17927)
                     (let ((m2-17936 (cdr w2-17927)))
                       (if (null? m2-17936)
                         s1-17929
                         (append s1-17929 m2-17936)))))
             (cons (let ((m2-17945 (car w2-17927)))
                     (if (null? m2-17945)
                       m1-17928
                       (append m1-17928 m2-17945)))
                   (let ((m2-17954 (cdr w2-17927)))
                     (if (null? m2-17954)
                       s1-17929
                       (append s1-17929 m2-17954))))))))
     (same-marks?-6363
       (lambda (x-17959 y-17960)
         (if (eq? x-17959 y-17960)
           (eq? x-17959 y-17960)
           (if (not (null? x-17959))
             (if (not (null? y-17960))
               (if (eq? (car x-17959) (car y-17960))
                 (same-marks?-6363 (cdr x-17959) (cdr y-17960))
                 #f)
               #f)
             #f))))
     (id-var-name-6364
       (lambda (id-17968 w-17969)
         (letrec*
           ((search-17970
              (lambda (sym-18031 subst-18032 marks-18033)
                (if (null? subst-18032)
                  (values #f marks-18033)
                  (let ((fst-18034 (car subst-18032)))
                    (if (eq? fst-18034 'shift)
                      (search-17970
                        sym-18031
                        (cdr subst-18032)
                        (cdr marks-18033))
                      (let ((symnames-18036 (vector-ref fst-18034 1)))
                        (if (vector? symnames-18036)
                          (let ((n-18048 (vector-length symnames-18036)))
                            (letrec*
                              ((f-18049
                                 (lambda (i-18051)
                                   (if (= i-18051 n-18048)
                                     (search-17970
                                       sym-18031
                                       (cdr subst-18032)
                                       marks-18033)
                                     (if (if (eq? (vector-ref
                                                    symnames-18036
                                                    i-18051)
                                                  sym-18031)
                                           (same-marks?-6363
                                             marks-18033
                                             (vector-ref
                                               (vector-ref fst-18034 2)
                                               i-18051))
                                           #f)
                                       (values
                                         (vector-ref
                                           (vector-ref fst-18034 3)
                                           i-18051)
                                         marks-18033)
                                       (f-18049 (#{1+}# i-18051)))))))
                              (f-18049 0)))
                          (letrec*
                            ((f-18084
                               (lambda (symnames-18086 i-18087)
                                 (if (null? symnames-18086)
                                   (search-17970
                                     sym-18031
                                     (cdr subst-18032)
                                     marks-18033)
                                   (if (if (eq? (car symnames-18086) sym-18031)
                                         (same-marks?-6363
                                           marks-18033
                                           (list-ref
                                             (vector-ref fst-18034 2)
                                             i-18087))
                                         #f)
                                     (values
                                       (list-ref
                                         (vector-ref fst-18034 3)
                                         i-18087)
                                       marks-18033)
                                     (f-18084
                                       (cdr symnames-18086)
                                       (#{1+}# i-18087)))))))
                            (f-18084 symnames-18036 0))))))))))
           (if (symbol? id-17968)
             (let ((t-17973
                     (search-17970
                       id-17968
                       (cdr w-17969)
                       (car w-17969))))
               (if t-17973 t-17973 id-17968))
             (if (if (vector? id-17968)
                   (if (= (vector-length id-17968) 4)
                     (eq? (vector-ref id-17968 0) 'syntax-object)
                     #f)
                   #f)
               (let ((id-17988 (vector-ref id-17968 1))
                     (w1-17989 (vector-ref id-17968 2)))
                 (let ((marks-17990
                         (let ((m1-18000 (car w-17969))
                               (m2-18001 (car w1-17989)))
                           (if (null? m2-18001)
                             m1-18000
                             (append m1-18000 m2-18001)))))
                   (call-with-values
                     (lambda ()
                       (search-17970 id-17988 (cdr w-17969) marks-17990))
                     (lambda (new-id-18017 marks-18018)
                       (if new-id-18017
                         new-id-18017
                         (let ((t-18026
                                 (search-17970
                                   id-17988
                                   (cdr w1-17989)
                                   marks-18018)))
                           (if t-18026 t-18026 id-17988)))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 id-17968))))))
     (locally-bound-identifiers-6365
       (lambda (w-18109 mod-18110)
         (letrec*
           ((scan-18111
              (lambda (subst-18116 results-18117)
                (if (null? subst-18116)
                  results-18117
                  (let ((fst-18118 (car subst-18116)))
                    (if (eq? fst-18118 'shift)
                      (scan-18111 (cdr subst-18116) results-18117)
                      (let ((symnames-18120 (vector-ref fst-18118 1))
                            (marks-18121 (vector-ref fst-18118 2)))
                        (if (vector? symnames-18120)
                          (scan-vector-rib-18113
                            subst-18116
                            symnames-18120
                            marks-18121
                            results-18117)
                          (scan-list-rib-18112
                            subst-18116
                            symnames-18120
                            marks-18121
                            results-18117))))))))
            (scan-list-rib-18112
              (lambda (subst-18219
                       symnames-18220
                       marks-18221
                       results-18222)
                (letrec*
                  ((f-18223
                     (lambda (symnames-18323 marks-18324 results-18325)
                       (if (null? symnames-18323)
                         (scan-18111 (cdr subst-18219) results-18325)
                         (f-18223
                           (cdr symnames-18323)
                           (cdr marks-18324)
                           (cons (wrap-6374
                                   (car symnames-18323)
                                   (let ((w-18333
                                           (cons (car marks-18324)
                                                 subst-18219)))
                                     (cons (cons #f (car w-18333))
                                           (cons 'shift (cdr w-18333))))
                                   mod-18110)
                                 results-18325))))))
                  (f-18223
                    symnames-18220
                    marks-18221
                    results-18222))))
            (scan-vector-rib-18113
              (lambda (subst-18334
                       symnames-18335
                       marks-18336
                       results-18337)
                (let ((n-18338 (vector-length symnames-18335)))
                  (letrec*
                    ((f-18339
                       (lambda (i-18422 results-18423)
                         (if (= i-18422 n-18338)
                           (scan-18111 (cdr subst-18334) results-18423)
                           (f-18339
                             (#{1+}# i-18422)
                             (cons (wrap-6374
                                     (vector-ref symnames-18335 i-18422)
                                     (let ((w-18431
                                             (cons (vector-ref
                                                     marks-18336
                                                     i-18422)
                                                   subst-18334)))
                                       (cons (cons #f (car w-18431))
                                             (cons 'shift (cdr w-18431))))
                                     mod-18110)
                                   results-18423))))))
                    (f-18339 0 results-18337))))))
           (scan-18111 (cdr w-18109) '()))))
     (valid-bound-ids?-6371
       (lambda (ids-18432)
         (if (letrec*
               ((all-ids?-18433
                  (lambda (ids-18595)
                    (if (null? ids-18595)
                      (null? ids-18595)
                      (if (let ((x-18606 (car ids-18595)))
                            (if (symbol? x-18606)
                              #t
                              (if (if (vector? x-18606)
                                    (if (= (vector-length x-18606) 4)
                                      (eq? (vector-ref x-18606 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (symbol? (vector-ref x-18606 1))
                                #f)))
                        (all-ids?-18433 (cdr ids-18595))
                        #f)))))
               (all-ids?-18433 ids-18432))
           (distinct-bound-ids?-6372 ids-18432)
           #f)))
     (distinct-bound-ids?-6372
       (lambda (ids-18734)
         (letrec*
           ((distinct?-18735
              (lambda (ids-18847)
                (if (null? ids-18847)
                  (null? ids-18847)
                  (if (not (bound-id-member?-6373
                             (car ids-18847)
                             (cdr ids-18847)))
                    (distinct?-18735 (cdr ids-18847))
                    #f)))))
           (distinct?-18735 ids-18734))))
     (bound-id-member?-6373
       (lambda (x-19057 list-19058)
         (if (not (null? list-19058))
           (let ((t-19059
                   (let ((j-19140 (car list-19058)))
                     (if (if (if (vector? x-19057)
                               (if (= (vector-length x-19057) 4)
                                 (eq? (vector-ref x-19057 0) 'syntax-object)
                                 #f)
                               #f)
                           (if (vector? j-19140)
                             (if (= (vector-length j-19140) 4)
                               (eq? (vector-ref j-19140 0) 'syntax-object)
                               #f)
                             #f)
                           #f)
                       (if (eq? (vector-ref x-19057 1)
                                (vector-ref j-19140 1))
                         (same-marks?-6363
                           (car (vector-ref x-19057 2))
                           (car (vector-ref j-19140 2)))
                         #f)
                       (eq? x-19057 j-19140)))))
             (if t-19059
               t-19059
               (bound-id-member?-6373 x-19057 (cdr list-19058))))
           #f)))
     (wrap-6374
       (lambda (x-19184 w-19185 defmod-19186)
         (if (if (null? (car w-19185))
               (null? (cdr w-19185))
               #f)
           x-19184
           (if (if (vector? x-19184)
                 (if (= (vector-length x-19184) 4)
                   (eq? (vector-ref x-19184 0) 'syntax-object)
                   #f)
                 #f)
             (let ((expression-19200 (vector-ref x-19184 1))
                   (wrap-19201
                     (join-wraps-6361 w-19185 (vector-ref x-19184 2)))
                   (module-19202 (vector-ref x-19184 3)))
               (vector
                 'syntax-object
                 expression-19200
                 wrap-19201
                 module-19202))
             (if (null? x-19184)
               x-19184
               (vector
                 'syntax-object
                 x-19184
                 w-19185
                 defmod-19186))))))
     (source-wrap-6375
       (lambda (x-19219 w-19220 s-19221 defmod-19222)
         (wrap-6374
           (begin
             (if (if (pair? x-19219) s-19221 #f)
               (set-source-properties! x-19219 s-19221))
             x-19219)
           w-19220
           defmod-19222)))
     (expand-sequence-6376
       (lambda (body-29358 r-29359 w-29360 s-29361 mod-29362)
         (build-sequence-6326
           s-29361
           (letrec*
             ((dobody-29442
                (lambda (body-29782 r-29783 w-29784 mod-29785)
                  (if (null? body-29782)
                    '()
                    (let ((first-29786
                            (let ((e-29790 (car body-29782)))
                              (call-with-values
                                (lambda ()
                                  (syntax-type-6380
                                    e-29790
                                    r-29783
                                    w-29784
                                    (source-annotation-6338 e-29790)
                                    #f
                                    mod-29785
                                    #f))
                                (lambda (type-29797
                                         value-29798
                                         form-29799
                                         e-29800
                                         w-29801
                                         s-29802
                                         mod-29803)
                                  (expand-expr-6382
                                    type-29797
                                    value-29798
                                    form-29799
                                    e-29800
                                    r-29783
                                    w-29801
                                    s-29802
                                    mod-29803))))))
                      (cons first-29786
                            (dobody-29442
                              (cdr body-29782)
                              r-29783
                              w-29784
                              mod-29785)))))))
             (dobody-29442
               body-29358
               r-29359
               w-29360
               mod-29362)))))
     (expand-top-sequence-6377
       (lambda (body-19240
                r-19241
                w-19242
                s-19243
                m-19244
                esew-19245
                mod-19246)
         (letrec*
           ((scan-19247
              (lambda (body-19378
                       r-19379
                       w-19380
                       s-19381
                       m-19382
                       esew-19383
                       mod-19384
                       exps-19385)
                (if (null? body-19378)
                  exps-19385
                  (call-with-values
                    (lambda ()
                      (call-with-values
                        (lambda ()
                          (let ((e-19386 (car body-19378)))
                            (syntax-type-6380
                              e-19386
                              r-19379
                              w-19380
                              (let ((t-19390 (source-annotation-6338 e-19386)))
                                (if t-19390 t-19390 s-19381))
                              #f
                              mod-19384
                              #f)))
                        (lambda (type-19625
                                 value-19626
                                 form-19627
                                 e-19628
                                 w-19629
                                 s-19630
                                 mod-19631)
                          (if (eqv? type-19625 'begin-form)
                            (let ((tmp-19640 ($sc-dispatch e-19628 '(_))))
                              (if tmp-19640
                                (@apply (lambda () exps-19385) tmp-19640)
                                (let ((tmp-19644
                                        ($sc-dispatch
                                          e-19628
                                          '(_ any . each-any))))
                                  (if tmp-19644
                                    (@apply
                                      (lambda (e1-19648 e2-19649)
                                        (scan-19247
                                          (cons e1-19648 e2-19649)
                                          r-19379
                                          w-19629
                                          s-19630
                                          m-19382
                                          esew-19383
                                          mod-19631
                                          exps-19385))
                                      tmp-19644)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      e-19628)))))
                            (if (eqv? type-19625 'local-syntax-form)
                              (expand-local-syntax-6386
                                value-19626
                                e-19628
                                r-19379
                                w-19629
                                s-19630
                                mod-19631
                                (lambda (body-19667
                                         r-19668
                                         w-19669
                                         s-19670
                                         mod-19671)
                                  (scan-19247
                                    body-19667
                                    r-19668
                                    w-19669
                                    s-19670
                                    m-19382
                                    esew-19383
                                    mod-19671
                                    exps-19385)))
                              (if (eqv? type-19625 'eval-when-form)
                                (let ((tmp-19679
                                        ($sc-dispatch
                                          e-19628
                                          '(_ each-any any . each-any))))
                                  (if tmp-19679
                                    (@apply
                                      (lambda (x-19683 e1-19684 e2-19685)
                                        (let ((when-list-19686
                                                (parse-when-list-6379
                                                  e-19628
                                                  x-19683))
                                              (body-19687
                                                (cons e1-19684 e2-19685)))
                                          (if (eq? m-19382 'e)
                                            (if (memq 'eval when-list-19686)
                                              (scan-19247
                                                body-19687
                                                r-19379
                                                w-19629
                                                s-19630
                                                (if (memq 'expand
                                                          when-list-19686)
                                                  'c&e
                                                  'e)
                                                '(eval)
                                                mod-19631
                                                exps-19385)
                                              (begin
                                                (if (memq 'expand
                                                          when-list-19686)
                                                  (let ((x-19764
                                                          (expand-top-sequence-6377
                                                            body-19687
                                                            r-19379
                                                            w-19629
                                                            s-19630
                                                            'e
                                                            '(eval)
                                                            mod-19631)))
                                                    (primitive-eval x-19764)))
                                                exps-19385))
                                            (if (memq 'load when-list-19686)
                                              (if (let ((t-19790
                                                          (memq 'compile
                                                                when-list-19686)))
                                                    (if t-19790
                                                      t-19790
                                                      (let ((t-19839
                                                              (memq 'expand
                                                                    when-list-19686)))
                                                        (if t-19839
                                                          t-19839
                                                          (if (eq? m-19382
                                                                   'c&e)
                                                            (memq 'eval
                                                                  when-list-19686)
                                                            #f)))))
                                                (scan-19247
                                                  body-19687
                                                  r-19379
                                                  w-19629
                                                  s-19630
                                                  'c&e
                                                  '(compile load)
                                                  mod-19631
                                                  exps-19385)
                                                (if (if (eq? m-19382 'c)
                                                      #t
                                                      (eq? m-19382 'c&e))
                                                  (scan-19247
                                                    body-19687
                                                    r-19379
                                                    w-19629
                                                    s-19630
                                                    'c
                                                    '(load)
                                                    mod-19631
                                                    exps-19385)
                                                  exps-19385))
                                              (if (let ((t-19968
                                                          (memq 'compile
                                                                when-list-19686)))
                                                    (if t-19968
                                                      t-19968
                                                      (let ((t-20017
                                                              (memq 'expand
                                                                    when-list-19686)))
                                                        (if t-20017
                                                          t-20017
                                                          (if (eq? m-19382
                                                                   'c&e)
                                                            (memq 'eval
                                                                  when-list-19686)
                                                            #f)))))
                                                (begin
                                                  (let ((x-20141
                                                          (expand-top-sequence-6377
                                                            body-19687
                                                            r-19379
                                                            w-19629
                                                            s-19630
                                                            'e
                                                            '(eval)
                                                            mod-19631)))
                                                    (primitive-eval x-20141))
                                                  exps-19385)
                                                exps-19385)))))
                                      tmp-19679)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      e-19628)))
                                (if (if (eqv? type-19625 'define-syntax-form)
                                      #t
                                      (eqv? type-19625
                                            'define-syntax-parameter-form))
                                  (let ((n-20190
                                          (id-var-name-6364
                                            value-19626
                                            w-19629))
                                        (r-20191
                                          (macros-only-env-6341 r-19379)))
                                    (if (eqv? m-19382 'c)
                                      (if (memq 'compile esew-19383)
                                        (let ((e-20199
                                                (expand-install-global-6378
                                                  n-20190
                                                  (expand-6381
                                                    e-19628
                                                    r-20191
                                                    w-19629
                                                    mod-19631))))
                                          (begin
                                            (top-level-eval-hook-6304
                                              e-20199
                                              mod-19631)
                                            (if (memq 'load esew-19383)
                                              (cons e-20199 exps-19385)
                                              exps-19385)))
                                        (if (memq 'load esew-19383)
                                          (cons (expand-install-global-6378
                                                  n-20190
                                                  (expand-6381
                                                    e-19628
                                                    r-20191
                                                    w-19629
                                                    mod-19631))
                                                exps-19385)
                                          exps-19385))
                                      (if (eqv? m-19382 'c&e)
                                        (let ((e-20844
                                                (expand-install-global-6378
                                                  n-20190
                                                  (expand-6381
                                                    e-19628
                                                    r-20191
                                                    w-19629
                                                    mod-19631))))
                                          (begin
                                            (top-level-eval-hook-6304
                                              e-20844
                                              mod-19631)
                                            (cons e-20844 exps-19385)))
                                        (begin
                                          (if (memq 'eval esew-19383)
                                            (top-level-eval-hook-6304
                                              (expand-install-global-6378
                                                n-20190
                                                (expand-6381
                                                  e-19628
                                                  r-20191
                                                  w-19629
                                                  mod-19631))
                                              mod-19631))
                                          exps-19385))))
                                  (if (eqv? type-19625 'define-form)
                                    (let ((n-21521
                                            (id-var-name-6364
                                              value-19626
                                              w-19629)))
                                      (let ((type-21522
                                              (car (let ((t-21530
                                                           (assq n-21521
                                                                 r-19379)))
                                                     (if t-21530
                                                       (cdr t-21530)
                                                       (if (symbol? n-21521)
                                                         (let ((t-21536
                                                                 (get-global-definition-hook-6308
                                                                   n-21521
                                                                   mod-19631)))
                                                           (if t-21536
                                                             t-21536
                                                             '(global)))
                                                         '(displaced-lexical)))))))
                                        (if (if (eqv? type-21522 'global)
                                              #t
                                              (if (eqv? type-21522 'core)
                                                #t
                                                (if (eqv? type-21522 'macro)
                                                  #t
                                                  (eqv? type-21522
                                                        'module-ref))))
                                          (begin
                                            (if (if (if (eq? m-19382 'c)
                                                      #t
                                                      (eq? m-19382 'c&e))
                                                  (if (not (module-local-variable
                                                             (current-module)
                                                             n-21521))
                                                    (current-module)
                                                    #f)
                                                  #f)
                                              (let ((old-21569
                                                      (module-variable
                                                        (current-module)
                                                        n-21521)))
                                                (if (if (variable? old-21569)
                                                      (variable-bound?
                                                        old-21569)
                                                      #f)
                                                  (module-define!
                                                    (current-module)
                                                    n-21521
                                                    (variable-ref old-21569))
                                                  (module-add!
                                                    (current-module)
                                                    n-21521
                                                    (make-undefined-variable)))))
                                            (cons (if (eq? m-19382 'c&e)
                                                    (let ((x-22010
                                                            (build-global-definition-6320
                                                              s-19630
                                                              n-21521
                                                              (expand-6381
                                                                e-19628
                                                                r-19379
                                                                w-19629
                                                                mod-19631))))
                                                      (begin
                                                        (top-level-eval-hook-6304
                                                          x-22010
                                                          mod-19631)
                                                        x-22010))
                                                    (lambda ()
                                                      (build-global-definition-6320
                                                        s-19630
                                                        n-21521
                                                        (expand-6381
                                                          e-19628
                                                          r-19379
                                                          w-19629
                                                          mod-19631))))
                                                  exps-19385))
                                          (if (eqv? type-21522
                                                    'displaced-lexical)
                                            (syntax-violation
                                              #f
                                              "identifier out of context"
                                              (wrap-6374
                                                (begin
                                                  (if (if (pair? form-19627)
                                                        s-19630
                                                        #f)
                                                    (set-source-properties!
                                                      form-19627
                                                      s-19630))
                                                  form-19627)
                                                w-19629
                                                mod-19631)
                                              (wrap-6374
                                                value-19626
                                                w-19629
                                                mod-19631))
                                            (syntax-violation
                                              #f
                                              "cannot define keyword at top level"
                                              (wrap-6374
                                                (begin
                                                  (if (if (pair? form-19627)
                                                        s-19630
                                                        #f)
                                                    (set-source-properties!
                                                      form-19627
                                                      s-19630))
                                                  form-19627)
                                                w-19629
                                                mod-19631)
                                              (wrap-6374
                                                value-19626
                                                w-19629
                                                mod-19631))))))
                                    (cons (if (eq? m-19382 'c&e)
                                            (let ((x-22512
                                                    (expand-expr-6382
                                                      type-19625
                                                      value-19626
                                                      form-19627
                                                      e-19628
                                                      r-19379
                                                      w-19629
                                                      s-19630
                                                      mod-19631)))
                                              (begin
                                                (primitive-eval x-22512)
                                                x-22512))
                                            (lambda ()
                                              (expand-expr-6382
                                                type-19625
                                                value-19626
                                                form-19627
                                                e-19628
                                                r-19379
                                                w-19629
                                                s-19630
                                                mod-19631)))
                                          exps-19385)))))))))
                    (lambda (exps-22517)
                      (scan-19247
                        (cdr body-19378)
                        r-19379
                        w-19380
                        s-19381
                        m-19382
                        esew-19383
                        mod-19384
                        exps-22517)))))))
           (call-with-values
             (lambda ()
               (scan-19247
                 body-19240
                 r-19241
                 w-19242
                 s-19243
                 m-19244
                 esew-19245
                 mod-19246
                 '()))
             (lambda (exps-19250)
               (if (null? exps-19250)
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 0)
                   s-19243)
                 (build-sequence-6326
                   s-19243
                   (letrec*
                     ((lp-19290
                        (lambda (in-19374 out-19375)
                          (if (null? in-19374)
                            out-19375
                            (let ((e-19376 (car in-19374)))
                              (lp-19290
                                (cdr in-19374)
                                (cons (if (procedure? e-19376)
                                        (e-19376)
                                        e-19376)
                                      out-19375)))))))
                     (lp-19290 exps-19250 '())))))))))
     (expand-install-global-6378
       (lambda (name-22518 e-22519)
         (let ((exp-22525
                 (let ((fun-exp-22535
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'make-syntax-transformer)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'make-syntax-transformer
                             #f)))
                       (arg-exps-22536
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 name-22518)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               e-22519)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     fun-exp-22535
                     arg-exps-22536))))
           (begin
             (if (if (struct? exp-22525)
                   (eq? (struct-vtable exp-22525)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((meta-22577 (struct-ref exp-22525 1)))
                 (if (not (assq 'name meta-22577))
                   (let ((v-22584
                           (cons (cons 'name name-22518) meta-22577)))
                     (struct-set! exp-22525 1 v-22584)))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #f
               name-22518
               exp-22525)))))
     (parse-when-list-6379
       (lambda (e-22595 when-list-22596)
         (let ((result-22597 (strip-6394 when-list-22596 '(()))))
           (letrec*
             ((lp-22598
                (lambda (l-22652)
                  (if (null? l-22652)
                    result-22597
                    (if (let ((t-22654 (car l-22652)))
                          (if (eq? t-22654 'compile)
                            #t
                            (if (eq? t-22654 'load)
                              #t
                              (if (eq? t-22654 'eval)
                                #t
                                (eq? t-22654 'expand)))))
                      (lp-22598 (cdr l-22652))
                      (syntax-violation
                        'eval-when
                        "invalid situation"
                        e-22595
                        (car l-22652)))))))
             (lp-22598 result-22597)))))
     (syntax-type-6380
       (lambda (e-22656
                r-22657
                w-22658
                s-22659
                rib-22660
                mod-22661
                for-car?-22662)
         (if (symbol? e-22656)
           (let ((n-22663 (id-var-name-6364 e-22656 w-22658)))
             (let ((b-22664
                     (let ((t-22673 (assq n-22663 r-22657)))
                       (if t-22673
                         (cdr t-22673)
                         (if (symbol? n-22663)
                           (let ((t-22679
                                   (get-global-definition-hook-6308
                                     n-22663
                                     mod-22661)))
                             (if t-22679 t-22679 '(global)))
                           '(displaced-lexical))))))
               (let ((type-22665 (car b-22664)))
                 (if (eqv? type-22665 'lexical)
                   (values
                     type-22665
                     (cdr b-22664)
                     e-22656
                     e-22656
                     w-22658
                     s-22659
                     mod-22661)
                   (if (eqv? type-22665 'global)
                     (values
                       type-22665
                       n-22663
                       e-22656
                       e-22656
                       w-22658
                       s-22659
                       mod-22661)
                     (if (eqv? type-22665 'macro)
                       (if for-car?-22662
                         (values
                           type-22665
                           (cdr b-22664)
                           e-22656
                           e-22656
                           w-22658
                           s-22659
                           mod-22661)
                         (syntax-type-6380
                           (expand-macro-6384
                             (cdr b-22664)
                             e-22656
                             r-22657
                             w-22658
                             s-22659
                             rib-22660
                             mod-22661)
                           r-22657
                           '(())
                           s-22659
                           rib-22660
                           mod-22661
                           #f))
                       (values
                         type-22665
                         (cdr b-22664)
                         e-22656
                         e-22656
                         w-22658
                         s-22659
                         mod-22661)))))))
           (if (pair? e-22656)
             (let ((first-22707 (car e-22656)))
               (call-with-values
                 (lambda ()
                   (syntax-type-6380
                     first-22707
                     r-22657
                     w-22658
                     s-22659
                     rib-22660
                     mod-22661
                     #t))
                 (lambda (ftype-22709
                          fval-22710
                          fform-22711
                          fe-22712
                          fw-22713
                          fs-22714
                          fmod-22715)
                   (if (eqv? ftype-22709 'lexical)
                     (values
                       'lexical-call
                       fval-22710
                       e-22656
                       e-22656
                       w-22658
                       s-22659
                       mod-22661)
                     (if (eqv? ftype-22709 'global)
                       (values
                         'global-call
                         (vector
                           'syntax-object
                           fval-22710
                           w-22658
                           fmod-22715)
                         e-22656
                         e-22656
                         w-22658
                         s-22659
                         mod-22661)
                       (if (eqv? ftype-22709 'macro)
                         (syntax-type-6380
                           (expand-macro-6384
                             fval-22710
                             e-22656
                             r-22657
                             w-22658
                             s-22659
                             rib-22660
                             mod-22661)
                           r-22657
                           '(())
                           s-22659
                           rib-22660
                           mod-22661
                           for-car?-22662)
                         (if (eqv? ftype-22709 'module-ref)
                           (call-with-values
                             (lambda () (fval-22710 e-22656 r-22657 w-22658))
                             (lambda (e-22749
                                      r-22750
                                      w-22751
                                      s-22752
                                      mod-22753)
                               (syntax-type-6380
                                 e-22749
                                 r-22750
                                 w-22751
                                 s-22752
                                 rib-22660
                                 mod-22753
                                 for-car?-22662)))
                           (if (eqv? ftype-22709 'core)
                             (values
                               'core-form
                               fval-22710
                               e-22656
                               e-22656
                               w-22658
                               s-22659
                               mod-22661)
                             (if (eqv? ftype-22709 'local-syntax)
                               (values
                                 'local-syntax-form
                                 fval-22710
                                 e-22656
                                 e-22656
                                 w-22658
                                 s-22659
                                 mod-22661)
                               (if (eqv? ftype-22709 'begin)
                                 (values
                                   'begin-form
                                   #f
                                   e-22656
                                   e-22656
                                   w-22658
                                   s-22659
                                   mod-22661)
                                 (if (eqv? ftype-22709 'eval-when)
                                   (values
                                     'eval-when-form
                                     #f
                                     e-22656
                                     e-22656
                                     w-22658
                                     s-22659
                                     mod-22661)
                                   (if (eqv? ftype-22709 'define)
                                     (let ((tmp-22785
                                             ($sc-dispatch
                                               e-22656
                                               '(_ any any))))
                                       (if (if tmp-22785
                                             (@apply
                                               (lambda (name-22789 val-22790)
                                                 (if (symbol? name-22789)
                                                   #t
                                                   (if (if (vector? name-22789)
                                                         (if (= (vector-length
                                                                  name-22789)
                                                                4)
                                                           (eq? (vector-ref
                                                                  name-22789
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         name-22789
                                                         1))
                                                     #f)))
                                               tmp-22785)
                                             #f)
                                         (@apply
                                           (lambda (name-22817 val-22818)
                                             (values
                                               'define-form
                                               name-22817
                                               e-22656
                                               val-22818
                                               w-22658
                                               s-22659
                                               mod-22661))
                                           tmp-22785)
                                         (let ((tmp-22819
                                                 ($sc-dispatch
                                                   e-22656
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if tmp-22819
                                                 (@apply
                                                   (lambda (name-22823
                                                            args-22824
                                                            e1-22825
                                                            e2-22826)
                                                     (if (if (symbol?
                                                               name-22823)
                                                           #t
                                                           (if (if (vector?
                                                                     name-22823)
                                                                 (if (= (vector-length
                                                                          name-22823)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          name-22823
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 name-22823
                                                                 1))
                                                             #f))
                                                       (valid-bound-ids?-6371
                                                         (letrec*
                                                           ((lvl-22975
                                                              (lambda (vars-22977
                                                                       ls-22978
                                                                       w-22979)
                                                                (if (pair? vars-22977)
                                                                  (lvl-22975
                                                                    (cdr vars-22977)
                                                                    (cons (wrap-6374
                                                                            (car vars-22977)
                                                                            w-22979
                                                                            #f)
                                                                          ls-22978)
                                                                    w-22979)
                                                                  (if (if (symbol?
                                                                            vars-22977)
                                                                        #t
                                                                        (if (if (vector?
                                                                                  vars-22977)
                                                                              (if (= (vector-length
                                                                                       vars-22977)
                                                                                     4)
                                                                                (eq? (vector-ref
                                                                                       vars-22977
                                                                                       0)
                                                                                     'syntax-object)
                                                                                #f)
                                                                              #f)
                                                                          (symbol?
                                                                            (vector-ref
                                                                              vars-22977
                                                                              1))
                                                                          #f))
                                                                    (cons (wrap-6374
                                                                            vars-22977
                                                                            w-22979
                                                                            #f)
                                                                          ls-22978)
                                                                    (if (null? vars-22977)
                                                                      ls-22978
                                                                      (if (if (vector?
                                                                                vars-22977)
                                                                            (if (= (vector-length
                                                                                     vars-22977)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     vars-22977
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (lvl-22975
                                                                          (vector-ref
                                                                            vars-22977
                                                                            1)
                                                                          ls-22978
                                                                          (join-wraps-6361
                                                                            w-22979
                                                                            (vector-ref
                                                                              vars-22977
                                                                              2)))
                                                                        (cons vars-22977
                                                                              ls-22978))))))))
                                                           (lvl-22975
                                                             args-22824
                                                             '()
                                                             '(()))))
                                                       #f))
                                                   tmp-22819)
                                                 #f)
                                             (@apply
                                               (lambda (name-23023
                                                        args-23024
                                                        e1-23025
                                                        e2-23026)
                                                 (values
                                                   'define-form
                                                   (wrap-6374
                                                     name-23023
                                                     w-22658
                                                     mod-22661)
                                                   (wrap-6374
                                                     e-22656
                                                     w-22658
                                                     mod-22661)
                                                   (let ((e-23034
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-3952"
                                                                         "l-*-3953"
                                                                         "l-*-3954"
                                                                         "l-*-3955"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(key)
                                                                       #((m-*-3917
                                                                           top))
                                                                       #("l-*-3918"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fform
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-3910"
                                                                         "l-*-3911"
                                                                         "l-*-3912"
                                                                         "l-*-3913"
                                                                         "l-*-3914"
                                                                         "l-*-3915"
                                                                         "l-*-3916"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("l-*-3901"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-3877"
                                                                         "l-*-3878"
                                                                         "l-*-3879"
                                                                         "l-*-3880"
                                                                         "l-*-3881"
                                                                         "l-*-3882"
                                                                         "l-*-3883"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         session-id
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-2527"
                                                                        "l-*-2525"
                                                                        "l-*-2523"
                                                                        "l-*-2521"
                                                                        "l-*-2519"
                                                                        "l-*-2517"
                                                                        "l-*-2515"
                                                                        "l-*-2513"
                                                                        "l-*-2511"
                                                                        "l-*-2509"
                                                                        "l-*-2507"
                                                                        "l-*-2505"
                                                                        "l-*-2503"
                                                                        "l-*-2501"
                                                                        "l-*-2499"
                                                                        "l-*-2497"
                                                                        "l-*-2495"
                                                                        "l-*-2493"
                                                                        "l-*-2491"
                                                                        "l-*-2489"
                                                                        "l-*-2487"
                                                                        "l-*-2485"
                                                                        "l-*-2483"
                                                                        "l-*-2481"
                                                                        "l-*-2479"
                                                                        "l-*-2477"
                                                                        "l-*-2475"
                                                                        "l-*-2473"
                                                                        "l-*-2471"
                                                                        "l-*-2469"
                                                                        "l-*-2467"
                                                                        "l-*-2465"
                                                                        "l-*-2463"
                                                                        "l-*-2461"
                                                                        "l-*-2459"
                                                                        "l-*-2457"
                                                                        "l-*-2455"
                                                                        "l-*-2453"
                                                                        "l-*-2451"
                                                                        "l-*-2450"
                                                                        "l-*-2448"
                                                                        "l-*-2445"
                                                                        "l-*-2444"
                                                                        "l-*-2443"
                                                                        "l-*-2441"
                                                                        "l-*-2440"
                                                                        "l-*-2438"
                                                                        "l-*-2436"
                                                                        "l-*-2434"
                                                                        "l-*-2432"
                                                                        "l-*-2430"
                                                                        "l-*-2428"
                                                                        "l-*-2426"
                                                                        "l-*-2424"
                                                                        "l-*-2421"
                                                                        "l-*-2419"
                                                                        "l-*-2418"
                                                                        "l-*-2416"
                                                                        "l-*-2414"
                                                                        "l-*-2412"
                                                                        "l-*-2410"
                                                                        "l-*-2409"
                                                                        "l-*-2408"
                                                                        "l-*-2407"
                                                                        "l-*-2405"
                                                                        "l-*-2404"
                                                                        "l-*-2401"
                                                                        "l-*-2399"
                                                                        "l-*-2397"
                                                                        "l-*-2395"
                                                                        "l-*-2393"
                                                                        "l-*-2391"
                                                                        "l-*-2389"
                                                                        "l-*-2388"
                                                                        "l-*-2387"
                                                                        "l-*-2385"
                                                                        "l-*-2383"
                                                                        "l-*-2382"
                                                                        "l-*-2379"
                                                                        "l-*-2378"
                                                                        "l-*-2376"
                                                                        "l-*-2374"
                                                                        "l-*-2372"
                                                                        "l-*-2370"
                                                                        "l-*-2368"
                                                                        "l-*-2366"
                                                                        "l-*-2364"
                                                                        "l-*-2362"
                                                                        "l-*-2360"
                                                                        "l-*-2357"
                                                                        "l-*-2355"
                                                                        "l-*-2353"
                                                                        "l-*-2351"
                                                                        "l-*-2349"
                                                                        "l-*-2347"
                                                                        "l-*-2345"
                                                                        "l-*-2343"
                                                                        "l-*-2341"
                                                                        "l-*-2339"
                                                                        "l-*-2337"
                                                                        "l-*-2335"
                                                                        "l-*-2333"
                                                                        "l-*-2331"
                                                                        "l-*-2329"
                                                                        "l-*-2327"
                                                                        "l-*-2325"
                                                                        "l-*-2323"
                                                                        "l-*-2321"
                                                                        "l-*-2319"
                                                                        "l-*-2317"
                                                                        "l-*-2315"
                                                                        "l-*-2313"
                                                                        "l-*-2311"
                                                                        "l-*-2309"
                                                                        "l-*-2307"
                                                                        "l-*-2306"
                                                                        "l-*-2305"
                                                                        "l-*-2304"
                                                                        "l-*-2303"
                                                                        "l-*-2301"
                                                                        "l-*-2299"
                                                                        "l-*-2297"
                                                                        "l-*-2294"
                                                                        "l-*-2292"
                                                                        "l-*-2290"
                                                                        "l-*-2288"
                                                                        "l-*-2286"
                                                                        "l-*-2284"
                                                                        "l-*-2282"
                                                                        "l-*-2280"
                                                                        "l-*-2278"
                                                                        "l-*-2276"
                                                                        "l-*-2274"
                                                                        "l-*-2272"
                                                                        "l-*-2270"
                                                                        "l-*-2268"
                                                                        "l-*-2266"
                                                                        "l-*-2264"
                                                                        "l-*-2262"
                                                                        "l-*-2260"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-2098"
                                                                        "l-*-2097"
                                                                        "l-*-2096")))
                                                                    (hygiene
                                                                      guile))
                                                                 (wrap-6374
                                                                   (cons args-23024
                                                                         (cons e1-23025
                                                                               e2-23026))
                                                                   w-22658
                                                                   mod-22661))))
                                                     (begin
                                                       (if (if (pair? e-23034)
                                                             s-22659
                                                             #f)
                                                         (set-source-properties!
                                                           e-23034
                                                           s-22659))
                                                       e-23034))
                                                   '(())
                                                   s-22659
                                                   mod-22661))
                                               tmp-22819)
                                             (let ((tmp-23041
                                                     ($sc-dispatch
                                                       e-22656
                                                       '(_ any))))
                                               (if (if tmp-23041
                                                     (@apply
                                                       (lambda (name-23045)
                                                         (if (symbol?
                                                               name-23045)
                                                           #t
                                                           (if (if (vector?
                                                                     name-23045)
                                                                 (if (= (vector-length
                                                                          name-23045)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          name-23045
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 name-23045
                                                                 1))
                                                             #f)))
                                                       tmp-23041)
                                                     #f)
                                                 (@apply
                                                   (lambda (name-23072)
                                                     (values
                                                       'define-form
                                                       (wrap-6374
                                                         name-23072
                                                         w-22658
                                                         mod-22661)
                                                       (wrap-6374
                                                         e-22656
                                                         w-22658
                                                         mod-22661)
                                                       '(#(syntax-object
                                                           if
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-3965"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-3917 top))
                                                              #("l-*-3918"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3910"
                                                                "l-*-3911"
                                                                "l-*-3912"
                                                                "l-*-3913"
                                                                "l-*-3914"
                                                                "l-*-3915"
                                                                "l-*-3916"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-3901"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3877"
                                                                "l-*-3878"
                                                                "l-*-3879"
                                                                "l-*-3880"
                                                                "l-*-3881"
                                                                "l-*-3882"
                                                                "l-*-3883"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2527"
                                                               "l-*-2525"
                                                               "l-*-2523"
                                                               "l-*-2521"
                                                               "l-*-2519"
                                                               "l-*-2517"
                                                               "l-*-2515"
                                                               "l-*-2513"
                                                               "l-*-2511"
                                                               "l-*-2509"
                                                               "l-*-2507"
                                                               "l-*-2505"
                                                               "l-*-2503"
                                                               "l-*-2501"
                                                               "l-*-2499"
                                                               "l-*-2497"
                                                               "l-*-2495"
                                                               "l-*-2493"
                                                               "l-*-2491"
                                                               "l-*-2489"
                                                               "l-*-2487"
                                                               "l-*-2485"
                                                               "l-*-2483"
                                                               "l-*-2481"
                                                               "l-*-2479"
                                                               "l-*-2477"
                                                               "l-*-2475"
                                                               "l-*-2473"
                                                               "l-*-2471"
                                                               "l-*-2469"
                                                               "l-*-2467"
                                                               "l-*-2465"
                                                               "l-*-2463"
                                                               "l-*-2461"
                                                               "l-*-2459"
                                                               "l-*-2457"
                                                               "l-*-2455"
                                                               "l-*-2453"
                                                               "l-*-2451"
                                                               "l-*-2450"
                                                               "l-*-2448"
                                                               "l-*-2445"
                                                               "l-*-2444"
                                                               "l-*-2443"
                                                               "l-*-2441"
                                                               "l-*-2440"
                                                               "l-*-2438"
                                                               "l-*-2436"
                                                               "l-*-2434"
                                                               "l-*-2432"
                                                               "l-*-2430"
                                                               "l-*-2428"
                                                               "l-*-2426"
                                                               "l-*-2424"
                                                               "l-*-2421"
                                                               "l-*-2419"
                                                               "l-*-2418"
                                                               "l-*-2416"
                                                               "l-*-2414"
                                                               "l-*-2412"
                                                               "l-*-2410"
                                                               "l-*-2409"
                                                               "l-*-2408"
                                                               "l-*-2407"
                                                               "l-*-2405"
                                                               "l-*-2404"
                                                               "l-*-2401"
                                                               "l-*-2399"
                                                               "l-*-2397"
                                                               "l-*-2395"
                                                               "l-*-2393"
                                                               "l-*-2391"
                                                               "l-*-2389"
                                                               "l-*-2388"
                                                               "l-*-2387"
                                                               "l-*-2385"
                                                               "l-*-2383"
                                                               "l-*-2382"
                                                               "l-*-2379"
                                                               "l-*-2378"
                                                               "l-*-2376"
                                                               "l-*-2374"
                                                               "l-*-2372"
                                                               "l-*-2370"
                                                               "l-*-2368"
                                                               "l-*-2366"
                                                               "l-*-2364"
                                                               "l-*-2362"
                                                               "l-*-2360"
                                                               "l-*-2357"
                                                               "l-*-2355"
                                                               "l-*-2353"
                                                               "l-*-2351"
                                                               "l-*-2349"
                                                               "l-*-2347"
                                                               "l-*-2345"
                                                               "l-*-2343"
                                                               "l-*-2341"
                                                               "l-*-2339"
                                                               "l-*-2337"
                                                               "l-*-2335"
                                                               "l-*-2333"
                                                               "l-*-2331"
                                                               "l-*-2329"
                                                               "l-*-2327"
                                                               "l-*-2325"
                                                               "l-*-2323"
                                                               "l-*-2321"
                                                               "l-*-2319"
                                                               "l-*-2317"
                                                               "l-*-2315"
                                                               "l-*-2313"
                                                               "l-*-2311"
                                                               "l-*-2309"
                                                               "l-*-2307"
                                                               "l-*-2306"
                                                               "l-*-2305"
                                                               "l-*-2304"
                                                               "l-*-2303"
                                                               "l-*-2301"
                                                               "l-*-2299"
                                                               "l-*-2297"
                                                               "l-*-2294"
                                                               "l-*-2292"
                                                               "l-*-2290"
                                                               "l-*-2288"
                                                               "l-*-2286"
                                                               "l-*-2284"
                                                               "l-*-2282"
                                                               "l-*-2280"
                                                               "l-*-2278"
                                                               "l-*-2276"
                                                               "l-*-2274"
                                                               "l-*-2272"
                                                               "l-*-2270"
                                                               "l-*-2268"
                                                               "l-*-2266"
                                                               "l-*-2264"
                                                               "l-*-2262"
                                                               "l-*-2260"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2098"
                                                               "l-*-2097"
                                                               "l-*-2096")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-3965"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-3917 top))
                                                              #("l-*-3918"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3910"
                                                                "l-*-3911"
                                                                "l-*-3912"
                                                                "l-*-3913"
                                                                "l-*-3914"
                                                                "l-*-3915"
                                                                "l-*-3916"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-3901"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3877"
                                                                "l-*-3878"
                                                                "l-*-3879"
                                                                "l-*-3880"
                                                                "l-*-3881"
                                                                "l-*-3882"
                                                                "l-*-3883"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2527"
                                                               "l-*-2525"
                                                               "l-*-2523"
                                                               "l-*-2521"
                                                               "l-*-2519"
                                                               "l-*-2517"
                                                               "l-*-2515"
                                                               "l-*-2513"
                                                               "l-*-2511"
                                                               "l-*-2509"
                                                               "l-*-2507"
                                                               "l-*-2505"
                                                               "l-*-2503"
                                                               "l-*-2501"
                                                               "l-*-2499"
                                                               "l-*-2497"
                                                               "l-*-2495"
                                                               "l-*-2493"
                                                               "l-*-2491"
                                                               "l-*-2489"
                                                               "l-*-2487"
                                                               "l-*-2485"
                                                               "l-*-2483"
                                                               "l-*-2481"
                                                               "l-*-2479"
                                                               "l-*-2477"
                                                               "l-*-2475"
                                                               "l-*-2473"
                                                               "l-*-2471"
                                                               "l-*-2469"
                                                               "l-*-2467"
                                                               "l-*-2465"
                                                               "l-*-2463"
                                                               "l-*-2461"
                                                               "l-*-2459"
                                                               "l-*-2457"
                                                               "l-*-2455"
                                                               "l-*-2453"
                                                               "l-*-2451"
                                                               "l-*-2450"
                                                               "l-*-2448"
                                                               "l-*-2445"
                                                               "l-*-2444"
                                                               "l-*-2443"
                                                               "l-*-2441"
                                                               "l-*-2440"
                                                               "l-*-2438"
                                                               "l-*-2436"
                                                               "l-*-2434"
                                                               "l-*-2432"
                                                               "l-*-2430"
                                                               "l-*-2428"
                                                               "l-*-2426"
                                                               "l-*-2424"
                                                               "l-*-2421"
                                                               "l-*-2419"
                                                               "l-*-2418"
                                                               "l-*-2416"
                                                               "l-*-2414"
                                                               "l-*-2412"
                                                               "l-*-2410"
                                                               "l-*-2409"
                                                               "l-*-2408"
                                                               "l-*-2407"
                                                               "l-*-2405"
                                                               "l-*-2404"
                                                               "l-*-2401"
                                                               "l-*-2399"
                                                               "l-*-2397"
                                                               "l-*-2395"
                                                               "l-*-2393"
                                                               "l-*-2391"
                                                               "l-*-2389"
                                                               "l-*-2388"
                                                               "l-*-2387"
                                                               "l-*-2385"
                                                               "l-*-2383"
                                                               "l-*-2382"
                                                               "l-*-2379"
                                                               "l-*-2378"
                                                               "l-*-2376"
                                                               "l-*-2374"
                                                               "l-*-2372"
                                                               "l-*-2370"
                                                               "l-*-2368"
                                                               "l-*-2366"
                                                               "l-*-2364"
                                                               "l-*-2362"
                                                               "l-*-2360"
                                                               "l-*-2357"
                                                               "l-*-2355"
                                                               "l-*-2353"
                                                               "l-*-2351"
                                                               "l-*-2349"
                                                               "l-*-2347"
                                                               "l-*-2345"
                                                               "l-*-2343"
                                                               "l-*-2341"
                                                               "l-*-2339"
                                                               "l-*-2337"
                                                               "l-*-2335"
                                                               "l-*-2333"
                                                               "l-*-2331"
                                                               "l-*-2329"
                                                               "l-*-2327"
                                                               "l-*-2325"
                                                               "l-*-2323"
                                                               "l-*-2321"
                                                               "l-*-2319"
                                                               "l-*-2317"
                                                               "l-*-2315"
                                                               "l-*-2313"
                                                               "l-*-2311"
                                                               "l-*-2309"
                                                               "l-*-2307"
                                                               "l-*-2306"
                                                               "l-*-2305"
                                                               "l-*-2304"
                                                               "l-*-2303"
                                                               "l-*-2301"
                                                               "l-*-2299"
                                                               "l-*-2297"
                                                               "l-*-2294"
                                                               "l-*-2292"
                                                               "l-*-2290"
                                                               "l-*-2288"
                                                               "l-*-2286"
                                                               "l-*-2284"
                                                               "l-*-2282"
                                                               "l-*-2280"
                                                               "l-*-2278"
                                                               "l-*-2276"
                                                               "l-*-2274"
                                                               "l-*-2272"
                                                               "l-*-2270"
                                                               "l-*-2268"
                                                               "l-*-2266"
                                                               "l-*-2264"
                                                               "l-*-2262"
                                                               "l-*-2260"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2098"
                                                               "l-*-2097"
                                                               "l-*-2096")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-3965"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-3917 top))
                                                              #("l-*-3918"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3910"
                                                                "l-*-3911"
                                                                "l-*-3912"
                                                                "l-*-3913"
                                                                "l-*-3914"
                                                                "l-*-3915"
                                                                "l-*-3916"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-3901"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-3877"
                                                                "l-*-3878"
                                                                "l-*-3879"
                                                                "l-*-3880"
                                                                "l-*-3881"
                                                                "l-*-3882"
                                                                "l-*-3883"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2527"
                                                               "l-*-2525"
                                                               "l-*-2523"
                                                               "l-*-2521"
                                                               "l-*-2519"
                                                               "l-*-2517"
                                                               "l-*-2515"
                                                               "l-*-2513"
                                                               "l-*-2511"
                                                               "l-*-2509"
                                                               "l-*-2507"
                                                               "l-*-2505"
                                                               "l-*-2503"
                                                               "l-*-2501"
                                                               "l-*-2499"
                                                               "l-*-2497"
                                                               "l-*-2495"
                                                               "l-*-2493"
                                                               "l-*-2491"
                                                               "l-*-2489"
                                                               "l-*-2487"
                                                               "l-*-2485"
                                                               "l-*-2483"
                                                               "l-*-2481"
                                                               "l-*-2479"
                                                               "l-*-2477"
                                                               "l-*-2475"
                                                               "l-*-2473"
                                                               "l-*-2471"
                                                               "l-*-2469"
                                                               "l-*-2467"
                                                               "l-*-2465"
                                                               "l-*-2463"
                                                               "l-*-2461"
                                                               "l-*-2459"
                                                               "l-*-2457"
                                                               "l-*-2455"
                                                               "l-*-2453"
                                                               "l-*-2451"
                                                               "l-*-2450"
                                                               "l-*-2448"
                                                               "l-*-2445"
                                                               "l-*-2444"
                                                               "l-*-2443"
                                                               "l-*-2441"
                                                               "l-*-2440"
                                                               "l-*-2438"
                                                               "l-*-2436"
                                                               "l-*-2434"
                                                               "l-*-2432"
                                                               "l-*-2430"
                                                               "l-*-2428"
                                                               "l-*-2426"
                                                               "l-*-2424"
                                                               "l-*-2421"
                                                               "l-*-2419"
                                                               "l-*-2418"
                                                               "l-*-2416"
                                                               "l-*-2414"
                                                               "l-*-2412"
                                                               "l-*-2410"
                                                               "l-*-2409"
                                                               "l-*-2408"
                                                               "l-*-2407"
                                                               "l-*-2405"
                                                               "l-*-2404"
                                                               "l-*-2401"
                                                               "l-*-2399"
                                                               "l-*-2397"
                                                               "l-*-2395"
                                                               "l-*-2393"
                                                               "l-*-2391"
                                                               "l-*-2389"
                                                               "l-*-2388"
                                                               "l-*-2387"
                                                               "l-*-2385"
                                                               "l-*-2383"
                                                               "l-*-2382"
                                                               "l-*-2379"
                                                               "l-*-2378"
                                                               "l-*-2376"
                                                               "l-*-2374"
                                                               "l-*-2372"
                                                               "l-*-2370"
                                                               "l-*-2368"
                                                               "l-*-2366"
                                                               "l-*-2364"
                                                               "l-*-2362"
                                                               "l-*-2360"
                                                               "l-*-2357"
                                                               "l-*-2355"
                                                               "l-*-2353"
                                                               "l-*-2351"
                                                               "l-*-2349"
                                                               "l-*-2347"
                                                               "l-*-2345"
                                                               "l-*-2343"
                                                               "l-*-2341"
                                                               "l-*-2339"
                                                               "l-*-2337"
                                                               "l-*-2335"
                                                               "l-*-2333"
                                                               "l-*-2331"
                                                               "l-*-2329"
                                                               "l-*-2327"
                                                               "l-*-2325"
                                                               "l-*-2323"
                                                               "l-*-2321"
                                                               "l-*-2319"
                                                               "l-*-2317"
                                                               "l-*-2315"
                                                               "l-*-2313"
                                                               "l-*-2311"
                                                               "l-*-2309"
                                                               "l-*-2307"
                                                               "l-*-2306"
                                                               "l-*-2305"
                                                               "l-*-2304"
                                                               "l-*-2303"
                                                               "l-*-2301"
                                                               "l-*-2299"
                                                               "l-*-2297"
                                                               "l-*-2294"
                                                               "l-*-2292"
                                                               "l-*-2290"
                                                               "l-*-2288"
                                                               "l-*-2286"
                                                               "l-*-2284"
                                                               "l-*-2282"
                                                               "l-*-2280"
                                                               "l-*-2278"
                                                               "l-*-2276"
                                                               "l-*-2274"
                                                               "l-*-2272"
                                                               "l-*-2270"
                                                               "l-*-2268"
                                                               "l-*-2266"
                                                               "l-*-2264"
                                                               "l-*-2262"
                                                               "l-*-2260"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-2098"
                                                               "l-*-2097"
                                                               "l-*-2096")))
                                                           (hygiene guile)))
                                                       '(())
                                                       s-22659
                                                       mod-22661))
                                                   tmp-23041)
                                                 (syntax-violation
                                                   #f
                                                   "source expression failed to match any pattern"
                                                   e-22656)))))))
                                     (if (eqv? ftype-22709 'define-syntax)
                                       (let ((tmp-23096
                                               ($sc-dispatch
                                                 e-22656
                                                 '(_ any any))))
                                         (if (if tmp-23096
                                               (@apply
                                                 (lambda (name-23100 val-23101)
                                                   (if (symbol? name-23100)
                                                     #t
                                                     (if (if (vector?
                                                               name-23100)
                                                           (if (= (vector-length
                                                                    name-23100)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    name-23100
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           name-23100
                                                           1))
                                                       #f)))
                                                 tmp-23096)
                                               #f)
                                           (@apply
                                             (lambda (name-23128 val-23129)
                                               (values
                                                 'define-syntax-form
                                                 name-23128
                                                 e-22656
                                                 val-23129
                                                 w-22658
                                                 s-22659
                                                 mod-22661))
                                             tmp-23096)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             e-22656)))
                                       (if (eqv? ftype-22709
                                                 'define-syntax-parameter)
                                         (let ((tmp-23143
                                                 ($sc-dispatch
                                                   e-22656
                                                   '(_ any any))))
                                           (if (if tmp-23143
                                                 (@apply
                                                   (lambda (name-23147
                                                            val-23148)
                                                     (if (symbol? name-23147)
                                                       #t
                                                       (if (if (vector?
                                                                 name-23147)
                                                             (if (= (vector-length
                                                                      name-23147)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      name-23147
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (symbol?
                                                           (vector-ref
                                                             name-23147
                                                             1))
                                                         #f)))
                                                   tmp-23143)
                                                 #f)
                                             (@apply
                                               (lambda (name-23175 val-23176)
                                                 (values
                                                   'define-syntax-parameter-form
                                                   name-23175
                                                   e-22656
                                                   val-23176
                                                   w-22658
                                                   s-22659
                                                   mod-22661))
                                               tmp-23143)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               e-22656)))
                                         (values
                                           'call
                                           #f
                                           e-22656
                                           e-22656
                                           w-22658
                                           s-22659
                                           mod-22661)))))))))))))))
             (if (if (vector? e-22656)
                   (if (= (vector-length e-22656) 4)
                     (eq? (vector-ref e-22656 0) 'syntax-object)
                     #f)
                   #f)
               (syntax-type-6380
                 (vector-ref e-22656 1)
                 r-22657
                 (join-wraps-6361 w-22658 (vector-ref e-22656 2))
                 (let ((t-23203 (source-annotation-6338 e-22656)))
                   (if t-23203 t-23203 s-22659))
                 rib-22660
                 (let ((t-23438 (vector-ref e-22656 3)))
                   (if t-23438 t-23438 mod-22661))
                 for-car?-22662)
               (if (self-evaluating? e-22656)
                 (values
                   'constant
                   #f
                   e-22656
                   e-22656
                   w-22658
                   s-22659
                   mod-22661)
                 (values
                   'other
                   #f
                   e-22656
                   e-22656
                   w-22658
                   s-22659
                   mod-22661)))))))
     (expand-6381
       (lambda (e-23447 r-23448 w-23449 mod-23450)
         (call-with-values
           (lambda ()
             (syntax-type-6380
               e-23447
               r-23448
               w-23449
               (source-annotation-6338 e-23447)
               #f
               mod-23450
               #f))
           (lambda (type-23605
                    value-23606
                    form-23607
                    e-23608
                    w-23609
                    s-23610
                    mod-23611)
             (expand-expr-6382
               type-23605
               value-23606
               form-23607
               e-23608
               r-23448
               w-23609
               s-23610
               mod-23611)))))
     (expand-expr-6382
       (lambda (type-23614
                value-23615
                form-23616
                e-23617
                r-23618
                w-23619
                s-23620
                mod-23621)
         (if (eqv? type-23614 'lexical)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 3)
             s-23620
             e-23617
             value-23615)
           (if (if (eqv? type-23614 'core)
                 #t
                 (eqv? type-23614 'core-form))
             (value-23615
               e-23617
               r-23618
               w-23619
               s-23620
               mod-23621)
             (if (eqv? type-23614 'module-ref)
               (call-with-values
                 (lambda () (value-23615 e-23617 r-23618 w-23619))
                 (lambda (e-23657 r-23658 w-23659 s-23660 mod-23661)
                   (expand-6381 e-23657 r-23658 w-23659 mod-23661)))
               (if (eqv? type-23614 'lexical-call)
                 (expand-application-6383
                   (let ((id-23739 (car e-23617)))
                     (build-lexical-reference-6315
                       'fun
                       (source-annotation-6338 id-23739)
                       (if (if (vector? id-23739)
                             (if (= (vector-length id-23739) 4)
                               (eq? (vector-ref id-23739 0) 'syntax-object)
                               #f)
                             #f)
                         (syntax->datum id-23739)
                         id-23739)
                       value-23615))
                   e-23617
                   r-23618
                   w-23619
                   s-23620
                   mod-23621)
                 (if (eqv? type-23614 'global-call)
                   (expand-application-6383
                     (build-global-reference-6318
                       (source-annotation-6338 (car e-23617))
                       (if (if (vector? value-23615)
                             (if (= (vector-length value-23615) 4)
                               (eq? (vector-ref value-23615 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref value-23615 1)
                         value-23615)
                       (if (if (vector? value-23615)
                             (if (= (vector-length value-23615) 4)
                               (eq? (vector-ref value-23615 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref value-23615 3)
                         mod-23621))
                     e-23617
                     r-23618
                     w-23619
                     s-23620
                     mod-23621)
                   (if (eqv? type-23614 'constant)
                     (let ((exp-24082
                             (strip-6394
                               (wrap-6374
                                 (begin
                                   (if (if (pair? e-23617) s-23620 #f)
                                     (set-source-properties! e-23617 s-23620))
                                   e-23617)
                                 w-23619
                                 mod-23621)
                               '(()))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         s-23620
                         exp-24082))
                     (if (eqv? type-23614 'global)
                       (analyze-variable-6317
                         mod-23621
                         value-23615
                         (lambda (mod-24121 var-24122 public?-24123)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             s-23620
                             mod-24121
                             var-24122
                             public?-24123))
                         (lambda (var-24132)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             s-23620
                             var-24132)))
                       (if (eqv? type-23614 'call)
                         (expand-application-6383
                           (expand-6381
                             (car e-23617)
                             r-23618
                             w-23619
                             mod-23621)
                           e-23617
                           r-23618
                           w-23619
                           s-23620
                           mod-23621)
                         (if (eqv? type-23614 'begin-form)
                           (let ((tmp-24213
                                   ($sc-dispatch e-23617 '(_ any . each-any))))
                             (if tmp-24213
                               (@apply
                                 (lambda (e1-24217 e2-24218)
                                   (expand-sequence-6376
                                     (cons e1-24217 e2-24218)
                                     r-23618
                                     w-23619
                                     s-23620
                                     mod-23621))
                                 tmp-24213)
                               (let ((tmp-24305 ($sc-dispatch e-23617 '(_))))
                                 (if tmp-24305
                                   (@apply
                                     (lambda ()
                                       (if (include-deprecated-features)
                                         (begin
                                           (issue-deprecation-warning
                                             "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))
                                         (syntax-violation
                                           #f
                                           "sequence of zero expressions"
                                           (wrap-6374
                                             (begin
                                               (if (if (pair? e-23617)
                                                     s-23620
                                                     #f)
                                                 (set-source-properties!
                                                   e-23617
                                                   s-23620))
                                               e-23617)
                                             w-23619
                                             mod-23621))))
                                     tmp-24305)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     e-23617)))))
                           (if (eqv? type-23614 'local-syntax-form)
                             (expand-local-syntax-6386
                               value-23615
                               e-23617
                               r-23618
                               w-23619
                               s-23620
                               mod-23621
                               expand-sequence-6376)
                             (if (eqv? type-23614 'eval-when-form)
                               (let ((tmp-24422
                                       ($sc-dispatch
                                         e-23617
                                         '(_ each-any any . each-any))))
                                 (if tmp-24422
                                   (@apply
                                     (lambda (x-24426 e1-24427 e2-24428)
                                       (let ((when-list-24429
                                               (parse-when-list-6379
                                                 e-23617
                                                 x-24426)))
                                         (if (memq 'eval when-list-24429)
                                           (expand-sequence-6376
                                             (cons e1-24427 e2-24428)
                                             r-23618
                                             w-23619
                                             s-23620
                                             mod-23621)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))))
                                     tmp-24422)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     e-23617)))
                               (if (if (eqv? type-23614 'define-form)
                                     #t
                                     (if (eqv? type-23614 'define-syntax-form)
                                       #t
                                       (eqv? type-23614
                                             'define-syntax-parameter-form)))
                                 (syntax-violation
                                   #f
                                   "definition in expression context, where definitions are not allowed,"
                                   (wrap-6374
                                     (begin
                                       (if (if (pair? form-23616) s-23620 #f)
                                         (set-source-properties!
                                           form-23616
                                           s-23620))
                                       form-23616)
                                     w-23619
                                     mod-23621))
                                 (if (eqv? type-23614 'syntax)
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (wrap-6374
                                       (begin
                                         (if (if (pair? e-23617) s-23620 #f)
                                           (set-source-properties!
                                             e-23617
                                             s-23620))
                                         e-23617)
                                       w-23619
                                       mod-23621))
                                   (if (eqv? type-23614 'displaced-lexical)
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (wrap-6374
                                         (begin
                                           (if (if (pair? e-23617) s-23620 #f)
                                             (set-source-properties!
                                               e-23617
                                               s-23620))
                                           e-23617)
                                         w-23619
                                         mod-23621))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (wrap-6374
                                         (begin
                                           (if (if (pair? e-23617) s-23620 #f)
                                             (set-source-properties!
                                               e-23617
                                               s-23620))
                                           e-23617)
                                         w-23619
                                         mod-23621))))))))))))))))))
     (expand-application-6383
       (lambda (x-24698
                e-24699
                r-24700
                w-24701
                s-24702
                mod-24703)
         (let ((tmp-24705
                 ($sc-dispatch e-24699 '(any . each-any))))
           (if tmp-24705
             (@apply
               (lambda (e0-24709 e1-24710)
                 (build-application-6312
                   s-24702
                   x-24698
                   (map (lambda (e-24790)
                          (expand-6381 e-24790 r-24700 w-24701 mod-24703))
                        e1-24710)))
               tmp-24705)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               e-24699)))))
     (expand-macro-6384
       (lambda (p-24866
                e-24867
                r-24868
                w-24869
                s-24870
                rib-24871
                mod-24872)
         (letrec*
           ((rebuild-macro-output-24873
              (lambda (x-24906 m-24907)
                (if (pair? x-24906)
                  (let ((e-24911
                          (cons (rebuild-macro-output-24873
                                  (car x-24906)
                                  m-24907)
                                (rebuild-macro-output-24873
                                  (cdr x-24906)
                                  m-24907))))
                    (begin
                      (if (if (pair? e-24911) s-24870 #f)
                        (set-source-properties! e-24911 s-24870))
                      e-24911))
                  (if (if (vector? x-24906)
                        (if (= (vector-length x-24906) 4)
                          (eq? (vector-ref x-24906 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((w-24927 (vector-ref x-24906 2)))
                      (let ((ms-24928 (car w-24927))
                            (ss-24929 (cdr w-24927)))
                        (if (if (pair? ms-24928) (eq? (car ms-24928) #f) #f)
                          (let ((expression-24937 (vector-ref x-24906 1))
                                (wrap-24938
                                  (cons (cdr ms-24928)
                                        (if rib-24871
                                          (cons rib-24871 (cdr ss-24929))
                                          (cdr ss-24929))))
                                (module-24939 (vector-ref x-24906 3)))
                            (vector
                              'syntax-object
                              expression-24937
                              wrap-24938
                              module-24939))
                          (let ((expression-24949
                                  (let ((e-24954 (vector-ref x-24906 1)))
                                    (begin
                                      (if (if (pair? e-24954) s-24870 #f)
                                        (set-source-properties!
                                          e-24954
                                          s-24870))
                                      e-24954)))
                                (wrap-24950
                                  (cons (cons m-24907 ms-24928)
                                        (if rib-24871
                                          (cons rib-24871
                                                (cons 'shift ss-24929))
                                          (cons 'shift ss-24929))))
                                (module-24951 (vector-ref x-24906 3)))
                            (vector
                              'syntax-object
                              expression-24949
                              wrap-24950
                              module-24951)))))
                    (if (vector? x-24906)
                      (let ((n-24966 (vector-length x-24906)))
                        (let ((v-24967
                                (let ((e-24975 (make-vector n-24966)))
                                  (begin
                                    (if (if (pair? e-24975) s-24870 #f)
                                      (set-source-properties! e-24975 s-24870))
                                    e-24975))))
                          (letrec*
                            ((loop-24968
                               (lambda (i-25020)
                                 (if (= i-25020 n-24966)
                                   v-24967
                                   (begin
                                     (vector-set!
                                       v-24967
                                       i-25020
                                       (rebuild-macro-output-24873
                                         (vector-ref x-24906 i-25020)
                                         m-24907))
                                     (loop-24968 (#{1+}# i-25020)))))))
                            (loop-24968 0))))
                      (if (symbol? x-24906)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (let ((s-25026 (cdr w-24869)))
                            (wrap-6374
                              (begin
                                (if (if (pair? e-24867) s-25026 #f)
                                  (set-source-properties! e-24867 s-25026))
                                e-24867)
                              w-24869
                              mod-24872))
                          x-24906)
                        (begin
                          (if (if (pair? x-24906) s-24870 #f)
                            (set-source-properties! x-24906 s-24870))
                          x-24906))))))))
           (with-fluids
             ((transformer-environment-6367
                (lambda (k-24874)
                  (k-24874
                    e-24867
                    r-24868
                    w-24869
                    s-24870
                    rib-24871
                    mod-24872))))
             (rebuild-macro-output-24873
               (p-24866
                 (let ((w-24881
                         (cons (cons #f (car w-24869))
                               (cons 'shift (cdr w-24869)))))
                   (wrap-6374
                     (begin
                       (if (if (pair? e-24867) s-24870 #f)
                         (set-source-properties! e-24867 s-24870))
                       e-24867)
                     w-24881
                     mod-24872)))
               (gensym
                 (string-append "m-" (session-id-6306) "-")))))))
     (expand-body-6385
       (lambda (body-25058
                outer-form-25059
                r-25060
                w-25061
                mod-25062)
         (let ((r-25063
                 (cons '("placeholder" placeholder) r-25060)))
           (let ((ribcage-25064 (vector 'ribcage '() '() '())))
             (let ((w-25065
                     (cons (car w-25061)
                           (cons ribcage-25064 (cdr w-25061)))))
               (letrec*
                 ((parse-25066
                    (lambda (body-25079
                             ids-25080
                             labels-25081
                             var-ids-25082
                             vars-25083
                             vals-25084
                             bindings-25085)
                      (if (null? body-25079)
                        (syntax-violation
                          #f
                          "no expressions in body"
                          outer-form-25059)
                        (let ((e-25086 (cdr (car body-25079)))
                              (er-25087 (car (car body-25079))))
                          (call-with-values
                            (lambda ()
                              (syntax-type-6380
                                e-25086
                                er-25087
                                '(())
                                (source-annotation-6338 er-25087)
                                ribcage-25064
                                mod-25062
                                #f))
                            (lambda (type-25244
                                     value-25245
                                     form-25246
                                     e-25247
                                     w-25248
                                     s-25249
                                     mod-25250)
                              (if (eqv? type-25244 'define-form)
                                (let ((id-25258
                                        (wrap-6374
                                          value-25245
                                          w-25248
                                          mod-25250))
                                      (label-25259
                                        (string-append
                                          "l-"
                                          (session-id-6306)
                                          (symbol->string (gensym "-")))))
                                  (let ((var-25260
                                          (let ((id-25320
                                                  (if (if (vector? id-25258)
                                                        (if (= (vector-length
                                                                 id-25258)
                                                               4)
                                                          (eq? (vector-ref
                                                                 id-25258
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref id-25258 1)
                                                    id-25258)))
                                            (gensym
                                              (string-append
                                                (symbol->string id-25320)
                                                "-")))))
                                    (begin
                                      (let ((update-25310
                                              (cons (vector-ref id-25258 1)
                                                    (vector-ref
                                                      ribcage-25064
                                                      1))))
                                        (vector-set!
                                          ribcage-25064
                                          1
                                          update-25310))
                                      (let ((update-25312
                                              (cons (car (vector-ref
                                                           id-25258
                                                           2))
                                                    (vector-ref
                                                      ribcage-25064
                                                      2))))
                                        (vector-set!
                                          ribcage-25064
                                          2
                                          update-25312))
                                      (let ((update-25314
                                              (cons label-25259
                                                    (vector-ref
                                                      ribcage-25064
                                                      3))))
                                        (vector-set!
                                          ribcage-25064
                                          3
                                          update-25314))
                                      (parse-25066
                                        (cdr body-25079)
                                        (cons id-25258 ids-25080)
                                        (cons label-25259 labels-25081)
                                        (cons id-25258 var-ids-25082)
                                        (cons var-25260 vars-25083)
                                        (cons (cons er-25087
                                                    (wrap-6374
                                                      e-25247
                                                      w-25248
                                                      mod-25250))
                                              vals-25084)
                                        (cons (cons 'lexical var-25260)
                                              bindings-25085)))))
                                (if (if (eqv? type-25244 'define-syntax-form)
                                      #t
                                      (eqv? type-25244
                                            'define-syntax-parameter-form))
                                  (let ((id-25356
                                          (wrap-6374
                                            value-25245
                                            w-25248
                                            mod-25250))
                                        (label-25357
                                          (string-append
                                            "l-"
                                            (session-id-6306)
                                            (symbol->string (gensym "-")))))
                                    (begin
                                      (let ((update-25407
                                              (cons (vector-ref id-25356 1)
                                                    (vector-ref
                                                      ribcage-25064
                                                      1))))
                                        (vector-set!
                                          ribcage-25064
                                          1
                                          update-25407))
                                      (let ((update-25409
                                              (cons (car (vector-ref
                                                           id-25356
                                                           2))
                                                    (vector-ref
                                                      ribcage-25064
                                                      2))))
                                        (vector-set!
                                          ribcage-25064
                                          2
                                          update-25409))
                                      (let ((update-25411
                                              (cons label-25357
                                                    (vector-ref
                                                      ribcage-25064
                                                      3))))
                                        (vector-set!
                                          ribcage-25064
                                          3
                                          update-25411))
                                      (parse-25066
                                        (cdr body-25079)
                                        (cons id-25356 ids-25080)
                                        (cons label-25357 labels-25081)
                                        var-ids-25082
                                        vars-25083
                                        vals-25084
                                        (cons (cons 'macro
                                                    (cons er-25087
                                                          (wrap-6374
                                                            e-25247
                                                            w-25248
                                                            mod-25250)))
                                              bindings-25085))))
                                  (if (eqv? type-25244 'begin-form)
                                    (let ((tmp-25422
                                            ($sc-dispatch
                                              e-25247
                                              '(_ . each-any))))
                                      (if tmp-25422
                                        (@apply
                                          (lambda (e1-25426)
                                            (parse-25066
                                              (letrec*
                                                ((f-25427
                                                   (lambda (forms-25490)
                                                     (if (null? forms-25490)
                                                       (cdr body-25079)
                                                       (cons (cons er-25087
                                                                   (wrap-6374
                                                                     (car forms-25490)
                                                                     w-25248
                                                                     mod-25250))
                                                             (f-25427
                                                               (cdr forms-25490)))))))
                                                (f-25427 e1-25426))
                                              ids-25080
                                              labels-25081
                                              var-ids-25082
                                              vars-25083
                                              vals-25084
                                              bindings-25085))
                                          tmp-25422)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          e-25247)))
                                    (if (eqv? type-25244 'local-syntax-form)
                                      (expand-local-syntax-6386
                                        value-25245
                                        e-25247
                                        er-25087
                                        w-25248
                                        s-25249
                                        mod-25250
                                        (lambda (forms-25507
                                                 er-25508
                                                 w-25509
                                                 s-25510
                                                 mod-25511)
                                          (parse-25066
                                            (letrec*
                                              ((f-25512
                                                 (lambda (forms-25575)
                                                   (if (null? forms-25575)
                                                     (cdr body-25079)
                                                     (cons (cons er-25508
                                                                 (wrap-6374
                                                                   (car forms-25575)
                                                                   w-25509
                                                                   mod-25511))
                                                           (f-25512
                                                             (cdr forms-25575)))))))
                                              (f-25512 forms-25507))
                                            ids-25080
                                            labels-25081
                                            var-ids-25082
                                            vars-25083
                                            vals-25084
                                            bindings-25085)))
                                      (if (null? ids-25080)
                                        (build-sequence-6326
                                          #f
                                          (map (lambda (x-25640)
                                                 (let ((e-25644 (cdr x-25640))
                                                       (r-25645 (car x-25640)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (syntax-type-6380
                                                         e-25644
                                                         r-25645
                                                         '(())
                                                         (source-annotation-6338
                                                           e-25644)
                                                         #f
                                                         mod-25250
                                                         #f))
                                                     (lambda (type-25649
                                                              value-25650
                                                              form-25651
                                                              e-25652
                                                              w-25653
                                                              s-25654
                                                              mod-25655)
                                                       (expand-expr-6382
                                                         type-25649
                                                         value-25650
                                                         form-25651
                                                         e-25652
                                                         r-25645
                                                         w-25653
                                                         s-25654
                                                         mod-25655)))))
                                               (cons (cons er-25087
                                                           (wrap-6374
                                                             (begin
                                                               (if (if (pair? e-25247)
                                                                     s-25249
                                                                     #f)
                                                                 (set-source-properties!
                                                                   e-25247
                                                                   s-25249))
                                                               e-25247)
                                                             w-25248
                                                             mod-25250))
                                                     (cdr body-25079))))
                                        (begin
                                          (if (not (valid-bound-ids?-6371
                                                     ids-25080))
                                            (syntax-violation
                                              #f
                                              "invalid or duplicate identifier in definition"
                                              outer-form-25059))
                                          (letrec*
                                            ((loop-25756
                                               (lambda (bs-25759
                                                        er-cache-25760
                                                        r-cache-25761)
                                                 (if (not (null? bs-25759))
                                                   (let ((b-25762
                                                           (car bs-25759)))
                                                     (if (eq? (car b-25762)
                                                              'macro)
                                                       (let ((er-25764
                                                               (car (cdr b-25762))))
                                                         (let ((r-cache-25765
                                                                 (if (eq? er-25764
                                                                          er-cache-25760)
                                                                   r-cache-25761
                                                                   (macros-only-env-6341
                                                                     er-25764))))
                                                           (begin
                                                             (set-cdr!
                                                               b-25762
                                                               (eval-local-transformer-6387
                                                                 (expand-6381
                                                                   (cdr (cdr b-25762))
                                                                   r-cache-25765
                                                                   '(())
                                                                   mod-25250)
                                                                 mod-25250))
                                                             (loop-25756
                                                               (cdr bs-25759)
                                                               er-25764
                                                               r-cache-25765))))
                                                       (loop-25756
                                                         (cdr bs-25759)
                                                         er-cache-25760
                                                         r-cache-25761)))))))
                                            (loop-25756 bindings-25085 #f #f))
                                          (set-cdr!
                                            r-25063
                                            (extend-env-6339
                                              labels-25081
                                              bindings-25085
                                              (cdr r-25063)))
                                          (build-letrec-6329
                                            #f
                                            #t
                                            (reverse
                                              (map syntax->datum
                                                   var-ids-25082))
                                            (reverse vars-25083)
                                            (map (lambda (x-26108)
                                                   (let ((e-26112
                                                           (cdr x-26108))
                                                         (r-26113
                                                           (car x-26108)))
                                                     (call-with-values
                                                       (lambda ()
                                                         (syntax-type-6380
                                                           e-26112
                                                           r-26113
                                                           '(())
                                                           (source-annotation-6338
                                                             e-26112)
                                                           #f
                                                           mod-25250
                                                           #f))
                                                       (lambda (type-26117
                                                                value-26118
                                                                form-26119
                                                                e-26120
                                                                w-26121
                                                                s-26122
                                                                mod-26123)
                                                         (expand-expr-6382
                                                           type-26117
                                                           value-26118
                                                           form-26119
                                                           e-26120
                                                           r-26113
                                                           w-26121
                                                           s-26122
                                                           mod-26123)))))
                                                 (reverse vals-25084))
                                            (let ((exps-26129
                                                    (map (lambda (x-26130)
                                                           (let ((e-26133
                                                                   (cdr x-26130))
                                                                 (r-26134
                                                                   (car x-26130)))
                                                             (call-with-values
                                                               (lambda ()
                                                                 (syntax-type-6380
                                                                   e-26133
                                                                   r-26134
                                                                   '(())
                                                                   (source-annotation-6338
                                                                     e-26133)
                                                                   #f
                                                                   mod-25250
                                                                   #f))
                                                               (lambda (type-26138
                                                                        value-26139
                                                                        form-26140
                                                                        e-26141
                                                                        w-26142
                                                                        s-26143
                                                                        mod-26144)
                                                                 (expand-expr-6382
                                                                   type-26138
                                                                   value-26139
                                                                   form-26140
                                                                   e-26141
                                                                   r-26134
                                                                   w-26142
                                                                   s-26143
                                                                   mod-26144)))))
                                                         (cons (cons er-25087
                                                                     (wrap-6374
                                                                       (begin
                                                                         (if (if (pair? e-25247)
                                                                               s-25249
                                                                               #f)
                                                                           (set-source-properties!
                                                                             e-25247
                                                                             s-25249))
                                                                         e-25247)
                                                                       w-25248
                                                                       mod-25250))
                                                               (cdr body-25079)))))
                                              (if (null? (cdr exps-26129))
                                                (car exps-26129)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    12)
                                                  #f
                                                  exps-26129)))))))))))))))))
                 (parse-25066
                   (map (lambda (x-25069)
                          (cons r-25063
                                (wrap-6374 x-25069 w-25065 mod-25062)))
                        body-25058)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (expand-local-syntax-6386
       (lambda (rec?-26170
                e-26171
                r-26172
                w-26173
                s-26174
                mod-26175
                k-26176)
         (let ((tmp-26178
                 ($sc-dispatch
                   e-26171
                   '(_ #(each (any any)) any . each-any))))
           (if tmp-26178
             (@apply
               (lambda (id-26182 val-26183 e1-26184 e2-26185)
                 (if (not (valid-bound-ids?-6371 id-26182))
                   (syntax-violation
                     #f
                     "duplicate bound keyword"
                     e-26171)
                   (let ((labels-26275 (gen-labels-6348 id-26182)))
                     (let ((new-w-26276
                             (make-binding-wrap-6359
                               id-26182
                               labels-26275
                               w-26173)))
                       (k-26176
                         (cons e1-26184 e2-26185)
                         (extend-env-6339
                           labels-26275
                           (let ((trans-r-26312
                                   (macros-only-env-6341 r-26172)))
                             (begin
                               (if rec?-26170 new-w-26276 w-26173)
                               (map (lambda (x-26313)
                                      (cons 'macro
                                            (eval-local-transformer-6387
                                              (expand-6381
                                                x-26313
                                                trans-r-26312
                                                (values
                                                  (if rec?-26170
                                                    new-w-26276
                                                    w-26173))
                                                mod-26175)
                                              mod-26175)))
                                    val-26183)))
                           r-26172)
                         new-w-26276
                         s-26174
                         mod-26175)))))
               tmp-26178)
             (syntax-violation
               #f
               "bad local syntax definition"
               (wrap-6374
                 (begin
                   (if (if (pair? e-26171) s-26174 #f)
                     (set-source-properties! e-26171 s-26174))
                   e-26171)
                 w-26173
                 mod-26175))))))
     (eval-local-transformer-6387
       (lambda (expanded-26593 mod-26594)
         (let ((p-26595 (primitive-eval expanded-26593)))
           (if (procedure? p-26595)
             p-26595
             (syntax-violation
               #f
               "nonprocedure transformer"
               p-26595)))))
     (ellipsis?-6389
       (lambda (x-7050)
         (if (if (if (vector? x-7050)
                   (if (= (vector-length x-7050) 4)
                     (eq? (vector-ref x-7050 0) 'syntax-object)
                     #f)
                   #f)
               (symbol? (vector-ref x-7050 1))
               #f)
           (if (eq? (if (if (vector? x-7050)
                          (if (= (vector-length x-7050) 4)
                            (eq? (vector-ref x-7050 0) 'syntax-object)
                            #f)
                          #f)
                      (vector-ref x-7050 1)
                      x-7050)
                    (if (if (= (vector-length
                                 '#(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-4317"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-application
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         with-transformer-environment
                                         transformer-environment
                                         resolve-identifier
                                         locally-bound-identifiers
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-application
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         session-id
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-sequence
                                         make-application
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-2527"
                                        "l-*-2525"
                                        "l-*-2523"
                                        "l-*-2521"
                                        "l-*-2519"
                                        "l-*-2517"
                                        "l-*-2515"
                                        "l-*-2513"
                                        "l-*-2511"
                                        "l-*-2509"
                                        "l-*-2507"
                                        "l-*-2505"
                                        "l-*-2503"
                                        "l-*-2501"
                                        "l-*-2499"
                                        "l-*-2497"
                                        "l-*-2495"
                                        "l-*-2493"
                                        "l-*-2491"
                                        "l-*-2489"
                                        "l-*-2487"
                                        "l-*-2485"
                                        "l-*-2483"
                                        "l-*-2481"
                                        "l-*-2479"
                                        "l-*-2477"
                                        "l-*-2475"
                                        "l-*-2473"
                                        "l-*-2471"
                                        "l-*-2469"
                                        "l-*-2467"
                                        "l-*-2465"
                                        "l-*-2463"
                                        "l-*-2461"
                                        "l-*-2459"
                                        "l-*-2457"
                                        "l-*-2455"
                                        "l-*-2453"
                                        "l-*-2451"
                                        "l-*-2450"
                                        "l-*-2448"
                                        "l-*-2445"
                                        "l-*-2444"
                                        "l-*-2443"
                                        "l-*-2441"
                                        "l-*-2440"
                                        "l-*-2438"
                                        "l-*-2436"
                                        "l-*-2434"
                                        "l-*-2432"
                                        "l-*-2430"
                                        "l-*-2428"
                                        "l-*-2426"
                                        "l-*-2424"
                                        "l-*-2421"
                                        "l-*-2419"
                                        "l-*-2418"
                                        "l-*-2416"
                                        "l-*-2414"
                                        "l-*-2412"
                                        "l-*-2410"
                                        "l-*-2409"
                                        "l-*-2408"
                                        "l-*-2407"
                                        "l-*-2405"
                                        "l-*-2404"
                                        "l-*-2401"
                                        "l-*-2399"
                                        "l-*-2397"
                                        "l-*-2395"
                                        "l-*-2393"
                                        "l-*-2391"
                                        "l-*-2389"
                                        "l-*-2388"
                                        "l-*-2387"
                                        "l-*-2385"
                                        "l-*-2383"
                                        "l-*-2382"
                                        "l-*-2379"
                                        "l-*-2378"
                                        "l-*-2376"
                                        "l-*-2374"
                                        "l-*-2372"
                                        "l-*-2370"
                                        "l-*-2368"
                                        "l-*-2366"
                                        "l-*-2364"
                                        "l-*-2362"
                                        "l-*-2360"
                                        "l-*-2357"
                                        "l-*-2355"
                                        "l-*-2353"
                                        "l-*-2351"
                                        "l-*-2349"
                                        "l-*-2347"
                                        "l-*-2345"
                                        "l-*-2343"
                                        "l-*-2341"
                                        "l-*-2339"
                                        "l-*-2337"
                                        "l-*-2335"
                                        "l-*-2333"
                                        "l-*-2331"
                                        "l-*-2329"
                                        "l-*-2327"
                                        "l-*-2325"
                                        "l-*-2323"
                                        "l-*-2321"
                                        "l-*-2319"
                                        "l-*-2317"
                                        "l-*-2315"
                                        "l-*-2313"
                                        "l-*-2311"
                                        "l-*-2309"
                                        "l-*-2307"
                                        "l-*-2306"
                                        "l-*-2305"
                                        "l-*-2304"
                                        "l-*-2303"
                                        "l-*-2301"
                                        "l-*-2299"
                                        "l-*-2297"
                                        "l-*-2294"
                                        "l-*-2292"
                                        "l-*-2290"
                                        "l-*-2288"
                                        "l-*-2286"
                                        "l-*-2284"
                                        "l-*-2282"
                                        "l-*-2280"
                                        "l-*-2278"
                                        "l-*-2276"
                                        "l-*-2274"
                                        "l-*-2272"
                                        "l-*-2270"
                                        "l-*-2268"
                                        "l-*-2266"
                                        "l-*-2264"
                                        "l-*-2262"
                                        "l-*-2260"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("l-*-2098" "l-*-2097" "l-*-2096")))
                                    (hygiene guile)))
                               4)
                          #t
                          #f)
                      '...
                      '#(syntax-object
                         ...
                         ((top)
                          #(ribcage () () ())
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("l-*-4317"))
                          #(ribcage
                            (lambda-var-list
                              gen-var
                              strip
                              expand-lambda-case
                              lambda*-formals
                              expand-simple-lambda
                              lambda-formals
                              ellipsis?
                              expand-void
                              eval-local-transformer
                              expand-local-syntax
                              expand-body
                              expand-macro
                              expand-application
                              expand-expr
                              expand
                              syntax-type
                              parse-when-list
                              expand-install-global
                              expand-top-sequence
                              expand-sequence
                              source-wrap
                              wrap
                              bound-id-member?
                              distinct-bound-ids?
                              valid-bound-ids?
                              bound-id=?
                              free-id=?
                              with-transformer-environment
                              transformer-environment
                              resolve-identifier
                              locally-bound-identifiers
                              id-var-name
                              same-marks?
                              join-marks
                              join-wraps
                              smart-append
                              make-binding-wrap
                              extend-ribcage!
                              make-empty-ribcage
                              new-mark
                              anti-mark
                              the-anti-mark
                              top-marked?
                              top-wrap
                              empty-wrap
                              set-ribcage-labels!
                              set-ribcage-marks!
                              set-ribcage-symnames!
                              ribcage-labels
                              ribcage-marks
                              ribcage-symnames
                              ribcage?
                              make-ribcage
                              gen-labels
                              gen-label
                              make-rename
                              rename-marks
                              rename-new
                              rename-old
                              subst-rename?
                              wrap-subst
                              wrap-marks
                              make-wrap
                              id-sym-name&marks
                              id-sym-name
                              id?
                              nonsymbol-id?
                              global-extend
                              lookup
                              macros-only-env
                              extend-var-env
                              extend-env
                              null-env
                              binding-value
                              binding-type
                              make-binding
                              arg-check
                              source-annotation
                              no-source
                              set-syntax-object-module!
                              set-syntax-object-wrap!
                              set-syntax-object-expression!
                              syntax-object-module
                              syntax-object-wrap
                              syntax-object-expression
                              syntax-object?
                              make-syntax-object
                              build-lexical-var
                              build-letrec
                              build-named-let
                              build-let
                              build-sequence
                              build-data
                              build-primref
                              build-lambda-case
                              build-case-lambda
                              build-simple-lambda
                              build-global-definition
                              build-global-assignment
                              build-global-reference
                              analyze-variable
                              build-lexical-assignment
                              build-lexical-reference
                              build-dynlet
                              build-conditional
                              build-application
                              build-void
                              maybe-name-value!
                              decorate-source
                              get-global-definition-hook
                              put-global-definition-hook
                              session-id
                              local-eval-hook
                              top-level-eval-hook
                              fx<
                              fx=
                              fx-
                              fx+
                              set-lambda-meta!
                              lambda-meta
                              lambda?
                              make-dynlet
                              make-letrec
                              make-let
                              make-lambda-case
                              make-lambda
                              make-sequence
                              make-application
                              make-conditional
                              make-toplevel-define
                              make-toplevel-set
                              make-toplevel-ref
                              make-module-set
                              make-module-ref
                              make-lexical-set
                              make-lexical-ref
                              make-primitive-ref
                              make-const
                              make-void)
                            ((top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top))
                            ("l-*-2527"
                             "l-*-2525"
                             "l-*-2523"
                             "l-*-2521"
                             "l-*-2519"
                             "l-*-2517"
                             "l-*-2515"
                             "l-*-2513"
                             "l-*-2511"
                             "l-*-2509"
                             "l-*-2507"
                             "l-*-2505"
                             "l-*-2503"
                             "l-*-2501"
                             "l-*-2499"
                             "l-*-2497"
                             "l-*-2495"
                             "l-*-2493"
                             "l-*-2491"
                             "l-*-2489"
                             "l-*-2487"
                             "l-*-2485"
                             "l-*-2483"
                             "l-*-2481"
                             "l-*-2479"
                             "l-*-2477"
                             "l-*-2475"
                             "l-*-2473"
                             "l-*-2471"
                             "l-*-2469"
                             "l-*-2467"
                             "l-*-2465"
                             "l-*-2463"
                             "l-*-2461"
                             "l-*-2459"
                             "l-*-2457"
                             "l-*-2455"
                             "l-*-2453"
                             "l-*-2451"
                             "l-*-2450"
                             "l-*-2448"
                             "l-*-2445"
                             "l-*-2444"
                             "l-*-2443"
                             "l-*-2441"
                             "l-*-2440"
                             "l-*-2438"
                             "l-*-2436"
                             "l-*-2434"
                             "l-*-2432"
                             "l-*-2430"
                             "l-*-2428"
                             "l-*-2426"
                             "l-*-2424"
                             "l-*-2421"
                             "l-*-2419"
                             "l-*-2418"
                             "l-*-2416"
                             "l-*-2414"
                             "l-*-2412"
                             "l-*-2410"
                             "l-*-2409"
                             "l-*-2408"
                             "l-*-2407"
                             "l-*-2405"
                             "l-*-2404"
                             "l-*-2401"
                             "l-*-2399"
                             "l-*-2397"
                             "l-*-2395"
                             "l-*-2393"
                             "l-*-2391"
                             "l-*-2389"
                             "l-*-2388"
                             "l-*-2387"
                             "l-*-2385"
                             "l-*-2383"
                             "l-*-2382"
                             "l-*-2379"
                             "l-*-2378"
                             "l-*-2376"
                             "l-*-2374"
                             "l-*-2372"
                             "l-*-2370"
                             "l-*-2368"
                             "l-*-2366"
                             "l-*-2364"
                             "l-*-2362"
                             "l-*-2360"
                             "l-*-2357"
                             "l-*-2355"
                             "l-*-2353"
                             "l-*-2351"
                             "l-*-2349"
                             "l-*-2347"
                             "l-*-2345"
                             "l-*-2343"
                             "l-*-2341"
                             "l-*-2339"
                             "l-*-2337"
                             "l-*-2335"
                             "l-*-2333"
                             "l-*-2331"
                             "l-*-2329"
                             "l-*-2327"
                             "l-*-2325"
                             "l-*-2323"
                             "l-*-2321"
                             "l-*-2319"
                             "l-*-2317"
                             "l-*-2315"
                             "l-*-2313"
                             "l-*-2311"
                             "l-*-2309"
                             "l-*-2307"
                             "l-*-2306"
                             "l-*-2305"
                             "l-*-2304"
                             "l-*-2303"
                             "l-*-2301"
                             "l-*-2299"
                             "l-*-2297"
                             "l-*-2294"
                             "l-*-2292"
                             "l-*-2290"
                             "l-*-2288"
                             "l-*-2286"
                             "l-*-2284"
                             "l-*-2282"
                             "l-*-2280"
                             "l-*-2278"
                             "l-*-2276"
                             "l-*-2274"
                             "l-*-2272"
                             "l-*-2270"
                             "l-*-2268"
                             "l-*-2266"
                             "l-*-2264"
                             "l-*-2262"
                             "l-*-2260"))
                          #(ribcage
                            (define-structure
                              define-expansion-accessors
                              define-expansion-constructors)
                            ((top) (top) (top))
                            ("l-*-2098" "l-*-2097" "l-*-2096")))
                         (hygiene guile))))
             (eq? (id-var-name-6364 x-7050 '(()))
                  (id-var-name-6364
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-4317"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            with-transformer-environment
                            transformer-environment
                            resolve-identifier
                            locally-bound-identifiers
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            session-id
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("l-*-2527"
                           "l-*-2525"
                           "l-*-2523"
                           "l-*-2521"
                           "l-*-2519"
                           "l-*-2517"
                           "l-*-2515"
                           "l-*-2513"
                           "l-*-2511"
                           "l-*-2509"
                           "l-*-2507"
                           "l-*-2505"
                           "l-*-2503"
                           "l-*-2501"
                           "l-*-2499"
                           "l-*-2497"
                           "l-*-2495"
                           "l-*-2493"
                           "l-*-2491"
                           "l-*-2489"
                           "l-*-2487"
                           "l-*-2485"
                           "l-*-2483"
                           "l-*-2481"
                           "l-*-2479"
                           "l-*-2477"
                           "l-*-2475"
                           "l-*-2473"
                           "l-*-2471"
                           "l-*-2469"
                           "l-*-2467"
                           "l-*-2465"
                           "l-*-2463"
                           "l-*-2461"
                           "l-*-2459"
                           "l-*-2457"
                           "l-*-2455"
                           "l-*-2453"
                           "l-*-2451"
                           "l-*-2450"
                           "l-*-2448"
                           "l-*-2445"
                           "l-*-2444"
                           "l-*-2443"
                           "l-*-2441"
                           "l-*-2440"
                           "l-*-2438"
                           "l-*-2436"
                           "l-*-2434"
                           "l-*-2432"
                           "l-*-2430"
                           "l-*-2428"
                           "l-*-2426"
                           "l-*-2424"
                           "l-*-2421"
                           "l-*-2419"
                           "l-*-2418"
                           "l-*-2416"
                           "l-*-2414"
                           "l-*-2412"
                           "l-*-2410"
                           "l-*-2409"
                           "l-*-2408"
                           "l-*-2407"
                           "l-*-2405"
                           "l-*-2404"
                           "l-*-2401"
                           "l-*-2399"
                           "l-*-2397"
                           "l-*-2395"
                           "l-*-2393"
                           "l-*-2391"
                           "l-*-2389"
                           "l-*-2388"
                           "l-*-2387"
                           "l-*-2385"
                           "l-*-2383"
                           "l-*-2382"
                           "l-*-2379"
                           "l-*-2378"
                           "l-*-2376"
                           "l-*-2374"
                           "l-*-2372"
                           "l-*-2370"
                           "l-*-2368"
                           "l-*-2366"
                           "l-*-2364"
                           "l-*-2362"
                           "l-*-2360"
                           "l-*-2357"
                           "l-*-2355"
                           "l-*-2353"
                           "l-*-2351"
                           "l-*-2349"
                           "l-*-2347"
                           "l-*-2345"
                           "l-*-2343"
                           "l-*-2341"
                           "l-*-2339"
                           "l-*-2337"
                           "l-*-2335"
                           "l-*-2333"
                           "l-*-2331"
                           "l-*-2329"
                           "l-*-2327"
                           "l-*-2325"
                           "l-*-2323"
                           "l-*-2321"
                           "l-*-2319"
                           "l-*-2317"
                           "l-*-2315"
                           "l-*-2313"
                           "l-*-2311"
                           "l-*-2309"
                           "l-*-2307"
                           "l-*-2306"
                           "l-*-2305"
                           "l-*-2304"
                           "l-*-2303"
                           "l-*-2301"
                           "l-*-2299"
                           "l-*-2297"
                           "l-*-2294"
                           "l-*-2292"
                           "l-*-2290"
                           "l-*-2288"
                           "l-*-2286"
                           "l-*-2284"
                           "l-*-2282"
                           "l-*-2280"
                           "l-*-2278"
                           "l-*-2276"
                           "l-*-2274"
                           "l-*-2272"
                           "l-*-2270"
                           "l-*-2268"
                           "l-*-2266"
                           "l-*-2264"
                           "l-*-2262"
                           "l-*-2260"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("l-*-2098" "l-*-2097" "l-*-2096")))
                       (hygiene guile))
                    '(())))
             #f)
           #f)))
     (lambda-formals-6390
       (lambda (orig-args-26600)
         (letrec*
           ((req-26601
              (lambda (args-26605 rreq-26606)
                (let ((tmp-26608 ($sc-dispatch args-26605 '())))
                  (if tmp-26608
                    (@apply
                      (lambda () (check-26602 (reverse rreq-26606) #f))
                      tmp-26608)
                    (let ((tmp-26731
                            ($sc-dispatch args-26605 '(any . any))))
                      (if (if tmp-26731
                            (@apply
                              (lambda (a-26735 b-26736)
                                (if (symbol? a-26735)
                                  #t
                                  (if (if (vector? a-26735)
                                        (if (= (vector-length a-26735) 4)
                                          (eq? (vector-ref a-26735 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-26735 1))
                                    #f)))
                              tmp-26731)
                            #f)
                        (@apply
                          (lambda (a-26763 b-26764)
                            (req-26601 b-26764 (cons a-26763 rreq-26606)))
                          tmp-26731)
                        (let ((tmp-26765 (list args-26605)))
                          (if (@apply
                                (lambda (r-26767)
                                  (if (symbol? r-26767)
                                    #t
                                    (if (if (vector? r-26767)
                                          (if (= (vector-length r-26767) 4)
                                            (eq? (vector-ref r-26767 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref r-26767 1))
                                      #f)))
                                tmp-26765)
                            (@apply
                              (lambda (r-26797)
                                (check-26602 (reverse rreq-26606) r-26797))
                              tmp-26765)
                            (syntax-violation
                              'lambda
                              "invalid argument list"
                              orig-args-26600
                              args-26605)))))))))
            (check-26602
              (lambda (req-26928 rest-26929)
                (if (distinct-bound-ids?-6372
                      (if rest-26929
                        (cons rest-26929 req-26928)
                        req-26928))
                  (values req-26928 #f rest-26929 #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    orig-args-26600)))))
           (req-26601 orig-args-26600 '()))))
     (expand-simple-lambda-6391
       (lambda (e-27045
                r-27046
                w-27047
                s-27048
                mod-27049
                req-27050
                rest-27051
                meta-27052
                body-27053)
         (let ((ids-27054
                 (if rest-27051
                   (append req-27050 (list rest-27051))
                   req-27050)))
           (let ((vars-27055 (map gen-var-6395 ids-27054)))
             (let ((labels-27056 (gen-labels-6348 ids-27054)))
               (build-simple-lambda-6321
                 s-27048
                 (map syntax->datum req-27050)
                 (if rest-27051 (syntax->datum rest-27051) #f)
                 vars-27055
                 meta-27052
                 (expand-body-6385
                   body-27053
                   (wrap-6374
                     (begin
                       (if (if (pair? e-27045) s-27048 #f)
                         (set-source-properties! e-27045 s-27048))
                       e-27045)
                     w-27047
                     mod-27049)
                   (extend-var-env-6340
                     labels-27056
                     vars-27055
                     r-27046)
                   (make-binding-wrap-6359
                     ids-27054
                     labels-27056
                     w-27047)
                   mod-27049)))))))
     (lambda*-formals-6392
       (lambda (orig-args-27336)
         (letrec*
           ((req-27337
              (lambda (args-27344 rreq-27345)
                (let ((tmp-27347 ($sc-dispatch args-27344 '())))
                  (if tmp-27347
                    (@apply
                      (lambda ()
                        (check-27341 (reverse rreq-27345) '() #f '()))
                      tmp-27347)
                    (let ((tmp-27353
                            ($sc-dispatch args-27344 '(any . any))))
                      (if (if tmp-27353
                            (@apply
                              (lambda (a-27357 b-27358)
                                (if (symbol? a-27357)
                                  #t
                                  (if (if (vector? a-27357)
                                        (if (= (vector-length a-27357) 4)
                                          (eq? (vector-ref a-27357 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-27357 1))
                                    #f)))
                              tmp-27353)
                            #f)
                        (@apply
                          (lambda (a-27385 b-27386)
                            (req-27337 b-27386 (cons a-27385 rreq-27345)))
                          tmp-27353)
                        (let ((tmp-27387
                                ($sc-dispatch args-27344 '(any . any))))
                          (if (if tmp-27387
                                (@apply
                                  (lambda (a-27391 b-27392)
                                    (eq? (syntax->datum a-27391) #:optional))
                                  tmp-27387)
                                #f)
                            (@apply
                              (lambda (a-27393 b-27394)
                                (opt-27338 b-27394 (reverse rreq-27345) '()))
                              tmp-27387)
                            (let ((tmp-27397
                                    ($sc-dispatch args-27344 '(any . any))))
                              (if (if tmp-27397
                                    (@apply
                                      (lambda (a-27401 b-27402)
                                        (eq? (syntax->datum a-27401) #:key))
                                      tmp-27397)
                                    #f)
                                (@apply
                                  (lambda (a-27403 b-27404)
                                    (key-27339
                                      b-27404
                                      (reverse rreq-27345)
                                      '()
                                      '()))
                                  tmp-27397)
                                (let ((tmp-27407
                                        ($sc-dispatch args-27344 '(any any))))
                                  (if (if tmp-27407
                                        (@apply
                                          (lambda (a-27411 b-27412)
                                            (eq? (syntax->datum a-27411)
                                                 #:rest))
                                          tmp-27407)
                                        #f)
                                    (@apply
                                      (lambda (a-27413 b-27414)
                                        (rest-27340
                                          b-27414
                                          (reverse rreq-27345)
                                          '()
                                          '()))
                                      tmp-27407)
                                    (let ((tmp-27417 (list args-27344)))
                                      (if (@apply
                                            (lambda (r-27419)
                                              (if (symbol? r-27419)
                                                #t
                                                (if (if (vector? r-27419)
                                                      (if (= (vector-length
                                                               r-27419)
                                                             4)
                                                        (eq? (vector-ref
                                                               r-27419
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref r-27419 1))
                                                  #f)))
                                            tmp-27417)
                                        (@apply
                                          (lambda (r-27449)
                                            (rest-27340
                                              r-27449
                                              (reverse rreq-27345)
                                              '()
                                              '()))
                                          tmp-27417)
                                        (syntax-violation
                                          'lambda*
                                          "invalid argument list"
                                          orig-args-27336
                                          args-27344)))))))))))))))
            (opt-27338
              (lambda (args-27468 req-27469 ropt-27470)
                (let ((tmp-27472 ($sc-dispatch args-27468 '())))
                  (if tmp-27472
                    (@apply
                      (lambda ()
                        (check-27341
                          req-27469
                          (reverse ropt-27470)
                          #f
                          '()))
                      tmp-27472)
                    (let ((tmp-27478
                            ($sc-dispatch args-27468 '(any . any))))
                      (if (if tmp-27478
                            (@apply
                              (lambda (a-27482 b-27483)
                                (if (symbol? a-27482)
                                  #t
                                  (if (if (vector? a-27482)
                                        (if (= (vector-length a-27482) 4)
                                          (eq? (vector-ref a-27482 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-27482 1))
                                    #f)))
                              tmp-27478)
                            #f)
                        (@apply
                          (lambda (a-27510 b-27511)
                            (opt-27338
                              b-27511
                              req-27469
                              (cons (cons a-27510
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("l-*-4454" "l-*-4455"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("l-*-4444"
                                                   "l-*-4445"
                                                   "l-*-4446"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-4390"
                                                  "l-*-4388"
                                                  "l-*-4386"
                                                  "l-*-4384"
                                                  "l-*-4382"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("l-*-4381"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   locally-bound-identifiers
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   session-id
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-2527"
                                                  "l-*-2525"
                                                  "l-*-2523"
                                                  "l-*-2521"
                                                  "l-*-2519"
                                                  "l-*-2517"
                                                  "l-*-2515"
                                                  "l-*-2513"
                                                  "l-*-2511"
                                                  "l-*-2509"
                                                  "l-*-2507"
                                                  "l-*-2505"
                                                  "l-*-2503"
                                                  "l-*-2501"
                                                  "l-*-2499"
                                                  "l-*-2497"
                                                  "l-*-2495"
                                                  "l-*-2493"
                                                  "l-*-2491"
                                                  "l-*-2489"
                                                  "l-*-2487"
                                                  "l-*-2485"
                                                  "l-*-2483"
                                                  "l-*-2481"
                                                  "l-*-2479"
                                                  "l-*-2477"
                                                  "l-*-2475"
                                                  "l-*-2473"
                                                  "l-*-2471"
                                                  "l-*-2469"
                                                  "l-*-2467"
                                                  "l-*-2465"
                                                  "l-*-2463"
                                                  "l-*-2461"
                                                  "l-*-2459"
                                                  "l-*-2457"
                                                  "l-*-2455"
                                                  "l-*-2453"
                                                  "l-*-2451"
                                                  "l-*-2450"
                                                  "l-*-2448"
                                                  "l-*-2445"
                                                  "l-*-2444"
                                                  "l-*-2443"
                                                  "l-*-2441"
                                                  "l-*-2440"
                                                  "l-*-2438"
                                                  "l-*-2436"
                                                  "l-*-2434"
                                                  "l-*-2432"
                                                  "l-*-2430"
                                                  "l-*-2428"
                                                  "l-*-2426"
                                                  "l-*-2424"
                                                  "l-*-2421"
                                                  "l-*-2419"
                                                  "l-*-2418"
                                                  "l-*-2416"
                                                  "l-*-2414"
                                                  "l-*-2412"
                                                  "l-*-2410"
                                                  "l-*-2409"
                                                  "l-*-2408"
                                                  "l-*-2407"
                                                  "l-*-2405"
                                                  "l-*-2404"
                                                  "l-*-2401"
                                                  "l-*-2399"
                                                  "l-*-2397"
                                                  "l-*-2395"
                                                  "l-*-2393"
                                                  "l-*-2391"
                                                  "l-*-2389"
                                                  "l-*-2388"
                                                  "l-*-2387"
                                                  "l-*-2385"
                                                  "l-*-2383"
                                                  "l-*-2382"
                                                  "l-*-2379"
                                                  "l-*-2378"
                                                  "l-*-2376"
                                                  "l-*-2374"
                                                  "l-*-2372"
                                                  "l-*-2370"
                                                  "l-*-2368"
                                                  "l-*-2366"
                                                  "l-*-2364"
                                                  "l-*-2362"
                                                  "l-*-2360"
                                                  "l-*-2357"
                                                  "l-*-2355"
                                                  "l-*-2353"
                                                  "l-*-2351"
                                                  "l-*-2349"
                                                  "l-*-2347"
                                                  "l-*-2345"
                                                  "l-*-2343"
                                                  "l-*-2341"
                                                  "l-*-2339"
                                                  "l-*-2337"
                                                  "l-*-2335"
                                                  "l-*-2333"
                                                  "l-*-2331"
                                                  "l-*-2329"
                                                  "l-*-2327"
                                                  "l-*-2325"
                                                  "l-*-2323"
                                                  "l-*-2321"
                                                  "l-*-2319"
                                                  "l-*-2317"
                                                  "l-*-2315"
                                                  "l-*-2313"
                                                  "l-*-2311"
                                                  "l-*-2309"
                                                  "l-*-2307"
                                                  "l-*-2306"
                                                  "l-*-2305"
                                                  "l-*-2304"
                                                  "l-*-2303"
                                                  "l-*-2301"
                                                  "l-*-2299"
                                                  "l-*-2297"
                                                  "l-*-2294"
                                                  "l-*-2292"
                                                  "l-*-2290"
                                                  "l-*-2288"
                                                  "l-*-2286"
                                                  "l-*-2284"
                                                  "l-*-2282"
                                                  "l-*-2280"
                                                  "l-*-2278"
                                                  "l-*-2276"
                                                  "l-*-2274"
                                                  "l-*-2272"
                                                  "l-*-2270"
                                                  "l-*-2268"
                                                  "l-*-2266"
                                                  "l-*-2264"
                                                  "l-*-2262"
                                                  "l-*-2260"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("l-*-2098"
                                                  "l-*-2097"
                                                  "l-*-2096")))
                                              (hygiene guile))))
                                    ropt-27470)))
                          tmp-27478)
                        (let ((tmp-27512
                                ($sc-dispatch args-27468 '((any any) . any))))
                          (if (if tmp-27512
                                (@apply
                                  (lambda (a-27516 init-27517 b-27518)
                                    (if (symbol? a-27516)
                                      #t
                                      (if (if (vector? a-27516)
                                            (if (= (vector-length a-27516) 4)
                                              (eq? (vector-ref a-27516 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref a-27516 1))
                                        #f)))
                                  tmp-27512)
                                #f)
                            (@apply
                              (lambda (a-27545 init-27546 b-27547)
                                (opt-27338
                                  b-27547
                                  req-27469
                                  (cons (list a-27545 init-27546) ropt-27470)))
                              tmp-27512)
                            (let ((tmp-27548
                                    ($sc-dispatch args-27468 '(any . any))))
                              (if (if tmp-27548
                                    (@apply
                                      (lambda (a-27552 b-27553)
                                        (eq? (syntax->datum a-27552) #:key))
                                      tmp-27548)
                                    #f)
                                (@apply
                                  (lambda (a-27554 b-27555)
                                    (key-27339
                                      b-27555
                                      req-27469
                                      (reverse ropt-27470)
                                      '()))
                                  tmp-27548)
                                (let ((tmp-27558
                                        ($sc-dispatch args-27468 '(any any))))
                                  (if (if tmp-27558
                                        (@apply
                                          (lambda (a-27562 b-27563)
                                            (eq? (syntax->datum a-27562)
                                                 #:rest))
                                          tmp-27558)
                                        #f)
                                    (@apply
                                      (lambda (a-27564 b-27565)
                                        (rest-27340
                                          b-27565
                                          req-27469
                                          (reverse ropt-27470)
                                          '()))
                                      tmp-27558)
                                    (let ((tmp-27568 (list args-27468)))
                                      (if (@apply
                                            (lambda (r-27570)
                                              (if (symbol? r-27570)
                                                #t
                                                (if (if (vector? r-27570)
                                                      (if (= (vector-length
                                                               r-27570)
                                                             4)
                                                        (eq? (vector-ref
                                                               r-27570
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref r-27570 1))
                                                  #f)))
                                            tmp-27568)
                                        (@apply
                                          (lambda (r-27600)
                                            (rest-27340
                                              r-27600
                                              req-27469
                                              (reverse ropt-27470)
                                              '()))
                                          tmp-27568)
                                        (syntax-violation
                                          'lambda*
                                          "invalid optional argument list"
                                          orig-args-27336
                                          args-27468)))))))))))))))
            (key-27339
              (lambda (args-27619 req-27620 opt-27621 rkey-27622)
                (let ((tmp-27624 ($sc-dispatch args-27619 '())))
                  (if tmp-27624
                    (@apply
                      (lambda ()
                        (check-27341
                          req-27620
                          opt-27621
                          #f
                          (cons #f (reverse rkey-27622))))
                      tmp-27624)
                    (let ((tmp-27630
                            ($sc-dispatch args-27619 '(any . any))))
                      (if (if tmp-27630
                            (@apply
                              (lambda (a-27634 b-27635)
                                (if (symbol? a-27634)
                                  #t
                                  (if (if (vector? a-27634)
                                        (if (= (vector-length a-27634) 4)
                                          (eq? (vector-ref a-27634 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-27634 1))
                                    #f)))
                              tmp-27630)
                            #f)
                        (@apply
                          (lambda (a-27662 b-27663)
                            (let ((tmp-27664
                                    (symbol->keyword (syntax->datum a-27662))))
                              (key-27339
                                b-27663
                                req-27620
                                opt-27621
                                (cons (cons tmp-27664
                                            (cons a-27662
                                                  '(#(syntax-object
                                                      #f
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(k)
                                                         #((top))
                                                         #("l-*-4517"))
                                                       #(ribcage
                                                         #(a b)
                                                         #((top) (top))
                                                         #("l-*-4511"
                                                           "l-*-4512"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(args req opt rkey)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("l-*-4500"
                                                           "l-*-4501"
                                                           "l-*-4502"
                                                           "l-*-4503"))
                                                       #(ribcage
                                                         (check rest
                                                                key
                                                                opt
                                                                req)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-4390"
                                                          "l-*-4388"
                                                          "l-*-4386"
                                                          "l-*-4384"
                                                          "l-*-4382"))
                                                       #(ribcage
                                                         #(orig-args)
                                                         #((top))
                                                         #("l-*-4381"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           session-id
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-2527"
                                                          "l-*-2525"
                                                          "l-*-2523"
                                                          "l-*-2521"
                                                          "l-*-2519"
                                                          "l-*-2517"
                                                          "l-*-2515"
                                                          "l-*-2513"
                                                          "l-*-2511"
                                                          "l-*-2509"
                                                          "l-*-2507"
                                                          "l-*-2505"
                                                          "l-*-2503"
                                                          "l-*-2501"
                                                          "l-*-2499"
                                                          "l-*-2497"
                                                          "l-*-2495"
                                                          "l-*-2493"
                                                          "l-*-2491"
                                                          "l-*-2489"
                                                          "l-*-2487"
                                                          "l-*-2485"
                                                          "l-*-2483"
                                                          "l-*-2481"
                                                          "l-*-2479"
                                                          "l-*-2477"
                                                          "l-*-2475"
                                                          "l-*-2473"
                                                          "l-*-2471"
                                                          "l-*-2469"
                                                          "l-*-2467"
                                                          "l-*-2465"
                                                          "l-*-2463"
                                                          "l-*-2461"
                                                          "l-*-2459"
                                                          "l-*-2457"
                                                          "l-*-2455"
                                                          "l-*-2453"
                                                          "l-*-2451"
                                                          "l-*-2450"
                                                          "l-*-2448"
                                                          "l-*-2445"
                                                          "l-*-2444"
                                                          "l-*-2443"
                                                          "l-*-2441"
                                                          "l-*-2440"
                                                          "l-*-2438"
                                                          "l-*-2436"
                                                          "l-*-2434"
                                                          "l-*-2432"
                                                          "l-*-2430"
                                                          "l-*-2428"
                                                          "l-*-2426"
                                                          "l-*-2424"
                                                          "l-*-2421"
                                                          "l-*-2419"
                                                          "l-*-2418"
                                                          "l-*-2416"
                                                          "l-*-2414"
                                                          "l-*-2412"
                                                          "l-*-2410"
                                                          "l-*-2409"
                                                          "l-*-2408"
                                                          "l-*-2407"
                                                          "l-*-2405"
                                                          "l-*-2404"
                                                          "l-*-2401"
                                                          "l-*-2399"
                                                          "l-*-2397"
                                                          "l-*-2395"
                                                          "l-*-2393"
                                                          "l-*-2391"
                                                          "l-*-2389"
                                                          "l-*-2388"
                                                          "l-*-2387"
                                                          "l-*-2385"
                                                          "l-*-2383"
                                                          "l-*-2382"
                                                          "l-*-2379"
                                                          "l-*-2378"
                                                          "l-*-2376"
                                                          "l-*-2374"
                                                          "l-*-2372"
                                                          "l-*-2370"
                                                          "l-*-2368"
                                                          "l-*-2366"
                                                          "l-*-2364"
                                                          "l-*-2362"
                                                          "l-*-2360"
                                                          "l-*-2357"
                                                          "l-*-2355"
                                                          "l-*-2353"
                                                          "l-*-2351"
                                                          "l-*-2349"
                                                          "l-*-2347"
                                                          "l-*-2345"
                                                          "l-*-2343"
                                                          "l-*-2341"
                                                          "l-*-2339"
                                                          "l-*-2337"
                                                          "l-*-2335"
                                                          "l-*-2333"
                                                          "l-*-2331"
                                                          "l-*-2329"
                                                          "l-*-2327"
                                                          "l-*-2325"
                                                          "l-*-2323"
                                                          "l-*-2321"
                                                          "l-*-2319"
                                                          "l-*-2317"
                                                          "l-*-2315"
                                                          "l-*-2313"
                                                          "l-*-2311"
                                                          "l-*-2309"
                                                          "l-*-2307"
                                                          "l-*-2306"
                                                          "l-*-2305"
                                                          "l-*-2304"
                                                          "l-*-2303"
                                                          "l-*-2301"
                                                          "l-*-2299"
                                                          "l-*-2297"
                                                          "l-*-2294"
                                                          "l-*-2292"
                                                          "l-*-2290"
                                                          "l-*-2288"
                                                          "l-*-2286"
                                                          "l-*-2284"
                                                          "l-*-2282"
                                                          "l-*-2280"
                                                          "l-*-2278"
                                                          "l-*-2276"
                                                          "l-*-2274"
                                                          "l-*-2272"
                                                          "l-*-2270"
                                                          "l-*-2268"
                                                          "l-*-2266"
                                                          "l-*-2264"
                                                          "l-*-2262"
                                                          "l-*-2260"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("l-*-2098"
                                                          "l-*-2097"
                                                          "l-*-2096")))
                                                      (hygiene guile)))))
                                      rkey-27622))))
                          tmp-27630)
                        (let ((tmp-27667
                                ($sc-dispatch args-27619 '((any any) . any))))
                          (if (if tmp-27667
                                (@apply
                                  (lambda (a-27671 init-27672 b-27673)
                                    (if (symbol? a-27671)
                                      #t
                                      (if (if (vector? a-27671)
                                            (if (= (vector-length a-27671) 4)
                                              (eq? (vector-ref a-27671 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref a-27671 1))
                                        #f)))
                                  tmp-27667)
                                #f)
                            (@apply
                              (lambda (a-27700 init-27701 b-27702)
                                (let ((tmp-27703
                                        (symbol->keyword
                                          (syntax->datum a-27700))))
                                  (key-27339
                                    b-27702
                                    req-27620
                                    opt-27621
                                    (cons (list tmp-27703 a-27700 init-27701)
                                          rkey-27622))))
                              tmp-27667)
                            (let ((tmp-27706
                                    ($sc-dispatch
                                      args-27619
                                      '((any any any) . any))))
                              (if (if tmp-27706
                                    (@apply
                                      (lambda (a-27710
                                               init-27711
                                               k-27712
                                               b-27713)
                                        (if (if (symbol? a-27710)
                                              #t
                                              (if (if (vector? a-27710)
                                                    (if (= (vector-length
                                                             a-27710)
                                                           4)
                                                      (eq? (vector-ref
                                                             a-27710
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref a-27710 1))
                                                #f))
                                          (keyword? (syntax->datum k-27712))
                                          #f))
                                      tmp-27706)
                                    #f)
                                (@apply
                                  (lambda (a-27740 init-27741 k-27742 b-27743)
                                    (key-27339
                                      b-27743
                                      req-27620
                                      opt-27621
                                      (cons (list k-27742 a-27740 init-27741)
                                            rkey-27622)))
                                  tmp-27706)
                                (let ((tmp-27744
                                        ($sc-dispatch args-27619 '(any))))
                                  (if (if tmp-27744
                                        (@apply
                                          (lambda (aok-27748)
                                            (eq? (syntax->datum aok-27748)
                                                 #:allow-other-keys))
                                          tmp-27744)
                                        #f)
                                    (@apply
                                      (lambda (aok-27749)
                                        (check-27341
                                          req-27620
                                          opt-27621
                                          #f
                                          (cons #t (reverse rkey-27622))))
                                      tmp-27744)
                                    (let ((tmp-27752
                                            ($sc-dispatch
                                              args-27619
                                              '(any any any))))
                                      (if (if tmp-27752
                                            (@apply
                                              (lambda (aok-27756
                                                       a-27757
                                                       b-27758)
                                                (if (eq? (syntax->datum
                                                           aok-27756)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum a-27757)
                                                       #:rest)
                                                  #f))
                                              tmp-27752)
                                            #f)
                                        (@apply
                                          (lambda (aok-27759 a-27760 b-27761)
                                            (rest-27340
                                              b-27761
                                              req-27620
                                              opt-27621
                                              (cons #t (reverse rkey-27622))))
                                          tmp-27752)
                                        (let ((tmp-27764
                                                ($sc-dispatch
                                                  args-27619
                                                  '(any . any))))
                                          (if (if tmp-27764
                                                (@apply
                                                  (lambda (aok-27768 r-27769)
                                                    (if (eq? (syntax->datum
                                                               aok-27768)
                                                             #:allow-other-keys)
                                                      (if (symbol? r-27769)
                                                        #t
                                                        (if (if (vector?
                                                                  r-27769)
                                                              (if (= (vector-length
                                                                       r-27769)
                                                                     4)
                                                                (eq? (vector-ref
                                                                       r-27769
                                                                       0)
                                                                     'syntax-object)
                                                                #f)
                                                              #f)
                                                          (symbol?
                                                            (vector-ref
                                                              r-27769
                                                              1))
                                                          #f))
                                                      #f))
                                                  tmp-27764)
                                                #f)
                                            (@apply
                                              (lambda (aok-27796 r-27797)
                                                (rest-27340
                                                  r-27797
                                                  req-27620
                                                  opt-27621
                                                  (cons #t
                                                        (reverse rkey-27622))))
                                              tmp-27764)
                                            (let ((tmp-27800
                                                    ($sc-dispatch
                                                      args-27619
                                                      '(any any))))
                                              (if (if tmp-27800
                                                    (@apply
                                                      (lambda (a-27804 b-27805)
                                                        (eq? (syntax->datum
                                                               a-27804)
                                                             #:rest))
                                                      tmp-27800)
                                                    #f)
                                                (@apply
                                                  (lambda (a-27806 b-27807)
                                                    (rest-27340
                                                      b-27807
                                                      req-27620
                                                      opt-27621
                                                      (cons #f
                                                            (reverse
                                                              rkey-27622))))
                                                  tmp-27800)
                                                (let ((tmp-27810
                                                        (list args-27619)))
                                                  (if (@apply
                                                        (lambda (r-27812)
                                                          (if (symbol? r-27812)
                                                            #t
                                                            (if (if (vector?
                                                                      r-27812)
                                                                  (if (= (vector-length
                                                                           r-27812)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           r-27812
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (symbol?
                                                                (vector-ref
                                                                  r-27812
                                                                  1))
                                                              #f)))
                                                        tmp-27810)
                                                    (@apply
                                                      (lambda (r-27842)
                                                        (rest-27340
                                                          r-27842
                                                          req-27620
                                                          opt-27621
                                                          (cons #f
                                                                (reverse
                                                                  rkey-27622))))
                                                      tmp-27810)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid keyword argument list"
                                                      orig-args-27336
                                                      args-27619)))))))))))))))))))))
            (rest-27340
              (lambda (args-27870 req-27871 opt-27872 kw-27873)
                (let ((tmp-27875 (list args-27870)))
                  (if (@apply
                        (lambda (r-27877)
                          (if (symbol? r-27877)
                            #t
                            (if (if (vector? r-27877)
                                  (if (= (vector-length r-27877) 4)
                                    (eq? (vector-ref r-27877 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref r-27877 1))
                              #f)))
                        tmp-27875)
                    (@apply
                      (lambda (r-27907)
                        (check-27341
                          req-27871
                          opt-27872
                          r-27907
                          kw-27873))
                      tmp-27875)
                    (syntax-violation
                      'lambda*
                      "invalid rest argument"
                      orig-args-27336
                      args-27870)))))
            (check-27341
              (lambda (req-27911 opt-27912 rest-27913 kw-27914)
                (if (distinct-bound-ids?-6372
                      (append
                        req-27911
                        (map car opt-27912)
                        (if rest-27913 (list rest-27913) '())
                        (if (pair? kw-27914)
                          (map cadr (cdr kw-27914))
                          '())))
                  (values req-27911 opt-27912 rest-27913 kw-27914)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    orig-args-27336)))))
           (req-27337 orig-args-27336 '()))))
     (expand-lambda-case-6393
       (lambda (e-28030
                r-28031
                w-28032
                s-28033
                mod-28034
                get-formals-28035
                clauses-28036)
         (letrec*
           ((parse-req-28037
              (lambda (req-28168
                       opt-28169
                       rest-28170
                       kw-28171
                       body-28172)
                (let ((vars-28173 (map gen-var-6395 req-28168))
                      (labels-28174 (gen-labels-6348 req-28168)))
                  (let ((r*-28175
                          (extend-var-env-6340
                            labels-28174
                            vars-28173
                            r-28031))
                        (w*-28176
                          (make-binding-wrap-6359
                            req-28168
                            labels-28174
                            w-28032)))
                    (parse-opt-28038
                      (map syntax->datum req-28168)
                      opt-28169
                      rest-28170
                      kw-28171
                      body-28172
                      (reverse vars-28173)
                      r*-28175
                      w*-28176
                      '()
                      '())))))
            (parse-opt-28038
              (lambda (req-28362
                       opt-28363
                       rest-28364
                       kw-28365
                       body-28366
                       vars-28367
                       r*-28368
                       w*-28369
                       out-28370
                       inits-28371)
                (if (pair? opt-28363)
                  (let ((tmp-28372 (car opt-28363)))
                    (let ((tmp-28373 ($sc-dispatch tmp-28372 '(any any))))
                      (if tmp-28373
                        (@apply
                          (lambda (id-28375 i-28376)
                            (let ((v-28377
                                    (let ((id-28385
                                            (if (if (vector? id-28375)
                                                  (if (= (vector-length
                                                           id-28375)
                                                         4)
                                                    (eq? (vector-ref
                                                           id-28375
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref id-28375 1)
                                              id-28375)))
                                      (gensym
                                        (string-append
                                          (symbol->string id-28385)
                                          "-")))))
                              (let ((l-28378 (gen-labels-6348 (list v-28377))))
                                (let ((r**-28379
                                        (extend-var-env-6340
                                          l-28378
                                          (list v-28377)
                                          r*-28368)))
                                  (let ((w**-28380
                                          (make-binding-wrap-6359
                                            (list id-28375)
                                            l-28378
                                            w*-28369)))
                                    (parse-opt-28038
                                      req-28362
                                      (cdr opt-28363)
                                      rest-28364
                                      kw-28365
                                      body-28366
                                      (cons v-28377 vars-28367)
                                      r**-28379
                                      w**-28380
                                      (cons (syntax->datum id-28375) out-28370)
                                      (cons (expand-6381
                                              i-28376
                                              r*-28368
                                              w*-28369
                                              mod-28034)
                                            inits-28371)))))))
                          tmp-28373)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-28372))))
                  (if rest-28364
                    (let ((v-28623
                            (let ((id-28633
                                    (if (if (vector? rest-28364)
                                          (if (= (vector-length rest-28364) 4)
                                            (eq? (vector-ref rest-28364 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref rest-28364 1)
                                      rest-28364)))
                              (gensym
                                (string-append
                                  (symbol->string id-28633)
                                  "-")))))
                      (let ((l-28624 (gen-labels-6348 (list v-28623))))
                        (let ((r*-28625
                                (extend-var-env-6340
                                  l-28624
                                  (list v-28623)
                                  r*-28368)))
                          (let ((w*-28626
                                  (make-binding-wrap-6359
                                    (list rest-28364)
                                    l-28624
                                    w*-28369)))
                            (parse-kw-28039
                              req-28362
                              (if (pair? out-28370) (reverse out-28370) #f)
                              (syntax->datum rest-28364)
                              (if (pair? kw-28365) (cdr kw-28365) kw-28365)
                              body-28366
                              (cons v-28623 vars-28367)
                              r*-28625
                              w*-28626
                              (if (pair? kw-28365) (car kw-28365) #f)
                              '()
                              inits-28371)))))
                    (parse-kw-28039
                      req-28362
                      (if (pair? out-28370) (reverse out-28370) #f)
                      #f
                      (if (pair? kw-28365) (cdr kw-28365) kw-28365)
                      body-28366
                      vars-28367
                      r*-28368
                      w*-28369
                      (if (pair? kw-28365) (car kw-28365) #f)
                      '()
                      inits-28371)))))
            (parse-kw-28039
              (lambda (req-28804
                       opt-28805
                       rest-28806
                       kw-28807
                       body-28808
                       vars-28809
                       r*-28810
                       w*-28811
                       aok-28812
                       out-28813
                       inits-28814)
                (if (pair? kw-28807)
                  (let ((tmp-28815 (car kw-28807)))
                    (let ((tmp-28816
                            ($sc-dispatch tmp-28815 '(any any any))))
                      (if tmp-28816
                        (@apply
                          (lambda (k-28818 id-28819 i-28820)
                            (let ((v-28821
                                    (let ((id-28829
                                            (if (if (vector? id-28819)
                                                  (if (= (vector-length
                                                           id-28819)
                                                         4)
                                                    (eq? (vector-ref
                                                           id-28819
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref id-28819 1)
                                              id-28819)))
                                      (gensym
                                        (string-append
                                          (symbol->string id-28829)
                                          "-")))))
                              (let ((l-28822 (gen-labels-6348 (list v-28821))))
                                (let ((r**-28823
                                        (extend-var-env-6340
                                          l-28822
                                          (list v-28821)
                                          r*-28810)))
                                  (let ((w**-28824
                                          (make-binding-wrap-6359
                                            (list id-28819)
                                            l-28822
                                            w*-28811)))
                                    (parse-kw-28039
                                      req-28804
                                      opt-28805
                                      rest-28806
                                      (cdr kw-28807)
                                      body-28808
                                      (cons v-28821 vars-28809)
                                      r**-28823
                                      w**-28824
                                      aok-28812
                                      (cons (list (syntax->datum k-28818)
                                                  (syntax->datum id-28819)
                                                  v-28821)
                                            out-28813)
                                      (cons (expand-6381
                                              i-28820
                                              r*-28810
                                              w*-28811
                                              mod-28034)
                                            inits-28814)))))))
                          tmp-28816)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-28815))))
                  (parse-body-28040
                    req-28804
                    opt-28805
                    rest-28806
                    (if (if aok-28812 aok-28812 (pair? out-28813))
                      (cons aok-28812 (reverse out-28813))
                      #f)
                    body-28808
                    (reverse vars-28809)
                    r*-28810
                    w*-28811
                    (reverse inits-28814)
                    '()))))
            (parse-body-28040
              (lambda (req-29076
                       opt-29077
                       rest-29078
                       kw-29079
                       body-29080
                       vars-29081
                       r*-29082
                       w*-29083
                       inits-29084
                       meta-29085)
                (let ((tmp-29087
                        ($sc-dispatch body-29080 '(any any . each-any))))
                  (if (if tmp-29087
                        (@apply
                          (lambda (docstring-29091 e1-29092 e2-29093)
                            (string? (syntax->datum docstring-29091)))
                          tmp-29087)
                        #f)
                    (@apply
                      (lambda (docstring-29094 e1-29095 e2-29096)
                        (parse-body-28040
                          req-29076
                          opt-29077
                          rest-29078
                          kw-29079
                          (cons e1-29095 e2-29096)
                          vars-29081
                          r*-29082
                          w*-29083
                          inits-29084
                          (append
                            meta-29085
                            (list (cons 'documentation
                                        (syntax->datum docstring-29094))))))
                      tmp-29087)
                    (let ((tmp-29097
                            ($sc-dispatch
                              body-29080
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if tmp-29097
                        (@apply
                          (lambda (k-29101 v-29102 e1-29103 e2-29104)
                            (parse-body-28040
                              req-29076
                              opt-29077
                              rest-29078
                              kw-29079
                              (cons e1-29103 e2-29104)
                              vars-29081
                              r*-29082
                              w*-29083
                              inits-29084
                              (append
                                meta-29085
                                (syntax->datum (map cons k-29101 v-29102)))))
                          tmp-29097)
                        (let ((tmp-29105
                                ($sc-dispatch body-29080 '(any . each-any))))
                          (if tmp-29105
                            (@apply
                              (lambda (e1-29109 e2-29110)
                                (values
                                  meta-29085
                                  req-29076
                                  opt-29077
                                  rest-29078
                                  kw-29079
                                  inits-29084
                                  vars-29081
                                  (expand-body-6385
                                    (cons e1-29109 e2-29110)
                                    (wrap-6374
                                      (begin
                                        (if (if (pair? e-28030) s-28033 #f)
                                          (set-source-properties!
                                            e-28030
                                            s-28033))
                                        e-28030)
                                      w-28032
                                      mod-28034)
                                    r*-29082
                                    w*-29083
                                    mod-28034)))
                              tmp-29105)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              body-29080))))))))))
           (let ((tmp-28042 ($sc-dispatch clauses-28036 '())))
             (if tmp-28042
               (@apply (lambda () (values '() #f)) tmp-28042)
               (let ((tmp-28046
                       ($sc-dispatch
                         clauses-28036
                         '((any any . each-any)
                           .
                           #(each (any any . each-any))))))
                 (if tmp-28046
                   (@apply
                     (lambda (args-28050
                              e1-28051
                              e2-28052
                              args*-28053
                              e1*-28054
                              e2*-28055)
                       (call-with-values
                         (lambda () (get-formals-28035 args-28050))
                         (lambda (req-28056 opt-28057 rest-28058 kw-28059)
                           (call-with-values
                             (lambda ()
                               (parse-req-28037
                                 req-28056
                                 opt-28057
                                 rest-28058
                                 kw-28059
                                 (cons e1-28051 e2-28052)))
                             (lambda (meta-28124
                                      req-28125
                                      opt-28126
                                      rest-28127
                                      kw-28128
                                      inits-28129
                                      vars-28130
                                      body-28131)
                               (call-with-values
                                 (lambda ()
                                   (expand-lambda-case-6393
                                     e-28030
                                     r-28031
                                     w-28032
                                     s-28033
                                     mod-28034
                                     get-formals-28035
                                     (map (lambda (tmp-4852-28132
                                                   tmp-4851-28133
                                                   tmp-4850-28134)
                                            (cons tmp-4850-28134
                                                  (cons tmp-4851-28133
                                                        tmp-4852-28132)))
                                          e2*-28055
                                          e1*-28054
                                          args*-28053)))
                                 (lambda (meta*-28135 else*-28136)
                                   (values
                                     (append meta-28124 meta*-28135)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       s-28033
                                       req-28125
                                       opt-28126
                                       rest-28127
                                       kw-28128
                                       inits-28129
                                       vars-28130
                                       body-28131
                                       else*-28136)))))))))
                     tmp-28046)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     clauses-28036))))))))
     (strip-6394
       (lambda (x-29147 w-29148)
         (if (memq 'top (car w-29148))
           x-29147
           (letrec*
             ((f-29149
                (lambda (x-29152)
                  (if (if (vector? x-29152)
                        (if (= (vector-length x-29152) 4)
                          (eq? (vector-ref x-29152 0) 'syntax-object)
                          #f)
                        #f)
                    (strip-6394
                      (vector-ref x-29152 1)
                      (vector-ref x-29152 2))
                    (if (pair? x-29152)
                      (let ((a-29171 (f-29149 (car x-29152)))
                            (d-29172 (f-29149 (cdr x-29152))))
                        (if (if (eq? a-29171 (car x-29152))
                              (eq? d-29172 (cdr x-29152))
                              #f)
                          x-29152
                          (cons a-29171 d-29172)))
                      (if (vector? x-29152)
                        (let ((old-29175 (vector->list x-29152)))
                          (let ((new-29176 (map f-29149 old-29175)))
                            (letrec*
                              ((lp-29177
                                 (lambda (l1-29253 l2-29254)
                                   (if (null? l1-29253)
                                     x-29152
                                     (if (eq? (car l1-29253) (car l2-29254))
                                       (lp-29177 (cdr l1-29253) (cdr l2-29254))
                                       (list->vector new-29176))))))
                              (lp-29177 old-29175 new-29176))))
                        x-29152))))))
             (f-29149 x-29147)))))
     (gen-var-6395
       (lambda (id-28180)
         (let ((id-28181
                 (if (if (vector? id-28180)
                       (if (= (vector-length id-28180) 4)
                         (eq? (vector-ref id-28180 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref id-28180 1)
                   id-28180)))
           (gensym
             (string-append (symbol->string id-28181) "-"))))))
    (begin
      (set! session-id-6306
        (let ((v-17516
                (module-variable
                  (current-module)
                  'syntax-session-id)))
          (lambda () ((variable-ref v-17516)))))
      (set! transformer-environment-6367
        (make-fluid
          (lambda (k-16548)
            (error "called outside the dynamic extent of a syntax transformer"))))
      (module-define!
        (current-module)
        'letrec-syntax
        (make-syntax-transformer
          'letrec-syntax
          'local-syntax
          #t))
      (module-define!
        (current-module)
        'let-syntax
        (make-syntax-transformer
          'let-syntax
          'local-syntax
          #f))
      (global-extend-6343
        'core
        'syntax-parameterize
        (lambda (e-6516 r-6517 w-6518 s-6519 mod-6520)
          (let ((tmp-6522
                  ($sc-dispatch
                    e-6516
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-6522
                  (@apply
                    (lambda (var-6526 val-6527 e1-6528 e2-6529)
                      (valid-bound-ids?-6371 var-6526))
                    tmp-6522)
                  #f)
              (@apply
                (lambda (var-6607 val-6608 e1-6609 e2-6610)
                  (let ((names-6611
                          (map (lambda (x-6661)
                                 (id-var-name-6364 x-6661 w-6518))
                               var-6607)))
                    (begin
                      (for-each
                        (lambda (id-6612 n-6613)
                          (let ((key-6614
                                  (car (let ((t-6621 (assq n-6613 r-6517)))
                                         (if t-6621
                                           (cdr t-6621)
                                           (if (symbol? n-6613)
                                             (let ((t-6626
                                                     (get-global-definition-hook-6308
                                                       n-6613
                                                       mod-6520)))
                                               (if t-6626 t-6626 '(global)))
                                             '(displaced-lexical)))))))
                            (if (eqv? key-6614 'displaced-lexical)
                              (syntax-violation
                                'syntax-parameterize
                                "identifier out of context"
                                e-6516
                                (wrap-6374
                                  (begin
                                    (if (if (pair? id-6612) s-6519 #f)
                                      (set-source-properties! id-6612 s-6519))
                                    id-6612)
                                  w-6518
                                  mod-6520)))))
                        var-6607
                        names-6611)
                      (expand-body-6385
                        (cons e1-6609 e2-6610)
                        (wrap-6374
                          (begin
                            (if (if (pair? e-6516) s-6519 #f)
                              (set-source-properties! e-6516 s-6519))
                            e-6516)
                          w-6518
                          mod-6520)
                        (extend-env-6339
                          names-6611
                          (let ((trans-r-6747 (macros-only-env-6341 r-6517)))
                            (map (lambda (x-6748)
                                   (cons 'macro
                                         (eval-local-transformer-6387
                                           (expand-6381
                                             x-6748
                                             trans-r-6747
                                             w-6518
                                             mod-6520)
                                           mod-6520)))
                                 val-6608))
                          r-6517)
                        w-6518
                        mod-6520))))
                tmp-6522)
              (syntax-violation
                'syntax-parameterize
                "bad syntax"
                (wrap-6374
                  (begin
                    (if (if (pair? e-6516) s-6519 #f)
                      (set-source-properties! e-6516 s-6519))
                    e-6516)
                  w-6518
                  mod-6520))))))
      (module-define!
        (current-module)
        'quote
        (make-syntax-transformer
          'quote
          'core
          (lambda (e-6957 r-6958 w-6959 s-6960 mod-6961)
            (let ((tmp-6963 ($sc-dispatch e-6957 '(_ any))))
              (if tmp-6963
                (@apply
                  (lambda (e-6966)
                    (let ((exp-6970 (strip-6394 e-6966 w-6959)))
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 1)
                        s-6960
                        exp-6970)))
                  tmp-6963)
                (syntax-violation
                  'quote
                  "bad syntax"
                  (wrap-6374
                    (begin
                      (if (if (pair? e-6957) s-6960 #f)
                        (set-source-properties! e-6957 s-6960))
                      e-6957)
                    w-6959
                    mod-6961)))))))
      (global-extend-6343
        'core
        'syntax
        (letrec*
          ((gen-syntax-7190
             (lambda (src-7292
                      e-7293
                      r-7294
                      maps-7295
                      ellipsis?-7296
                      mod-7297)
               (if (if (symbol? e-7293)
                     #t
                     (if (if (vector? e-7293)
                           (if (= (vector-length e-7293) 4)
                             (eq? (vector-ref e-7293 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref e-7293 1))
                       #f))
                 (let ((label-7324 (id-var-name-6364 e-7293 '(()))))
                   (let ((b-7325
                           (let ((t-7332 (assq label-7324 r-7294)))
                             (if t-7332
                               (cdr t-7332)
                               (if (symbol? label-7324)
                                 (let ((t-7338
                                         (get-global-definition-hook-6308
                                           label-7324
                                           mod-7297)))
                                   (if t-7338 t-7338 '(global)))
                                 '(displaced-lexical))))))
                     (if (eq? (car b-7325) 'syntax)
                       (call-with-values
                         (lambda ()
                           (let ((var.lev-7347 (cdr b-7325)))
                             (gen-ref-7191
                               src-7292
                               (car var.lev-7347)
                               (cdr var.lev-7347)
                               maps-7295)))
                         (lambda (var-7351 maps-7352)
                           (values (list 'ref var-7351) maps-7352)))
                       (if (ellipsis?-7296 e-7293)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           src-7292)
                         (values (list 'quote e-7293) maps-7295)))))
                 (let ((tmp-7354 ($sc-dispatch e-7293 '(any any))))
                   (if (if tmp-7354
                         (@apply
                           (lambda (dots-7358 e-7359)
                             (ellipsis?-7296 dots-7358))
                           tmp-7354)
                         #f)
                     (@apply
                       (lambda (dots-7360 e-7361)
                         (gen-syntax-7190
                           src-7292
                           e-7361
                           r-7294
                           maps-7295
                           (lambda (x-7362) #f)
                           mod-7297))
                       tmp-7354)
                     (let ((tmp-7363 ($sc-dispatch e-7293 '(any any . any))))
                       (if (if tmp-7363
                             (@apply
                               (lambda (x-7367 dots-7368 y-7369)
                                 (ellipsis?-7296 dots-7368))
                               tmp-7363)
                             #f)
                         (@apply
                           (lambda (x-7370 dots-7371 y-7372)
                             (letrec*
                               ((f-7373
                                  (lambda (y-7381 k-7382)
                                    (let ((tmp-7384
                                            ($sc-dispatch
                                              y-7381
                                              '(any . any))))
                                      (if (if tmp-7384
                                            (@apply
                                              (lambda (dots-7388 y-7389)
                                                (ellipsis?-7296 dots-7388))
                                              tmp-7384)
                                            #f)
                                        (@apply
                                          (lambda (dots-7390 y-7391)
                                            (f-7373
                                              y-7391
                                              (lambda (maps-7392)
                                                (call-with-values
                                                  (lambda ()
                                                    (k-7382
                                                      (cons '() maps-7392)))
                                                  (lambda (x-7393 maps-7394)
                                                    (if (null? (car maps-7394))
                                                      (syntax-violation
                                                        'syntax
                                                        "extra ellipsis"
                                                        src-7292)
                                                      (values
                                                        (let ((map-env-7398
                                                                (car maps-7394)))
                                                          (list 'apply
                                                                '(primitive
                                                                   append)
                                                                (gen-map-7193
                                                                  x-7393
                                                                  map-env-7398)))
                                                        (cdr maps-7394))))))))
                                          tmp-7384)
                                        (call-with-values
                                          (lambda ()
                                            (gen-syntax-7190
                                              src-7292
                                              y-7381
                                              r-7294
                                              maps-7295
                                              ellipsis?-7296
                                              mod-7297))
                                          (lambda (y-7401 maps-7402)
                                            (call-with-values
                                              (lambda () (k-7382 maps-7402))
                                              (lambda (x-7403 maps-7404)
                                                (values
                                                  (if (equal? y-7401 ''())
                                                    x-7403
                                                    (list 'append
                                                          x-7403
                                                          y-7401))
                                                  maps-7404))))))))))
                               (f-7373
                                 y-7372
                                 (lambda (maps-7376)
                                   (call-with-values
                                     (lambda ()
                                       (gen-syntax-7190
                                         src-7292
                                         x-7370
                                         r-7294
                                         (cons '() maps-7376)
                                         ellipsis?-7296
                                         mod-7297))
                                     (lambda (x-7377 maps-7378)
                                       (if (null? (car maps-7378))
                                         (syntax-violation
                                           'syntax
                                           "extra ellipsis"
                                           src-7292)
                                         (values
                                           (gen-map-7193
                                             x-7377
                                             (car maps-7378))
                                           (cdr maps-7378)))))))))
                           tmp-7363)
                         (let ((tmp-7420 ($sc-dispatch e-7293 '(any . any))))
                           (if tmp-7420
                             (@apply
                               (lambda (x-7424 y-7425)
                                 (call-with-values
                                   (lambda ()
                                     (gen-syntax-7190
                                       src-7292
                                       x-7424
                                       r-7294
                                       maps-7295
                                       ellipsis?-7296
                                       mod-7297))
                                   (lambda (x-7426 maps-7427)
                                     (call-with-values
                                       (lambda ()
                                         (gen-syntax-7190
                                           src-7292
                                           y-7425
                                           r-7294
                                           maps-7427
                                           ellipsis?-7296
                                           mod-7297))
                                       (lambda (y-7428 maps-7429)
                                         (values
                                           (let ((key-7434 (car y-7428)))
                                             (if (eqv? key-7434 'quote)
                                               (if (eq? (car x-7426) 'quote)
                                                 (list 'quote
                                                       (cons (car (cdr x-7426))
                                                             (car (cdr y-7428))))
                                                 (if (eq? (car (cdr y-7428))
                                                          '())
                                                   (list 'list x-7426)
                                                   (list 'cons x-7426 y-7428)))
                                               (if (eqv? key-7434 'list)
                                                 (cons 'list
                                                       (cons x-7426
                                                             (cdr y-7428)))
                                                 (list 'cons x-7426 y-7428))))
                                           maps-7429))))))
                               tmp-7420)
                             (let ((tmp-7463
                                     ($sc-dispatch
                                       e-7293
                                       '#(vector (any . each-any)))))
                               (if tmp-7463
                                 (@apply
                                   (lambda (e1-7467 e2-7468)
                                     (call-with-values
                                       (lambda ()
                                         (gen-syntax-7190
                                           src-7292
                                           (cons e1-7467 e2-7468)
                                           r-7294
                                           maps-7295
                                           ellipsis?-7296
                                           mod-7297))
                                       (lambda (e-7469 maps-7470)
                                         (values
                                           (if (eq? (car e-7469) 'list)
                                             (cons 'vector (cdr e-7469))
                                             (if (eq? (car e-7469) 'quote)
                                               (list 'quote
                                                     (list->vector
                                                       (car (cdr e-7469))))
                                               (list 'list->vector e-7469)))
                                           maps-7470))))
                                   tmp-7463)
                                 (values
                                   (list 'quote e-7293)
                                   maps-7295))))))))))))
           (gen-ref-7191
             (lambda (src-7497 var-7498 level-7499 maps-7500)
               (if (= level-7499 0)
                 (values var-7498 maps-7500)
                 (if (null? maps-7500)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     src-7497)
                   (call-with-values
                     (lambda ()
                       (gen-ref-7191
                         src-7497
                         var-7498
                         (#{1-}# level-7499)
                         (cdr maps-7500)))
                     (lambda (outer-var-7501 outer-maps-7502)
                       (let ((b-7503 (assq outer-var-7501 (car maps-7500))))
                         (if b-7503
                           (values (cdr b-7503) maps-7500)
                           (let ((inner-var-7505
                                   (gensym
                                     (string-append
                                       (symbol->string 'tmp)
                                       "-"))))
                             (values
                               inner-var-7505
                               (cons (cons (cons outer-var-7501 inner-var-7505)
                                           (car maps-7500))
                                     outer-maps-7502)))))))))))
           (gen-map-7193
             (lambda (e-7519 map-env-7520)
               (let ((formals-7521 (map cdr map-env-7520))
                     (actuals-7522
                       (map (lambda (x-7524) (list 'ref (car x-7524)))
                            map-env-7520)))
                 (if (eq? (car e-7519) 'ref)
                   (car actuals-7522)
                   (if (and-map
                         (lambda (x-7525)
                           (if (eq? (car x-7525) 'ref)
                             (memq (car (cdr x-7525)) formals-7521)
                             #f))
                         (cdr e-7519))
                     (cons 'map
                           (cons (list 'primitive (car e-7519))
                                 (map (let ((r-7527
                                              (map cons
                                                   formals-7521
                                                   actuals-7522)))
                                        (lambda (x-7528)
                                          (cdr (assq (car (cdr x-7528))
                                                     r-7527))))
                                      (cdr e-7519))))
                     (cons 'map
                           (cons (list 'lambda formals-7521 e-7519)
                                 actuals-7522)))))))
           (regen-7197
             (lambda (x-7530)
               (let ((key-7531 (car x-7530)))
                 (if (eqv? key-7531 'ref)
                   (let ((name-7541 (car (cdr x-7530)))
                         (var-7542 (car (cdr x-7530))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 3)
                       #f
                       name-7541
                       var-7542))
                   (if (eqv? key-7531 'primitive)
                     (let ((name-7554 (car (cdr x-7530))))
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           name-7554)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           name-7554
                           #f)))
                     (if (eqv? key-7531 'quote)
                       (let ((exp-7572 (car (cdr x-7530))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 1)
                           #f
                           exp-7572))
                       (if (eqv? key-7531 'lambda)
                         (if (list? (car (cdr x-7530)))
                           (let ((req-7583 (car (cdr x-7530)))
                                 (vars-7585 (car (cdr x-7530)))
                                 (exp-7587
                                   (regen-7197 (car (cdr (cdr x-7530))))))
                             (let ((body-7592
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       req-7583
                                       #f
                                       #f
                                       #f
                                       '()
                                       vars-7585
                                       exp-7587
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 body-7592)))
                           (error "how did we get here" x-7530))
                         (let ((fun-exp-7608
                                 (let ((name-7617 (car x-7530)))
                                   (if (equal?
                                         (module-name (current-module))
                                         '(guile))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 7)
                                       #f
                                       name-7617)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 5)
                                       #f
                                       '(guile)
                                       name-7617
                                       #f))))
                               (arg-exps-7609 (map regen-7197 (cdr x-7530))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 11)
                             #f
                             fun-exp-7608
                             arg-exps-7609))))))))))
          (lambda (e-7198 r-7199 w-7200 s-7201 mod-7202)
            (let ((e-7203
                    (wrap-6374
                      (begin
                        (if (if (pair? e-7198) s-7201 #f)
                          (set-source-properties! e-7198 s-7201))
                        e-7198)
                      w-7200
                      mod-7202)))
              (let ((tmp-7205 ($sc-dispatch e-7203 '(_ any))))
                (if tmp-7205
                  (@apply
                    (lambda (x-7230)
                      (call-with-values
                        (lambda ()
                          (gen-syntax-7190
                            e-7203
                            x-7230
                            r-7199
                            '()
                            ellipsis?-6389
                            mod-7202))
                        (lambda (e-7284 maps-7285) (regen-7197 e-7284))))
                    tmp-7205)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    e-7203)))))))
      (global-extend-6343
        'core
        'lambda
        (lambda (e-7805 r-7806 w-7807 s-7808 mod-7809)
          (let ((tmp-7811
                  ($sc-dispatch e-7805 '(_ any any . each-any))))
            (if tmp-7811
              (@apply
                (lambda (args-7815 e1-7816 e2-7817)
                  (call-with-values
                    (lambda () (lambda-formals-6390 args-7815))
                    (lambda (req-7820 opt-7821 rest-7822 kw-7823)
                      (letrec*
                        ((lp-7824
                           (lambda (body-7827 meta-7828)
                             (let ((tmp-7830
                                     ($sc-dispatch
                                       body-7827
                                       '(any any . each-any))))
                               (if (if tmp-7830
                                     (@apply
                                       (lambda (docstring-7834 e1-7835 e2-7836)
                                         (string?
                                           (syntax->datum docstring-7834)))
                                       tmp-7830)
                                     #f)
                                 (@apply
                                   (lambda (docstring-7837 e1-7838 e2-7839)
                                     (lp-7824
                                       (cons e1-7838 e2-7839)
                                       (append
                                         meta-7828
                                         (list (cons 'documentation
                                                     (syntax->datum
                                                       docstring-7837))))))
                                   tmp-7830)
                                 (let ((tmp-7840
                                         ($sc-dispatch
                                           body-7827
                                           '(#(vector #(each (any . any)))
                                             any
                                             .
                                             each-any))))
                                   (if tmp-7840
                                     (@apply
                                       (lambda (k-7844 v-7845 e1-7846 e2-7847)
                                         (lp-7824
                                           (cons e1-7846 e2-7847)
                                           (append
                                             meta-7828
                                             (syntax->datum
                                               (map cons k-7844 v-7845)))))
                                       tmp-7840)
                                     (expand-simple-lambda-6391
                                       e-7805
                                       r-7806
                                       w-7807
                                       s-7808
                                       mod-7809
                                       req-7820
                                       rest-7822
                                       meta-7828
                                       body-7827))))))))
                        (lp-7824 (cons e1-7816 e2-7817) '())))))
                tmp-7811)
              (syntax-violation 'lambda "bad lambda" e-7805)))))
      (global-extend-6343
        'core
        'lambda*
        (lambda (e-8136 r-8137 w-8138 s-8139 mod-8140)
          (let ((tmp-8142
                  ($sc-dispatch e-8136 '(_ any any . each-any))))
            (if tmp-8142
              (@apply
                (lambda (args-8146 e1-8147 e2-8148)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-6393
                        e-8136
                        r-8137
                        w-8138
                        s-8139
                        mod-8140
                        lambda*-formals-6392
                        (list (cons args-8146 (cons e1-8147 e2-8148)))))
                    (lambda (meta-8151 lcase-8152)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-8139
                        meta-8151
                        lcase-8152))))
                tmp-8142)
              (syntax-violation 'lambda "bad lambda*" e-8136)))))
      (global-extend-6343
        'core
        'case-lambda
        (lambda (e-8322 r-8323 w-8324 s-8325 mod-8326)
          (let ((tmp-8328
                  ($sc-dispatch
                    e-8322
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if tmp-8328
              (@apply
                (lambda (args-8332
                         e1-8333
                         e2-8334
                         args*-8335
                         e1*-8336
                         e2*-8337)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-6393
                        e-8322
                        r-8323
                        w-8324
                        s-8325
                        mod-8326
                        lambda-formals-6390
                        (cons (cons args-8332 (cons e1-8333 e2-8334))
                              (map (lambda (tmp-5320-8340
                                            tmp-5319-8341
                                            tmp-5318-8342)
                                     (cons tmp-5318-8342
                                           (cons tmp-5319-8341 tmp-5320-8340)))
                                   e2*-8337
                                   e1*-8336
                                   args*-8335))))
                    (lambda (meta-8343 lcase-8344)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-8325
                        meta-8343
                        lcase-8344))))
                tmp-8328)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                e-8322)))))
      (global-extend-6343
        'core
        'case-lambda*
        (lambda (e-8506 r-8507 w-8508 s-8509 mod-8510)
          (let ((tmp-8512
                  ($sc-dispatch
                    e-8506
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if tmp-8512
              (@apply
                (lambda (args-8516
                         e1-8517
                         e2-8518
                         args*-8519
                         e1*-8520
                         e2*-8521)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-6393
                        e-8506
                        r-8507
                        w-8508
                        s-8509
                        mod-8510
                        lambda*-formals-6392
                        (cons (cons args-8516 (cons e1-8517 e2-8518))
                              (map (lambda (tmp-5355-8524
                                            tmp-5354-8525
                                            tmp-5353-8526)
                                     (cons tmp-5353-8526
                                           (cons tmp-5354-8525 tmp-5355-8524)))
                                   e2*-8521
                                   e1*-8520
                                   args*-8519))))
                    (lambda (meta-8527 lcase-8528)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-8509
                        meta-8527
                        lcase-8528))))
                tmp-8512)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                e-8506)))))
      (global-extend-6343
        'core
        'let
        (letrec*
          ((expand-let-8719
             (lambda (e-8868
                      r-8869
                      w-8870
                      s-8871
                      mod-8872
                      constructor-8873
                      ids-8874
                      vals-8875
                      exps-8876)
               (if (not (valid-bound-ids?-6371 ids-8874))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   e-8868)
                 (let ((labels-8954 (gen-labels-6348 ids-8874))
                       (new-vars-8955 (map gen-var-6395 ids-8874)))
                   (let ((nw-8956
                           (make-binding-wrap-6359
                             ids-8874
                             labels-8954
                             w-8870))
                         (nr-8957
                           (extend-var-env-6340
                             labels-8954
                             new-vars-8955
                             r-8869)))
                     (constructor-8873
                       s-8871
                       (map syntax->datum ids-8874)
                       new-vars-8955
                       (map (lambda (x-8974)
                              (expand-6381 x-8974 r-8869 w-8870 mod-8872))
                            vals-8875)
                       (expand-body-6385
                         exps-8876
                         (source-wrap-6375 e-8868 nw-8956 s-8871 mod-8872)
                         nr-8957
                         nw-8956
                         mod-8872))))))))
          (lambda (e-8720 r-8721 w-8722 s-8723 mod-8724)
            (let ((tmp-8726
                    ($sc-dispatch
                      e-8720
                      '(_ #(each (any any)) any . each-any))))
              (if (if tmp-8726
                    (@apply
                      (lambda (id-8730 val-8731 e1-8732 e2-8733)
                        (and-map id?-6345 id-8730))
                      tmp-8726)
                    #f)
                (@apply
                  (lambda (id-8749 val-8750 e1-8751 e2-8752)
                    (expand-let-8719
                      e-8720
                      r-8721
                      w-8722
                      s-8723
                      mod-8724
                      build-let-6327
                      id-8749
                      val-8750
                      (cons e1-8751 e2-8752)))
                  tmp-8726)
                (let ((tmp-8782
                        ($sc-dispatch
                          e-8720
                          '(_ any #(each (any any)) any . each-any))))
                  (if (if tmp-8782
                        (@apply
                          (lambda (f-8786 id-8787 val-8788 e1-8789 e2-8790)
                            (if (if (symbol? f-8786)
                                  #t
                                  (if (if (vector? f-8786)
                                        (if (= (vector-length f-8786) 4)
                                          (eq? (vector-ref f-8786 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref f-8786 1))
                                    #f))
                              (and-map id?-6345 id-8787)
                              #f))
                          tmp-8782)
                        #f)
                    (@apply
                      (lambda (f-8832 id-8833 val-8834 e1-8835 e2-8836)
                        (expand-let-8719
                          e-8720
                          r-8721
                          w-8722
                          s-8723
                          mod-8724
                          build-named-let-6328
                          (cons f-8832 id-8833)
                          val-8834
                          (cons e1-8835 e2-8836)))
                      tmp-8782)
                    (syntax-violation
                      'let
                      "bad let"
                      (wrap-6374
                        (begin
                          (if (if (pair? e-8720) s-8723 #f)
                            (set-source-properties! e-8720 s-8723))
                          e-8720)
                        w-8722
                        mod-8724)))))))))
      (global-extend-6343
        'core
        'letrec
        (lambda (e-9386 r-9387 w-9388 s-9389 mod-9390)
          (let ((tmp-9392
                  ($sc-dispatch
                    e-9386
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-9392
                  (@apply
                    (lambda (id-9396 val-9397 e1-9398 e2-9399)
                      (and-map id?-6345 id-9396))
                    tmp-9392)
                  #f)
              (@apply
                (lambda (id-9415 val-9416 e1-9417 e2-9418)
                  (if (not (valid-bound-ids?-6371 id-9415))
                    (syntax-violation
                      'letrec
                      "duplicate bound variable"
                      e-9386)
                    (let ((labels-9508 (gen-labels-6348 id-9415))
                          (new-vars-9509 (map gen-var-6395 id-9415)))
                      (let ((w-9510
                              (make-binding-wrap-6359
                                id-9415
                                labels-9508
                                w-9388))
                            (r-9511
                              (extend-var-env-6340
                                labels-9508
                                new-vars-9509
                                r-9387)))
                        (build-letrec-6329
                          s-9389
                          #f
                          (map syntax->datum id-9415)
                          new-vars-9509
                          (map (lambda (x-9596)
                                 (expand-6381 x-9596 r-9511 w-9510 mod-9390))
                               val-9416)
                          (expand-body-6385
                            (cons e1-9417 e2-9418)
                            (wrap-6374
                              (begin
                                (if (if (pair? e-9386) s-9389 #f)
                                  (set-source-properties! e-9386 s-9389))
                                e-9386)
                              w-9510
                              mod-9390)
                            r-9511
                            w-9510
                            mod-9390))))))
                tmp-9392)
              (syntax-violation
                'letrec
                "bad letrec"
                (wrap-6374
                  (begin
                    (if (if (pair? e-9386) s-9389 #f)
                      (set-source-properties! e-9386 s-9389))
                    e-9386)
                  w-9388
                  mod-9390))))))
      (global-extend-6343
        'core
        'letrec*
        (lambda (e-9991 r-9992 w-9993 s-9994 mod-9995)
          (let ((tmp-9997
                  ($sc-dispatch
                    e-9991
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-9997
                  (@apply
                    (lambda (id-10001 val-10002 e1-10003 e2-10004)
                      (and-map id?-6345 id-10001))
                    tmp-9997)
                  #f)
              (@apply
                (lambda (id-10020 val-10021 e1-10022 e2-10023)
                  (if (not (valid-bound-ids?-6371 id-10020))
                    (syntax-violation
                      'letrec*
                      "duplicate bound variable"
                      e-9991)
                    (let ((labels-10113 (gen-labels-6348 id-10020))
                          (new-vars-10114 (map gen-var-6395 id-10020)))
                      (let ((w-10115
                              (make-binding-wrap-6359
                                id-10020
                                labels-10113
                                w-9993))
                            (r-10116
                              (extend-var-env-6340
                                labels-10113
                                new-vars-10114
                                r-9992)))
                        (build-letrec-6329
                          s-9994
                          #t
                          (map syntax->datum id-10020)
                          new-vars-10114
                          (map (lambda (x-10201)
                                 (expand-6381
                                   x-10201
                                   r-10116
                                   w-10115
                                   mod-9995))
                               val-10021)
                          (expand-body-6385
                            (cons e1-10022 e2-10023)
                            (wrap-6374
                              (begin
                                (if (if (pair? e-9991) s-9994 #f)
                                  (set-source-properties! e-9991 s-9994))
                                e-9991)
                              w-10115
                              mod-9995)
                            r-10116
                            w-10115
                            mod-9995))))))
                tmp-9997)
              (syntax-violation
                'letrec*
                "bad letrec*"
                (wrap-6374
                  (begin
                    (if (if (pair? e-9991) s-9994 #f)
                      (set-source-properties! e-9991 s-9994))
                    e-9991)
                  w-9993
                  mod-9995))))))
      (global-extend-6343
        'core
        'set!
        (lambda (e-10635 r-10636 w-10637 s-10638 mod-10639)
          (let ((tmp-10641 ($sc-dispatch e-10635 '(_ any any))))
            (if (if tmp-10641
                  (@apply
                    (lambda (id-10645 val-10646)
                      (if (symbol? id-10645)
                        #t
                        (if (if (vector? id-10645)
                              (if (= (vector-length id-10645) 4)
                                (eq? (vector-ref id-10645 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-10645 1))
                          #f)))
                    tmp-10641)
                  #f)
              (@apply
                (lambda (id-10673 val-10674)
                  (let ((n-10675 (id-var-name-6364 id-10673 w-10637))
                        (id-mod-10676
                          (if (if (vector? id-10673)
                                (if (= (vector-length id-10673) 4)
                                  (eq? (vector-ref id-10673 0) 'syntax-object)
                                  #f)
                                #f)
                            (vector-ref id-10673 3)
                            mod-10639)))
                    (let ((b-10677
                            (let ((t-10718 (assq n-10675 r-10636)))
                              (if t-10718
                                (cdr t-10718)
                                (if (symbol? n-10675)
                                  (let ((t-10723
                                          (get-global-definition-hook-6308
                                            n-10675
                                            id-mod-10676)))
                                    (if t-10723 t-10723 '(global)))
                                  '(displaced-lexical))))))
                      (let ((key-10678 (car b-10677)))
                        (if (eqv? key-10678 'lexical)
                          (build-lexical-assignment-6316
                            s-10638
                            (syntax->datum id-10673)
                            (cdr b-10677)
                            (expand-6381 val-10674 r-10636 w-10637 mod-10639))
                          (if (eqv? key-10678 'global)
                            (build-global-assignment-6319
                              s-10638
                              n-10675
                              (expand-6381 val-10674 r-10636 w-10637 mod-10639)
                              id-mod-10676)
                            (if (eqv? key-10678 'macro)
                              (let ((p-11037 (cdr b-10677)))
                                (if (procedure-property
                                      p-11037
                                      'variable-transformer)
                                  (expand-6381
                                    (expand-macro-6384
                                      p-11037
                                      e-10635
                                      r-10636
                                      w-10637
                                      s-10638
                                      #f
                                      mod-10639)
                                    r-10636
                                    '(())
                                    mod-10639)
                                  (syntax-violation
                                    'set!
                                    "not a variable transformer"
                                    (wrap-6374 e-10635 w-10637 mod-10639)
                                    (wrap-6374
                                      id-10673
                                      w-10637
                                      id-mod-10676))))
                              (if (eqv? key-10678 'displaced-lexical)
                                (syntax-violation
                                  'set!
                                  "identifier out of context"
                                  (wrap-6374 id-10673 w-10637 mod-10639))
                                (syntax-violation
                                  'set!
                                  "bad set!"
                                  (wrap-6374
                                    (begin
                                      (if (if (pair? e-10635) s-10638 #f)
                                        (set-source-properties!
                                          e-10635
                                          s-10638))
                                      e-10635)
                                    w-10637
                                    mod-10639))))))))))
                tmp-10641)
              (let ((tmp-11132
                      ($sc-dispatch e-10635 '(_ (any . each-any) any))))
                (if tmp-11132
                  (@apply
                    (lambda (head-11136 tail-11137 val-11138)
                      (call-with-values
                        (lambda ()
                          (syntax-type-6380
                            head-11136
                            r-10636
                            '(())
                            #f
                            #f
                            mod-10639
                            #t))
                        (lambda (type-11141
                                 value-11142
                                 formform-11143
                                 ee-11144
                                 ww-11145
                                 ss-11146
                                 modmod-11147)
                          (if (eqv? type-11141 'module-ref)
                            (let ((val-11153
                                    (expand-6381
                                      val-11138
                                      r-10636
                                      w-10637
                                      mod-10639)))
                              (call-with-values
                                (lambda ()
                                  (value-11142
                                    (cons head-11136 tail-11137)
                                    r-10636
                                    w-10637))
                                (lambda (e-11154
                                         r-11155
                                         w-11156
                                         s*-11157
                                         mod-11158)
                                  (let ((tmp-11160 (list e-11154)))
                                    (if (@apply
                                          (lambda (e-11162)
                                            (if (symbol? e-11162)
                                              #t
                                              (if (if (vector? e-11162)
                                                    (if (= (vector-length
                                                             e-11162)
                                                           4)
                                                      (eq? (vector-ref
                                                             e-11162
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref e-11162 1))
                                                #f)))
                                          tmp-11160)
                                      (@apply
                                        (lambda (e-11192)
                                          (build-global-assignment-6319
                                            s-10638
                                            (syntax->datum e-11192)
                                            val-11153
                                            mod-11158))
                                        tmp-11160)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        e-11154))))))
                            (build-application-6312
                              s-10638
                              (let ((e-11417
                                      (list '#(syntax-object
                                               setter
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(key)
                                                  #((m-*-5604 top))
                                                  #("l-*-5605"))
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(type
                                                    value
                                                    formform
                                                    ee
                                                    ww
                                                    ss
                                                    modmod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-5597"
                                                    "l-*-5598"
                                                    "l-*-5599"
                                                    "l-*-5600"
                                                    "l-*-5601"
                                                    "l-*-5602"
                                                    "l-*-5603"))
                                                #(ribcage
                                                  #(head tail val)
                                                  #((top) (top) (top))
                                                  #("l-*-5582"
                                                    "l-*-5583"
                                                    "l-*-5584"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e r w s mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-5551"
                                                    "l-*-5552"
                                                    "l-*-5553"
                                                    "l-*-5554"
                                                    "l-*-5555"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-2527"
                                                   "l-*-2525"
                                                   "l-*-2523"
                                                   "l-*-2521"
                                                   "l-*-2519"
                                                   "l-*-2517"
                                                   "l-*-2515"
                                                   "l-*-2513"
                                                   "l-*-2511"
                                                   "l-*-2509"
                                                   "l-*-2507"
                                                   "l-*-2505"
                                                   "l-*-2503"
                                                   "l-*-2501"
                                                   "l-*-2499"
                                                   "l-*-2497"
                                                   "l-*-2495"
                                                   "l-*-2493"
                                                   "l-*-2491"
                                                   "l-*-2489"
                                                   "l-*-2487"
                                                   "l-*-2485"
                                                   "l-*-2483"
                                                   "l-*-2481"
                                                   "l-*-2479"
                                                   "l-*-2477"
                                                   "l-*-2475"
                                                   "l-*-2473"
                                                   "l-*-2471"
                                                   "l-*-2469"
                                                   "l-*-2467"
                                                   "l-*-2465"
                                                   "l-*-2463"
                                                   "l-*-2461"
                                                   "l-*-2459"
                                                   "l-*-2457"
                                                   "l-*-2455"
                                                   "l-*-2453"
                                                   "l-*-2451"
                                                   "l-*-2450"
                                                   "l-*-2448"
                                                   "l-*-2445"
                                                   "l-*-2444"
                                                   "l-*-2443"
                                                   "l-*-2441"
                                                   "l-*-2440"
                                                   "l-*-2438"
                                                   "l-*-2436"
                                                   "l-*-2434"
                                                   "l-*-2432"
                                                   "l-*-2430"
                                                   "l-*-2428"
                                                   "l-*-2426"
                                                   "l-*-2424"
                                                   "l-*-2421"
                                                   "l-*-2419"
                                                   "l-*-2418"
                                                   "l-*-2416"
                                                   "l-*-2414"
                                                   "l-*-2412"
                                                   "l-*-2410"
                                                   "l-*-2409"
                                                   "l-*-2408"
                                                   "l-*-2407"
                                                   "l-*-2405"
                                                   "l-*-2404"
                                                   "l-*-2401"
                                                   "l-*-2399"
                                                   "l-*-2397"
                                                   "l-*-2395"
                                                   "l-*-2393"
                                                   "l-*-2391"
                                                   "l-*-2389"
                                                   "l-*-2388"
                                                   "l-*-2387"
                                                   "l-*-2385"
                                                   "l-*-2383"
                                                   "l-*-2382"
                                                   "l-*-2379"
                                                   "l-*-2378"
                                                   "l-*-2376"
                                                   "l-*-2374"
                                                   "l-*-2372"
                                                   "l-*-2370"
                                                   "l-*-2368"
                                                   "l-*-2366"
                                                   "l-*-2364"
                                                   "l-*-2362"
                                                   "l-*-2360"
                                                   "l-*-2357"
                                                   "l-*-2355"
                                                   "l-*-2353"
                                                   "l-*-2351"
                                                   "l-*-2349"
                                                   "l-*-2347"
                                                   "l-*-2345"
                                                   "l-*-2343"
                                                   "l-*-2341"
                                                   "l-*-2339"
                                                   "l-*-2337"
                                                   "l-*-2335"
                                                   "l-*-2333"
                                                   "l-*-2331"
                                                   "l-*-2329"
                                                   "l-*-2327"
                                                   "l-*-2325"
                                                   "l-*-2323"
                                                   "l-*-2321"
                                                   "l-*-2319"
                                                   "l-*-2317"
                                                   "l-*-2315"
                                                   "l-*-2313"
                                                   "l-*-2311"
                                                   "l-*-2309"
                                                   "l-*-2307"
                                                   "l-*-2306"
                                                   "l-*-2305"
                                                   "l-*-2304"
                                                   "l-*-2303"
                                                   "l-*-2301"
                                                   "l-*-2299"
                                                   "l-*-2297"
                                                   "l-*-2294"
                                                   "l-*-2292"
                                                   "l-*-2290"
                                                   "l-*-2288"
                                                   "l-*-2286"
                                                   "l-*-2284"
                                                   "l-*-2282"
                                                   "l-*-2280"
                                                   "l-*-2278"
                                                   "l-*-2276"
                                                   "l-*-2274"
                                                   "l-*-2272"
                                                   "l-*-2270"
                                                   "l-*-2268"
                                                   "l-*-2266"
                                                   "l-*-2264"
                                                   "l-*-2262"
                                                   "l-*-2260"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-2098"
                                                   "l-*-2097"
                                                   "l-*-2096")))
                                               (hygiene guile))
                                            head-11136)))
                                (call-with-values
                                  (lambda ()
                                    (syntax-type-6380
                                      e-11417
                                      r-10636
                                      w-10637
                                      (source-annotation-6338 e-11417)
                                      #f
                                      mod-10639
                                      #f))
                                  (lambda (type-11424
                                           value-11425
                                           form-11426
                                           e-11427
                                           w-11428
                                           s-11429
                                           mod-11430)
                                    (expand-expr-6382
                                      type-11424
                                      value-11425
                                      form-11426
                                      e-11427
                                      r-10636
                                      w-11428
                                      s-11429
                                      mod-11430))))
                              (map (lambda (e-11434)
                                     (call-with-values
                                       (lambda ()
                                         (syntax-type-6380
                                           e-11434
                                           r-10636
                                           w-10637
                                           (source-annotation-6338 e-11434)
                                           #f
                                           mod-10639
                                           #f))
                                       (lambda (type-11449
                                                value-11450
                                                form-11451
                                                e-11452
                                                w-11453
                                                s-11454
                                                mod-11455)
                                         (expand-expr-6382
                                           type-11449
                                           value-11450
                                           form-11451
                                           e-11452
                                           r-10636
                                           w-11453
                                           s-11454
                                           mod-11455))))
                                   (append tail-11137 (list val-11138))))))))
                    tmp-11132)
                  (syntax-violation
                    'set!
                    "bad set!"
                    (wrap-6374
                      (begin
                        (if (if (pair? e-10635) s-10638 #f)
                          (set-source-properties! e-10635 s-10638))
                        e-10635)
                      w-10637
                      mod-10639))))))))
      (module-define!
        (current-module)
        '@
        (make-syntax-transformer
          '@
          'module-ref
          (lambda (e-11498 r-11499 w-11500)
            (let ((tmp-11502
                    ($sc-dispatch e-11498 '(_ each-any any))))
              (if (if tmp-11502
                    (@apply
                      (lambda (mod-11505 id-11506)
                        (if (and-map id?-6345 mod-11505)
                          (if (symbol? id-11506)
                            #t
                            (if (if (vector? id-11506)
                                  (if (= (vector-length id-11506) 4)
                                    (eq? (vector-ref id-11506 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref id-11506 1))
                              #f))
                          #f))
                      tmp-11502)
                    #f)
                (@apply
                  (lambda (mod-11546 id-11547)
                    (values
                      (syntax->datum id-11547)
                      r-11499
                      w-11500
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("l-*-5646" "l-*-5647"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("l-*-5634" "l-*-5635" "l-*-5636"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-application
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      with-transformer-environment
                                      transformer-environment
                                      resolve-identifier
                                      locally-bound-identifiers
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-application
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      session-id
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-sequence
                                      make-application
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("l-*-2527"
                                     "l-*-2525"
                                     "l-*-2523"
                                     "l-*-2521"
                                     "l-*-2519"
                                     "l-*-2517"
                                     "l-*-2515"
                                     "l-*-2513"
                                     "l-*-2511"
                                     "l-*-2509"
                                     "l-*-2507"
                                     "l-*-2505"
                                     "l-*-2503"
                                     "l-*-2501"
                                     "l-*-2499"
                                     "l-*-2497"
                                     "l-*-2495"
                                     "l-*-2493"
                                     "l-*-2491"
                                     "l-*-2489"
                                     "l-*-2487"
                                     "l-*-2485"
                                     "l-*-2483"
                                     "l-*-2481"
                                     "l-*-2479"
                                     "l-*-2477"
                                     "l-*-2475"
                                     "l-*-2473"
                                     "l-*-2471"
                                     "l-*-2469"
                                     "l-*-2467"
                                     "l-*-2465"
                                     "l-*-2463"
                                     "l-*-2461"
                                     "l-*-2459"
                                     "l-*-2457"
                                     "l-*-2455"
                                     "l-*-2453"
                                     "l-*-2451"
                                     "l-*-2450"
                                     "l-*-2448"
                                     "l-*-2445"
                                     "l-*-2444"
                                     "l-*-2443"
                                     "l-*-2441"
                                     "l-*-2440"
                                     "l-*-2438"
                                     "l-*-2436"
                                     "l-*-2434"
                                     "l-*-2432"
                                     "l-*-2430"
                                     "l-*-2428"
                                     "l-*-2426"
                                     "l-*-2424"
                                     "l-*-2421"
                                     "l-*-2419"
                                     "l-*-2418"
                                     "l-*-2416"
                                     "l-*-2414"
                                     "l-*-2412"
                                     "l-*-2410"
                                     "l-*-2409"
                                     "l-*-2408"
                                     "l-*-2407"
                                     "l-*-2405"
                                     "l-*-2404"
                                     "l-*-2401"
                                     "l-*-2399"
                                     "l-*-2397"
                                     "l-*-2395"
                                     "l-*-2393"
                                     "l-*-2391"
                                     "l-*-2389"
                                     "l-*-2388"
                                     "l-*-2387"
                                     "l-*-2385"
                                     "l-*-2383"
                                     "l-*-2382"
                                     "l-*-2379"
                                     "l-*-2378"
                                     "l-*-2376"
                                     "l-*-2374"
                                     "l-*-2372"
                                     "l-*-2370"
                                     "l-*-2368"
                                     "l-*-2366"
                                     "l-*-2364"
                                     "l-*-2362"
                                     "l-*-2360"
                                     "l-*-2357"
                                     "l-*-2355"
                                     "l-*-2353"
                                     "l-*-2351"
                                     "l-*-2349"
                                     "l-*-2347"
                                     "l-*-2345"
                                     "l-*-2343"
                                     "l-*-2341"
                                     "l-*-2339"
                                     "l-*-2337"
                                     "l-*-2335"
                                     "l-*-2333"
                                     "l-*-2331"
                                     "l-*-2329"
                                     "l-*-2327"
                                     "l-*-2325"
                                     "l-*-2323"
                                     "l-*-2321"
                                     "l-*-2319"
                                     "l-*-2317"
                                     "l-*-2315"
                                     "l-*-2313"
                                     "l-*-2311"
                                     "l-*-2309"
                                     "l-*-2307"
                                     "l-*-2306"
                                     "l-*-2305"
                                     "l-*-2304"
                                     "l-*-2303"
                                     "l-*-2301"
                                     "l-*-2299"
                                     "l-*-2297"
                                     "l-*-2294"
                                     "l-*-2292"
                                     "l-*-2290"
                                     "l-*-2288"
                                     "l-*-2286"
                                     "l-*-2284"
                                     "l-*-2282"
                                     "l-*-2280"
                                     "l-*-2278"
                                     "l-*-2276"
                                     "l-*-2274"
                                     "l-*-2272"
                                     "l-*-2270"
                                     "l-*-2268"
                                     "l-*-2266"
                                     "l-*-2264"
                                     "l-*-2262"
                                     "l-*-2260"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("l-*-2098" "l-*-2097" "l-*-2096")))
                                 (hygiene guile))
                              mod-11546))))
                  tmp-11502)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  e-11498))))))
      (global-extend-6343
        'module-ref
        '@@
        (lambda (e-11639 r-11640 w-11641)
          (letrec*
            ((remodulate-11642
               (lambda (x-11677 mod-11678)
                 (if (pair? x-11677)
                   (cons (remodulate-11642 (car x-11677) mod-11678)
                         (remodulate-11642 (cdr x-11677) mod-11678))
                   (if (if (vector? x-11677)
                         (if (= (vector-length x-11677) 4)
                           (eq? (vector-ref x-11677 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((expression-11692
                             (remodulate-11642
                               (vector-ref x-11677 1)
                               mod-11678))
                           (wrap-11693 (vector-ref x-11677 2)))
                       (vector
                         'syntax-object
                         expression-11692
                         wrap-11693
                         mod-11678))
                     (if (vector? x-11677)
                       (let ((n-11701 (vector-length x-11677)))
                         (let ((v-11702 (make-vector n-11701)))
                           (letrec*
                             ((loop-11703
                                (lambda (i-11750)
                                  (if (= i-11750 n-11701)
                                    v-11702
                                    (begin
                                      (vector-set!
                                        v-11702
                                        i-11750
                                        (remodulate-11642
                                          (vector-ref x-11677 i-11750)
                                          mod-11678))
                                      (loop-11703 (#{1+}# i-11750)))))))
                             (loop-11703 0))))
                       x-11677))))))
            (let ((tmp-11644
                    ($sc-dispatch e-11639 '(_ each-any any))))
              (if (if tmp-11644
                    (@apply
                      (lambda (mod-11648 exp-11649)
                        (and-map id?-6345 mod-11648))
                      tmp-11644)
                    #f)
                (@apply
                  (lambda (mod-11665 exp-11666)
                    (let ((mod-11667
                            (syntax->datum
                              (cons '#(syntax-object
                                       private
                                       ((top)
                                        #(ribcage
                                          #(mod exp)
                                          #((top) (top))
                                          #("l-*-5684" "l-*-5685"))
                                        #(ribcage
                                          (remodulate)
                                          ((top))
                                          ("l-*-5657"))
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("l-*-5654" "l-*-5655" "l-*-5656"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            with-transformer-environment
                                            transformer-environment
                                            resolve-identifier
                                            locally-bound-identifiers
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            session-id
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("l-*-2527"
                                           "l-*-2525"
                                           "l-*-2523"
                                           "l-*-2521"
                                           "l-*-2519"
                                           "l-*-2517"
                                           "l-*-2515"
                                           "l-*-2513"
                                           "l-*-2511"
                                           "l-*-2509"
                                           "l-*-2507"
                                           "l-*-2505"
                                           "l-*-2503"
                                           "l-*-2501"
                                           "l-*-2499"
                                           "l-*-2497"
                                           "l-*-2495"
                                           "l-*-2493"
                                           "l-*-2491"
                                           "l-*-2489"
                                           "l-*-2487"
                                           "l-*-2485"
                                           "l-*-2483"
                                           "l-*-2481"
                                           "l-*-2479"
                                           "l-*-2477"
                                           "l-*-2475"
                                           "l-*-2473"
                                           "l-*-2471"
                                           "l-*-2469"
                                           "l-*-2467"
                                           "l-*-2465"
                                           "l-*-2463"
                                           "l-*-2461"
                                           "l-*-2459"
                                           "l-*-2457"
                                           "l-*-2455"
                                           "l-*-2453"
                                           "l-*-2451"
                                           "l-*-2450"
                                           "l-*-2448"
                                           "l-*-2445"
                                           "l-*-2444"
                                           "l-*-2443"
                                           "l-*-2441"
                                           "l-*-2440"
                                           "l-*-2438"
                                           "l-*-2436"
                                           "l-*-2434"
                                           "l-*-2432"
                                           "l-*-2430"
                                           "l-*-2428"
                                           "l-*-2426"
                                           "l-*-2424"
                                           "l-*-2421"
                                           "l-*-2419"
                                           "l-*-2418"
                                           "l-*-2416"
                                           "l-*-2414"
                                           "l-*-2412"
                                           "l-*-2410"
                                           "l-*-2409"
                                           "l-*-2408"
                                           "l-*-2407"
                                           "l-*-2405"
                                           "l-*-2404"
                                           "l-*-2401"
                                           "l-*-2399"
                                           "l-*-2397"
                                           "l-*-2395"
                                           "l-*-2393"
                                           "l-*-2391"
                                           "l-*-2389"
                                           "l-*-2388"
                                           "l-*-2387"
                                           "l-*-2385"
                                           "l-*-2383"
                                           "l-*-2382"
                                           "l-*-2379"
                                           "l-*-2378"
                                           "l-*-2376"
                                           "l-*-2374"
                                           "l-*-2372"
                                           "l-*-2370"
                                           "l-*-2368"
                                           "l-*-2366"
                                           "l-*-2364"
                                           "l-*-2362"
                                           "l-*-2360"
                                           "l-*-2357"
                                           "l-*-2355"
                                           "l-*-2353"
                                           "l-*-2351"
                                           "l-*-2349"
                                           "l-*-2347"
                                           "l-*-2345"
                                           "l-*-2343"
                                           "l-*-2341"
                                           "l-*-2339"
                                           "l-*-2337"
                                           "l-*-2335"
                                           "l-*-2333"
                                           "l-*-2331"
                                           "l-*-2329"
                                           "l-*-2327"
                                           "l-*-2325"
                                           "l-*-2323"
                                           "l-*-2321"
                                           "l-*-2319"
                                           "l-*-2317"
                                           "l-*-2315"
                                           "l-*-2313"
                                           "l-*-2311"
                                           "l-*-2309"
                                           "l-*-2307"
                                           "l-*-2306"
                                           "l-*-2305"
                                           "l-*-2304"
                                           "l-*-2303"
                                           "l-*-2301"
                                           "l-*-2299"
                                           "l-*-2297"
                                           "l-*-2294"
                                           "l-*-2292"
                                           "l-*-2290"
                                           "l-*-2288"
                                           "l-*-2286"
                                           "l-*-2284"
                                           "l-*-2282"
                                           "l-*-2280"
                                           "l-*-2278"
                                           "l-*-2276"
                                           "l-*-2274"
                                           "l-*-2272"
                                           "l-*-2270"
                                           "l-*-2268"
                                           "l-*-2266"
                                           "l-*-2264"
                                           "l-*-2262"
                                           "l-*-2260"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("l-*-2098" "l-*-2097" "l-*-2096")))
                                       (hygiene guile))
                                    mod-11665))))
                      (values
                        (remodulate-11642 exp-11666 mod-11667)
                        r-11640
                        w-11641
                        (source-annotation-6338 exp-11666)
                        mod-11667)))
                  tmp-11644)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  e-11639))))))
      (global-extend-6343
        'core
        'if
        (lambda (e-11851 r-11852 w-11853 s-11854 mod-11855)
          (let ((tmp-11857 ($sc-dispatch e-11851 '(_ any any))))
            (if tmp-11857
              (@apply
                (lambda (test-11861 then-11862)
                  (build-conditional-6313
                    s-11854
                    (expand-6381
                      test-11861
                      r-11852
                      w-11853
                      mod-11855)
                    (expand-6381
                      then-11862
                      r-11852
                      w-11853
                      mod-11855)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 0)
                      #f)))
                tmp-11857)
              (let ((tmp-12087
                      ($sc-dispatch e-11851 '(_ any any any))))
                (if tmp-12087
                  (@apply
                    (lambda (test-12091 then-12092 else-12093)
                      (build-conditional-6313
                        s-11854
                        (expand-6381
                          test-12091
                          r-11852
                          w-11853
                          mod-11855)
                        (expand-6381
                          then-12092
                          r-11852
                          w-11853
                          mod-11855)
                        (expand-6381
                          else-12093
                          r-11852
                          w-11853
                          mod-11855)))
                    tmp-12087)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    e-11851)))))))
      (global-extend-6343
        'core
        'with-fluids
        (lambda (e-12492 r-12493 w-12494 s-12495 mod-12496)
          (let ((tmp-12498
                  ($sc-dispatch
                    e-12492
                    '(_ #(each (any any)) any . each-any))))
            (if tmp-12498
              (@apply
                (lambda (fluid-12502 val-12503 b-12504 b*-12505)
                  (build-dynlet-6314
                    s-12495
                    (map (lambda (x-12586)
                           (expand-6381 x-12586 r-12493 w-12494 mod-12496))
                         fluid-12502)
                    (map (lambda (x-12656)
                           (expand-6381 x-12656 r-12493 w-12494 mod-12496))
                         val-12503)
                    (expand-body-6385
                      (cons b-12504 b*-12505)
                      (wrap-6374
                        (begin
                          (if (if (pair? e-12492) s-12495 #f)
                            (set-source-properties! e-12492 s-12495))
                          e-12492)
                        w-12494
                        mod-12496)
                      r-12493
                      w-12494
                      mod-12496)))
                tmp-12498)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                e-12492)))))
      (module-define!
        (current-module)
        'begin
        (make-syntax-transformer 'begin 'begin '()))
      (module-define!
        (current-module)
        'define
        (make-syntax-transformer 'define 'define '()))
      (module-define!
        (current-module)
        'define-syntax
        (make-syntax-transformer
          'define-syntax
          'define-syntax
          '()))
      (module-define!
        (current-module)
        'define-syntax-parameter
        (make-syntax-transformer
          'define-syntax-parameter
          'define-syntax-parameter
          '()))
      (module-define!
        (current-module)
        'eval-when
        (make-syntax-transformer
          'eval-when
          'eval-when
          '()))
      (global-extend-6343
        'core
        'syntax-case
        (letrec*
          ((convert-pattern-13024
             (lambda (pattern-14621 keys-14622)
               (letrec*
                 ((cvt*-14623
                    (lambda (p*-15247 n-15248 ids-15249)
                      (if (not (pair? p*-15247))
                        (cvt-14625 p*-15247 n-15248 ids-15249)
                        (call-with-values
                          (lambda ()
                            (cvt*-14623 (cdr p*-15247) n-15248 ids-15249))
                          (lambda (y-15252 ids-15253)
                            (call-with-values
                              (lambda ()
                                (cvt-14625 (car p*-15247) n-15248 ids-15253))
                              (lambda (x-15256 ids-15257)
                                (values
                                  (cons x-15256 y-15252)
                                  ids-15257))))))))
                  (v-reverse-14624
                    (lambda (x-15258)
                      (letrec*
                        ((loop-15259
                           (lambda (r-15339 x-15340)
                             (if (not (pair? x-15340))
                               (values r-15339 x-15340)
                               (loop-15259
                                 (cons (car x-15340) r-15339)
                                 (cdr x-15340))))))
                        (loop-15259 '() x-15258))))
                  (cvt-14625
                    (lambda (p-14628 n-14629 ids-14630)
                      (if (if (symbol? p-14628)
                            #t
                            (if (if (vector? p-14628)
                                  (if (= (vector-length p-14628) 4)
                                    (eq? (vector-ref p-14628 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref p-14628 1))
                              #f))
                        (if (bound-id-member?-6373 p-14628 keys-14622)
                          (values (vector 'free-id p-14628) ids-14630)
                          (if (if (eq? (if (if (vector? p-14628)
                                             (if (= (vector-length p-14628) 4)
                                               (eq? (vector-ref p-14628 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref p-14628 1)
                                         p-14628)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       _
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p n ids)
                                                          #((top) (top) (top))
                                                          #("l-*-5785"
                                                            "l-*-5786"
                                                            "l-*-5787"))
                                                        #(ribcage
                                                          (cvt v-reverse cvt*)
                                                          ((top) (top) (top))
                                                          ("l-*-5758"
                                                           "l-*-5756"
                                                           "l-*-5754"))
                                                        #(ribcage
                                                          #(pattern keys)
                                                          #((top) (top))
                                                          #("l-*-5752"
                                                            "l-*-5753"))
                                                        #(ribcage
                                                          (gen-syntax-case
                                                            gen-clause
                                                            build-dispatch-call
                                                            convert-pattern)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-5748"
                                                           "l-*-5746"
                                                           "l-*-5744"
                                                           "l-*-5742"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            session-id
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-2527"
                                                           "l-*-2525"
                                                           "l-*-2523"
                                                           "l-*-2521"
                                                           "l-*-2519"
                                                           "l-*-2517"
                                                           "l-*-2515"
                                                           "l-*-2513"
                                                           "l-*-2511"
                                                           "l-*-2509"
                                                           "l-*-2507"
                                                           "l-*-2505"
                                                           "l-*-2503"
                                                           "l-*-2501"
                                                           "l-*-2499"
                                                           "l-*-2497"
                                                           "l-*-2495"
                                                           "l-*-2493"
                                                           "l-*-2491"
                                                           "l-*-2489"
                                                           "l-*-2487"
                                                           "l-*-2485"
                                                           "l-*-2483"
                                                           "l-*-2481"
                                                           "l-*-2479"
                                                           "l-*-2477"
                                                           "l-*-2475"
                                                           "l-*-2473"
                                                           "l-*-2471"
                                                           "l-*-2469"
                                                           "l-*-2467"
                                                           "l-*-2465"
                                                           "l-*-2463"
                                                           "l-*-2461"
                                                           "l-*-2459"
                                                           "l-*-2457"
                                                           "l-*-2455"
                                                           "l-*-2453"
                                                           "l-*-2451"
                                                           "l-*-2450"
                                                           "l-*-2448"
                                                           "l-*-2445"
                                                           "l-*-2444"
                                                           "l-*-2443"
                                                           "l-*-2441"
                                                           "l-*-2440"
                                                           "l-*-2438"
                                                           "l-*-2436"
                                                           "l-*-2434"
                                                           "l-*-2432"
                                                           "l-*-2430"
                                                           "l-*-2428"
                                                           "l-*-2426"
                                                           "l-*-2424"
                                                           "l-*-2421"
                                                           "l-*-2419"
                                                           "l-*-2418"
                                                           "l-*-2416"
                                                           "l-*-2414"
                                                           "l-*-2412"
                                                           "l-*-2410"
                                                           "l-*-2409"
                                                           "l-*-2408"
                                                           "l-*-2407"
                                                           "l-*-2405"
                                                           "l-*-2404"
                                                           "l-*-2401"
                                                           "l-*-2399"
                                                           "l-*-2397"
                                                           "l-*-2395"
                                                           "l-*-2393"
                                                           "l-*-2391"
                                                           "l-*-2389"
                                                           "l-*-2388"
                                                           "l-*-2387"
                                                           "l-*-2385"
                                                           "l-*-2383"
                                                           "l-*-2382"
                                                           "l-*-2379"
                                                           "l-*-2378"
                                                           "l-*-2376"
                                                           "l-*-2374"
                                                           "l-*-2372"
                                                           "l-*-2370"
                                                           "l-*-2368"
                                                           "l-*-2366"
                                                           "l-*-2364"
                                                           "l-*-2362"
                                                           "l-*-2360"
                                                           "l-*-2357"
                                                           "l-*-2355"
                                                           "l-*-2353"
                                                           "l-*-2351"
                                                           "l-*-2349"
                                                           "l-*-2347"
                                                           "l-*-2345"
                                                           "l-*-2343"
                                                           "l-*-2341"
                                                           "l-*-2339"
                                                           "l-*-2337"
                                                           "l-*-2335"
                                                           "l-*-2333"
                                                           "l-*-2331"
                                                           "l-*-2329"
                                                           "l-*-2327"
                                                           "l-*-2325"
                                                           "l-*-2323"
                                                           "l-*-2321"
                                                           "l-*-2319"
                                                           "l-*-2317"
                                                           "l-*-2315"
                                                           "l-*-2313"
                                                           "l-*-2311"
                                                           "l-*-2309"
                                                           "l-*-2307"
                                                           "l-*-2306"
                                                           "l-*-2305"
                                                           "l-*-2304"
                                                           "l-*-2303"
                                                           "l-*-2301"
                                                           "l-*-2299"
                                                           "l-*-2297"
                                                           "l-*-2294"
                                                           "l-*-2292"
                                                           "l-*-2290"
                                                           "l-*-2288"
                                                           "l-*-2286"
                                                           "l-*-2284"
                                                           "l-*-2282"
                                                           "l-*-2280"
                                                           "l-*-2278"
                                                           "l-*-2276"
                                                           "l-*-2274"
                                                           "l-*-2272"
                                                           "l-*-2270"
                                                           "l-*-2268"
                                                           "l-*-2266"
                                                           "l-*-2264"
                                                           "l-*-2262"
                                                           "l-*-2260"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("l-*-2098"
                                                           "l-*-2097"
                                                           "l-*-2096")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         '_
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p n ids)
                                               #((top) (top) (top))
                                               #("l-*-5785"
                                                 "l-*-5786"
                                                 "l-*-5787"))
                                             #(ribcage
                                               (cvt v-reverse cvt*)
                                               ((top) (top) (top))
                                               ("l-*-5758"
                                                "l-*-5756"
                                                "l-*-5754"))
                                             #(ribcage
                                               #(pattern keys)
                                               #((top) (top))
                                               #("l-*-5752" "l-*-5753"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("l-*-5748"
                                                "l-*-5746"
                                                "l-*-5744"
                                                "l-*-5742"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 session-id
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-2527"
                                                "l-*-2525"
                                                "l-*-2523"
                                                "l-*-2521"
                                                "l-*-2519"
                                                "l-*-2517"
                                                "l-*-2515"
                                                "l-*-2513"
                                                "l-*-2511"
                                                "l-*-2509"
                                                "l-*-2507"
                                                "l-*-2505"
                                                "l-*-2503"
                                                "l-*-2501"
                                                "l-*-2499"
                                                "l-*-2497"
                                                "l-*-2495"
                                                "l-*-2493"
                                                "l-*-2491"
                                                "l-*-2489"
                                                "l-*-2487"
                                                "l-*-2485"
                                                "l-*-2483"
                                                "l-*-2481"
                                                "l-*-2479"
                                                "l-*-2477"
                                                "l-*-2475"
                                                "l-*-2473"
                                                "l-*-2471"
                                                "l-*-2469"
                                                "l-*-2467"
                                                "l-*-2465"
                                                "l-*-2463"
                                                "l-*-2461"
                                                "l-*-2459"
                                                "l-*-2457"
                                                "l-*-2455"
                                                "l-*-2453"
                                                "l-*-2451"
                                                "l-*-2450"
                                                "l-*-2448"
                                                "l-*-2445"
                                                "l-*-2444"
                                                "l-*-2443"
                                                "l-*-2441"
                                                "l-*-2440"
                                                "l-*-2438"
                                                "l-*-2436"
                                                "l-*-2434"
                                                "l-*-2432"
                                                "l-*-2430"
                                                "l-*-2428"
                                                "l-*-2426"
                                                "l-*-2424"
                                                "l-*-2421"
                                                "l-*-2419"
                                                "l-*-2418"
                                                "l-*-2416"
                                                "l-*-2414"
                                                "l-*-2412"
                                                "l-*-2410"
                                                "l-*-2409"
                                                "l-*-2408"
                                                "l-*-2407"
                                                "l-*-2405"
                                                "l-*-2404"
                                                "l-*-2401"
                                                "l-*-2399"
                                                "l-*-2397"
                                                "l-*-2395"
                                                "l-*-2393"
                                                "l-*-2391"
                                                "l-*-2389"
                                                "l-*-2388"
                                                "l-*-2387"
                                                "l-*-2385"
                                                "l-*-2383"
                                                "l-*-2382"
                                                "l-*-2379"
                                                "l-*-2378"
                                                "l-*-2376"
                                                "l-*-2374"
                                                "l-*-2372"
                                                "l-*-2370"
                                                "l-*-2368"
                                                "l-*-2366"
                                                "l-*-2364"
                                                "l-*-2362"
                                                "l-*-2360"
                                                "l-*-2357"
                                                "l-*-2355"
                                                "l-*-2353"
                                                "l-*-2351"
                                                "l-*-2349"
                                                "l-*-2347"
                                                "l-*-2345"
                                                "l-*-2343"
                                                "l-*-2341"
                                                "l-*-2339"
                                                "l-*-2337"
                                                "l-*-2335"
                                                "l-*-2333"
                                                "l-*-2331"
                                                "l-*-2329"
                                                "l-*-2327"
                                                "l-*-2325"
                                                "l-*-2323"
                                                "l-*-2321"
                                                "l-*-2319"
                                                "l-*-2317"
                                                "l-*-2315"
                                                "l-*-2313"
                                                "l-*-2311"
                                                "l-*-2309"
                                                "l-*-2307"
                                                "l-*-2306"
                                                "l-*-2305"
                                                "l-*-2304"
                                                "l-*-2303"
                                                "l-*-2301"
                                                "l-*-2299"
                                                "l-*-2297"
                                                "l-*-2294"
                                                "l-*-2292"
                                                "l-*-2290"
                                                "l-*-2288"
                                                "l-*-2286"
                                                "l-*-2284"
                                                "l-*-2282"
                                                "l-*-2280"
                                                "l-*-2278"
                                                "l-*-2276"
                                                "l-*-2274"
                                                "l-*-2272"
                                                "l-*-2270"
                                                "l-*-2268"
                                                "l-*-2266"
                                                "l-*-2264"
                                                "l-*-2262"
                                                "l-*-2260"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("l-*-2098"
                                                "l-*-2097"
                                                "l-*-2096")))
                                            (hygiene guile))))
                                (eq? (id-var-name-6364 p-14628 '(()))
                                     (id-var-name-6364
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("l-*-5785"
                                               "l-*-5786"
                                               "l-*-5787"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("l-*-5758"
                                              "l-*-5756"
                                              "l-*-5754"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("l-*-5752" "l-*-5753"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("l-*-5748"
                                              "l-*-5746"
                                              "l-*-5744"
                                              "l-*-5742"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               with-transformer-environment
                                               transformer-environment
                                               resolve-identifier
                                               locally-bound-identifiers
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               session-id
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-2527"
                                              "l-*-2525"
                                              "l-*-2523"
                                              "l-*-2521"
                                              "l-*-2519"
                                              "l-*-2517"
                                              "l-*-2515"
                                              "l-*-2513"
                                              "l-*-2511"
                                              "l-*-2509"
                                              "l-*-2507"
                                              "l-*-2505"
                                              "l-*-2503"
                                              "l-*-2501"
                                              "l-*-2499"
                                              "l-*-2497"
                                              "l-*-2495"
                                              "l-*-2493"
                                              "l-*-2491"
                                              "l-*-2489"
                                              "l-*-2487"
                                              "l-*-2485"
                                              "l-*-2483"
                                              "l-*-2481"
                                              "l-*-2479"
                                              "l-*-2477"
                                              "l-*-2475"
                                              "l-*-2473"
                                              "l-*-2471"
                                              "l-*-2469"
                                              "l-*-2467"
                                              "l-*-2465"
                                              "l-*-2463"
                                              "l-*-2461"
                                              "l-*-2459"
                                              "l-*-2457"
                                              "l-*-2455"
                                              "l-*-2453"
                                              "l-*-2451"
                                              "l-*-2450"
                                              "l-*-2448"
                                              "l-*-2445"
                                              "l-*-2444"
                                              "l-*-2443"
                                              "l-*-2441"
                                              "l-*-2440"
                                              "l-*-2438"
                                              "l-*-2436"
                                              "l-*-2434"
                                              "l-*-2432"
                                              "l-*-2430"
                                              "l-*-2428"
                                              "l-*-2426"
                                              "l-*-2424"
                                              "l-*-2421"
                                              "l-*-2419"
                                              "l-*-2418"
                                              "l-*-2416"
                                              "l-*-2414"
                                              "l-*-2412"
                                              "l-*-2410"
                                              "l-*-2409"
                                              "l-*-2408"
                                              "l-*-2407"
                                              "l-*-2405"
                                              "l-*-2404"
                                              "l-*-2401"
                                              "l-*-2399"
                                              "l-*-2397"
                                              "l-*-2395"
                                              "l-*-2393"
                                              "l-*-2391"
                                              "l-*-2389"
                                              "l-*-2388"
                                              "l-*-2387"
                                              "l-*-2385"
                                              "l-*-2383"
                                              "l-*-2382"
                                              "l-*-2379"
                                              "l-*-2378"
                                              "l-*-2376"
                                              "l-*-2374"
                                              "l-*-2372"
                                              "l-*-2370"
                                              "l-*-2368"
                                              "l-*-2366"
                                              "l-*-2364"
                                              "l-*-2362"
                                              "l-*-2360"
                                              "l-*-2357"
                                              "l-*-2355"
                                              "l-*-2353"
                                              "l-*-2351"
                                              "l-*-2349"
                                              "l-*-2347"
                                              "l-*-2345"
                                              "l-*-2343"
                                              "l-*-2341"
                                              "l-*-2339"
                                              "l-*-2337"
                                              "l-*-2335"
                                              "l-*-2333"
                                              "l-*-2331"
                                              "l-*-2329"
                                              "l-*-2327"
                                              "l-*-2325"
                                              "l-*-2323"
                                              "l-*-2321"
                                              "l-*-2319"
                                              "l-*-2317"
                                              "l-*-2315"
                                              "l-*-2313"
                                              "l-*-2311"
                                              "l-*-2309"
                                              "l-*-2307"
                                              "l-*-2306"
                                              "l-*-2305"
                                              "l-*-2304"
                                              "l-*-2303"
                                              "l-*-2301"
                                              "l-*-2299"
                                              "l-*-2297"
                                              "l-*-2294"
                                              "l-*-2292"
                                              "l-*-2290"
                                              "l-*-2288"
                                              "l-*-2286"
                                              "l-*-2284"
                                              "l-*-2282"
                                              "l-*-2280"
                                              "l-*-2278"
                                              "l-*-2276"
                                              "l-*-2274"
                                              "l-*-2272"
                                              "l-*-2270"
                                              "l-*-2268"
                                              "l-*-2266"
                                              "l-*-2264"
                                              "l-*-2262"
                                              "l-*-2260"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("l-*-2098"
                                              "l-*-2097"
                                              "l-*-2096")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            (values '_ ids-14630)
                            (values
                              'any
                              (cons (cons p-14628 n-14629) ids-14630))))
                        (let ((tmp-14950 ($sc-dispatch p-14628 '(any any))))
                          (if (if tmp-14950
                                (@apply
                                  (lambda (x-14954 dots-14955)
                                    (if (if (if (vector? dots-14955)
                                              (if (= (vector-length dots-14955)
                                                     4)
                                                (eq? (vector-ref dots-14955 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (symbol? (vector-ref dots-14955 1))
                                          #f)
                                      (if (eq? (if (if (vector? dots-14955)
                                                     (if (= (vector-length
                                                              dots-14955)
                                                            4)
                                                       (eq? (vector-ref
                                                              dots-14955
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref dots-14955 1)
                                                 dots-14955)
                                               (if (if (= (vector-length
                                                            '#(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("l-*-4317"))
                                                                #(ribcage
                                                                  (lambda-var-list
                                                                    gen-var
                                                                    strip
                                                                    expand-lambda-case
                                                                    lambda*-formals
                                                                    expand-simple-lambda
                                                                    lambda-formals
                                                                    ellipsis?
                                                                    expand-void
                                                                    eval-local-transformer
                                                                    expand-local-syntax
                                                                    expand-body
                                                                    expand-macro
                                                                    expand-application
                                                                    expand-expr
                                                                    expand
                                                                    syntax-type
                                                                    parse-when-list
                                                                    expand-install-global
                                                                    expand-top-sequence
                                                                    expand-sequence
                                                                    source-wrap
                                                                    wrap
                                                                    bound-id-member?
                                                                    distinct-bound-ids?
                                                                    valid-bound-ids?
                                                                    bound-id=?
                                                                    free-id=?
                                                                    with-transformer-environment
                                                                    transformer-environment
                                                                    resolve-identifier
                                                                    locally-bound-identifiers
                                                                    id-var-name
                                                                    same-marks?
                                                                    join-marks
                                                                    join-wraps
                                                                    smart-append
                                                                    make-binding-wrap
                                                                    extend-ribcage!
                                                                    make-empty-ribcage
                                                                    new-mark
                                                                    anti-mark
                                                                    the-anti-mark
                                                                    top-marked?
                                                                    top-wrap
                                                                    empty-wrap
                                                                    set-ribcage-labels!
                                                                    set-ribcage-marks!
                                                                    set-ribcage-symnames!
                                                                    ribcage-labels
                                                                    ribcage-marks
                                                                    ribcage-symnames
                                                                    ribcage?
                                                                    make-ribcage
                                                                    gen-labels
                                                                    gen-label
                                                                    make-rename
                                                                    rename-marks
                                                                    rename-new
                                                                    rename-old
                                                                    subst-rename?
                                                                    wrap-subst
                                                                    wrap-marks
                                                                    make-wrap
                                                                    id-sym-name&marks
                                                                    id-sym-name
                                                                    id?
                                                                    nonsymbol-id?
                                                                    global-extend
                                                                    lookup
                                                                    macros-only-env
                                                                    extend-var-env
                                                                    extend-env
                                                                    null-env
                                                                    binding-value
                                                                    binding-type
                                                                    make-binding
                                                                    arg-check
                                                                    source-annotation
                                                                    no-source
                                                                    set-syntax-object-module!
                                                                    set-syntax-object-wrap!
                                                                    set-syntax-object-expression!
                                                                    syntax-object-module
                                                                    syntax-object-wrap
                                                                    syntax-object-expression
                                                                    syntax-object?
                                                                    make-syntax-object
                                                                    build-lexical-var
                                                                    build-letrec
                                                                    build-named-let
                                                                    build-let
                                                                    build-sequence
                                                                    build-data
                                                                    build-primref
                                                                    build-lambda-case
                                                                    build-case-lambda
                                                                    build-simple-lambda
                                                                    build-global-definition
                                                                    build-global-assignment
                                                                    build-global-reference
                                                                    analyze-variable
                                                                    build-lexical-assignment
                                                                    build-lexical-reference
                                                                    build-dynlet
                                                                    build-conditional
                                                                    build-application
                                                                    build-void
                                                                    maybe-name-value!
                                                                    decorate-source
                                                                    get-global-definition-hook
                                                                    put-global-definition-hook
                                                                    session-id
                                                                    local-eval-hook
                                                                    top-level-eval-hook
                                                                    fx<
                                                                    fx=
                                                                    fx-
                                                                    fx+
                                                                    set-lambda-meta!
                                                                    lambda-meta
                                                                    lambda?
                                                                    make-dynlet
                                                                    make-letrec
                                                                    make-let
                                                                    make-lambda-case
                                                                    make-lambda
                                                                    make-sequence
                                                                    make-application
                                                                    make-conditional
                                                                    make-toplevel-define
                                                                    make-toplevel-set
                                                                    make-toplevel-ref
                                                                    make-module-set
                                                                    make-module-ref
                                                                    make-lexical-set
                                                                    make-lexical-ref
                                                                    make-primitive-ref
                                                                    make-const
                                                                    make-void)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("l-*-2527"
                                                                   "l-*-2525"
                                                                   "l-*-2523"
                                                                   "l-*-2521"
                                                                   "l-*-2519"
                                                                   "l-*-2517"
                                                                   "l-*-2515"
                                                                   "l-*-2513"
                                                                   "l-*-2511"
                                                                   "l-*-2509"
                                                                   "l-*-2507"
                                                                   "l-*-2505"
                                                                   "l-*-2503"
                                                                   "l-*-2501"
                                                                   "l-*-2499"
                                                                   "l-*-2497"
                                                                   "l-*-2495"
                                                                   "l-*-2493"
                                                                   "l-*-2491"
                                                                   "l-*-2489"
                                                                   "l-*-2487"
                                                                   "l-*-2485"
                                                                   "l-*-2483"
                                                                   "l-*-2481"
                                                                   "l-*-2479"
                                                                   "l-*-2477"
                                                                   "l-*-2475"
                                                                   "l-*-2473"
                                                                   "l-*-2471"
                                                                   "l-*-2469"
                                                                   "l-*-2467"
                                                                   "l-*-2465"
                                                                   "l-*-2463"
                                                                   "l-*-2461"
                                                                   "l-*-2459"
                                                                   "l-*-2457"
                                                                   "l-*-2455"
                                                                   "l-*-2453"
                                                                   "l-*-2451"
                                                                   "l-*-2450"
                                                                   "l-*-2448"
                                                                   "l-*-2445"
                                                                   "l-*-2444"
                                                                   "l-*-2443"
                                                                   "l-*-2441"
                                                                   "l-*-2440"
                                                                   "l-*-2438"
                                                                   "l-*-2436"
                                                                   "l-*-2434"
                                                                   "l-*-2432"
                                                                   "l-*-2430"
                                                                   "l-*-2428"
                                                                   "l-*-2426"
                                                                   "l-*-2424"
                                                                   "l-*-2421"
                                                                   "l-*-2419"
                                                                   "l-*-2418"
                                                                   "l-*-2416"
                                                                   "l-*-2414"
                                                                   "l-*-2412"
                                                                   "l-*-2410"
                                                                   "l-*-2409"
                                                                   "l-*-2408"
                                                                   "l-*-2407"
                                                                   "l-*-2405"
                                                                   "l-*-2404"
                                                                   "l-*-2401"
                                                                   "l-*-2399"
                                                                   "l-*-2397"
                                                                   "l-*-2395"
                                                                   "l-*-2393"
                                                                   "l-*-2391"
                                                                   "l-*-2389"
                                                                   "l-*-2388"
                                                                   "l-*-2387"
                                                                   "l-*-2385"
                                                                   "l-*-2383"
                                                                   "l-*-2382"
                                                                   "l-*-2379"
                                                                   "l-*-2378"
                                                                   "l-*-2376"
                                                                   "l-*-2374"
                                                                   "l-*-2372"
                                                                   "l-*-2370"
                                                                   "l-*-2368"
                                                                   "l-*-2366"
                                                                   "l-*-2364"
                                                                   "l-*-2362"
                                                                   "l-*-2360"
                                                                   "l-*-2357"
                                                                   "l-*-2355"
                                                                   "l-*-2353"
                                                                   "l-*-2351"
                                                                   "l-*-2349"
                                                                   "l-*-2347"
                                                                   "l-*-2345"
                                                                   "l-*-2343"
                                                                   "l-*-2341"
                                                                   "l-*-2339"
                                                                   "l-*-2337"
                                                                   "l-*-2335"
                                                                   "l-*-2333"
                                                                   "l-*-2331"
                                                                   "l-*-2329"
                                                                   "l-*-2327"
                                                                   "l-*-2325"
                                                                   "l-*-2323"
                                                                   "l-*-2321"
                                                                   "l-*-2319"
                                                                   "l-*-2317"
                                                                   "l-*-2315"
                                                                   "l-*-2313"
                                                                   "l-*-2311"
                                                                   "l-*-2309"
                                                                   "l-*-2307"
                                                                   "l-*-2306"
                                                                   "l-*-2305"
                                                                   "l-*-2304"
                                                                   "l-*-2303"
                                                                   "l-*-2301"
                                                                   "l-*-2299"
                                                                   "l-*-2297"
                                                                   "l-*-2294"
                                                                   "l-*-2292"
                                                                   "l-*-2290"
                                                                   "l-*-2288"
                                                                   "l-*-2286"
                                                                   "l-*-2284"
                                                                   "l-*-2282"
                                                                   "l-*-2280"
                                                                   "l-*-2278"
                                                                   "l-*-2276"
                                                                   "l-*-2274"
                                                                   "l-*-2272"
                                                                   "l-*-2270"
                                                                   "l-*-2268"
                                                                   "l-*-2266"
                                                                   "l-*-2264"
                                                                   "l-*-2262"
                                                                   "l-*-2260"))
                                                                #(ribcage
                                                                  (define-structure
                                                                    define-expansion-accessors
                                                                    define-expansion-constructors)
                                                                  ((top)
                                                                   (top)
                                                                   (top))
                                                                  ("l-*-2098"
                                                                   "l-*-2097"
                                                                   "l-*-2096")))
                                                               (hygiene
                                                                 guile)))
                                                          4)
                                                     #t
                                                     #f)
                                                 '...
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-4317"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         with-transformer-environment
                                                         transformer-environment
                                                         resolve-identifier
                                                         locally-bound-identifiers
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         session-id
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("l-*-2527"
                                                        "l-*-2525"
                                                        "l-*-2523"
                                                        "l-*-2521"
                                                        "l-*-2519"
                                                        "l-*-2517"
                                                        "l-*-2515"
                                                        "l-*-2513"
                                                        "l-*-2511"
                                                        "l-*-2509"
                                                        "l-*-2507"
                                                        "l-*-2505"
                                                        "l-*-2503"
                                                        "l-*-2501"
                                                        "l-*-2499"
                                                        "l-*-2497"
                                                        "l-*-2495"
                                                        "l-*-2493"
                                                        "l-*-2491"
                                                        "l-*-2489"
                                                        "l-*-2487"
                                                        "l-*-2485"
                                                        "l-*-2483"
                                                        "l-*-2481"
                                                        "l-*-2479"
                                                        "l-*-2477"
                                                        "l-*-2475"
                                                        "l-*-2473"
                                                        "l-*-2471"
                                                        "l-*-2469"
                                                        "l-*-2467"
                                                        "l-*-2465"
                                                        "l-*-2463"
                                                        "l-*-2461"
                                                        "l-*-2459"
                                                        "l-*-2457"
                                                        "l-*-2455"
                                                        "l-*-2453"
                                                        "l-*-2451"
                                                        "l-*-2450"
                                                        "l-*-2448"
                                                        "l-*-2445"
                                                        "l-*-2444"
                                                        "l-*-2443"
                                                        "l-*-2441"
                                                        "l-*-2440"
                                                        "l-*-2438"
                                                        "l-*-2436"
                                                        "l-*-2434"
                                                        "l-*-2432"
                                                        "l-*-2430"
                                                        "l-*-2428"
                                                        "l-*-2426"
                                                        "l-*-2424"
                                                        "l-*-2421"
                                                        "l-*-2419"
                                                        "l-*-2418"
                                                        "l-*-2416"
                                                        "l-*-2414"
                                                        "l-*-2412"
                                                        "l-*-2410"
                                                        "l-*-2409"
                                                        "l-*-2408"
                                                        "l-*-2407"
                                                        "l-*-2405"
                                                        "l-*-2404"
                                                        "l-*-2401"
                                                        "l-*-2399"
                                                        "l-*-2397"
                                                        "l-*-2395"
                                                        "l-*-2393"
                                                        "l-*-2391"
                                                        "l-*-2389"
                                                        "l-*-2388"
                                                        "l-*-2387"
                                                        "l-*-2385"
                                                        "l-*-2383"
                                                        "l-*-2382"
                                                        "l-*-2379"
                                                        "l-*-2378"
                                                        "l-*-2376"
                                                        "l-*-2374"
                                                        "l-*-2372"
                                                        "l-*-2370"
                                                        "l-*-2368"
                                                        "l-*-2366"
                                                        "l-*-2364"
                                                        "l-*-2362"
                                                        "l-*-2360"
                                                        "l-*-2357"
                                                        "l-*-2355"
                                                        "l-*-2353"
                                                        "l-*-2351"
                                                        "l-*-2349"
                                                        "l-*-2347"
                                                        "l-*-2345"
                                                        "l-*-2343"
                                                        "l-*-2341"
                                                        "l-*-2339"
                                                        "l-*-2337"
                                                        "l-*-2335"
                                                        "l-*-2333"
                                                        "l-*-2331"
                                                        "l-*-2329"
                                                        "l-*-2327"
                                                        "l-*-2325"
                                                        "l-*-2323"
                                                        "l-*-2321"
                                                        "l-*-2319"
                                                        "l-*-2317"
                                                        "l-*-2315"
                                                        "l-*-2313"
                                                        "l-*-2311"
                                                        "l-*-2309"
                                                        "l-*-2307"
                                                        "l-*-2306"
                                                        "l-*-2305"
                                                        "l-*-2304"
                                                        "l-*-2303"
                                                        "l-*-2301"
                                                        "l-*-2299"
                                                        "l-*-2297"
                                                        "l-*-2294"
                                                        "l-*-2292"
                                                        "l-*-2290"
                                                        "l-*-2288"
                                                        "l-*-2286"
                                                        "l-*-2284"
                                                        "l-*-2282"
                                                        "l-*-2280"
                                                        "l-*-2278"
                                                        "l-*-2276"
                                                        "l-*-2274"
                                                        "l-*-2272"
                                                        "l-*-2270"
                                                        "l-*-2268"
                                                        "l-*-2266"
                                                        "l-*-2264"
                                                        "l-*-2262"
                                                        "l-*-2260"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("l-*-2098"
                                                        "l-*-2097"
                                                        "l-*-2096")))
                                                    (hygiene guile))))
                                        (eq? (id-var-name-6364
                                               dots-14955
                                               '(()))
                                             (id-var-name-6364
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-4317"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       with-transformer-environment
                                                       transformer-environment
                                                       resolve-identifier
                                                       locally-bound-identifiers
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       session-id
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-2527"
                                                      "l-*-2525"
                                                      "l-*-2523"
                                                      "l-*-2521"
                                                      "l-*-2519"
                                                      "l-*-2517"
                                                      "l-*-2515"
                                                      "l-*-2513"
                                                      "l-*-2511"
                                                      "l-*-2509"
                                                      "l-*-2507"
                                                      "l-*-2505"
                                                      "l-*-2503"
                                                      "l-*-2501"
                                                      "l-*-2499"
                                                      "l-*-2497"
                                                      "l-*-2495"
                                                      "l-*-2493"
                                                      "l-*-2491"
                                                      "l-*-2489"
                                                      "l-*-2487"
                                                      "l-*-2485"
                                                      "l-*-2483"
                                                      "l-*-2481"
                                                      "l-*-2479"
                                                      "l-*-2477"
                                                      "l-*-2475"
                                                      "l-*-2473"
                                                      "l-*-2471"
                                                      "l-*-2469"
                                                      "l-*-2467"
                                                      "l-*-2465"
                                                      "l-*-2463"
                                                      "l-*-2461"
                                                      "l-*-2459"
                                                      "l-*-2457"
                                                      "l-*-2455"
                                                      "l-*-2453"
                                                      "l-*-2451"
                                                      "l-*-2450"
                                                      "l-*-2448"
                                                      "l-*-2445"
                                                      "l-*-2444"
                                                      "l-*-2443"
                                                      "l-*-2441"
                                                      "l-*-2440"
                                                      "l-*-2438"
                                                      "l-*-2436"
                                                      "l-*-2434"
                                                      "l-*-2432"
                                                      "l-*-2430"
                                                      "l-*-2428"
                                                      "l-*-2426"
                                                      "l-*-2424"
                                                      "l-*-2421"
                                                      "l-*-2419"
                                                      "l-*-2418"
                                                      "l-*-2416"
                                                      "l-*-2414"
                                                      "l-*-2412"
                                                      "l-*-2410"
                                                      "l-*-2409"
                                                      "l-*-2408"
                                                      "l-*-2407"
                                                      "l-*-2405"
                                                      "l-*-2404"
                                                      "l-*-2401"
                                                      "l-*-2399"
                                                      "l-*-2397"
                                                      "l-*-2395"
                                                      "l-*-2393"
                                                      "l-*-2391"
                                                      "l-*-2389"
                                                      "l-*-2388"
                                                      "l-*-2387"
                                                      "l-*-2385"
                                                      "l-*-2383"
                                                      "l-*-2382"
                                                      "l-*-2379"
                                                      "l-*-2378"
                                                      "l-*-2376"
                                                      "l-*-2374"
                                                      "l-*-2372"
                                                      "l-*-2370"
                                                      "l-*-2368"
                                                      "l-*-2366"
                                                      "l-*-2364"
                                                      "l-*-2362"
                                                      "l-*-2360"
                                                      "l-*-2357"
                                                      "l-*-2355"
                                                      "l-*-2353"
                                                      "l-*-2351"
                                                      "l-*-2349"
                                                      "l-*-2347"
                                                      "l-*-2345"
                                                      "l-*-2343"
                                                      "l-*-2341"
                                                      "l-*-2339"
                                                      "l-*-2337"
                                                      "l-*-2335"
                                                      "l-*-2333"
                                                      "l-*-2331"
                                                      "l-*-2329"
                                                      "l-*-2327"
                                                      "l-*-2325"
                                                      "l-*-2323"
                                                      "l-*-2321"
                                                      "l-*-2319"
                                                      "l-*-2317"
                                                      "l-*-2315"
                                                      "l-*-2313"
                                                      "l-*-2311"
                                                      "l-*-2309"
                                                      "l-*-2307"
                                                      "l-*-2306"
                                                      "l-*-2305"
                                                      "l-*-2304"
                                                      "l-*-2303"
                                                      "l-*-2301"
                                                      "l-*-2299"
                                                      "l-*-2297"
                                                      "l-*-2294"
                                                      "l-*-2292"
                                                      "l-*-2290"
                                                      "l-*-2288"
                                                      "l-*-2286"
                                                      "l-*-2284"
                                                      "l-*-2282"
                                                      "l-*-2280"
                                                      "l-*-2278"
                                                      "l-*-2276"
                                                      "l-*-2274"
                                                      "l-*-2272"
                                                      "l-*-2270"
                                                      "l-*-2268"
                                                      "l-*-2266"
                                                      "l-*-2264"
                                                      "l-*-2262"
                                                      "l-*-2260"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("l-*-2098"
                                                      "l-*-2097"
                                                      "l-*-2096")))
                                                  (hygiene guile))
                                               '(())))
                                        #f)
                                      #f))
                                  tmp-14950)
                                #f)
                            (@apply
                              (lambda (x-15055 dots-15056)
                                (call-with-values
                                  (lambda ()
                                    (cvt-14625
                                      x-15055
                                      (#{1+}# n-14629)
                                      ids-14630))
                                  (lambda (p-15057 ids-15058)
                                    (values
                                      (if (eq? p-15057 'any)
                                        'each-any
                                        (vector 'each p-15057))
                                      ids-15058))))
                              tmp-14950)
                            (let ((tmp-15059
                                    ($sc-dispatch p-14628 '(any any . any))))
                              (if (if tmp-15059
                                    (@apply
                                      (lambda (x-15063 dots-15064 ys-15065)
                                        (if (if (if (vector? dots-15064)
                                                  (if (= (vector-length
                                                           dots-15064)
                                                         4)
                                                    (eq? (vector-ref
                                                           dots-15064
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref dots-15064 1))
                                              #f)
                                          (if (eq? (if (if (vector? dots-15064)
                                                         (if (= (vector-length
                                                                  dots-15064)
                                                                4)
                                                           (eq? (vector-ref
                                                                  dots-15064
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref dots-15064 1)
                                                     dots-15064)
                                                   (if (if (= (vector-length
                                                                '#(syntax-object
                                                                   ...
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(x)
                                                                      #((top))
                                                                      #("l-*-4317"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        expand-lambda-case
                                                                        lambda*-formals
                                                                        expand-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        expand-void
                                                                        eval-local-transformer
                                                                        expand-local-syntax
                                                                        expand-body
                                                                        expand-macro
                                                                        expand-application
                                                                        expand-expr
                                                                        expand
                                                                        syntax-type
                                                                        parse-when-list
                                                                        expand-install-global
                                                                        expand-top-sequence
                                                                        expand-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        with-transformer-environment
                                                                        transformer-environment
                                                                        resolve-identifier
                                                                        locally-bound-identifiers
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        session-id
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("l-*-2527"
                                                                       "l-*-2525"
                                                                       "l-*-2523"
                                                                       "l-*-2521"
                                                                       "l-*-2519"
                                                                       "l-*-2517"
                                                                       "l-*-2515"
                                                                       "l-*-2513"
                                                                       "l-*-2511"
                                                                       "l-*-2509"
                                                                       "l-*-2507"
                                                                       "l-*-2505"
                                                                       "l-*-2503"
                                                                       "l-*-2501"
                                                                       "l-*-2499"
                                                                       "l-*-2497"
                                                                       "l-*-2495"
                                                                       "l-*-2493"
                                                                       "l-*-2491"
                                                                       "l-*-2489"
                                                                       "l-*-2487"
                                                                       "l-*-2485"
                                                                       "l-*-2483"
                                                                       "l-*-2481"
                                                                       "l-*-2479"
                                                                       "l-*-2477"
                                                                       "l-*-2475"
                                                                       "l-*-2473"
                                                                       "l-*-2471"
                                                                       "l-*-2469"
                                                                       "l-*-2467"
                                                                       "l-*-2465"
                                                                       "l-*-2463"
                                                                       "l-*-2461"
                                                                       "l-*-2459"
                                                                       "l-*-2457"
                                                                       "l-*-2455"
                                                                       "l-*-2453"
                                                                       "l-*-2451"
                                                                       "l-*-2450"
                                                                       "l-*-2448"
                                                                       "l-*-2445"
                                                                       "l-*-2444"
                                                                       "l-*-2443"
                                                                       "l-*-2441"
                                                                       "l-*-2440"
                                                                       "l-*-2438"
                                                                       "l-*-2436"
                                                                       "l-*-2434"
                                                                       "l-*-2432"
                                                                       "l-*-2430"
                                                                       "l-*-2428"
                                                                       "l-*-2426"
                                                                       "l-*-2424"
                                                                       "l-*-2421"
                                                                       "l-*-2419"
                                                                       "l-*-2418"
                                                                       "l-*-2416"
                                                                       "l-*-2414"
                                                                       "l-*-2412"
                                                                       "l-*-2410"
                                                                       "l-*-2409"
                                                                       "l-*-2408"
                                                                       "l-*-2407"
                                                                       "l-*-2405"
                                                                       "l-*-2404"
                                                                       "l-*-2401"
                                                                       "l-*-2399"
                                                                       "l-*-2397"
                                                                       "l-*-2395"
                                                                       "l-*-2393"
                                                                       "l-*-2391"
                                                                       "l-*-2389"
                                                                       "l-*-2388"
                                                                       "l-*-2387"
                                                                       "l-*-2385"
                                                                       "l-*-2383"
                                                                       "l-*-2382"
                                                                       "l-*-2379"
                                                                       "l-*-2378"
                                                                       "l-*-2376"
                                                                       "l-*-2374"
                                                                       "l-*-2372"
                                                                       "l-*-2370"
                                                                       "l-*-2368"
                                                                       "l-*-2366"
                                                                       "l-*-2364"
                                                                       "l-*-2362"
                                                                       "l-*-2360"
                                                                       "l-*-2357"
                                                                       "l-*-2355"
                                                                       "l-*-2353"
                                                                       "l-*-2351"
                                                                       "l-*-2349"
                                                                       "l-*-2347"
                                                                       "l-*-2345"
                                                                       "l-*-2343"
                                                                       "l-*-2341"
                                                                       "l-*-2339"
                                                                       "l-*-2337"
                                                                       "l-*-2335"
                                                                       "l-*-2333"
                                                                       "l-*-2331"
                                                                       "l-*-2329"
                                                                       "l-*-2327"
                                                                       "l-*-2325"
                                                                       "l-*-2323"
                                                                       "l-*-2321"
                                                                       "l-*-2319"
                                                                       "l-*-2317"
                                                                       "l-*-2315"
                                                                       "l-*-2313"
                                                                       "l-*-2311"
                                                                       "l-*-2309"
                                                                       "l-*-2307"
                                                                       "l-*-2306"
                                                                       "l-*-2305"
                                                                       "l-*-2304"
                                                                       "l-*-2303"
                                                                       "l-*-2301"
                                                                       "l-*-2299"
                                                                       "l-*-2297"
                                                                       "l-*-2294"
                                                                       "l-*-2292"
                                                                       "l-*-2290"
                                                                       "l-*-2288"
                                                                       "l-*-2286"
                                                                       "l-*-2284"
                                                                       "l-*-2282"
                                                                       "l-*-2280"
                                                                       "l-*-2278"
                                                                       "l-*-2276"
                                                                       "l-*-2274"
                                                                       "l-*-2272"
                                                                       "l-*-2270"
                                                                       "l-*-2268"
                                                                       "l-*-2266"
                                                                       "l-*-2264"
                                                                       "l-*-2262"
                                                                       "l-*-2260"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors)
                                                                      ((top)
                                                                       (top)
                                                                       (top))
                                                                      ("l-*-2098"
                                                                       "l-*-2097"
                                                                       "l-*-2096")))
                                                                   (hygiene
                                                                     guile)))
                                                              4)
                                                         #t
                                                         #f)
                                                     '...
                                                     '#(syntax-object
                                                        ...
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-4317"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             with-transformer-environment
                                                             transformer-environment
                                                             resolve-identifier
                                                             locally-bound-identifiers
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             session-id
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("l-*-2527"
                                                            "l-*-2525"
                                                            "l-*-2523"
                                                            "l-*-2521"
                                                            "l-*-2519"
                                                            "l-*-2517"
                                                            "l-*-2515"
                                                            "l-*-2513"
                                                            "l-*-2511"
                                                            "l-*-2509"
                                                            "l-*-2507"
                                                            "l-*-2505"
                                                            "l-*-2503"
                                                            "l-*-2501"
                                                            "l-*-2499"
                                                            "l-*-2497"
                                                            "l-*-2495"
                                                            "l-*-2493"
                                                            "l-*-2491"
                                                            "l-*-2489"
                                                            "l-*-2487"
                                                            "l-*-2485"
                                                            "l-*-2483"
                                                            "l-*-2481"
                                                            "l-*-2479"
                                                            "l-*-2477"
                                                            "l-*-2475"
                                                            "l-*-2473"
                                                            "l-*-2471"
                                                            "l-*-2469"
                                                            "l-*-2467"
                                                            "l-*-2465"
                                                            "l-*-2463"
                                                            "l-*-2461"
                                                            "l-*-2459"
                                                            "l-*-2457"
                                                            "l-*-2455"
                                                            "l-*-2453"
                                                            "l-*-2451"
                                                            "l-*-2450"
                                                            "l-*-2448"
                                                            "l-*-2445"
                                                            "l-*-2444"
                                                            "l-*-2443"
                                                            "l-*-2441"
                                                            "l-*-2440"
                                                            "l-*-2438"
                                                            "l-*-2436"
                                                            "l-*-2434"
                                                            "l-*-2432"
                                                            "l-*-2430"
                                                            "l-*-2428"
                                                            "l-*-2426"
                                                            "l-*-2424"
                                                            "l-*-2421"
                                                            "l-*-2419"
                                                            "l-*-2418"
                                                            "l-*-2416"
                                                            "l-*-2414"
                                                            "l-*-2412"
                                                            "l-*-2410"
                                                            "l-*-2409"
                                                            "l-*-2408"
                                                            "l-*-2407"
                                                            "l-*-2405"
                                                            "l-*-2404"
                                                            "l-*-2401"
                                                            "l-*-2399"
                                                            "l-*-2397"
                                                            "l-*-2395"
                                                            "l-*-2393"
                                                            "l-*-2391"
                                                            "l-*-2389"
                                                            "l-*-2388"
                                                            "l-*-2387"
                                                            "l-*-2385"
                                                            "l-*-2383"
                                                            "l-*-2382"
                                                            "l-*-2379"
                                                            "l-*-2378"
                                                            "l-*-2376"
                                                            "l-*-2374"
                                                            "l-*-2372"
                                                            "l-*-2370"
                                                            "l-*-2368"
                                                            "l-*-2366"
                                                            "l-*-2364"
                                                            "l-*-2362"
                                                            "l-*-2360"
                                                            "l-*-2357"
                                                            "l-*-2355"
                                                            "l-*-2353"
                                                            "l-*-2351"
                                                            "l-*-2349"
                                                            "l-*-2347"
                                                            "l-*-2345"
                                                            "l-*-2343"
                                                            "l-*-2341"
                                                            "l-*-2339"
                                                            "l-*-2337"
                                                            "l-*-2335"
                                                            "l-*-2333"
                                                            "l-*-2331"
                                                            "l-*-2329"
                                                            "l-*-2327"
                                                            "l-*-2325"
                                                            "l-*-2323"
                                                            "l-*-2321"
                                                            "l-*-2319"
                                                            "l-*-2317"
                                                            "l-*-2315"
                                                            "l-*-2313"
                                                            "l-*-2311"
                                                            "l-*-2309"
                                                            "l-*-2307"
                                                            "l-*-2306"
                                                            "l-*-2305"
                                                            "l-*-2304"
                                                            "l-*-2303"
                                                            "l-*-2301"
                                                            "l-*-2299"
                                                            "l-*-2297"
                                                            "l-*-2294"
                                                            "l-*-2292"
                                                            "l-*-2290"
                                                            "l-*-2288"
                                                            "l-*-2286"
                                                            "l-*-2284"
                                                            "l-*-2282"
                                                            "l-*-2280"
                                                            "l-*-2278"
                                                            "l-*-2276"
                                                            "l-*-2274"
                                                            "l-*-2272"
                                                            "l-*-2270"
                                                            "l-*-2268"
                                                            "l-*-2266"
                                                            "l-*-2264"
                                                            "l-*-2262"
                                                            "l-*-2260"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("l-*-2098"
                                                            "l-*-2097"
                                                            "l-*-2096")))
                                                        (hygiene guile))))
                                            (eq? (id-var-name-6364
                                                   dots-15064
                                                   '(()))
                                                 (id-var-name-6364
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-4317"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           session-id
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-2527"
                                                          "l-*-2525"
                                                          "l-*-2523"
                                                          "l-*-2521"
                                                          "l-*-2519"
                                                          "l-*-2517"
                                                          "l-*-2515"
                                                          "l-*-2513"
                                                          "l-*-2511"
                                                          "l-*-2509"
                                                          "l-*-2507"
                                                          "l-*-2505"
                                                          "l-*-2503"
                                                          "l-*-2501"
                                                          "l-*-2499"
                                                          "l-*-2497"
                                                          "l-*-2495"
                                                          "l-*-2493"
                                                          "l-*-2491"
                                                          "l-*-2489"
                                                          "l-*-2487"
                                                          "l-*-2485"
                                                          "l-*-2483"
                                                          "l-*-2481"
                                                          "l-*-2479"
                                                          "l-*-2477"
                                                          "l-*-2475"
                                                          "l-*-2473"
                                                          "l-*-2471"
                                                          "l-*-2469"
                                                          "l-*-2467"
                                                          "l-*-2465"
                                                          "l-*-2463"
                                                          "l-*-2461"
                                                          "l-*-2459"
                                                          "l-*-2457"
                                                          "l-*-2455"
                                                          "l-*-2453"
                                                          "l-*-2451"
                                                          "l-*-2450"
                                                          "l-*-2448"
                                                          "l-*-2445"
                                                          "l-*-2444"
                                                          "l-*-2443"
                                                          "l-*-2441"
                                                          "l-*-2440"
                                                          "l-*-2438"
                                                          "l-*-2436"
                                                          "l-*-2434"
                                                          "l-*-2432"
                                                          "l-*-2430"
                                                          "l-*-2428"
                                                          "l-*-2426"
                                                          "l-*-2424"
                                                          "l-*-2421"
                                                          "l-*-2419"
                                                          "l-*-2418"
                                                          "l-*-2416"
                                                          "l-*-2414"
                                                          "l-*-2412"
                                                          "l-*-2410"
                                                          "l-*-2409"
                                                          "l-*-2408"
                                                          "l-*-2407"
                                                          "l-*-2405"
                                                          "l-*-2404"
                                                          "l-*-2401"
                                                          "l-*-2399"
                                                          "l-*-2397"
                                                          "l-*-2395"
                                                          "l-*-2393"
                                                          "l-*-2391"
                                                          "l-*-2389"
                                                          "l-*-2388"
                                                          "l-*-2387"
                                                          "l-*-2385"
                                                          "l-*-2383"
                                                          "l-*-2382"
                                                          "l-*-2379"
                                                          "l-*-2378"
                                                          "l-*-2376"
                                                          "l-*-2374"
                                                          "l-*-2372"
                                                          "l-*-2370"
                                                          "l-*-2368"
                                                          "l-*-2366"
                                                          "l-*-2364"
                                                          "l-*-2362"
                                                          "l-*-2360"
                                                          "l-*-2357"
                                                          "l-*-2355"
                                                          "l-*-2353"
                                                          "l-*-2351"
                                                          "l-*-2349"
                                                          "l-*-2347"
                                                          "l-*-2345"
                                                          "l-*-2343"
                                                          "l-*-2341"
                                                          "l-*-2339"
                                                          "l-*-2337"
                                                          "l-*-2335"
                                                          "l-*-2333"
                                                          "l-*-2331"
                                                          "l-*-2329"
                                                          "l-*-2327"
                                                          "l-*-2325"
                                                          "l-*-2323"
                                                          "l-*-2321"
                                                          "l-*-2319"
                                                          "l-*-2317"
                                                          "l-*-2315"
                                                          "l-*-2313"
                                                          "l-*-2311"
                                                          "l-*-2309"
                                                          "l-*-2307"
                                                          "l-*-2306"
                                                          "l-*-2305"
                                                          "l-*-2304"
                                                          "l-*-2303"
                                                          "l-*-2301"
                                                          "l-*-2299"
                                                          "l-*-2297"
                                                          "l-*-2294"
                                                          "l-*-2292"
                                                          "l-*-2290"
                                                          "l-*-2288"
                                                          "l-*-2286"
                                                          "l-*-2284"
                                                          "l-*-2282"
                                                          "l-*-2280"
                                                          "l-*-2278"
                                                          "l-*-2276"
                                                          "l-*-2274"
                                                          "l-*-2272"
                                                          "l-*-2270"
                                                          "l-*-2268"
                                                          "l-*-2266"
                                                          "l-*-2264"
                                                          "l-*-2262"
                                                          "l-*-2260"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("l-*-2098"
                                                          "l-*-2097"
                                                          "l-*-2096")))
                                                      (hygiene guile))
                                                   '(())))
                                            #f)
                                          #f))
                                      tmp-15059)
                                    #f)
                                (@apply
                                  (lambda (x-15165 dots-15166 ys-15167)
                                    (call-with-values
                                      (lambda ()
                                        (cvt*-14623
                                          ys-15167
                                          n-14629
                                          ids-14630))
                                      (lambda (ys-15170 ids-15171)
                                        (call-with-values
                                          (lambda ()
                                            (cvt-14625
                                              x-15165
                                              (#{1+}# n-14629)
                                              ids-15171))
                                          (lambda (x-15172 ids-15173)
                                            (call-with-values
                                              (lambda ()
                                                (v-reverse-14624 ys-15170))
                                              (lambda (ys-15206 e-15207)
                                                (values
                                                  (vector
                                                    'each+
                                                    x-15172
                                                    ys-15206
                                                    e-15207)
                                                  ids-15173))))))))
                                  tmp-15059)
                                (let ((tmp-15208
                                        ($sc-dispatch p-14628 '(any . any))))
                                  (if tmp-15208
                                    (@apply
                                      (lambda (x-15212 y-15213)
                                        (call-with-values
                                          (lambda ()
                                            (cvt-14625
                                              y-15213
                                              n-14629
                                              ids-14630))
                                          (lambda (y-15214 ids-15215)
                                            (call-with-values
                                              (lambda ()
                                                (cvt-14625
                                                  x-15212
                                                  n-14629
                                                  ids-15215))
                                              (lambda (x-15216 ids-15217)
                                                (values
                                                  (cons x-15216 y-15214)
                                                  ids-15217))))))
                                      tmp-15208)
                                    (let ((tmp-15218
                                            ($sc-dispatch p-14628 '())))
                                      (if tmp-15218
                                        (@apply
                                          (lambda () (values '() ids-14630))
                                          tmp-15218)
                                        (let ((tmp-15222
                                                ($sc-dispatch
                                                  p-14628
                                                  '#(vector each-any))))
                                          (if tmp-15222
                                            (@apply
                                              (lambda (x-15226)
                                                (call-with-values
                                                  (lambda ()
                                                    (cvt-14625
                                                      x-15226
                                                      n-14629
                                                      ids-14630))
                                                  (lambda (p-15227 ids-15228)
                                                    (values
                                                      (vector 'vector p-15227)
                                                      ids-15228))))
                                              tmp-15222)
                                            (values
                                              (vector
                                                'atom
                                                (strip-6394 p-14628 '(())))
                                              ids-14630)))))))))))))))
                 (cvt-14625 pattern-14621 0 '()))))
           (build-dispatch-call-13025
             (lambda (pvars-15341 exp-15342 y-15343 r-15344 mod-15345)
               (let ((ids-15346 (map car pvars-15341)))
                 (begin
                   (map cdr pvars-15341)
                   (let ((labels-15348 (gen-labels-6348 ids-15346))
                         (new-vars-15349 (map gen-var-6395 ids-15346)))
                     (build-application-6312
                       #f
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'apply)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'apply
                           #f))
                       (list (build-simple-lambda-6321
                               #f
                               (map syntax->datum ids-15346)
                               #f
                               new-vars-15349
                               '()
                               (expand-6381
                                 exp-15342
                                 (extend-env-6339
                                   labels-15348
                                   (map (lambda (var-15672 level-15673)
                                          (cons 'syntax
                                                (cons var-15672 level-15673)))
                                        new-vars-15349
                                        (map cdr pvars-15341))
                                   r-15344)
                                 (make-binding-wrap-6359
                                   ids-15346
                                   labels-15348
                                   '(()))
                                 mod-15345))
                             y-15343)))))))
           (gen-clause-13026
             (lambda (x-13993
                      keys-13994
                      clauses-13995
                      r-13996
                      pat-13997
                      fender-13998
                      exp-13999
                      mod-14000)
               (call-with-values
                 (lambda ()
                   (convert-pattern-13024 pat-13997 keys-13994))
                 (lambda (p-14155 pvars-14156)
                   (if (not (distinct-bound-ids?-6372 (map car pvars-14156)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       pat-13997)
                     (if (not (and-map
                                (lambda (x-14272)
                                  (not (let ((x-14276 (car x-14272)))
                                         (if (if (if (vector? x-14276)
                                                   (if (= (vector-length
                                                            x-14276)
                                                          4)
                                                     (eq? (vector-ref
                                                            x-14276
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (symbol? (vector-ref x-14276 1))
                                               #f)
                                           (if (eq? (if (if (vector? x-14276)
                                                          (if (= (vector-length
                                                                   x-14276)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   x-14276
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (vector-ref x-14276 1)
                                                      x-14276)
                                                    (if (if (= (vector-length
                                                                 '#(syntax-object
                                                                    ...
                                                                    ((top)
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("l-*-4317"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         session-id
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-2527"
                                                                        "l-*-2525"
                                                                        "l-*-2523"
                                                                        "l-*-2521"
                                                                        "l-*-2519"
                                                                        "l-*-2517"
                                                                        "l-*-2515"
                                                                        "l-*-2513"
                                                                        "l-*-2511"
                                                                        "l-*-2509"
                                                                        "l-*-2507"
                                                                        "l-*-2505"
                                                                        "l-*-2503"
                                                                        "l-*-2501"
                                                                        "l-*-2499"
                                                                        "l-*-2497"
                                                                        "l-*-2495"
                                                                        "l-*-2493"
                                                                        "l-*-2491"
                                                                        "l-*-2489"
                                                                        "l-*-2487"
                                                                        "l-*-2485"
                                                                        "l-*-2483"
                                                                        "l-*-2481"
                                                                        "l-*-2479"
                                                                        "l-*-2477"
                                                                        "l-*-2475"
                                                                        "l-*-2473"
                                                                        "l-*-2471"
                                                                        "l-*-2469"
                                                                        "l-*-2467"
                                                                        "l-*-2465"
                                                                        "l-*-2463"
                                                                        "l-*-2461"
                                                                        "l-*-2459"
                                                                        "l-*-2457"
                                                                        "l-*-2455"
                                                                        "l-*-2453"
                                                                        "l-*-2451"
                                                                        "l-*-2450"
                                                                        "l-*-2448"
                                                                        "l-*-2445"
                                                                        "l-*-2444"
                                                                        "l-*-2443"
                                                                        "l-*-2441"
                                                                        "l-*-2440"
                                                                        "l-*-2438"
                                                                        "l-*-2436"
                                                                        "l-*-2434"
                                                                        "l-*-2432"
                                                                        "l-*-2430"
                                                                        "l-*-2428"
                                                                        "l-*-2426"
                                                                        "l-*-2424"
                                                                        "l-*-2421"
                                                                        "l-*-2419"
                                                                        "l-*-2418"
                                                                        "l-*-2416"
                                                                        "l-*-2414"
                                                                        "l-*-2412"
                                                                        "l-*-2410"
                                                                        "l-*-2409"
                                                                        "l-*-2408"
                                                                        "l-*-2407"
                                                                        "l-*-2405"
                                                                        "l-*-2404"
                                                                        "l-*-2401"
                                                                        "l-*-2399"
                                                                        "l-*-2397"
                                                                        "l-*-2395"
                                                                        "l-*-2393"
                                                                        "l-*-2391"
                                                                        "l-*-2389"
                                                                        "l-*-2388"
                                                                        "l-*-2387"
                                                                        "l-*-2385"
                                                                        "l-*-2383"
                                                                        "l-*-2382"
                                                                        "l-*-2379"
                                                                        "l-*-2378"
                                                                        "l-*-2376"
                                                                        "l-*-2374"
                                                                        "l-*-2372"
                                                                        "l-*-2370"
                                                                        "l-*-2368"
                                                                        "l-*-2366"
                                                                        "l-*-2364"
                                                                        "l-*-2362"
                                                                        "l-*-2360"
                                                                        "l-*-2357"
                                                                        "l-*-2355"
                                                                        "l-*-2353"
                                                                        "l-*-2351"
                                                                        "l-*-2349"
                                                                        "l-*-2347"
                                                                        "l-*-2345"
                                                                        "l-*-2343"
                                                                        "l-*-2341"
                                                                        "l-*-2339"
                                                                        "l-*-2337"
                                                                        "l-*-2335"
                                                                        "l-*-2333"
                                                                        "l-*-2331"
                                                                        "l-*-2329"
                                                                        "l-*-2327"
                                                                        "l-*-2325"
                                                                        "l-*-2323"
                                                                        "l-*-2321"
                                                                        "l-*-2319"
                                                                        "l-*-2317"
                                                                        "l-*-2315"
                                                                        "l-*-2313"
                                                                        "l-*-2311"
                                                                        "l-*-2309"
                                                                        "l-*-2307"
                                                                        "l-*-2306"
                                                                        "l-*-2305"
                                                                        "l-*-2304"
                                                                        "l-*-2303"
                                                                        "l-*-2301"
                                                                        "l-*-2299"
                                                                        "l-*-2297"
                                                                        "l-*-2294"
                                                                        "l-*-2292"
                                                                        "l-*-2290"
                                                                        "l-*-2288"
                                                                        "l-*-2286"
                                                                        "l-*-2284"
                                                                        "l-*-2282"
                                                                        "l-*-2280"
                                                                        "l-*-2278"
                                                                        "l-*-2276"
                                                                        "l-*-2274"
                                                                        "l-*-2272"
                                                                        "l-*-2270"
                                                                        "l-*-2268"
                                                                        "l-*-2266"
                                                                        "l-*-2264"
                                                                        "l-*-2262"
                                                                        "l-*-2260"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-2098"
                                                                        "l-*-2097"
                                                                        "l-*-2096")))
                                                                    (hygiene
                                                                      guile)))
                                                               4)
                                                          #t
                                                          #f)
                                                      '...
                                                      '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("l-*-4317"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              with-transformer-environment
                                                              transformer-environment
                                                              resolve-identifier
                                                              locally-bound-identifiers
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              session-id
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("l-*-2527"
                                                             "l-*-2525"
                                                             "l-*-2523"
                                                             "l-*-2521"
                                                             "l-*-2519"
                                                             "l-*-2517"
                                                             "l-*-2515"
                                                             "l-*-2513"
                                                             "l-*-2511"
                                                             "l-*-2509"
                                                             "l-*-2507"
                                                             "l-*-2505"
                                                             "l-*-2503"
                                                             "l-*-2501"
                                                             "l-*-2499"
                                                             "l-*-2497"
                                                             "l-*-2495"
                                                             "l-*-2493"
                                                             "l-*-2491"
                                                             "l-*-2489"
                                                             "l-*-2487"
                                                             "l-*-2485"
                                                             "l-*-2483"
                                                             "l-*-2481"
                                                             "l-*-2479"
                                                             "l-*-2477"
                                                             "l-*-2475"
                                                             "l-*-2473"
                                                             "l-*-2471"
                                                             "l-*-2469"
                                                             "l-*-2467"
                                                             "l-*-2465"
                                                             "l-*-2463"
                                                             "l-*-2461"
                                                             "l-*-2459"
                                                             "l-*-2457"
                                                             "l-*-2455"
                                                             "l-*-2453"
                                                             "l-*-2451"
                                                             "l-*-2450"
                                                             "l-*-2448"
                                                             "l-*-2445"
                                                             "l-*-2444"
                                                             "l-*-2443"
                                                             "l-*-2441"
                                                             "l-*-2440"
                                                             "l-*-2438"
                                                             "l-*-2436"
                                                             "l-*-2434"
                                                             "l-*-2432"
                                                             "l-*-2430"
                                                             "l-*-2428"
                                                             "l-*-2426"
                                                             "l-*-2424"
                                                             "l-*-2421"
                                                             "l-*-2419"
                                                             "l-*-2418"
                                                             "l-*-2416"
                                                             "l-*-2414"
                                                             "l-*-2412"
                                                             "l-*-2410"
                                                             "l-*-2409"
                                                             "l-*-2408"
                                                             "l-*-2407"
                                                             "l-*-2405"
                                                             "l-*-2404"
                                                             "l-*-2401"
                                                             "l-*-2399"
                                                             "l-*-2397"
                                                             "l-*-2395"
                                                             "l-*-2393"
                                                             "l-*-2391"
                                                             "l-*-2389"
                                                             "l-*-2388"
                                                             "l-*-2387"
                                                             "l-*-2385"
                                                             "l-*-2383"
                                                             "l-*-2382"
                                                             "l-*-2379"
                                                             "l-*-2378"
                                                             "l-*-2376"
                                                             "l-*-2374"
                                                             "l-*-2372"
                                                             "l-*-2370"
                                                             "l-*-2368"
                                                             "l-*-2366"
                                                             "l-*-2364"
                                                             "l-*-2362"
                                                             "l-*-2360"
                                                             "l-*-2357"
                                                             "l-*-2355"
                                                             "l-*-2353"
                                                             "l-*-2351"
                                                             "l-*-2349"
                                                             "l-*-2347"
                                                             "l-*-2345"
                                                             "l-*-2343"
                                                             "l-*-2341"
                                                             "l-*-2339"
                                                             "l-*-2337"
                                                             "l-*-2335"
                                                             "l-*-2333"
                                                             "l-*-2331"
                                                             "l-*-2329"
                                                             "l-*-2327"
                                                             "l-*-2325"
                                                             "l-*-2323"
                                                             "l-*-2321"
                                                             "l-*-2319"
                                                             "l-*-2317"
                                                             "l-*-2315"
                                                             "l-*-2313"
                                                             "l-*-2311"
                                                             "l-*-2309"
                                                             "l-*-2307"
                                                             "l-*-2306"
                                                             "l-*-2305"
                                                             "l-*-2304"
                                                             "l-*-2303"
                                                             "l-*-2301"
                                                             "l-*-2299"
                                                             "l-*-2297"
                                                             "l-*-2294"
                                                             "l-*-2292"
                                                             "l-*-2290"
                                                             "l-*-2288"
                                                             "l-*-2286"
                                                             "l-*-2284"
                                                             "l-*-2282"
                                                             "l-*-2280"
                                                             "l-*-2278"
                                                             "l-*-2276"
                                                             "l-*-2274"
                                                             "l-*-2272"
                                                             "l-*-2270"
                                                             "l-*-2268"
                                                             "l-*-2266"
                                                             "l-*-2264"
                                                             "l-*-2262"
                                                             "l-*-2260"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("l-*-2098"
                                                             "l-*-2097"
                                                             "l-*-2096")))
                                                         (hygiene guile))))
                                             (eq? (id-var-name-6364
                                                    x-14276
                                                    '(()))
                                                  (id-var-name-6364
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("l-*-4317"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            session-id
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-2527"
                                                           "l-*-2525"
                                                           "l-*-2523"
                                                           "l-*-2521"
                                                           "l-*-2519"
                                                           "l-*-2517"
                                                           "l-*-2515"
                                                           "l-*-2513"
                                                           "l-*-2511"
                                                           "l-*-2509"
                                                           "l-*-2507"
                                                           "l-*-2505"
                                                           "l-*-2503"
                                                           "l-*-2501"
                                                           "l-*-2499"
                                                           "l-*-2497"
                                                           "l-*-2495"
                                                           "l-*-2493"
                                                           "l-*-2491"
                                                           "l-*-2489"
                                                           "l-*-2487"
                                                           "l-*-2485"
                                                           "l-*-2483"
                                                           "l-*-2481"
                                                           "l-*-2479"
                                                           "l-*-2477"
                                                           "l-*-2475"
                                                           "l-*-2473"
                                                           "l-*-2471"
                                                           "l-*-2469"
                                                           "l-*-2467"
                                                           "l-*-2465"
                                                           "l-*-2463"
                                                           "l-*-2461"
                                                           "l-*-2459"
                                                           "l-*-2457"
                                                           "l-*-2455"
                                                           "l-*-2453"
                                                           "l-*-2451"
                                                           "l-*-2450"
                                                           "l-*-2448"
                                                           "l-*-2445"
                                                           "l-*-2444"
                                                           "l-*-2443"
                                                           "l-*-2441"
                                                           "l-*-2440"
                                                           "l-*-2438"
                                                           "l-*-2436"
                                                           "l-*-2434"
                                                           "l-*-2432"
                                                           "l-*-2430"
                                                           "l-*-2428"
                                                           "l-*-2426"
                                                           "l-*-2424"
                                                           "l-*-2421"
                                                           "l-*-2419"
                                                           "l-*-2418"
                                                           "l-*-2416"
                                                           "l-*-2414"
                                                           "l-*-2412"
                                                           "l-*-2410"
                                                           "l-*-2409"
                                                           "l-*-2408"
                                                           "l-*-2407"
                                                           "l-*-2405"
                                                           "l-*-2404"
                                                           "l-*-2401"
                                                           "l-*-2399"
                                                           "l-*-2397"
                                                           "l-*-2395"
                                                           "l-*-2393"
                                                           "l-*-2391"
                                                           "l-*-2389"
                                                           "l-*-2388"
                                                           "l-*-2387"
                                                           "l-*-2385"
                                                           "l-*-2383"
                                                           "l-*-2382"
                                                           "l-*-2379"
                                                           "l-*-2378"
                                                           "l-*-2376"
                                                           "l-*-2374"
                                                           "l-*-2372"
                                                           "l-*-2370"
                                                           "l-*-2368"
                                                           "l-*-2366"
                                                           "l-*-2364"
                                                           "l-*-2362"
                                                           "l-*-2360"
                                                           "l-*-2357"
                                                           "l-*-2355"
                                                           "l-*-2353"
                                                           "l-*-2351"
                                                           "l-*-2349"
                                                           "l-*-2347"
                                                           "l-*-2345"
                                                           "l-*-2343"
                                                           "l-*-2341"
                                                           "l-*-2339"
                                                           "l-*-2337"
                                                           "l-*-2335"
                                                           "l-*-2333"
                                                           "l-*-2331"
                                                           "l-*-2329"
                                                           "l-*-2327"
                                                           "l-*-2325"
                                                           "l-*-2323"
                                                           "l-*-2321"
                                                           "l-*-2319"
                                                           "l-*-2317"
                                                           "l-*-2315"
                                                           "l-*-2313"
                                                           "l-*-2311"
                                                           "l-*-2309"
                                                           "l-*-2307"
                                                           "l-*-2306"
                                                           "l-*-2305"
                                                           "l-*-2304"
                                                           "l-*-2303"
                                                           "l-*-2301"
                                                           "l-*-2299"
                                                           "l-*-2297"
                                                           "l-*-2294"
                                                           "l-*-2292"
                                                           "l-*-2290"
                                                           "l-*-2288"
                                                           "l-*-2286"
                                                           "l-*-2284"
                                                           "l-*-2282"
                                                           "l-*-2280"
                                                           "l-*-2278"
                                                           "l-*-2276"
                                                           "l-*-2274"
                                                           "l-*-2272"
                                                           "l-*-2270"
                                                           "l-*-2268"
                                                           "l-*-2266"
                                                           "l-*-2264"
                                                           "l-*-2262"
                                                           "l-*-2260"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("l-*-2098"
                                                           "l-*-2097"
                                                           "l-*-2096")))
                                                       (hygiene guile))
                                                    '(())))
                                             #f)
                                           #f))))
                                pvars-14156))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         pat-13997)
                       (let ((y-14352
                               (gensym
                                 (string-append (symbol->string 'tmp) "-"))))
                         (build-application-6312
                           #f
                           (let ((req-14495 (list 'tmp))
                                 (vars-14497 (list y-14352))
                                 (exp-14499
                                   (let ((y-14516
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 3)
                                             #f
                                             'tmp
                                             y-14352)))
                                     (let ((test-exp-14520
                                             (let ((tmp-14529
                                                     ($sc-dispatch
                                                       fender-13998
                                                       '#(atom #t))))
                                               (if tmp-14529
                                                 (@apply
                                                   (lambda () y-14516)
                                                   tmp-14529)
                                                 (let ((then-exp-14547
                                                         (build-dispatch-call-13025
                                                           pvars-14156
                                                           fender-13998
                                                           y-14516
                                                           r-13996
                                                           mod-14000))
                                                       (else-exp-14548
                                                         (make-struct/no-tail
                                                           (vector-ref
                                                             %expanded-vtables
                                                             1)
                                                           #f
                                                           #f)))
                                                   (make-struct/no-tail
                                                     (vector-ref
                                                       %expanded-vtables
                                                       10)
                                                     #f
                                                     y-14516
                                                     then-exp-14547
                                                     else-exp-14548)))))
                                           (then-exp-14521
                                             (build-dispatch-call-13025
                                               pvars-14156
                                               exp-13999
                                               y-14516
                                               r-13996
                                               mod-14000))
                                           (else-exp-14522
                                             (gen-syntax-case-13027
                                               x-13993
                                               keys-13994
                                               clauses-13995
                                               r-13996
                                               mod-14000)))
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 10)
                                         #f
                                         test-exp-14520
                                         then-exp-14521
                                         else-exp-14522)))))
                             (let ((body-14504
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       req-14495
                                       #f
                                       #f
                                       #f
                                       '()
                                       vars-14497
                                       exp-14499
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 body-14504)))
                           (list (if (eq? p-14155 'any)
                                   (let ((fun-exp-14570
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               'list)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               'list
                                               #f)))
                                         (arg-exps-14571 (list x-13993)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       fun-exp-14570
                                       arg-exps-14571))
                                   (let ((fun-exp-14594
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               '$sc-dispatch)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               '$sc-dispatch
                                               #f)))
                                         (arg-exps-14595
                                           (list x-13993
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     1)
                                                   #f
                                                   p-14155))))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       fun-exp-14594
                                       arg-exps-14595))))))))))))
           (gen-syntax-case-13027
             (lambda (x-13426
                      keys-13427
                      clauses-13428
                      r-13429
                      mod-13430)
               (if (null? clauses-13428)
                 (let ((fun-exp-13435
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'syntax-violation)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'syntax-violation
                             #f)))
                       (arg-exps-13436
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #f)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 "source expression failed to match any pattern")
                               x-13426)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     fun-exp-13435
                     arg-exps-13436))
                 (let ((tmp-13469 (car clauses-13428)))
                   (let ((tmp-13470 ($sc-dispatch tmp-13469 '(any any))))
                     (if tmp-13470
                       (@apply
                         (lambda (pat-13472 exp-13473)
                           (if (if (if (symbol? pat-13472)
                                     #t
                                     (if (if (vector? pat-13472)
                                           (if (= (vector-length pat-13472) 4)
                                             (eq? (vector-ref pat-13472 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (symbol? (vector-ref pat-13472 1))
                                       #f))
                                 (and-map
                                   (lambda (x-13500)
                                     (not (if (eq? (if (if (vector? pat-13472)
                                                         (if (= (vector-length
                                                                  pat-13472)
                                                                4)
                                                           (eq? (vector-ref
                                                                  pat-13472
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref pat-13472 1)
                                                     pat-13472)
                                                   (if (if (vector? x-13500)
                                                         (if (= (vector-length
                                                                  x-13500)
                                                                4)
                                                           (eq? (vector-ref
                                                                  x-13500
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref x-13500 1)
                                                     x-13500))
                                            (eq? (id-var-name-6364
                                                   pat-13472
                                                   '(()))
                                                 (id-var-name-6364
                                                   x-13500
                                                   '(())))
                                            #f)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("l-*-5941" "l-*-5942"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("l-*-5930"
                                                 "l-*-5931"
                                                 "l-*-5932"
                                                 "l-*-5933"
                                                 "l-*-5934"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("l-*-5748"
                                                "l-*-5746"
                                                "l-*-5744"
                                                "l-*-5742"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 session-id
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-2527"
                                                "l-*-2525"
                                                "l-*-2523"
                                                "l-*-2521"
                                                "l-*-2519"
                                                "l-*-2517"
                                                "l-*-2515"
                                                "l-*-2513"
                                                "l-*-2511"
                                                "l-*-2509"
                                                "l-*-2507"
                                                "l-*-2505"
                                                "l-*-2503"
                                                "l-*-2501"
                                                "l-*-2499"
                                                "l-*-2497"
                                                "l-*-2495"
                                                "l-*-2493"
                                                "l-*-2491"
                                                "l-*-2489"
                                                "l-*-2487"
                                                "l-*-2485"
                                                "l-*-2483"
                                                "l-*-2481"
                                                "l-*-2479"
                                                "l-*-2477"
                                                "l-*-2475"
                                                "l-*-2473"
                                                "l-*-2471"
                                                "l-*-2469"
                                                "l-*-2467"
                                                "l-*-2465"
                                                "l-*-2463"
                                                "l-*-2461"
                                                "l-*-2459"
                                                "l-*-2457"
                                                "l-*-2455"
                                                "l-*-2453"
                                                "l-*-2451"
                                                "l-*-2450"
                                                "l-*-2448"
                                                "l-*-2445"
                                                "l-*-2444"
                                                "l-*-2443"
                                                "l-*-2441"
                                                "l-*-2440"
                                                "l-*-2438"
                                                "l-*-2436"
                                                "l-*-2434"
                                                "l-*-2432"
                                                "l-*-2430"
                                                "l-*-2428"
                                                "l-*-2426"
                                                "l-*-2424"
                                                "l-*-2421"
                                                "l-*-2419"
                                                "l-*-2418"
                                                "l-*-2416"
                                                "l-*-2414"
                                                "l-*-2412"
                                                "l-*-2410"
                                                "l-*-2409"
                                                "l-*-2408"
                                                "l-*-2407"
                                                "l-*-2405"
                                                "l-*-2404"
                                                "l-*-2401"
                                                "l-*-2399"
                                                "l-*-2397"
                                                "l-*-2395"
                                                "l-*-2393"
                                                "l-*-2391"
                                                "l-*-2389"
                                                "l-*-2388"
                                                "l-*-2387"
                                                "l-*-2385"
                                                "l-*-2383"
                                                "l-*-2382"
                                                "l-*-2379"
                                                "l-*-2378"
                                                "l-*-2376"
                                                "l-*-2374"
                                                "l-*-2372"
                                                "l-*-2370"
                                                "l-*-2368"
                                                "l-*-2366"
                                                "l-*-2364"
                                                "l-*-2362"
                                                "l-*-2360"
                                                "l-*-2357"
                                                "l-*-2355"
                                                "l-*-2353"
                                                "l-*-2351"
                                                "l-*-2349"
                                                "l-*-2347"
                                                "l-*-2345"
                                                "l-*-2343"
                                                "l-*-2341"
                                                "l-*-2339"
                                                "l-*-2337"
                                                "l-*-2335"
                                                "l-*-2333"
                                                "l-*-2331"
                                                "l-*-2329"
                                                "l-*-2327"
                                                "l-*-2325"
                                                "l-*-2323"
                                                "l-*-2321"
                                                "l-*-2319"
                                                "l-*-2317"
                                                "l-*-2315"
                                                "l-*-2313"
                                                "l-*-2311"
                                                "l-*-2309"
                                                "l-*-2307"
                                                "l-*-2306"
                                                "l-*-2305"
                                                "l-*-2304"
                                                "l-*-2303"
                                                "l-*-2301"
                                                "l-*-2299"
                                                "l-*-2297"
                                                "l-*-2294"
                                                "l-*-2292"
                                                "l-*-2290"
                                                "l-*-2288"
                                                "l-*-2286"
                                                "l-*-2284"
                                                "l-*-2282"
                                                "l-*-2280"
                                                "l-*-2278"
                                                "l-*-2276"
                                                "l-*-2274"
                                                "l-*-2272"
                                                "l-*-2270"
                                                "l-*-2268"
                                                "l-*-2266"
                                                "l-*-2264"
                                                "l-*-2262"
                                                "l-*-2260"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("l-*-2098"
                                                "l-*-2097"
                                                "l-*-2096")))
                                            (hygiene guile))
                                         keys-13427))
                                 #f)
                             (if (if (eq? (if (if (= (vector-length
                                                       '#(syntax-object
                                                          pad
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("l-*-5941"
                                                               "l-*-5942"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-5930"
                                                               "l-*-5931"
                                                               "l-*-5932"
                                                               "l-*-5933"
                                                               "l-*-5934"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-5748"
                                                              "l-*-5746"
                                                              "l-*-5744"
                                                              "l-*-5742"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               session-id
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-2527"
                                                              "l-*-2525"
                                                              "l-*-2523"
                                                              "l-*-2521"
                                                              "l-*-2519"
                                                              "l-*-2517"
                                                              "l-*-2515"
                                                              "l-*-2513"
                                                              "l-*-2511"
                                                              "l-*-2509"
                                                              "l-*-2507"
                                                              "l-*-2505"
                                                              "l-*-2503"
                                                              "l-*-2501"
                                                              "l-*-2499"
                                                              "l-*-2497"
                                                              "l-*-2495"
                                                              "l-*-2493"
                                                              "l-*-2491"
                                                              "l-*-2489"
                                                              "l-*-2487"
                                                              "l-*-2485"
                                                              "l-*-2483"
                                                              "l-*-2481"
                                                              "l-*-2479"
                                                              "l-*-2477"
                                                              "l-*-2475"
                                                              "l-*-2473"
                                                              "l-*-2471"
                                                              "l-*-2469"
                                                              "l-*-2467"
                                                              "l-*-2465"
                                                              "l-*-2463"
                                                              "l-*-2461"
                                                              "l-*-2459"
                                                              "l-*-2457"
                                                              "l-*-2455"
                                                              "l-*-2453"
                                                              "l-*-2451"
                                                              "l-*-2450"
                                                              "l-*-2448"
                                                              "l-*-2445"
                                                              "l-*-2444"
                                                              "l-*-2443"
                                                              "l-*-2441"
                                                              "l-*-2440"
                                                              "l-*-2438"
                                                              "l-*-2436"
                                                              "l-*-2434"
                                                              "l-*-2432"
                                                              "l-*-2430"
                                                              "l-*-2428"
                                                              "l-*-2426"
                                                              "l-*-2424"
                                                              "l-*-2421"
                                                              "l-*-2419"
                                                              "l-*-2418"
                                                              "l-*-2416"
                                                              "l-*-2414"
                                                              "l-*-2412"
                                                              "l-*-2410"
                                                              "l-*-2409"
                                                              "l-*-2408"
                                                              "l-*-2407"
                                                              "l-*-2405"
                                                              "l-*-2404"
                                                              "l-*-2401"
                                                              "l-*-2399"
                                                              "l-*-2397"
                                                              "l-*-2395"
                                                              "l-*-2393"
                                                              "l-*-2391"
                                                              "l-*-2389"
                                                              "l-*-2388"
                                                              "l-*-2387"
                                                              "l-*-2385"
                                                              "l-*-2383"
                                                              "l-*-2382"
                                                              "l-*-2379"
                                                              "l-*-2378"
                                                              "l-*-2376"
                                                              "l-*-2374"
                                                              "l-*-2372"
                                                              "l-*-2370"
                                                              "l-*-2368"
                                                              "l-*-2366"
                                                              "l-*-2364"
                                                              "l-*-2362"
                                                              "l-*-2360"
                                                              "l-*-2357"
                                                              "l-*-2355"
                                                              "l-*-2353"
                                                              "l-*-2351"
                                                              "l-*-2349"
                                                              "l-*-2347"
                                                              "l-*-2345"
                                                              "l-*-2343"
                                                              "l-*-2341"
                                                              "l-*-2339"
                                                              "l-*-2337"
                                                              "l-*-2335"
                                                              "l-*-2333"
                                                              "l-*-2331"
                                                              "l-*-2329"
                                                              "l-*-2327"
                                                              "l-*-2325"
                                                              "l-*-2323"
                                                              "l-*-2321"
                                                              "l-*-2319"
                                                              "l-*-2317"
                                                              "l-*-2315"
                                                              "l-*-2313"
                                                              "l-*-2311"
                                                              "l-*-2309"
                                                              "l-*-2307"
                                                              "l-*-2306"
                                                              "l-*-2305"
                                                              "l-*-2304"
                                                              "l-*-2303"
                                                              "l-*-2301"
                                                              "l-*-2299"
                                                              "l-*-2297"
                                                              "l-*-2294"
                                                              "l-*-2292"
                                                              "l-*-2290"
                                                              "l-*-2288"
                                                              "l-*-2286"
                                                              "l-*-2284"
                                                              "l-*-2282"
                                                              "l-*-2280"
                                                              "l-*-2278"
                                                              "l-*-2276"
                                                              "l-*-2274"
                                                              "l-*-2272"
                                                              "l-*-2270"
                                                              "l-*-2268"
                                                              "l-*-2266"
                                                              "l-*-2264"
                                                              "l-*-2262"
                                                              "l-*-2260"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("l-*-2098"
                                                              "l-*-2097"
                                                              "l-*-2096")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            'pad
                                            '#(syntax-object
                                               pad
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("l-*-5941" "l-*-5942"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-5930"
                                                    "l-*-5931"
                                                    "l-*-5932"
                                                    "l-*-5933"
                                                    "l-*-5934"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("l-*-5748"
                                                   "l-*-5746"
                                                   "l-*-5744"
                                                   "l-*-5742"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-2527"
                                                   "l-*-2525"
                                                   "l-*-2523"
                                                   "l-*-2521"
                                                   "l-*-2519"
                                                   "l-*-2517"
                                                   "l-*-2515"
                                                   "l-*-2513"
                                                   "l-*-2511"
                                                   "l-*-2509"
                                                   "l-*-2507"
                                                   "l-*-2505"
                                                   "l-*-2503"
                                                   "l-*-2501"
                                                   "l-*-2499"
                                                   "l-*-2497"
                                                   "l-*-2495"
                                                   "l-*-2493"
                                                   "l-*-2491"
                                                   "l-*-2489"
                                                   "l-*-2487"
                                                   "l-*-2485"
                                                   "l-*-2483"
                                                   "l-*-2481"
                                                   "l-*-2479"
                                                   "l-*-2477"
                                                   "l-*-2475"
                                                   "l-*-2473"
                                                   "l-*-2471"
                                                   "l-*-2469"
                                                   "l-*-2467"
                                                   "l-*-2465"
                                                   "l-*-2463"
                                                   "l-*-2461"
                                                   "l-*-2459"
                                                   "l-*-2457"
                                                   "l-*-2455"
                                                   "l-*-2453"
                                                   "l-*-2451"
                                                   "l-*-2450"
                                                   "l-*-2448"
                                                   "l-*-2445"
                                                   "l-*-2444"
                                                   "l-*-2443"
                                                   "l-*-2441"
                                                   "l-*-2440"
                                                   "l-*-2438"
                                                   "l-*-2436"
                                                   "l-*-2434"
                                                   "l-*-2432"
                                                   "l-*-2430"
                                                   "l-*-2428"
                                                   "l-*-2426"
                                                   "l-*-2424"
                                                   "l-*-2421"
                                                   "l-*-2419"
                                                   "l-*-2418"
                                                   "l-*-2416"
                                                   "l-*-2414"
                                                   "l-*-2412"
                                                   "l-*-2410"
                                                   "l-*-2409"
                                                   "l-*-2408"
                                                   "l-*-2407"
                                                   "l-*-2405"
                                                   "l-*-2404"
                                                   "l-*-2401"
                                                   "l-*-2399"
                                                   "l-*-2397"
                                                   "l-*-2395"
                                                   "l-*-2393"
                                                   "l-*-2391"
                                                   "l-*-2389"
                                                   "l-*-2388"
                                                   "l-*-2387"
                                                   "l-*-2385"
                                                   "l-*-2383"
                                                   "l-*-2382"
                                                   "l-*-2379"
                                                   "l-*-2378"
                                                   "l-*-2376"
                                                   "l-*-2374"
                                                   "l-*-2372"
                                                   "l-*-2370"
                                                   "l-*-2368"
                                                   "l-*-2366"
                                                   "l-*-2364"
                                                   "l-*-2362"
                                                   "l-*-2360"
                                                   "l-*-2357"
                                                   "l-*-2355"
                                                   "l-*-2353"
                                                   "l-*-2351"
                                                   "l-*-2349"
                                                   "l-*-2347"
                                                   "l-*-2345"
                                                   "l-*-2343"
                                                   "l-*-2341"
                                                   "l-*-2339"
                                                   "l-*-2337"
                                                   "l-*-2335"
                                                   "l-*-2333"
                                                   "l-*-2331"
                                                   "l-*-2329"
                                                   "l-*-2327"
                                                   "l-*-2325"
                                                   "l-*-2323"
                                                   "l-*-2321"
                                                   "l-*-2319"
                                                   "l-*-2317"
                                                   "l-*-2315"
                                                   "l-*-2313"
                                                   "l-*-2311"
                                                   "l-*-2309"
                                                   "l-*-2307"
                                                   "l-*-2306"
                                                   "l-*-2305"
                                                   "l-*-2304"
                                                   "l-*-2303"
                                                   "l-*-2301"
                                                   "l-*-2299"
                                                   "l-*-2297"
                                                   "l-*-2294"
                                                   "l-*-2292"
                                                   "l-*-2290"
                                                   "l-*-2288"
                                                   "l-*-2286"
                                                   "l-*-2284"
                                                   "l-*-2282"
                                                   "l-*-2280"
                                                   "l-*-2278"
                                                   "l-*-2276"
                                                   "l-*-2274"
                                                   "l-*-2272"
                                                   "l-*-2270"
                                                   "l-*-2268"
                                                   "l-*-2266"
                                                   "l-*-2264"
                                                   "l-*-2262"
                                                   "l-*-2260"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-2098"
                                                   "l-*-2097"
                                                   "l-*-2096")))
                                               (hygiene guile)))
                                          (if (if (= (vector-length
                                                       '#(syntax-object
                                                          _
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("l-*-5941"
                                                               "l-*-5942"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-5930"
                                                               "l-*-5931"
                                                               "l-*-5932"
                                                               "l-*-5933"
                                                               "l-*-5934"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-5748"
                                                              "l-*-5746"
                                                              "l-*-5744"
                                                              "l-*-5742"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               session-id
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-2527"
                                                              "l-*-2525"
                                                              "l-*-2523"
                                                              "l-*-2521"
                                                              "l-*-2519"
                                                              "l-*-2517"
                                                              "l-*-2515"
                                                              "l-*-2513"
                                                              "l-*-2511"
                                                              "l-*-2509"
                                                              "l-*-2507"
                                                              "l-*-2505"
                                                              "l-*-2503"
                                                              "l-*-2501"
                                                              "l-*-2499"
                                                              "l-*-2497"
                                                              "l-*-2495"
                                                              "l-*-2493"
                                                              "l-*-2491"
                                                              "l-*-2489"
                                                              "l-*-2487"
                                                              "l-*-2485"
                                                              "l-*-2483"
                                                              "l-*-2481"
                                                              "l-*-2479"
                                                              "l-*-2477"
                                                              "l-*-2475"
                                                              "l-*-2473"
                                                              "l-*-2471"
                                                              "l-*-2469"
                                                              "l-*-2467"
                                                              "l-*-2465"
                                                              "l-*-2463"
                                                              "l-*-2461"
                                                              "l-*-2459"
                                                              "l-*-2457"
                                                              "l-*-2455"
                                                              "l-*-2453"
                                                              "l-*-2451"
                                                              "l-*-2450"
                                                              "l-*-2448"
                                                              "l-*-2445"
                                                              "l-*-2444"
                                                              "l-*-2443"
                                                              "l-*-2441"
                                                              "l-*-2440"
                                                              "l-*-2438"
                                                              "l-*-2436"
                                                              "l-*-2434"
                                                              "l-*-2432"
                                                              "l-*-2430"
                                                              "l-*-2428"
                                                              "l-*-2426"
                                                              "l-*-2424"
                                                              "l-*-2421"
                                                              "l-*-2419"
                                                              "l-*-2418"
                                                              "l-*-2416"
                                                              "l-*-2414"
                                                              "l-*-2412"
                                                              "l-*-2410"
                                                              "l-*-2409"
                                                              "l-*-2408"
                                                              "l-*-2407"
                                                              "l-*-2405"
                                                              "l-*-2404"
                                                              "l-*-2401"
                                                              "l-*-2399"
                                                              "l-*-2397"
                                                              "l-*-2395"
                                                              "l-*-2393"
                                                              "l-*-2391"
                                                              "l-*-2389"
                                                              "l-*-2388"
                                                              "l-*-2387"
                                                              "l-*-2385"
                                                              "l-*-2383"
                                                              "l-*-2382"
                                                              "l-*-2379"
                                                              "l-*-2378"
                                                              "l-*-2376"
                                                              "l-*-2374"
                                                              "l-*-2372"
                                                              "l-*-2370"
                                                              "l-*-2368"
                                                              "l-*-2366"
                                                              "l-*-2364"
                                                              "l-*-2362"
                                                              "l-*-2360"
                                                              "l-*-2357"
                                                              "l-*-2355"
                                                              "l-*-2353"
                                                              "l-*-2351"
                                                              "l-*-2349"
                                                              "l-*-2347"
                                                              "l-*-2345"
                                                              "l-*-2343"
                                                              "l-*-2341"
                                                              "l-*-2339"
                                                              "l-*-2337"
                                                              "l-*-2335"
                                                              "l-*-2333"
                                                              "l-*-2331"
                                                              "l-*-2329"
                                                              "l-*-2327"
                                                              "l-*-2325"
                                                              "l-*-2323"
                                                              "l-*-2321"
                                                              "l-*-2319"
                                                              "l-*-2317"
                                                              "l-*-2315"
                                                              "l-*-2313"
                                                              "l-*-2311"
                                                              "l-*-2309"
                                                              "l-*-2307"
                                                              "l-*-2306"
                                                              "l-*-2305"
                                                              "l-*-2304"
                                                              "l-*-2303"
                                                              "l-*-2301"
                                                              "l-*-2299"
                                                              "l-*-2297"
                                                              "l-*-2294"
                                                              "l-*-2292"
                                                              "l-*-2290"
                                                              "l-*-2288"
                                                              "l-*-2286"
                                                              "l-*-2284"
                                                              "l-*-2282"
                                                              "l-*-2280"
                                                              "l-*-2278"
                                                              "l-*-2276"
                                                              "l-*-2274"
                                                              "l-*-2272"
                                                              "l-*-2270"
                                                              "l-*-2268"
                                                              "l-*-2266"
                                                              "l-*-2264"
                                                              "l-*-2262"
                                                              "l-*-2260"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("l-*-2098"
                                                              "l-*-2097"
                                                              "l-*-2096")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            '_
                                            '#(syntax-object
                                               _
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("l-*-5941" "l-*-5942"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-5930"
                                                    "l-*-5931"
                                                    "l-*-5932"
                                                    "l-*-5933"
                                                    "l-*-5934"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("l-*-5748"
                                                   "l-*-5746"
                                                   "l-*-5744"
                                                   "l-*-5742"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-2527"
                                                   "l-*-2525"
                                                   "l-*-2523"
                                                   "l-*-2521"
                                                   "l-*-2519"
                                                   "l-*-2517"
                                                   "l-*-2515"
                                                   "l-*-2513"
                                                   "l-*-2511"
                                                   "l-*-2509"
                                                   "l-*-2507"
                                                   "l-*-2505"
                                                   "l-*-2503"
                                                   "l-*-2501"
                                                   "l-*-2499"
                                                   "l-*-2497"
                                                   "l-*-2495"
                                                   "l-*-2493"
                                                   "l-*-2491"
                                                   "l-*-2489"
                                                   "l-*-2487"
                                                   "l-*-2485"
                                                   "l-*-2483"
                                                   "l-*-2481"
                                                   "l-*-2479"
                                                   "l-*-2477"
                                                   "l-*-2475"
                                                   "l-*-2473"
                                                   "l-*-2471"
                                                   "l-*-2469"
                                                   "l-*-2467"
                                                   "l-*-2465"
                                                   "l-*-2463"
                                                   "l-*-2461"
                                                   "l-*-2459"
                                                   "l-*-2457"
                                                   "l-*-2455"
                                                   "l-*-2453"
                                                   "l-*-2451"
                                                   "l-*-2450"
                                                   "l-*-2448"
                                                   "l-*-2445"
                                                   "l-*-2444"
                                                   "l-*-2443"
                                                   "l-*-2441"
                                                   "l-*-2440"
                                                   "l-*-2438"
                                                   "l-*-2436"
                                                   "l-*-2434"
                                                   "l-*-2432"
                                                   "l-*-2430"
                                                   "l-*-2428"
                                                   "l-*-2426"
                                                   "l-*-2424"
                                                   "l-*-2421"
                                                   "l-*-2419"
                                                   "l-*-2418"
                                                   "l-*-2416"
                                                   "l-*-2414"
                                                   "l-*-2412"
                                                   "l-*-2410"
                                                   "l-*-2409"
                                                   "l-*-2408"
                                                   "l-*-2407"
                                                   "l-*-2405"
                                                   "l-*-2404"
                                                   "l-*-2401"
                                                   "l-*-2399"
                                                   "l-*-2397"
                                                   "l-*-2395"
                                                   "l-*-2393"
                                                   "l-*-2391"
                                                   "l-*-2389"
                                                   "l-*-2388"
                                                   "l-*-2387"
                                                   "l-*-2385"
                                                   "l-*-2383"
                                                   "l-*-2382"
                                                   "l-*-2379"
                                                   "l-*-2378"
                                                   "l-*-2376"
                                                   "l-*-2374"
                                                   "l-*-2372"
                                                   "l-*-2370"
                                                   "l-*-2368"
                                                   "l-*-2366"
                                                   "l-*-2364"
                                                   "l-*-2362"
                                                   "l-*-2360"
                                                   "l-*-2357"
                                                   "l-*-2355"
                                                   "l-*-2353"
                                                   "l-*-2351"
                                                   "l-*-2349"
                                                   "l-*-2347"
                                                   "l-*-2345"
                                                   "l-*-2343"
                                                   "l-*-2341"
                                                   "l-*-2339"
                                                   "l-*-2337"
                                                   "l-*-2335"
                                                   "l-*-2333"
                                                   "l-*-2331"
                                                   "l-*-2329"
                                                   "l-*-2327"
                                                   "l-*-2325"
                                                   "l-*-2323"
                                                   "l-*-2321"
                                                   "l-*-2319"
                                                   "l-*-2317"
                                                   "l-*-2315"
                                                   "l-*-2313"
                                                   "l-*-2311"
                                                   "l-*-2309"
                                                   "l-*-2307"
                                                   "l-*-2306"
                                                   "l-*-2305"
                                                   "l-*-2304"
                                                   "l-*-2303"
                                                   "l-*-2301"
                                                   "l-*-2299"
                                                   "l-*-2297"
                                                   "l-*-2294"
                                                   "l-*-2292"
                                                   "l-*-2290"
                                                   "l-*-2288"
                                                   "l-*-2286"
                                                   "l-*-2284"
                                                   "l-*-2282"
                                                   "l-*-2280"
                                                   "l-*-2278"
                                                   "l-*-2276"
                                                   "l-*-2274"
                                                   "l-*-2272"
                                                   "l-*-2270"
                                                   "l-*-2268"
                                                   "l-*-2266"
                                                   "l-*-2264"
                                                   "l-*-2262"
                                                   "l-*-2260"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-2098"
                                                   "l-*-2097"
                                                   "l-*-2096")))
                                               (hygiene guile))))
                                   (eq? (id-var-name-6364
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("l-*-5941" "l-*-5942"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-5930"
                                                  "l-*-5931"
                                                  "l-*-5932"
                                                  "l-*-5933"
                                                  "l-*-5934"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("l-*-5748"
                                                 "l-*-5746"
                                                 "l-*-5744"
                                                 "l-*-5742"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  session-id
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-2527"
                                                 "l-*-2525"
                                                 "l-*-2523"
                                                 "l-*-2521"
                                                 "l-*-2519"
                                                 "l-*-2517"
                                                 "l-*-2515"
                                                 "l-*-2513"
                                                 "l-*-2511"
                                                 "l-*-2509"
                                                 "l-*-2507"
                                                 "l-*-2505"
                                                 "l-*-2503"
                                                 "l-*-2501"
                                                 "l-*-2499"
                                                 "l-*-2497"
                                                 "l-*-2495"
                                                 "l-*-2493"
                                                 "l-*-2491"
                                                 "l-*-2489"
                                                 "l-*-2487"
                                                 "l-*-2485"
                                                 "l-*-2483"
                                                 "l-*-2481"
                                                 "l-*-2479"
                                                 "l-*-2477"
                                                 "l-*-2475"
                                                 "l-*-2473"
                                                 "l-*-2471"
                                                 "l-*-2469"
                                                 "l-*-2467"
                                                 "l-*-2465"
                                                 "l-*-2463"
                                                 "l-*-2461"
                                                 "l-*-2459"
                                                 "l-*-2457"
                                                 "l-*-2455"
                                                 "l-*-2453"
                                                 "l-*-2451"
                                                 "l-*-2450"
                                                 "l-*-2448"
                                                 "l-*-2445"
                                                 "l-*-2444"
                                                 "l-*-2443"
                                                 "l-*-2441"
                                                 "l-*-2440"
                                                 "l-*-2438"
                                                 "l-*-2436"
                                                 "l-*-2434"
                                                 "l-*-2432"
                                                 "l-*-2430"
                                                 "l-*-2428"
                                                 "l-*-2426"
                                                 "l-*-2424"
                                                 "l-*-2421"
                                                 "l-*-2419"
                                                 "l-*-2418"
                                                 "l-*-2416"
                                                 "l-*-2414"
                                                 "l-*-2412"
                                                 "l-*-2410"
                                                 "l-*-2409"
                                                 "l-*-2408"
                                                 "l-*-2407"
                                                 "l-*-2405"
                                                 "l-*-2404"
                                                 "l-*-2401"
                                                 "l-*-2399"
                                                 "l-*-2397"
                                                 "l-*-2395"
                                                 "l-*-2393"
                                                 "l-*-2391"
                                                 "l-*-2389"
                                                 "l-*-2388"
                                                 "l-*-2387"
                                                 "l-*-2385"
                                                 "l-*-2383"
                                                 "l-*-2382"
                                                 "l-*-2379"
                                                 "l-*-2378"
                                                 "l-*-2376"
                                                 "l-*-2374"
                                                 "l-*-2372"
                                                 "l-*-2370"
                                                 "l-*-2368"
                                                 "l-*-2366"
                                                 "l-*-2364"
                                                 "l-*-2362"
                                                 "l-*-2360"
                                                 "l-*-2357"
                                                 "l-*-2355"
                                                 "l-*-2353"
                                                 "l-*-2351"
                                                 "l-*-2349"
                                                 "l-*-2347"
                                                 "l-*-2345"
                                                 "l-*-2343"
                                                 "l-*-2341"
                                                 "l-*-2339"
                                                 "l-*-2337"
                                                 "l-*-2335"
                                                 "l-*-2333"
                                                 "l-*-2331"
                                                 "l-*-2329"
                                                 "l-*-2327"
                                                 "l-*-2325"
                                                 "l-*-2323"
                                                 "l-*-2321"
                                                 "l-*-2319"
                                                 "l-*-2317"
                                                 "l-*-2315"
                                                 "l-*-2313"
                                                 "l-*-2311"
                                                 "l-*-2309"
                                                 "l-*-2307"
                                                 "l-*-2306"
                                                 "l-*-2305"
                                                 "l-*-2304"
                                                 "l-*-2303"
                                                 "l-*-2301"
                                                 "l-*-2299"
                                                 "l-*-2297"
                                                 "l-*-2294"
                                                 "l-*-2292"
                                                 "l-*-2290"
                                                 "l-*-2288"
                                                 "l-*-2286"
                                                 "l-*-2284"
                                                 "l-*-2282"
                                                 "l-*-2280"
                                                 "l-*-2278"
                                                 "l-*-2276"
                                                 "l-*-2274"
                                                 "l-*-2272"
                                                 "l-*-2270"
                                                 "l-*-2268"
                                                 "l-*-2266"
                                                 "l-*-2264"
                                                 "l-*-2262"
                                                 "l-*-2260"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("l-*-2098"
                                                 "l-*-2097"
                                                 "l-*-2096")))
                                             (hygiene guile))
                                          '(()))
                                        (id-var-name-6364
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("l-*-5941" "l-*-5942"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-5930"
                                                  "l-*-5931"
                                                  "l-*-5932"
                                                  "l-*-5933"
                                                  "l-*-5934"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("l-*-5748"
                                                 "l-*-5746"
                                                 "l-*-5744"
                                                 "l-*-5742"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  session-id
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-2527"
                                                 "l-*-2525"
                                                 "l-*-2523"
                                                 "l-*-2521"
                                                 "l-*-2519"
                                                 "l-*-2517"
                                                 "l-*-2515"
                                                 "l-*-2513"
                                                 "l-*-2511"
                                                 "l-*-2509"
                                                 "l-*-2507"
                                                 "l-*-2505"
                                                 "l-*-2503"
                                                 "l-*-2501"
                                                 "l-*-2499"
                                                 "l-*-2497"
                                                 "l-*-2495"
                                                 "l-*-2493"
                                                 "l-*-2491"
                                                 "l-*-2489"
                                                 "l-*-2487"
                                                 "l-*-2485"
                                                 "l-*-2483"
                                                 "l-*-2481"
                                                 "l-*-2479"
                                                 "l-*-2477"
                                                 "l-*-2475"
                                                 "l-*-2473"
                                                 "l-*-2471"
                                                 "l-*-2469"
                                                 "l-*-2467"
                                                 "l-*-2465"
                                                 "l-*-2463"
                                                 "l-*-2461"
                                                 "l-*-2459"
                                                 "l-*-2457"
                                                 "l-*-2455"
                                                 "l-*-2453"
                                                 "l-*-2451"
                                                 "l-*-2450"
                                                 "l-*-2448"
                                                 "l-*-2445"
                                                 "l-*-2444"
                                                 "l-*-2443"
                                                 "l-*-2441"
                                                 "l-*-2440"
                                                 "l-*-2438"
                                                 "l-*-2436"
                                                 "l-*-2434"
                                                 "l-*-2432"
                                                 "l-*-2430"
                                                 "l-*-2428"
                                                 "l-*-2426"
                                                 "l-*-2424"
                                                 "l-*-2421"
                                                 "l-*-2419"
                                                 "l-*-2418"
                                                 "l-*-2416"
                                                 "l-*-2414"
                                                 "l-*-2412"
                                                 "l-*-2410"
                                                 "l-*-2409"
                                                 "l-*-2408"
                                                 "l-*-2407"
                                                 "l-*-2405"
                                                 "l-*-2404"
                                                 "l-*-2401"
                                                 "l-*-2399"
                                                 "l-*-2397"
                                                 "l-*-2395"
                                                 "l-*-2393"
                                                 "l-*-2391"
                                                 "l-*-2389"
                                                 "l-*-2388"
                                                 "l-*-2387"
                                                 "l-*-2385"
                                                 "l-*-2383"
                                                 "l-*-2382"
                                                 "l-*-2379"
                                                 "l-*-2378"
                                                 "l-*-2376"
                                                 "l-*-2374"
                                                 "l-*-2372"
                                                 "l-*-2370"
                                                 "l-*-2368"
                                                 "l-*-2366"
                                                 "l-*-2364"
                                                 "l-*-2362"
                                                 "l-*-2360"
                                                 "l-*-2357"
                                                 "l-*-2355"
                                                 "l-*-2353"
                                                 "l-*-2351"
                                                 "l-*-2349"
                                                 "l-*-2347"
                                                 "l-*-2345"
                                                 "l-*-2343"
                                                 "l-*-2341"
                                                 "l-*-2339"
                                                 "l-*-2337"
                                                 "l-*-2335"
                                                 "l-*-2333"
                                                 "l-*-2331"
                                                 "l-*-2329"
                                                 "l-*-2327"
                                                 "l-*-2325"
                                                 "l-*-2323"
                                                 "l-*-2321"
                                                 "l-*-2319"
                                                 "l-*-2317"
                                                 "l-*-2315"
                                                 "l-*-2313"
                                                 "l-*-2311"
                                                 "l-*-2309"
                                                 "l-*-2307"
                                                 "l-*-2306"
                                                 "l-*-2305"
                                                 "l-*-2304"
                                                 "l-*-2303"
                                                 "l-*-2301"
                                                 "l-*-2299"
                                                 "l-*-2297"
                                                 "l-*-2294"
                                                 "l-*-2292"
                                                 "l-*-2290"
                                                 "l-*-2288"
                                                 "l-*-2286"
                                                 "l-*-2284"
                                                 "l-*-2282"
                                                 "l-*-2280"
                                                 "l-*-2278"
                                                 "l-*-2276"
                                                 "l-*-2274"
                                                 "l-*-2272"
                                                 "l-*-2270"
                                                 "l-*-2268"
                                                 "l-*-2266"
                                                 "l-*-2264"
                                                 "l-*-2262"
                                                 "l-*-2260"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("l-*-2098"
                                                 "l-*-2097"
                                                 "l-*-2096")))
                                             (hygiene guile))
                                          '(())))
                                   #f)
                               (expand-6381 exp-13473 r-13429 '(()) mod-13430)
                               (let ((labels-13676
                                       (list (string-append
                                               "l-"
                                               (session-id-6306)
                                               (symbol->string (gensym "-")))))
                                     (var-13677
                                       (let ((id-13715
                                               (if (if (vector? pat-13472)
                                                     (if (= (vector-length
                                                              pat-13472)
                                                            4)
                                                       (eq? (vector-ref
                                                              pat-13472
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref pat-13472 1)
                                                 pat-13472)))
                                         (gensym
                                           (string-append
                                             (symbol->string id-13715)
                                             "-")))))
                                 (build-application-6312
                                   #f
                                   (build-simple-lambda-6321
                                     #f
                                     (list (syntax->datum pat-13472))
                                     #f
                                     (list var-13677)
                                     '()
                                     (expand-6381
                                       exp-13473
                                       (extend-env-6339
                                         labels-13676
                                         (list (cons 'syntax
                                                     (cons var-13677 0)))
                                         r-13429)
                                       (make-binding-wrap-6359
                                         (list pat-13472)
                                         labels-13676
                                         '(()))
                                       mod-13430))
                                   (list x-13426))))
                             (gen-clause-13026
                               x-13426
                               keys-13427
                               (cdr clauses-13428)
                               r-13429
                               pat-13472
                               #t
                               exp-13473
                               mod-13430)))
                         tmp-13470)
                       (let ((tmp-13985
                               ($sc-dispatch tmp-13469 '(any any any))))
                         (if tmp-13985
                           (@apply
                             (lambda (pat-13987 fender-13988 exp-13989)
                               (gen-clause-13026
                                 x-13426
                                 keys-13427
                                 (cdr clauses-13428)
                                 r-13429
                                 pat-13987
                                 fender-13988
                                 exp-13989
                                 mod-13430))
                             tmp-13985)
                           (syntax-violation
                             'syntax-case
                             "invalid clause"
                             (car clauses-13428)))))))))))
          (lambda (e-13028 r-13029 w-13030 s-13031 mod-13032)
            (let ((e-13033
                    (wrap-6374
                      (begin
                        (if (if (pair? e-13028) s-13031 #f)
                          (set-source-properties! e-13028 s-13031))
                        e-13028)
                      w-13030
                      mod-13032)))
              (let ((tmp-13035
                      ($sc-dispatch
                        e-13033
                        '(_ any each-any . each-any))))
                (if tmp-13035
                  (@apply
                    (lambda (val-13060 key-13061 m-13062)
                      (if (and-map
                            (lambda (x-13063)
                              (if (if (symbol? x-13063)
                                    #t
                                    (if (if (vector? x-13063)
                                          (if (= (vector-length x-13063) 4)
                                            (eq? (vector-ref x-13063 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref x-13063 1))
                                      #f))
                                (not (if (if (if (vector? x-13063)
                                               (if (= (vector-length x-13063)
                                                      4)
                                                 (eq? (vector-ref x-13063 0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref x-13063 1))
                                           #f)
                                       (if (eq? (if (if (vector? x-13063)
                                                      (if (= (vector-length
                                                               x-13063)
                                                             4)
                                                        (eq? (vector-ref
                                                               x-13063
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref x-13063 1)
                                                  x-13063)
                                                (if (if (= (vector-length
                                                             '#(syntax-object
                                                                ...
                                                                ((top)
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-4317"))
                                                                 #(ribcage
                                                                   (lambda-var-list
                                                                     gen-var
                                                                     strip
                                                                     expand-lambda-case
                                                                     lambda*-formals
                                                                     expand-simple-lambda
                                                                     lambda-formals
                                                                     ellipsis?
                                                                     expand-void
                                                                     eval-local-transformer
                                                                     expand-local-syntax
                                                                     expand-body
                                                                     expand-macro
                                                                     expand-application
                                                                     expand-expr
                                                                     expand
                                                                     syntax-type
                                                                     parse-when-list
                                                                     expand-install-global
                                                                     expand-top-sequence
                                                                     expand-sequence
                                                                     source-wrap
                                                                     wrap
                                                                     bound-id-member?
                                                                     distinct-bound-ids?
                                                                     valid-bound-ids?
                                                                     bound-id=?
                                                                     free-id=?
                                                                     with-transformer-environment
                                                                     transformer-environment
                                                                     resolve-identifier
                                                                     locally-bound-identifiers
                                                                     id-var-name
                                                                     same-marks?
                                                                     join-marks
                                                                     join-wraps
                                                                     smart-append
                                                                     make-binding-wrap
                                                                     extend-ribcage!
                                                                     make-empty-ribcage
                                                                     new-mark
                                                                     anti-mark
                                                                     the-anti-mark
                                                                     top-marked?
                                                                     top-wrap
                                                                     empty-wrap
                                                                     set-ribcage-labels!
                                                                     set-ribcage-marks!
                                                                     set-ribcage-symnames!
                                                                     ribcage-labels
                                                                     ribcage-marks
                                                                     ribcage-symnames
                                                                     ribcage?
                                                                     make-ribcage
                                                                     gen-labels
                                                                     gen-label
                                                                     make-rename
                                                                     rename-marks
                                                                     rename-new
                                                                     rename-old
                                                                     subst-rename?
                                                                     wrap-subst
                                                                     wrap-marks
                                                                     make-wrap
                                                                     id-sym-name&marks
                                                                     id-sym-name
                                                                     id?
                                                                     nonsymbol-id?
                                                                     global-extend
                                                                     lookup
                                                                     macros-only-env
                                                                     extend-var-env
                                                                     extend-env
                                                                     null-env
                                                                     binding-value
                                                                     binding-type
                                                                     make-binding
                                                                     arg-check
                                                                     source-annotation
                                                                     no-source
                                                                     set-syntax-object-module!
                                                                     set-syntax-object-wrap!
                                                                     set-syntax-object-expression!
                                                                     syntax-object-module
                                                                     syntax-object-wrap
                                                                     syntax-object-expression
                                                                     syntax-object?
                                                                     make-syntax-object
                                                                     build-lexical-var
                                                                     build-letrec
                                                                     build-named-let
                                                                     build-let
                                                                     build-sequence
                                                                     build-data
                                                                     build-primref
                                                                     build-lambda-case
                                                                     build-case-lambda
                                                                     build-simple-lambda
                                                                     build-global-definition
                                                                     build-global-assignment
                                                                     build-global-reference
                                                                     analyze-variable
                                                                     build-lexical-assignment
                                                                     build-lexical-reference
                                                                     build-dynlet
                                                                     build-conditional
                                                                     build-application
                                                                     build-void
                                                                     maybe-name-value!
                                                                     decorate-source
                                                                     get-global-definition-hook
                                                                     put-global-definition-hook
                                                                     session-id
                                                                     local-eval-hook
                                                                     top-level-eval-hook
                                                                     fx<
                                                                     fx=
                                                                     fx-
                                                                     fx+
                                                                     set-lambda-meta!
                                                                     lambda-meta
                                                                     lambda?
                                                                     make-dynlet
                                                                     make-letrec
                                                                     make-let
                                                                     make-lambda-case
                                                                     make-lambda
                                                                     make-sequence
                                                                     make-application
                                                                     make-conditional
                                                                     make-toplevel-define
                                                                     make-toplevel-set
                                                                     make-toplevel-ref
                                                                     make-module-set
                                                                     make-module-ref
                                                                     make-lexical-set
                                                                     make-lexical-ref
                                                                     make-primitive-ref
                                                                     make-const
                                                                     make-void)
                                                                   ((top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                   ("l-*-2527"
                                                                    "l-*-2525"
                                                                    "l-*-2523"
                                                                    "l-*-2521"
                                                                    "l-*-2519"
                                                                    "l-*-2517"
                                                                    "l-*-2515"
                                                                    "l-*-2513"
                                                                    "l-*-2511"
                                                                    "l-*-2509"
                                                                    "l-*-2507"
                                                                    "l-*-2505"
                                                                    "l-*-2503"
                                                                    "l-*-2501"
                                                                    "l-*-2499"
                                                                    "l-*-2497"
                                                                    "l-*-2495"
                                                                    "l-*-2493"
                                                                    "l-*-2491"
                                                                    "l-*-2489"
                                                                    "l-*-2487"
                                                                    "l-*-2485"
                                                                    "l-*-2483"
                                                                    "l-*-2481"
                                                                    "l-*-2479"
                                                                    "l-*-2477"
                                                                    "l-*-2475"
                                                                    "l-*-2473"
                                                                    "l-*-2471"
                                                                    "l-*-2469"
                                                                    "l-*-2467"
                                                                    "l-*-2465"
                                                                    "l-*-2463"
                                                                    "l-*-2461"
                                                                    "l-*-2459"
                                                                    "l-*-2457"
                                                                    "l-*-2455"
                                                                    "l-*-2453"
                                                                    "l-*-2451"
                                                                    "l-*-2450"
                                                                    "l-*-2448"
                                                                    "l-*-2445"
                                                                    "l-*-2444"
                                                                    "l-*-2443"
                                                                    "l-*-2441"
                                                                    "l-*-2440"
                                                                    "l-*-2438"
                                                                    "l-*-2436"
                                                                    "l-*-2434"
                                                                    "l-*-2432"
                                                                    "l-*-2430"
                                                                    "l-*-2428"
                                                                    "l-*-2426"
                                                                    "l-*-2424"
                                                                    "l-*-2421"
                                                                    "l-*-2419"
                                                                    "l-*-2418"
                                                                    "l-*-2416"
                                                                    "l-*-2414"
                                                                    "l-*-2412"
                                                                    "l-*-2410"
                                                                    "l-*-2409"
                                                                    "l-*-2408"
                                                                    "l-*-2407"
                                                                    "l-*-2405"
                                                                    "l-*-2404"
                                                                    "l-*-2401"
                                                                    "l-*-2399"
                                                                    "l-*-2397"
                                                                    "l-*-2395"
                                                                    "l-*-2393"
                                                                    "l-*-2391"
                                                                    "l-*-2389"
                                                                    "l-*-2388"
                                                                    "l-*-2387"
                                                                    "l-*-2385"
                                                                    "l-*-2383"
                                                                    "l-*-2382"
                                                                    "l-*-2379"
                                                                    "l-*-2378"
                                                                    "l-*-2376"
                                                                    "l-*-2374"
                                                                    "l-*-2372"
                                                                    "l-*-2370"
                                                                    "l-*-2368"
                                                                    "l-*-2366"
                                                                    "l-*-2364"
                                                                    "l-*-2362"
                                                                    "l-*-2360"
                                                                    "l-*-2357"
                                                                    "l-*-2355"
                                                                    "l-*-2353"
                                                                    "l-*-2351"
                                                                    "l-*-2349"
                                                                    "l-*-2347"
                                                                    "l-*-2345"
                                                                    "l-*-2343"
                                                                    "l-*-2341"
                                                                    "l-*-2339"
                                                                    "l-*-2337"
                                                                    "l-*-2335"
                                                                    "l-*-2333"
                                                                    "l-*-2331"
                                                                    "l-*-2329"
                                                                    "l-*-2327"
                                                                    "l-*-2325"
                                                                    "l-*-2323"
                                                                    "l-*-2321"
                                                                    "l-*-2319"
                                                                    "l-*-2317"
                                                                    "l-*-2315"
                                                                    "l-*-2313"
                                                                    "l-*-2311"
                                                                    "l-*-2309"
                                                                    "l-*-2307"
                                                                    "l-*-2306"
                                                                    "l-*-2305"
                                                                    "l-*-2304"
                                                                    "l-*-2303"
                                                                    "l-*-2301"
                                                                    "l-*-2299"
                                                                    "l-*-2297"
                                                                    "l-*-2294"
                                                                    "l-*-2292"
                                                                    "l-*-2290"
                                                                    "l-*-2288"
                                                                    "l-*-2286"
                                                                    "l-*-2284"
                                                                    "l-*-2282"
                                                                    "l-*-2280"
                                                                    "l-*-2278"
                                                                    "l-*-2276"
                                                                    "l-*-2274"
                                                                    "l-*-2272"
                                                                    "l-*-2270"
                                                                    "l-*-2268"
                                                                    "l-*-2266"
                                                                    "l-*-2264"
                                                                    "l-*-2262"
                                                                    "l-*-2260"))
                                                                 #(ribcage
                                                                   (define-structure
                                                                     define-expansion-accessors
                                                                     define-expansion-constructors)
                                                                   ((top)
                                                                    (top)
                                                                    (top))
                                                                   ("l-*-2098"
                                                                    "l-*-2097"
                                                                    "l-*-2096")))
                                                                (hygiene
                                                                  guile)))
                                                           4)
                                                      #t
                                                      #f)
                                                  '...
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("l-*-4317"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          with-transformer-environment
                                                          transformer-environment
                                                          resolve-identifier
                                                          locally-bound-identifiers
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          session-id
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("l-*-2527"
                                                         "l-*-2525"
                                                         "l-*-2523"
                                                         "l-*-2521"
                                                         "l-*-2519"
                                                         "l-*-2517"
                                                         "l-*-2515"
                                                         "l-*-2513"
                                                         "l-*-2511"
                                                         "l-*-2509"
                                                         "l-*-2507"
                                                         "l-*-2505"
                                                         "l-*-2503"
                                                         "l-*-2501"
                                                         "l-*-2499"
                                                         "l-*-2497"
                                                         "l-*-2495"
                                                         "l-*-2493"
                                                         "l-*-2491"
                                                         "l-*-2489"
                                                         "l-*-2487"
                                                         "l-*-2485"
                                                         "l-*-2483"
                                                         "l-*-2481"
                                                         "l-*-2479"
                                                         "l-*-2477"
                                                         "l-*-2475"
                                                         "l-*-2473"
                                                         "l-*-2471"
                                                         "l-*-2469"
                                                         "l-*-2467"
                                                         "l-*-2465"
                                                         "l-*-2463"
                                                         "l-*-2461"
                                                         "l-*-2459"
                                                         "l-*-2457"
                                                         "l-*-2455"
                                                         "l-*-2453"
                                                         "l-*-2451"
                                                         "l-*-2450"
                                                         "l-*-2448"
                                                         "l-*-2445"
                                                         "l-*-2444"
                                                         "l-*-2443"
                                                         "l-*-2441"
                                                         "l-*-2440"
                                                         "l-*-2438"
                                                         "l-*-2436"
                                                         "l-*-2434"
                                                         "l-*-2432"
                                                         "l-*-2430"
                                                         "l-*-2428"
                                                         "l-*-2426"
                                                         "l-*-2424"
                                                         "l-*-2421"
                                                         "l-*-2419"
                                                         "l-*-2418"
                                                         "l-*-2416"
                                                         "l-*-2414"
                                                         "l-*-2412"
                                                         "l-*-2410"
                                                         "l-*-2409"
                                                         "l-*-2408"
                                                         "l-*-2407"
                                                         "l-*-2405"
                                                         "l-*-2404"
                                                         "l-*-2401"
                                                         "l-*-2399"
                                                         "l-*-2397"
                                                         "l-*-2395"
                                                         "l-*-2393"
                                                         "l-*-2391"
                                                         "l-*-2389"
                                                         "l-*-2388"
                                                         "l-*-2387"
                                                         "l-*-2385"
                                                         "l-*-2383"
                                                         "l-*-2382"
                                                         "l-*-2379"
                                                         "l-*-2378"
                                                         "l-*-2376"
                                                         "l-*-2374"
                                                         "l-*-2372"
                                                         "l-*-2370"
                                                         "l-*-2368"
                                                         "l-*-2366"
                                                         "l-*-2364"
                                                         "l-*-2362"
                                                         "l-*-2360"
                                                         "l-*-2357"
                                                         "l-*-2355"
                                                         "l-*-2353"
                                                         "l-*-2351"
                                                         "l-*-2349"
                                                         "l-*-2347"
                                                         "l-*-2345"
                                                         "l-*-2343"
                                                         "l-*-2341"
                                                         "l-*-2339"
                                                         "l-*-2337"
                                                         "l-*-2335"
                                                         "l-*-2333"
                                                         "l-*-2331"
                                                         "l-*-2329"
                                                         "l-*-2327"
                                                         "l-*-2325"
                                                         "l-*-2323"
                                                         "l-*-2321"
                                                         "l-*-2319"
                                                         "l-*-2317"
                                                         "l-*-2315"
                                                         "l-*-2313"
                                                         "l-*-2311"
                                                         "l-*-2309"
                                                         "l-*-2307"
                                                         "l-*-2306"
                                                         "l-*-2305"
                                                         "l-*-2304"
                                                         "l-*-2303"
                                                         "l-*-2301"
                                                         "l-*-2299"
                                                         "l-*-2297"
                                                         "l-*-2294"
                                                         "l-*-2292"
                                                         "l-*-2290"
                                                         "l-*-2288"
                                                         "l-*-2286"
                                                         "l-*-2284"
                                                         "l-*-2282"
                                                         "l-*-2280"
                                                         "l-*-2278"
                                                         "l-*-2276"
                                                         "l-*-2274"
                                                         "l-*-2272"
                                                         "l-*-2270"
                                                         "l-*-2268"
                                                         "l-*-2266"
                                                         "l-*-2264"
                                                         "l-*-2262"
                                                         "l-*-2260"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("l-*-2098"
                                                         "l-*-2097"
                                                         "l-*-2096")))
                                                     (hygiene guile))))
                                         (eq? (id-var-name-6364 x-13063 '(()))
                                              (id-var-name-6364
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-4317"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        with-transformer-environment
                                                        transformer-environment
                                                        resolve-identifier
                                                        locally-bound-identifiers
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        session-id
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("l-*-2527"
                                                       "l-*-2525"
                                                       "l-*-2523"
                                                       "l-*-2521"
                                                       "l-*-2519"
                                                       "l-*-2517"
                                                       "l-*-2515"
                                                       "l-*-2513"
                                                       "l-*-2511"
                                                       "l-*-2509"
                                                       "l-*-2507"
                                                       "l-*-2505"
                                                       "l-*-2503"
                                                       "l-*-2501"
                                                       "l-*-2499"
                                                       "l-*-2497"
                                                       "l-*-2495"
                                                       "l-*-2493"
                                                       "l-*-2491"
                                                       "l-*-2489"
                                                       "l-*-2487"
                                                       "l-*-2485"
                                                       "l-*-2483"
                                                       "l-*-2481"
                                                       "l-*-2479"
                                                       "l-*-2477"
                                                       "l-*-2475"
                                                       "l-*-2473"
                                                       "l-*-2471"
                                                       "l-*-2469"
                                                       "l-*-2467"
                                                       "l-*-2465"
                                                       "l-*-2463"
                                                       "l-*-2461"
                                                       "l-*-2459"
                                                       "l-*-2457"
                                                       "l-*-2455"
                                                       "l-*-2453"
                                                       "l-*-2451"
                                                       "l-*-2450"
                                                       "l-*-2448"
                                                       "l-*-2445"
                                                       "l-*-2444"
                                                       "l-*-2443"
                                                       "l-*-2441"
                                                       "l-*-2440"
                                                       "l-*-2438"
                                                       "l-*-2436"
                                                       "l-*-2434"
                                                       "l-*-2432"
                                                       "l-*-2430"
                                                       "l-*-2428"
                                                       "l-*-2426"
                                                       "l-*-2424"
                                                       "l-*-2421"
                                                       "l-*-2419"
                                                       "l-*-2418"
                                                       "l-*-2416"
                                                       "l-*-2414"
                                                       "l-*-2412"
                                                       "l-*-2410"
                                                       "l-*-2409"
                                                       "l-*-2408"
                                                       "l-*-2407"
                                                       "l-*-2405"
                                                       "l-*-2404"
                                                       "l-*-2401"
                                                       "l-*-2399"
                                                       "l-*-2397"
                                                       "l-*-2395"
                                                       "l-*-2393"
                                                       "l-*-2391"
                                                       "l-*-2389"
                                                       "l-*-2388"
                                                       "l-*-2387"
                                                       "l-*-2385"
                                                       "l-*-2383"
                                                       "l-*-2382"
                                                       "l-*-2379"
                                                       "l-*-2378"
                                                       "l-*-2376"
                                                       "l-*-2374"
                                                       "l-*-2372"
                                                       "l-*-2370"
                                                       "l-*-2368"
                                                       "l-*-2366"
                                                       "l-*-2364"
                                                       "l-*-2362"
                                                       "l-*-2360"
                                                       "l-*-2357"
                                                       "l-*-2355"
                                                       "l-*-2353"
                                                       "l-*-2351"
                                                       "l-*-2349"
                                                       "l-*-2347"
                                                       "l-*-2345"
                                                       "l-*-2343"
                                                       "l-*-2341"
                                                       "l-*-2339"
                                                       "l-*-2337"
                                                       "l-*-2335"
                                                       "l-*-2333"
                                                       "l-*-2331"
                                                       "l-*-2329"
                                                       "l-*-2327"
                                                       "l-*-2325"
                                                       "l-*-2323"
                                                       "l-*-2321"
                                                       "l-*-2319"
                                                       "l-*-2317"
                                                       "l-*-2315"
                                                       "l-*-2313"
                                                       "l-*-2311"
                                                       "l-*-2309"
                                                       "l-*-2307"
                                                       "l-*-2306"
                                                       "l-*-2305"
                                                       "l-*-2304"
                                                       "l-*-2303"
                                                       "l-*-2301"
                                                       "l-*-2299"
                                                       "l-*-2297"
                                                       "l-*-2294"
                                                       "l-*-2292"
                                                       "l-*-2290"
                                                       "l-*-2288"
                                                       "l-*-2286"
                                                       "l-*-2284"
                                                       "l-*-2282"
                                                       "l-*-2280"
                                                       "l-*-2278"
                                                       "l-*-2276"
                                                       "l-*-2274"
                                                       "l-*-2272"
                                                       "l-*-2270"
                                                       "l-*-2268"
                                                       "l-*-2266"
                                                       "l-*-2264"
                                                       "l-*-2262"
                                                       "l-*-2260"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("l-*-2098"
                                                       "l-*-2097"
                                                       "l-*-2096")))
                                                   (hygiene guile))
                                                '(())))
                                         #f)
                                       #f))
                                #f))
                            key-13061)
                        (let ((x-13189
                                (gensym
                                  (string-append (symbol->string 'tmp) "-"))))
                          (build-application-6312
                            s-13031
                            (let ((req-13319 (list 'tmp))
                                  (vars-13321 (list x-13189))
                                  (exp-13323
                                    (gen-syntax-case-13027
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        x-13189)
                                      key-13061
                                      m-13062
                                      r-13029
                                      mod-13032)))
                              (let ((body-13328
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 14)
                                        #f
                                        req-13319
                                        #f
                                        #f
                                        #f
                                        '()
                                        vars-13321
                                        exp-13323
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 13)
                                  #f
                                  '()
                                  body-13328)))
                            (list (expand-6381
                                    val-13060
                                    r-13029
                                    '(())
                                    mod-13032))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          e-13033)))
                    tmp-13035)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    e-13033)))))))
      (set! macroexpand
        (lambda*
          (x-15746
            #:optional
            (m-15747 'e)
            (esew-15748 '(eval)))
          (expand-top-sequence-6377
            (list x-15746)
            '()
            '((top))
            #f
            m-15747
            esew-15748
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (x-15751)
          (if (if (vector? x-15751)
                (if (= (vector-length x-15751) 4)
                  (eq? (vector-ref x-15751 0) 'syntax-object)
                  #f)
                #f)
            (symbol? (vector-ref x-15751 1))
            #f)))
      (set! datum->syntax
        (lambda (id-15776 datum-15777)
          (let ((wrap-15782 (vector-ref id-15776 2))
                (module-15783 (vector-ref id-15776 3)))
            (vector
              'syntax-object
              datum-15777
              wrap-15782
              module-15783))))
      (set! syntax->datum
        (lambda (x-15790) (strip-6394 x-15790 '(()))))
      (set! syntax-source
        (lambda (x-15793)
          (source-annotation-6338 x-15793)))
      (set! generate-temporaries
        (lambda (ls-15946)
          (begin
            (if (not (list? ls-15946))
              (syntax-violation
                'generate-temporaries
                "invalid argument"
                ls-15946))
            (let ((mod-15954
                    (cons 'hygiene (module-name (current-module)))))
              (map (lambda (x-15955)
                     (wrap-6374 (gensym "t-") '((top)) mod-15954))
                   ls-15946)))))
      (set! free-identifier=?
        (lambda (x-15959 y-15960)
          (begin
            (if (not (if (if (vector? x-15959)
                           (if (= (vector-length x-15959) 4)
                             (eq? (vector-ref x-15959 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref x-15959 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                x-15959))
            (if (not (if (if (vector? y-15960)
                           (if (= (vector-length y-15960) 4)
                             (eq? (vector-ref y-15960 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref y-15960 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                y-15960))
            (if (eq? (if (if (vector? x-15959)
                           (if (= (vector-length x-15959) 4)
                             (eq? (vector-ref x-15959 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref x-15959 1)
                       x-15959)
                     (if (if (vector? y-15960)
                           (if (= (vector-length y-15960) 4)
                             (eq? (vector-ref y-15960 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref y-15960 1)
                       y-15960))
              (eq? (id-var-name-6364 x-15959 '(()))
                   (id-var-name-6364 y-15960 '(())))
              #f))))
      (set! bound-identifier=?
        (lambda (x-16110 y-16111)
          (begin
            (if (not (if (if (vector? x-16110)
                           (if (= (vector-length x-16110) 4)
                             (eq? (vector-ref x-16110 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref x-16110 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                x-16110))
            (if (not (if (if (vector? y-16111)
                           (if (= (vector-length y-16111) 4)
                             (eq? (vector-ref y-16111 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref y-16111 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                y-16111))
            (if (if (if (vector? x-16110)
                      (if (= (vector-length x-16110) 4)
                        (eq? (vector-ref x-16110 0) 'syntax-object)
                        #f)
                      #f)
                  (if (vector? y-16111)
                    (if (= (vector-length y-16111) 4)
                      (eq? (vector-ref y-16111 0) 'syntax-object)
                      #f)
                    #f)
                  #f)
              (if (eq? (vector-ref x-16110 1)
                       (vector-ref y-16111 1))
                (same-marks?-6363
                  (car (vector-ref x-16110 2))
                  (car (vector-ref y-16111 2)))
                #f)
              (eq? x-16110 y-16111)))))
      (set! syntax-violation
        (lambda*
          (who-16244
            message-16245
            form-16246
            #:optional
            (subform-16247 #f))
          (begin
            (if (not (if (not who-16244)
                       (not who-16244)
                       (let ((t-16265 (string? who-16244)))
                         (if t-16265 t-16265 (symbol? who-16244)))))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                who-16244))
            (if (not (string? message-16245))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                message-16245))
            (throw 'syntax-error
                   who-16244
                   message-16245
                   (source-annotation-6338
                     (if form-16246 form-16246 subform-16247))
                   (strip-6394 form-16246 '(()))
                   (if subform-16247
                     (strip-6394 subform-16247 '(()))
                     #f)))))
      (letrec*
        ((syntax-local-binding-16469
           (lambda (id-16602)
             (begin
               (if (not (if (if (vector? id-16602)
                              (if (= (vector-length id-16602) 4)
                                (eq? (vector-ref id-16602 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-16602 1))
                          #f))
                 (syntax-violation
                   'syntax-local-binding
                   "invalid argument"
                   id-16602))
               ((fluid-ref transformer-environment-6367)
                (lambda (e-16642
                         r-16643
                         w-16644
                         s-16645
                         rib-16646
                         mod-16647)
                  (call-with-values
                    (lambda ()
                      (let ((id-16650 (vector-ref id-16602 1))
                            (w-16651
                              (let ((w-16662 (vector-ref id-16602 2)))
                                (let ((ms-16663 (car w-16662))
                                      (s-16664 (cdr w-16662)))
                                  (if (if (pair? ms-16663)
                                        (eq? (car ms-16663) #f)
                                        #f)
                                    (cons (cdr ms-16663)
                                          (if rib-16646
                                            (cons rib-16646 (cdr s-16664))
                                            (cdr s-16664)))
                                    (cons ms-16663
                                          (if rib-16646
                                            (cons rib-16646 s-16664)
                                            s-16664))))))
                            (mod-16653 (vector-ref id-16602 3)))
                        (let ((n-16656 (id-var-name-6364 id-16650 w-16651)))
                          (if (symbol? n-16656)
                            (let ((mod-16670
                                    (if (if (vector? id-16650)
                                          (if (= (vector-length id-16650) 4)
                                            (eq? (vector-ref id-16650 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref id-16650 3)
                                      mod-16653)))
                              (let ((b-16671
                                      (let ((t-16672
                                              (get-global-definition-hook-6308
                                                n-16656
                                                mod-16670)))
                                        (if t-16672 t-16672 '(global)))))
                                (if (eq? (car b-16671) 'global)
                                  (values 'global n-16656 mod-16670)
                                  (values
                                    (car b-16671)
                                    (cdr b-16671)
                                    mod-16670))))
                            (if (string? n-16656)
                              (let ((mod-16698
                                      (if (if (vector? id-16650)
                                            (if (= (vector-length id-16650) 4)
                                              (eq? (vector-ref id-16650 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref id-16650 3)
                                        mod-16653)))
                                (let ((b-16699
                                        (let ((t-16700
                                                (assq-ref r-16643 n-16656)))
                                          (if t-16700
                                            t-16700
                                            '(displaced-lexical)))))
                                  (values
                                    (car b-16699)
                                    (cdr b-16699)
                                    mod-16698)))
                              (error "unexpected id-var-name"
                                     id-16650
                                     w-16651
                                     n-16656))))))
                    (lambda (type-16713 value-16714 mod-16715)
                      (if (eqv? type-16713 'lexical)
                        (values 'lexical value-16714)
                        (if (eqv? type-16713 'macro)
                          (values 'macro value-16714)
                          (if (eqv? type-16713 'syntax)
                            (values 'pattern-variable value-16714)
                            (if (eqv? type-16713 'displaced-lexical)
                              (values 'displaced-lexical #f)
                              (if (eqv? type-16713 'global)
                                (values
                                  'global
                                  (cons value-16714 (cdr mod-16715)))
                                (values 'other #f)))))))))))))
         (syntax-locally-bound-identifiers-16470
           (lambda (id-16737)
             (begin
               (if (not (if (if (vector? id-16737)
                              (if (= (vector-length id-16737) 4)
                                (eq? (vector-ref id-16737 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-16737 1))
                          #f))
                 (syntax-violation
                   'syntax-locally-bound-identifiers
                   "invalid argument"
                   id-16737))
               (locally-bound-identifiers-6365
                 (vector-ref id-16737 2)
                 (vector-ref id-16737 3))))))
        (begin
          (define!
            'syntax-module
            (lambda (id-16472)
              (begin
                (if (not (if (if (vector? id-16472)
                               (if (= (vector-length id-16472) 4)
                                 (eq? (vector-ref id-16472 0) 'syntax-object)
                                 #f)
                               #f)
                           (symbol? (vector-ref id-16472 1))
                           #f))
                  (syntax-violation
                    'syntax-module
                    "invalid argument"
                    id-16472))
                (cdr (vector-ref id-16472 3)))))
          (define!
            'syntax-local-binding
            syntax-local-binding-16469)
          (define!
            'syntax-locally-bound-identifiers
            syntax-locally-bound-identifiers-16470)))
      (letrec*
        ((match-each-16844
           (lambda (e-17431 p-17432 w-17433 mod-17434)
             (if (pair? e-17431)
               (let ((first-17435
                       (match-16850
                         (car e-17431)
                         p-17432
                         w-17433
                         '()
                         mod-17434)))
                 (if first-17435
                   (let ((rest-17438
                           (match-each-16844
                             (cdr e-17431)
                             p-17432
                             w-17433
                             mod-17434)))
                     (if rest-17438 (cons first-17435 rest-17438) #f))
                   #f))
               (if (null? e-17431)
                 '()
                 (if (if (vector? e-17431)
                       (if (= (vector-length e-17431) 4)
                         (eq? (vector-ref e-17431 0) 'syntax-object)
                         #f)
                       #f)
                   (match-each-16844
                     (vector-ref e-17431 1)
                     p-17432
                     (join-wraps-6361 w-17433 (vector-ref e-17431 2))
                     (vector-ref e-17431 3))
                   #f)))))
         (match-each-any-16846
           (lambda (e-17466 w-17467 mod-17468)
             (if (pair? e-17466)
               (let ((l-17469
                       (match-each-any-16846
                         (cdr e-17466)
                         w-17467
                         mod-17468)))
                 (if l-17469
                   (cons (wrap-6374 (car e-17466) w-17467 mod-17468)
                         l-17469)
                   #f))
               (if (null? e-17466)
                 '()
                 (if (if (vector? e-17466)
                       (if (= (vector-length e-17466) 4)
                         (eq? (vector-ref e-17466 0) 'syntax-object)
                         #f)
                       #f)
                   (match-each-any-16846
                     (vector-ref e-17466 1)
                     (join-wraps-6361 w-17467 (vector-ref e-17466 2))
                     mod-17468)
                   #f)))))
         (match-empty-16847
           (lambda (p-17493 r-17494)
             (if (null? p-17493)
               r-17494
               (if (eq? p-17493 '_)
                 r-17494
                 (if (eq? p-17493 'any)
                   (cons '() r-17494)
                   (if (pair? p-17493)
                     (match-empty-16847
                       (car p-17493)
                       (match-empty-16847 (cdr p-17493) r-17494))
                     (if (eq? p-17493 'each-any)
                       (cons '() r-17494)
                       (let ((key-17495 (vector-ref p-17493 0)))
                         (if (eqv? key-17495 'each)
                           (match-empty-16847
                             (vector-ref p-17493 1)
                             r-17494)
                           (if (eqv? key-17495 'each+)
                             (match-empty-16847
                               (vector-ref p-17493 1)
                               (match-empty-16847
                                 (reverse (vector-ref p-17493 2))
                                 (match-empty-16847
                                   (vector-ref p-17493 3)
                                   r-17494)))
                             (if (if (eqv? key-17495 'free-id)
                                   #t
                                   (eqv? key-17495 'atom))
                               r-17494
                               (if (eqv? key-17495 'vector)
                                 (match-empty-16847
                                   (vector-ref p-17493 1)
                                   r-17494)))))))))))))
         (combine-16848
           (lambda (r*-17514 r-17515)
             (if (null? (car r*-17514))
               r-17515
               (cons (map car r*-17514)
                     (combine-16848 (map cdr r*-17514) r-17515)))))
         (match*-16849
           (lambda (e-16879 p-16880 w-16881 r-16882 mod-16883)
             (if (null? p-16880)
               (if (null? e-16879) r-16882 #f)
               (if (pair? p-16880)
                 (if (pair? e-16879)
                   (match-16850
                     (car e-16879)
                     (car p-16880)
                     w-16881
                     (match-16850
                       (cdr e-16879)
                       (cdr p-16880)
                       w-16881
                       r-16882
                       mod-16883)
                     mod-16883)
                   #f)
                 (if (eq? p-16880 'each-any)
                   (let ((l-16888
                           (match-each-any-16846 e-16879 w-16881 mod-16883)))
                     (if l-16888 (cons l-16888 r-16882) #f))
                   (let ((key-16893 (vector-ref p-16880 0)))
                     (if (eqv? key-16893 'each)
                       (if (null? e-16879)
                         (match-empty-16847
                           (vector-ref p-16880 1)
                           r-16882)
                         (let ((l-16900
                                 (match-each-16844
                                   e-16879
                                   (vector-ref p-16880 1)
                                   w-16881
                                   mod-16883)))
                           (if l-16900
                             (letrec*
                               ((collect-16903
                                  (lambda (l-16954)
                                    (if (null? (car l-16954))
                                      r-16882
                                      (cons (map car l-16954)
                                            (collect-16903
                                              (map cdr l-16954)))))))
                               (collect-16903 l-16900))
                             #f)))
                       (if (eqv? key-16893 'each+)
                         (call-with-values
                           (lambda ()
                             (let ((x-pat-16963 (vector-ref p-16880 1))
                                   (y-pat-16964 (vector-ref p-16880 2))
                                   (z-pat-16965 (vector-ref p-16880 3)))
                               (letrec*
                                 ((f-16969
                                    (lambda (e-16971 w-16972)
                                      (if (pair? e-16971)
                                        (call-with-values
                                          (lambda ()
                                            (f-16969 (cdr e-16971) w-16972))
                                          (lambda (xr*-16973
                                                   y-pat-16974
                                                   r-16975)
                                            (if r-16975
                                              (if (null? y-pat-16974)
                                                (let ((xr-16976
                                                        (match-16850
                                                          (car e-16971)
                                                          x-pat-16963
                                                          w-16972
                                                          '()
                                                          mod-16883)))
                                                  (if xr-16976
                                                    (values
                                                      (cons xr-16976 xr*-16973)
                                                      y-pat-16974
                                                      r-16975)
                                                    (values #f #f #f)))
                                                (values
                                                  '()
                                                  (cdr y-pat-16974)
                                                  (match-16850
                                                    (car e-16971)
                                                    (car y-pat-16974)
                                                    w-16972
                                                    r-16975
                                                    mod-16883)))
                                              (values #f #f #f))))
                                        (if (if (vector? e-16971)
                                              (if (= (vector-length e-16971) 4)
                                                (eq? (vector-ref e-16971 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (f-16969
                                            (vector-ref e-16971 1)
                                            (join-wraps-6361 w-16972 e-16971))
                                          (values
                                            '()
                                            y-pat-16964
                                            (match-16850
                                              e-16971
                                              z-pat-16965
                                              w-16972
                                              r-16882
                                              mod-16883)))))))
                                 (f-16969 e-16879 w-16881))))
                           (lambda (xr*-17002 y-pat-17003 r-17004)
                             (if r-17004
                               (if (null? y-pat-17003)
                                 (if (null? xr*-17002)
                                   (match-empty-16847
                                     (vector-ref p-16880 1)
                                     r-17004)
                                   (combine-16848 xr*-17002 r-17004))
                                 #f)
                               #f)))
                         (if (eqv? key-16893 'free-id)
                           (if (if (symbol? e-16879)
                                 #t
                                 (if (if (vector? e-16879)
                                       (if (= (vector-length e-16879) 4)
                                         (eq? (vector-ref e-16879 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (symbol? (vector-ref e-16879 1))
                                   #f))
                             (if (let ((i-17335
                                         (wrap-6374 e-16879 w-16881 mod-16883))
                                       (j-17336 (vector-ref p-16880 1)))
                                   (if (eq? (if (if (vector? i-17335)
                                                  (if (= (vector-length
                                                           i-17335)
                                                         4)
                                                    (eq? (vector-ref i-17335 0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref i-17335 1)
                                              i-17335)
                                            (if (if (vector? j-17336)
                                                  (if (= (vector-length
                                                           j-17336)
                                                         4)
                                                    (eq? (vector-ref j-17336 0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref j-17336 1)
                                              j-17336))
                                     (eq? (id-var-name-6364 i-17335 '(()))
                                          (id-var-name-6364 j-17336 '(())))
                                     #f))
                               r-16882
                               #f)
                             #f)
                           (if (eqv? key-16893 'atom)
                             (if (equal?
                                   (vector-ref p-16880 1)
                                   (strip-6394 e-16879 w-16881))
                               r-16882
                               #f)
                             (if (eqv? key-16893 'vector)
                               (if (vector? e-16879)
                                 (match-16850
                                   (vector->list e-16879)
                                   (vector-ref p-16880 1)
                                   w-16881
                                   r-16882
                                   mod-16883)
                                 #f))))))))))))
         (match-16850
           (lambda (e-17396 p-17397 w-17398 r-17399 mod-17400)
             (if (not r-17399)
               #f
               (if (eq? p-17397 '_)
                 r-17399
                 (if (eq? p-17397 'any)
                   (cons (wrap-6374 e-17396 w-17398 mod-17400)
                         r-17399)
                   (if (if (vector? e-17396)
                         (if (= (vector-length e-17396) 4)
                           (eq? (vector-ref e-17396 0) 'syntax-object)
                           #f)
                         #f)
                     (match*-16849
                       (vector-ref e-17396 1)
                       p-17397
                       (join-wraps-6361 w-17398 (vector-ref e-17396 2))
                       r-17399
                       (vector-ref e-17396 3))
                     (match*-16849
                       e-17396
                       p-17397
                       w-17398
                       r-17399
                       mod-17400))))))))
        (set! $sc-dispatch
          (lambda (e-16851 p-16852)
            (if (eq? p-16852 'any)
              (list e-16851)
              (if (eq? p-16852 '_)
                '()
                (if (if (vector? e-16851)
                      (if (= (vector-length e-16851) 4)
                        (eq? (vector-ref e-16851 0) 'syntax-object)
                        #f)
                      #f)
                  (match*-16849
                    (vector-ref e-16851 1)
                    p-16852
                    (vector-ref e-16851 2)
                    '()
                    (vector-ref e-16851 3))
                  (match*-16849 e-16851 p-16852 '(()) '() #f))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (x-29838)
      (let ((tmp-29840
              ($sc-dispatch x-29838 '(_ () any . each-any))))
        (if tmp-29840
          (@apply
            (lambda (e1-29844 e2-29845)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("l-*-29811" "l-*-29812"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-29808")))
                       (hygiene guile))
                    (cons '() (cons e1-29844 e2-29845))))
            tmp-29840)
          (let ((tmp-29846
                  ($sc-dispatch
                    x-29838
                    '(_ ((any any)) any . each-any))))
            (if tmp-29846
              (@apply
                (lambda (out-29850 in-29851 e1-29852 e2-29853)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("l-*-29817"
                                "l-*-29818"
                                "l-*-29819"
                                "l-*-29820"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29808")))
                           (hygiene guile))
                        in-29851
                        '()
                        (list out-29850
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("l-*-29817"
                                            "l-*-29818"
                                            "l-*-29819"
                                            "l-*-29820"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-29808")))
                                       (hygiene guile))
                                    (cons '() (cons e1-29852 e2-29853))))))
                tmp-29846)
              (let ((tmp-29854
                      ($sc-dispatch
                        x-29838
                        '(_ #(each (any any)) any . each-any))))
                (if tmp-29854
                  (@apply
                    (lambda (out-29858 in-29859 e1-29860 e2-29861)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("l-*-29827"
                                    "l-*-29828"
                                    "l-*-29829"
                                    "l-*-29830"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("l-*-29808")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("l-*-29827"
                                          "l-*-29828"
                                          "l-*-29829"
                                          "l-*-29830"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-29808")))
                                     (hygiene guile))
                                  in-29859)
                            '()
                            (list out-29858
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("l-*-29827"
                                                "l-*-29828"
                                                "l-*-29829"
                                                "l-*-29830"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("l-*-29808")))
                                           (hygiene guile))
                                        (cons '() (cons e1-29860 e2-29861))))))
                    tmp-29854)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    x-29838))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (x-29915)
      (let ((tmp-29917
              ($sc-dispatch
                x-29915
                '(_ each-any . #(each ((any . any) any))))))
        (if tmp-29917
          (@apply
            (lambda (k-29921
                     keyword-29922
                     pattern-29923
                     template-29924)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("l-*-29878"
                            "l-*-29879"
                            "l-*-29880"
                            "l-*-29881"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-29875")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("l-*-29878"
                             "l-*-29879"
                             "l-*-29880"
                             "l-*-29881"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("l-*-29875")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("l-*-29878"
                               "l-*-29879"
                               "l-*-29880"
                               "l-*-29881"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-29875")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("l-*-29878"
                               "l-*-29879"
                               "l-*-29880"
                               "l-*-29881"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-29875")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("l-*-29878"
                                    "l-*-29879"
                                    "l-*-29880"
                                    "l-*-29881"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("l-*-29875")))
                               (hygiene guile))
                            pattern-29923))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("l-*-29878"
                                  "l-*-29879"
                                  "l-*-29880"
                                  "l-*-29881"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-29875")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("l-*-29878"
                                        "l-*-29879"
                                        "l-*-29880"
                                        "l-*-29881"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-29875")))
                                   (hygiene guile))
                                (cons k-29921
                                      (map (lambda (tmp-29889-29925
                                                    tmp-29888-29926)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("l-*-29878"
                                                                 "l-*-29879"
                                                                 "l-*-29880"
                                                                 "l-*-29881"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-29875")))
                                                            (hygiene guile))
                                                         tmp-29888-29926)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("l-*-29878"
                                                                 "l-*-29879"
                                                                 "l-*-29880"
                                                                 "l-*-29881"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-29875")))
                                                            (hygiene guile))
                                                         tmp-29889-29925)))
                                           template-29924
                                           pattern-29923))))))
            tmp-29917)
          (let ((tmp-29927
                  ($sc-dispatch
                    x-29915
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if tmp-29927
                  (@apply
                    (lambda (k-29931
                             docstring-29932
                             keyword-29933
                             pattern-29934
                             template-29935)
                      (string? (syntax->datum docstring-29932)))
                    tmp-29927)
                  #f)
              (@apply
                (lambda (k-29936
                         docstring-29937
                         keyword-29938
                         pattern-29939
                         template-29940)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("l-*-29901"
                                "l-*-29902"
                                "l-*-29903"
                                "l-*-29904"
                                "l-*-29905"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29875")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("l-*-29901"
                                 "l-*-29902"
                                 "l-*-29903"
                                 "l-*-29904"
                                 "l-*-29905"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("l-*-29875")))
                            (hygiene guile)))
                        docstring-29937
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("l-*-29901"
                                   "l-*-29902"
                                   "l-*-29903"
                                   "l-*-29904"
                                   "l-*-29905"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-29875")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("l-*-29901"
                                   "l-*-29902"
                                   "l-*-29903"
                                   "l-*-29904"
                                   "l-*-29905"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-29875")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("l-*-29901"
                                        "l-*-29902"
                                        "l-*-29903"
                                        "l-*-29904"
                                        "l-*-29905"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-29875")))
                                   (hygiene guile))
                                pattern-29939))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("l-*-29901"
                                      "l-*-29902"
                                      "l-*-29903"
                                      "l-*-29904"
                                      "l-*-29905"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-29875")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-29901"
                                            "l-*-29902"
                                            "l-*-29903"
                                            "l-*-29904"
                                            "l-*-29905"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-29875")))
                                       (hygiene guile))
                                    (cons k-29936
                                          (map (lambda (tmp-29914-29941
                                                        tmp-29913-29942)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-29901"
                                                                     "l-*-29902"
                                                                     "l-*-29903"
                                                                     "l-*-29904"
                                                                     "l-*-29905"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-29875")))
                                                                (hygiene
                                                                  guile))
                                                             tmp-29913-29942)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-29901"
                                                                     "l-*-29902"
                                                                     "l-*-29903"
                                                                     "l-*-29904"
                                                                     "l-*-29905"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-29875")))
                                                                (hygiene
                                                                  guile))
                                                             tmp-29914-29941)))
                                               template-29940
                                               pattern-29939))))))
                tmp-29927)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-29915))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (x-29979)
      (let ((tmp-29981
              ($sc-dispatch x-29979 '(_ (any . any) any))))
        (if tmp-29981
          (@apply
            (lambda (name-29985 pattern-29986 template-29987)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("l-*-29956" "l-*-29957" "l-*-29958"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-29953")))
                       (hygiene guile))
                    name-29985
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("l-*-29956" "l-*-29957" "l-*-29958"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-29953")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("l-*-29956"
                                              "l-*-29957"
                                              "l-*-29958"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-29953")))
                                         (hygiene guile))
                                      pattern-29986)
                                template-29987))))
            tmp-29981)
          (let ((tmp-29988
                  ($sc-dispatch x-29979 '(_ (any . any) any any))))
            (if (if tmp-29988
                  (@apply
                    (lambda (name-29992
                             pattern-29993
                             docstring-29994
                             template-29995)
                      (string? (syntax->datum docstring-29994)))
                    tmp-29988)
                  #f)
              (@apply
                (lambda (name-29996
                         pattern-29997
                         docstring-29998
                         template-29999)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("l-*-29971"
                                "l-*-29972"
                                "l-*-29973"
                                "l-*-29974"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29953")))
                           (hygiene guile))
                        name-29996
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("l-*-29971"
                                      "l-*-29972"
                                      "l-*-29973"
                                      "l-*-29974"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-29953")))
                                 (hygiene guile))
                              '()
                              docstring-29998
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("l-*-29971"
                                                  "l-*-29972"
                                                  "l-*-29973"
                                                  "l-*-29974"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("l-*-29953")))
                                             (hygiene guile))
                                          pattern-29997)
                                    template-29999))))
                tmp-29988)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-29979))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (x-30048)
      (let ((tmp-30050
              ($sc-dispatch
                x-30048
                '(any #(each (any any)) any . each-any))))
        (if (if tmp-30050
              (@apply
                (lambda (let*-30054 x-30055 v-30056 e1-30057 e2-30058)
                  (and-map identifier? x-30055))
                tmp-30050)
              #f)
          (@apply
            (lambda (let*-30059 x-30060 v-30061 e1-30062 e2-30063)
              (letrec*
                ((f-30064
                   (lambda (bindings-30067)
                     (if (null? bindings-30067)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("l-*-30034" "l-*-30035"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("l-*-30024"
                                     "l-*-30025"
                                     "l-*-30026"
                                     "l-*-30027"
                                     "l-*-30028"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("l-*-30010")))
                                (hygiene guile))
                             (cons '() (cons e1-30062 e2-30063)))
                       (let ((tmp-30068
                               (list (f-30064 (cdr bindings-30067))
                                     (car bindings-30067))))
                         (let ((tmp-30069 ($sc-dispatch tmp-30068 '(any any))))
                           (if tmp-30069
                             (@apply
                               (lambda (body-30071 binding-30072)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("l-*-30044" "l-*-30045"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("l-*-30034" "l-*-30035"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("l-*-30024"
                                               "l-*-30025"
                                               "l-*-30026"
                                               "l-*-30027"
                                               "l-*-30028"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-30010")))
                                          (hygiene guile))
                                       (list binding-30072)
                                       body-30071))
                               tmp-30069)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               tmp-30068))))))))
                (f-30064 (map list x-30060 v-30061))))
            tmp-30050)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-30048))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (orig-x-30130)
      (let ((tmp-30132
              ($sc-dispatch
                orig-x-30130
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if tmp-30132
          (@apply
            (lambda (var-30136
                     init-30137
                     step-30138
                     e0-30139
                     e1-30140
                     c-30141)
              (let ((tmp-30142
                      (map (lambda (v-30145 s-30146)
                             (let ((tmp-30148 ($sc-dispatch s-30146 '())))
                               (if tmp-30148
                                 (@apply (lambda () v-30145) tmp-30148)
                                 (let ((tmp-30151
                                         ($sc-dispatch s-30146 '(any))))
                                   (if tmp-30151
                                     (@apply
                                       (lambda (e-30154) e-30154)
                                       tmp-30151)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       orig-x-30130
                                       s-30146))))))
                           var-30136
                           step-30138)))
                (let ((tmp-30143 ($sc-dispatch tmp-30142 'each-any)))
                  (if tmp-30143
                    (@apply
                      (lambda (step-30160)
                        (let ((tmp-30162 ($sc-dispatch e1-30140 '())))
                          (if tmp-30162
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("l-*-30098"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-30083"
                                              "l-*-30084"
                                              "l-*-30085"
                                              "l-*-30086"
                                              "l-*-30087"
                                              "l-*-30088"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("l-*-30080")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("l-*-30098"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-30083"
                                              "l-*-30084"
                                              "l-*-30085"
                                              "l-*-30086"
                                              "l-*-30087"
                                              "l-*-30088"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("l-*-30080")))
                                         (hygiene guile))
                                      (map list var-30136 init-30137)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("l-*-30098"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-30083"
                                                    "l-*-30084"
                                                    "l-*-30085"
                                                    "l-*-30086"
                                                    "l-*-30087"
                                                    "l-*-30088"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("l-*-30080")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("l-*-30098"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("l-*-30083"
                                                          "l-*-30084"
                                                          "l-*-30085"
                                                          "l-*-30086"
                                                          "l-*-30087"
                                                          "l-*-30088"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("l-*-30080")))
                                                     (hygiene guile))
                                                  e0-30139)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("l-*-30098"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("l-*-30083"
                                                          "l-*-30084"
                                                          "l-*-30085"
                                                          "l-*-30086"
                                                          "l-*-30087"
                                                          "l-*-30088"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("l-*-30080")))
                                                     (hygiene guile))
                                                  (append
                                                    c-30141
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("l-*-30098"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("l-*-30083"
                                                                        "l-*-30084"
                                                                        "l-*-30085"
                                                                        "l-*-30086"
                                                                        "l-*-30087"
                                                                        "l-*-30088"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("l-*-30080")))
                                                                   (hygiene
                                                                     guile))
                                                                step-30160)))))))
                              tmp-30162)
                            (let ((tmp-30166
                                    ($sc-dispatch e1-30140 '(any . each-any))))
                              (if tmp-30166
                                (@apply
                                  (lambda (e1-30170 e2-30171)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("l-*-30107" "l-*-30108"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("l-*-30098"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-30083"
                                                  "l-*-30084"
                                                  "l-*-30085"
                                                  "l-*-30086"
                                                  "l-*-30087"
                                                  "l-*-30088"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("l-*-30080")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("l-*-30107" "l-*-30108"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("l-*-30098"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-30083"
                                                  "l-*-30084"
                                                  "l-*-30085"
                                                  "l-*-30086"
                                                  "l-*-30087"
                                                  "l-*-30088"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("l-*-30080")))
                                             (hygiene guile))
                                          (map list var-30136 init-30137)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("l-*-30107"
                                                        "l-*-30108"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("l-*-30098"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-30083"
                                                        "l-*-30084"
                                                        "l-*-30085"
                                                        "l-*-30086"
                                                        "l-*-30087"
                                                        "l-*-30088"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("l-*-30080")))
                                                   (hygiene guile))
                                                e0-30139
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("l-*-30107"
                                                              "l-*-30108"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("l-*-30098"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-30083"
                                                              "l-*-30084"
                                                              "l-*-30085"
                                                              "l-*-30086"
                                                              "l-*-30087"
                                                              "l-*-30088"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("l-*-30080")))
                                                         (hygiene guile))
                                                      (cons e1-30170 e2-30171))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("l-*-30107"
                                                              "l-*-30108"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("l-*-30098"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-30083"
                                                              "l-*-30084"
                                                              "l-*-30085"
                                                              "l-*-30086"
                                                              "l-*-30087"
                                                              "l-*-30088"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("l-*-30080")))
                                                         (hygiene guile))
                                                      (append
                                                        c-30141
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("l-*-30107"
                                                                            "l-*-30108"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("l-*-30098"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("l-*-30083"
                                                                            "l-*-30084"
                                                                            "l-*-30085"
                                                                            "l-*-30086"
                                                                            "l-*-30087"
                                                                            "l-*-30088"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("l-*-30080")))
                                                                       (hygiene
                                                                         guile))
                                                                    step-30160)))))))
                                  tmp-30166)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  e1-30140))))))
                      tmp-30143)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      tmp-30142)))))
            tmp-30132)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            orig-x-30130))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((quasi-30451
         (lambda (p-30475 lev-30476)
           (let ((tmp-30478
                   ($sc-dispatch
                     p-30475
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-30203" "l-*-30204"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-30199"
                               "l-*-30197"
                               "l-*-30195"
                               "l-*-30193"
                               "l-*-30191"
                               "l-*-30189"
                               "l-*-30187")))
                           (hygiene guile)))
                       any))))
             (if tmp-30478
               (@apply
                 (lambda (p-30482)
                   (if (= lev-30476 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("l-*-30207"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("l-*-30203" "l-*-30204"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("l-*-30199"
                                  "l-*-30197"
                                  "l-*-30195"
                                  "l-*-30193"
                                  "l-*-30191"
                                  "l-*-30189"
                                  "l-*-30187")))
                              (hygiene guile))
                           p-30482)
                     (quasicons-30453
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("l-*-30207"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-30203" "l-*-30204"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-30199"
                               "l-*-30197"
                               "l-*-30195"
                               "l-*-30193"
                               "l-*-30191"
                               "l-*-30189"
                               "l-*-30187")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("l-*-30207"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-30203" "l-*-30204"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-30199"
                               "l-*-30197"
                               "l-*-30195"
                               "l-*-30193"
                               "l-*-30191"
                               "l-*-30189"
                               "l-*-30187")))
                           (hygiene guile)))
                       (quasi-30451 (list p-30482) (#{1-}# lev-30476)))))
                 tmp-30478)
               (let ((tmp-30485
                       ($sc-dispatch
                         p-30475
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("l-*-30203" "l-*-30204"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("l-*-30199"
                                   "l-*-30197"
                                   "l-*-30195"
                                   "l-*-30193"
                                   "l-*-30191"
                                   "l-*-30189"
                                   "l-*-30187")))
                               (hygiene guile)))
                           any))))
                 (if tmp-30485
                   (@apply
                     (lambda (p-30489)
                       (quasicons-30453
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("l-*-30210"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("l-*-30203" "l-*-30204"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("l-*-30199"
                                 "l-*-30197"
                                 "l-*-30195"
                                 "l-*-30193"
                                 "l-*-30191"
                                 "l-*-30189"
                                 "l-*-30187")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("l-*-30210"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("l-*-30203" "l-*-30204"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("l-*-30199"
                                 "l-*-30197"
                                 "l-*-30195"
                                 "l-*-30193"
                                 "l-*-30191"
                                 "l-*-30189"
                                 "l-*-30187")))
                             (hygiene guile)))
                         (quasi-30451 (list p-30489) (#{1+}# lev-30476))))
                     tmp-30485)
                   (let ((tmp-30492 ($sc-dispatch p-30475 '(any . any))))
                     (if tmp-30492
                       (@apply
                         (lambda (p-30496 q-30497)
                           (let ((tmp-30499
                                   ($sc-dispatch
                                     p-30496
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("l-*-30213" "l-*-30214"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("l-*-30203" "l-*-30204"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("l-*-30199"
                                               "l-*-30197"
                                               "l-*-30195"
                                               "l-*-30193"
                                               "l-*-30191"
                                               "l-*-30189"
                                               "l-*-30187")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if tmp-30499
                               (@apply
                                 (lambda (p-30503)
                                   (if (= lev-30476 0)
                                     (quasilist*-30455
                                       (map (lambda (tmp-30221-30539)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("l-*-30219"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("l-*-30213"
                                                            "l-*-30214"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("l-*-30203"
                                                            "l-*-30204"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-30199"
                                                           "l-*-30197"
                                                           "l-*-30195"
                                                           "l-*-30193"
                                                           "l-*-30191"
                                                           "l-*-30189"
                                                           "l-*-30187")))
                                                       (hygiene guile))
                                                    tmp-30221-30539))
                                            p-30503)
                                       (quasi-30451 q-30497 lev-30476))
                                     (quasicons-30453
                                       (quasicons-30453
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("l-*-30219"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("l-*-30213" "l-*-30214"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("l-*-30203" "l-*-30204"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-30199"
                                                 "l-*-30197"
                                                 "l-*-30195"
                                                 "l-*-30193"
                                                 "l-*-30191"
                                                 "l-*-30189"
                                                 "l-*-30187")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("l-*-30219"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("l-*-30213" "l-*-30214"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("l-*-30203" "l-*-30204"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-30199"
                                                 "l-*-30197"
                                                 "l-*-30195"
                                                 "l-*-30193"
                                                 "l-*-30191"
                                                 "l-*-30189"
                                                 "l-*-30187")))
                                             (hygiene guile)))
                                         (quasi-30451
                                           p-30503
                                           (#{1-}# lev-30476)))
                                       (quasi-30451 q-30497 lev-30476))))
                                 tmp-30499)
                               (let ((tmp-30544
                                       ($sc-dispatch
                                         p-30496
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("l-*-30213" "l-*-30214"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("l-*-30203" "l-*-30204"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-30199"
                                                   "l-*-30197"
                                                   "l-*-30195"
                                                   "l-*-30193"
                                                   "l-*-30191"
                                                   "l-*-30189"
                                                   "l-*-30187")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if tmp-30544
                                   (@apply
                                     (lambda (p-30548)
                                       (if (= lev-30476 0)
                                         (quasiappend-30454
                                           (map (lambda (tmp-30226-30551)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("l-*-30224"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("l-*-30213"
                                                                "l-*-30214"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("l-*-30203"
                                                                "l-*-30204"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-30199"
                                                               "l-*-30197"
                                                               "l-*-30195"
                                                               "l-*-30193"
                                                               "l-*-30191"
                                                               "l-*-30189"
                                                               "l-*-30187")))
                                                           (hygiene guile))
                                                        tmp-30226-30551))
                                                p-30548)
                                           (quasi-30451 q-30497 lev-30476))
                                         (quasicons-30453
                                           (quasicons-30453
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("l-*-30224"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("l-*-30213" "l-*-30214"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("l-*-30203" "l-*-30204"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("l-*-30199"
                                                     "l-*-30197"
                                                     "l-*-30195"
                                                     "l-*-30193"
                                                     "l-*-30191"
                                                     "l-*-30189"
                                                     "l-*-30187")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("l-*-30224"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("l-*-30213" "l-*-30214"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("l-*-30203" "l-*-30204"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("l-*-30199"
                                                     "l-*-30197"
                                                     "l-*-30195"
                                                     "l-*-30193"
                                                     "l-*-30191"
                                                     "l-*-30189"
                                                     "l-*-30187")))
                                                 (hygiene guile)))
                                             (quasi-30451
                                               p-30548
                                               (#{1-}# lev-30476)))
                                           (quasi-30451 q-30497 lev-30476))))
                                     tmp-30544)
                                   (quasicons-30453
                                     (quasi-30451 p-30496 lev-30476)
                                     (quasi-30451 q-30497 lev-30476)))))))
                         tmp-30492)
                       (let ((tmp-30565
                               ($sc-dispatch p-30475 '#(vector each-any))))
                         (if tmp-30565
                           (@apply
                             (lambda (x-30569)
                               (let ((x-30572
                                       (vquasi-30452 x-30569 lev-30476)))
                                 (let ((tmp-30574
                                         ($sc-dispatch
                                           x-30572
                                           '(#(atom "quote") each-any))))
                                   (if tmp-30574
                                     (@apply
                                       (lambda (x-30578)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30325"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30322"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-30199"
                                                      "l-*-30197"
                                                      "l-*-30195"
                                                      "l-*-30193"
                                                      "l-*-30191"
                                                      "l-*-30189"
                                                      "l-*-30187")))
                                                  (hygiene guile))
                                               (list->vector x-30578)))
                                       tmp-30574)
                                     (letrec*
                                       ((f-30580
                                          (lambda (y-30592 k-30593)
                                            (let ((tmp-30595
                                                    ($sc-dispatch
                                                      y-30592
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if tmp-30595
                                                (@apply
                                                  (lambda (y-30598)
                                                    (k-30593
                                                      (map (lambda (tmp-30350-30599)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("l-*-30348"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("l-*-30330"
                                                                           "l-*-30331"
                                                                           "l-*-30332"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("l-*-30328"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("l-*-30322"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("l-*-30199"
                                                                          "l-*-30197"
                                                                          "l-*-30195"
                                                                          "l-*-30193"
                                                                          "l-*-30191"
                                                                          "l-*-30189"
                                                                          "l-*-30187")))
                                                                      (hygiene
                                                                        guile))
                                                                   tmp-30350-30599))
                                                           y-30598)))
                                                  tmp-30595)
                                                (let ((tmp-30600
                                                        ($sc-dispatch
                                                          y-30592
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if tmp-30600
                                                    (@apply
                                                      (lambda (y-30603)
                                                        (k-30593 y-30603))
                                                      tmp-30600)
                                                    (let ((tmp-30604
                                                            ($sc-dispatch
                                                              y-30592
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if tmp-30604
                                                        (@apply
                                                          (lambda (y-30607
                                                                   z-30608)
                                                            (f-30580
                                                              z-30608
                                                              (lambda (ls-30609)
                                                                (k-30593
                                                                  (append
                                                                    y-30607
                                                                    ls-30609)))))
                                                          tmp-30604)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(t-30365)
                                                                    #((m-*-30366
                                                                        top))
                                                                    #("l-*-30369"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("l-*-30363"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("l-*-30330"
                                                                      "l-*-30331"
                                                                      "l-*-30332"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("l-*-30328"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("l-*-30322"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("l-*-30199"
                                                                     "l-*-30197"
                                                                     "l-*-30195"
                                                                     "l-*-30193"
                                                                     "l-*-30191"
                                                                     "l-*-30189"
                                                                     "l-*-30187")))
                                                                 (hygiene
                                                                   guile))
                                                              x-30572))))))))))
                                       (f-30580
                                         x-30572
                                         (lambda (ls-30582)
                                           (let ((tmp-30584
                                                   ($sc-dispatch
                                                     ls-30582
                                                     'each-any)))
                                             (if tmp-30584
                                               (@apply
                                                 (lambda (t-30338-30587)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(t-30338)
                                                               #((m-*-30339
                                                                   top))
                                                               #("l-*-30343"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("l-*-30337"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("l-*-30328"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-30322"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("l-*-30199"
                                                                "l-*-30197"
                                                                "l-*-30195"
                                                                "l-*-30193"
                                                                "l-*-30191"
                                                                "l-*-30189"
                                                                "l-*-30187")))
                                                            (hygiene guile))
                                                         t-30338-30587))
                                                 tmp-30584)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 ls-30582))))))))))
                             tmp-30565)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("l-*-30234"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("l-*-30203" "l-*-30204"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-30199"
                                        "l-*-30197"
                                        "l-*-30195"
                                        "l-*-30193"
                                        "l-*-30191"
                                        "l-*-30189"
                                        "l-*-30187")))
                                    (hygiene guile))
                                 p-30475)))))))))))
       (vquasi-30452
         (lambda (p-30637 lev-30638)
           (let ((tmp-30640 ($sc-dispatch p-30637 '(any . any))))
             (if tmp-30640
               (@apply
                 (lambda (p-30644 q-30645)
                   (let ((tmp-30647
                           ($sc-dispatch
                             p-30644
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("l-*-30242" "l-*-30243"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("l-*-30238" "l-*-30239"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("l-*-30199"
                                       "l-*-30197"
                                       "l-*-30195"
                                       "l-*-30193"
                                       "l-*-30191"
                                       "l-*-30189"
                                       "l-*-30187")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if tmp-30647
                       (@apply
                         (lambda (p-30651)
                           (if (= lev-30638 0)
                             (quasilist*-30455
                               (map (lambda (tmp-30250-30687)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("l-*-30248"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("l-*-30242" "l-*-30243"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("l-*-30238" "l-*-30239"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-30199"
                                                   "l-*-30197"
                                                   "l-*-30195"
                                                   "l-*-30193"
                                                   "l-*-30191"
                                                   "l-*-30189"
                                                   "l-*-30187")))
                                               (hygiene guile))
                                            tmp-30250-30687))
                                    p-30651)
                               (vquasi-30452 q-30645 lev-30638))
                             (quasicons-30453
                               (quasicons-30453
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("l-*-30248"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("l-*-30242" "l-*-30243"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("l-*-30238" "l-*-30239"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("l-*-30199"
                                         "l-*-30197"
                                         "l-*-30195"
                                         "l-*-30193"
                                         "l-*-30191"
                                         "l-*-30189"
                                         "l-*-30187")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("l-*-30248"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("l-*-30242" "l-*-30243"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("l-*-30238" "l-*-30239"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("l-*-30199"
                                         "l-*-30197"
                                         "l-*-30195"
                                         "l-*-30193"
                                         "l-*-30191"
                                         "l-*-30189"
                                         "l-*-30187")))
                                     (hygiene guile)))
                                 (quasi-30451 p-30651 (#{1-}# lev-30638)))
                               (vquasi-30452 q-30645 lev-30638))))
                         tmp-30647)
                       (let ((tmp-30694
                               ($sc-dispatch
                                 p-30644
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("l-*-30242" "l-*-30243"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("l-*-30238" "l-*-30239"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("l-*-30199"
                                           "l-*-30197"
                                           "l-*-30195"
                                           "l-*-30193"
                                           "l-*-30191"
                                           "l-*-30189"
                                           "l-*-30187")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if tmp-30694
                           (@apply
                             (lambda (p-30698)
                               (if (= lev-30638 0)
                                 (quasiappend-30454
                                   (map (lambda (tmp-30255-30701)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("l-*-30253"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("l-*-30242"
                                                        "l-*-30243"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("l-*-30238"
                                                        "l-*-30239"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("l-*-30199"
                                                       "l-*-30197"
                                                       "l-*-30195"
                                                       "l-*-30193"
                                                       "l-*-30191"
                                                       "l-*-30189"
                                                       "l-*-30187")))
                                                   (hygiene guile))
                                                tmp-30255-30701))
                                        p-30698)
                                   (vquasi-30452 q-30645 lev-30638))
                                 (quasicons-30453
                                   (quasicons-30453
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage
                                            #(p)
                                            #((top))
                                            #("l-*-30253"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("l-*-30242" "l-*-30243"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("l-*-30238" "l-*-30239"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-30199"
                                             "l-*-30197"
                                             "l-*-30195"
                                             "l-*-30193"
                                             "l-*-30191"
                                             "l-*-30189"
                                             "l-*-30187")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage
                                            #(p)
                                            #((top))
                                            #("l-*-30253"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("l-*-30242" "l-*-30243"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("l-*-30238" "l-*-30239"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-30199"
                                             "l-*-30197"
                                             "l-*-30195"
                                             "l-*-30193"
                                             "l-*-30191"
                                             "l-*-30189"
                                             "l-*-30187")))
                                         (hygiene guile)))
                                     (quasi-30451 p-30698 (#{1-}# lev-30638)))
                                   (vquasi-30452 q-30645 lev-30638))))
                             tmp-30694)
                           (quasicons-30453
                             (quasi-30451 p-30644 lev-30638)
                             (vquasi-30452 q-30645 lev-30638)))))))
                 tmp-30640)
               (let ((tmp-30719 ($sc-dispatch p-30637 '())))
                 (if tmp-30719
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-30238" "l-*-30239"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-30199"
                               "l-*-30197"
                               "l-*-30195"
                               "l-*-30193"
                               "l-*-30191"
                               "l-*-30189"
                               "l-*-30187")))
                           (hygiene guile))
                         ()))
                     tmp-30719)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     p-30637)))))))
       (quasicons-30453
         (lambda (x-30732 y-30733)
           (let ((tmp-30734 (list x-30732 y-30733)))
             (let ((tmp-30735 ($sc-dispatch tmp-30734 '(any any))))
               (if tmp-30735
                 (@apply
                   (lambda (x-30737 y-30738)
                     (let ((tmp-30740
                             ($sc-dispatch y-30738 '(#(atom "quote") any))))
                       (if tmp-30740
                         (@apply
                           (lambda (dy-30744)
                             (let ((tmp-30746
                                     ($sc-dispatch
                                       x-30737
                                       '(#(atom "quote") any))))
                               (if tmp-30746
                                 (@apply
                                   (lambda (dx-30750)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("l-*-30277"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("l-*-30273"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-30267" "l-*-30268"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-30262" "l-*-30263"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-30199"
                                                  "l-*-30197"
                                                  "l-*-30195"
                                                  "l-*-30193"
                                                  "l-*-30191"
                                                  "l-*-30189"
                                                  "l-*-30187")))
                                              (hygiene guile))
                                           (cons dx-30750 dy-30744)))
                                   tmp-30746)
                                 (if (null? dy-30744)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("l-*-30279"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("l-*-30273"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-30267" "l-*-30268"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-30262" "l-*-30263"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-30199"
                                                "l-*-30197"
                                                "l-*-30195"
                                                "l-*-30193"
                                                "l-*-30191"
                                                "l-*-30189"
                                                "l-*-30187")))
                                            (hygiene guile))
                                         x-30737)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("l-*-30279"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("l-*-30273"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-30267" "l-*-30268"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-30262" "l-*-30263"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-30199"
                                                "l-*-30197"
                                                "l-*-30195"
                                                "l-*-30193"
                                                "l-*-30191"
                                                "l-*-30189"
                                                "l-*-30187")))
                                            (hygiene guile))
                                         x-30737
                                         y-30738)))))
                           tmp-30740)
                         (let ((tmp-30755
                                 ($sc-dispatch
                                   y-30738
                                   '(#(atom "list") . any))))
                           (if tmp-30755
                             (@apply
                               (lambda (stuff-30759)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("l-*-30282"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-30267" "l-*-30268"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-30262" "l-*-30263"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-30199"
                                              "l-*-30197"
                                              "l-*-30195"
                                              "l-*-30193"
                                              "l-*-30191"
                                              "l-*-30189"
                                              "l-*-30187")))
                                          (hygiene guile))
                                       (cons x-30737 stuff-30759)))
                               tmp-30755)
                             (let ((tmp-30760
                                     ($sc-dispatch
                                       y-30738
                                       '(#(atom "list*") . any))))
                               (if tmp-30760
                                 (@apply
                                   (lambda (stuff-30764)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("l-*-30285"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-30267" "l-*-30268"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-30262" "l-*-30263"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-30199"
                                                  "l-*-30197"
                                                  "l-*-30195"
                                                  "l-*-30193"
                                                  "l-*-30191"
                                                  "l-*-30189"
                                                  "l-*-30187")))
                                              (hygiene guile))
                                           (cons x-30737 stuff-30764)))
                                   tmp-30760)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage
                                             #(_)
                                             #((top))
                                             #("l-*-30287"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-30267" "l-*-30268"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-30262" "l-*-30263"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-30199"
                                              "l-*-30197"
                                              "l-*-30195"
                                              "l-*-30193"
                                              "l-*-30191"
                                              "l-*-30189"
                                              "l-*-30187")))
                                          (hygiene guile))
                                       x-30737
                                       y-30738))))))))
                   tmp-30735)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   tmp-30734))))))
       (quasiappend-30454
         (lambda (x-30775 y-30776)
           (let ((tmp-30778
                   ($sc-dispatch y-30776 '(#(atom "quote") ()))))
             (if tmp-30778
               (@apply
                 (lambda ()
                   (if (null? x-30775)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("l-*-30291" "l-*-30292"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("l-*-30199"
                             "l-*-30197"
                             "l-*-30195"
                             "l-*-30193"
                             "l-*-30191"
                             "l-*-30189"
                             "l-*-30187")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr x-30775))
                       (car x-30775)
                       (let ((tmp-30783 ($sc-dispatch x-30775 'each-any)))
                         (if tmp-30783
                           (@apply
                             (lambda (p-30787)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p)
                                           #((top))
                                           #("l-*-30299"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("l-*-30291" "l-*-30292"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("l-*-30199"
                                            "l-*-30197"
                                            "l-*-30195"
                                            "l-*-30193"
                                            "l-*-30191"
                                            "l-*-30189"
                                            "l-*-30187")))
                                        (hygiene guile))
                                     p-30787))
                             tmp-30783)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             x-30775))))))
                 tmp-30778)
               (if (null? x-30775)
                 y-30776
                 (let ((tmp-30795 (list x-30775 y-30776)))
                   (let ((tmp-30796
                           ($sc-dispatch tmp-30795 '(each-any any))))
                     (if tmp-30796
                       (@apply
                         (lambda (p-30798 y-30799)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("l-*-30308" "l-*-30309"))
                                     #(ribcage #(_) #((top)) #("l-*-30302"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("l-*-30291" "l-*-30292"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-30199"
                                        "l-*-30197"
                                        "l-*-30195"
                                        "l-*-30193"
                                        "l-*-30191"
                                        "l-*-30189"
                                        "l-*-30187")))
                                    (hygiene guile))
                                 (append p-30798 (list y-30799))))
                         tmp-30796)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         tmp-30795)))))))))
       (quasilist*-30455
         (lambda (x-30803 y-30804)
           (letrec*
             ((f-30805
                (lambda (x-30894)
                  (if (null? x-30894)
                    y-30804
                    (quasicons-30453
                      (car x-30894)
                      (f-30805 (cdr x-30894)))))))
             (f-30805 x-30803))))
       (emit-30457
         (lambda (x-30897)
           (let ((tmp-30899
                   ($sc-dispatch x-30897 '(#(atom "quote") any))))
             (if tmp-30899
               (@apply
                 (lambda (x-30903)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("l-*-30375"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("l-*-30372"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("l-*-30199"
                                "l-*-30197"
                                "l-*-30195"
                                "l-*-30193"
                                "l-*-30191"
                                "l-*-30189"
                                "l-*-30187")))
                            (hygiene guile))
                         x-30903))
                 tmp-30899)
               (let ((tmp-30904
                       ($sc-dispatch
                         x-30897
                         '(#(atom "list") . each-any))))
                 (if tmp-30904
                   (@apply
                     (lambda (x-30908)
                       (let ((tmp-30909 (map emit-30457 x-30908)))
                         (let ((tmp-30910 ($sc-dispatch tmp-30909 'each-any)))
                           (if tmp-30910
                             (@apply
                               (lambda (t-30380-30912)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(t-30380)
                                             #((m-*-30381 top))
                                             #("l-*-30385"))
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-30378"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-30372"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-30199"
                                              "l-*-30197"
                                              "l-*-30195"
                                              "l-*-30193"
                                              "l-*-30191"
                                              "l-*-30189"
                                              "l-*-30187")))
                                          (hygiene guile))
                                       t-30380-30912))
                               tmp-30910)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               tmp-30909)))))
                     tmp-30904)
                   (let ((tmp-30913
                           ($sc-dispatch
                             x-30897
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if tmp-30913
                       (@apply
                         (lambda (x-30917 y-30918)
                           (letrec*
                             ((f-30919
                                (lambda (x*-30922)
                                  (if (null? x*-30922)
                                    (emit-30457 y-30918)
                                    (let ((tmp-30923
                                            (list (emit-30457 (car x*-30922))
                                                  (f-30919 (cdr x*-30922)))))
                                      (let ((tmp-30924
                                              ($sc-dispatch
                                                tmp-30923
                                                '(any any))))
                                        (if tmp-30924
                                          (@apply
                                            (lambda (t-30400-30926
                                                     t-30399-30927)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(t-30400 t-30399)
                                                          #((m-*-30401 top)
                                                            (m-*-30401 top))
                                                          #("l-*-30405"
                                                            "l-*-30406"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("l-*-30394"
                                                            "l-*-30395"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("l-*-30390"
                                                            "l-*-30391"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("l-*-30372"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-30199"
                                                           "l-*-30197"
                                                           "l-*-30195"
                                                           "l-*-30193"
                                                           "l-*-30191"
                                                           "l-*-30189"
                                                           "l-*-30187")))
                                                       (hygiene guile))
                                                    t-30400-30926
                                                    t-30399-30927))
                                            tmp-30924)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            tmp-30923))))))))
                             (f-30919 x-30917)))
                         tmp-30913)
                       (let ((tmp-30928
                               ($sc-dispatch
                                 x-30897
                                 '(#(atom "append") . each-any))))
                         (if tmp-30928
                           (@apply
                             (lambda (x-30932)
                               (let ((tmp-30933 (map emit-30457 x-30932)))
                                 (let ((tmp-30934
                                         ($sc-dispatch tmp-30933 'each-any)))
                                   (if tmp-30934
                                     (@apply
                                       (lambda (t-30412-30936)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(t-30412)
                                                     #((m-*-30413 top))
                                                     #("l-*-30417"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30410"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30372"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-30199"
                                                      "l-*-30197"
                                                      "l-*-30195"
                                                      "l-*-30193"
                                                      "l-*-30191"
                                                      "l-*-30189"
                                                      "l-*-30187")))
                                                  (hygiene guile))
                                               t-30412-30936))
                                       tmp-30934)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       tmp-30933)))))
                             tmp-30928)
                           (let ((tmp-30937
                                   ($sc-dispatch
                                     x-30897
                                     '(#(atom "vector") . each-any))))
                             (if tmp-30937
                               (@apply
                                 (lambda (x-30941)
                                   (let ((tmp-30942 (map emit-30457 x-30941)))
                                     (let ((tmp-30943
                                             ($sc-dispatch
                                               tmp-30942
                                               'each-any)))
                                       (if tmp-30943
                                         (@apply
                                           (lambda (t-30424-30945)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(t-30424)
                                                         #((m-*-30425 top))
                                                         #("l-*-30429"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-30422"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-30372"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-30199"
                                                          "l-*-30197"
                                                          "l-*-30195"
                                                          "l-*-30193"
                                                          "l-*-30191"
                                                          "l-*-30189"
                                                          "l-*-30187")))
                                                      (hygiene guile))
                                                   t-30424-30945))
                                           tmp-30943)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           tmp-30942)))))
                                 tmp-30937)
                               (let ((tmp-30946
                                       ($sc-dispatch
                                         x-30897
                                         '(#(atom "list->vector") any))))
                                 (if tmp-30946
                                   (@apply
                                     (lambda (x-30950)
                                       (let ((tmp-30951 (emit-30457 x-30950)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(t-30436)
                                                     #((m-*-30437 top))
                                                     #("l-*-30440"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30434"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-30372"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-30199"
                                                      "l-*-30197"
                                                      "l-*-30195"
                                                      "l-*-30193"
                                                      "l-*-30191"
                                                      "l-*-30189"
                                                      "l-*-30187")))
                                                  (hygiene guile))
                                               tmp-30951)))
                                     tmp-30946)
                                   (let ((tmp-30954
                                           ($sc-dispatch
                                             x-30897
                                             '(#(atom "value") any))))
                                     (if tmp-30954
                                       (@apply
                                         (lambda (x-30958) x-30958)
                                         tmp-30954)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         x-30897))))))))))))))))))
      (lambda (x-30458)
        (let ((tmp-30460 ($sc-dispatch x-30458 '(_ any))))
          (if tmp-30460
            (@apply
              (lambda (e-30464)
                (emit-30457 (quasi-30451 e-30464 0)))
              tmp-30460)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              x-30458)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (x-31013)
      (letrec*
        ((read-file-31014
           (lambda (fn-31123 k-31124)
             (let ((p-31125 (open-input-file fn-31123)))
               (letrec*
                 ((f-31126
                    (lambda (x-31180 result-31181)
                      (if (eof-object? x-31180)
                        (begin
                          (close-input-port p-31125)
                          (reverse result-31181))
                        (f-31126
                          (read p-31125)
                          (cons (datum->syntax k-31124 x-31180)
                                result-31181))))))
                 (f-31126 (read p-31125) '()))))))
        (let ((tmp-31016 ($sc-dispatch x-31013 '(any any))))
          (if tmp-31016
            (@apply
              (lambda (k-31020 filename-31021)
                (let ((fn-31022 (syntax->datum filename-31021)))
                  (let ((tmp-31023
                          (read-file-31014 fn-31022 filename-31021)))
                    (let ((tmp-31024 ($sc-dispatch tmp-31023 'each-any)))
                      (if tmp-31024
                        (@apply
                          (lambda (exp-31042)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("l-*-31010"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("l-*-31005"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("l-*-31001" "l-*-31002"))
                                      #(ribcage
                                        (read-file)
                                        ((top))
                                        ("l-*-30985"))
                                      #(ribcage #(x) #((top)) #("l-*-30984")))
                                     (hygiene guile))
                                  exp-31042))
                          tmp-31024)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-31023))))))
              tmp-31016)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              x-31013)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (x-31200)
      (let ((tmp-31202 ($sc-dispatch x-31200 '(any any))))
        (if tmp-31202
          (@apply
            (lambda (k-31206 filename-31207)
              (let ((fn-31208 (syntax->datum filename-31207)))
                (let ((tmp-31209
                        (datum->syntax
                          filename-31207
                          (let ((t-31212 (%search-load-path fn-31208)))
                            (if t-31212
                              t-31212
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                x-31200
                                filename-31207))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("l-*-31194"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("l-*-31190"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("l-*-31186" "l-*-31187"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-31183")))
                           (hygiene guile))
                        tmp-31209))))
            tmp-31202)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-31200))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (x-31221)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        x-31221))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (x-31224)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        x-31224))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (x-31280)
      (let ((tmp-31282
              ($sc-dispatch x-31280 '(_ any any . each-any))))
        (if tmp-31282
          (@apply
            (lambda (e-31286 m1-31287 m2-31288)
              (let ((tmp-31289
                      (letrec*
                        ((f-31331
                           (lambda (clause-31334 clauses-31335)
                             (if (null? clauses-31335)
                               (let ((tmp-31337
                                       ($sc-dispatch
                                         clause-31334
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("l-*-31239"
                                                    "l-*-31240"
                                                    "l-*-31241"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("l-*-31229"
                                                    "l-*-31230"
                                                    "l-*-31231"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("l-*-31226")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if tmp-31337
                                   (@apply
                                     (lambda (e1-31341 e2-31342)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("l-*-31248" "l-*-31249"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("l-*-31239"
                                                     "l-*-31240"
                                                     "l-*-31241"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("l-*-31229"
                                                     "l-*-31230"
                                                     "l-*-31231"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-31226")))
                                                (hygiene guile))
                                             (cons e1-31341 e2-31342)))
                                     tmp-31337)
                                   (let ((tmp-31343
                                           ($sc-dispatch
                                             clause-31334
                                             '(each-any any . each-any))))
                                     (if tmp-31343
                                       (@apply
                                         (lambda (k-31347 e1-31348 e2-31349)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("l-*-31254"
                                                         "l-*-31255"
                                                         "l-*-31256"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("l-*-31239"
                                                         "l-*-31240"
                                                         "l-*-31241"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("l-*-31229"
                                                         "l-*-31230"
                                                         "l-*-31231"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-31226")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31254"
                                                               "l-*-31255"
                                                               "l-*-31256"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31239"
                                                               "l-*-31240"
                                                               "l-*-31241"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31229"
                                                               "l-*-31230"
                                                               "l-*-31231"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-31226")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31254"
                                                               "l-*-31255"
                                                               "l-*-31256"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31239"
                                                               "l-*-31240"
                                                               "l-*-31241"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31229"
                                                               "l-*-31230"
                                                               "l-*-31231"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-31226")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-31254"
                                                                     "l-*-31255"
                                                                     "l-*-31256"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-31239"
                                                                     "l-*-31240"
                                                                     "l-*-31241"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-31229"
                                                                     "l-*-31230"
                                                                     "l-*-31231"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-31226")))
                                                                (hygiene
                                                                  guile))
                                                             k-31347))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31254"
                                                               "l-*-31255"
                                                               "l-*-31256"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31239"
                                                               "l-*-31240"
                                                               "l-*-31241"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31229"
                                                               "l-*-31230"
                                                               "l-*-31231"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-31226")))
                                                          (hygiene guile))
                                                       (cons e1-31348
                                                             e2-31349))))
                                         tmp-31343)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         x-31280
                                         clause-31334)))))
                               (let ((tmp-31357
                                       (f-31331
                                         (car clauses-31335)
                                         (cdr clauses-31335))))
                                 (let ((tmp-31360
                                         ($sc-dispatch
                                           clause-31334
                                           '(each-any any . each-any))))
                                   (if tmp-31360
                                     (@apply
                                       (lambda (k-31364 e1-31365 e2-31366)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("l-*-31270"
                                                       "l-*-31271"
                                                       "l-*-31272"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("l-*-31266"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("l-*-31239"
                                                       "l-*-31240"
                                                       "l-*-31241"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("l-*-31229"
                                                       "l-*-31230"
                                                       "l-*-31231"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-31226")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-31270"
                                                             "l-*-31271"
                                                             "l-*-31272"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-31266"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-31239"
                                                             "l-*-31240"
                                                             "l-*-31241"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-31229"
                                                             "l-*-31230"
                                                             "l-*-31231"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-31226")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-31270"
                                                             "l-*-31271"
                                                             "l-*-31272"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-31266"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-31239"
                                                             "l-*-31240"
                                                             "l-*-31241"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-31229"
                                                             "l-*-31230"
                                                             "l-*-31231"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-31226")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-31270"
                                                                   "l-*-31271"
                                                                   "l-*-31272"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("l-*-31266"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-31239"
                                                                   "l-*-31240"
                                                                   "l-*-31241"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-31229"
                                                                   "l-*-31230"
                                                                   "l-*-31231"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("l-*-31226")))
                                                              (hygiene guile))
                                                           k-31364))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-31270"
                                                             "l-*-31271"
                                                             "l-*-31272"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-31266"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-31239"
                                                             "l-*-31240"
                                                             "l-*-31241"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-31229"
                                                             "l-*-31230"
                                                             "l-*-31231"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-31226")))
                                                        (hygiene guile))
                                                     (cons e1-31365 e2-31366))
                                               tmp-31357))
                                       tmp-31360)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       x-31280
                                       clause-31334))))))))
                        (f-31331 m1-31287 m2-31288))))
                (let ((body-31290 tmp-31289))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("l-*-31237"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("l-*-31229" "l-*-31230" "l-*-31231"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-31226")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(body)
                                          #((top))
                                          #("l-*-31237"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("l-*-31229"
                                            "l-*-31230"
                                            "l-*-31231"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-31226")))
                                       (hygiene guile))
                                    e-31286))
                        body-31290))))
            tmp-31282)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-31280))))))

(define make-variable-transformer
  (lambda (proc-31384)
    (if (procedure? proc-31384)
      (letrec*
        ((trans-31385
           (lambda (x-31391) (proc-31384 x-31391))))
        (begin
          (set-procedure-property!
            trans-31385
            'variable-transformer
            #t)
          trans-31385))
      (error "variable transformer not a procedure"
             proc-31384))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (x-31423)
      (let ((tmp-31425 ($sc-dispatch x-31423 '(_ any))))
        (if tmp-31425
          (@apply
            (lambda (e-31429)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("l-*-31398"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-31395")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("l-*-31398"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("l-*-31395")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("l-*-31398"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-31395")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("l-*-31398"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-31395")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("l-*-31398"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-31395")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("l-*-31398"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-31395")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("l-*-31398"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-31395")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-31398"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31395")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("l-*-31398"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-31395")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("l-*-31398"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-31395")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage
                                            #(e)
                                            #((top))
                                            #("l-*-31398"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-31395")))
                                         (hygiene guile))
                                      e-31429))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-31398"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31395")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-31398"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31395")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-31398"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31395")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage
                                            #(e)
                                            #((top))
                                            #("l-*-31398"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-31395")))
                                         (hygiene guile))
                                      (cons e-31429
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("l-*-31398"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-31395")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("l-*-31398"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-31395")))
                                                (hygiene guile)))))))))
            tmp-31425)
          (let ((tmp-31430
                  ($sc-dispatch
                    x-31423
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-31395")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if tmp-31430
                  (@apply
                    (lambda (id-31434
                             exp1-31435
                             var-31436
                             val-31437
                             exp2-31438)
                      (if (identifier? id-31434)
                        (identifier? var-31436)
                        #f))
                    tmp-31430)
                  #f)
              (@apply
                (lambda (id-31439
                         exp1-31440
                         var-31441
                         val-31442
                         exp2-31443)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("l-*-31413"
                                "l-*-31414"
                                "l-*-31415"
                                "l-*-31416"
                                "l-*-31417"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-31395")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("l-*-31413"
                                      "l-*-31414"
                                      "l-*-31415"
                                      "l-*-31416"
                                      "l-*-31417"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-31395")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("l-*-31413"
                                       "l-*-31414"
                                       "l-*-31415"
                                       "l-*-31416"
                                       "l-*-31417"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("l-*-31395")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("l-*-31413"
                                         "l-*-31414"
                                         "l-*-31415"
                                         "l-*-31416"
                                         "l-*-31417"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31395")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("l-*-31413"
                                         "l-*-31414"
                                         "l-*-31415"
                                         "l-*-31416"
                                         "l-*-31417"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-31395")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-31413"
                                            "l-*-31414"
                                            "l-*-31415"
                                            "l-*-31416"
                                            "l-*-31417"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-31395")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-31413"
                                            "l-*-31414"
                                            "l-*-31415"
                                            "l-*-31416"
                                            "l-*-31417"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-31395")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("l-*-31413"
                                             "l-*-31414"
                                             "l-*-31415"
                                             "l-*-31416"
                                             "l-*-31417"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x)
                                           #((top))
                                           #("l-*-31395")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-31413"
                                                        "l-*-31414"
                                                        "l-*-31415"
                                                        "l-*-31416"
                                                        "l-*-31417"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-31395")))
                                                   (hygiene guile))
                                                var-31441
                                                val-31442)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-31413"
                                                        "l-*-31414"
                                                        "l-*-31415"
                                                        "l-*-31416"
                                                        "l-*-31417"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-31395")))
                                                   (hygiene guile))
                                                exp2-31443))
                                    (list (cons id-31439
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("l-*-31413"
                                                         "l-*-31414"
                                                         "l-*-31415"
                                                         "l-*-31416"
                                                         "l-*-31417"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-31395")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("l-*-31413"
                                                         "l-*-31414"
                                                         "l-*-31415"
                                                         "l-*-31416"
                                                         "l-*-31417"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-31395")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-31413"
                                                        "l-*-31414"
                                                        "l-*-31415"
                                                        "l-*-31416"
                                                        "l-*-31417"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-31395")))
                                                   (hygiene guile))
                                                (cons exp1-31440
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31413"
                                                               "l-*-31414"
                                                               "l-*-31415"
                                                               "l-*-31416"
                                                               "l-*-31417"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-31395")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-31413"
                                                               "l-*-31414"
                                                               "l-*-31415"
                                                               "l-*-31416"
                                                               "l-*-31417"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-31395")))
                                                          (hygiene guile))))))
                                    (list id-31439
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-31413"
                                                        "l-*-31414"
                                                        "l-*-31415"
                                                        "l-*-31416"
                                                        "l-*-31417"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-31395")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-31413"
                                                              "l-*-31414"
                                                              "l-*-31415"
                                                              "l-*-31416"
                                                              "l-*-31417"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("l-*-31395")))
                                                         (hygiene guile))
                                                      id-31439))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-31413"
                                                        "l-*-31414"
                                                        "l-*-31415"
                                                        "l-*-31416"
                                                        "l-*-31417"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-31395")))
                                                   (hygiene guile))
                                                exp1-31440))))))
                tmp-31430)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-31423))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (x-31475)
      (let ((tmp-31477
              ($sc-dispatch
                x-31475
                '(_ (any . any) any . each-any))))
        (if tmp-31477
          (@apply
            (lambda (id-31481 args-31482 b0-31483 b1-31484)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("l-*-31457"
                            "l-*-31458"
                            "l-*-31459"
                            "l-*-31460"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-31454")))
                       (hygiene guile))
                    id-31481
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("l-*-31457"
                                  "l-*-31458"
                                  "l-*-31459"
                                  "l-*-31460"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-31454")))
                             (hygiene guile))
                          (cons args-31482 (cons b0-31483 b1-31484)))))
            tmp-31477)
          (let ((tmp-31485 ($sc-dispatch x-31475 '(_ any any))))
            (if (if tmp-31485
                  (@apply
                    (lambda (id-31489 val-31490)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("l-*-31467" "l-*-31468"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-31454")))
                           (hygiene guile))))
                    tmp-31485)
                  #f)
              (@apply
                (lambda (id-31491 val-31492)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("l-*-31471" "l-*-31472"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-31454")))
                           (hygiene guile))
                        id-31491
                        val-31492))
                tmp-31485)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-31475))))))))

