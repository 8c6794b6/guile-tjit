(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 4273}#
     (lambda (#{x 27469}# #{mod 27470}#)
       (primitive-eval #{x 27469}#)))
   (#{maybe-name-value! 4278}#
     (lambda (#{name 16154}# #{val 16155}#)
       (if (if (struct? #{val 16155}#)
             (eq? (struct-vtable #{val 16155}#)
                  (vector-ref %expanded-vtables 13))
             #f)
         (let ((#{meta 16162}# (struct-ref #{val 16155}# 1)))
           (if (not (assq 'name #{meta 16162}#))
             (let ((#{v 16167}#
                     (cons (cons 'name #{name 16154}#) #{meta 16162}#)))
               (struct-set! #{val 16155}# 1 #{v 16167}#)))))))
   (#{build-application 4280}#
     (lambda (#{source 15879}#
              #{fun-exp 15880}#
              #{arg-exps 15881}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 15879}#
         #{fun-exp 15880}#
         #{arg-exps 15881}#)))
   (#{build-conditional 4281}#
     (lambda (#{source 15887}#
              #{test-exp 15888}#
              #{then-exp 15889}#
              #{else-exp 15890}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 15887}#
         #{test-exp 15888}#
         #{then-exp 15889}#
         #{else-exp 15890}#)))
   (#{build-dynlet 4282}#
     (lambda (#{source 15897}#
              #{fluids 15898}#
              #{vals 15899}#
              #{body 15900}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 17)
         #{source 15897}#
         #{fluids 15898}#
         #{vals 15899}#
         #{body 15900}#)))
   (#{build-lexical-reference 4283}#
     (lambda (#{type 27471}#
              #{source 27472}#
              #{name 27473}#
              #{var 27474}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 27472}#
         #{name 27473}#
         #{var 27474}#)))
   (#{build-lexical-assignment 4284}#
     (lambda (#{source 15907}#
              #{name 15908}#
              #{var 15909}#
              #{exp 15910}#)
       (begin
         (if (if (struct? #{exp 15910}#)
               (eq? (struct-vtable #{exp 15910}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 15926}# (struct-ref #{exp 15910}# 1)))
             (if (not (assq 'name #{meta 15926}#))
               (let ((#{v 15933}#
                       (cons (cons 'name #{name 15908}#) #{meta 15926}#)))
                 (struct-set! #{exp 15910}# 1 #{v 15933}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 15907}#
           #{name 15908}#
           #{var 15909}#
           #{exp 15910}#))))
   (#{analyze-variable 4285}#
     (lambda (#{mod 27480}#
              #{var 27481}#
              #{modref-cont 27482}#
              #{bare-cont 27483}#)
       (if (not #{mod 27480}#)
         (#{bare-cont 27483}# #{var 27481}#)
         (let ((#{kind 27484}# (car #{mod 27480}#))
               (#{mod 27485}# (cdr #{mod 27480}#)))
           (if (eqv? #{kind 27484}# 'public)
             (#{modref-cont 27482}#
               #{mod 27485}#
               #{var 27481}#
               #t)
             (if (eqv? #{kind 27484}# 'private)
               (if (not (equal?
                          #{mod 27485}#
                          (module-name (current-module))))
                 (#{modref-cont 27482}#
                   #{mod 27485}#
                   #{var 27481}#
                   #f)
                 (#{bare-cont 27483}# #{var 27481}#))
               (if (eqv? #{kind 27484}# 'bare)
                 (#{bare-cont 27483}# #{var 27481}#)
                 (if (eqv? #{kind 27484}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 27485}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 27485}#)
                           #{var 27481}#)
                         #f)
                     (#{modref-cont 27482}#
                       #{mod 27485}#
                       #{var 27481}#
                       #f)
                     (#{bare-cont 27483}# #{var 27481}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 27481}#
                     #{mod 27485}#)))))))))
   (#{build-global-reference 4286}#
     (lambda (#{source 27500}# #{var 27501}# #{mod 27502}#)
       (#{analyze-variable 4285}#
         #{mod 27502}#
         #{var 27501}#
         (lambda (#{mod 27505}# #{var 27506}# #{public? 27507}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 27500}#
             #{mod 27505}#
             #{var 27506}#
             #{public? 27507}#))
         (lambda (#{var 27515}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 27500}#
             #{var 27515}#)))))
   (#{build-global-assignment 4287}#
     (lambda (#{source 15942}#
              #{var 15943}#
              #{exp 15944}#
              #{mod 15945}#)
       (begin
         (if (if (struct? #{exp 15944}#)
               (eq? (struct-vtable #{exp 15944}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 15961}# (struct-ref #{exp 15944}# 1)))
             (if (not (assq 'name #{meta 15961}#))
               (let ((#{v 15968}#
                       (cons (cons 'name #{var 15943}#) #{meta 15961}#)))
                 (struct-set! #{exp 15944}# 1 #{v 15968}#)))))
         (#{analyze-variable 4285}#
           #{mod 15945}#
           #{var 15943}#
           (lambda (#{mod 15973}# #{var 15974}# #{public? 15975}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 15942}#
               #{mod 15973}#
               #{var 15974}#
               #{public? 15975}#
               #{exp 15944}#))
           (lambda (#{var 15983}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 15942}#
               #{var 15983}#
               #{exp 15944}#))))))
   (#{build-global-definition 4288}#
     (lambda (#{source 27521}# #{var 27522}# #{exp 27523}#)
       (begin
         (if (if (struct? #{exp 27523}#)
               (eq? (struct-vtable #{exp 27523}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 27539}# (struct-ref #{exp 27523}# 1)))
             (if (not (assq 'name #{meta 27539}#))
               (let ((#{v 27546}#
                       (cons (cons 'name #{var 27522}#) #{meta 27539}#)))
                 (struct-set! #{exp 27523}# 1 #{v 27546}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 27521}#
           #{var 27522}#
           #{exp 27523}#))))
   (#{build-simple-lambda 4289}#
     (lambda (#{src 15989}#
              #{req 15990}#
              #{rest 15991}#
              #{vars 15992}#
              #{meta 15993}#
              #{exp 15994}#)
       (let ((#{body 16000}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 14)
                 #{src 15989}#
                 #{req 15990}#
                 #f
                 #{rest 15991}#
                 #f
                 '()
                 #{vars 15992}#
                 #{exp 15994}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 13)
           #{src 15989}#
           #{meta 15993}#
           #{body 16000}#))))
   (#{build-sequence 4294}#
     (lambda (#{src 27554}# #{exps 27555}#)
       (if (null? (cdr #{exps 27555}#))
         (car #{exps 27555}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 12)
           #{src 27554}#
           #{exps 27555}#))))
   (#{build-let 4295}#
     (lambda (#{src 16012}#
              #{ids 16013}#
              #{vars 16014}#
              #{val-exps 16015}#
              #{body-exp 16016}#)
       (begin
         (for-each
           #{maybe-name-value! 4278}#
           #{ids 16013}#
           #{val-exps 16015}#)
         (if (null? #{vars 16014}#)
           #{body-exp 16016}#
           (make-struct/no-tail
             (vector-ref %expanded-vtables 15)
             #{src 16012}#
             #{ids 16013}#
             #{vars 16014}#
             #{val-exps 16015}#
             #{body-exp 16016}#)))))
   (#{build-named-let 4296}#
     (lambda (#{src 16040}#
              #{ids 16041}#
              #{vars 16042}#
              #{val-exps 16043}#
              #{body-exp 16044}#)
       (let ((#{f 16045}# (car #{vars 16042}#))
             (#{f-name 16046}# (car #{ids 16041}#))
             (#{vars 16047}# (cdr #{vars 16042}#))
             (#{ids 16048}# (cdr #{ids 16041}#)))
         (let ((#{proc 16049}#
                 (let ((#{body 16069}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 14)
                           #{src 16040}#
                           #{ids 16048}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 16047}#
                           #{body-exp 16044}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 13)
                     #{src 16040}#
                     '()
                     #{body 16069}#))))
           (begin
             (if (if (struct? #{proc 16049}#)
                   (eq? (struct-vtable #{proc 16049}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta 16093}# (struct-ref #{proc 16049}# 1)))
                 (if (not (assq 'name #{meta 16093}#))
                   (let ((#{v 16100}#
                           (cons (cons 'name #{f-name 16046}#)
                                 #{meta 16093}#)))
                     (struct-set! #{proc 16049}# 1 #{v 16100}#)))))
             (for-each
               #{maybe-name-value! 4278}#
               #{ids 16048}#
               #{val-exps 16043}#)
             (let ((#{names 16124}# (list #{f-name 16046}#))
                   (#{gensyms 16125}# (list #{f 16045}#))
                   (#{vals 16126}# (list #{proc 16049}#))
                   (#{body 16127}#
                     (let ((#{fun-exp 16131}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 16040}#
                               #{f-name 16046}#
                               #{f 16045}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 16040}#
                         #{fun-exp 16131}#
                         #{val-exps 16043}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 16)
                 #{src 16040}#
                 #f
                 #{names 16124}#
                 #{gensyms 16125}#
                 #{vals 16126}#
                 #{body 16127}#)))))))
   (#{build-letrec 4297}#
     (lambda (#{src 16147}#
              #{in-order? 16148}#
              #{ids 16149}#
              #{vars 16150}#
              #{val-exps 16151}#
              #{body-exp 16152}#)
       (if (null? #{vars 16150}#)
         #{body-exp 16152}#
         (begin
           (for-each
             #{maybe-name-value! 4278}#
             #{ids 16149}#
             #{val-exps 16151}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 16)
             #{src 16147}#
             #{in-order? 16148}#
             #{ids 16149}#
             #{vars 16150}#
             #{val-exps 16151}#
             #{body-exp 16152}#)))))
   (#{source-annotation 4306}#
     (lambda (#{x 16178}#)
       (if (if (vector? #{x 16178}#)
             (if (= (vector-length #{x 16178}#) 4)
               (eq? (vector-ref #{x 16178}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 4306}#
           (vector-ref #{x 16178}# 1))
         (if (pair? #{x 16178}#)
           (let ((#{props 16193}# (source-properties #{x 16178}#)))
             (if (pair? #{props 16193}#) #{props 16193}# #f))
           #f))))
   (#{extend-env 4307}#
     (lambda (#{labels 16195}# #{bindings 16196}# #{r 16197}#)
       (if (null? #{labels 16195}#)
         #{r 16197}#
         (#{extend-env 4307}#
           (cdr #{labels 16195}#)
           (cdr #{bindings 16196}#)
           (cons (cons (car #{labels 16195}#)
                       (car #{bindings 16196}#))
                 #{r 16197}#)))))
   (#{extend-var-env 4308}#
     (lambda (#{labels 16198}# #{vars 16199}# #{r 16200}#)
       (if (null? #{labels 16198}#)
         #{r 16200}#
         (#{extend-var-env 4308}#
           (cdr #{labels 16198}#)
           (cdr #{vars 16199}#)
           (cons (cons (car #{labels 16198}#)
                       (cons 'lexical (car #{vars 16199}#)))
                 #{r 16200}#)))))
   (#{macros-only-env 4309}#
     (lambda (#{r 16201}#)
       (if (null? #{r 16201}#)
         '()
         (let ((#{a 16202}# (car #{r 16201}#)))
           (if (eq? (car (cdr #{a 16202}#)) 'macro)
             (cons #{a 16202}#
                   (#{macros-only-env 4309}# (cdr #{r 16201}#)))
             (#{macros-only-env 4309}# (cdr #{r 16201}#)))))))
   (#{global-extend 4311}#
     (lambda (#{type 16204}# #{sym 16205}# #{val 16206}#)
       (module-define!
         (current-module)
         #{sym 16205}#
         (make-syntax-transformer
           #{sym 16205}#
           #{type 16204}#
           #{val 16206}#))))
   (#{id? 4313}#
     (lambda (#{x 10370}#)
       (if (symbol? #{x 10370}#)
         #t
         (if (if (vector? #{x 10370}#)
               (if (= (vector-length #{x 10370}#) 4)
                 (eq? (vector-ref #{x 10370}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 10370}# 1))
           #f))))
   (#{gen-labels 4316}#
     (lambda (#{ls 16216}#)
       (if (null? #{ls 16216}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 4316}# (cdr #{ls 16216}#))))))
   (#{make-binding-wrap 4327}#
     (lambda (#{ids 16220}# #{labels 16221}# #{w 16222}#)
       (if (null? #{ids 16220}#)
         #{w 16222}#
         (cons (car #{w 16222}#)
               (cons (let ((#{labelvec 16223}#
                             (list->vector #{labels 16221}#)))
                       (let ((#{n 16224}# (vector-length #{labelvec 16223}#)))
                         (let ((#{symnamevec 16225}# (make-vector #{n 16224}#))
                               (#{marksvec 16226}# (make-vector #{n 16224}#)))
                           (begin
                             (letrec*
                               ((#{f 16227}#
                                  (lambda (#{ids 16230}# #{i 16231}#)
                                    (if (not (null? #{ids 16230}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 16234}#
                                                  (car #{ids 16230}#)))
                                            (if (if (vector? #{x 16234}#)
                                                  (if (= (vector-length
                                                           #{x 16234}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 16234}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 16234}# 1)
                                                (let ((#{m1 16250}#
                                                        (car #{w 16222}#))
                                                      (#{m2 16251}#
                                                        (car (vector-ref
                                                               #{x 16234}#
                                                               2))))
                                                  (if (null? #{m2 16251}#)
                                                    #{m1 16250}#
                                                    (append
                                                      #{m1 16250}#
                                                      #{m2 16251}#))))
                                              (values
                                                #{x 16234}#
                                                (car #{w 16222}#)))))
                                        (lambda (#{symname 16271}#
                                                 #{marks 16272}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 16225}#
                                              #{i 16231}#
                                              #{symname 16271}#)
                                            (vector-set!
                                              #{marksvec 16226}#
                                              #{i 16231}#
                                              #{marks 16272}#)
                                            (#{f 16227}#
                                              (cdr #{ids 16230}#)
                                              (#{1+}# #{i 16231}#)))))))))
                               (#{f 16227}# #{ids 16220}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 16225}#
                               #{marksvec 16226}#
                               #{labelvec 16223}#)))))
                     (cdr #{w 16222}#))))))
   (#{join-wraps 4329}#
     (lambda (#{w1 16281}# #{w2 16282}#)
       (let ((#{m1 16283}# (car #{w1 16281}#))
             (#{s1 16284}# (cdr #{w1 16281}#)))
         (if (null? #{m1 16283}#)
           (if (null? #{s1 16284}#)
             #{w2 16282}#
             (cons (car #{w2 16282}#)
                   (let ((#{m2 16291}# (cdr #{w2 16282}#)))
                     (if (null? #{m2 16291}#)
                       #{s1 16284}#
                       (append #{s1 16284}# #{m2 16291}#)))))
           (cons (let ((#{m2 16300}# (car #{w2 16282}#)))
                   (if (null? #{m2 16300}#)
                     #{m1 16283}#
                     (append #{m1 16283}# #{m2 16300}#)))
                 (let ((#{m2 16309}# (cdr #{w2 16282}#)))
                   (if (null? #{m2 16309}#)
                     #{s1 16284}#
                     (append #{s1 16284}# #{m2 16309}#))))))))
   (#{same-marks? 4331}#
     (lambda (#{x 16314}# #{y 16315}#)
       (if (eq? #{x 16314}# #{y 16315}#)
         (eq? #{x 16314}# #{y 16315}#)
         (if (not (null? #{x 16314}#))
           (if (not (null? #{y 16315}#))
             (if (eq? (car #{x 16314}#) (car #{y 16315}#))
               (#{same-marks? 4331}#
                 (cdr #{x 16314}#)
                 (cdr #{y 16315}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 4332}#
     (lambda (#{id 16323}# #{w 16324}#)
       (letrec*
         ((#{search 16325}#
            (lambda (#{sym 16386}# #{subst 16387}# #{marks 16388}#)
              (if (null? #{subst 16387}#)
                (values #f #{marks 16388}#)
                (let ((#{fst 16389}# (car #{subst 16387}#)))
                  (if (eq? #{fst 16389}# 'shift)
                    (#{search 16325}#
                      #{sym 16386}#
                      (cdr #{subst 16387}#)
                      (cdr #{marks 16388}#))
                    (let ((#{symnames 16391}# (vector-ref #{fst 16389}# 1)))
                      (if (vector? #{symnames 16391}#)
                        (let ((#{n 16403}# (vector-length #{symnames 16391}#)))
                          (letrec*
                            ((#{f 16404}#
                               (lambda (#{i 16406}#)
                                 (if (= #{i 16406}# #{n 16403}#)
                                   (#{search 16325}#
                                     #{sym 16386}#
                                     (cdr #{subst 16387}#)
                                     #{marks 16388}#)
                                   (if (if (eq? (vector-ref
                                                  #{symnames 16391}#
                                                  #{i 16406}#)
                                                #{sym 16386}#)
                                         (#{same-marks? 4331}#
                                           #{marks 16388}#
                                           (vector-ref
                                             (vector-ref #{fst 16389}# 2)
                                             #{i 16406}#))
                                         #f)
                                     (values
                                       (vector-ref
                                         (vector-ref #{fst 16389}# 3)
                                         #{i 16406}#)
                                       #{marks 16388}#)
                                     (#{f 16404}# (#{1+}# #{i 16406}#)))))))
                            (#{f 16404}# 0)))
                        (letrec*
                          ((#{f 16439}#
                             (lambda (#{symnames 16441}# #{i 16442}#)
                               (if (null? #{symnames 16441}#)
                                 (#{search 16325}#
                                   #{sym 16386}#
                                   (cdr #{subst 16387}#)
                                   #{marks 16388}#)
                                 (if (if (eq? (car #{symnames 16441}#)
                                              #{sym 16386}#)
                                       (#{same-marks? 4331}#
                                         #{marks 16388}#
                                         (list-ref
                                           (vector-ref #{fst 16389}# 2)
                                           #{i 16442}#))
                                       #f)
                                   (values
                                     (list-ref
                                       (vector-ref #{fst 16389}# 3)
                                       #{i 16442}#)
                                     #{marks 16388}#)
                                   (#{f 16439}#
                                     (cdr #{symnames 16441}#)
                                     (#{1+}# #{i 16442}#)))))))
                          (#{f 16439}# #{symnames 16391}# 0))))))))))
         (if (symbol? #{id 16323}#)
           (let ((#{t 16328}#
                   (#{search 16325}#
                     #{id 16323}#
                     (cdr #{w 16324}#)
                     (car #{w 16324}#))))
             (if #{t 16328}# #{t 16328}# #{id 16323}#))
           (if (if (vector? #{id 16323}#)
                 (if (= (vector-length #{id 16323}#) 4)
                   (eq? (vector-ref #{id 16323}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 16343}# (vector-ref #{id 16323}# 1))
                   (#{w1 16344}# (vector-ref #{id 16323}# 2)))
               (let ((#{marks 16345}#
                       (let ((#{m1 16355}# (car #{w 16324}#))
                             (#{m2 16356}# (car #{w1 16344}#)))
                         (if (null? #{m2 16356}#)
                           #{m1 16355}#
                           (append #{m1 16355}# #{m2 16356}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 16325}#
                       #{id 16343}#
                       (cdr #{w 16324}#)
                       #{marks 16345}#))
                   (lambda (#{new-id 16372}# #{marks 16373}#)
                     (if #{new-id 16372}#
                       #{new-id 16372}#
                       (let ((#{t 16381}#
                               (#{search 16325}#
                                 #{id 16343}#
                                 (cdr #{w1 16344}#)
                                 #{marks 16373}#)))
                         (if #{t 16381}# #{t 16381}# #{id 16343}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 16323}#))))))
   (#{valid-bound-ids? 4335}#
     (lambda (#{ids 16464}#)
       (if (letrec*
             ((#{all-ids? 16465}#
                (lambda (#{ids 16627}#)
                  (if (null? #{ids 16627}#)
                    (null? #{ids 16627}#)
                    (if (let ((#{x 16638}# (car #{ids 16627}#)))
                          (if (symbol? #{x 16638}#)
                            #t
                            (if (if (vector? #{x 16638}#)
                                  (if (= (vector-length #{x 16638}#) 4)
                                    (eq? (vector-ref #{x 16638}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 16638}# 1))
                              #f)))
                      (#{all-ids? 16465}# (cdr #{ids 16627}#))
                      #f)))))
             (#{all-ids? 16465}# #{ids 16464}#))
         (#{distinct-bound-ids? 4336}# #{ids 16464}#)
         #f)))
   (#{distinct-bound-ids? 4336}#
     (lambda (#{ids 16766}#)
       (letrec*
         ((#{distinct? 16767}#
            (lambda (#{ids 16879}#)
              (if (null? #{ids 16879}#)
                (null? #{ids 16879}#)
                (if (not (#{bound-id-member? 4337}#
                           (car #{ids 16879}#)
                           (cdr #{ids 16879}#)))
                  (#{distinct? 16767}# (cdr #{ids 16879}#))
                  #f)))))
         (#{distinct? 16767}# #{ids 16766}#))))
   (#{bound-id-member? 4337}#
     (lambda (#{x 17089}# #{list 17090}#)
       (if (not (null? #{list 17090}#))
         (let ((#{t 17091}#
                 (let ((#{j 17172}# (car #{list 17090}#)))
                   (if (if (if (vector? #{x 17089}#)
                             (if (= (vector-length #{x 17089}#) 4)
                               (eq? (vector-ref #{x 17089}# 0) 'syntax-object)
                               #f)
                             #f)
                         (if (vector? #{j 17172}#)
                           (if (= (vector-length #{j 17172}#) 4)
                             (eq? (vector-ref #{j 17172}# 0) 'syntax-object)
                             #f)
                           #f)
                         #f)
                     (if (eq? (vector-ref #{x 17089}# 1)
                              (vector-ref #{j 17172}# 1))
                       (#{same-marks? 4331}#
                         (car (vector-ref #{x 17089}# 2))
                         (car (vector-ref #{j 17172}# 2)))
                       #f)
                     (eq? #{x 17089}# #{j 17172}#)))))
           (if #{t 17091}#
             #{t 17091}#
             (#{bound-id-member? 4337}#
               #{x 17089}#
               (cdr #{list 17090}#))))
         #f)))
   (#{wrap 4338}#
     (lambda (#{x 17216}# #{w 17217}# #{defmod 17218}#)
       (if (if (null? (car #{w 17217}#))
             (null? (cdr #{w 17217}#))
             #f)
         #{x 17216}#
         (if (if (vector? #{x 17216}#)
               (if (= (vector-length #{x 17216}#) 4)
                 (eq? (vector-ref #{x 17216}# 0) 'syntax-object)
                 #f)
               #f)
           (let ((#{expression 17232}# (vector-ref #{x 17216}# 1))
                 (#{wrap 17233}#
                   (#{join-wraps 4329}#
                     #{w 17217}#
                     (vector-ref #{x 17216}# 2)))
                 (#{module 17234}# (vector-ref #{x 17216}# 3)))
             (vector
               'syntax-object
               #{expression 17232}#
               #{wrap 17233}#
               #{module 17234}#))
           (if (null? #{x 17216}#)
             #{x 17216}#
             (vector
               'syntax-object
               #{x 17216}#
               #{w 17217}#
               #{defmod 17218}#))))))
   (#{source-wrap 4339}#
     (lambda (#{x 17251}#
              #{w 17252}#
              #{s 17253}#
              #{defmod 17254}#)
       (#{wrap 4338}#
         (begin
           (if (if (pair? #{x 17251}#) #{s 17253}# #f)
             (set-source-properties! #{x 17251}# #{s 17253}#))
           #{x 17251}#)
         #{w 17252}#
         #{defmod 17254}#)))
   (#{expand-sequence 4340}#
     (lambda (#{body 27560}#
              #{r 27561}#
              #{w 27562}#
              #{s 27563}#
              #{mod 27564}#)
       (#{build-sequence 4294}#
         #{s 27563}#
         (letrec*
           ((#{dobody 27644}#
              (lambda (#{body 27994}#
                       #{r 27995}#
                       #{w 27996}#
                       #{mod 27997}#)
                (if (null? #{body 27994}#)
                  '()
                  (let ((#{first 27998}#
                          (let ((#{e 28002}# (car #{body 27994}#)))
                            (call-with-values
                              (lambda ()
                                (#{syntax-type 4344}#
                                  #{e 28002}#
                                  #{r 27995}#
                                  #{w 27996}#
                                  (#{source-annotation 4306}# #{e 28002}#)
                                  #f
                                  #{mod 27997}#
                                  #f))
                              (lambda (#{type 28009}#
                                       #{value 28010}#
                                       #{e 28011}#
                                       #{w 28012}#
                                       #{s 28013}#
                                       #{mod 28014}#)
                                (#{expand-expr 4346}#
                                  #{type 28009}#
                                  #{value 28010}#
                                  #{e 28011}#
                                  #{r 27995}#
                                  #{w 28012}#
                                  #{s 28013}#
                                  #{mod 28014}#))))))
                    (cons #{first 27998}#
                          (#{dobody 27644}#
                            (cdr #{body 27994}#)
                            #{r 27995}#
                            #{w 27996}#
                            #{mod 27997}#)))))))
           (#{dobody 27644}#
             #{body 27560}#
             #{r 27561}#
             #{w 27562}#
             #{mod 27564}#)))))
   (#{expand-top-sequence 4341}#
     (lambda (#{body 17272}#
              #{r 17273}#
              #{w 17274}#
              #{s 17275}#
              #{m 17276}#
              #{esew 17277}#
              #{mod 17278}#)
       (letrec*
         ((#{scan 17279}#
            (lambda (#{body 17410}#
                     #{r 17411}#
                     #{w 17412}#
                     #{s 17413}#
                     #{m 17414}#
                     #{esew 17415}#
                     #{mod 17416}#
                     #{exps 17417}#)
              (if (null? #{body 17410}#)
                #{exps 17417}#
                (call-with-values
                  (lambda ()
                    (call-with-values
                      (lambda ()
                        (let ((#{e 17418}# (car #{body 17410}#)))
                          (#{syntax-type 4344}#
                            #{e 17418}#
                            #{r 17411}#
                            #{w 17412}#
                            (let ((#{t 17422}#
                                    (#{source-annotation 4306}# #{e 17418}#)))
                              (if #{t 17422}# #{t 17422}# #{s 17413}#))
                            #f
                            #{mod 17416}#
                            #f)))
                      (lambda (#{type 17657}#
                               #{value 17658}#
                               #{e 17659}#
                               #{w 17660}#
                               #{s 17661}#
                               #{mod 17662}#)
                        (if (eqv? #{type 17657}# 'begin-form)
                          (let ((#{tmp 17667}#
                                  ($sc-dispatch #{e 17659}# '(_))))
                            (if #{tmp 17667}#
                              (@apply (lambda () #{exps 17417}#) #{tmp 17667}#)
                              (let ((#{tmp 17671}#
                                      ($sc-dispatch
                                        #{e 17659}#
                                        '(_ any . each-any))))
                                (if #{tmp 17671}#
                                  (@apply
                                    (lambda (#{e1 17675}# #{e2 17676}#)
                                      (#{scan 17279}#
                                        (cons #{e1 17675}# #{e2 17676}#)
                                        #{r 17411}#
                                        #{w 17660}#
                                        #{s 17661}#
                                        #{m 17414}#
                                        #{esew 17415}#
                                        #{mod 17662}#
                                        #{exps 17417}#))
                                    #{tmp 17671}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 17659}#)))))
                          (if (eqv? #{type 17657}# 'local-syntax-form)
                            (#{expand-local-syntax 4350}#
                              #{value 17658}#
                              #{e 17659}#
                              #{r 17411}#
                              #{w 17660}#
                              #{s 17661}#
                              #{mod 17662}#
                              (lambda (#{body 17691}#
                                       #{r 17692}#
                                       #{w 17693}#
                                       #{s 17694}#
                                       #{mod 17695}#)
                                (#{scan 17279}#
                                  #{body 17691}#
                                  #{r 17692}#
                                  #{w 17693}#
                                  #{s 17694}#
                                  #{m 17414}#
                                  #{esew 17415}#
                                  #{mod 17695}#
                                  #{exps 17417}#)))
                            (if (eqv? #{type 17657}# 'eval-when-form)
                              (let ((#{tmp 17700}#
                                      ($sc-dispatch
                                        #{e 17659}#
                                        '(_ each-any any . each-any))))
                                (if #{tmp 17700}#
                                  (@apply
                                    (lambda (#{x 17704}#
                                             #{e1 17705}#
                                             #{e2 17706}#)
                                      (let ((#{when-list 17707}#
                                              (#{parse-when-list 4343}#
                                                #{e 17659}#
                                                #{x 17704}#))
                                            (#{body 17708}#
                                              (cons #{e1 17705}#
                                                    #{e2 17706}#)))
                                        (if (eq? #{m 17414}# 'e)
                                          (if (memq 'eval #{when-list 17707}#)
                                            (#{scan 17279}#
                                              #{body 17708}#
                                              #{r 17411}#
                                              #{w 17660}#
                                              #{s 17661}#
                                              (if (memq 'expand
                                                        #{when-list 17707}#)
                                                'c&e
                                                'e)
                                              '(eval)
                                              #{mod 17662}#
                                              #{exps 17417}#)
                                            (begin
                                              (if (memq 'expand
                                                        #{when-list 17707}#)
                                                (let ((#{x 17785}#
                                                        (#{expand-top-sequence 4341}#
                                                          #{body 17708}#
                                                          #{r 17411}#
                                                          #{w 17660}#
                                                          #{s 17661}#
                                                          'e
                                                          '(eval)
                                                          #{mod 17662}#)))
                                                  (primitive-eval
                                                    #{x 17785}#)))
                                              (values #{exps 17417}#)))
                                          (if (memq 'load #{when-list 17707}#)
                                            (if (let ((#{t 17811}#
                                                        (memq 'compile
                                                              #{when-list 17707}#)))
                                                  (if #{t 17811}#
                                                    #{t 17811}#
                                                    (let ((#{t 17860}#
                                                            (memq 'expand
                                                                  #{when-list 17707}#)))
                                                      (if #{t 17860}#
                                                        #{t 17860}#
                                                        (if (eq? #{m 17414}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 17707}#)
                                                          #f)))))
                                              (#{scan 17279}#
                                                #{body 17708}#
                                                #{r 17411}#
                                                #{w 17660}#
                                                #{s 17661}#
                                                'c&e
                                                '(compile load)
                                                #{mod 17662}#
                                                #{exps 17417}#)
                                              (if (if (eq? #{m 17414}# 'c)
                                                    #t
                                                    (eq? #{m 17414}# 'c&e))
                                                (#{scan 17279}#
                                                  #{body 17708}#
                                                  #{r 17411}#
                                                  #{w 17660}#
                                                  #{s 17661}#
                                                  'c
                                                  '(load)
                                                  #{mod 17662}#
                                                  #{exps 17417}#)
                                                (values #{exps 17417}#)))
                                            (if (let ((#{t 17989}#
                                                        (memq 'compile
                                                              #{when-list 17707}#)))
                                                  (if #{t 17989}#
                                                    #{t 17989}#
                                                    (let ((#{t 18038}#
                                                            (memq 'expand
                                                                  #{when-list 17707}#)))
                                                      (if #{t 18038}#
                                                        #{t 18038}#
                                                        (if (eq? #{m 17414}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 17707}#)
                                                          #f)))))
                                              (begin
                                                (let ((#{x 18162}#
                                                        (#{expand-top-sequence 4341}#
                                                          #{body 17708}#
                                                          #{r 17411}#
                                                          #{w 17660}#
                                                          #{s 17661}#
                                                          'e
                                                          '(eval)
                                                          #{mod 17662}#)))
                                                  (primitive-eval #{x 18162}#))
                                                (values #{exps 17417}#))
                                              (values #{exps 17417}#))))))
                                    #{tmp 17700}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 17659}#)))
                              (if (if (eqv? #{type 17657}# 'define-syntax-form)
                                    #t
                                    (eqv? #{type 17657}#
                                          'define-syntax-parameter-form))
                                (let ((#{n 18208}#
                                        (#{id-var-name 4332}#
                                          #{value 17658}#
                                          #{w 17660}#))
                                      (#{r 18209}#
                                        (#{macros-only-env 4309}#
                                          #{r 17411}#)))
                                  (if (eqv? #{m 17414}# 'c)
                                    (if (memq 'compile #{esew 17415}#)
                                      (let ((#{e 18213}#
                                              (#{expand-install-global 4342}#
                                                #{n 18208}#
                                                (#{expand 4345}#
                                                  #{e 17659}#
                                                  #{r 18209}#
                                                  #{w 17660}#
                                                  #{mod 17662}#))))
                                        (begin
                                          (#{top-level-eval-hook 4273}#
                                            #{e 18213}#
                                            #{mod 17662}#)
                                          (if (memq 'load #{esew 17415}#)
                                            (values
                                              (cons #{e 18213}#
                                                    #{exps 17417}#))
                                            (values #{exps 17417}#))))
                                      (if (memq 'load #{esew 17415}#)
                                        (values
                                          (cons (#{expand-install-global 4342}#
                                                  #{n 18208}#
                                                  (#{expand 4345}#
                                                    #{e 17659}#
                                                    #{r 18209}#
                                                    #{w 17660}#
                                                    #{mod 17662}#))
                                                #{exps 17417}#))
                                        (values #{exps 17417}#)))
                                    (if (eqv? #{m 17414}# 'c&e)
                                      (let ((#{e 18660}#
                                              (#{expand-install-global 4342}#
                                                #{n 18208}#
                                                (#{expand 4345}#
                                                  #{e 17659}#
                                                  #{r 18209}#
                                                  #{w 17660}#
                                                  #{mod 17662}#))))
                                        (begin
                                          (#{top-level-eval-hook 4273}#
                                            #{e 18660}#
                                            #{mod 17662}#)
                                          (values
                                            (cons #{e 18660}#
                                                  #{exps 17417}#))))
                                      (begin
                                        (if (memq 'eval #{esew 17415}#)
                                          (#{top-level-eval-hook 4273}#
                                            (#{expand-install-global 4342}#
                                              #{n 18208}#
                                              (#{expand 4345}#
                                                #{e 17659}#
                                                #{r 18209}#
                                                #{w 17660}#
                                                #{mod 17662}#))
                                            #{mod 17662}#))
                                        (values #{exps 17417}#)))))
                                (if (eqv? #{type 17657}# 'define-form)
                                  (let ((#{n 19295}#
                                          (#{id-var-name 4332}#
                                            #{value 17658}#
                                            #{w 17660}#)))
                                    (let ((#{type 19296}#
                                            (car (let ((#{t 20040}#
                                                         (assq #{n 19295}#
                                                               #{r 17411}#)))
                                                   (if #{t 20040}#
                                                     (cdr #{t 20040}#)
                                                     (if (symbol? #{n 19295}#)
                                                       (let ((#{t 20045}#
                                                               (begin
                                                                 (if (if (not #{mod 17662}#)
                                                                       (current-module)
                                                                       #f)
                                                                   (warn "module system is booted, we should have a module"
                                                                         #{n 19295}#))
                                                                 (let ((#{v 20082}#
                                                                         (module-variable
                                                                           (if #{mod 17662}#
                                                                             (resolve-module
                                                                               (cdr #{mod 17662}#))
                                                                             (current-module))
                                                                           #{n 19295}#)))
                                                                   (if #{v 20082}#
                                                                     (if (variable-bound?
                                                                           #{v 20082}#)
                                                                       (let ((#{val 20091}#
                                                                               (variable-ref
                                                                                 #{v 20082}#)))
                                                                         (if (macro?
                                                                               #{val 20091}#)
                                                                           (if (macro-type
                                                                                 #{val 20091}#)
                                                                             (cons (macro-type
                                                                                     #{val 20091}#)
                                                                                   (macro-binding
                                                                                     #{val 20091}#))
                                                                             #f)
                                                                           #f))
                                                                       #f)
                                                                     #f)))))
                                                         (if #{t 20045}#
                                                           #{t 20045}#
                                                           '(global)))
                                                       '(displaced-lexical)))))))
                                      (if (let ((#{t 19330}# #{type 19296}#))
                                            (if (eqv? #{t 19330}# 'global)
                                              #t
                                              (if (eqv? #{t 19330}# 'core)
                                                #t
                                                (if (eqv? #{t 19330}# 'macro)
                                                  #t
                                                  (eqv? #{t 19330}#
                                                        'module-ref)))))
                                        (begin
                                          (if (if (if (eq? #{m 17414}# 'c)
                                                    #t
                                                    (eq? #{m 17414}# 'c&e))
                                                (if (not (module-local-variable
                                                           (current-module)
                                                           #{n 19295}#))
                                                  (current-module)
                                                  #f)
                                                #f)
                                            (let ((#{old 19494}#
                                                    (module-variable
                                                      (current-module)
                                                      #{n 19295}#)))
                                              (if (if (variable? #{old 19494}#)
                                                    (variable-bound?
                                                      #{old 19494}#)
                                                    #f)
                                                (module-define!
                                                  (current-module)
                                                  #{n 19295}#
                                                  (variable-ref #{old 19494}#))
                                                (module-add!
                                                  (current-module)
                                                  #{n 19295}#
                                                  (make-undefined-variable)))))
                                          (values
                                            (cons (if (eq? #{m 17414}# 'c&e)
                                                    (let ((#{x 19496}#
                                                            (#{build-global-definition 4288}#
                                                              #{s 17661}#
                                                              #{n 19295}#
                                                              (#{expand 4345}#
                                                                #{e 17659}#
                                                                #{r 17411}#
                                                                #{w 17660}#
                                                                #{mod 17662}#))))
                                                      (begin
                                                        (#{top-level-eval-hook 4273}#
                                                          #{x 19496}#
                                                          #{mod 17662}#)
                                                        #{x 19496}#))
                                                    (lambda ()
                                                      (#{build-global-definition 4288}#
                                                        #{s 17661}#
                                                        #{n 19295}#
                                                        (#{expand 4345}#
                                                          #{e 17659}#
                                                          #{r 17411}#
                                                          #{w 17660}#
                                                          #{mod 17662}#))))
                                                  #{exps 17417}#)))
                                        (if (let ((#{t 19967}# #{type 19296}#))
                                              (eqv? #{t 19967}#
                                                    'displaced-lexical))
                                          (syntax-violation
                                            #f
                                            "identifier out of context"
                                            #{e 17659}#
                                            (#{wrap 4338}#
                                              #{value 17658}#
                                              #{w 17660}#
                                              #{mod 17662}#))
                                          (syntax-violation
                                            #f
                                            "cannot define keyword at top level"
                                            #{e 17659}#
                                            (#{wrap 4338}#
                                              #{value 17658}#
                                              #{w 17660}#
                                              #{mod 17662}#))))))
                                  (values
                                    (cons (if (eq? #{m 17414}# 'c&e)
                                            (let ((#{x 20102}#
                                                    (#{expand-expr 4346}#
                                                      #{type 17657}#
                                                      #{value 17658}#
                                                      #{e 17659}#
                                                      #{r 17411}#
                                                      #{w 17660}#
                                                      #{s 17661}#
                                                      #{mod 17662}#)))
                                              (begin
                                                (primitive-eval #{x 20102}#)
                                                #{x 20102}#))
                                            (lambda ()
                                              (#{expand-expr 4346}#
                                                #{type 17657}#
                                                #{value 17658}#
                                                #{e 17659}#
                                                #{r 17411}#
                                                #{w 17660}#
                                                #{s 17661}#
                                                #{mod 17662}#)))
                                          #{exps 17417}#))))))))))
                  (lambda (#{exps 20111}#)
                    (#{scan 17279}#
                      (cdr #{body 17410}#)
                      #{r 17411}#
                      #{w 17412}#
                      #{s 17413}#
                      #{m 17414}#
                      #{esew 17415}#
                      #{mod 17416}#
                      #{exps 20111}#)))))))
         (call-with-values
           (lambda ()
             (#{scan 17279}#
               #{body 17272}#
               #{r 17273}#
               #{w 17274}#
               #{s 17275}#
               #{m 17276}#
               #{esew 17277}#
               #{mod 17278}#
               '()))
           (lambda (#{exps 17282}#)
             (if (null? #{exps 17282}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 0)
                 #{s 17275}#)
               (#{build-sequence 4294}#
                 #{s 17275}#
                 (letrec*
                   ((#{lp 17322}#
                      (lambda (#{in 17406}# #{out 17407}#)
                        (if (null? #{in 17406}#)
                          #{out 17407}#
                          (let ((#{e 17408}# (car #{in 17406}#)))
                            (#{lp 17322}#
                              (cdr #{in 17406}#)
                              (cons (if (procedure? #{e 17408}#)
                                      (#{e 17408}#)
                                      #{e 17408}#)
                                    #{out 17407}#)))))))
                   (#{lp 17322}# #{exps 17282}# '())))))))))
   (#{expand-install-global 4342}#
     (lambda (#{name 20112}# #{e 20113}#)
       (let ((#{exp 20119}#
               (let ((#{fun-exp 20129}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'make-syntax-transformer)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'make-syntax-transformer
                           #f)))
                     (#{arg-exps 20130}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #{name 20112}#)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               'macro)
                             #{e 20113}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 20129}#
                   #{arg-exps 20130}#))))
         (begin
           (if (if (struct? #{exp 20119}#)
                 (eq? (struct-vtable #{exp 20119}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 20171}# (struct-ref #{exp 20119}# 1)))
               (if (not (assq 'name #{meta 20171}#))
                 (let ((#{v 20178}#
                         (cons (cons 'name #{name 20112}#) #{meta 20171}#)))
                   (struct-set! #{exp 20119}# 1 #{v 20178}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 20112}#
             #{exp 20119}#)))))
   (#{parse-when-list 4343}#
     (lambda (#{e 20189}# #{when-list 20190}#)
       (let ((#{result 20191}#
               (#{strip 4358}# #{when-list 20190}# '(()))))
         (letrec*
           ((#{lp 20192}#
              (lambda (#{l 20246}#)
                (if (null? #{l 20246}#)
                  #{result 20191}#
                  (if (let ((#{t 20248}# (car #{l 20246}#)))
                        (if (eq? #{t 20248}# 'compile)
                          #t
                          (if (eq? #{t 20248}# 'load)
                            #t
                            (if (eq? #{t 20248}# 'eval)
                              #t
                              (eq? #{t 20248}# 'expand)))))
                    (#{lp 20192}# (cdr #{l 20246}#))
                    (syntax-violation
                      'eval-when
                      "invalid situation"
                      #{e 20189}#
                      (car #{l 20246}#)))))))
           (#{lp 20192}# #{result 20191}#)))))
   (#{syntax-type 4344}#
     (lambda (#{e 20250}#
              #{r 20251}#
              #{w 20252}#
              #{s 20253}#
              #{rib 20254}#
              #{mod 20255}#
              #{for-car? 20256}#)
       (if (symbol? #{e 20250}#)
         (let ((#{n 20257}#
                 (#{id-var-name 4332}# #{e 20250}# #{w 20252}#)))
           (let ((#{b 20258}#
                   (let ((#{t 20833}# (assq #{n 20257}# #{r 20251}#)))
                     (if #{t 20833}#
                       (cdr #{t 20833}#)
                       (if (symbol? #{n 20257}#)
                         (let ((#{t 20838}#
                                 (begin
                                   (if (if (not #{mod 20255}#)
                                         (current-module)
                                         #f)
                                     (warn "module system is booted, we should have a module"
                                           #{n 20257}#))
                                   (let ((#{v 20875}#
                                           (module-variable
                                             (if #{mod 20255}#
                                               (resolve-module
                                                 (cdr #{mod 20255}#))
                                               (current-module))
                                             #{n 20257}#)))
                                     (if #{v 20875}#
                                       (if (variable-bound? #{v 20875}#)
                                         (let ((#{val 20884}#
                                                 (variable-ref #{v 20875}#)))
                                           (if (macro? #{val 20884}#)
                                             (if (macro-type #{val 20884}#)
                                               (cons (macro-type #{val 20884}#)
                                                     (macro-binding
                                                       #{val 20884}#))
                                               #f)
                                             #f))
                                         #f)
                                       #f)))))
                           (if #{t 20838}# #{t 20838}# '(global)))
                         '(displaced-lexical))))))
             (let ((#{type 20259}# (car #{b 20258}#)))
               (if (let ((#{t 20293}# #{type 20259}#))
                     (eqv? #{t 20293}# 'lexical))
                 (values
                   #{type 20259}#
                   (cdr #{b 20258}#)
                   #{e 20250}#
                   #{w 20252}#
                   #{s 20253}#
                   #{mod 20255}#)
                 (if (let ((#{t 20450}# #{type 20259}#))
                       (eqv? #{t 20450}# 'global))
                   (values
                     #{type 20259}#
                     #{n 20257}#
                     #{e 20250}#
                     #{w 20252}#
                     #{s 20253}#
                     #{mod 20255}#)
                   (if (let ((#{t 20576}# #{type 20259}#))
                         (eqv? #{t 20576}# 'macro))
                     (if #{for-car? 20256}#
                       (values
                         #{type 20259}#
                         (cdr #{b 20258}#)
                         #{e 20250}#
                         #{w 20252}#
                         #{s 20253}#
                         #{mod 20255}#)
                       (#{syntax-type 4344}#
                         (#{expand-macro 4348}#
                           (cdr #{b 20258}#)
                           #{e 20250}#
                           #{r 20251}#
                           #{w 20252}#
                           #{s 20253}#
                           #{rib 20254}#
                           #{mod 20255}#)
                         #{r 20251}#
                         '(())
                         #{s 20253}#
                         #{rib 20254}#
                         #{mod 20255}#
                         #f))
                     (values
                       #{type 20259}#
                       (cdr #{b 20258}#)
                       #{e 20250}#
                       #{w 20252}#
                       #{s 20253}#
                       #{mod 20255}#)))))))
         (if (pair? #{e 20250}#)
           (let ((#{first 20895}# (car #{e 20250}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 4344}#
                   #{first 20895}#
                   #{r 20251}#
                   #{w 20252}#
                   #{s 20253}#
                   #{rib 20254}#
                   #{mod 20255}#
                   #t))
               (lambda (#{ftype 20897}#
                        #{fval 20898}#
                        #{fe 20899}#
                        #{fw 20900}#
                        #{fs 20901}#
                        #{fmod 20902}#)
                 (if (eqv? #{ftype 20897}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 20898}#
                     #{e 20250}#
                     #{w 20252}#
                     #{s 20253}#
                     #{mod 20255}#)
                   (if (eqv? #{ftype 20897}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 20898}#
                         #{w 20252}#
                         #{fmod 20902}#)
                       #{e 20250}#
                       #{w 20252}#
                       #{s 20253}#
                       #{mod 20255}#)
                     (if (eqv? #{ftype 20897}# 'macro)
                       (#{syntax-type 4344}#
                         (#{expand-macro 4348}#
                           #{fval 20898}#
                           #{e 20250}#
                           #{r 20251}#
                           #{w 20252}#
                           #{s 20253}#
                           #{rib 20254}#
                           #{mod 20255}#)
                         #{r 20251}#
                         '(())
                         #{s 20253}#
                         #{rib 20254}#
                         #{mod 20255}#
                         #{for-car? 20256}#)
                       (if (eqv? #{ftype 20897}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 20898}#
                               #{e 20250}#
                               #{r 20251}#
                               #{w 20252}#))
                           (lambda (#{e 20923}#
                                    #{r 20924}#
                                    #{w 20925}#
                                    #{s 20926}#
                                    #{mod 20927}#)
                             (#{syntax-type 4344}#
                               #{e 20923}#
                               #{r 20924}#
                               #{w 20925}#
                               #{s 20926}#
                               #{rib 20254}#
                               #{mod 20927}#
                               #{for-car? 20256}#)))
                         (if (eqv? #{ftype 20897}# 'core)
                           (values
                             'core-form
                             #{fval 20898}#
                             #{e 20250}#
                             #{w 20252}#
                             #{s 20253}#
                             #{mod 20255}#)
                           (if (eqv? #{ftype 20897}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 20898}#
                               #{e 20250}#
                               #{w 20252}#
                               #{s 20253}#
                               #{mod 20255}#)
                             (if (eqv? #{ftype 20897}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 20250}#
                                 #{w 20252}#
                                 #{s 20253}#
                                 #{mod 20255}#)
                               (if (eqv? #{ftype 20897}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 20250}#
                                   #{w 20252}#
                                   #{s 20253}#
                                   #{mod 20255}#)
                                 (if (eqv? #{ftype 20897}# 'define)
                                   (let ((#{tmp 20944}#
                                           ($sc-dispatch
                                             #{e 20250}#
                                             '(_ any any))))
                                     (if (if #{tmp 20944}#
                                           (@apply
                                             (lambda (#{name 20948}#
                                                      #{val 20949}#)
                                               (if (symbol? #{name 20948}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 20948}#)
                                                       (if (= (vector-length
                                                                #{name 20948}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 20948}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 20948}#
                                                       1))
                                                   #f)))
                                             #{tmp 20944}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 20976}# #{val 20977}#)
                                           (values
                                             'define-form
                                             #{name 20976}#
                                             #{val 20977}#
                                             #{w 20252}#
                                             #{s 20253}#
                                             #{mod 20255}#))
                                         #{tmp 20944}#)
                                       (let ((#{tmp 20978}#
                                               ($sc-dispatch
                                                 #{e 20250}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 20978}#
                                               (@apply
                                                 (lambda (#{name 20982}#
                                                          #{args 20983}#
                                                          #{e1 20984}#
                                                          #{e2 20985}#)
                                                   (if (if (symbol?
                                                             #{name 20982}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 20982}#)
                                                               (if (= (vector-length
                                                                        #{name 20982}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 20982}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 20982}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 4335}#
                                                       (letrec*
                                                         ((#{lvl 21134}#
                                                            (lambda (#{vars 21136}#
                                                                     #{ls 21137}#
                                                                     #{w 21138}#)
                                                              (if (pair? #{vars 21136}#)
                                                                (#{lvl 21134}#
                                                                  (cdr #{vars 21136}#)
                                                                  (cons (#{wrap 4338}#
                                                                          (car #{vars 21136}#)
                                                                          #{w 21138}#
                                                                          #f)
                                                                        #{ls 21137}#)
                                                                  #{w 21138}#)
                                                                (if (if (symbol?
                                                                          #{vars 21136}#)
                                                                      #t
                                                                      (if (if (vector?
                                                                                #{vars 21136}#)
                                                                            (if (= (vector-length
                                                                                     #{vars 21136}#)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     #{vars 21136}#
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (symbol?
                                                                          (vector-ref
                                                                            #{vars 21136}#
                                                                            1))
                                                                        #f))
                                                                  (cons (#{wrap 4338}#
                                                                          #{vars 21136}#
                                                                          #{w 21138}#
                                                                          #f)
                                                                        #{ls 21137}#)
                                                                  (if (null? #{vars 21136}#)
                                                                    #{ls 21137}#
                                                                    (if (if (vector?
                                                                              #{vars 21136}#)
                                                                          (if (= (vector-length
                                                                                   #{vars 21136}#)
                                                                                 4)
                                                                            (eq? (vector-ref
                                                                                   #{vars 21136}#
                                                                                   0)
                                                                                 'syntax-object)
                                                                            #f)
                                                                          #f)
                                                                      (#{lvl 21134}#
                                                                        (vector-ref
                                                                          #{vars 21136}#
                                                                          1)
                                                                        #{ls 21137}#
                                                                        (#{join-wraps 4329}#
                                                                          #{w 21138}#
                                                                          (vector-ref
                                                                            #{vars 21136}#
                                                                            2)))
                                                                      (cons #{vars 21136}#
                                                                            #{ls 21137}#))))))))
                                                         (#{lvl 21134}#
                                                           #{args 20983}#
                                                           '()
                                                           '(()))))
                                                     #f))
                                                 #{tmp 20978}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 21182}#
                                                      #{args 21183}#
                                                      #{e1 21184}#
                                                      #{e2 21185}#)
                                               (values
                                                 'define-form
                                                 (#{wrap 4338}#
                                                   #{name 21182}#
                                                   #{w 20252}#
                                                   #{mod 20255}#)
                                                 (let ((#{e 21191}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1843"
                                                                       "i1844"
                                                                       "i1845"
                                                                       "i1846"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1796"
                                                                       "i1797"
                                                                       "i1798"
                                                                       "i1799"
                                                                       "i1800"
                                                                       "i1801"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i1788"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1760"
                                                                       "i1761"
                                                                       "i1762"
                                                                       "i1763"
                                                                       "i1764"
                                                                       "i1765"
                                                                       "i1766"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-application
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       parse-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i399"
                                                                      "i398"
                                                                      "i396"
                                                                      "i393"
                                                                      "i392"
                                                                      "i391"
                                                                      "i389"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i372"
                                                                      "i369"
                                                                      "i367"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i358"
                                                                      "i357"
                                                                      "i356"
                                                                      "i355"
                                                                      "i353"
                                                                      "i352"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i339"
                                                                      "i337"
                                                                      "i336"
                                                                      "i335"
                                                                      "i333"
                                                                      "i331"
                                                                      "i330"
                                                                      "i327"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i310"
                                                                      "i308"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i261"
                                                                      "i260"
                                                                      "i257"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i252"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i245"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile))
                                                               (#{wrap 4338}#
                                                                 (cons #{args 21183}#
                                                                       (cons #{e1 21184}#
                                                                             #{e2 21185}#))
                                                                 #{w 20252}#
                                                                 #{mod 20255}#))))
                                                   (begin
                                                     (if (if (pair? #{e 21191}#)
                                                           #{s 20253}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 21191}#
                                                         #{s 20253}#))
                                                     #{e 21191}#))
                                                 '(())
                                                 #{s 20253}#
                                                 #{mod 20255}#))
                                             #{tmp 20978}#)
                                           (let ((#{tmp 21198}#
                                                   ($sc-dispatch
                                                     #{e 20250}#
                                                     '(_ any))))
                                             (if (if #{tmp 21198}#
                                                   (@apply
                                                     (lambda (#{name 21202}#)
                                                       (if (symbol?
                                                             #{name 21202}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 21202}#)
                                                               (if (= (vector-length
                                                                        #{name 21202}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 21202}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 21202}#
                                                               1))
                                                           #f)))
                                                     #{tmp 21198}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 21229}#)
                                                   (values
                                                     'define-form
                                                     (#{wrap 4338}#
                                                       #{name 21229}#
                                                       #{w 20252}#
                                                       #{mod 20255}#)
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1856"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1796"
                                                              "i1797"
                                                              "i1798"
                                                              "i1799"
                                                              "i1800"
                                                              "i1801"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1788"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1760"
                                                              "i1761"
                                                              "i1762"
                                                              "i1763"
                                                              "i1764"
                                                              "i1765"
                                                              "i1766"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1856"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1796"
                                                              "i1797"
                                                              "i1798"
                                                              "i1799"
                                                              "i1800"
                                                              "i1801"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1788"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1760"
                                                              "i1761"
                                                              "i1762"
                                                              "i1763"
                                                              "i1764"
                                                              "i1765"
                                                              "i1766"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1856"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1796"
                                                              "i1797"
                                                              "i1798"
                                                              "i1799"
                                                              "i1800"
                                                              "i1801"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1788"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1760"
                                                              "i1761"
                                                              "i1762"
                                                              "i1763"
                                                              "i1764"
                                                              "i1765"
                                                              "i1766"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 20253}#
                                                     #{mod 20255}#))
                                                 #{tmp 21198}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 20250}#)))))))
                                   (if (eqv? #{ftype 20897}# 'define-syntax)
                                     (let ((#{tmp 21248}#
                                             ($sc-dispatch
                                               #{e 20250}#
                                               '(_ any any))))
                                       (if (if #{tmp 21248}#
                                             (@apply
                                               (lambda (#{name 21252}#
                                                        #{val 21253}#)
                                                 (if (symbol? #{name 21252}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 21252}#)
                                                         (if (= (vector-length
                                                                  #{name 21252}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 21252}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 21252}#
                                                         1))
                                                     #f)))
                                               #{tmp 21248}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 21280}#
                                                    #{val 21281}#)
                                             (values
                                               'define-syntax-form
                                               #{name 21280}#
                                               #{val 21281}#
                                               #{w 20252}#
                                               #{s 20253}#
                                               #{mod 20255}#))
                                           #{tmp 21248}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 20250}#)))
                                     (if (eqv? #{ftype 20897}#
                                               'define-syntax-parameter)
                                       (let ((#{tmp 21292}#
                                               ($sc-dispatch
                                                 #{e 20250}#
                                                 '(_ any any))))
                                         (if (if #{tmp 21292}#
                                               (@apply
                                                 (lambda (#{name 21296}#
                                                          #{val 21297}#)
                                                   (if (symbol? #{name 21296}#)
                                                     #t
                                                     (if (if (vector?
                                                               #{name 21296}#)
                                                           (if (= (vector-length
                                                                    #{name 21296}#)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    #{name 21296}#
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           #{name 21296}#
                                                           1))
                                                       #f)))
                                                 #{tmp 21292}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 21324}#
                                                      #{val 21325}#)
                                               (values
                                                 'define-syntax-parameter-form
                                                 #{name 21324}#
                                                 #{val 21325}#
                                                 #{w 20252}#
                                                 #{s 20253}#
                                                 #{mod 20255}#))
                                             #{tmp 21292}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{e 20250}#)))
                                       (values
                                         'call
                                         #f
                                         #{e 20250}#
                                         #{w 20252}#
                                         #{s 20253}#
                                         #{mod 20255}#)))))))))))))))
           (if (if (vector? #{e 20250}#)
                 (if (= (vector-length #{e 20250}#) 4)
                   (eq? (vector-ref #{e 20250}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 4344}#
               (vector-ref #{e 20250}# 1)
               #{r 20251}#
               (#{join-wraps 4329}#
                 #{w 20252}#
                 (vector-ref #{e 20250}# 2))
               (let ((#{t 21352}#
                       (#{source-annotation 4306}# #{e 20250}#)))
                 (if #{t 21352}# #{t 21352}# #{s 20253}#))
               #{rib 20254}#
               (let ((#{t 21587}# (vector-ref #{e 20250}# 3)))
                 (if #{t 21587}# #{t 21587}# #{mod 20255}#))
               #{for-car? 20256}#)
             (if (self-evaluating? #{e 20250}#)
               (values
                 'constant
                 #f
                 #{e 20250}#
                 #{w 20252}#
                 #{s 20253}#
                 #{mod 20255}#)
               (values
                 'other
                 #f
                 #{e 20250}#
                 #{w 20252}#
                 #{s 20253}#
                 #{mod 20255}#)))))))
   (#{expand 4345}#
     (lambda (#{e 21596}#
              #{r 21597}#
              #{w 21598}#
              #{mod 21599}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 4344}#
             #{e 21596}#
             #{r 21597}#
             #{w 21598}#
             (#{source-annotation 4306}# #{e 21596}#)
             #f
             #{mod 21599}#
             #f))
         (lambda (#{type 21754}#
                  #{value 21755}#
                  #{e 21756}#
                  #{w 21757}#
                  #{s 21758}#
                  #{mod 21759}#)
           (#{expand-expr 4346}#
             #{type 21754}#
             #{value 21755}#
             #{e 21756}#
             #{r 21597}#
             #{w 21757}#
             #{s 21758}#
             #{mod 21759}#)))))
   (#{expand-expr 4346}#
     (lambda (#{type 21762}#
              #{value 21763}#
              #{e 21764}#
              #{r 21765}#
              #{w 21766}#
              #{s 21767}#
              #{mod 21768}#)
       (if (eqv? #{type 21762}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 21767}#
           #{e 21764}#
           #{value 21763}#)
         (if (if (eqv? #{type 21762}# 'core)
               #t
               (eqv? #{type 21762}# 'core-form))
           (#{value 21763}#
             #{e 21764}#
             #{r 21765}#
             #{w 21766}#
             #{s 21767}#
             #{mod 21768}#)
           (if (eqv? #{type 21762}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 21763}#
                   #{e 21764}#
                   #{r 21765}#
                   #{w 21766}#))
               (lambda (#{e 21794}#
                        #{r 21795}#
                        #{w 21796}#
                        #{s 21797}#
                        #{mod 21798}#)
                 (#{expand 4345}#
                   #{e 21794}#
                   #{r 21795}#
                   #{w 21796}#
                   #{mod 21798}#)))
             (if (eqv? #{type 21762}# 'lexical-call)
               (#{expand-application 4347}#
                 (let ((#{id 21873}# (car #{e 21764}#)))
                   (#{build-lexical-reference 4283}#
                     'fun
                     (#{source-annotation 4306}# #{id 21873}#)
                     (if (if (vector? #{id 21873}#)
                           (if (= (vector-length #{id 21873}#) 4)
                             (eq? (vector-ref #{id 21873}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 21873}#)
                       #{id 21873}#)
                     #{value 21763}#))
                 #{e 21764}#
                 #{r 21765}#
                 #{w 21766}#
                 #{s 21767}#
                 #{mod 21768}#)
               (if (eqv? #{type 21762}# 'global-call)
                 (#{expand-application 4347}#
                   (#{build-global-reference 4286}#
                     (#{source-annotation 4306}# (car #{e 21764}#))
                     (if (if (vector? #{value 21763}#)
                           (if (= (vector-length #{value 21763}#) 4)
                             (eq? (vector-ref #{value 21763}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 21763}# 1)
                       #{value 21763}#)
                     (if (if (vector? #{value 21763}#)
                           (if (= (vector-length #{value 21763}#) 4)
                             (eq? (vector-ref #{value 21763}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 21763}# 3)
                       #{mod 21768}#))
                   #{e 21764}#
                   #{r 21765}#
                   #{w 21766}#
                   #{s 21767}#
                   #{mod 21768}#)
                 (if (eqv? #{type 21762}# 'constant)
                   (let ((#{exp 22210}#
                           (#{strip 4358}#
                             (#{wrap 4338}#
                               (begin
                                 (if (if (pair? #{e 21764}#) #{s 21767}# #f)
                                   (set-source-properties!
                                     #{e 21764}#
                                     #{s 21767}#))
                                 #{e 21764}#)
                               #{w 21766}#
                               #{mod 21768}#)
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 21767}#
                       #{exp 22210}#))
                   (if (eqv? #{type 21762}# 'global)
                     (#{analyze-variable 4285}#
                       #{mod 21768}#
                       #{value 21763}#
                       (lambda (#{mod 22246}# #{var 22247}# #{public? 22248}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 21767}#
                           #{mod 22246}#
                           #{var 22247}#
                           #{public? 22248}#))
                       (lambda (#{var 22257}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 21767}#
                           #{var 22257}#)))
                     (if (eqv? #{type 21762}# 'call)
                       (#{expand-application 4347}#
                         (#{expand 4345}#
                           (car #{e 21764}#)
                           #{r 21765}#
                           #{w 21766}#
                           #{mod 21768}#)
                         #{e 21764}#
                         #{r 21765}#
                         #{w 21766}#
                         #{s 21767}#
                         #{mod 21768}#)
                       (if (eqv? #{type 21762}# 'begin-form)
                         (let ((#{tmp 22332}#
                                 ($sc-dispatch
                                   #{e 21764}#
                                   '(_ any . each-any))))
                           (if #{tmp 22332}#
                             (@apply
                               (lambda (#{e1 22336}# #{e2 22337}#)
                                 (#{expand-sequence 4340}#
                                   (cons #{e1 22336}# #{e2 22337}#)
                                   #{r 21765}#
                                   #{w 21766}#
                                   #{s 21767}#
                                   #{mod 21768}#))
                               #{tmp 22332}#)
                             (let ((#{tmp 22424}#
                                     ($sc-dispatch #{e 21764}# '(_))))
                               (if #{tmp 22424}#
                                 (@apply
                                   (lambda ()
                                     (if (include-deprecated-features)
                                       (begin
                                         (issue-deprecation-warning
                                           "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))
                                       (syntax-violation
                                         #f
                                         "sequence of zero expressions"
                                         (#{wrap 4338}#
                                           (begin
                                             (if (if (pair? #{e 21764}#)
                                                   #{s 21767}#
                                                   #f)
                                               (set-source-properties!
                                                 #{e 21764}#
                                                 #{s 21767}#))
                                             #{e 21764}#)
                                           #{w 21766}#
                                           #{mod 21768}#))))
                                   #{tmp 22424}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 21764}#)))))
                         (if (eqv? #{type 21762}# 'local-syntax-form)
                           (#{expand-local-syntax 4350}#
                             #{value 21763}#
                             #{e 21764}#
                             #{r 21765}#
                             #{w 21766}#
                             #{s 21767}#
                             #{mod 21768}#
                             #{expand-sequence 4340}#)
                           (if (eqv? #{type 21762}# 'eval-when-form)
                             (let ((#{tmp 22535}#
                                     ($sc-dispatch
                                       #{e 21764}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 22535}#
                                 (@apply
                                   (lambda (#{x 22539}#
                                            #{e1 22540}#
                                            #{e2 22541}#)
                                     (let ((#{when-list 22542}#
                                             (#{parse-when-list 4343}#
                                               #{e 21764}#
                                               #{x 22539}#)))
                                       (if (memq 'eval #{when-list 22542}#)
                                         (#{expand-sequence 4340}#
                                           (cons #{e1 22540}# #{e2 22541}#)
                                           #{r 21765}#
                                           #{w 21766}#
                                           #{s 21767}#
                                           #{mod 21768}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 22535}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 21764}#)))
                             (if (if (eqv? #{type 21762}# 'define-form)
                                   #t
                                   (if (eqv? #{type 21762}#
                                             'define-syntax-form)
                                     #t
                                     (eqv? #{type 21762}#
                                           'define-syntax-parameter-form)))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 21764}#
                                 (#{wrap 4338}#
                                   #{value 21763}#
                                   #{w 21766}#
                                   #{mod 21768}#))
                               (if (eqv? #{type 21762}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (#{wrap 4338}#
                                     (begin
                                       (if (if (pair? #{e 21764}#)
                                             #{s 21767}#
                                             #f)
                                         (set-source-properties!
                                           #{e 21764}#
                                           #{s 21767}#))
                                       #{e 21764}#)
                                     #{w 21766}#
                                     #{mod 21768}#))
                                 (if (eqv? #{type 21762}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (#{wrap 4338}#
                                       (begin
                                         (if (if (pair? #{e 21764}#)
                                               #{s 21767}#
                                               #f)
                                           (set-source-properties!
                                             #{e 21764}#
                                             #{s 21767}#))
                                         #{e 21764}#)
                                       #{w 21766}#
                                       #{mod 21768}#))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (#{wrap 4338}#
                                       (begin
                                         (if (if (pair? #{e 21764}#)
                                               #{s 21767}#
                                               #f)
                                           (set-source-properties!
                                             #{e 21764}#
                                             #{s 21767}#))
                                         #{e 21764}#)
                                       #{w 21766}#
                                       #{mod 21768}#))))))))))))))))))
   (#{expand-application 4347}#
     (lambda (#{x 22782}#
              #{e 22783}#
              #{r 22784}#
              #{w 22785}#
              #{s 22786}#
              #{mod 22787}#)
       (let ((#{tmp 22789}#
               ($sc-dispatch #{e 22783}# '(any . each-any))))
         (if #{tmp 22789}#
           (@apply
             (lambda (#{e0 22793}# #{e1 22794}#)
               (#{build-application 4280}#
                 #{s 22786}#
                 #{x 22782}#
                 (map (lambda (#{e 22874}#)
                        (#{expand 4345}#
                          #{e 22874}#
                          #{r 22784}#
                          #{w 22785}#
                          #{mod 22787}#))
                      #{e1 22794}#)))
             #{tmp 22789}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 22783}#)))))
   (#{expand-macro 4348}#
     (lambda (#{p 22950}#
              #{e 22951}#
              #{r 22952}#
              #{w 22953}#
              #{s 22954}#
              #{rib 22955}#
              #{mod 22956}#)
       (letrec*
         ((#{rebuild-macro-output 22957}#
            (lambda (#{x 22988}# #{m 22989}#)
              (if (pair? #{x 22988}#)
                (let ((#{e 22993}#
                        (cons (#{rebuild-macro-output 22957}#
                                (car #{x 22988}#)
                                #{m 22989}#)
                              (#{rebuild-macro-output 22957}#
                                (cdr #{x 22988}#)
                                #{m 22989}#))))
                  (begin
                    (if (if (pair? #{e 22993}#) #{s 22954}# #f)
                      (set-source-properties! #{e 22993}# #{s 22954}#))
                    #{e 22993}#))
                (if (if (vector? #{x 22988}#)
                      (if (= (vector-length #{x 22988}#) 4)
                        (eq? (vector-ref #{x 22988}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 23009}# (vector-ref #{x 22988}# 2)))
                    (let ((#{ms 23010}# (car #{w 23009}#))
                          (#{s 23011}# (cdr #{w 23009}#)))
                      (if (if (pair? #{ms 23010}#)
                            (eq? (car #{ms 23010}#) #f)
                            #f)
                        (let ((#{expression 23019}# (vector-ref #{x 22988}# 1))
                              (#{wrap 23020}#
                                (cons (cdr #{ms 23010}#)
                                      (if #{rib 22955}#
                                        (cons #{rib 22955}# (cdr #{s 23011}#))
                                        (cdr #{s 23011}#))))
                              (#{module 23021}# (vector-ref #{x 22988}# 3)))
                          (vector
                            'syntax-object
                            #{expression 23019}#
                            #{wrap 23020}#
                            #{module 23021}#))
                        (let ((#{expression 23031}#
                                (let ((#{e 23036}# (vector-ref #{x 22988}# 1)))
                                  (begin
                                    (if (if (pair? #{e 23036}#) #{s 23011}# #f)
                                      (set-source-properties!
                                        #{e 23036}#
                                        #{s 23011}#))
                                    #{e 23036}#)))
                              (#{wrap 23032}#
                                (cons (cons #{m 22989}# #{ms 23010}#)
                                      (if #{rib 22955}#
                                        (cons #{rib 22955}#
                                              (cons 'shift #{s 23011}#))
                                        (cons 'shift #{s 23011}#))))
                              (#{module 23033}# (vector-ref #{x 22988}# 3)))
                          (vector
                            'syntax-object
                            #{expression 23031}#
                            #{wrap 23032}#
                            #{module 23033}#)))))
                  (if (vector? #{x 22988}#)
                    (let ((#{n 23048}# (vector-length #{x 22988}#)))
                      (let ((#{v 23049}#
                              (let ((#{e 23057}# (make-vector #{n 23048}#)))
                                (begin
                                  (if (if (pair? #{e 23057}#) #{x 22988}# #f)
                                    (set-source-properties!
                                      #{e 23057}#
                                      #{x 22988}#))
                                  #{e 23057}#))))
                        (letrec*
                          ((#{loop 23050}#
                             (lambda (#{i 23102}#)
                               (if (= #{i 23102}# #{n 23048}#)
                                 #{v 23049}#
                                 (begin
                                   (vector-set!
                                     #{v 23049}#
                                     #{i 23102}#
                                     (#{rebuild-macro-output 22957}#
                                       (vector-ref #{x 22988}# #{i 23102}#)
                                       #{m 22989}#))
                                   (#{loop 23050}# (#{1+}# #{i 23102}#)))))))
                          (#{loop 23050}# 0))))
                    (if (symbol? #{x 22988}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 23108}# (cdr #{w 22953}#)))
                          (#{wrap 4338}#
                            (begin
                              (if (if (pair? #{e 22951}#) #{s 23108}# #f)
                                (set-source-properties!
                                  #{e 22951}#
                                  #{s 23108}#))
                              #{e 22951}#)
                            #{w 22953}#
                            #{mod 22956}#))
                        #{x 22988}#)
                      (begin
                        (if (if (pair? #{x 22988}#) #{s 22954}# #f)
                          (set-source-properties! #{x 22988}# #{s 22954}#))
                        #{x 22988}#))))))))
         (#{rebuild-macro-output 22957}#
           (#{p 22950}#
             (let ((#{w 22964}#
                     (cons (cons #f (car #{w 22953}#))
                           (cons 'shift (cdr #{w 22953}#)))))
               (#{wrap 4338}#
                 (begin
                   (if (if (pair? #{e 22951}#) #{s 22954}# #f)
                     (set-source-properties! #{e 22951}# #{s 22954}#))
                   #{e 22951}#)
                 #{w 22964}#
                 #{mod 22956}#)))
           (gensym "m")))))
   (#{expand-body 4349}#
     (lambda (#{body 23140}#
              #{outer-form 23141}#
              #{r 23142}#
              #{w 23143}#
              #{mod 23144}#)
       (let ((#{r 23145}#
               (cons '("placeholder" placeholder) #{r 23142}#)))
         (let ((#{ribcage 23146}# (vector 'ribcage '() '() '())))
           (let ((#{w 23147}#
                   (cons (car #{w 23143}#)
                         (cons #{ribcage 23146}# (cdr #{w 23143}#)))))
             (letrec*
               ((#{parse 23148}#
                  (lambda (#{body 23161}#
                           #{ids 23162}#
                           #{labels 23163}#
                           #{var-ids 23164}#
                           #{vars 23165}#
                           #{vals 23166}#
                           #{bindings 23167}#)
                    (if (null? #{body 23161}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 23141}#)
                      (let ((#{e 23168}# (cdr (car #{body 23161}#)))
                            (#{er 23169}# (car (car #{body 23161}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 4344}#
                              #{e 23168}#
                              #{er 23169}#
                              '(())
                              (#{source-annotation 4306}# #{er 23169}#)
                              #{ribcage 23146}#
                              #{mod 23144}#
                              #f))
                          (lambda (#{type 23326}#
                                   #{value 23327}#
                                   #{e 23328}#
                                   #{w 23329}#
                                   #{s 23330}#
                                   #{mod 23331}#)
                            (if (eqv? #{type 23326}# 'define-form)
                              (let ((#{id 23335}#
                                      (#{wrap 4338}#
                                        #{value 23327}#
                                        #{w 23329}#
                                        #{mod 23331}#))
                                    (#{label 23336}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 23337}#
                                        (let ((#{id 23397}#
                                                (if (if (vector? #{id 23335}#)
                                                      (if (= (vector-length
                                                               #{id 23335}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 23335}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 23335}# 1)
                                                  #{id 23335}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 23397}#)
                                              " ")))))
                                  (begin
                                    (let ((#{update 23387}#
                                            (cons (vector-ref #{id 23335}# 1)
                                                  (vector-ref
                                                    #{ribcage 23146}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 23146}#
                                        1
                                        #{update 23387}#))
                                    (let ((#{update 23389}#
                                            (cons (car (vector-ref
                                                         #{id 23335}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 23146}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 23146}#
                                        2
                                        #{update 23389}#))
                                    (let ((#{update 23391}#
                                            (cons #{label 23336}#
                                                  (vector-ref
                                                    #{ribcage 23146}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 23146}#
                                        3
                                        #{update 23391}#))
                                    (#{parse 23148}#
                                      (cdr #{body 23161}#)
                                      (cons #{id 23335}# #{ids 23162}#)
                                      (cons #{label 23336}# #{labels 23163}#)
                                      (cons #{id 23335}# #{var-ids 23164}#)
                                      (cons #{var 23337}# #{vars 23165}#)
                                      (cons (cons #{er 23169}#
                                                  (#{wrap 4338}#
                                                    #{e 23328}#
                                                    #{w 23329}#
                                                    #{mod 23331}#))
                                            #{vals 23166}#)
                                      (cons (cons 'lexical #{var 23337}#)
                                            #{bindings 23167}#)))))
                              (if (if (eqv? #{type 23326}# 'define-syntax-form)
                                    #t
                                    (eqv? #{type 23326}#
                                          'define-syntax-parameter-form))
                                (let ((#{id 23430}#
                                        (#{wrap 4338}#
                                          #{value 23327}#
                                          #{w 23329}#
                                          #{mod 23331}#))
                                      (#{label 23431}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (let ((#{update 23481}#
                                            (cons (vector-ref #{id 23430}# 1)
                                                  (vector-ref
                                                    #{ribcage 23146}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 23146}#
                                        1
                                        #{update 23481}#))
                                    (let ((#{update 23483}#
                                            (cons (car (vector-ref
                                                         #{id 23430}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 23146}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 23146}#
                                        2
                                        #{update 23483}#))
                                    (let ((#{update 23485}#
                                            (cons #{label 23431}#
                                                  (vector-ref
                                                    #{ribcage 23146}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 23146}#
                                        3
                                        #{update 23485}#))
                                    (#{parse 23148}#
                                      (cdr #{body 23161}#)
                                      (cons #{id 23430}# #{ids 23162}#)
                                      (cons #{label 23431}# #{labels 23163}#)
                                      #{var-ids 23164}#
                                      #{vars 23165}#
                                      #{vals 23166}#
                                      (cons (cons 'macro
                                                  (cons #{er 23169}#
                                                        (#{wrap 4338}#
                                                          #{e 23328}#
                                                          #{w 23329}#
                                                          #{mod 23331}#)))
                                            #{bindings 23167}#))))
                                (if (eqv? #{type 23326}# 'begin-form)
                                  (let ((#{tmp 23493}#
                                          ($sc-dispatch
                                            #{e 23328}#
                                            '(_ . each-any))))
                                    (if #{tmp 23493}#
                                      (@apply
                                        (lambda (#{e1 23497}#)
                                          (#{parse 23148}#
                                            (letrec*
                                              ((#{f 23498}#
                                                 (lambda (#{forms 23561}#)
                                                   (if (null? #{forms 23561}#)
                                                     (cdr #{body 23161}#)
                                                     (cons (cons #{er 23169}#
                                                                 (#{wrap 4338}#
                                                                   (car #{forms 23561}#)
                                                                   #{w 23329}#
                                                                   #{mod 23331}#))
                                                           (#{f 23498}#
                                                             (cdr #{forms 23561}#)))))))
                                              (#{f 23498}# #{e1 23497}#))
                                            #{ids 23162}#
                                            #{labels 23163}#
                                            #{var-ids 23164}#
                                            #{vars 23165}#
                                            #{vals 23166}#
                                            #{bindings 23167}#))
                                        #{tmp 23493}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 23328}#)))
                                  (if (eqv? #{type 23326}# 'local-syntax-form)
                                    (#{expand-local-syntax 4350}#
                                      #{value 23327}#
                                      #{e 23328}#
                                      #{er 23169}#
                                      #{w 23329}#
                                      #{s 23330}#
                                      #{mod 23331}#
                                      (lambda (#{forms 23575}#
                                               #{er 23576}#
                                               #{w 23577}#
                                               #{s 23578}#
                                               #{mod 23579}#)
                                        (#{parse 23148}#
                                          (letrec*
                                            ((#{f 23580}#
                                               (lambda (#{forms 23643}#)
                                                 (if (null? #{forms 23643}#)
                                                   (cdr #{body 23161}#)
                                                   (cons (cons #{er 23576}#
                                                               (#{wrap 4338}#
                                                                 (car #{forms 23643}#)
                                                                 #{w 23577}#
                                                                 #{mod 23579}#))
                                                         (#{f 23580}#
                                                           (cdr #{forms 23643}#)))))))
                                            (#{f 23580}# #{forms 23575}#))
                                          #{ids 23162}#
                                          #{labels 23163}#
                                          #{var-ids 23164}#
                                          #{vars 23165}#
                                          #{vals 23166}#
                                          #{bindings 23167}#)))
                                    (if (null? #{ids 23162}#)
                                      (#{build-sequence 4294}#
                                        #f
                                        (map (lambda (#{x 23708}#)
                                               (let ((#{e 23712}#
                                                       (cdr #{x 23708}#))
                                                     (#{r 23713}#
                                                       (car #{x 23708}#)))
                                                 (call-with-values
                                                   (lambda ()
                                                     (#{syntax-type 4344}#
                                                       #{e 23712}#
                                                       #{r 23713}#
                                                       '(())
                                                       (#{source-annotation 4306}#
                                                         #{e 23712}#)
                                                       #f
                                                       #{mod 23331}#
                                                       #f))
                                                   (lambda (#{type 23717}#
                                                            #{value 23718}#
                                                            #{e 23719}#
                                                            #{w 23720}#
                                                            #{s 23721}#
                                                            #{mod 23722}#)
                                                     (#{expand-expr 4346}#
                                                       #{type 23717}#
                                                       #{value 23718}#
                                                       #{e 23719}#
                                                       #{r 23713}#
                                                       #{w 23720}#
                                                       #{s 23721}#
                                                       #{mod 23722}#)))))
                                             (cons (cons #{er 23169}#
                                                         (#{wrap 4338}#
                                                           (begin
                                                             (if (if (pair? #{e 23328}#)
                                                                   #{s 23330}#
                                                                   #f)
                                                               (set-source-properties!
                                                                 #{e 23328}#
                                                                 #{s 23330}#))
                                                             #{e 23328}#)
                                                           #{w 23329}#
                                                           #{mod 23331}#))
                                                   (cdr #{body 23161}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 4335}#
                                                   #{ids 23162}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 23141}#))
                                        (letrec*
                                          ((#{loop 23823}#
                                             (lambda (#{bs 23826}#
                                                      #{er-cache 23827}#
                                                      #{r-cache 23828}#)
                                               (if (not (null? #{bs 23826}#))
                                                 (let ((#{b 23829}#
                                                         (car #{bs 23826}#)))
                                                   (if (eq? (car #{b 23829}#)
                                                            'macro)
                                                     (let ((#{er 23831}#
                                                             (car (cdr #{b 23829}#))))
                                                       (let ((#{r-cache 23832}#
                                                               (if (eq? #{er 23831}#
                                                                        #{er-cache 23827}#)
                                                                 #{r-cache 23828}#
                                                                 (#{macros-only-env 4309}#
                                                                   #{er 23831}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 23829}#
                                                             (#{eval-local-transformer 4351}#
                                                               (#{expand 4345}#
                                                                 (cdr (cdr #{b 23829}#))
                                                                 #{r-cache 23832}#
                                                                 '(())
                                                                 #{mod 23331}#)
                                                               #{mod 23331}#))
                                                           (#{loop 23823}#
                                                             (cdr #{bs 23826}#)
                                                             #{er 23831}#
                                                             #{r-cache 23832}#))))
                                                     (#{loop 23823}#
                                                       (cdr #{bs 23826}#)
                                                       #{er-cache 23827}#
                                                       #{r-cache 23828}#)))))))
                                          (#{loop 23823}#
                                            #{bindings 23167}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 23145}#
                                          (#{extend-env 4307}#
                                            #{labels 23163}#
                                            #{bindings 23167}#
                                            (cdr #{r 23145}#)))
                                        (#{build-letrec 4297}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 23164}#))
                                          (reverse #{vars 23165}#)
                                          (map (lambda (#{x 24175}#)
                                                 (let ((#{e 24179}#
                                                         (cdr #{x 24175}#))
                                                       (#{r 24180}#
                                                         (car #{x 24175}#)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{syntax-type 4344}#
                                                         #{e 24179}#
                                                         #{r 24180}#
                                                         '(())
                                                         (#{source-annotation 4306}#
                                                           #{e 24179}#)
                                                         #f
                                                         #{mod 23331}#
                                                         #f))
                                                     (lambda (#{type 24184}#
                                                              #{value 24185}#
                                                              #{e 24186}#
                                                              #{w 24187}#
                                                              #{s 24188}#
                                                              #{mod 24189}#)
                                                       (#{expand-expr 4346}#
                                                         #{type 24184}#
                                                         #{value 24185}#
                                                         #{e 24186}#
                                                         #{r 24180}#
                                                         #{w 24187}#
                                                         #{s 24188}#
                                                         #{mod 24189}#)))))
                                               (reverse #{vals 23166}#))
                                          (let ((#{exps 24195}#
                                                  (map (lambda (#{x 24196}#)
                                                         (let ((#{e 24199}#
                                                                 (cdr #{x 24196}#))
                                                               (#{r 24200}#
                                                                 (car #{x 24196}#)))
                                                           (call-with-values
                                                             (lambda ()
                                                               (#{syntax-type 4344}#
                                                                 #{e 24199}#
                                                                 #{r 24200}#
                                                                 '(())
                                                                 (#{source-annotation 4306}#
                                                                   #{e 24199}#)
                                                                 #f
                                                                 #{mod 23331}#
                                                                 #f))
                                                             (lambda (#{type 24204}#
                                                                      #{value 24205}#
                                                                      #{e 24206}#
                                                                      #{w 24207}#
                                                                      #{s 24208}#
                                                                      #{mod 24209}#)
                                                               (#{expand-expr 4346}#
                                                                 #{type 24204}#
                                                                 #{value 24205}#
                                                                 #{e 24206}#
                                                                 #{r 24200}#
                                                                 #{w 24207}#
                                                                 #{s 24208}#
                                                                 #{mod 24209}#)))))
                                                       (cons (cons #{er 23169}#
                                                                   (#{wrap 4338}#
                                                                     (begin
                                                                       (if (if (pair? #{e 23328}#)
                                                                             #{s 23330}#
                                                                             #f)
                                                                         (set-source-properties!
                                                                           #{e 23328}#
                                                                           #{s 23330}#))
                                                                       #{e 23328}#)
                                                                     #{w 23329}#
                                                                     #{mod 23331}#))
                                                             (cdr #{body 23161}#)))))
                                            (if (null? (cdr #{exps 24195}#))
                                              (car #{exps 24195}#)
                                              (make-struct/no-tail
                                                (vector-ref
                                                  %expanded-vtables
                                                  12)
                                                #f
                                                #{exps 24195}#)))))))))))))))))
               (#{parse 23148}#
                 (map (lambda (#{x 23151}#)
                        (cons #{r 23145}#
                              (#{wrap 4338}#
                                #{x 23151}#
                                #{w 23147}#
                                #{mod 23144}#)))
                      #{body 23140}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{expand-local-syntax 4350}#
     (lambda (#{rec? 24235}#
              #{e 24236}#
              #{r 24237}#
              #{w 24238}#
              #{s 24239}#
              #{mod 24240}#
              #{k 24241}#)
       (let ((#{tmp 24243}#
               ($sc-dispatch
                 #{e 24236}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 24243}#
           (@apply
             (lambda (#{id 24247}#
                      #{val 24248}#
                      #{e1 24249}#
                      #{e2 24250}#)
               (if (not (#{valid-bound-ids? 4335}# #{id 24247}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 24236}#)
                 (let ((#{labels 24340}#
                         (#{gen-labels 4316}# #{id 24247}#)))
                   (let ((#{new-w 24341}#
                           (#{make-binding-wrap 4327}#
                             #{id 24247}#
                             #{labels 24340}#
                             #{w 24238}#)))
                     (#{k 24241}#
                       (cons #{e1 24249}# #{e2 24250}#)
                       (#{extend-env 4307}#
                         #{labels 24340}#
                         (let ((#{trans-r 24379}#
                                 (#{macros-only-env 4309}# #{r 24237}#)))
                           (begin
                             (if #{rec? 24235}# #{new-w 24341}# #{w 24238}#)
                             (map (lambda (#{x 24380}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 4351}#
                                            (#{expand 4345}#
                                              #{x 24380}#
                                              #{trans-r 24379}#
                                              (values
                                                (if #{rec? 24235}#
                                                  #{new-w 24341}#
                                                  #{w 24238}#))
                                              #{mod 24240}#)
                                            #{mod 24240}#)))
                                  #{val 24248}#)))
                         #{r 24237}#)
                       #{new-w 24341}#
                       #{s 24239}#
                       #{mod 24240}#)))))
             #{tmp 24243}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (#{wrap 4338}#
               (begin
                 (if (if (pair? #{e 24236}#) #{s 24239}# #f)
                   (set-source-properties! #{e 24236}# #{s 24239}#))
                 #{e 24236}#)
               #{w 24238}#
               #{mod 24240}#))))))
   (#{eval-local-transformer 4351}#
     (lambda (#{expanded 24676}# #{mod 24677}#)
       (let ((#{p 24678}# (primitive-eval #{expanded 24676}#)))
         (if (procedure? #{p 24678}#)
           #{p 24678}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 24678}#)))))
   (#{ellipsis? 4353}#
     (lambda (#{x 5154}#)
       (if (if (if (vector? #{x 5154}#)
                 (if (= (vector-length #{x 5154}#) 4)
                   (eq? (vector-ref #{x 5154}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 5154}# 1))
             #f)
         (if (eq? (if (if (vector? #{x 5154}#)
                        (if (= (vector-length #{x 5154}#) 4)
                          (eq? (vector-ref #{x 5154}# 0) 'syntax-object)
                          #f)
                        #f)
                    (vector-ref #{x 5154}# 1)
                    #{x 5154}#)
                  (if (if (= (vector-length
                               '#(syntax-object
                                  ...
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i2230"))
                                   #(ribcage
                                     (lambda-var-list
                                       gen-var
                                       strip
                                       expand-lambda-case
                                       lambda*-formals
                                       expand-simple-lambda
                                       lambda-formals
                                       ellipsis?
                                       expand-void
                                       eval-local-transformer
                                       expand-local-syntax
                                       expand-body
                                       expand-macro
                                       expand-application
                                       expand-expr
                                       expand
                                       syntax-type
                                       parse-when-list
                                       expand-install-global
                                       expand-top-sequence
                                       expand-sequence
                                       source-wrap
                                       wrap
                                       bound-id-member?
                                       distinct-bound-ids?
                                       valid-bound-ids?
                                       bound-id=?
                                       free-id=?
                                       id-var-name
                                       same-marks?
                                       join-marks
                                       join-wraps
                                       smart-append
                                       make-binding-wrap
                                       extend-ribcage!
                                       make-empty-ribcage
                                       new-mark
                                       anti-mark
                                       the-anti-mark
                                       top-marked?
                                       top-wrap
                                       empty-wrap
                                       set-ribcage-labels!
                                       set-ribcage-marks!
                                       set-ribcage-symnames!
                                       ribcage-labels
                                       ribcage-marks
                                       ribcage-symnames
                                       ribcage?
                                       make-ribcage
                                       gen-labels
                                       gen-label
                                       make-rename
                                       rename-marks
                                       rename-new
                                       rename-old
                                       subst-rename?
                                       wrap-subst
                                       wrap-marks
                                       make-wrap
                                       id-sym-name&marks
                                       id-sym-name
                                       id?
                                       nonsymbol-id?
                                       global-extend
                                       lookup
                                       macros-only-env
                                       extend-var-env
                                       extend-env
                                       null-env
                                       binding-value
                                       binding-type
                                       make-binding
                                       arg-check
                                       source-annotation
                                       no-source
                                       set-syntax-object-module!
                                       set-syntax-object-wrap!
                                       set-syntax-object-expression!
                                       syntax-object-module
                                       syntax-object-wrap
                                       syntax-object-expression
                                       syntax-object?
                                       make-syntax-object
                                       build-lexical-var
                                       build-letrec
                                       build-named-let
                                       build-let
                                       build-sequence
                                       build-data
                                       build-primref
                                       build-lambda-case
                                       build-case-lambda
                                       build-simple-lambda
                                       build-global-definition
                                       build-global-assignment
                                       build-global-reference
                                       analyze-variable
                                       build-lexical-assignment
                                       build-lexical-reference
                                       build-dynlet
                                       build-conditional
                                       build-application
                                       build-void
                                       maybe-name-value!
                                       decorate-source
                                       get-global-definition-hook
                                       put-global-definition-hook
                                       gensym-hook
                                       local-eval-hook
                                       top-level-eval-hook
                                       fx<
                                       fx=
                                       fx-
                                       fx+
                                       set-lambda-meta!
                                       lambda-meta
                                       lambda?
                                       make-dynlet
                                       make-letrec
                                       make-let
                                       make-lambda-case
                                       make-lambda
                                       make-sequence
                                       make-application
                                       make-conditional
                                       make-toplevel-define
                                       make-toplevel-set
                                       make-toplevel-ref
                                       make-module-set
                                       make-module-ref
                                       make-lexical-set
                                       make-lexical-ref
                                       make-primitive-ref
                                       make-const
                                       make-void)
                                     ((top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top))
                                     ("i467"
                                      "i465"
                                      "i463"
                                      "i461"
                                      "i459"
                                      "i457"
                                      "i455"
                                      "i453"
                                      "i451"
                                      "i449"
                                      "i447"
                                      "i445"
                                      "i443"
                                      "i441"
                                      "i439"
                                      "i437"
                                      "i435"
                                      "i433"
                                      "i431"
                                      "i429"
                                      "i427"
                                      "i425"
                                      "i423"
                                      "i421"
                                      "i419"
                                      "i417"
                                      "i415"
                                      "i413"
                                      "i411"
                                      "i409"
                                      "i407"
                                      "i405"
                                      "i403"
                                      "i401"
                                      "i399"
                                      "i398"
                                      "i396"
                                      "i393"
                                      "i392"
                                      "i391"
                                      "i389"
                                      "i388"
                                      "i386"
                                      "i384"
                                      "i382"
                                      "i380"
                                      "i378"
                                      "i376"
                                      "i374"
                                      "i372"
                                      "i369"
                                      "i367"
                                      "i366"
                                      "i364"
                                      "i362"
                                      "i360"
                                      "i358"
                                      "i357"
                                      "i356"
                                      "i355"
                                      "i353"
                                      "i352"
                                      "i349"
                                      "i347"
                                      "i345"
                                      "i343"
                                      "i341"
                                      "i339"
                                      "i337"
                                      "i336"
                                      "i335"
                                      "i333"
                                      "i331"
                                      "i330"
                                      "i327"
                                      "i326"
                                      "i324"
                                      "i322"
                                      "i320"
                                      "i318"
                                      "i316"
                                      "i314"
                                      "i312"
                                      "i310"
                                      "i308"
                                      "i305"
                                      "i303"
                                      "i301"
                                      "i299"
                                      "i297"
                                      "i295"
                                      "i293"
                                      "i291"
                                      "i289"
                                      "i287"
                                      "i285"
                                      "i283"
                                      "i281"
                                      "i279"
                                      "i277"
                                      "i275"
                                      "i273"
                                      "i271"
                                      "i269"
                                      "i267"
                                      "i265"
                                      "i263"
                                      "i261"
                                      "i260"
                                      "i257"
                                      "i255"
                                      "i254"
                                      "i253"
                                      "i252"
                                      "i251"
                                      "i249"
                                      "i247"
                                      "i245"
                                      "i242"
                                      "i240"
                                      "i238"
                                      "i236"
                                      "i234"
                                      "i232"
                                      "i230"
                                      "i228"
                                      "i226"
                                      "i224"
                                      "i222"
                                      "i220"
                                      "i218"
                                      "i216"
                                      "i214"
                                      "i212"
                                      "i210"
                                      "i208"))
                                   #(ribcage
                                     (define-structure
                                       define-expansion-accessors
                                       define-expansion-constructors)
                                     ((top) (top) (top))
                                     ("i46" "i45" "i44")))
                                  (hygiene guile)))
                             4)
                        #t
                        #f)
                    '...
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i2230"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("i467"
                           "i465"
                           "i463"
                           "i461"
                           "i459"
                           "i457"
                           "i455"
                           "i453"
                           "i451"
                           "i449"
                           "i447"
                           "i445"
                           "i443"
                           "i441"
                           "i439"
                           "i437"
                           "i435"
                           "i433"
                           "i431"
                           "i429"
                           "i427"
                           "i425"
                           "i423"
                           "i421"
                           "i419"
                           "i417"
                           "i415"
                           "i413"
                           "i411"
                           "i409"
                           "i407"
                           "i405"
                           "i403"
                           "i401"
                           "i399"
                           "i398"
                           "i396"
                           "i393"
                           "i392"
                           "i391"
                           "i389"
                           "i388"
                           "i386"
                           "i384"
                           "i382"
                           "i380"
                           "i378"
                           "i376"
                           "i374"
                           "i372"
                           "i369"
                           "i367"
                           "i366"
                           "i364"
                           "i362"
                           "i360"
                           "i358"
                           "i357"
                           "i356"
                           "i355"
                           "i353"
                           "i352"
                           "i349"
                           "i347"
                           "i345"
                           "i343"
                           "i341"
                           "i339"
                           "i337"
                           "i336"
                           "i335"
                           "i333"
                           "i331"
                           "i330"
                           "i327"
                           "i326"
                           "i324"
                           "i322"
                           "i320"
                           "i318"
                           "i316"
                           "i314"
                           "i312"
                           "i310"
                           "i308"
                           "i305"
                           "i303"
                           "i301"
                           "i299"
                           "i297"
                           "i295"
                           "i293"
                           "i291"
                           "i289"
                           "i287"
                           "i285"
                           "i283"
                           "i281"
                           "i279"
                           "i277"
                           "i275"
                           "i273"
                           "i271"
                           "i269"
                           "i267"
                           "i265"
                           "i263"
                           "i261"
                           "i260"
                           "i257"
                           "i255"
                           "i254"
                           "i253"
                           "i252"
                           "i251"
                           "i249"
                           "i247"
                           "i245"
                           "i242"
                           "i240"
                           "i238"
                           "i236"
                           "i234"
                           "i232"
                           "i230"
                           "i228"
                           "i226"
                           "i224"
                           "i222"
                           "i220"
                           "i218"
                           "i216"
                           "i214"
                           "i212"
                           "i210"
                           "i208"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("i46" "i45" "i44")))
                       (hygiene guile))))
           (eq? (#{id-var-name 4332}# #{x 5154}# '(()))
                (#{id-var-name 4332}#
                  '#(syntax-object
                     ...
                     ((top)
                      #(ribcage () () ())
                      #(ribcage () () ())
                      #(ribcage #(x) #((top)) #("i2230"))
                      #(ribcage
                        (lambda-var-list
                          gen-var
                          strip
                          expand-lambda-case
                          lambda*-formals
                          expand-simple-lambda
                          lambda-formals
                          ellipsis?
                          expand-void
                          eval-local-transformer
                          expand-local-syntax
                          expand-body
                          expand-macro
                          expand-application
                          expand-expr
                          expand
                          syntax-type
                          parse-when-list
                          expand-install-global
                          expand-top-sequence
                          expand-sequence
                          source-wrap
                          wrap
                          bound-id-member?
                          distinct-bound-ids?
                          valid-bound-ids?
                          bound-id=?
                          free-id=?
                          id-var-name
                          same-marks?
                          join-marks
                          join-wraps
                          smart-append
                          make-binding-wrap
                          extend-ribcage!
                          make-empty-ribcage
                          new-mark
                          anti-mark
                          the-anti-mark
                          top-marked?
                          top-wrap
                          empty-wrap
                          set-ribcage-labels!
                          set-ribcage-marks!
                          set-ribcage-symnames!
                          ribcage-labels
                          ribcage-marks
                          ribcage-symnames
                          ribcage?
                          make-ribcage
                          gen-labels
                          gen-label
                          make-rename
                          rename-marks
                          rename-new
                          rename-old
                          subst-rename?
                          wrap-subst
                          wrap-marks
                          make-wrap
                          id-sym-name&marks
                          id-sym-name
                          id?
                          nonsymbol-id?
                          global-extend
                          lookup
                          macros-only-env
                          extend-var-env
                          extend-env
                          null-env
                          binding-value
                          binding-type
                          make-binding
                          arg-check
                          source-annotation
                          no-source
                          set-syntax-object-module!
                          set-syntax-object-wrap!
                          set-syntax-object-expression!
                          syntax-object-module
                          syntax-object-wrap
                          syntax-object-expression
                          syntax-object?
                          make-syntax-object
                          build-lexical-var
                          build-letrec
                          build-named-let
                          build-let
                          build-sequence
                          build-data
                          build-primref
                          build-lambda-case
                          build-case-lambda
                          build-simple-lambda
                          build-global-definition
                          build-global-assignment
                          build-global-reference
                          analyze-variable
                          build-lexical-assignment
                          build-lexical-reference
                          build-dynlet
                          build-conditional
                          build-application
                          build-void
                          maybe-name-value!
                          decorate-source
                          get-global-definition-hook
                          put-global-definition-hook
                          gensym-hook
                          local-eval-hook
                          top-level-eval-hook
                          fx<
                          fx=
                          fx-
                          fx+
                          set-lambda-meta!
                          lambda-meta
                          lambda?
                          make-dynlet
                          make-letrec
                          make-let
                          make-lambda-case
                          make-lambda
                          make-sequence
                          make-application
                          make-conditional
                          make-toplevel-define
                          make-toplevel-set
                          make-toplevel-ref
                          make-module-set
                          make-module-ref
                          make-lexical-set
                          make-lexical-ref
                          make-primitive-ref
                          make-const
                          make-void)
                        ((top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top))
                        ("i467"
                         "i465"
                         "i463"
                         "i461"
                         "i459"
                         "i457"
                         "i455"
                         "i453"
                         "i451"
                         "i449"
                         "i447"
                         "i445"
                         "i443"
                         "i441"
                         "i439"
                         "i437"
                         "i435"
                         "i433"
                         "i431"
                         "i429"
                         "i427"
                         "i425"
                         "i423"
                         "i421"
                         "i419"
                         "i417"
                         "i415"
                         "i413"
                         "i411"
                         "i409"
                         "i407"
                         "i405"
                         "i403"
                         "i401"
                         "i399"
                         "i398"
                         "i396"
                         "i393"
                         "i392"
                         "i391"
                         "i389"
                         "i388"
                         "i386"
                         "i384"
                         "i382"
                         "i380"
                         "i378"
                         "i376"
                         "i374"
                         "i372"
                         "i369"
                         "i367"
                         "i366"
                         "i364"
                         "i362"
                         "i360"
                         "i358"
                         "i357"
                         "i356"
                         "i355"
                         "i353"
                         "i352"
                         "i349"
                         "i347"
                         "i345"
                         "i343"
                         "i341"
                         "i339"
                         "i337"
                         "i336"
                         "i335"
                         "i333"
                         "i331"
                         "i330"
                         "i327"
                         "i326"
                         "i324"
                         "i322"
                         "i320"
                         "i318"
                         "i316"
                         "i314"
                         "i312"
                         "i310"
                         "i308"
                         "i305"
                         "i303"
                         "i301"
                         "i299"
                         "i297"
                         "i295"
                         "i293"
                         "i291"
                         "i289"
                         "i287"
                         "i285"
                         "i283"
                         "i281"
                         "i279"
                         "i277"
                         "i275"
                         "i273"
                         "i271"
                         "i269"
                         "i267"
                         "i265"
                         "i263"
                         "i261"
                         "i260"
                         "i257"
                         "i255"
                         "i254"
                         "i253"
                         "i252"
                         "i251"
                         "i249"
                         "i247"
                         "i245"
                         "i242"
                         "i240"
                         "i238"
                         "i236"
                         "i234"
                         "i232"
                         "i230"
                         "i228"
                         "i226"
                         "i224"
                         "i222"
                         "i220"
                         "i218"
                         "i216"
                         "i214"
                         "i212"
                         "i210"
                         "i208"))
                      #(ribcage
                        (define-structure
                          define-expansion-accessors
                          define-expansion-constructors)
                        ((top) (top) (top))
                        ("i46" "i45" "i44")))
                     (hygiene guile))
                  '(())))
           #f)
         #f)))
   (#{lambda-formals 4354}#
     (lambda (#{orig-args 24683}#)
       (letrec*
         ((#{req 24684}#
            (lambda (#{args 24688}# #{rreq 24689}#)
              (let ((#{tmp 24691}# ($sc-dispatch #{args 24688}# '())))
                (if #{tmp 24691}#
                  (@apply
                    (lambda ()
                      (#{check 24685}# (reverse #{rreq 24689}#) #f))
                    #{tmp 24691}#)
                  (let ((#{tmp 24814}#
                          ($sc-dispatch #{args 24688}# '(any . any))))
                    (if (if #{tmp 24814}#
                          (@apply
                            (lambda (#{a 24818}# #{b 24819}#)
                              (if (symbol? #{a 24818}#)
                                #t
                                (if (if (vector? #{a 24818}#)
                                      (if (= (vector-length #{a 24818}#) 4)
                                        (eq? (vector-ref #{a 24818}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 24818}# 1))
                                  #f)))
                            #{tmp 24814}#)
                          #f)
                      (@apply
                        (lambda (#{a 24846}# #{b 24847}#)
                          (#{req 24684}#
                            #{b 24847}#
                            (cons #{a 24846}# #{rreq 24689}#)))
                        #{tmp 24814}#)
                      (let ((#{tmp 24848}# (list #{args 24688}#)))
                        (if (@apply
                              (lambda (#{r 24850}#)
                                (if (symbol? #{r 24850}#)
                                  #t
                                  (if (if (vector? #{r 24850}#)
                                        (if (= (vector-length #{r 24850}#) 4)
                                          (eq? (vector-ref #{r 24850}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 24850}# 1))
                                    #f)))
                              #{tmp 24848}#)
                          (@apply
                            (lambda (#{r 24880}#)
                              (#{check 24685}#
                                (reverse #{rreq 24689}#)
                                #{r 24880}#))
                            #{tmp 24848}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 24683}#
                            #{args 24688}#)))))))))
          (#{check 24685}#
            (lambda (#{req 25011}# #{rest 25012}#)
              (if (#{distinct-bound-ids? 4336}#
                    (if #{rest 25012}#
                      (cons #{rest 25012}# #{req 25011}#)
                      #{req 25011}#))
                (values #{req 25011}# #f #{rest 25012}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 24683}#)))))
         (#{req 24684}# #{orig-args 24683}# '()))))
   (#{expand-simple-lambda 4355}#
     (lambda (#{e 25128}#
              #{r 25129}#
              #{w 25130}#
              #{s 25131}#
              #{mod 25132}#
              #{req 25133}#
              #{rest 25134}#
              #{meta 25135}#
              #{body 25136}#)
       (let ((#{ids 25137}#
               (if #{rest 25134}#
                 (append #{req 25133}# (list #{rest 25134}#))
                 #{req 25133}#)))
         (let ((#{vars 25138}#
                 (map #{gen-var 4359}# #{ids 25137}#)))
           (let ((#{labels 25139}#
                   (#{gen-labels 4316}# #{ids 25137}#)))
             (#{build-simple-lambda 4289}#
               #{s 25131}#
               (map syntax->datum #{req 25133}#)
               (if #{rest 25134}#
                 (syntax->datum #{rest 25134}#)
                 #f)
               #{vars 25138}#
               #{meta 25135}#
               (#{expand-body 4349}#
                 #{body 25136}#
                 (#{wrap 4338}#
                   (begin
                     (if (if (pair? #{e 25128}#) #{s 25131}# #f)
                       (set-source-properties! #{e 25128}# #{s 25131}#))
                     #{e 25128}#)
                   #{w 25130}#
                   #{mod 25132}#)
                 (#{extend-var-env 4308}#
                   #{labels 25139}#
                   #{vars 25138}#
                   #{r 25129}#)
                 (#{make-binding-wrap 4327}#
                   #{ids 25137}#
                   #{labels 25139}#
                   #{w 25130}#)
                 #{mod 25132}#)))))))
   (#{lambda*-formals 4356}#
     (lambda (#{orig-args 25439}#)
       (letrec*
         ((#{req 25440}#
            (lambda (#{args 25447}# #{rreq 25448}#)
              (let ((#{tmp 25450}# ($sc-dispatch #{args 25447}# '())))
                (if #{tmp 25450}#
                  (@apply
                    (lambda ()
                      (#{check 25444}#
                        (reverse #{rreq 25448}#)
                        '()
                        #f
                        '()))
                    #{tmp 25450}#)
                  (let ((#{tmp 25456}#
                          ($sc-dispatch #{args 25447}# '(any . any))))
                    (if (if #{tmp 25456}#
                          (@apply
                            (lambda (#{a 25460}# #{b 25461}#)
                              (if (symbol? #{a 25460}#)
                                #t
                                (if (if (vector? #{a 25460}#)
                                      (if (= (vector-length #{a 25460}#) 4)
                                        (eq? (vector-ref #{a 25460}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 25460}# 1))
                                  #f)))
                            #{tmp 25456}#)
                          #f)
                      (@apply
                        (lambda (#{a 25488}# #{b 25489}#)
                          (#{req 25440}#
                            #{b 25489}#
                            (cons #{a 25488}# #{rreq 25448}#)))
                        #{tmp 25456}#)
                      (let ((#{tmp 25490}#
                              ($sc-dispatch #{args 25447}# '(any . any))))
                        (if (if #{tmp 25490}#
                              (@apply
                                (lambda (#{a 25494}# #{b 25495}#)
                                  (eq? (syntax->datum #{a 25494}#) #:optional))
                                #{tmp 25490}#)
                              #f)
                          (@apply
                            (lambda (#{a 25496}# #{b 25497}#)
                              (#{opt 25441}#
                                #{b 25497}#
                                (reverse #{rreq 25448}#)
                                '()))
                            #{tmp 25490}#)
                          (let ((#{tmp 25500}#
                                  ($sc-dispatch #{args 25447}# '(any . any))))
                            (if (if #{tmp 25500}#
                                  (@apply
                                    (lambda (#{a 25504}# #{b 25505}#)
                                      (eq? (syntax->datum #{a 25504}#) #:key))
                                    #{tmp 25500}#)
                                  #f)
                              (@apply
                                (lambda (#{a 25506}# #{b 25507}#)
                                  (#{key 25442}#
                                    #{b 25507}#
                                    (reverse #{rreq 25448}#)
                                    '()
                                    '()))
                                #{tmp 25500}#)
                              (let ((#{tmp 25510}#
                                      ($sc-dispatch
                                        #{args 25447}#
                                        '(any any))))
                                (if (if #{tmp 25510}#
                                      (@apply
                                        (lambda (#{a 25514}# #{b 25515}#)
                                          (eq? (syntax->datum #{a 25514}#)
                                               #:rest))
                                        #{tmp 25510}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 25516}# #{b 25517}#)
                                      (#{rest 25443}#
                                        #{b 25517}#
                                        (reverse #{rreq 25448}#)
                                        '()
                                        '()))
                                    #{tmp 25510}#)
                                  (let ((#{tmp 25520}# (list #{args 25447}#)))
                                    (if (@apply
                                          (lambda (#{r 25522}#)
                                            (if (symbol? #{r 25522}#)
                                              #t
                                              (if (if (vector? #{r 25522}#)
                                                    (if (= (vector-length
                                                             #{r 25522}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 25522}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 25522}# 1))
                                                #f)))
                                          #{tmp 25520}#)
                                      (@apply
                                        (lambda (#{r 25552}#)
                                          (#{rest 25443}#
                                            #{r 25552}#
                                            (reverse #{rreq 25448}#)
                                            '()
                                            '()))
                                        #{tmp 25520}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 25439}#
                                        #{args 25447}#)))))))))))))))
          (#{opt 25441}#
            (lambda (#{args 25571}# #{req 25572}# #{ropt 25573}#)
              (let ((#{tmp 25575}# ($sc-dispatch #{args 25571}# '())))
                (if #{tmp 25575}#
                  (@apply
                    (lambda ()
                      (#{check 25444}#
                        #{req 25572}#
                        (reverse #{ropt 25573}#)
                        #f
                        '()))
                    #{tmp 25575}#)
                  (let ((#{tmp 25581}#
                          ($sc-dispatch #{args 25571}# '(any . any))))
                    (if (if #{tmp 25581}#
                          (@apply
                            (lambda (#{a 25585}# #{b 25586}#)
                              (if (symbol? #{a 25585}#)
                                #t
                                (if (if (vector? #{a 25585}#)
                                      (if (= (vector-length #{a 25585}#) 4)
                                        (eq? (vector-ref #{a 25585}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 25585}# 1))
                                  #f)))
                            #{tmp 25581}#)
                          #f)
                      (@apply
                        (lambda (#{a 25613}# #{b 25614}#)
                          (#{opt 25441}#
                            #{b 25614}#
                            #{req 25572}#
                            (cons (cons #{a 25613}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2369" "i2370"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2359" "i2360" "i2361"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2305"
                                                "i2303"
                                                "i2301"
                                                "i2299"
                                                "i2297"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2296"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                  #{ropt 25573}#)))
                        #{tmp 25581}#)
                      (let ((#{tmp 25615}#
                              ($sc-dispatch
                                #{args 25571}#
                                '((any any) . any))))
                        (if (if #{tmp 25615}#
                              (@apply
                                (lambda (#{a 25619}#
                                         #{init 25620}#
                                         #{b 25621}#)
                                  (if (symbol? #{a 25619}#)
                                    #t
                                    (if (if (vector? #{a 25619}#)
                                          (if (= (vector-length #{a 25619}#) 4)
                                            (eq? (vector-ref #{a 25619}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 25619}# 1))
                                      #f)))
                                #{tmp 25615}#)
                              #f)
                          (@apply
                            (lambda (#{a 25648}# #{init 25649}# #{b 25650}#)
                              (#{opt 25441}#
                                #{b 25650}#
                                #{req 25572}#
                                (cons (list #{a 25648}# #{init 25649}#)
                                      #{ropt 25573}#)))
                            #{tmp 25615}#)
                          (let ((#{tmp 25651}#
                                  ($sc-dispatch #{args 25571}# '(any . any))))
                            (if (if #{tmp 25651}#
                                  (@apply
                                    (lambda (#{a 25655}# #{b 25656}#)
                                      (eq? (syntax->datum #{a 25655}#) #:key))
                                    #{tmp 25651}#)
                                  #f)
                              (@apply
                                (lambda (#{a 25657}# #{b 25658}#)
                                  (#{key 25442}#
                                    #{b 25658}#
                                    #{req 25572}#
                                    (reverse #{ropt 25573}#)
                                    '()))
                                #{tmp 25651}#)
                              (let ((#{tmp 25661}#
                                      ($sc-dispatch
                                        #{args 25571}#
                                        '(any any))))
                                (if (if #{tmp 25661}#
                                      (@apply
                                        (lambda (#{a 25665}# #{b 25666}#)
                                          (eq? (syntax->datum #{a 25665}#)
                                               #:rest))
                                        #{tmp 25661}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 25667}# #{b 25668}#)
                                      (#{rest 25443}#
                                        #{b 25668}#
                                        #{req 25572}#
                                        (reverse #{ropt 25573}#)
                                        '()))
                                    #{tmp 25661}#)
                                  (let ((#{tmp 25671}# (list #{args 25571}#)))
                                    (if (@apply
                                          (lambda (#{r 25673}#)
                                            (if (symbol? #{r 25673}#)
                                              #t
                                              (if (if (vector? #{r 25673}#)
                                                    (if (= (vector-length
                                                             #{r 25673}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 25673}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 25673}# 1))
                                                #f)))
                                          #{tmp 25671}#)
                                      (@apply
                                        (lambda (#{r 25703}#)
                                          (#{rest 25443}#
                                            #{r 25703}#
                                            #{req 25572}#
                                            (reverse #{ropt 25573}#)
                                            '()))
                                        #{tmp 25671}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 25439}#
                                        #{args 25571}#)))))))))))))))
          (#{key 25442}#
            (lambda (#{args 25722}#
                     #{req 25723}#
                     #{opt 25724}#
                     #{rkey 25725}#)
              (let ((#{tmp 25727}# ($sc-dispatch #{args 25722}# '())))
                (if #{tmp 25727}#
                  (@apply
                    (lambda ()
                      (#{check 25444}#
                        #{req 25723}#
                        #{opt 25724}#
                        #f
                        (cons #f (reverse #{rkey 25725}#))))
                    #{tmp 25727}#)
                  (let ((#{tmp 25733}#
                          ($sc-dispatch #{args 25722}# '(any . any))))
                    (if (if #{tmp 25733}#
                          (@apply
                            (lambda (#{a 25737}# #{b 25738}#)
                              (if (symbol? #{a 25737}#)
                                #t
                                (if (if (vector? #{a 25737}#)
                                      (if (= (vector-length #{a 25737}#) 4)
                                        (eq? (vector-ref #{a 25737}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 25737}# 1))
                                  #f)))
                            #{tmp 25733}#)
                          #f)
                      (@apply
                        (lambda (#{a 25765}# #{b 25766}#)
                          (let ((#{tmp 25767}#
                                  (symbol->keyword
                                    (syntax->datum #{a 25765}#))))
                            (#{key 25442}#
                              #{b 25766}#
                              #{req 25723}#
                              #{opt 25724}#
                              (cons (cons #{tmp 25767}#
                                          (cons #{a 25765}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2432"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2426" "i2427"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2415"
                                                         "i2416"
                                                         "i2417"
                                                         "i2418"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2305"
                                                        "i2303"
                                                        "i2301"
                                                        "i2299"
                                                        "i2297"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2296"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile)))))
                                    #{rkey 25725}#))))
                        #{tmp 25733}#)
                      (let ((#{tmp 25770}#
                              ($sc-dispatch
                                #{args 25722}#
                                '((any any) . any))))
                        (if (if #{tmp 25770}#
                              (@apply
                                (lambda (#{a 25774}#
                                         #{init 25775}#
                                         #{b 25776}#)
                                  (if (symbol? #{a 25774}#)
                                    #t
                                    (if (if (vector? #{a 25774}#)
                                          (if (= (vector-length #{a 25774}#) 4)
                                            (eq? (vector-ref #{a 25774}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 25774}# 1))
                                      #f)))
                                #{tmp 25770}#)
                              #f)
                          (@apply
                            (lambda (#{a 25803}# #{init 25804}# #{b 25805}#)
                              (let ((#{tmp 25806}#
                                      (symbol->keyword
                                        (syntax->datum #{a 25803}#))))
                                (#{key 25442}#
                                  #{b 25805}#
                                  #{req 25723}#
                                  #{opt 25724}#
                                  (cons (list #{tmp 25806}#
                                              #{a 25803}#
                                              #{init 25804}#)
                                        #{rkey 25725}#))))
                            #{tmp 25770}#)
                          (let ((#{tmp 25809}#
                                  ($sc-dispatch
                                    #{args 25722}#
                                    '((any any any) . any))))
                            (if (if #{tmp 25809}#
                                  (@apply
                                    (lambda (#{a 25813}#
                                             #{init 25814}#
                                             #{k 25815}#
                                             #{b 25816}#)
                                      (if (if (symbol? #{a 25813}#)
                                            #t
                                            (if (if (vector? #{a 25813}#)
                                                  (if (= (vector-length
                                                           #{a 25813}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 25813}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 25813}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 25815}#))
                                        #f))
                                    #{tmp 25809}#)
                                  #f)
                              (@apply
                                (lambda (#{a 25843}#
                                         #{init 25844}#
                                         #{k 25845}#
                                         #{b 25846}#)
                                  (#{key 25442}#
                                    #{b 25846}#
                                    #{req 25723}#
                                    #{opt 25724}#
                                    (cons (list #{k 25845}#
                                                #{a 25843}#
                                                #{init 25844}#)
                                          #{rkey 25725}#)))
                                #{tmp 25809}#)
                              (let ((#{tmp 25847}#
                                      ($sc-dispatch #{args 25722}# '(any))))
                                (if (if #{tmp 25847}#
                                      (@apply
                                        (lambda (#{aok 25851}#)
                                          (eq? (syntax->datum #{aok 25851}#)
                                               #:allow-other-keys))
                                        #{tmp 25847}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 25852}#)
                                      (#{check 25444}#
                                        #{req 25723}#
                                        #{opt 25724}#
                                        #f
                                        (cons #t (reverse #{rkey 25725}#))))
                                    #{tmp 25847}#)
                                  (let ((#{tmp 25855}#
                                          ($sc-dispatch
                                            #{args 25722}#
                                            '(any any any))))
                                    (if (if #{tmp 25855}#
                                          (@apply
                                            (lambda (#{aok 25859}#
                                                     #{a 25860}#
                                                     #{b 25861}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 25859}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 25860}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 25855}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 25862}#
                                                 #{a 25863}#
                                                 #{b 25864}#)
                                          (#{rest 25443}#
                                            #{b 25864}#
                                            #{req 25723}#
                                            #{opt 25724}#
                                            (cons #t
                                                  (reverse #{rkey 25725}#))))
                                        #{tmp 25855}#)
                                      (let ((#{tmp 25867}#
                                              ($sc-dispatch
                                                #{args 25722}#
                                                '(any . any))))
                                        (if (if #{tmp 25867}#
                                              (@apply
                                                (lambda (#{aok 25871}#
                                                         #{r 25872}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 25871}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 25872}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 25872}#)
                                                            (if (= (vector-length
                                                                     #{r 25872}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 25872}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 25872}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 25867}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 25899}# #{r 25900}#)
                                              (#{rest 25443}#
                                                #{r 25900}#
                                                #{req 25723}#
                                                #{opt 25724}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 25725}#))))
                                            #{tmp 25867}#)
                                          (let ((#{tmp 25903}#
                                                  ($sc-dispatch
                                                    #{args 25722}#
                                                    '(any any))))
                                            (if (if #{tmp 25903}#
                                                  (@apply
                                                    (lambda (#{a 25907}#
                                                             #{b 25908}#)
                                                      (eq? (syntax->datum
                                                             #{a 25907}#)
                                                           #:rest))
                                                    #{tmp 25903}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 25909}#
                                                         #{b 25910}#)
                                                  (#{rest 25443}#
                                                    #{b 25910}#
                                                    #{req 25723}#
                                                    #{opt 25724}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 25725}#))))
                                                #{tmp 25903}#)
                                              (let ((#{tmp 25913}#
                                                      (list #{args 25722}#)))
                                                (if (@apply
                                                      (lambda (#{r 25915}#)
                                                        (if (symbol?
                                                              #{r 25915}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 25915}#)
                                                                (if (= (vector-length
                                                                         #{r 25915}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 25915}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 25915}#
                                                                1))
                                                            #f)))
                                                      #{tmp 25913}#)
                                                  (@apply
                                                    (lambda (#{r 25945}#)
                                                      (#{rest 25443}#
                                                        #{r 25945}#
                                                        #{req 25723}#
                                                        #{opt 25724}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 25725}#))))
                                                    #{tmp 25913}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 25439}#
                                                    #{args 25722}#)))))))))))))))))))))
          (#{rest 25443}#
            (lambda (#{args 25973}#
                     #{req 25974}#
                     #{opt 25975}#
                     #{kw 25976}#)
              (let ((#{tmp 25978}# (list #{args 25973}#)))
                (if (@apply
                      (lambda (#{r 25980}#)
                        (if (symbol? #{r 25980}#)
                          #t
                          (if (if (vector? #{r 25980}#)
                                (if (= (vector-length #{r 25980}#) 4)
                                  (eq? (vector-ref #{r 25980}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 25980}# 1))
                            #f)))
                      #{tmp 25978}#)
                  (@apply
                    (lambda (#{r 26010}#)
                      (#{check 25444}#
                        #{req 25974}#
                        #{opt 25975}#
                        #{r 26010}#
                        #{kw 25976}#))
                    #{tmp 25978}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 25439}#
                    #{args 25973}#)))))
          (#{check 25444}#
            (lambda (#{req 26014}#
                     #{opt 26015}#
                     #{rest 26016}#
                     #{kw 26017}#)
              (if (#{distinct-bound-ids? 4336}#
                    (append
                      #{req 26014}#
                      (map car #{opt 26015}#)
                      (if #{rest 26016}# (list #{rest 26016}#) '())
                      (if (pair? #{kw 26017}#)
                        (map cadr (cdr #{kw 26017}#))
                        '())))
                (values
                  #{req 26014}#
                  #{opt 26015}#
                  #{rest 26016}#
                  #{kw 26017}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 25439}#)))))
         (#{req 25440}# #{orig-args 25439}# '()))))
   (#{expand-lambda-case 4357}#
     (lambda (#{e 26133}#
              #{r 26134}#
              #{w 26135}#
              #{s 26136}#
              #{mod 26137}#
              #{get-formals 26138}#
              #{clauses 26139}#)
       (letrec*
         ((#{parse-req 26140}#
            (lambda (#{req 26273}#
                     #{opt 26274}#
                     #{rest 26275}#
                     #{kw 26276}#
                     #{body 26277}#)
              (let ((#{vars 26278}#
                      (map #{gen-var 4359}# #{req 26273}#))
                    (#{labels 26279}#
                      (#{gen-labels 4316}# #{req 26273}#)))
                (let ((#{r* 26280}#
                        (#{extend-var-env 4308}#
                          #{labels 26279}#
                          #{vars 26278}#
                          #{r 26134}#))
                      (#{w* 26281}#
                        (#{make-binding-wrap 4327}#
                          #{req 26273}#
                          #{labels 26279}#
                          #{w 26135}#)))
                  (#{parse-opt 26141}#
                    (map syntax->datum #{req 26273}#)
                    #{opt 26274}#
                    #{rest 26275}#
                    #{kw 26276}#
                    #{body 26277}#
                    (reverse #{vars 26278}#)
                    #{r* 26280}#
                    #{w* 26281}#
                    '()
                    '())))))
          (#{parse-opt 26141}#
            (lambda (#{req 26495}#
                     #{opt 26496}#
                     #{rest 26497}#
                     #{kw 26498}#
                     #{body 26499}#
                     #{vars 26500}#
                     #{r* 26501}#
                     #{w* 26502}#
                     #{out 26503}#
                     #{inits 26504}#)
              (if (pair? #{opt 26496}#)
                (let ((#{tmp 26505}# (car #{opt 26496}#)))
                  (let ((#{tmp 26506}#
                          ($sc-dispatch #{tmp 26505}# '(any any))))
                    (if #{tmp 26506}#
                      (@apply
                        (lambda (#{id 26508}# #{i 26509}#)
                          (let ((#{v 26510}#
                                  (let ((#{id 26518}#
                                          (if (if (vector? #{id 26508}#)
                                                (if (= (vector-length
                                                         #{id 26508}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 26508}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 26508}# 1)
                                            #{id 26508}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 26518}#)
                                        " ")))))
                            (let ((#{l 26511}#
                                    (#{gen-labels 4316}# (list #{v 26510}#))))
                              (let ((#{r** 26512}#
                                      (#{extend-var-env 4308}#
                                        #{l 26511}#
                                        (list #{v 26510}#)
                                        #{r* 26501}#)))
                                (let ((#{w** 26513}#
                                        (#{make-binding-wrap 4327}#
                                          (list #{id 26508}#)
                                          #{l 26511}#
                                          #{w* 26502}#)))
                                  (#{parse-opt 26141}#
                                    #{req 26495}#
                                    (cdr #{opt 26496}#)
                                    #{rest 26497}#
                                    #{kw 26498}#
                                    #{body 26499}#
                                    (cons #{v 26510}# #{vars 26500}#)
                                    #{r** 26512}#
                                    #{w** 26513}#
                                    (cons (syntax->datum #{id 26508}#)
                                          #{out 26503}#)
                                    (cons (#{expand 4345}#
                                            #{i 26509}#
                                            #{r* 26501}#
                                            #{w* 26502}#
                                            #{mod 26137}#)
                                          #{inits 26504}#)))))))
                        #{tmp 26506}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 26505}#))))
                (if #{rest 26497}#
                  (let ((#{v 26783}#
                          (let ((#{id 26793}#
                                  (if (if (vector? #{rest 26497}#)
                                        (if (= (vector-length #{rest 26497}#)
                                               4)
                                          (eq? (vector-ref #{rest 26497}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 26497}# 1)
                                    #{rest 26497}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 26793}#)
                                " ")))))
                    (let ((#{l 26784}#
                            (#{gen-labels 4316}# (list #{v 26783}#))))
                      (let ((#{r* 26785}#
                              (#{extend-var-env 4308}#
                                #{l 26784}#
                                (list #{v 26783}#)
                                #{r* 26501}#)))
                        (let ((#{w* 26786}#
                                (#{make-binding-wrap 4327}#
                                  (list #{rest 26497}#)
                                  #{l 26784}#
                                  #{w* 26502}#)))
                          (#{parse-kw 26142}#
                            #{req 26495}#
                            (if (pair? #{out 26503}#)
                              (reverse #{out 26503}#)
                              #f)
                            (syntax->datum #{rest 26497}#)
                            (if (pair? #{kw 26498}#)
                              (cdr #{kw 26498}#)
                              #{kw 26498}#)
                            #{body 26499}#
                            (cons #{v 26783}# #{vars 26500}#)
                            #{r* 26785}#
                            #{w* 26786}#
                            (if (pair? #{kw 26498}#) (car #{kw 26498}#) #f)
                            '()
                            #{inits 26504}#)))))
                  (#{parse-kw 26142}#
                    #{req 26495}#
                    (if (pair? #{out 26503}#)
                      (reverse #{out 26503}#)
                      #f)
                    #f
                    (if (pair? #{kw 26498}#)
                      (cdr #{kw 26498}#)
                      #{kw 26498}#)
                    #{body 26499}#
                    #{vars 26500}#
                    #{r* 26501}#
                    #{w* 26502}#
                    (if (pair? #{kw 26498}#) (car #{kw 26498}#) #f)
                    '()
                    #{inits 26504}#)))))
          (#{parse-kw 26142}#
            (lambda (#{req 26991}#
                     #{opt 26992}#
                     #{rest 26993}#
                     #{kw 26994}#
                     #{body 26995}#
                     #{vars 26996}#
                     #{r* 26997}#
                     #{w* 26998}#
                     #{aok 26999}#
                     #{out 27000}#
                     #{inits 27001}#)
              (if (pair? #{kw 26994}#)
                (let ((#{tmp 27002}# (car #{kw 26994}#)))
                  (let ((#{tmp 27003}#
                          ($sc-dispatch #{tmp 27002}# '(any any any))))
                    (if #{tmp 27003}#
                      (@apply
                        (lambda (#{k 27005}# #{id 27006}# #{i 27007}#)
                          (let ((#{v 27008}#
                                  (let ((#{id 27016}#
                                          (if (if (vector? #{id 27006}#)
                                                (if (= (vector-length
                                                         #{id 27006}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 27006}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 27006}# 1)
                                            #{id 27006}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 27016}#)
                                        " ")))))
                            (let ((#{l 27009}#
                                    (#{gen-labels 4316}# (list #{v 27008}#))))
                              (let ((#{r** 27010}#
                                      (#{extend-var-env 4308}#
                                        #{l 27009}#
                                        (list #{v 27008}#)
                                        #{r* 26997}#)))
                                (let ((#{w** 27011}#
                                        (#{make-binding-wrap 4327}#
                                          (list #{id 27006}#)
                                          #{l 27009}#
                                          #{w* 26998}#)))
                                  (#{parse-kw 26142}#
                                    #{req 26991}#
                                    #{opt 26992}#
                                    #{rest 26993}#
                                    (cdr #{kw 26994}#)
                                    #{body 26995}#
                                    (cons #{v 27008}# #{vars 26996}#)
                                    #{r** 27010}#
                                    #{w** 27011}#
                                    #{aok 26999}#
                                    (cons (list (syntax->datum #{k 27005}#)
                                                (syntax->datum #{id 27006}#)
                                                #{v 27008}#)
                                          #{out 27000}#)
                                    (cons (#{expand 4345}#
                                            #{i 27007}#
                                            #{r* 26997}#
                                            #{w* 26998}#
                                            #{mod 26137}#)
                                          #{inits 27001}#)))))))
                        #{tmp 27003}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 27002}#))))
                (#{parse-body 26143}#
                  #{req 26991}#
                  #{opt 26992}#
                  #{rest 26993}#
                  (if (if #{aok 26999}#
                        #{aok 26999}#
                        (pair? #{out 27000}#))
                    (cons #{aok 26999}# (reverse #{out 27000}#))
                    #f)
                  #{body 26995}#
                  (reverse #{vars 26996}#)
                  #{r* 26997}#
                  #{w* 26998}#
                  (reverse #{inits 27001}#)
                  '()))))
          (#{parse-body 26143}#
            (lambda (#{req 27290}#
                     #{opt 27291}#
                     #{rest 27292}#
                     #{kw 27293}#
                     #{body 27294}#
                     #{vars 27295}#
                     #{r* 27296}#
                     #{w* 27297}#
                     #{inits 27298}#
                     #{meta 27299}#)
              (let ((#{tmp 27301}#
                      ($sc-dispatch
                        #{body 27294}#
                        '(any any . each-any))))
                (if (if #{tmp 27301}#
                      (@apply
                        (lambda (#{docstring 27305}# #{e1 27306}# #{e2 27307}#)
                          (string? (syntax->datum #{docstring 27305}#)))
                        #{tmp 27301}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 27308}# #{e1 27309}# #{e2 27310}#)
                      (#{parse-body 26143}#
                        #{req 27290}#
                        #{opt 27291}#
                        #{rest 27292}#
                        #{kw 27293}#
                        (cons #{e1 27309}# #{e2 27310}#)
                        #{vars 27295}#
                        #{r* 27296}#
                        #{w* 27297}#
                        #{inits 27298}#
                        (append
                          #{meta 27299}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 27308}#))))))
                    #{tmp 27301}#)
                  (let ((#{tmp 27311}#
                          ($sc-dispatch
                            #{body 27294}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 27311}#
                      (@apply
                        (lambda (#{k 27315}#
                                 #{v 27316}#
                                 #{e1 27317}#
                                 #{e2 27318}#)
                          (#{parse-body 26143}#
                            #{req 27290}#
                            #{opt 27291}#
                            #{rest 27292}#
                            #{kw 27293}#
                            (cons #{e1 27317}# #{e2 27318}#)
                            #{vars 27295}#
                            #{r* 27296}#
                            #{w* 27297}#
                            #{inits 27298}#
                            (append
                              #{meta 27299}#
                              (syntax->datum
                                (map cons #{k 27315}# #{v 27316}#)))))
                        #{tmp 27311}#)
                      (let ((#{tmp 27319}#
                              ($sc-dispatch #{body 27294}# '(any . each-any))))
                        (if #{tmp 27319}#
                          (@apply
                            (lambda (#{e1 27323}# #{e2 27324}#)
                              (values
                                #{meta 27299}#
                                #{req 27290}#
                                #{opt 27291}#
                                #{rest 27292}#
                                #{kw 27293}#
                                #{inits 27298}#
                                #{vars 27295}#
                                (#{expand-body 4349}#
                                  (cons #{e1 27323}# #{e2 27324}#)
                                  (#{wrap 4338}#
                                    (begin
                                      (if (if (pair? #{e 26133}#)
                                            #{s 26136}#
                                            #f)
                                        (set-source-properties!
                                          #{e 26133}#
                                          #{s 26136}#))
                                      #{e 26133}#)
                                    #{w 26135}#
                                    #{mod 26137}#)
                                  #{r* 27296}#
                                  #{w* 27297}#
                                  #{mod 26137}#)))
                            #{tmp 27319}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 27294}#))))))))))
         (let ((#{tmp 26145}#
                 ($sc-dispatch #{clauses 26139}# '())))
           (if #{tmp 26145}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 26145}#)
             (let ((#{tmp 26149}#
                     ($sc-dispatch
                       #{clauses 26139}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 26149}#
                 (@apply
                   (lambda (#{args 26153}#
                            #{e1 26154}#
                            #{e2 26155}#
                            #{args* 26156}#
                            #{e1* 26157}#
                            #{e2* 26158}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 26138}# #{args 26153}#))
                       (lambda (#{req 26159}#
                                #{opt 26160}#
                                #{rest 26161}#
                                #{kw 26162}#)
                         (call-with-values
                           (lambda ()
                             (#{parse-req 26140}#
                               #{req 26159}#
                               #{opt 26160}#
                               #{rest 26161}#
                               #{kw 26162}#
                               (cons #{e1 26154}# #{e2 26155}#)))
                           (lambda (#{meta 26229}#
                                    #{req 26230}#
                                    #{opt 26231}#
                                    #{rest 26232}#
                                    #{kw 26233}#
                                    #{inits 26234}#
                                    #{vars 26235}#
                                    #{body 26236}#)
                             (call-with-values
                               (lambda ()
                                 (#{expand-lambda-case 4357}#
                                   #{e 26133}#
                                   #{r 26134}#
                                   #{w 26135}#
                                   #{s 26136}#
                                   #{mod 26137}#
                                   #{get-formals 26138}#
                                   (map (lambda (#{tmp 2775 26237}#
                                                 #{tmp 2774 26238}#
                                                 #{tmp 2773 26239}#)
                                          (cons #{tmp 2773 26239}#
                                                (cons #{tmp 2774 26238}#
                                                      #{tmp 2775 26237}#)))
                                        #{e2* 26158}#
                                        #{e1* 26157}#
                                        #{args* 26156}#)))
                               (lambda (#{meta* 26240}# #{else* 26241}#)
                                 (values
                                   (append #{meta 26229}# #{meta* 26240}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #{s 26136}#
                                     #{req 26230}#
                                     #{opt 26231}#
                                     #{rest 26232}#
                                     #{kw 26233}#
                                     #{inits 26234}#
                                     #{vars 26235}#
                                     #{body 26236}#
                                     #{else* 26241}#)))))))))
                   #{tmp 26149}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 26139}#))))))))
   (#{strip 4358}#
     (lambda (#{x 27361}# #{w 27362}#)
       (if (memq 'top (car #{w 27362}#))
         #{x 27361}#
         (letrec*
           ((#{f 27363}#
              (lambda (#{x 27366}#)
                (if (if (vector? #{x 27366}#)
                      (if (= (vector-length #{x 27366}#) 4)
                        (eq? (vector-ref #{x 27366}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 4358}#
                    (vector-ref #{x 27366}# 1)
                    (vector-ref #{x 27366}# 2))
                  (if (pair? #{x 27366}#)
                    (let ((#{a 27385}# (#{f 27363}# (car #{x 27366}#)))
                          (#{d 27386}# (#{f 27363}# (cdr #{x 27366}#))))
                      (if (if (eq? #{a 27385}# (car #{x 27366}#))
                            (eq? #{d 27386}# (cdr #{x 27366}#))
                            #f)
                        #{x 27366}#
                        (cons #{a 27385}# #{d 27386}#)))
                    (if (vector? #{x 27366}#)
                      (let ((#{old 27389}# (vector->list #{x 27366}#)))
                        (let ((#{new 27390}# (map #{f 27363}# #{old 27389}#)))
                          (letrec*
                            ((#{lp 27391}#
                               (lambda (#{l1 27467}# #{l2 27468}#)
                                 (if (null? #{l1 27467}#)
                                   #{x 27366}#
                                   (if (eq? (car #{l1 27467}#)
                                            (car #{l2 27468}#))
                                     (#{lp 27391}#
                                       (cdr #{l1 27467}#)
                                       (cdr #{l2 27468}#))
                                     (list->vector #{new 27390}#))))))
                            (#{lp 27391}# #{old 27389}# #{new 27390}#))))
                      #{x 27366}#))))))
           (#{f 27363}# #{x 27361}#)))))
   (#{gen-var 4359}#
     (lambda (#{id 26285}#)
       (let ((#{id 26286}#
               (if (if (vector? #{id 26285}#)
                     (if (= (vector-length #{id 26285}#) 4)
                       (eq? (vector-ref #{id 26285}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 26285}# 1)
                 #{id 26285}#)))
         (gensym
           (string-append (symbol->string #{id 26286}#) " "))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 4311}#
      'core
      'syntax-parameterize
      (lambda (#{e 4480}#
               #{r 4481}#
               #{w 4482}#
               #{s 4483}#
               #{mod 4484}#)
        (let ((#{tmp 4486}#
                ($sc-dispatch
                  #{e 4480}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 4486}#
                (@apply
                  (lambda (#{var 4490}#
                           #{val 4491}#
                           #{e1 4492}#
                           #{e2 4493}#)
                    (#{valid-bound-ids? 4335}# #{var 4490}#))
                  #{tmp 4486}#)
                #f)
            (@apply
              (lambda (#{var 4571}#
                       #{val 4572}#
                       #{e1 4573}#
                       #{e2 4574}#)
                (let ((#{names 4575}#
                        (map (lambda (#{x 4765}#)
                               (#{id-var-name 4332}# #{x 4765}# #{w 4482}#))
                             #{var 4571}#)))
                  (begin
                    (for-each
                      (lambda (#{id 4576}# #{n 4577}#)
                        (let ((#{atom-key 4578}#
                                (car (let ((#{t 4702}#
                                             (assq #{n 4577}# #{r 4481}#)))
                                       (if #{t 4702}#
                                         (cdr #{t 4702}#)
                                         (if (symbol? #{n 4577}#)
                                           (let ((#{t 4707}#
                                                   (begin
                                                     (if (if (not #{mod 4484}#)
                                                           (current-module)
                                                           #f)
                                                       (warn "module system is booted, we should have a module"
                                                             #{n 4577}#))
                                                     (let ((#{v 4744}#
                                                             (module-variable
                                                               (if #{mod 4484}#
                                                                 (resolve-module
                                                                   (cdr #{mod 4484}#))
                                                                 (current-module))
                                                               #{n 4577}#)))
                                                       (if #{v 4744}#
                                                         (if (variable-bound?
                                                               #{v 4744}#)
                                                           (let ((#{val 4753}#
                                                                   (variable-ref
                                                                     #{v 4744}#)))
                                                             (if (macro?
                                                                   #{val 4753}#)
                                                               (if (macro-type
                                                                     #{val 4753}#)
                                                                 (cons (macro-type
                                                                         #{val 4753}#)
                                                                       (macro-binding
                                                                         #{val 4753}#))
                                                                 #f)
                                                               #f))
                                                           #f)
                                                         #f)))))
                                             (if #{t 4707}#
                                               #{t 4707}#
                                               '(global)))
                                           '(displaced-lexical)))))))
                          (if (let ((#{t 4611}# #{atom-key 4578}#))
                                (eqv? #{t 4611}# 'displaced-lexical))
                            (syntax-violation
                              'syntax-parameterize
                              "identifier out of context"
                              #{e 4480}#
                              (#{wrap 4338}#
                                (begin
                                  (if (if (pair? #{id 4576}#) #{s 4483}# #f)
                                    (set-source-properties!
                                      #{id 4576}#
                                      #{s 4483}#))
                                  #{id 4576}#)
                                #{w 4482}#
                                #{mod 4484}#)))))
                      #{var 4571}#
                      #{names 4575}#)
                    (#{expand-body 4349}#
                      (cons #{e1 4573}# #{e2 4574}#)
                      (#{wrap 4338}#
                        (begin
                          (if (if (pair? #{e 4480}#) #{s 4483}# #f)
                            (set-source-properties! #{e 4480}# #{s 4483}#))
                          #{e 4480}#)
                        #{w 4482}#
                        #{mod 4484}#)
                      (#{extend-env 4307}#
                        #{names 4575}#
                        (let ((#{trans-r 4851}#
                                (#{macros-only-env 4309}# #{r 4481}#)))
                          (map (lambda (#{x 4852}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 4351}#
                                         (#{expand 4345}#
                                           #{x 4852}#
                                           #{trans-r 4851}#
                                           #{w 4482}#
                                           #{mod 4484}#)
                                         #{mod 4484}#)))
                               #{val 4572}#))
                        #{r 4481}#)
                      #{w 4482}#
                      #{mod 4484}#))))
              #{tmp 4486}#)
            (syntax-violation
              'syntax-parameterize
              "bad syntax"
              (#{wrap 4338}#
                (begin
                  (if (if (pair? #{e 4480}#) #{s 4483}# #f)
                    (set-source-properties! #{e 4480}# #{s 4483}#))
                  #{e 4480}#)
                #{w 4482}#
                #{mod 4484}#))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 5061}#
                 #{r 5062}#
                 #{w 5063}#
                 #{s 5064}#
                 #{mod 5065}#)
          (let ((#{tmp 5067}# ($sc-dispatch #{e 5061}# '(_ any))))
            (if #{tmp 5067}#
              (@apply
                (lambda (#{e 5070}#)
                  (let ((#{exp 5074}#
                          (#{strip 4358}# #{e 5070}# #{w 5063}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 5064}#
                      #{exp 5074}#)))
                #{tmp 5067}#)
              (syntax-violation
                'quote
                "bad syntax"
                (#{wrap 4338}#
                  (begin
                    (if (if (pair? #{e 5061}#) #{s 5064}# #f)
                      (set-source-properties! #{e 5061}# #{s 5064}#))
                    #{e 5061}#)
                  #{w 5063}#
                  #{mod 5065}#)))))))
    (#{global-extend 4311}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 5301}#
           (lambda (#{src 5403}#
                    #{e 5404}#
                    #{r 5405}#
                    #{maps 5406}#
                    #{ellipsis? 5407}#
                    #{mod 5408}#)
             (if (if (symbol? #{e 5404}#)
                   #t
                   (if (if (vector? #{e 5404}#)
                         (if (= (vector-length #{e 5404}#) 4)
                           (eq? (vector-ref #{e 5404}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 5404}# 1))
                     #f))
               (let ((#{label 5435}#
                       (#{id-var-name 4332}# #{e 5404}# '(()))))
                 (let ((#{b 5436}#
                         (let ((#{t 5573}# (assq #{label 5435}# #{r 5405}#)))
                           (if #{t 5573}#
                             (cdr #{t 5573}#)
                             (if (symbol? #{label 5435}#)
                               (let ((#{t 5578}#
                                       (begin
                                         (if (if (not #{mod 5408}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{label 5435}#))
                                         (let ((#{v 5615}#
                                                 (module-variable
                                                   (if #{mod 5408}#
                                                     (resolve-module
                                                       (cdr #{mod 5408}#))
                                                     (current-module))
                                                   #{label 5435}#)))
                                           (if #{v 5615}#
                                             (if (variable-bound? #{v 5615}#)
                                               (let ((#{val 5624}#
                                                       (variable-ref
                                                         #{v 5615}#)))
                                                 (if (macro? #{val 5624}#)
                                                   (if (macro-type
                                                         #{val 5624}#)
                                                     (cons (macro-type
                                                             #{val 5624}#)
                                                           (macro-binding
                                                             #{val 5624}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 5578}# #{t 5578}# '(global)))
                               '(displaced-lexical))))))
                   (if (eq? (car #{b 5436}#) 'syntax)
                     (call-with-values
                       (lambda ()
                         (let ((#{var.lev 5469}# (cdr #{b 5436}#)))
                           (#{gen-ref 5302}#
                             #{src 5403}#
                             (car #{var.lev 5469}#)
                             (cdr #{var.lev 5469}#)
                             #{maps 5406}#)))
                       (lambda (#{var 5565}# #{maps 5566}#)
                         (values (list 'ref #{var 5565}#) #{maps 5566}#)))
                     (if (#{ellipsis? 5407}# #{e 5404}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 5403}#)
                       (values (list 'quote #{e 5404}#) #{maps 5406}#)))))
               (let ((#{tmp 5636}#
                       ($sc-dispatch #{e 5404}# '(any any))))
                 (if (if #{tmp 5636}#
                       (@apply
                         (lambda (#{dots 5640}# #{e 5641}#)
                           (#{ellipsis? 5407}# #{dots 5640}#))
                         #{tmp 5636}#)
                       #f)
                   (@apply
                     (lambda (#{dots 5642}# #{e 5643}#)
                       (#{gen-syntax 5301}#
                         #{src 5403}#
                         #{e 5643}#
                         #{r 5405}#
                         #{maps 5406}#
                         (lambda (#{x 5644}#) #f)
                         #{mod 5408}#))
                     #{tmp 5636}#)
                   (let ((#{tmp 5645}#
                           ($sc-dispatch #{e 5404}# '(any any . any))))
                     (if (if #{tmp 5645}#
                           (@apply
                             (lambda (#{x 5649}# #{dots 5650}# #{y 5651}#)
                               (#{ellipsis? 5407}# #{dots 5650}#))
                             #{tmp 5645}#)
                           #f)
                       (@apply
                         (lambda (#{x 5652}# #{dots 5653}# #{y 5654}#)
                           (letrec*
                             ((#{f 5655}#
                                (lambda (#{y 5663}# #{k 5664}#)
                                  (let ((#{tmp 5666}#
                                          ($sc-dispatch
                                            #{y 5663}#
                                            '(any . any))))
                                    (if (if #{tmp 5666}#
                                          (@apply
                                            (lambda (#{dots 5670}# #{y 5671}#)
                                              (#{ellipsis? 5407}#
                                                #{dots 5670}#))
                                            #{tmp 5666}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 5672}# #{y 5673}#)
                                          (#{f 5655}#
                                            #{y 5673}#
                                            (lambda (#{maps 5674}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 5664}#
                                                    (cons '() #{maps 5674}#)))
                                                (lambda (#{x 5675}#
                                                         #{maps 5676}#)
                                                  (if (null? (car #{maps 5676}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 5403}#)
                                                    (values
                                                      (let ((#{map-env 5680}#
                                                              (car #{maps 5676}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 5304}#
                                                                #{x 5675}#
                                                                #{map-env 5680}#)))
                                                      (cdr #{maps 5676}#))))))))
                                        #{tmp 5666}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 5301}#
                                            #{src 5403}#
                                            #{y 5663}#
                                            #{r 5405}#
                                            #{maps 5406}#
                                            #{ellipsis? 5407}#
                                            #{mod 5408}#))
                                        (lambda (#{y 5683}# #{maps 5684}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 5664}# #{maps 5684}#))
                                            (lambda (#{x 5685}# #{maps 5686}#)
                                              (values
                                                (if (equal? #{y 5683}# ''())
                                                  #{x 5685}#
                                                  (list 'append
                                                        #{x 5685}#
                                                        #{y 5683}#))
                                                #{maps 5686}#))))))))))
                             (#{f 5655}#
                               #{y 5654}#
                               (lambda (#{maps 5658}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5301}#
                                       #{src 5403}#
                                       #{x 5652}#
                                       #{r 5405}#
                                       (cons '() #{maps 5658}#)
                                       #{ellipsis? 5407}#
                                       #{mod 5408}#))
                                   (lambda (#{x 5659}# #{maps 5660}#)
                                     (if (null? (car #{maps 5660}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 5403}#)
                                       (values
                                         (#{gen-map 5304}#
                                           #{x 5659}#
                                           (car #{maps 5660}#))
                                         (cdr #{maps 5660}#)))))))))
                         #{tmp 5645}#)
                       (let ((#{tmp 5702}#
                               ($sc-dispatch #{e 5404}# '(any . any))))
                         (if #{tmp 5702}#
                           (@apply
                             (lambda (#{x 5706}# #{y 5707}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 5301}#
                                     #{src 5403}#
                                     #{x 5706}#
                                     #{r 5405}#
                                     #{maps 5406}#
                                     #{ellipsis? 5407}#
                                     #{mod 5408}#))
                                 (lambda (#{x 5708}# #{maps 5709}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5301}#
                                         #{src 5403}#
                                         #{y 5707}#
                                         #{r 5405}#
                                         #{maps 5709}#
                                         #{ellipsis? 5407}#
                                         #{mod 5408}#))
                                     (lambda (#{y 5710}# #{maps 5711}#)
                                       (values
                                         (let ((#{atom-key 5716}#
                                                 (car #{y 5710}#)))
                                           (if (eqv? #{atom-key 5716}# 'quote)
                                             (if (eq? (car #{x 5708}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 5708}#))
                                                           (car (cdr #{y 5710}#))))
                                               (if (eq? (car (cdr #{y 5710}#))
                                                        '())
                                                 (list 'list #{x 5708}#)
                                                 (list 'cons
                                                       #{x 5708}#
                                                       #{y 5710}#)))
                                             (if (eqv? #{atom-key 5716}# 'list)
                                               (cons 'list
                                                     (cons #{x 5708}#
                                                           (cdr #{y 5710}#)))
                                               (list 'cons
                                                     #{x 5708}#
                                                     #{y 5710}#))))
                                         #{maps 5711}#))))))
                             #{tmp 5702}#)
                           (let ((#{tmp 5745}#
                                   ($sc-dispatch
                                     #{e 5404}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 5745}#
                               (@apply
                                 (lambda (#{e1 5749}# #{e2 5750}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5301}#
                                         #{src 5403}#
                                         (cons #{e1 5749}# #{e2 5750}#)
                                         #{r 5405}#
                                         #{maps 5406}#
                                         #{ellipsis? 5407}#
                                         #{mod 5408}#))
                                     (lambda (#{e 5751}# #{maps 5752}#)
                                       (values
                                         (if (eq? (car #{e 5751}#) 'list)
                                           (cons 'vector (cdr #{e 5751}#))
                                           (if (eq? (car #{e 5751}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 5751}#))))
                                             (list 'list->vector #{e 5751}#)))
                                         #{maps 5752}#))))
                                 #{tmp 5745}#)
                               (values
                                 (list 'quote #{e 5404}#)
                                 #{maps 5406}#))))))))))))
         (#{gen-ref 5302}#
           (lambda (#{src 5779}#
                    #{var 5780}#
                    #{level 5781}#
                    #{maps 5782}#)
             (if (= #{level 5781}# 0)
               (values #{var 5780}# #{maps 5782}#)
               (if (null? #{maps 5782}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 5779}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 5302}#
                       #{src 5779}#
                       #{var 5780}#
                       (#{1-}# #{level 5781}#)
                       (cdr #{maps 5782}#)))
                   (lambda (#{outer-var 5783}# #{outer-maps 5784}#)
                     (let ((#{b 5785}#
                             (assq #{outer-var 5783}# (car #{maps 5782}#))))
                       (if #{b 5785}#
                         (values (cdr #{b 5785}#) #{maps 5782}#)
                         (let ((#{inner-var 5787}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 5787}#
                             (cons (cons (cons #{outer-var 5783}#
                                               #{inner-var 5787}#)
                                         (car #{maps 5782}#))
                                   #{outer-maps 5784}#)))))))))))
         (#{gen-map 5304}#
           (lambda (#{e 5801}# #{map-env 5802}#)
             (let ((#{formals 5803}# (map cdr #{map-env 5802}#))
                   (#{actuals 5804}#
                     (map (lambda (#{x 5806}#)
                            (list 'ref (car #{x 5806}#)))
                          #{map-env 5802}#)))
               (if (eq? (car #{e 5801}#) 'ref)
                 (car #{actuals 5804}#)
                 (if (and-map
                       (lambda (#{x 5807}#)
                         (if (eq? (car #{x 5807}#) 'ref)
                           (memq (car (cdr #{x 5807}#)) #{formals 5803}#)
                           #f))
                       (cdr #{e 5801}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 5801}#))
                               (map (let ((#{r 5809}#
                                            (map cons
                                                 #{formals 5803}#
                                                 #{actuals 5804}#)))
                                      (lambda (#{x 5810}#)
                                        (cdr (assq (car (cdr #{x 5810}#))
                                                   #{r 5809}#))))
                                    (cdr #{e 5801}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 5803}# #{e 5801}#)
                               #{actuals 5804}#)))))))
         (#{regen 5308}#
           (lambda (#{x 5812}#)
             (let ((#{atom-key 5813}# (car #{x 5812}#)))
               (if (eqv? #{atom-key 5813}# 'ref)
                 (let ((#{name 5823}# (car (cdr #{x 5812}#)))
                       (#{var 5824}# (car (cdr #{x 5812}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 5823}#
                     #{var 5824}#))
                 (if (eqv? #{atom-key 5813}# 'primitive)
                   (let ((#{name 5836}# (car (cdr #{x 5812}#))))
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         #{name 5836}#)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         #{name 5836}#
                         #f)))
                   (if (eqv? #{atom-key 5813}# 'quote)
                     (let ((#{exp 5854}# (car (cdr #{x 5812}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 5854}#))
                     (if (eqv? #{atom-key 5813}# 'lambda)
                       (if (list? (car (cdr #{x 5812}#)))
                         (let ((#{req 5865}# (car (cdr #{x 5812}#)))
                               (#{vars 5867}# (car (cdr #{x 5812}#)))
                               (#{exp 5869}#
                                 (#{regen 5308}#
                                   (car (cdr (cdr #{x 5812}#))))))
                           (let ((#{body 5874}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 5865}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 5867}#
                                     #{exp 5869}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 5874}#)))
                         (error "how did we get here" #{x 5812}#))
                       (let ((#{fun-exp 5890}#
                               (let ((#{name 5899}# (car #{x 5812}#)))
                                 (if (equal?
                                       (module-name (current-module))
                                       '(guile))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 7)
                                     #f
                                     #{name 5899}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 5)
                                     #f
                                     '(guile)
                                     #{name 5899}#
                                     #f))))
                             (#{arg-exps 5891}#
                               (map #{regen 5308}# (cdr #{x 5812}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 5890}#
                           #{arg-exps 5891}#))))))))))
        (lambda (#{e 5309}#
                 #{r 5310}#
                 #{w 5311}#
                 #{s 5312}#
                 #{mod 5313}#)
          (let ((#{e 5314}#
                  (#{wrap 4338}#
                    (begin
                      (if (if (pair? #{e 5309}#) #{s 5312}# #f)
                        (set-source-properties! #{e 5309}# #{s 5312}#))
                      #{e 5309}#)
                    #{w 5311}#
                    #{mod 5313}#)))
            (let ((#{tmp 5316}# ($sc-dispatch #{e 5314}# '(_ any))))
              (if #{tmp 5316}#
                (@apply
                  (lambda (#{x 5341}#)
                    (call-with-values
                      (lambda ()
                        (#{gen-syntax 5301}#
                          #{e 5314}#
                          #{x 5341}#
                          #{r 5310}#
                          '()
                          #{ellipsis? 4353}#
                          #{mod 5313}#))
                      (lambda (#{e 5395}# #{maps 5396}#)
                        (#{regen 5308}# #{e 5395}#))))
                  #{tmp 5316}#)
                (syntax-violation
                  'syntax
                  "bad `syntax' form"
                  #{e 5314}#)))))))
    (#{global-extend 4311}#
      'core
      'lambda
      (lambda (#{e 6092}#
               #{r 6093}#
               #{w 6094}#
               #{s 6095}#
               #{mod 6096}#)
        (let ((#{tmp 6098}#
                ($sc-dispatch #{e 6092}# '(_ any any . each-any))))
          (if #{tmp 6098}#
            (@apply
              (lambda (#{args 6102}# #{e1 6103}# #{e2 6104}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 4354}# #{args 6102}#))
                  (lambda (#{req 6107}#
                           #{opt 6108}#
                           #{rest 6109}#
                           #{kw 6110}#)
                    (letrec*
                      ((#{lp 6111}#
                         (lambda (#{body 6114}# #{meta 6115}#)
                           (let ((#{tmp 6117}#
                                   ($sc-dispatch
                                     #{body 6114}#
                                     '(any any . each-any))))
                             (if (if #{tmp 6117}#
                                   (@apply
                                     (lambda (#{docstring 6121}#
                                              #{e1 6122}#
                                              #{e2 6123}#)
                                       (string?
                                         (syntax->datum #{docstring 6121}#)))
                                     #{tmp 6117}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 6124}#
                                          #{e1 6125}#
                                          #{e2 6126}#)
                                   (#{lp 6111}#
                                     (cons #{e1 6125}# #{e2 6126}#)
                                     (append
                                       #{meta 6115}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 6124}#))))))
                                 #{tmp 6117}#)
                               (let ((#{tmp 6127}#
                                       ($sc-dispatch
                                         #{body 6114}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 6127}#
                                   (@apply
                                     (lambda (#{k 6131}#
                                              #{v 6132}#
                                              #{e1 6133}#
                                              #{e2 6134}#)
                                       (#{lp 6111}#
                                         (cons #{e1 6133}# #{e2 6134}#)
                                         (append
                                           #{meta 6115}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 6131}#
                                                  #{v 6132}#)))))
                                     #{tmp 6127}#)
                                   (#{expand-simple-lambda 4355}#
                                     #{e 6092}#
                                     #{r 6093}#
                                     #{w 6094}#
                                     #{s 6095}#
                                     #{mod 6096}#
                                     #{req 6107}#
                                     #{rest 6109}#
                                     #{meta 6115}#
                                     #{body 6114}#))))))))
                      (#{lp 6111}# (cons #{e1 6103}# #{e2 6104}#) '())))))
              #{tmp 6098}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 6092}#)))))
    (#{global-extend 4311}#
      'core
      'lambda*
      (lambda (#{e 6425}#
               #{r 6426}#
               #{w 6427}#
               #{s 6428}#
               #{mod 6429}#)
        (let ((#{tmp 6431}#
                ($sc-dispatch #{e 6425}# '(_ any any . each-any))))
          (if #{tmp 6431}#
            (@apply
              (lambda (#{args 6435}# #{e1 6436}# #{e2 6437}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4357}#
                      #{e 6425}#
                      #{r 6426}#
                      #{w 6427}#
                      #{s 6428}#
                      #{mod 6429}#
                      #{lambda*-formals 4356}#
                      (list (cons #{args 6435}#
                                  (cons #{e1 6436}# #{e2 6437}#)))))
                  (lambda (#{meta 6440}# #{lcase 6441}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6428}#
                      #{meta 6440}#
                      #{lcase 6441}#))))
              #{tmp 6431}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 6425}#)))))
    (#{global-extend 4311}#
      'core
      'case-lambda
      (lambda (#{e 6611}#
               #{r 6612}#
               #{w 6613}#
               #{s 6614}#
               #{mod 6615}#)
        (let ((#{tmp 6617}#
                ($sc-dispatch
                  #{e 6611}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 6617}#
            (@apply
              (lambda (#{args 6621}#
                       #{e1 6622}#
                       #{e2 6623}#
                       #{args* 6624}#
                       #{e1* 6625}#
                       #{e2* 6626}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4357}#
                      #{e 6611}#
                      #{r 6612}#
                      #{w 6613}#
                      #{s 6614}#
                      #{mod 6615}#
                      #{lambda-formals 4354}#
                      (cons (cons #{args 6621}#
                                  (cons #{e1 6622}# #{e2 6623}#))
                            (map (lambda (#{tmp 3274 6629}#
                                          #{tmp 3273 6630}#
                                          #{tmp 3272 6631}#)
                                   (cons #{tmp 3272 6631}#
                                         (cons #{tmp 3273 6630}#
                                               #{tmp 3274 6629}#)))
                                 #{e2* 6626}#
                                 #{e1* 6625}#
                                 #{args* 6624}#))))
                  (lambda (#{meta 6632}# #{lcase 6633}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6614}#
                      #{meta 6632}#
                      #{lcase 6633}#))))
              #{tmp 6617}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 6611}#)))))
    (#{global-extend 4311}#
      'core
      'case-lambda*
      (lambda (#{e 6795}#
               #{r 6796}#
               #{w 6797}#
               #{s 6798}#
               #{mod 6799}#)
        (let ((#{tmp 6801}#
                ($sc-dispatch
                  #{e 6795}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 6801}#
            (@apply
              (lambda (#{args 6805}#
                       #{e1 6806}#
                       #{e2 6807}#
                       #{args* 6808}#
                       #{e1* 6809}#
                       #{e2* 6810}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4357}#
                      #{e 6795}#
                      #{r 6796}#
                      #{w 6797}#
                      #{s 6798}#
                      #{mod 6799}#
                      #{lambda*-formals 4356}#
                      (cons (cons #{args 6805}#
                                  (cons #{e1 6806}# #{e2 6807}#))
                            (map (lambda (#{tmp 3309 6813}#
                                          #{tmp 3308 6814}#
                                          #{tmp 3307 6815}#)
                                   (cons #{tmp 3307 6815}#
                                         (cons #{tmp 3308 6814}#
                                               #{tmp 3309 6813}#)))
                                 #{e2* 6810}#
                                 #{e1* 6809}#
                                 #{args* 6808}#))))
                  (lambda (#{meta 6816}# #{lcase 6817}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6798}#
                      #{meta 6816}#
                      #{lcase 6817}#))))
              #{tmp 6801}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 6795}#)))))
    (#{global-extend 4311}#
      'core
      'let
      (letrec*
        ((#{expand-let 7008}#
           (lambda (#{e 7157}#
                    #{r 7158}#
                    #{w 7159}#
                    #{s 7160}#
                    #{mod 7161}#
                    #{constructor 7162}#
                    #{ids 7163}#
                    #{vals 7164}#
                    #{exps 7165}#)
             (if (not (#{valid-bound-ids? 4335}# #{ids 7163}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 7157}#)
               (let ((#{labels 7243}#
                       (#{gen-labels 4316}# #{ids 7163}#))
                     (#{new-vars 7244}#
                       (map #{gen-var 4359}# #{ids 7163}#)))
                 (let ((#{nw 7245}#
                         (#{make-binding-wrap 4327}#
                           #{ids 7163}#
                           #{labels 7243}#
                           #{w 7159}#))
                       (#{nr 7246}#
                         (#{extend-var-env 4308}#
                           #{labels 7243}#
                           #{new-vars 7244}#
                           #{r 7158}#)))
                   (#{constructor 7162}#
                     #{s 7160}#
                     (map syntax->datum #{ids 7163}#)
                     #{new-vars 7244}#
                     (map (lambda (#{x 7263}#)
                            (#{expand 4345}#
                              #{x 7263}#
                              #{r 7158}#
                              #{w 7159}#
                              #{mod 7161}#))
                          #{vals 7164}#)
                     (#{expand-body 4349}#
                       #{exps 7165}#
                       (#{source-wrap 4339}#
                         #{e 7157}#
                         #{nw 7245}#
                         #{s 7160}#
                         #{mod 7161}#)
                       #{nr 7246}#
                       #{nw 7245}#
                       #{mod 7161}#))))))))
        (lambda (#{e 7009}#
                 #{r 7010}#
                 #{w 7011}#
                 #{s 7012}#
                 #{mod 7013}#)
          (let ((#{tmp 7015}#
                  ($sc-dispatch
                    #{e 7009}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7015}#
                  (@apply
                    (lambda (#{id 7019}#
                             #{val 7020}#
                             #{e1 7021}#
                             #{e2 7022}#)
                      (and-map #{id? 4313}# #{id 7019}#))
                    #{tmp 7015}#)
                  #f)
              (@apply
                (lambda (#{id 7038}#
                         #{val 7039}#
                         #{e1 7040}#
                         #{e2 7041}#)
                  (#{expand-let 7008}#
                    #{e 7009}#
                    #{r 7010}#
                    #{w 7011}#
                    #{s 7012}#
                    #{mod 7013}#
                    #{build-let 4295}#
                    #{id 7038}#
                    #{val 7039}#
                    (cons #{e1 7040}# #{e2 7041}#)))
                #{tmp 7015}#)
              (let ((#{tmp 7071}#
                      ($sc-dispatch
                        #{e 7009}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 7071}#
                      (@apply
                        (lambda (#{f 7075}#
                                 #{id 7076}#
                                 #{val 7077}#
                                 #{e1 7078}#
                                 #{e2 7079}#)
                          (if (if (symbol? #{f 7075}#)
                                #t
                                (if (if (vector? #{f 7075}#)
                                      (if (= (vector-length #{f 7075}#) 4)
                                        (eq? (vector-ref #{f 7075}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 7075}# 1))
                                  #f))
                            (and-map #{id? 4313}# #{id 7076}#)
                            #f))
                        #{tmp 7071}#)
                      #f)
                  (@apply
                    (lambda (#{f 7121}#
                             #{id 7122}#
                             #{val 7123}#
                             #{e1 7124}#
                             #{e2 7125}#)
                      (#{expand-let 7008}#
                        #{e 7009}#
                        #{r 7010}#
                        #{w 7011}#
                        #{s 7012}#
                        #{mod 7013}#
                        #{build-named-let 4296}#
                        (cons #{f 7121}# #{id 7122}#)
                        #{val 7123}#
                        (cons #{e1 7124}# #{e2 7125}#)))
                    #{tmp 7071}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (#{wrap 4338}#
                      (begin
                        (if (if (pair? #{e 7009}#) #{s 7012}# #f)
                          (set-source-properties! #{e 7009}# #{s 7012}#))
                        #{e 7009}#)
                      #{w 7011}#
                      #{mod 7013}#)))))))))
    (#{global-extend 4311}#
      'core
      'letrec
      (lambda (#{e 7705}#
               #{r 7706}#
               #{w 7707}#
               #{s 7708}#
               #{mod 7709}#)
        (let ((#{tmp 7711}#
                ($sc-dispatch
                  #{e 7705}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 7711}#
                (@apply
                  (lambda (#{id 7715}#
                           #{val 7716}#
                           #{e1 7717}#
                           #{e2 7718}#)
                    (and-map #{id? 4313}# #{id 7715}#))
                  #{tmp 7711}#)
                #f)
            (@apply
              (lambda (#{id 7734}#
                       #{val 7735}#
                       #{e1 7736}#
                       #{e2 7737}#)
                (if (not (#{valid-bound-ids? 4335}# #{id 7734}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 7705}#)
                  (let ((#{labels 7827}#
                          (#{gen-labels 4316}# #{id 7734}#))
                        (#{new-vars 7828}#
                          (map #{gen-var 4359}# #{id 7734}#)))
                    (let ((#{w 7829}#
                            (#{make-binding-wrap 4327}#
                              #{id 7734}#
                              #{labels 7827}#
                              #{w 7707}#))
                          (#{r 7830}#
                            (#{extend-var-env 4308}#
                              #{labels 7827}#
                              #{new-vars 7828}#
                              #{r 7706}#)))
                      (#{build-letrec 4297}#
                        #{s 7708}#
                        #f
                        (map syntax->datum #{id 7734}#)
                        #{new-vars 7828}#
                        (map (lambda (#{x 7917}#)
                               (#{expand 4345}#
                                 #{x 7917}#
                                 #{r 7830}#
                                 #{w 7829}#
                                 #{mod 7709}#))
                             #{val 7735}#)
                        (#{expand-body 4349}#
                          (cons #{e1 7736}# #{e2 7737}#)
                          (#{wrap 4338}#
                            (begin
                              (if (if (pair? #{e 7705}#) #{s 7708}# #f)
                                (set-source-properties! #{e 7705}# #{s 7708}#))
                              #{e 7705}#)
                            #{w 7829}#
                            #{mod 7709}#)
                          #{r 7830}#
                          #{w 7829}#
                          #{mod 7709}#))))))
              #{tmp 7711}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (#{wrap 4338}#
                (begin
                  (if (if (pair? #{e 7705}#) #{s 7708}# #f)
                    (set-source-properties! #{e 7705}# #{s 7708}#))
                  #{e 7705}#)
                #{w 7707}#
                #{mod 7709}#))))))
    (#{global-extend 4311}#
      'core
      'letrec*
      (lambda (#{e 8334}#
               #{r 8335}#
               #{w 8336}#
               #{s 8337}#
               #{mod 8338}#)
        (let ((#{tmp 8340}#
                ($sc-dispatch
                  #{e 8334}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 8340}#
                (@apply
                  (lambda (#{id 8344}#
                           #{val 8345}#
                           #{e1 8346}#
                           #{e2 8347}#)
                    (and-map #{id? 4313}# #{id 8344}#))
                  #{tmp 8340}#)
                #f)
            (@apply
              (lambda (#{id 8363}#
                       #{val 8364}#
                       #{e1 8365}#
                       #{e2 8366}#)
                (if (not (#{valid-bound-ids? 4335}# #{id 8363}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 8334}#)
                  (let ((#{labels 8456}#
                          (#{gen-labels 4316}# #{id 8363}#))
                        (#{new-vars 8457}#
                          (map #{gen-var 4359}# #{id 8363}#)))
                    (let ((#{w 8458}#
                            (#{make-binding-wrap 4327}#
                              #{id 8363}#
                              #{labels 8456}#
                              #{w 8336}#))
                          (#{r 8459}#
                            (#{extend-var-env 4308}#
                              #{labels 8456}#
                              #{new-vars 8457}#
                              #{r 8335}#)))
                      (#{build-letrec 4297}#
                        #{s 8337}#
                        #t
                        (map syntax->datum #{id 8363}#)
                        #{new-vars 8457}#
                        (map (lambda (#{x 8546}#)
                               (#{expand 4345}#
                                 #{x 8546}#
                                 #{r 8459}#
                                 #{w 8458}#
                                 #{mod 8338}#))
                             #{val 8364}#)
                        (#{expand-body 4349}#
                          (cons #{e1 8365}# #{e2 8366}#)
                          (#{wrap 4338}#
                            (begin
                              (if (if (pair? #{e 8334}#) #{s 8337}# #f)
                                (set-source-properties! #{e 8334}# #{s 8337}#))
                              #{e 8334}#)
                            #{w 8458}#
                            #{mod 8338}#)
                          #{r 8459}#
                          #{w 8458}#
                          #{mod 8338}#))))))
              #{tmp 8340}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (#{wrap 4338}#
                (begin
                  (if (if (pair? #{e 8334}#) #{s 8337}# #f)
                    (set-source-properties! #{e 8334}# #{s 8337}#))
                  #{e 8334}#)
                #{w 8336}#
                #{mod 8338}#))))))
    (#{global-extend 4311}#
      'core
      'set!
      (lambda (#{e 9005}#
               #{r 9006}#
               #{w 9007}#
               #{s 9008}#
               #{mod 9009}#)
        (let ((#{tmp 9011}#
                ($sc-dispatch #{e 9005}# '(_ any any))))
          (if (if #{tmp 9011}#
                (@apply
                  (lambda (#{id 9015}# #{val 9016}#)
                    (if (symbol? #{id 9015}#)
                      #t
                      (if (if (vector? #{id 9015}#)
                            (if (= (vector-length #{id 9015}#) 4)
                              (eq? (vector-ref #{id 9015}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 9015}# 1))
                        #f)))
                  #{tmp 9011}#)
                #f)
            (@apply
              (lambda (#{id 9043}# #{val 9044}#)
                (let ((#{n 9045}#
                        (#{id-var-name 4332}# #{id 9043}# #{w 9007}#))
                      (#{id-mod 9046}#
                        (if (if (vector? #{id 9043}#)
                              (if (= (vector-length #{id 9043}#) 4)
                                (eq? (vector-ref #{id 9043}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{id 9043}# 3)
                          #{mod 9009}#)))
                  (let ((#{b 9047}#
                          (let ((#{t 9709}# (assq #{n 9045}# #{r 9006}#)))
                            (if #{t 9709}#
                              (cdr #{t 9709}#)
                              (if (symbol? #{n 9045}#)
                                (let ((#{t 9714}#
                                        (begin
                                          (if (if (not #{id-mod 9046}#)
                                                (current-module)
                                                #f)
                                            (warn "module system is booted, we should have a module"
                                                  #{n 9045}#))
                                          (let ((#{v 9751}#
                                                  (module-variable
                                                    (if #{id-mod 9046}#
                                                      (resolve-module
                                                        (cdr #{id-mod 9046}#))
                                                      (current-module))
                                                    #{n 9045}#)))
                                            (if #{v 9751}#
                                              (if (variable-bound? #{v 9751}#)
                                                (let ((#{val 9760}#
                                                        (variable-ref
                                                          #{v 9751}#)))
                                                  (if (macro? #{val 9760}#)
                                                    (if (macro-type
                                                          #{val 9760}#)
                                                      (cons (macro-type
                                                              #{val 9760}#)
                                                            (macro-binding
                                                              #{val 9760}#))
                                                      #f)
                                                    #f))
                                                #f)
                                              #f)))))
                                  (if #{t 9714}# #{t 9714}# '(global)))
                                '(displaced-lexical))))))
                    (let ((#{atom-key 9048}# (car #{b 9047}#)))
                      (if (let ((#{t 9080}# #{atom-key 9048}#))
                            (eqv? #{t 9080}# 'lexical))
                        (#{build-lexical-assignment 4284}#
                          #{s 9008}#
                          (syntax->datum #{id 9043}#)
                          (cdr #{b 9047}#)
                          (#{expand 4345}#
                            #{val 9044}#
                            #{r 9006}#
                            #{w 9007}#
                            #{mod 9009}#))
                        (if (let ((#{t 9355}# #{atom-key 9048}#))
                              (eqv? #{t 9355}# 'global))
                          (#{build-global-assignment 4287}#
                            #{s 9008}#
                            #{n 9045}#
                            (#{expand 4345}#
                              #{val 9044}#
                              #{r 9006}#
                              #{w 9007}#
                              #{mod 9009}#)
                            #{id-mod 9046}#)
                          (if (let ((#{t 9600}# #{atom-key 9048}#))
                                (eqv? #{t 9600}# 'macro))
                            (let ((#{p 9663}# (cdr #{b 9047}#)))
                              (if (procedure-property
                                    #{p 9663}#
                                    'variable-transformer)
                                (#{expand 4345}#
                                  (#{expand-macro 4348}#
                                    #{p 9663}#
                                    #{e 9005}#
                                    #{r 9006}#
                                    #{w 9007}#
                                    #{s 9008}#
                                    #f
                                    #{mod 9009}#)
                                  #{r 9006}#
                                  '(())
                                  #{mod 9009}#)
                                (syntax-violation
                                  'set!
                                  "not a variable transformer"
                                  (#{wrap 4338}#
                                    #{e 9005}#
                                    #{w 9007}#
                                    #{mod 9009}#)
                                  (#{wrap 4338}#
                                    #{id 9043}#
                                    #{w 9007}#
                                    #{id-mod 9046}#))))
                            (if (eqv? #{atom-key 9048}# 'displaced-lexical)
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (#{wrap 4338}#
                                  #{id 9043}#
                                  #{w 9007}#
                                  #{mod 9009}#))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (#{wrap 4338}#
                                  (begin
                                    (if (if (pair? #{e 9005}#) #{s 9008}# #f)
                                      (set-source-properties!
                                        #{e 9005}#
                                        #{s 9008}#))
                                    #{e 9005}#)
                                  #{w 9007}#
                                  #{mod 9009}#))))))))))
              #{tmp 9011}#)
            (let ((#{tmp 9856}#
                    ($sc-dispatch
                      #{e 9005}#
                      '(_ (any . each-any) any))))
              (if #{tmp 9856}#
                (@apply
                  (lambda (#{head 9860}# #{tail 9861}# #{val 9862}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4344}#
                          #{head 9860}#
                          #{r 9006}#
                          '(())
                          #f
                          #f
                          #{mod 9009}#
                          #t))
                      (lambda (#{type 9865}#
                               #{value 9866}#
                               #{ee 9867}#
                               #{ww 9868}#
                               #{ss 9869}#
                               #{modmod 9870}#)
                        (if (eqv? #{type 9865}# 'module-ref)
                          (let ((#{val 9874}#
                                  (#{expand 4345}#
                                    #{val 9862}#
                                    #{r 9006}#
                                    #{w 9007}#
                                    #{mod 9009}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 9866}#
                                  (cons #{head 9860}# #{tail 9861}#)
                                  #{r 9006}#
                                  #{w 9007}#))
                              (lambda (#{e 9875}#
                                       #{r 9876}#
                                       #{w 9877}#
                                       #{s* 9878}#
                                       #{mod 9879}#)
                                (let ((#{tmp 9881}# (list #{e 9875}#)))
                                  (if (@apply
                                        (lambda (#{e 9883}#)
                                          (if (symbol? #{e 9883}#)
                                            #t
                                            (if (if (vector? #{e 9883}#)
                                                  (if (= (vector-length
                                                           #{e 9883}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 9883}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 9883}# 1))
                                              #f)))
                                        #{tmp 9881}#)
                                    (@apply
                                      (lambda (#{e 9913}#)
                                        (#{build-global-assignment 4287}#
                                          #{s 9008}#
                                          (syntax->datum #{e 9913}#)
                                          #{val 9874}#
                                          #{mod 9879}#))
                                      #{tmp 9881}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 9875}#))))))
                          (#{build-application 4280}#
                            #{s 9008}#
                            (let ((#{e 10138}#
                                    (list '#(syntax-object
                                             setter
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(type value ee ww ss modmod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3555"
                                                  "i3556"
                                                  "i3557"
                                                  "i3558"
                                                  "i3559"
                                                  "i3560"))
                                              #(ribcage
                                                #(head tail val)
                                                #((top) (top) (top))
                                                #("i3541" "i3542" "i3543"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(e r w s mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3505"
                                                  "i3506"
                                                  "i3507"
                                                  "i3508"
                                                  "i3509"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile))
                                          #{head 9860}#)))
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type 4344}#
                                    #{e 10138}#
                                    #{r 9006}#
                                    #{w 9007}#
                                    (#{source-annotation 4306}# #{e 10138}#)
                                    #f
                                    #{mod 9009}#
                                    #f))
                                (lambda (#{type 10145}#
                                         #{value 10146}#
                                         #{e 10147}#
                                         #{w 10148}#
                                         #{s 10149}#
                                         #{mod 10150}#)
                                  (#{expand-expr 4346}#
                                    #{type 10145}#
                                    #{value 10146}#
                                    #{e 10147}#
                                    #{r 9006}#
                                    #{w 10148}#
                                    #{s 10149}#
                                    #{mod 10150}#))))
                            (map (lambda (#{e 10154}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{syntax-type 4344}#
                                         #{e 10154}#
                                         #{r 9006}#
                                         #{w 9007}#
                                         (#{source-annotation 4306}#
                                           #{e 10154}#)
                                         #f
                                         #{mod 9009}#
                                         #f))
                                     (lambda (#{type 10169}#
                                              #{value 10170}#
                                              #{e 10171}#
                                              #{w 10172}#
                                              #{s 10173}#
                                              #{mod 10174}#)
                                       (#{expand-expr 4346}#
                                         #{type 10169}#
                                         #{value 10170}#
                                         #{e 10171}#
                                         #{r 9006}#
                                         #{w 10172}#
                                         #{s 10173}#
                                         #{mod 10174}#))))
                                 (append
                                   #{tail 9861}#
                                   (list #{val 9862}#))))))))
                  #{tmp 9856}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (#{wrap 4338}#
                    (begin
                      (if (if (pair? #{e 9005}#) #{s 9008}# #f)
                        (set-source-properties! #{e 9005}# #{s 9008}#))
                      #{e 9005}#)
                    #{w 9007}#
                    #{mod 9009}#))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 10217}# #{r 10218}# #{w 10219}#)
          (let ((#{tmp 10221}#
                  ($sc-dispatch #{e 10217}# '(_ each-any any))))
            (if (if #{tmp 10221}#
                  (@apply
                    (lambda (#{mod 10224}# #{id 10225}#)
                      (if (and-map #{id? 4313}# #{mod 10224}#)
                        (if (symbol? #{id 10225}#)
                          #t
                          (if (if (vector? #{id 10225}#)
                                (if (= (vector-length #{id 10225}#) 4)
                                  (eq? (vector-ref #{id 10225}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 10225}# 1))
                            #f))
                        #f))
                    #{tmp 10221}#)
                  #f)
              (@apply
                (lambda (#{mod 10265}# #{id 10266}#)
                  (values
                    (syntax->datum #{id 10266}#)
                    #{r 10218}#
                    #{w 10219}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3602" "i3603"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3590" "i3591" "i3592"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    expand-lambda-case
                                    lambda*-formals
                                    expand-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    expand-void
                                    eval-local-transformer
                                    expand-local-syntax
                                    expand-body
                                    expand-macro
                                    expand-application
                                    expand-expr
                                    expand
                                    syntax-type
                                    parse-when-list
                                    expand-install-global
                                    expand-top-sequence
                                    expand-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    lookup
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-application
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-sequence
                                    make-application
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i467"
                                   "i465"
                                   "i463"
                                   "i461"
                                   "i459"
                                   "i457"
                                   "i455"
                                   "i453"
                                   "i451"
                                   "i449"
                                   "i447"
                                   "i445"
                                   "i443"
                                   "i441"
                                   "i439"
                                   "i437"
                                   "i435"
                                   "i433"
                                   "i431"
                                   "i429"
                                   "i427"
                                   "i425"
                                   "i423"
                                   "i421"
                                   "i419"
                                   "i417"
                                   "i415"
                                   "i413"
                                   "i411"
                                   "i409"
                                   "i407"
                                   "i405"
                                   "i403"
                                   "i401"
                                   "i399"
                                   "i398"
                                   "i396"
                                   "i393"
                                   "i392"
                                   "i391"
                                   "i389"
                                   "i388"
                                   "i386"
                                   "i384"
                                   "i382"
                                   "i380"
                                   "i378"
                                   "i376"
                                   "i374"
                                   "i372"
                                   "i369"
                                   "i367"
                                   "i366"
                                   "i364"
                                   "i362"
                                   "i360"
                                   "i358"
                                   "i357"
                                   "i356"
                                   "i355"
                                   "i353"
                                   "i352"
                                   "i349"
                                   "i347"
                                   "i345"
                                   "i343"
                                   "i341"
                                   "i339"
                                   "i337"
                                   "i336"
                                   "i335"
                                   "i333"
                                   "i331"
                                   "i330"
                                   "i327"
                                   "i326"
                                   "i324"
                                   "i322"
                                   "i320"
                                   "i318"
                                   "i316"
                                   "i314"
                                   "i312"
                                   "i310"
                                   "i308"
                                   "i305"
                                   "i303"
                                   "i301"
                                   "i299"
                                   "i297"
                                   "i295"
                                   "i293"
                                   "i291"
                                   "i289"
                                   "i287"
                                   "i285"
                                   "i283"
                                   "i281"
                                   "i279"
                                   "i277"
                                   "i275"
                                   "i273"
                                   "i271"
                                   "i269"
                                   "i267"
                                   "i265"
                                   "i263"
                                   "i261"
                                   "i260"
                                   "i257"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i252"
                                   "i251"
                                   "i249"
                                   "i247"
                                   "i245"
                                   "i242"
                                   "i240"
                                   "i238"
                                   "i236"
                                   "i234"
                                   "i232"
                                   "i230"
                                   "i228"
                                   "i226"
                                   "i224"
                                   "i222"
                                   "i220"
                                   "i218"
                                   "i216"
                                   "i214"
                                   "i212"
                                   "i210"
                                   "i208"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i46" "i45" "i44")))
                               (hygiene guile))
                            #{mod 10265}#))))
                #{tmp 10221}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10217}#))))))
    (#{global-extend 4311}#
      'module-ref
      '@@
      (lambda (#{e 10358}# #{r 10359}# #{w 10360}#)
        (letrec*
          ((#{remodulate 10361}#
             (lambda (#{x 10396}# #{mod 10397}#)
               (if (pair? #{x 10396}#)
                 (cons (#{remodulate 10361}#
                         (car #{x 10396}#)
                         #{mod 10397}#)
                       (#{remodulate 10361}#
                         (cdr #{x 10396}#)
                         #{mod 10397}#))
                 (if (if (vector? #{x 10396}#)
                       (if (= (vector-length #{x 10396}#) 4)
                         (eq? (vector-ref #{x 10396}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 10411}#
                           (#{remodulate 10361}#
                             (vector-ref #{x 10396}# 1)
                             #{mod 10397}#))
                         (#{wrap 10412}# (vector-ref #{x 10396}# 2)))
                     (vector
                       'syntax-object
                       #{expression 10411}#
                       #{wrap 10412}#
                       #{mod 10397}#))
                   (if (vector? #{x 10396}#)
                     (let ((#{n 10420}# (vector-length #{x 10396}#)))
                       (let ((#{v 10421}# (make-vector #{n 10420}#)))
                         (letrec*
                           ((#{loop 10422}#
                              (lambda (#{i 10469}#)
                                (if (= #{i 10469}# #{n 10420}#)
                                  #{v 10421}#
                                  (begin
                                    (vector-set!
                                      #{v 10421}#
                                      #{i 10469}#
                                      (#{remodulate 10361}#
                                        (vector-ref #{x 10396}# #{i 10469}#)
                                        #{mod 10397}#))
                                    (#{loop 10422}# (#{1+}# #{i 10469}#)))))))
                           (#{loop 10422}# 0))))
                     #{x 10396}#))))))
          (let ((#{tmp 10363}#
                  ($sc-dispatch #{e 10358}# '(_ each-any any))))
            (if (if #{tmp 10363}#
                  (@apply
                    (lambda (#{mod 10367}# #{exp 10368}#)
                      (and-map #{id? 4313}# #{mod 10367}#))
                    #{tmp 10363}#)
                  #f)
              (@apply
                (lambda (#{mod 10384}# #{exp 10385}#)
                  (let ((#{mod 10386}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3646" "i3647"))
                                      #(ribcage (remodulate) ((top)) ("i3613"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3610" "i3611" "i3612"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          expand-lambda-case
                                          lambda*-formals
                                          expand-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          expand-void
                                          eval-local-transformer
                                          expand-local-syntax
                                          expand-body
                                          expand-macro
                                          expand-application
                                          expand-expr
                                          expand
                                          syntax-type
                                          parse-when-list
                                          expand-install-global
                                          expand-top-sequence
                                          expand-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-application
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-sequence
                                          make-application
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i467"
                                         "i465"
                                         "i463"
                                         "i461"
                                         "i459"
                                         "i457"
                                         "i455"
                                         "i453"
                                         "i451"
                                         "i449"
                                         "i447"
                                         "i445"
                                         "i443"
                                         "i441"
                                         "i439"
                                         "i437"
                                         "i435"
                                         "i433"
                                         "i431"
                                         "i429"
                                         "i427"
                                         "i425"
                                         "i423"
                                         "i421"
                                         "i419"
                                         "i417"
                                         "i415"
                                         "i413"
                                         "i411"
                                         "i409"
                                         "i407"
                                         "i405"
                                         "i403"
                                         "i401"
                                         "i399"
                                         "i398"
                                         "i396"
                                         "i393"
                                         "i392"
                                         "i391"
                                         "i389"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i382"
                                         "i380"
                                         "i378"
                                         "i376"
                                         "i374"
                                         "i372"
                                         "i369"
                                         "i367"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i360"
                                         "i358"
                                         "i357"
                                         "i356"
                                         "i355"
                                         "i353"
                                         "i352"
                                         "i349"
                                         "i347"
                                         "i345"
                                         "i343"
                                         "i341"
                                         "i339"
                                         "i337"
                                         "i336"
                                         "i335"
                                         "i333"
                                         "i331"
                                         "i330"
                                         "i327"
                                         "i326"
                                         "i324"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i310"
                                         "i308"
                                         "i305"
                                         "i303"
                                         "i301"
                                         "i299"
                                         "i297"
                                         "i295"
                                         "i293"
                                         "i291"
                                         "i289"
                                         "i287"
                                         "i285"
                                         "i283"
                                         "i281"
                                         "i279"
                                         "i277"
                                         "i275"
                                         "i273"
                                         "i271"
                                         "i269"
                                         "i267"
                                         "i265"
                                         "i263"
                                         "i261"
                                         "i260"
                                         "i257"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i252"
                                         "i251"
                                         "i249"
                                         "i247"
                                         "i245"
                                         "i242"
                                         "i240"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i46" "i45" "i44")))
                                     (hygiene guile))
                                  #{mod 10384}#))))
                    (values
                      (#{remodulate 10361}#
                        #{exp 10385}#
                        #{mod 10386}#)
                      #{r 10359}#
                      #{w 10360}#
                      (#{source-annotation 4306}# #{exp 10385}#)
                      #{mod 10386}#)))
                #{tmp 10363}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10358}#))))))
    (#{global-extend 4311}#
      'core
      'if
      (lambda (#{e 10570}#
               #{r 10571}#
               #{w 10572}#
               #{s 10573}#
               #{mod 10574}#)
        (let ((#{tmp 10576}#
                ($sc-dispatch #{e 10570}# '(_ any any))))
          (if #{tmp 10576}#
            (@apply
              (lambda (#{test 10580}# #{then 10581}#)
                (#{build-conditional 4281}#
                  #{s 10573}#
                  (#{expand 4345}#
                    #{test 10580}#
                    #{r 10571}#
                    #{w 10572}#
                    #{mod 10574}#)
                  (#{expand 4345}#
                    #{then 10581}#
                    #{r 10571}#
                    #{w 10572}#
                    #{mod 10574}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 10576}#)
            (let ((#{tmp 10806}#
                    ($sc-dispatch #{e 10570}# '(_ any any any))))
              (if #{tmp 10806}#
                (@apply
                  (lambda (#{test 10810}# #{then 10811}# #{else 10812}#)
                    (#{build-conditional 4281}#
                      #{s 10573}#
                      (#{expand 4345}#
                        #{test 10810}#
                        #{r 10571}#
                        #{w 10572}#
                        #{mod 10574}#)
                      (#{expand 4345}#
                        #{then 10811}#
                        #{r 10571}#
                        #{w 10572}#
                        #{mod 10574}#)
                      (#{expand 4345}#
                        #{else 10812}#
                        #{r 10571}#
                        #{w 10572}#
                        #{mod 10574}#)))
                  #{tmp 10806}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 10570}#)))))))
    (#{global-extend 4311}#
      'core
      'with-fluids
      (lambda (#{e 11211}#
               #{r 11212}#
               #{w 11213}#
               #{s 11214}#
               #{mod 11215}#)
        (let ((#{tmp 11217}#
                ($sc-dispatch
                  #{e 11211}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 11217}#
            (@apply
              (lambda (#{fluid 11221}#
                       #{val 11222}#
                       #{b 11223}#
                       #{b* 11224}#)
                (#{build-dynlet 4282}#
                  #{s 11214}#
                  (map (lambda (#{x 11305}#)
                         (#{expand 4345}#
                           #{x 11305}#
                           #{r 11212}#
                           #{w 11213}#
                           #{mod 11215}#))
                       #{fluid 11221}#)
                  (map (lambda (#{x 11375}#)
                         (#{expand 4345}#
                           #{x 11375}#
                           #{r 11212}#
                           #{w 11213}#
                           #{mod 11215}#))
                       #{val 11222}#)
                  (#{expand-body 4349}#
                    (cons #{b 11223}# #{b* 11224}#)
                    (#{wrap 4338}#
                      (begin
                        (if (if (pair? #{e 11211}#) #{s 11214}# #f)
                          (set-source-properties! #{e 11211}# #{s 11214}#))
                        #{e 11211}#)
                      #{w 11213}#
                      #{mod 11215}#)
                    #{r 11212}#
                    #{w 11213}#
                    #{mod 11215}#)))
              #{tmp 11217}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 11211}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'define-syntax-parameter
      (make-syntax-transformer
        'define-syntax-parameter
        'define-syntax-parameter
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 4311}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 11743}#
           (lambda (#{pattern 13340}# #{keys 13341}#)
             (letrec*
               ((#{cvt* 13342}#
                  (lambda (#{p* 13966}# #{n 13967}# #{ids 13968}#)
                    (if (not (pair? #{p* 13966}#))
                      (#{cvt 13344}#
                        #{p* 13966}#
                        #{n 13967}#
                        #{ids 13968}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 13342}#
                            (cdr #{p* 13966}#)
                            #{n 13967}#
                            #{ids 13968}#))
                        (lambda (#{y 13971}# #{ids 13972}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 13344}#
                                (car #{p* 13966}#)
                                #{n 13967}#
                                #{ids 13972}#))
                            (lambda (#{x 13975}# #{ids 13976}#)
                              (values
                                (cons #{x 13975}# #{y 13971}#)
                                #{ids 13976}#))))))))
                (#{v-reverse 13343}#
                  (lambda (#{x 13977}#)
                    (letrec*
                      ((#{loop 13978}#
                         (lambda (#{r 14058}# #{x 14059}#)
                           (if (not (pair? #{x 14059}#))
                             (values #{r 14058}# #{x 14059}#)
                             (#{loop 13978}#
                               (cons (car #{x 14059}#) #{r 14058}#)
                               (cdr #{x 14059}#))))))
                      (#{loop 13978}# '() #{x 13977}#))))
                (#{cvt 13344}#
                  (lambda (#{p 13347}# #{n 13348}# #{ids 13349}#)
                    (if (if (symbol? #{p 13347}#)
                          #t
                          (if (if (vector? #{p 13347}#)
                                (if (= (vector-length #{p 13347}#) 4)
                                  (eq? (vector-ref #{p 13347}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 13347}# 1))
                            #f))
                      (if (#{bound-id-member? 4337}#
                            #{p 13347}#
                            #{keys 13341}#)
                        (values
                          (vector 'free-id #{p 13347}#)
                          #{ids 13349}#)
                        (if (if (eq? (if (if (vector? #{p 13347}#)
                                           (if (= (vector-length #{p 13347}#)
                                                  4)
                                             (eq? (vector-ref #{p 13347}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (vector-ref #{p 13347}# 1)
                                       #{p 13347}#)
                                     (if (if (= (vector-length
                                                  '#(syntax-object
                                                     _
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(p n ids)
                                                        #((top) (top) (top))
                                                        #("i3747"
                                                          "i3748"
                                                          "i3749"))
                                                      #(ribcage
                                                        (cvt v-reverse cvt*)
                                                        ((top) (top) (top))
                                                        ("i3720"
                                                         "i3718"
                                                         "i3716"))
                                                      #(ribcage
                                                        #(pattern keys)
                                                        #((top) (top))
                                                        #("i3714" "i3715"))
                                                      #(ribcage
                                                        (gen-syntax-case
                                                          gen-clause
                                                          build-dispatch-call
                                                          convert-pattern)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i3710"
                                                         "i3708"
                                                         "i3706"
                                                         "i3704"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile)))
                                                4)
                                           #t
                                           #f)
                                       '_
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("i3747" "i3748" "i3749"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("i3720" "i3718" "i3716"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("i3714" "i3715"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3710" "i3708" "i3706" "i3704"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))))
                              (eq? (#{id-var-name 4332}# #{p 13347}# '(()))
                                   (#{id-var-name 4332}#
                                     '#(syntax-object
                                        _
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p n ids)
                                           #((top) (top) (top))
                                           #("i3747" "i3748" "i3749"))
                                         #(ribcage
                                           (cvt v-reverse cvt*)
                                           ((top) (top) (top))
                                           ("i3720" "i3718" "i3716"))
                                         #(ribcage
                                           #(pattern keys)
                                           #((top) (top))
                                           #("i3714" "i3715"))
                                         #(ribcage
                                           (gen-syntax-case
                                             gen-clause
                                             build-dispatch-call
                                             convert-pattern)
                                           ((top) (top) (top) (top))
                                           ("i3710" "i3708" "i3706" "i3704"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             expand-lambda-case
                                             lambda*-formals
                                             expand-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             expand-void
                                             eval-local-transformer
                                             expand-local-syntax
                                             expand-body
                                             expand-macro
                                             expand-application
                                             expand-expr
                                             expand
                                             syntax-type
                                             parse-when-list
                                             expand-install-global
                                             expand-top-sequence
                                             expand-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             maybe-name-value!
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             set-lambda-meta!
                                             lambda-meta
                                             lambda?
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i467"
                                            "i465"
                                            "i463"
                                            "i461"
                                            "i459"
                                            "i457"
                                            "i455"
                                            "i453"
                                            "i451"
                                            "i449"
                                            "i447"
                                            "i445"
                                            "i443"
                                            "i441"
                                            "i439"
                                            "i437"
                                            "i435"
                                            "i433"
                                            "i431"
                                            "i429"
                                            "i427"
                                            "i425"
                                            "i423"
                                            "i421"
                                            "i419"
                                            "i417"
                                            "i415"
                                            "i413"
                                            "i411"
                                            "i409"
                                            "i407"
                                            "i405"
                                            "i403"
                                            "i401"
                                            "i399"
                                            "i398"
                                            "i396"
                                            "i393"
                                            "i392"
                                            "i391"
                                            "i389"
                                            "i388"
                                            "i386"
                                            "i384"
                                            "i382"
                                            "i380"
                                            "i378"
                                            "i376"
                                            "i374"
                                            "i372"
                                            "i369"
                                            "i367"
                                            "i366"
                                            "i364"
                                            "i362"
                                            "i360"
                                            "i358"
                                            "i357"
                                            "i356"
                                            "i355"
                                            "i353"
                                            "i352"
                                            "i349"
                                            "i347"
                                            "i345"
                                            "i343"
                                            "i341"
                                            "i339"
                                            "i337"
                                            "i336"
                                            "i335"
                                            "i333"
                                            "i331"
                                            "i330"
                                            "i327"
                                            "i326"
                                            "i324"
                                            "i322"
                                            "i320"
                                            "i318"
                                            "i316"
                                            "i314"
                                            "i312"
                                            "i310"
                                            "i308"
                                            "i305"
                                            "i303"
                                            "i301"
                                            "i299"
                                            "i297"
                                            "i295"
                                            "i293"
                                            "i291"
                                            "i289"
                                            "i287"
                                            "i285"
                                            "i283"
                                            "i281"
                                            "i279"
                                            "i277"
                                            "i275"
                                            "i273"
                                            "i271"
                                            "i269"
                                            "i267"
                                            "i265"
                                            "i263"
                                            "i261"
                                            "i260"
                                            "i257"
                                            "i255"
                                            "i254"
                                            "i253"
                                            "i252"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i245"
                                            "i242"
                                            "i240"
                                            "i238"
                                            "i236"
                                            "i234"
                                            "i232"
                                            "i230"
                                            "i228"
                                            "i226"
                                            "i224"
                                            "i222"
                                            "i220"
                                            "i218"
                                            "i216"
                                            "i214"
                                            "i212"
                                            "i210"
                                            "i208"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-accessors
                                             define-expansion-constructors)
                                           ((top) (top) (top))
                                           ("i46" "i45" "i44")))
                                        (hygiene guile))
                                     '(())))
                              #f)
                          (values '_ #{ids 13349}#)
                          (values
                            'any
                            (cons (cons #{p 13347}# #{n 13348}#)
                                  #{ids 13349}#))))
                      (let ((#{tmp 13669}#
                              ($sc-dispatch #{p 13347}# '(any any))))
                        (if (if #{tmp 13669}#
                              (@apply
                                (lambda (#{x 13673}# #{dots 13674}#)
                                  (if (if (if (vector? #{dots 13674}#)
                                            (if (= (vector-length
                                                     #{dots 13674}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 13674}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 13674}# 1))
                                        #f)
                                    (if (eq? (if (if (vector? #{dots 13674}#)
                                                   (if (= (vector-length
                                                            #{dots 13674}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{dots 13674}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{dots 13674}# 1)
                                               #{dots 13674}#)
                                             (if (if (= (vector-length
                                                          '#(syntax-object
                                                             ...
                                                             ((top)
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(x)
                                                                #((top))
                                                                #("i2230"))
                                                              #(ribcage
                                                                (lambda-var-list
                                                                  gen-var
                                                                  strip
                                                                  expand-lambda-case
                                                                  lambda*-formals
                                                                  expand-simple-lambda
                                                                  lambda-formals
                                                                  ellipsis?
                                                                  expand-void
                                                                  eval-local-transformer
                                                                  expand-local-syntax
                                                                  expand-body
                                                                  expand-macro
                                                                  expand-application
                                                                  expand-expr
                                                                  expand
                                                                  syntax-type
                                                                  parse-when-list
                                                                  expand-install-global
                                                                  expand-top-sequence
                                                                  expand-sequence
                                                                  source-wrap
                                                                  wrap
                                                                  bound-id-member?
                                                                  distinct-bound-ids?
                                                                  valid-bound-ids?
                                                                  bound-id=?
                                                                  free-id=?
                                                                  id-var-name
                                                                  same-marks?
                                                                  join-marks
                                                                  join-wraps
                                                                  smart-append
                                                                  make-binding-wrap
                                                                  extend-ribcage!
                                                                  make-empty-ribcage
                                                                  new-mark
                                                                  anti-mark
                                                                  the-anti-mark
                                                                  top-marked?
                                                                  top-wrap
                                                                  empty-wrap
                                                                  set-ribcage-labels!
                                                                  set-ribcage-marks!
                                                                  set-ribcage-symnames!
                                                                  ribcage-labels
                                                                  ribcage-marks
                                                                  ribcage-symnames
                                                                  ribcage?
                                                                  make-ribcage
                                                                  gen-labels
                                                                  gen-label
                                                                  make-rename
                                                                  rename-marks
                                                                  rename-new
                                                                  rename-old
                                                                  subst-rename?
                                                                  wrap-subst
                                                                  wrap-marks
                                                                  make-wrap
                                                                  id-sym-name&marks
                                                                  id-sym-name
                                                                  id?
                                                                  nonsymbol-id?
                                                                  global-extend
                                                                  lookup
                                                                  macros-only-env
                                                                  extend-var-env
                                                                  extend-env
                                                                  null-env
                                                                  binding-value
                                                                  binding-type
                                                                  make-binding
                                                                  arg-check
                                                                  source-annotation
                                                                  no-source
                                                                  set-syntax-object-module!
                                                                  set-syntax-object-wrap!
                                                                  set-syntax-object-expression!
                                                                  syntax-object-module
                                                                  syntax-object-wrap
                                                                  syntax-object-expression
                                                                  syntax-object?
                                                                  make-syntax-object
                                                                  build-lexical-var
                                                                  build-letrec
                                                                  build-named-let
                                                                  build-let
                                                                  build-sequence
                                                                  build-data
                                                                  build-primref
                                                                  build-lambda-case
                                                                  build-case-lambda
                                                                  build-simple-lambda
                                                                  build-global-definition
                                                                  build-global-assignment
                                                                  build-global-reference
                                                                  analyze-variable
                                                                  build-lexical-assignment
                                                                  build-lexical-reference
                                                                  build-dynlet
                                                                  build-conditional
                                                                  build-application
                                                                  build-void
                                                                  maybe-name-value!
                                                                  decorate-source
                                                                  get-global-definition-hook
                                                                  put-global-definition-hook
                                                                  gensym-hook
                                                                  local-eval-hook
                                                                  top-level-eval-hook
                                                                  fx<
                                                                  fx=
                                                                  fx-
                                                                  fx+
                                                                  set-lambda-meta!
                                                                  lambda-meta
                                                                  lambda?
                                                                  make-dynlet
                                                                  make-letrec
                                                                  make-let
                                                                  make-lambda-case
                                                                  make-lambda
                                                                  make-sequence
                                                                  make-application
                                                                  make-conditional
                                                                  make-toplevel-define
                                                                  make-toplevel-set
                                                                  make-toplevel-ref
                                                                  make-module-set
                                                                  make-module-ref
                                                                  make-lexical-set
                                                                  make-lexical-ref
                                                                  make-primitive-ref
                                                                  make-const
                                                                  make-void)
                                                                ((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                                ("i467"
                                                                 "i465"
                                                                 "i463"
                                                                 "i461"
                                                                 "i459"
                                                                 "i457"
                                                                 "i455"
                                                                 "i453"
                                                                 "i451"
                                                                 "i449"
                                                                 "i447"
                                                                 "i445"
                                                                 "i443"
                                                                 "i441"
                                                                 "i439"
                                                                 "i437"
                                                                 "i435"
                                                                 "i433"
                                                                 "i431"
                                                                 "i429"
                                                                 "i427"
                                                                 "i425"
                                                                 "i423"
                                                                 "i421"
                                                                 "i419"
                                                                 "i417"
                                                                 "i415"
                                                                 "i413"
                                                                 "i411"
                                                                 "i409"
                                                                 "i407"
                                                                 "i405"
                                                                 "i403"
                                                                 "i401"
                                                                 "i399"
                                                                 "i398"
                                                                 "i396"
                                                                 "i393"
                                                                 "i392"
                                                                 "i391"
                                                                 "i389"
                                                                 "i388"
                                                                 "i386"
                                                                 "i384"
                                                                 "i382"
                                                                 "i380"
                                                                 "i378"
                                                                 "i376"
                                                                 "i374"
                                                                 "i372"
                                                                 "i369"
                                                                 "i367"
                                                                 "i366"
                                                                 "i364"
                                                                 "i362"
                                                                 "i360"
                                                                 "i358"
                                                                 "i357"
                                                                 "i356"
                                                                 "i355"
                                                                 "i353"
                                                                 "i352"
                                                                 "i349"
                                                                 "i347"
                                                                 "i345"
                                                                 "i343"
                                                                 "i341"
                                                                 "i339"
                                                                 "i337"
                                                                 "i336"
                                                                 "i335"
                                                                 "i333"
                                                                 "i331"
                                                                 "i330"
                                                                 "i327"
                                                                 "i326"
                                                                 "i324"
                                                                 "i322"
                                                                 "i320"
                                                                 "i318"
                                                                 "i316"
                                                                 "i314"
                                                                 "i312"
                                                                 "i310"
                                                                 "i308"
                                                                 "i305"
                                                                 "i303"
                                                                 "i301"
                                                                 "i299"
                                                                 "i297"
                                                                 "i295"
                                                                 "i293"
                                                                 "i291"
                                                                 "i289"
                                                                 "i287"
                                                                 "i285"
                                                                 "i283"
                                                                 "i281"
                                                                 "i279"
                                                                 "i277"
                                                                 "i275"
                                                                 "i273"
                                                                 "i271"
                                                                 "i269"
                                                                 "i267"
                                                                 "i265"
                                                                 "i263"
                                                                 "i261"
                                                                 "i260"
                                                                 "i257"
                                                                 "i255"
                                                                 "i254"
                                                                 "i253"
                                                                 "i252"
                                                                 "i251"
                                                                 "i249"
                                                                 "i247"
                                                                 "i245"
                                                                 "i242"
                                                                 "i240"
                                                                 "i238"
                                                                 "i236"
                                                                 "i234"
                                                                 "i232"
                                                                 "i230"
                                                                 "i228"
                                                                 "i226"
                                                                 "i224"
                                                                 "i222"
                                                                 "i220"
                                                                 "i218"
                                                                 "i216"
                                                                 "i214"
                                                                 "i212"
                                                                 "i210"
                                                                 "i208"))
                                                              #(ribcage
                                                                (define-structure
                                                                  define-expansion-accessors
                                                                  define-expansion-constructors)
                                                                ((top)
                                                                 (top)
                                                                 (top))
                                                                ("i46"
                                                                 "i45"
                                                                 "i44")))
                                                             (hygiene guile)))
                                                        4)
                                                   #t
                                                   #f)
                                               '...
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i2230"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i467"
                                                      "i465"
                                                      "i463"
                                                      "i461"
                                                      "i459"
                                                      "i457"
                                                      "i455"
                                                      "i453"
                                                      "i451"
                                                      "i449"
                                                      "i447"
                                                      "i445"
                                                      "i443"
                                                      "i441"
                                                      "i439"
                                                      "i437"
                                                      "i435"
                                                      "i433"
                                                      "i431"
                                                      "i429"
                                                      "i427"
                                                      "i425"
                                                      "i423"
                                                      "i421"
                                                      "i419"
                                                      "i417"
                                                      "i415"
                                                      "i413"
                                                      "i411"
                                                      "i409"
                                                      "i407"
                                                      "i405"
                                                      "i403"
                                                      "i401"
                                                      "i399"
                                                      "i398"
                                                      "i396"
                                                      "i393"
                                                      "i392"
                                                      "i391"
                                                      "i389"
                                                      "i388"
                                                      "i386"
                                                      "i384"
                                                      "i382"
                                                      "i380"
                                                      "i378"
                                                      "i376"
                                                      "i374"
                                                      "i372"
                                                      "i369"
                                                      "i367"
                                                      "i366"
                                                      "i364"
                                                      "i362"
                                                      "i360"
                                                      "i358"
                                                      "i357"
                                                      "i356"
                                                      "i355"
                                                      "i353"
                                                      "i352"
                                                      "i349"
                                                      "i347"
                                                      "i345"
                                                      "i343"
                                                      "i341"
                                                      "i339"
                                                      "i337"
                                                      "i336"
                                                      "i335"
                                                      "i333"
                                                      "i331"
                                                      "i330"
                                                      "i327"
                                                      "i326"
                                                      "i324"
                                                      "i322"
                                                      "i320"
                                                      "i318"
                                                      "i316"
                                                      "i314"
                                                      "i312"
                                                      "i310"
                                                      "i308"
                                                      "i305"
                                                      "i303"
                                                      "i301"
                                                      "i299"
                                                      "i297"
                                                      "i295"
                                                      "i293"
                                                      "i291"
                                                      "i289"
                                                      "i287"
                                                      "i285"
                                                      "i283"
                                                      "i281"
                                                      "i279"
                                                      "i277"
                                                      "i275"
                                                      "i273"
                                                      "i271"
                                                      "i269"
                                                      "i267"
                                                      "i265"
                                                      "i263"
                                                      "i261"
                                                      "i260"
                                                      "i257"
                                                      "i255"
                                                      "i254"
                                                      "i253"
                                                      "i252"
                                                      "i251"
                                                      "i249"
                                                      "i247"
                                                      "i245"
                                                      "i242"
                                                      "i240"
                                                      "i238"
                                                      "i236"
                                                      "i234"
                                                      "i232"
                                                      "i230"
                                                      "i228"
                                                      "i226"
                                                      "i224"
                                                      "i222"
                                                      "i220"
                                                      "i218"
                                                      "i216"
                                                      "i214"
                                                      "i212"
                                                      "i210"
                                                      "i208"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("i46" "i45" "i44")))
                                                  (hygiene guile))))
                                      (eq? (#{id-var-name 4332}#
                                             #{dots 13674}#
                                             '(()))
                                           (#{id-var-name 4332}#
                                             '#(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i2230"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     expand-lambda-case
                                                     lambda*-formals
                                                     expand-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     expand-void
                                                     eval-local-transformer
                                                     expand-local-syntax
                                                     expand-body
                                                     expand-macro
                                                     expand-application
                                                     expand-expr
                                                     expand
                                                     syntax-type
                                                     parse-when-list
                                                     expand-install-global
                                                     expand-top-sequence
                                                     expand-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     maybe-name-value!
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i467"
                                                    "i465"
                                                    "i463"
                                                    "i461"
                                                    "i459"
                                                    "i457"
                                                    "i455"
                                                    "i453"
                                                    "i451"
                                                    "i449"
                                                    "i447"
                                                    "i445"
                                                    "i443"
                                                    "i441"
                                                    "i439"
                                                    "i437"
                                                    "i435"
                                                    "i433"
                                                    "i431"
                                                    "i429"
                                                    "i427"
                                                    "i425"
                                                    "i423"
                                                    "i421"
                                                    "i419"
                                                    "i417"
                                                    "i415"
                                                    "i413"
                                                    "i411"
                                                    "i409"
                                                    "i407"
                                                    "i405"
                                                    "i403"
                                                    "i401"
                                                    "i399"
                                                    "i398"
                                                    "i396"
                                                    "i393"
                                                    "i392"
                                                    "i391"
                                                    "i389"
                                                    "i388"
                                                    "i386"
                                                    "i384"
                                                    "i382"
                                                    "i380"
                                                    "i378"
                                                    "i376"
                                                    "i374"
                                                    "i372"
                                                    "i369"
                                                    "i367"
                                                    "i366"
                                                    "i364"
                                                    "i362"
                                                    "i360"
                                                    "i358"
                                                    "i357"
                                                    "i356"
                                                    "i355"
                                                    "i353"
                                                    "i352"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i336"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i330"
                                                    "i327"
                                                    "i326"
                                                    "i324"
                                                    "i322"
                                                    "i320"
                                                    "i318"
                                                    "i316"
                                                    "i314"
                                                    "i312"
                                                    "i310"
                                                    "i308"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i293"
                                                    "i291"
                                                    "i289"
                                                    "i287"
                                                    "i285"
                                                    "i283"
                                                    "i281"
                                                    "i279"
                                                    "i277"
                                                    "i275"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i260"
                                                    "i257"
                                                    "i255"
                                                    "i254"
                                                    "i253"
                                                    "i252"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i242"
                                                    "i240"
                                                    "i238"
                                                    "i236"
                                                    "i234"
                                                    "i232"
                                                    "i230"
                                                    "i228"
                                                    "i226"
                                                    "i224"
                                                    "i222"
                                                    "i220"
                                                    "i218"
                                                    "i216"
                                                    "i214"
                                                    "i212"
                                                    "i210"
                                                    "i208"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors)
                                                   ((top) (top) (top))
                                                   ("i46" "i45" "i44")))
                                                (hygiene guile))
                                             '(())))
                                      #f)
                                    #f))
                                #{tmp 13669}#)
                              #f)
                          (@apply
                            (lambda (#{x 13774}# #{dots 13775}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 13344}#
                                    #{x 13774}#
                                    (#{1+}# #{n 13348}#)
                                    #{ids 13349}#))
                                (lambda (#{p 13776}# #{ids 13777}#)
                                  (values
                                    (if (eq? #{p 13776}# 'any)
                                      'each-any
                                      (vector 'each #{p 13776}#))
                                    #{ids 13777}#))))
                            #{tmp 13669}#)
                          (let ((#{tmp 13778}#
                                  ($sc-dispatch #{p 13347}# '(any any . any))))
                            (if (if #{tmp 13778}#
                                  (@apply
                                    (lambda (#{x 13782}#
                                             #{dots 13783}#
                                             #{ys 13784}#)
                                      (if (if (if (vector? #{dots 13783}#)
                                                (if (= (vector-length
                                                         #{dots 13783}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 13783}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 13783}# 1))
                                            #f)
                                        (if (eq? (if (if (vector?
                                                           #{dots 13783}#)
                                                       (if (= (vector-length
                                                                #{dots 13783}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{dots 13783}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref
                                                     #{dots 13783}#
                                                     1)
                                                   #{dots 13783}#)
                                                 (if (if (= (vector-length
                                                              '#(syntax-object
                                                                 ...
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i2230"))
                                                                  #(ribcage
                                                                    (lambda-var-list
                                                                      gen-var
                                                                      strip
                                                                      expand-lambda-case
                                                                      lambda*-formals
                                                                      expand-simple-lambda
                                                                      lambda-formals
                                                                      ellipsis?
                                                                      expand-void
                                                                      eval-local-transformer
                                                                      expand-local-syntax
                                                                      expand-body
                                                                      expand-macro
                                                                      expand-application
                                                                      expand-expr
                                                                      expand
                                                                      syntax-type
                                                                      parse-when-list
                                                                      expand-install-global
                                                                      expand-top-sequence
                                                                      expand-sequence
                                                                      source-wrap
                                                                      wrap
                                                                      bound-id-member?
                                                                      distinct-bound-ids?
                                                                      valid-bound-ids?
                                                                      bound-id=?
                                                                      free-id=?
                                                                      id-var-name
                                                                      same-marks?
                                                                      join-marks
                                                                      join-wraps
                                                                      smart-append
                                                                      make-binding-wrap
                                                                      extend-ribcage!
                                                                      make-empty-ribcage
                                                                      new-mark
                                                                      anti-mark
                                                                      the-anti-mark
                                                                      top-marked?
                                                                      top-wrap
                                                                      empty-wrap
                                                                      set-ribcage-labels!
                                                                      set-ribcage-marks!
                                                                      set-ribcage-symnames!
                                                                      ribcage-labels
                                                                      ribcage-marks
                                                                      ribcage-symnames
                                                                      ribcage?
                                                                      make-ribcage
                                                                      gen-labels
                                                                      gen-label
                                                                      make-rename
                                                                      rename-marks
                                                                      rename-new
                                                                      rename-old
                                                                      subst-rename?
                                                                      wrap-subst
                                                                      wrap-marks
                                                                      make-wrap
                                                                      id-sym-name&marks
                                                                      id-sym-name
                                                                      id?
                                                                      nonsymbol-id?
                                                                      global-extend
                                                                      lookup
                                                                      macros-only-env
                                                                      extend-var-env
                                                                      extend-env
                                                                      null-env
                                                                      binding-value
                                                                      binding-type
                                                                      make-binding
                                                                      arg-check
                                                                      source-annotation
                                                                      no-source
                                                                      set-syntax-object-module!
                                                                      set-syntax-object-wrap!
                                                                      set-syntax-object-expression!
                                                                      syntax-object-module
                                                                      syntax-object-wrap
                                                                      syntax-object-expression
                                                                      syntax-object?
                                                                      make-syntax-object
                                                                      build-lexical-var
                                                                      build-letrec
                                                                      build-named-let
                                                                      build-let
                                                                      build-sequence
                                                                      build-data
                                                                      build-primref
                                                                      build-lambda-case
                                                                      build-case-lambda
                                                                      build-simple-lambda
                                                                      build-global-definition
                                                                      build-global-assignment
                                                                      build-global-reference
                                                                      analyze-variable
                                                                      build-lexical-assignment
                                                                      build-lexical-reference
                                                                      build-dynlet
                                                                      build-conditional
                                                                      build-application
                                                                      build-void
                                                                      maybe-name-value!
                                                                      decorate-source
                                                                      get-global-definition-hook
                                                                      put-global-definition-hook
                                                                      gensym-hook
                                                                      local-eval-hook
                                                                      top-level-eval-hook
                                                                      fx<
                                                                      fx=
                                                                      fx-
                                                                      fx+
                                                                      set-lambda-meta!
                                                                      lambda-meta
                                                                      lambda?
                                                                      make-dynlet
                                                                      make-letrec
                                                                      make-let
                                                                      make-lambda-case
                                                                      make-lambda
                                                                      make-sequence
                                                                      make-application
                                                                      make-conditional
                                                                      make-toplevel-define
                                                                      make-toplevel-set
                                                                      make-toplevel-ref
                                                                      make-module-set
                                                                      make-module-ref
                                                                      make-lexical-set
                                                                      make-lexical-ref
                                                                      make-primitive-ref
                                                                      make-const
                                                                      make-void)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i467"
                                                                     "i465"
                                                                     "i463"
                                                                     "i461"
                                                                     "i459"
                                                                     "i457"
                                                                     "i455"
                                                                     "i453"
                                                                     "i451"
                                                                     "i449"
                                                                     "i447"
                                                                     "i445"
                                                                     "i443"
                                                                     "i441"
                                                                     "i439"
                                                                     "i437"
                                                                     "i435"
                                                                     "i433"
                                                                     "i431"
                                                                     "i429"
                                                                     "i427"
                                                                     "i425"
                                                                     "i423"
                                                                     "i421"
                                                                     "i419"
                                                                     "i417"
                                                                     "i415"
                                                                     "i413"
                                                                     "i411"
                                                                     "i409"
                                                                     "i407"
                                                                     "i405"
                                                                     "i403"
                                                                     "i401"
                                                                     "i399"
                                                                     "i398"
                                                                     "i396"
                                                                     "i393"
                                                                     "i392"
                                                                     "i391"
                                                                     "i389"
                                                                     "i388"
                                                                     "i386"
                                                                     "i384"
                                                                     "i382"
                                                                     "i380"
                                                                     "i378"
                                                                     "i376"
                                                                     "i374"
                                                                     "i372"
                                                                     "i369"
                                                                     "i367"
                                                                     "i366"
                                                                     "i364"
                                                                     "i362"
                                                                     "i360"
                                                                     "i358"
                                                                     "i357"
                                                                     "i356"
                                                                     "i355"
                                                                     "i353"
                                                                     "i352"
                                                                     "i349"
                                                                     "i347"
                                                                     "i345"
                                                                     "i343"
                                                                     "i341"
                                                                     "i339"
                                                                     "i337"
                                                                     "i336"
                                                                     "i335"
                                                                     "i333"
                                                                     "i331"
                                                                     "i330"
                                                                     "i327"
                                                                     "i326"
                                                                     "i324"
                                                                     "i322"
                                                                     "i320"
                                                                     "i318"
                                                                     "i316"
                                                                     "i314"
                                                                     "i312"
                                                                     "i310"
                                                                     "i308"
                                                                     "i305"
                                                                     "i303"
                                                                     "i301"
                                                                     "i299"
                                                                     "i297"
                                                                     "i295"
                                                                     "i293"
                                                                     "i291"
                                                                     "i289"
                                                                     "i287"
                                                                     "i285"
                                                                     "i283"
                                                                     "i281"
                                                                     "i279"
                                                                     "i277"
                                                                     "i275"
                                                                     "i273"
                                                                     "i271"
                                                                     "i269"
                                                                     "i267"
                                                                     "i265"
                                                                     "i263"
                                                                     "i261"
                                                                     "i260"
                                                                     "i257"
                                                                     "i255"
                                                                     "i254"
                                                                     "i253"
                                                                     "i252"
                                                                     "i251"
                                                                     "i249"
                                                                     "i247"
                                                                     "i245"
                                                                     "i242"
                                                                     "i240"
                                                                     "i238"
                                                                     "i236"
                                                                     "i234"
                                                                     "i232"
                                                                     "i230"
                                                                     "i228"
                                                                     "i226"
                                                                     "i224"
                                                                     "i222"
                                                                     "i220"
                                                                     "i218"
                                                                     "i216"
                                                                     "i214"
                                                                     "i212"
                                                                     "i210"
                                                                     "i208"))
                                                                  #(ribcage
                                                                    (define-structure
                                                                      define-expansion-accessors
                                                                      define-expansion-constructors)
                                                                    ((top)
                                                                     (top)
                                                                     (top))
                                                                    ("i46"
                                                                     "i45"
                                                                     "i44")))
                                                                 (hygiene
                                                                   guile)))
                                                            4)
                                                       #t
                                                       #f)
                                                   '...
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i2230"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i467"
                                                          "i465"
                                                          "i463"
                                                          "i461"
                                                          "i459"
                                                          "i457"
                                                          "i455"
                                                          "i453"
                                                          "i451"
                                                          "i449"
                                                          "i447"
                                                          "i445"
                                                          "i443"
                                                          "i441"
                                                          "i439"
                                                          "i437"
                                                          "i435"
                                                          "i433"
                                                          "i431"
                                                          "i429"
                                                          "i427"
                                                          "i425"
                                                          "i423"
                                                          "i421"
                                                          "i419"
                                                          "i417"
                                                          "i415"
                                                          "i413"
                                                          "i411"
                                                          "i409"
                                                          "i407"
                                                          "i405"
                                                          "i403"
                                                          "i401"
                                                          "i399"
                                                          "i398"
                                                          "i396"
                                                          "i393"
                                                          "i392"
                                                          "i391"
                                                          "i389"
                                                          "i388"
                                                          "i386"
                                                          "i384"
                                                          "i382"
                                                          "i380"
                                                          "i378"
                                                          "i376"
                                                          "i374"
                                                          "i372"
                                                          "i369"
                                                          "i367"
                                                          "i366"
                                                          "i364"
                                                          "i362"
                                                          "i360"
                                                          "i358"
                                                          "i357"
                                                          "i356"
                                                          "i355"
                                                          "i353"
                                                          "i352"
                                                          "i349"
                                                          "i347"
                                                          "i345"
                                                          "i343"
                                                          "i341"
                                                          "i339"
                                                          "i337"
                                                          "i336"
                                                          "i335"
                                                          "i333"
                                                          "i331"
                                                          "i330"
                                                          "i327"
                                                          "i326"
                                                          "i324"
                                                          "i322"
                                                          "i320"
                                                          "i318"
                                                          "i316"
                                                          "i314"
                                                          "i312"
                                                          "i310"
                                                          "i308"
                                                          "i305"
                                                          "i303"
                                                          "i301"
                                                          "i299"
                                                          "i297"
                                                          "i295"
                                                          "i293"
                                                          "i291"
                                                          "i289"
                                                          "i287"
                                                          "i285"
                                                          "i283"
                                                          "i281"
                                                          "i279"
                                                          "i277"
                                                          "i275"
                                                          "i273"
                                                          "i271"
                                                          "i269"
                                                          "i267"
                                                          "i265"
                                                          "i263"
                                                          "i261"
                                                          "i260"
                                                          "i257"
                                                          "i255"
                                                          "i254"
                                                          "i253"
                                                          "i252"
                                                          "i251"
                                                          "i249"
                                                          "i247"
                                                          "i245"
                                                          "i242"
                                                          "i240"
                                                          "i238"
                                                          "i236"
                                                          "i234"
                                                          "i232"
                                                          "i230"
                                                          "i228"
                                                          "i226"
                                                          "i224"
                                                          "i222"
                                                          "i220"
                                                          "i218"
                                                          "i216"
                                                          "i214"
                                                          "i212"
                                                          "i210"
                                                          "i208"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("i46" "i45" "i44")))
                                                      (hygiene guile))))
                                          (eq? (#{id-var-name 4332}#
                                                 #{dots 13783}#
                                                 '(()))
                                               (#{id-var-name 4332}#
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i2230"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile))
                                                 '(())))
                                          #f)
                                        #f))
                                    #{tmp 13778}#)
                                  #f)
                              (@apply
                                (lambda (#{x 13884}#
                                         #{dots 13885}#
                                         #{ys 13886}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 13342}#
                                        #{ys 13886}#
                                        #{n 13348}#
                                        #{ids 13349}#))
                                    (lambda (#{ys 13889}# #{ids 13890}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 13344}#
                                            #{x 13884}#
                                            (#{1+}# #{n 13348}#)
                                            #{ids 13890}#))
                                        (lambda (#{x 13891}# #{ids 13892}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 13343}#
                                                #{ys 13889}#))
                                            (lambda (#{ys 13925}# #{e 13926}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 13891}#
                                                  #{ys 13925}#
                                                  #{e 13926}#)
                                                #{ids 13892}#))))))))
                                #{tmp 13778}#)
                              (let ((#{tmp 13927}#
                                      ($sc-dispatch #{p 13347}# '(any . any))))
                                (if #{tmp 13927}#
                                  (@apply
                                    (lambda (#{x 13931}# #{y 13932}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 13344}#
                                            #{y 13932}#
                                            #{n 13348}#
                                            #{ids 13349}#))
                                        (lambda (#{y 13933}# #{ids 13934}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 13344}#
                                                #{x 13931}#
                                                #{n 13348}#
                                                #{ids 13934}#))
                                            (lambda (#{x 13935}# #{ids 13936}#)
                                              (values
                                                (cons #{x 13935}# #{y 13933}#)
                                                #{ids 13936}#))))))
                                    #{tmp 13927}#)
                                  (let ((#{tmp 13937}#
                                          ($sc-dispatch #{p 13347}# '())))
                                    (if #{tmp 13937}#
                                      (@apply
                                        (lambda () (values '() #{ids 13349}#))
                                        #{tmp 13937}#)
                                      (let ((#{tmp 13941}#
                                              ($sc-dispatch
                                                #{p 13347}#
                                                '#(vector each-any))))
                                        (if #{tmp 13941}#
                                          (@apply
                                            (lambda (#{x 13945}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 13344}#
                                                    #{x 13945}#
                                                    #{n 13348}#
                                                    #{ids 13349}#))
                                                (lambda (#{p 13946}#
                                                         #{ids 13947}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 13946}#)
                                                    #{ids 13947}#))))
                                            #{tmp 13941}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 4358}#
                                                #{p 13347}#
                                                '(())))
                                            #{ids 13349}#)))))))))))))))
               (#{cvt 13344}# #{pattern 13340}# 0 '()))))
         (#{build-dispatch-call 11744}#
           (lambda (#{pvars 14060}#
                    #{exp 14061}#
                    #{y 14062}#
                    #{r 14063}#
                    #{mod 14064}#)
             (let ((#{ids 14065}# (map car #{pvars 14060}#)))
               (begin
                 (map cdr #{pvars 14060}#)
                 (let ((#{labels 14067}#
                         (#{gen-labels 4316}# #{ids 14065}#))
                       (#{new-vars 14068}#
                         (map #{gen-var 4359}# #{ids 14065}#)))
                   (#{build-application 4280}#
                     #f
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         'apply)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         'apply
                         #f))
                     (list (#{build-simple-lambda 4289}#
                             #f
                             (map syntax->datum #{ids 14065}#)
                             #f
                             #{new-vars 14068}#
                             '()
                             (#{expand 4345}#
                               #{exp 14061}#
                               (#{extend-env 4307}#
                                 #{labels 14067}#
                                 (map (lambda (#{var 14393}# #{level 14394}#)
                                        (cons 'syntax
                                              (cons #{var 14393}#
                                                    #{level 14394}#)))
                                      #{new-vars 14068}#
                                      (map cdr #{pvars 14060}#))
                                 #{r 14063}#)
                               (#{make-binding-wrap 4327}#
                                 #{ids 14065}#
                                 #{labels 14067}#
                                 '(()))
                               #{mod 14064}#))
                           #{y 14062}#)))))))
         (#{gen-clause 11745}#
           (lambda (#{x 12712}#
                    #{keys 12713}#
                    #{clauses 12714}#
                    #{r 12715}#
                    #{pat 12716}#
                    #{fender 12717}#
                    #{exp 12718}#
                    #{mod 12719}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 11743}#
                   #{pat 12716}#
                   #{keys 12713}#))
               (lambda (#{p 12874}# #{pvars 12875}#)
                 (if (not (#{distinct-bound-ids? 4336}#
                            (map car #{pvars 12875}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 12716}#)
                   (if (not (and-map
                              (lambda (#{x 12991}#)
                                (not (let ((#{x 12995}# (car #{x 12991}#)))
                                       (if (if (if (vector? #{x 12995}#)
                                                 (if (= (vector-length
                                                          #{x 12995}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 12995}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 12995}# 1))
                                             #f)
                                         (if (eq? (if (if (vector? #{x 12995}#)
                                                        (if (= (vector-length
                                                                 #{x 12995}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{x 12995}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref #{x 12995}# 1)
                                                    #{x 12995}#)
                                                  (if (if (= (vector-length
                                                               '#(syntax-object
                                                                  ...
                                                                  ((top)
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(x)
                                                                     #((top))
                                                                     #("i2230"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-application
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       parse-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i399"
                                                                      "i398"
                                                                      "i396"
                                                                      "i393"
                                                                      "i392"
                                                                      "i391"
                                                                      "i389"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i372"
                                                                      "i369"
                                                                      "i367"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i358"
                                                                      "i357"
                                                                      "i356"
                                                                      "i355"
                                                                      "i353"
                                                                      "i352"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i339"
                                                                      "i337"
                                                                      "i336"
                                                                      "i335"
                                                                      "i333"
                                                                      "i331"
                                                                      "i330"
                                                                      "i327"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i310"
                                                                      "i308"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i261"
                                                                      "i260"
                                                                      "i257"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i252"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i245"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile)))
                                                             4)
                                                        #t
                                                        #f)
                                                    '...
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i2230"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i467"
                                                           "i465"
                                                           "i463"
                                                           "i461"
                                                           "i459"
                                                           "i457"
                                                           "i455"
                                                           "i453"
                                                           "i451"
                                                           "i449"
                                                           "i447"
                                                           "i445"
                                                           "i443"
                                                           "i441"
                                                           "i439"
                                                           "i437"
                                                           "i435"
                                                           "i433"
                                                           "i431"
                                                           "i429"
                                                           "i427"
                                                           "i425"
                                                           "i423"
                                                           "i421"
                                                           "i419"
                                                           "i417"
                                                           "i415"
                                                           "i413"
                                                           "i411"
                                                           "i409"
                                                           "i407"
                                                           "i405"
                                                           "i403"
                                                           "i401"
                                                           "i399"
                                                           "i398"
                                                           "i396"
                                                           "i393"
                                                           "i392"
                                                           "i391"
                                                           "i389"
                                                           "i388"
                                                           "i386"
                                                           "i384"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i372"
                                                           "i369"
                                                           "i367"
                                                           "i366"
                                                           "i364"
                                                           "i362"
                                                           "i360"
                                                           "i358"
                                                           "i357"
                                                           "i356"
                                                           "i355"
                                                           "i353"
                                                           "i352"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i336"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i330"
                                                           "i327"
                                                           "i326"
                                                           "i324"
                                                           "i322"
                                                           "i320"
                                                           "i318"
                                                           "i316"
                                                           "i314"
                                                           "i312"
                                                           "i310"
                                                           "i308"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i283"
                                                           "i281"
                                                           "i279"
                                                           "i277"
                                                           "i275"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i260"
                                                           "i257"
                                                           "i255"
                                                           "i254"
                                                           "i253"
                                                           "i252"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i242"
                                                           "i240"
                                                           "i238"
                                                           "i236"
                                                           "i234"
                                                           "i232"
                                                           "i230"
                                                           "i228"
                                                           "i226"
                                                           "i224"
                                                           "i222"
                                                           "i220"
                                                           "i218"
                                                           "i216"
                                                           "i214"
                                                           "i212"
                                                           "i210"
                                                           "i208"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("i46" "i45" "i44")))
                                                       (hygiene guile))))
                                           (eq? (#{id-var-name 4332}#
                                                  #{x 12995}#
                                                  '(()))
                                                (#{id-var-name 4332}#
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i2230"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile))
                                                  '(())))
                                           #f)
                                         #f))))
                              #{pvars 12875}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 12716}#)
                     (let ((#{y 13071}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (#{build-application 4280}#
                         #f
                         (let ((#{req 13214}# (list 'tmp))
                               (#{vars 13216}# (list #{y 13071}#))
                               (#{exp 13218}#
                                 (let ((#{y 13235}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 3)
                                           #f
                                           'tmp
                                           #{y 13071}#)))
                                   (let ((#{test-exp 13239}#
                                           (let ((#{tmp 13248}#
                                                   ($sc-dispatch
                                                     #{fender 12717}#
                                                     '#(atom #t))))
                                             (if #{tmp 13248}#
                                               (@apply
                                                 (lambda () #{y 13235}#)
                                                 #{tmp 13248}#)
                                               (let ((#{then-exp 13266}#
                                                       (#{build-dispatch-call 11744}#
                                                         #{pvars 12875}#
                                                         #{fender 12717}#
                                                         #{y 13235}#
                                                         #{r 12715}#
                                                         #{mod 12719}#))
                                                     (#{else-exp 13267}#
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           1)
                                                         #f
                                                         #f)))
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     10)
                                                   #f
                                                   #{y 13235}#
                                                   #{then-exp 13266}#
                                                   #{else-exp 13267}#)))))
                                         (#{then-exp 13240}#
                                           (#{build-dispatch-call 11744}#
                                             #{pvars 12875}#
                                             #{exp 12718}#
                                             #{y 13235}#
                                             #{r 12715}#
                                             #{mod 12719}#))
                                         (#{else-exp 13241}#
                                           (#{gen-syntax-case 11746}#
                                             #{x 12712}#
                                             #{keys 12713}#
                                             #{clauses 12714}#
                                             #{r 12715}#
                                             #{mod 12719}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 10)
                                       #f
                                       #{test-exp 13239}#
                                       #{then-exp 13240}#
                                       #{else-exp 13241}#)))))
                           (let ((#{body 13223}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 13214}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 13216}#
                                     #{exp 13218}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 13223}#)))
                         (list (if (eq? #{p 12874}# 'any)
                                 (let ((#{fun-exp 13289}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             'list)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             'list
                                             #f)))
                                       (#{arg-exps 13290}# (list #{x 12712}#)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 13289}#
                                     #{arg-exps 13290}#))
                                 (let ((#{fun-exp 13313}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             '$sc-dispatch)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             '$sc-dispatch
                                             #f)))
                                       (#{arg-exps 13314}#
                                         (list #{x 12712}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   1)
                                                 #f
                                                 #{p 12874}#))))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 13313}#
                                     #{arg-exps 13314}#))))))))))))
         (#{gen-syntax-case 11746}#
           (lambda (#{x 12145}#
                    #{keys 12146}#
                    #{clauses 12147}#
                    #{r 12148}#
                    #{mod 12149}#)
             (if (null? #{clauses 12147}#)
               (let ((#{fun-exp 12154}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'syntax-violation)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'syntax-violation
                           #f)))
                     (#{arg-exps 12155}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 12145}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 12154}#
                   #{arg-exps 12155}#))
               (let ((#{tmp 12188}# (car #{clauses 12147}#)))
                 (let ((#{tmp 12189}#
                         ($sc-dispatch #{tmp 12188}# '(any any))))
                   (if #{tmp 12189}#
                     (@apply
                       (lambda (#{pat 12191}# #{exp 12192}#)
                         (if (if (if (symbol? #{pat 12191}#)
                                   #t
                                   (if (if (vector? #{pat 12191}#)
                                         (if (= (vector-length #{pat 12191}#)
                                                4)
                                           (eq? (vector-ref #{pat 12191}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 12191}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 12219}#)
                                   (not (if (eq? (if (if (vector?
                                                           #{pat 12191}#)
                                                       (if (= (vector-length
                                                                #{pat 12191}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{pat 12191}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{pat 12191}# 1)
                                                   #{pat 12191}#)
                                                 (if (if (vector? #{x 12219}#)
                                                       (if (= (vector-length
                                                                #{x 12219}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{x 12219}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{x 12219}# 1)
                                                   #{x 12219}#))
                                          (eq? (#{id-var-name 4332}#
                                                 #{pat 12191}#
                                                 '(()))
                                               (#{id-var-name 4332}#
                                                 #{x 12219}#
                                                 '(())))
                                          #f)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i3911" "i3912"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i3900"
                                               "i3901"
                                               "i3902"
                                               "i3903"
                                               "i3904"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3710" "i3708" "i3706" "i3704"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       #{keys 12146}#))
                               #f)
                           (if (if (eq? (if (if (= (vector-length
                                                     '#(syntax-object
                                                        pad
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i3911" "i3912"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i3900"
                                                             "i3901"
                                                             "i3902"
                                                             "i3903"
                                                             "i3904"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i3710"
                                                            "i3708"
                                                            "i3706"
                                                            "i3704"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          'pad
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3911" "i3912"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3900"
                                                  "i3901"
                                                  "i3902"
                                                  "i3903"
                                                  "i3904"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3710"
                                                 "i3708"
                                                 "i3706"
                                                 "i3704"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile)))
                                        (if (if (= (vector-length
                                                     '#(syntax-object
                                                        _
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i3911" "i3912"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i3900"
                                                             "i3901"
                                                             "i3902"
                                                             "i3903"
                                                             "i3904"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i3710"
                                                            "i3708"
                                                            "i3706"
                                                            "i3704"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          '_
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3911" "i3912"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3900"
                                                  "i3901"
                                                  "i3902"
                                                  "i3903"
                                                  "i3904"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3710"
                                                 "i3708"
                                                 "i3706"
                                                 "i3704"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile))))
                                 (eq? (#{id-var-name 4332}#
                                        '#(syntax-object
                                           pad
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i3911" "i3912"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3900"
                                                "i3901"
                                                "i3902"
                                                "i3903"
                                                "i3904"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i3710"
                                               "i3708"
                                               "i3706"
                                               "i3704"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-application
                                                expand-expr
                                                expand
                                                syntax-type
                                                parse-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i419"
                                               "i417"
                                               "i415"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i398"
                                               "i396"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i389"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i380"
                                               "i378"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i356"
                                               "i355"
                                               "i353"
                                               "i352"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i336"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i330"
                                               "i327"
                                               "i326"
                                               "i324"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i291"
                                               "i289"
                                               "i287"
                                               "i285"
                                               "i283"
                                               "i281"
                                               "i279"
                                               "i277"
                                               "i275"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i260"
                                               "i257"
                                               "i255"
                                               "i254"
                                               "i253"
                                               "i252"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i242"
                                               "i240"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i46" "i45" "i44")))
                                           (hygiene guile))
                                        '(()))
                                      (#{id-var-name 4332}#
                                        '#(syntax-object
                                           _
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i3911" "i3912"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3900"
                                                "i3901"
                                                "i3902"
                                                "i3903"
                                                "i3904"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i3710"
                                               "i3708"
                                               "i3706"
                                               "i3704"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-application
                                                expand-expr
                                                expand
                                                syntax-type
                                                parse-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i419"
                                               "i417"
                                               "i415"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i398"
                                               "i396"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i389"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i380"
                                               "i378"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i356"
                                               "i355"
                                               "i353"
                                               "i352"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i336"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i330"
                                               "i327"
                                               "i326"
                                               "i324"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i291"
                                               "i289"
                                               "i287"
                                               "i285"
                                               "i283"
                                               "i281"
                                               "i279"
                                               "i277"
                                               "i275"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i260"
                                               "i257"
                                               "i255"
                                               "i254"
                                               "i253"
                                               "i252"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i242"
                                               "i240"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i46" "i45" "i44")))
                                           (hygiene guile))
                                        '(())))
                                 #f)
                             (#{expand 4345}#
                               #{exp 12192}#
                               #{r 12148}#
                               '(())
                               #{mod 12149}#)
                             (let ((#{labels 12395}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 12396}#
                                     (let ((#{id 12434}#
                                             (if (if (vector? #{pat 12191}#)
                                                   (if (= (vector-length
                                                            #{pat 12191}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 12191}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 12191}# 1)
                                               #{pat 12191}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 12434}#)
                                           " ")))))
                               (#{build-application 4280}#
                                 #f
                                 (#{build-simple-lambda 4289}#
                                   #f
                                   (list (syntax->datum #{pat 12191}#))
                                   #f
                                   (list #{var 12396}#)
                                   '()
                                   (#{expand 4345}#
                                     #{exp 12192}#
                                     (#{extend-env 4307}#
                                       #{labels 12395}#
                                       (list (cons 'syntax
                                                   (cons #{var 12396}# 0)))
                                       #{r 12148}#)
                                     (#{make-binding-wrap 4327}#
                                       (list #{pat 12191}#)
                                       #{labels 12395}#
                                       '(()))
                                     #{mod 12149}#))
                                 (list #{x 12145}#))))
                           (#{gen-clause 11745}#
                             #{x 12145}#
                             #{keys 12146}#
                             (cdr #{clauses 12147}#)
                             #{r 12148}#
                             #{pat 12191}#
                             #t
                             #{exp 12192}#
                             #{mod 12149}#)))
                       #{tmp 12189}#)
                     (let ((#{tmp 12704}#
                             ($sc-dispatch #{tmp 12188}# '(any any any))))
                       (if #{tmp 12704}#
                         (@apply
                           (lambda (#{pat 12706}#
                                    #{fender 12707}#
                                    #{exp 12708}#)
                             (#{gen-clause 11745}#
                               #{x 12145}#
                               #{keys 12146}#
                               (cdr #{clauses 12147}#)
                               #{r 12148}#
                               #{pat 12706}#
                               #{fender 12707}#
                               #{exp 12708}#
                               #{mod 12149}#))
                           #{tmp 12704}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 12147}#)))))))))))
        (lambda (#{e 11747}#
                 #{r 11748}#
                 #{w 11749}#
                 #{s 11750}#
                 #{mod 11751}#)
          (let ((#{e 11752}#
                  (#{wrap 4338}#
                    (begin
                      (if (if (pair? #{e 11747}#) #{s 11750}# #f)
                        (set-source-properties! #{e 11747}# #{s 11750}#))
                      #{e 11747}#)
                    #{w 11749}#
                    #{mod 11751}#)))
            (let ((#{tmp 11754}#
                    ($sc-dispatch
                      #{e 11752}#
                      '(_ any each-any . each-any))))
              (if #{tmp 11754}#
                (@apply
                  (lambda (#{val 11779}# #{key 11780}# #{m 11781}#)
                    (if (and-map
                          (lambda (#{x 11782}#)
                            (if (if (symbol? #{x 11782}#)
                                  #t
                                  (if (if (vector? #{x 11782}#)
                                        (if (= (vector-length #{x 11782}#) 4)
                                          (eq? (vector-ref #{x 11782}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{x 11782}# 1))
                                    #f))
                              (not (if (if (if (vector? #{x 11782}#)
                                             (if (= (vector-length #{x 11782}#)
                                                    4)
                                               (eq? (vector-ref #{x 11782}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (symbol? (vector-ref #{x 11782}# 1))
                                         #f)
                                     (if (eq? (if (if (vector? #{x 11782}#)
                                                    (if (= (vector-length
                                                             #{x 11782}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x 11782}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (vector-ref #{x 11782}# 1)
                                                #{x 11782}#)
                                              (if (if (= (vector-length
                                                           '#(syntax-object
                                                              ...
                                                              ((top)
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i2230"))
                                                               #(ribcage
                                                                 (lambda-var-list
                                                                   gen-var
                                                                   strip
                                                                   expand-lambda-case
                                                                   lambda*-formals
                                                                   expand-simple-lambda
                                                                   lambda-formals
                                                                   ellipsis?
                                                                   expand-void
                                                                   eval-local-transformer
                                                                   expand-local-syntax
                                                                   expand-body
                                                                   expand-macro
                                                                   expand-application
                                                                   expand-expr
                                                                   expand
                                                                   syntax-type
                                                                   parse-when-list
                                                                   expand-install-global
                                                                   expand-top-sequence
                                                                   expand-sequence
                                                                   source-wrap
                                                                   wrap
                                                                   bound-id-member?
                                                                   distinct-bound-ids?
                                                                   valid-bound-ids?
                                                                   bound-id=?
                                                                   free-id=?
                                                                   id-var-name
                                                                   same-marks?
                                                                   join-marks
                                                                   join-wraps
                                                                   smart-append
                                                                   make-binding-wrap
                                                                   extend-ribcage!
                                                                   make-empty-ribcage
                                                                   new-mark
                                                                   anti-mark
                                                                   the-anti-mark
                                                                   top-marked?
                                                                   top-wrap
                                                                   empty-wrap
                                                                   set-ribcage-labels!
                                                                   set-ribcage-marks!
                                                                   set-ribcage-symnames!
                                                                   ribcage-labels
                                                                   ribcage-marks
                                                                   ribcage-symnames
                                                                   ribcage?
                                                                   make-ribcage
                                                                   gen-labels
                                                                   gen-label
                                                                   make-rename
                                                                   rename-marks
                                                                   rename-new
                                                                   rename-old
                                                                   subst-rename?
                                                                   wrap-subst
                                                                   wrap-marks
                                                                   make-wrap
                                                                   id-sym-name&marks
                                                                   id-sym-name
                                                                   id?
                                                                   nonsymbol-id?
                                                                   global-extend
                                                                   lookup
                                                                   macros-only-env
                                                                   extend-var-env
                                                                   extend-env
                                                                   null-env
                                                                   binding-value
                                                                   binding-type
                                                                   make-binding
                                                                   arg-check
                                                                   source-annotation
                                                                   no-source
                                                                   set-syntax-object-module!
                                                                   set-syntax-object-wrap!
                                                                   set-syntax-object-expression!
                                                                   syntax-object-module
                                                                   syntax-object-wrap
                                                                   syntax-object-expression
                                                                   syntax-object?
                                                                   make-syntax-object
                                                                   build-lexical-var
                                                                   build-letrec
                                                                   build-named-let
                                                                   build-let
                                                                   build-sequence
                                                                   build-data
                                                                   build-primref
                                                                   build-lambda-case
                                                                   build-case-lambda
                                                                   build-simple-lambda
                                                                   build-global-definition
                                                                   build-global-assignment
                                                                   build-global-reference
                                                                   analyze-variable
                                                                   build-lexical-assignment
                                                                   build-lexical-reference
                                                                   build-dynlet
                                                                   build-conditional
                                                                   build-application
                                                                   build-void
                                                                   maybe-name-value!
                                                                   decorate-source
                                                                   get-global-definition-hook
                                                                   put-global-definition-hook
                                                                   gensym-hook
                                                                   local-eval-hook
                                                                   top-level-eval-hook
                                                                   fx<
                                                                   fx=
                                                                   fx-
                                                                   fx+
                                                                   set-lambda-meta!
                                                                   lambda-meta
                                                                   lambda?
                                                                   make-dynlet
                                                                   make-letrec
                                                                   make-let
                                                                   make-lambda-case
                                                                   make-lambda
                                                                   make-sequence
                                                                   make-application
                                                                   make-conditional
                                                                   make-toplevel-define
                                                                   make-toplevel-set
                                                                   make-toplevel-ref
                                                                   make-module-set
                                                                   make-module-ref
                                                                   make-lexical-set
                                                                   make-lexical-ref
                                                                   make-primitive-ref
                                                                   make-const
                                                                   make-void)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i467"
                                                                  "i465"
                                                                  "i463"
                                                                  "i461"
                                                                  "i459"
                                                                  "i457"
                                                                  "i455"
                                                                  "i453"
                                                                  "i451"
                                                                  "i449"
                                                                  "i447"
                                                                  "i445"
                                                                  "i443"
                                                                  "i441"
                                                                  "i439"
                                                                  "i437"
                                                                  "i435"
                                                                  "i433"
                                                                  "i431"
                                                                  "i429"
                                                                  "i427"
                                                                  "i425"
                                                                  "i423"
                                                                  "i421"
                                                                  "i419"
                                                                  "i417"
                                                                  "i415"
                                                                  "i413"
                                                                  "i411"
                                                                  "i409"
                                                                  "i407"
                                                                  "i405"
                                                                  "i403"
                                                                  "i401"
                                                                  "i399"
                                                                  "i398"
                                                                  "i396"
                                                                  "i393"
                                                                  "i392"
                                                                  "i391"
                                                                  "i389"
                                                                  "i388"
                                                                  "i386"
                                                                  "i384"
                                                                  "i382"
                                                                  "i380"
                                                                  "i378"
                                                                  "i376"
                                                                  "i374"
                                                                  "i372"
                                                                  "i369"
                                                                  "i367"
                                                                  "i366"
                                                                  "i364"
                                                                  "i362"
                                                                  "i360"
                                                                  "i358"
                                                                  "i357"
                                                                  "i356"
                                                                  "i355"
                                                                  "i353"
                                                                  "i352"
                                                                  "i349"
                                                                  "i347"
                                                                  "i345"
                                                                  "i343"
                                                                  "i341"
                                                                  "i339"
                                                                  "i337"
                                                                  "i336"
                                                                  "i335"
                                                                  "i333"
                                                                  "i331"
                                                                  "i330"
                                                                  "i327"
                                                                  "i326"
                                                                  "i324"
                                                                  "i322"
                                                                  "i320"
                                                                  "i318"
                                                                  "i316"
                                                                  "i314"
                                                                  "i312"
                                                                  "i310"
                                                                  "i308"
                                                                  "i305"
                                                                  "i303"
                                                                  "i301"
                                                                  "i299"
                                                                  "i297"
                                                                  "i295"
                                                                  "i293"
                                                                  "i291"
                                                                  "i289"
                                                                  "i287"
                                                                  "i285"
                                                                  "i283"
                                                                  "i281"
                                                                  "i279"
                                                                  "i277"
                                                                  "i275"
                                                                  "i273"
                                                                  "i271"
                                                                  "i269"
                                                                  "i267"
                                                                  "i265"
                                                                  "i263"
                                                                  "i261"
                                                                  "i260"
                                                                  "i257"
                                                                  "i255"
                                                                  "i254"
                                                                  "i253"
                                                                  "i252"
                                                                  "i251"
                                                                  "i249"
                                                                  "i247"
                                                                  "i245"
                                                                  "i242"
                                                                  "i240"
                                                                  "i238"
                                                                  "i236"
                                                                  "i234"
                                                                  "i232"
                                                                  "i230"
                                                                  "i228"
                                                                  "i226"
                                                                  "i224"
                                                                  "i222"
                                                                  "i220"
                                                                  "i218"
                                                                  "i216"
                                                                  "i214"
                                                                  "i212"
                                                                  "i210"
                                                                  "i208"))
                                                               #(ribcage
                                                                 (define-structure
                                                                   define-expansion-accessors
                                                                   define-expansion-constructors)
                                                                 ((top)
                                                                  (top)
                                                                  (top))
                                                                 ("i46"
                                                                  "i45"
                                                                  "i44")))
                                                              (hygiene guile)))
                                                         4)
                                                    #t
                                                    #f)
                                                '...
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i2230"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i467"
                                                       "i465"
                                                       "i463"
                                                       "i461"
                                                       "i459"
                                                       "i457"
                                                       "i455"
                                                       "i453"
                                                       "i451"
                                                       "i449"
                                                       "i447"
                                                       "i445"
                                                       "i443"
                                                       "i441"
                                                       "i439"
                                                       "i437"
                                                       "i435"
                                                       "i433"
                                                       "i431"
                                                       "i429"
                                                       "i427"
                                                       "i425"
                                                       "i423"
                                                       "i421"
                                                       "i419"
                                                       "i417"
                                                       "i415"
                                                       "i413"
                                                       "i411"
                                                       "i409"
                                                       "i407"
                                                       "i405"
                                                       "i403"
                                                       "i401"
                                                       "i399"
                                                       "i398"
                                                       "i396"
                                                       "i393"
                                                       "i392"
                                                       "i391"
                                                       "i389"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i382"
                                                       "i380"
                                                       "i378"
                                                       "i376"
                                                       "i374"
                                                       "i372"
                                                       "i369"
                                                       "i367"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i360"
                                                       "i358"
                                                       "i357"
                                                       "i356"
                                                       "i355"
                                                       "i353"
                                                       "i352"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i336"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i330"
                                                       "i327"
                                                       "i326"
                                                       "i324"
                                                       "i322"
                                                       "i320"
                                                       "i318"
                                                       "i316"
                                                       "i314"
                                                       "i312"
                                                       "i310"
                                                       "i308"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i291"
                                                       "i289"
                                                       "i287"
                                                       "i285"
                                                       "i283"
                                                       "i281"
                                                       "i279"
                                                       "i277"
                                                       "i275"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i260"
                                                       "i257"
                                                       "i255"
                                                       "i254"
                                                       "i253"
                                                       "i252"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i242"
                                                       "i240"
                                                       "i238"
                                                       "i236"
                                                       "i234"
                                                       "i232"
                                                       "i230"
                                                       "i228"
                                                       "i226"
                                                       "i224"
                                                       "i222"
                                                       "i220"
                                                       "i218"
                                                       "i216"
                                                       "i214"
                                                       "i212"
                                                       "i210"
                                                       "i208"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("i46" "i45" "i44")))
                                                   (hygiene guile))))
                                       (eq? (#{id-var-name 4332}#
                                              #{x 11782}#
                                              '(()))
                                            (#{id-var-name 4332}#
                                              '#(syntax-object
                                                 ...
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i2230"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      expand-lambda-case
                                                      lambda*-formals
                                                      expand-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      expand-void
                                                      eval-local-transformer
                                                      expand-local-syntax
                                                      expand-body
                                                      expand-macro
                                                      expand-application
                                                      expand-expr
                                                      expand
                                                      syntax-type
                                                      parse-when-list
                                                      expand-install-global
                                                      expand-top-sequence
                                                      expand-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i467"
                                                     "i465"
                                                     "i463"
                                                     "i461"
                                                     "i459"
                                                     "i457"
                                                     "i455"
                                                     "i453"
                                                     "i451"
                                                     "i449"
                                                     "i447"
                                                     "i445"
                                                     "i443"
                                                     "i441"
                                                     "i439"
                                                     "i437"
                                                     "i435"
                                                     "i433"
                                                     "i431"
                                                     "i429"
                                                     "i427"
                                                     "i425"
                                                     "i423"
                                                     "i421"
                                                     "i419"
                                                     "i417"
                                                     "i415"
                                                     "i413"
                                                     "i411"
                                                     "i409"
                                                     "i407"
                                                     "i405"
                                                     "i403"
                                                     "i401"
                                                     "i399"
                                                     "i398"
                                                     "i396"
                                                     "i393"
                                                     "i392"
                                                     "i391"
                                                     "i389"
                                                     "i388"
                                                     "i386"
                                                     "i384"
                                                     "i382"
                                                     "i380"
                                                     "i378"
                                                     "i376"
                                                     "i374"
                                                     "i372"
                                                     "i369"
                                                     "i367"
                                                     "i366"
                                                     "i364"
                                                     "i362"
                                                     "i360"
                                                     "i358"
                                                     "i357"
                                                     "i356"
                                                     "i355"
                                                     "i353"
                                                     "i352"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i336"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i330"
                                                     "i327"
                                                     "i326"
                                                     "i324"
                                                     "i322"
                                                     "i320"
                                                     "i318"
                                                     "i316"
                                                     "i314"
                                                     "i312"
                                                     "i310"
                                                     "i308"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i293"
                                                     "i291"
                                                     "i289"
                                                     "i287"
                                                     "i285"
                                                     "i283"
                                                     "i281"
                                                     "i279"
                                                     "i277"
                                                     "i275"
                                                     "i273"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i260"
                                                     "i257"
                                                     "i255"
                                                     "i254"
                                                     "i253"
                                                     "i252"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i242"
                                                     "i240"
                                                     "i238"
                                                     "i236"
                                                     "i234"
                                                     "i232"
                                                     "i230"
                                                     "i228"
                                                     "i226"
                                                     "i224"
                                                     "i222"
                                                     "i220"
                                                     "i218"
                                                     "i216"
                                                     "i214"
                                                     "i212"
                                                     "i210"
                                                     "i208"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors)
                                                    ((top) (top) (top))
                                                    ("i46" "i45" "i44")))
                                                 (hygiene guile))
                                              '(())))
                                       #f)
                                     #f))
                              #f))
                          #{key 11780}#)
                      (let ((#{x 11908}#
                              (gensym
                                (string-append (symbol->string 'tmp) " "))))
                        (#{build-application 4280}#
                          #{s 11750}#
                          (let ((#{req 12038}# (list 'tmp))
                                (#{vars 12040}# (list #{x 11908}#))
                                (#{exp 12042}#
                                  (#{gen-syntax-case 11746}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 3)
                                      #f
                                      'tmp
                                      #{x 11908}#)
                                    #{key 11780}#
                                    #{m 11781}#
                                    #{r 11748}#
                                    #{mod 11751}#)))
                            (let ((#{body 12047}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 14)
                                      #f
                                      #{req 12038}#
                                      #f
                                      #f
                                      #f
                                      '()
                                      #{vars 12040}#
                                      #{exp 12042}#
                                      #f)))
                              (make-struct/no-tail
                                (vector-ref %expanded-vtables 13)
                                #f
                                '()
                                #{body 12047}#)))
                          (list (#{expand 4345}#
                                  #{val 11779}#
                                  #{r 11748}#
                                  '(())
                                  #{mod 11751}#))))
                      (syntax-violation
                        'syntax-case
                        "invalid literals list"
                        #{e 11752}#)))
                  #{tmp 11754}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 11752}#)))))))
    (set! macroexpand
      (lambda*
        (#{x 14485}#
          #:optional
          (#{m 14486}# 'e)
          (#{esew 14487}# '(eval)))
        (#{expand-top-sequence 4341}#
          (list #{x 14485}#)
          '()
          '((top))
          #f
          #{m 14486}#
          #{esew 14487}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 14490}#)
        (if (if (vector? #{x 14490}#)
              (if (= (vector-length #{x 14490}#) 4)
                (eq? (vector-ref #{x 14490}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 14490}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 14515}# #{datum 14516}#)
        (let ((#{wrap 14521}# (vector-ref #{id 14515}# 2))
              (#{module 14522}# (vector-ref #{id 14515}# 3)))
          (vector
            'syntax-object
            #{datum 14516}#
            #{wrap 14521}#
            #{module 14522}#))))
    (set! syntax->datum
      (lambda (#{x 14529}#)
        (#{strip 4358}# #{x 14529}# '(()))))
    (set! syntax-source
      (lambda (#{x 14532}#)
        (#{source-annotation 4306}# #{x 14532}#)))
    (set! generate-temporaries
      (lambda (#{ls 14685}#)
        (begin
          (if (not (list? #{ls 14685}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 14685}#))
          (let ((#{mod 14693}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 14694}#)
                   (#{wrap 4338}# (gensym) '((top)) #{mod 14693}#))
                 #{ls 14685}#)))))
    (set! free-identifier=?
      (lambda (#{x 14698}# #{y 14699}#)
        (begin
          (if (not (if (if (vector? #{x 14698}#)
                         (if (= (vector-length #{x 14698}#) 4)
                           (eq? (vector-ref #{x 14698}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 14698}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 14698}#))
          (if (not (if (if (vector? #{y 14699}#)
                         (if (= (vector-length #{y 14699}#) 4)
                           (eq? (vector-ref #{y 14699}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 14699}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 14699}#))
          (if (eq? (if (if (vector? #{x 14698}#)
                         (if (= (vector-length #{x 14698}#) 4)
                           (eq? (vector-ref #{x 14698}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{x 14698}# 1)
                     #{x 14698}#)
                   (if (if (vector? #{y 14699}#)
                         (if (= (vector-length #{y 14699}#) 4)
                           (eq? (vector-ref #{y 14699}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{y 14699}# 1)
                     #{y 14699}#))
            (eq? (#{id-var-name 4332}# #{x 14698}# '(()))
                 (#{id-var-name 4332}# #{y 14699}# '(())))
            #f))))
    (set! bound-identifier=?
      (lambda (#{x 14849}# #{y 14850}#)
        (begin
          (if (not (if (if (vector? #{x 14849}#)
                         (if (= (vector-length #{x 14849}#) 4)
                           (eq? (vector-ref #{x 14849}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 14849}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 14849}#))
          (if (not (if (if (vector? #{y 14850}#)
                         (if (= (vector-length #{y 14850}#) 4)
                           (eq? (vector-ref #{y 14850}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 14850}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 14850}#))
          (if (if (if (vector? #{x 14849}#)
                    (if (= (vector-length #{x 14849}#) 4)
                      (eq? (vector-ref #{x 14849}# 0) 'syntax-object)
                      #f)
                    #f)
                (if (vector? #{y 14850}#)
                  (if (= (vector-length #{y 14850}#) 4)
                    (eq? (vector-ref #{y 14850}# 0) 'syntax-object)
                    #f)
                  #f)
                #f)
            (if (eq? (vector-ref #{x 14849}# 1)
                     (vector-ref #{y 14850}# 1))
              (#{same-marks? 4331}#
                (car (vector-ref #{x 14849}# 2))
                (car (vector-ref #{y 14850}# 2)))
              #f)
            (eq? #{x 14849}# #{y 14850}#)))))
    (set! syntax-violation
      (lambda*
        (#{who 14983}#
          #{message 14984}#
          #{form 14985}#
          #:optional
          (#{subform 14986}# #f))
        (begin
          (if (not (if (not #{who 14983}#)
                     (not #{who 14983}#)
                     (let ((#{t 15004}# (string? #{who 14983}#)))
                       (if #{t 15004}#
                         #{t 15004}#
                         (symbol? #{who 14983}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 14983}#))
          (if (not (string? #{message 14984}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 14984}#))
          (throw 'syntax-error
                 #{who 14983}#
                 #{message 14984}#
                 (#{source-annotation 4306}#
                   (if #{form 14985}#
                     #{form 14985}#
                     #{subform 14986}#))
                 (#{strip 4358}# #{form 14985}# '(()))
                 (if #{subform 14986}#
                   (#{strip 4358}# #{subform 14986}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 15207}#
         (lambda (#{e 15794}#
                  #{p 15795}#
                  #{w 15796}#
                  #{mod 15797}#)
           (if (pair? #{e 15794}#)
             (let ((#{first 15798}#
                     (#{match 15213}#
                       (car #{e 15794}#)
                       #{p 15795}#
                       #{w 15796}#
                       '()
                       #{mod 15797}#)))
               (if #{first 15798}#
                 (let ((#{rest 15801}#
                         (#{match-each 15207}#
                           (cdr #{e 15794}#)
                           #{p 15795}#
                           #{w 15796}#
                           #{mod 15797}#)))
                   (if #{rest 15801}#
                     (cons #{first 15798}# #{rest 15801}#)
                     #f))
                 #f))
             (if (null? #{e 15794}#)
               '()
               (if (if (vector? #{e 15794}#)
                     (if (= (vector-length #{e 15794}#) 4)
                       (eq? (vector-ref #{e 15794}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 15207}#
                   (vector-ref #{e 15794}# 1)
                   #{p 15795}#
                   (#{join-wraps 4329}#
                     #{w 15796}#
                     (vector-ref #{e 15794}# 2))
                   (vector-ref #{e 15794}# 3))
                 #f)))))
       (#{match-each-any 15209}#
         (lambda (#{e 15829}# #{w 15830}# #{mod 15831}#)
           (if (pair? #{e 15829}#)
             (let ((#{l 15832}#
                     (#{match-each-any 15209}#
                       (cdr #{e 15829}#)
                       #{w 15830}#
                       #{mod 15831}#)))
               (if #{l 15832}#
                 (cons (#{wrap 4338}#
                         (car #{e 15829}#)
                         #{w 15830}#
                         #{mod 15831}#)
                       #{l 15832}#)
                 #f))
             (if (null? #{e 15829}#)
               '()
               (if (if (vector? #{e 15829}#)
                     (if (= (vector-length #{e 15829}#) 4)
                       (eq? (vector-ref #{e 15829}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 15209}#
                   (vector-ref #{e 15829}# 1)
                   (#{join-wraps 4329}#
                     #{w 15830}#
                     (vector-ref #{e 15829}# 2))
                   #{mod 15831}#)
                 #f)))))
       (#{match-empty 15210}#
         (lambda (#{p 15856}# #{r 15857}#)
           (if (null? #{p 15856}#)
             #{r 15857}#
             (if (eq? #{p 15856}# '_)
               #{r 15857}#
               (if (eq? #{p 15856}# 'any)
                 (cons '() #{r 15857}#)
                 (if (pair? #{p 15856}#)
                   (#{match-empty 15210}#
                     (car #{p 15856}#)
                     (#{match-empty 15210}#
                       (cdr #{p 15856}#)
                       #{r 15857}#))
                   (if (eq? #{p 15856}# 'each-any)
                     (cons '() #{r 15857}#)
                     (let ((#{atom-key 15858}# (vector-ref #{p 15856}# 0)))
                       (if (eqv? #{atom-key 15858}# 'each)
                         (#{match-empty 15210}#
                           (vector-ref #{p 15856}# 1)
                           #{r 15857}#)
                         (if (eqv? #{atom-key 15858}# 'each+)
                           (#{match-empty 15210}#
                             (vector-ref #{p 15856}# 1)
                             (#{match-empty 15210}#
                               (reverse (vector-ref #{p 15856}# 2))
                               (#{match-empty 15210}#
                                 (vector-ref #{p 15856}# 3)
                                 #{r 15857}#)))
                           (if (if (eqv? #{atom-key 15858}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 15858}# 'atom))
                             #{r 15857}#
                             (if (eqv? #{atom-key 15858}# 'vector)
                               (#{match-empty 15210}#
                                 (vector-ref #{p 15856}# 1)
                                 #{r 15857}#)))))))))))))
       (#{combine 15211}#
         (lambda (#{r* 15877}# #{r 15878}#)
           (if (null? (car #{r* 15877}#))
             #{r 15878}#
             (cons (map car #{r* 15877}#)
                   (#{combine 15211}#
                     (map cdr #{r* 15877}#)
                     #{r 15878}#)))))
       (#{match* 15212}#
         (lambda (#{e 15242}#
                  #{p 15243}#
                  #{w 15244}#
                  #{r 15245}#
                  #{mod 15246}#)
           (if (null? #{p 15243}#)
             (if (null? #{e 15242}#) #{r 15245}# #f)
             (if (pair? #{p 15243}#)
               (if (pair? #{e 15242}#)
                 (#{match 15213}#
                   (car #{e 15242}#)
                   (car #{p 15243}#)
                   #{w 15244}#
                   (#{match 15213}#
                     (cdr #{e 15242}#)
                     (cdr #{p 15243}#)
                     #{w 15244}#
                     #{r 15245}#
                     #{mod 15246}#)
                   #{mod 15246}#)
                 #f)
               (if (eq? #{p 15243}# 'each-any)
                 (let ((#{l 15251}#
                         (#{match-each-any 15209}#
                           #{e 15242}#
                           #{w 15244}#
                           #{mod 15246}#)))
                   (if #{l 15251}#
                     (cons #{l 15251}# #{r 15245}#)
                     #f))
                 (let ((#{atom-key 15256}# (vector-ref #{p 15243}# 0)))
                   (if (eqv? #{atom-key 15256}# 'each)
                     (if (null? #{e 15242}#)
                       (#{match-empty 15210}#
                         (vector-ref #{p 15243}# 1)
                         #{r 15245}#)
                       (let ((#{l 15263}#
                               (#{match-each 15207}#
                                 #{e 15242}#
                                 (vector-ref #{p 15243}# 1)
                                 #{w 15244}#
                                 #{mod 15246}#)))
                         (if #{l 15263}#
                           (letrec*
                             ((#{collect 15266}#
                                (lambda (#{l 15317}#)
                                  (if (null? (car #{l 15317}#))
                                    #{r 15245}#
                                    (cons (map car #{l 15317}#)
                                          (#{collect 15266}#
                                            (map cdr #{l 15317}#)))))))
                             (#{collect 15266}# #{l 15263}#))
                           #f)))
                     (if (eqv? #{atom-key 15256}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 15326}# (vector-ref #{p 15243}# 1))
                                 (#{y-pat 15327}# (vector-ref #{p 15243}# 2))
                                 (#{z-pat 15328}# (vector-ref #{p 15243}# 3)))
                             (letrec*
                               ((#{f 15332}#
                                  (lambda (#{e 15334}# #{w 15335}#)
                                    (if (pair? #{e 15334}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 15332}#
                                            (cdr #{e 15334}#)
                                            #{w 15335}#))
                                        (lambda (#{xr* 15336}#
                                                 #{y-pat 15337}#
                                                 #{r 15338}#)
                                          (if #{r 15338}#
                                            (if (null? #{y-pat 15337}#)
                                              (let ((#{xr 15339}#
                                                      (#{match 15213}#
                                                        (car #{e 15334}#)
                                                        #{x-pat 15326}#
                                                        #{w 15335}#
                                                        '()
                                                        #{mod 15246}#)))
                                                (if #{xr 15339}#
                                                  (values
                                                    (cons #{xr 15339}#
                                                          #{xr* 15336}#)
                                                    #{y-pat 15337}#
                                                    #{r 15338}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 15337}#)
                                                (#{match 15213}#
                                                  (car #{e 15334}#)
                                                  (car #{y-pat 15337}#)
                                                  #{w 15335}#
                                                  #{r 15338}#
                                                  #{mod 15246}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 15334}#)
                                            (if (= (vector-length #{e 15334}#)
                                                   4)
                                              (eq? (vector-ref #{e 15334}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 15332}#
                                          (vector-ref #{e 15334}# 1)
                                          (#{join-wraps 4329}#
                                            #{w 15335}#
                                            #{e 15334}#))
                                        (values
                                          '()
                                          #{y-pat 15327}#
                                          (#{match 15213}#
                                            #{e 15334}#
                                            #{z-pat 15328}#
                                            #{w 15335}#
                                            #{r 15245}#
                                            #{mod 15246}#)))))))
                               (#{f 15332}# #{e 15242}# #{w 15244}#))))
                         (lambda (#{xr* 15365}# #{y-pat 15366}# #{r 15367}#)
                           (if #{r 15367}#
                             (if (null? #{y-pat 15366}#)
                               (if (null? #{xr* 15365}#)
                                 (#{match-empty 15210}#
                                   (vector-ref #{p 15243}# 1)
                                   #{r 15367}#)
                                 (#{combine 15211}# #{xr* 15365}# #{r 15367}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 15256}# 'free-id)
                         (if (if (symbol? #{e 15242}#)
                               #t
                               (if (if (vector? #{e 15242}#)
                                     (if (= (vector-length #{e 15242}#) 4)
                                       (eq? (vector-ref #{e 15242}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 15242}# 1))
                                 #f))
                           (if (let ((#{i 15698}#
                                       (#{wrap 4338}#
                                         #{e 15242}#
                                         #{w 15244}#
                                         #{mod 15246}#))
                                     (#{j 15699}# (vector-ref #{p 15243}# 1)))
                                 (if (eq? (if (if (vector? #{i 15698}#)
                                                (if (= (vector-length
                                                         #{i 15698}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{i 15698}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{i 15698}# 1)
                                            #{i 15698}#)
                                          (if (if (vector? #{j 15699}#)
                                                (if (= (vector-length
                                                         #{j 15699}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{j 15699}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{j 15699}# 1)
                                            #{j 15699}#))
                                   (eq? (#{id-var-name 4332}#
                                          #{i 15698}#
                                          '(()))
                                        (#{id-var-name 4332}#
                                          #{j 15699}#
                                          '(())))
                                   #f))
                             #{r 15245}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 15256}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 15243}# 1)
                                 (#{strip 4358}# #{e 15242}# #{w 15244}#))
                             #{r 15245}#
                             #f)
                           (if (eqv? #{atom-key 15256}# 'vector)
                             (if (vector? #{e 15242}#)
                               (#{match 15213}#
                                 (vector->list #{e 15242}#)
                                 (vector-ref #{p 15243}# 1)
                                 #{w 15244}#
                                 #{r 15245}#
                                 #{mod 15246}#)
                               #f))))))))))))
       (#{match 15213}#
         (lambda (#{e 15759}#
                  #{p 15760}#
                  #{w 15761}#
                  #{r 15762}#
                  #{mod 15763}#)
           (if (not #{r 15762}#)
             #f
             (if (eq? #{p 15760}# '_)
               #{r 15762}#
               (if (eq? #{p 15760}# 'any)
                 (cons (#{wrap 4338}#
                         #{e 15759}#
                         #{w 15761}#
                         #{mod 15763}#)
                       #{r 15762}#)
                 (if (if (vector? #{e 15759}#)
                       (if (= (vector-length #{e 15759}#) 4)
                         (eq? (vector-ref #{e 15759}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 15212}#
                     (vector-ref #{e 15759}# 1)
                     #{p 15760}#
                     (#{join-wraps 4329}#
                       #{w 15761}#
                       (vector-ref #{e 15759}# 2))
                     #{r 15762}#
                     (vector-ref #{e 15759}# 3))
                   (#{match* 15212}#
                     #{e 15759}#
                     #{p 15760}#
                     #{w 15761}#
                     #{r 15762}#
                     #{mod 15763}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 15214}# #{p 15215}#)
          (if (eq? #{p 15215}# 'any)
            (list #{e 15214}#)
            (if (eq? #{p 15215}# '_)
              '()
              (if (if (vector? #{e 15214}#)
                    (if (= (vector-length #{e 15214}#) 4)
                      (eq? (vector-ref #{e 15214}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 15212}#
                  (vector-ref #{e 15214}# 1)
                  #{p 15215}#
                  (vector-ref #{e 15214}# 2)
                  '()
                  (vector-ref #{e 15214}# 3))
                (#{match* 15212}#
                  #{e 15214}#
                  #{p 15215}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 28049}#)
      (let ((#{tmp 28051}#
              ($sc-dispatch #{x 28049}# '(_ () any . each-any))))
        (if #{tmp 28051}#
          (@apply
            (lambda (#{e1 28055}# #{e2 28056}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i28022" "i28023"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28019")))
                       (hygiene guile))
                    (cons '() (cons #{e1 28055}# #{e2 28056}#))))
            #{tmp 28051}#)
          (let ((#{tmp 28057}#
                  ($sc-dispatch
                    #{x 28049}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 28057}#
              (@apply
                (lambda (#{out 28061}#
                         #{in 28062}#
                         #{e1 28063}#
                         #{e2 28064}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i28028" "i28029" "i28030" "i28031"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28019")))
                           (hygiene guile))
                        #{in 28062}#
                        '()
                        (list #{out 28061}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i28028"
                                            "i28029"
                                            "i28030"
                                            "i28031"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28019")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 28063}# #{e2 28064}#))))))
                #{tmp 28057}#)
              (let ((#{tmp 28065}#
                      ($sc-dispatch
                        #{x 28049}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 28065}#
                  (@apply
                    (lambda (#{out 28069}#
                             #{in 28070}#
                             #{e1 28071}#
                             #{e2 28072}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i28038" "i28039" "i28040" "i28041"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i28019")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i28038" "i28039" "i28040" "i28041"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i28019")))
                                     (hygiene guile))
                                  #{in 28070}#)
                            '()
                            (list #{out 28069}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i28038"
                                                "i28039"
                                                "i28040"
                                                "i28041"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i28019")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 28071}#
                                                    #{e2 28072}#))))))
                    #{tmp 28065}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 28049}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 28126}#)
      (let ((#{tmp 28128}#
              ($sc-dispatch
                #{x 28126}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 28128}#
          (@apply
            (lambda (#{k 28132}#
                     #{keyword 28133}#
                     #{pattern 28134}#
                     #{template 28135}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i28089" "i28090" "i28091" "i28092"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28086")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i28089" "i28090" "i28091" "i28092"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i28086")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i28089" "i28090" "i28091" "i28092"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i28086")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i28089" "i28090" "i28091" "i28092"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i28086")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i28089" "i28090" "i28091" "i28092"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i28086")))
                               (hygiene guile))
                            #{pattern 28134}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i28089" "i28090" "i28091" "i28092"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28086")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i28089" "i28090" "i28091" "i28092"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i28086")))
                                   (hygiene guile))
                                (cons #{k 28132}#
                                      (map (lambda (#{tmp 28100 28136}#
                                                    #{tmp 28099 28137}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i28089"
                                                                 "i28090"
                                                                 "i28091"
                                                                 "i28092"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i28086")))
                                                            (hygiene guile))
                                                         #{tmp 28099 28137}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i28089"
                                                                 "i28090"
                                                                 "i28091"
                                                                 "i28092"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i28086")))
                                                            (hygiene guile))
                                                         #{tmp 28100 28136}#)))
                                           #{template 28135}#
                                           #{pattern 28134}#))))))
            #{tmp 28128}#)
          (let ((#{tmp 28138}#
                  ($sc-dispatch
                    #{x 28126}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 28138}#
                  (@apply
                    (lambda (#{k 28142}#
                             #{docstring 28143}#
                             #{keyword 28144}#
                             #{pattern 28145}#
                             #{template 28146}#)
                      (string? (syntax->datum #{docstring 28143}#)))
                    #{tmp 28138}#)
                  #f)
              (@apply
                (lambda (#{k 28147}#
                         #{docstring 28148}#
                         #{keyword 28149}#
                         #{pattern 28150}#
                         #{template 28151}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i28112" "i28113" "i28114" "i28115" "i28116"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28086")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i28112" "i28113" "i28114" "i28115" "i28116"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i28086")))
                            (hygiene guile)))
                        #{docstring 28148}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i28112"
                                   "i28113"
                                   "i28114"
                                   "i28115"
                                   "i28116"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i28086")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i28112"
                                   "i28113"
                                   "i28114"
                                   "i28115"
                                   "i28116"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i28086")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i28112"
                                        "i28113"
                                        "i28114"
                                        "i28115"
                                        "i28116"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i28086")))
                                   (hygiene guile))
                                #{pattern 28150}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i28112"
                                      "i28113"
                                      "i28114"
                                      "i28115"
                                      "i28116"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i28086")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i28112"
                                            "i28113"
                                            "i28114"
                                            "i28115"
                                            "i28116"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28086")))
                                       (hygiene guile))
                                    (cons #{k 28147}#
                                          (map (lambda (#{tmp 28125 28152}#
                                                        #{tmp 28124 28153}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28112"
                                                                     "i28113"
                                                                     "i28114"
                                                                     "i28115"
                                                                     "i28116"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i28086")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 28124 28153}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28112"
                                                                     "i28113"
                                                                     "i28114"
                                                                     "i28115"
                                                                     "i28116"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i28086")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 28125 28152}#)))
                                               #{template 28151}#
                                               #{pattern 28150}#))))))
                #{tmp 28138}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28126}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 28190}#)
      (let ((#{tmp 28192}#
              ($sc-dispatch #{x 28190}# '(_ (any . any) any))))
        (if #{tmp 28192}#
          (@apply
            (lambda (#{name 28196}#
                     #{pattern 28197}#
                     #{template 28198}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i28167" "i28168" "i28169"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28164")))
                       (hygiene guile))
                    #{name 28196}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i28167" "i28168" "i28169"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28164")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i28167" "i28168" "i28169"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i28164")))
                                         (hygiene guile))
                                      #{pattern 28197}#)
                                #{template 28198}#))))
            #{tmp 28192}#)
          (let ((#{tmp 28199}#
                  ($sc-dispatch
                    #{x 28190}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 28199}#
                  (@apply
                    (lambda (#{name 28203}#
                             #{pattern 28204}#
                             #{docstring 28205}#
                             #{template 28206}#)
                      (string? (syntax->datum #{docstring 28205}#)))
                    #{tmp 28199}#)
                  #f)
              (@apply
                (lambda (#{name 28207}#
                         #{pattern 28208}#
                         #{docstring 28209}#
                         #{template 28210}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i28182" "i28183" "i28184" "i28185"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28164")))
                           (hygiene guile))
                        #{name 28207}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i28182" "i28183" "i28184" "i28185"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i28164")))
                                 (hygiene guile))
                              '()
                              #{docstring 28209}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i28182"
                                                  "i28183"
                                                  "i28184"
                                                  "i28185"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i28164")))
                                             (hygiene guile))
                                          #{pattern 28208}#)
                                    #{template 28210}#))))
                #{tmp 28199}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28190}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 28259}#)
      (let ((#{tmp 28261}#
              ($sc-dispatch
                #{x 28259}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 28261}#
              (@apply
                (lambda (#{let* 28265}#
                         #{x 28266}#
                         #{v 28267}#
                         #{e1 28268}#
                         #{e2 28269}#)
                  (and-map identifier? #{x 28266}#))
                #{tmp 28261}#)
              #f)
          (@apply
            (lambda (#{let* 28270}#
                     #{x 28271}#
                     #{v 28272}#
                     #{e1 28273}#
                     #{e2 28274}#)
              (letrec*
                ((#{f 28275}#
                   (lambda (#{bindings 28278}#)
                     (if (null? #{bindings 28278}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i28245" "i28246"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i28235"
                                     "i28236"
                                     "i28237"
                                     "i28238"
                                     "i28239"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i28221")))
                                (hygiene guile))
                             (cons '() (cons #{e1 28273}# #{e2 28274}#)))
                       (let ((#{tmp 28279}#
                               (list (#{f 28275}# (cdr #{bindings 28278}#))
                                     (car #{bindings 28278}#))))
                         (let ((#{tmp 28280}#
                                 ($sc-dispatch #{tmp 28279}# '(any any))))
                           (if #{tmp 28280}#
                             (@apply
                               (lambda (#{body 28282}# #{binding 28283}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i28255" "i28256"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i28245" "i28246"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i28235"
                                               "i28236"
                                               "i28237"
                                               "i28238"
                                               "i28239"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i28221")))
                                          (hygiene guile))
                                       (list #{binding 28283}#)
                                       #{body 28282}#))
                               #{tmp 28280}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 28279}#))))))))
                (#{f 28275}# (map list #{x 28271}# #{v 28272}#))))
            #{tmp 28261}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 28259}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 28341}#)
      (let ((#{tmp 28343}#
              ($sc-dispatch
                #{orig-x 28341}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 28343}#
          (@apply
            (lambda (#{var 28347}#
                     #{init 28348}#
                     #{step 28349}#
                     #{e0 28350}#
                     #{e1 28351}#
                     #{c 28352}#)
              (let ((#{tmp 28353}#
                      (map (lambda (#{v 28356}# #{s 28357}#)
                             (let ((#{tmp 28359}#
                                     ($sc-dispatch #{s 28357}# '())))
                               (if #{tmp 28359}#
                                 (@apply (lambda () #{v 28356}#) #{tmp 28359}#)
                                 (let ((#{tmp 28362}#
                                         ($sc-dispatch #{s 28357}# '(any))))
                                   (if #{tmp 28362}#
                                     (@apply
                                       (lambda (#{e 28365}#) #{e 28365}#)
                                       #{tmp 28362}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 28341}#
                                       #{s 28357}#))))))
                           #{var 28347}#
                           #{step 28349}#)))
                (let ((#{tmp 28354}#
                        ($sc-dispatch #{tmp 28353}# 'each-any)))
                  (if #{tmp 28354}#
                    (@apply
                      (lambda (#{step 28371}#)
                        (let ((#{tmp 28373}# ($sc-dispatch #{e1 28351}# '())))
                          (if #{tmp 28373}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i28309"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i28294"
                                              "i28295"
                                              "i28296"
                                              "i28297"
                                              "i28298"
                                              "i28299"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i28291")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i28309"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i28294"
                                              "i28295"
                                              "i28296"
                                              "i28297"
                                              "i28298"
                                              "i28299"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i28291")))
                                         (hygiene guile))
                                      (map list #{var 28347}# #{init 28348}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i28309"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i28294"
                                                    "i28295"
                                                    "i28296"
                                                    "i28297"
                                                    "i28298"
                                                    "i28299"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i28291")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i28309"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i28294"
                                                          "i28295"
                                                          "i28296"
                                                          "i28297"
                                                          "i28298"
                                                          "i28299"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i28291")))
                                                     (hygiene guile))
                                                  #{e0 28350}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i28309"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i28294"
                                                          "i28295"
                                                          "i28296"
                                                          "i28297"
                                                          "i28298"
                                                          "i28299"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i28291")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 28352}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i28309"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i28294"
                                                                        "i28295"
                                                                        "i28296"
                                                                        "i28297"
                                                                        "i28298"
                                                                        "i28299"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i28291")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 28371}#)))))))
                              #{tmp 28373}#)
                            (let ((#{tmp 28377}#
                                    ($sc-dispatch
                                      #{e1 28351}#
                                      '(any . each-any))))
                              (if #{tmp 28377}#
                                (@apply
                                  (lambda (#{e1 28381}# #{e2 28382}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i28318" "i28319"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i28309"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i28294"
                                                  "i28295"
                                                  "i28296"
                                                  "i28297"
                                                  "i28298"
                                                  "i28299"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i28291")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i28318" "i28319"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i28309"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i28294"
                                                  "i28295"
                                                  "i28296"
                                                  "i28297"
                                                  "i28298"
                                                  "i28299"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i28291")))
                                             (hygiene guile))
                                          (map list
                                               #{var 28347}#
                                               #{init 28348}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i28318" "i28319"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i28309"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i28294"
                                                        "i28295"
                                                        "i28296"
                                                        "i28297"
                                                        "i28298"
                                                        "i28299"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i28291")))
                                                   (hygiene guile))
                                                #{e0 28350}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i28318"
                                                              "i28319"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i28309"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i28294"
                                                              "i28295"
                                                              "i28296"
                                                              "i28297"
                                                              "i28298"
                                                              "i28299"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i28291")))
                                                         (hygiene guile))
                                                      (cons #{e1 28381}#
                                                            #{e2 28382}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i28318"
                                                              "i28319"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i28309"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i28294"
                                                              "i28295"
                                                              "i28296"
                                                              "i28297"
                                                              "i28298"
                                                              "i28299"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i28291")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 28352}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i28318"
                                                                            "i28319"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i28309"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i28294"
                                                                            "i28295"
                                                                            "i28296"
                                                                            "i28297"
                                                                            "i28298"
                                                                            "i28299"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i28291")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 28371}#)))))))
                                  #{tmp 28377}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 28351}#))))))
                      #{tmp 28354}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 28353}#)))))
            #{tmp 28343}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 28341}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 28668}#
         (lambda (#{p 28692}# #{lev 28693}#)
           (let ((#{tmp 28695}#
                   ($sc-dispatch
                     #{p 28692}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28414" "i28415"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28410"
                               "i28408"
                               "i28406"
                               "i28404"
                               "i28402"
                               "i28400"
                               "i28398")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 28695}#
               (@apply
                 (lambda (#{p 28699}#)
                   (if (= #{lev 28693}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i28418"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i28414" "i28415"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i28410"
                                  "i28408"
                                  "i28406"
                                  "i28404"
                                  "i28402"
                                  "i28400"
                                  "i28398")))
                              (hygiene guile))
                           #{p 28699}#)
                     (#{quasicons 28670}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i28418"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28414" "i28415"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28410"
                               "i28408"
                               "i28406"
                               "i28404"
                               "i28402"
                               "i28400"
                               "i28398")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i28418"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28414" "i28415"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28410"
                               "i28408"
                               "i28406"
                               "i28404"
                               "i28402"
                               "i28400"
                               "i28398")))
                           (hygiene guile)))
                       (#{quasi 28668}#
                         (list #{p 28699}#)
                         (#{1-}# #{lev 28693}#)))))
                 #{tmp 28695}#)
               (let ((#{tmp 28702}#
                       ($sc-dispatch
                         #{p 28692}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i28414" "i28415"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i28410"
                                   "i28408"
                                   "i28406"
                                   "i28404"
                                   "i28402"
                                   "i28400"
                                   "i28398")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 28702}#
                   (@apply
                     (lambda (#{p 28706}#)
                       (#{quasicons 28670}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i28421"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i28414" "i28415"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i28410"
                                 "i28408"
                                 "i28406"
                                 "i28404"
                                 "i28402"
                                 "i28400"
                                 "i28398")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i28421"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i28414" "i28415"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i28410"
                                 "i28408"
                                 "i28406"
                                 "i28404"
                                 "i28402"
                                 "i28400"
                                 "i28398")))
                             (hygiene guile)))
                         (#{quasi 28668}#
                           (list #{p 28706}#)
                           (#{1+}# #{lev 28693}#))))
                     #{tmp 28702}#)
                   (let ((#{tmp 28709}#
                           ($sc-dispatch #{p 28692}# '(any . any))))
                     (if #{tmp 28709}#
                       (@apply
                         (lambda (#{p 28713}# #{q 28714}#)
                           (let ((#{tmp 28716}#
                                   ($sc-dispatch
                                     #{p 28713}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i28424" "i28425"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i28414" "i28415"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i28410"
                                               "i28408"
                                               "i28406"
                                               "i28404"
                                               "i28402"
                                               "i28400"
                                               "i28398")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 28716}#
                               (@apply
                                 (lambda (#{p 28720}#)
                                   (if (= #{lev 28693}# 0)
                                     (#{quasilist* 28672}#
                                       (map (lambda (#{tmp 28432 28756}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i28430"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i28424" "i28425"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i28414" "i28415"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i28410"
                                                           "i28408"
                                                           "i28406"
                                                           "i28404"
                                                           "i28402"
                                                           "i28400"
                                                           "i28398")))
                                                       (hygiene guile))
                                                    #{tmp 28432 28756}#))
                                            #{p 28720}#)
                                       (#{quasi 28668}#
                                         #{q 28714}#
                                         #{lev 28693}#))
                                     (#{quasicons 28670}#
                                       (#{quasicons 28670}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i28430"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i28424" "i28425"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i28414" "i28415"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i28410"
                                                 "i28408"
                                                 "i28406"
                                                 "i28404"
                                                 "i28402"
                                                 "i28400"
                                                 "i28398")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i28430"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i28424" "i28425"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i28414" "i28415"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i28410"
                                                 "i28408"
                                                 "i28406"
                                                 "i28404"
                                                 "i28402"
                                                 "i28400"
                                                 "i28398")))
                                             (hygiene guile)))
                                         (#{quasi 28668}#
                                           #{p 28720}#
                                           (#{1-}# #{lev 28693}#)))
                                       (#{quasi 28668}#
                                         #{q 28714}#
                                         #{lev 28693}#))))
                                 #{tmp 28716}#)
                               (let ((#{tmp 28761}#
                                       ($sc-dispatch
                                         #{p 28713}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i28424" "i28425"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i28414" "i28415"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i28410"
                                                   "i28408"
                                                   "i28406"
                                                   "i28404"
                                                   "i28402"
                                                   "i28400"
                                                   "i28398")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 28761}#
                                   (@apply
                                     (lambda (#{p 28765}#)
                                       (if (= #{lev 28693}# 0)
                                         (#{quasiappend 28671}#
                                           (map (lambda (#{tmp 28437 28768}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i28435"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i28424"
                                                                "i28425"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i28414"
                                                                "i28415"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i28410"
                                                               "i28408"
                                                               "i28406"
                                                               "i28404"
                                                               "i28402"
                                                               "i28400"
                                                               "i28398")))
                                                           (hygiene guile))
                                                        #{tmp 28437 28768}#))
                                                #{p 28765}#)
                                           (#{quasi 28668}#
                                             #{q 28714}#
                                             #{lev 28693}#))
                                         (#{quasicons 28670}#
                                           (#{quasicons 28670}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i28435"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i28424" "i28425"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i28414" "i28415"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i28410"
                                                     "i28408"
                                                     "i28406"
                                                     "i28404"
                                                     "i28402"
                                                     "i28400"
                                                     "i28398")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i28435"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i28424" "i28425"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i28414" "i28415"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i28410"
                                                     "i28408"
                                                     "i28406"
                                                     "i28404"
                                                     "i28402"
                                                     "i28400"
                                                     "i28398")))
                                                 (hygiene guile)))
                                             (#{quasi 28668}#
                                               #{p 28765}#
                                               (#{1-}# #{lev 28693}#)))
                                           (#{quasi 28668}#
                                             #{q 28714}#
                                             #{lev 28693}#))))
                                     #{tmp 28761}#)
                                   (#{quasicons 28670}#
                                     (#{quasi 28668}#
                                       #{p 28713}#
                                       #{lev 28693}#)
                                     (#{quasi 28668}#
                                       #{q 28714}#
                                       #{lev 28693}#)))))))
                         #{tmp 28709}#)
                       (let ((#{tmp 28782}#
                               ($sc-dispatch #{p 28692}# '#(vector each-any))))
                         (if #{tmp 28782}#
                           (@apply
                             (lambda (#{x 28786}#)
                               (let ((#{x 28789}#
                                       (#{vquasi 28669}#
                                         #{x 28786}#
                                         #{lev 28693}#)))
                                 (let ((#{tmp 28791}#
                                         ($sc-dispatch
                                           #{x 28789}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 28791}#
                                     (@apply
                                       (lambda (#{x 28795}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28542"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28539"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i28410"
                                                      "i28408"
                                                      "i28406"
                                                      "i28404"
                                                      "i28402"
                                                      "i28400"
                                                      "i28398")))
                                                  (hygiene guile))
                                               (list->vector #{x 28795}#)))
                                       #{tmp 28791}#)
                                     (letrec*
                                       ((#{f 28797}#
                                          (lambda (#{y 28809}# #{k 28810}#)
                                            (let ((#{tmp 28812}#
                                                    ($sc-dispatch
                                                      #{y 28809}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 28812}#
                                                (@apply
                                                  (lambda (#{y 28815}#)
                                                    (#{k 28810}#
                                                      (map (lambda (#{tmp 28567 28816}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i28565"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i28547"
                                                                           "i28548"
                                                                           "i28549"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i28545"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i28539"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i28410"
                                                                          "i28408"
                                                                          "i28406"
                                                                          "i28404"
                                                                          "i28402"
                                                                          "i28400"
                                                                          "i28398")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 28567 28816}#))
                                                           #{y 28815}#)))
                                                  #{tmp 28812}#)
                                                (let ((#{tmp 28817}#
                                                        ($sc-dispatch
                                                          #{y 28809}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 28817}#
                                                    (@apply
                                                      (lambda (#{y 28820}#)
                                                        (#{k 28810}#
                                                          #{y 28820}#))
                                                      #{tmp 28817}#)
                                                    (let ((#{tmp 28821}#
                                                            ($sc-dispatch
                                                              #{y 28809}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 28821}#
                                                        (@apply
                                                          (lambda (#{y 28824}#
                                                                   #{z 28825}#)
                                                            (#{f 28797}#
                                                              #{z 28825}#
                                                              (lambda (#{ls 28826}#)
                                                                (#{k 28810}#
                                                                  (append
                                                                    #{y 28824}#
                                                                    #{ls 28826}#)))))
                                                          #{tmp 28821}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g28582}#)
                                                                    #((m28583
                                                                        top))
                                                                    #("i28586"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i28580"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i28547"
                                                                      "i28548"
                                                                      "i28549"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i28545"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i28539"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i28410"
                                                                     "i28408"
                                                                     "i28406"
                                                                     "i28404"
                                                                     "i28402"
                                                                     "i28400"
                                                                     "i28398")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 28789}#))))))))))
                                       (#{f 28797}#
                                         #{x 28789}#
                                         (lambda (#{ls 28799}#)
                                           (let ((#{tmp 28801}#
                                                   ($sc-dispatch
                                                     #{ls 28799}#
                                                     'each-any)))
                                             (if #{tmp 28801}#
                                               (@apply
                                                 (lambda (#{ g28555 28804}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g28555}#)
                                                               #((m28556 top))
                                                               #("i28560"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i28554"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i28545"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i28539"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i28410"
                                                                "i28408"
                                                                "i28406"
                                                                "i28404"
                                                                "i28402"
                                                                "i28400"
                                                                "i28398")))
                                                            (hygiene guile))
                                                         #{ g28555 28804}#))
                                                 #{tmp 28801}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 28799}#))))))))))
                             #{tmp 28782}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i28445"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i28414" "i28415"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i28410"
                                        "i28408"
                                        "i28406"
                                        "i28404"
                                        "i28402"
                                        "i28400"
                                        "i28398")))
                                    (hygiene guile))
                                 #{p 28692}#)))))))))))
       (#{vquasi 28669}#
         (lambda (#{p 28854}# #{lev 28855}#)
           (let ((#{tmp 28857}#
                   ($sc-dispatch #{p 28854}# '(any . any))))
             (if #{tmp 28857}#
               (@apply
                 (lambda (#{p 28861}# #{q 28862}#)
                   (let ((#{tmp 28864}#
                           ($sc-dispatch
                             #{p 28861}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i28453" "i28454"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i28449" "i28450"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i28410"
                                       "i28408"
                                       "i28406"
                                       "i28404"
                                       "i28402"
                                       "i28400"
                                       "i28398")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 28864}#
                       (@apply
                         (lambda (#{p 28868}#)
                           (if (= #{lev 28855}# 0)
                             (#{quasilist* 28672}#
                               (map (lambda (#{tmp 28461 28904}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i28459"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i28453" "i28454"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i28449" "i28450"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i28410"
                                                   "i28408"
                                                   "i28406"
                                                   "i28404"
                                                   "i28402"
                                                   "i28400"
                                                   "i28398")))
                                               (hygiene guile))
                                            #{tmp 28461 28904}#))
                                    #{p 28868}#)
                               (#{vquasi 28669}# #{q 28862}# #{lev 28855}#))
                             (#{quasicons 28670}#
                               (#{quasicons 28670}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i28459"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i28453" "i28454"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i28449" "i28450"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i28410"
                                         "i28408"
                                         "i28406"
                                         "i28404"
                                         "i28402"
                                         "i28400"
                                         "i28398")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i28459"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i28453" "i28454"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i28449" "i28450"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i28410"
                                         "i28408"
                                         "i28406"
                                         "i28404"
                                         "i28402"
                                         "i28400"
                                         "i28398")))
                                     (hygiene guile)))
                                 (#{quasi 28668}#
                                   #{p 28868}#
                                   (#{1-}# #{lev 28855}#)))
                               (#{vquasi 28669}# #{q 28862}# #{lev 28855}#))))
                         #{tmp 28864}#)
                       (let ((#{tmp 28911}#
                               ($sc-dispatch
                                 #{p 28861}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i28453" "i28454"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i28449" "i28450"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i28410"
                                           "i28408"
                                           "i28406"
                                           "i28404"
                                           "i28402"
                                           "i28400"
                                           "i28398")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 28911}#
                           (@apply
                             (lambda (#{p 28915}#)
                               (if (= #{lev 28855}# 0)
                                 (#{quasiappend 28671}#
                                   (map (lambda (#{tmp 28466 28918}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i28464"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i28453" "i28454"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i28449" "i28450"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i28410"
                                                       "i28408"
                                                       "i28406"
                                                       "i28404"
                                                       "i28402"
                                                       "i28400"
                                                       "i28398")))
                                                   (hygiene guile))
                                                #{tmp 28466 28918}#))
                                        #{p 28915}#)
                                   (#{vquasi 28669}#
                                     #{q 28862}#
                                     #{lev 28855}#))
                                 (#{quasicons 28670}#
                                   (#{quasicons 28670}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i28464"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i28453" "i28454"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i28449" "i28450"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i28410"
                                             "i28408"
                                             "i28406"
                                             "i28404"
                                             "i28402"
                                             "i28400"
                                             "i28398")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i28464"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i28453" "i28454"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i28449" "i28450"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i28410"
                                             "i28408"
                                             "i28406"
                                             "i28404"
                                             "i28402"
                                             "i28400"
                                             "i28398")))
                                         (hygiene guile)))
                                     (#{quasi 28668}#
                                       #{p 28915}#
                                       (#{1-}# #{lev 28855}#)))
                                   (#{vquasi 28669}#
                                     #{q 28862}#
                                     #{lev 28855}#))))
                             #{tmp 28911}#)
                           (#{quasicons 28670}#
                             (#{quasi 28668}# #{p 28861}# #{lev 28855}#)
                             (#{vquasi 28669}# #{q 28862}# #{lev 28855}#)))))))
                 #{tmp 28857}#)
               (let ((#{tmp 28936}# ($sc-dispatch #{p 28854}# '())))
                 (if #{tmp 28936}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28449" "i28450"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28410"
                               "i28408"
                               "i28406"
                               "i28404"
                               "i28402"
                               "i28400"
                               "i28398")))
                           (hygiene guile))
                         ()))
                     #{tmp 28936}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 28854}#)))))))
       (#{quasicons 28670}#
         (lambda (#{x 28949}# #{y 28950}#)
           (let ((#{tmp 28951}# (list #{x 28949}# #{y 28950}#)))
             (let ((#{tmp 28952}#
                     ($sc-dispatch #{tmp 28951}# '(any any))))
               (if #{tmp 28952}#
                 (@apply
                   (lambda (#{x 28954}# #{y 28955}#)
                     (let ((#{tmp 28957}#
                             ($sc-dispatch
                               #{y 28955}#
                               '(#(atom "quote") any))))
                       (if #{tmp 28957}#
                         (@apply
                           (lambda (#{dy 28961}#)
                             (let ((#{tmp 28963}#
                                     ($sc-dispatch
                                       #{x 28954}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 28963}#
                                 (@apply
                                   (lambda (#{dx 28967}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i28488"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i28484"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28478" "i28479"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28473" "i28474"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i28410"
                                                  "i28408"
                                                  "i28406"
                                                  "i28404"
                                                  "i28402"
                                                  "i28400"
                                                  "i28398")))
                                              (hygiene guile))
                                           (cons #{dx 28967}# #{dy 28961}#)))
                                   #{tmp 28963}#)
                                 (if (null? #{dy 28961}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i28490"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i28484"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28478" "i28479"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28473" "i28474"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i28410"
                                                "i28408"
                                                "i28406"
                                                "i28404"
                                                "i28402"
                                                "i28400"
                                                "i28398")))
                                            (hygiene guile))
                                         #{x 28954}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i28490"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i28484"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28478" "i28479"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28473" "i28474"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i28410"
                                                "i28408"
                                                "i28406"
                                                "i28404"
                                                "i28402"
                                                "i28400"
                                                "i28398")))
                                            (hygiene guile))
                                         #{x 28954}#
                                         #{y 28955}#)))))
                           #{tmp 28957}#)
                         (let ((#{tmp 28972}#
                                 ($sc-dispatch
                                   #{y 28955}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 28972}#
                             (@apply
                               (lambda (#{stuff 28976}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i28493"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28478" "i28479"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28473" "i28474"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i28410"
                                              "i28408"
                                              "i28406"
                                              "i28404"
                                              "i28402"
                                              "i28400"
                                              "i28398")))
                                          (hygiene guile))
                                       (cons #{x 28954}# #{stuff 28976}#)))
                               #{tmp 28972}#)
                             (let ((#{tmp 28977}#
                                     ($sc-dispatch
                                       #{y 28955}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 28977}#
                                 (@apply
                                   (lambda (#{stuff 28981}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i28496"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28478" "i28479"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28473" "i28474"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i28410"
                                                  "i28408"
                                                  "i28406"
                                                  "i28404"
                                                  "i28402"
                                                  "i28400"
                                                  "i28398")))
                                              (hygiene guile))
                                           (cons #{x 28954}# #{stuff 28981}#)))
                                   #{tmp 28977}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i28498"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28478" "i28479"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28473" "i28474"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i28410"
                                              "i28408"
                                              "i28406"
                                              "i28404"
                                              "i28402"
                                              "i28400"
                                              "i28398")))
                                          (hygiene guile))
                                       #{x 28954}#
                                       #{y 28955}#))))))))
                   #{tmp 28952}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 28951}#))))))
       (#{quasiappend 28671}#
         (lambda (#{x 28992}# #{y 28993}#)
           (let ((#{tmp 28995}#
                   ($sc-dispatch #{y 28993}# '(#(atom "quote") ()))))
             (if #{tmp 28995}#
               (@apply
                 (lambda ()
                   (if (null? #{x 28992}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i28502" "i28503"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i28410"
                             "i28408"
                             "i28406"
                             "i28404"
                             "i28402"
                             "i28400"
                             "i28398")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 28992}#))
                       (car #{x 28992}#)
                       (let ((#{tmp 29000}#
                               ($sc-dispatch #{x 28992}# 'each-any)))
                         (if #{tmp 29000}#
                           (@apply
                             (lambda (#{p 29004}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i28514"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i28502" "i28503"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i28410"
                                            "i28408"
                                            "i28406"
                                            "i28404"
                                            "i28402"
                                            "i28400"
                                            "i28398")))
                                        (hygiene guile))
                                     #{p 29004}#))
                             #{tmp 29000}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 28992}#))))))
                 #{tmp 28995}#)
               (if (null? #{x 28992}#)
                 #{y 28993}#
                 (let ((#{tmp 29012}# (list #{x 28992}# #{y 28993}#)))
                   (let ((#{tmp 29013}#
                           ($sc-dispatch #{tmp 29012}# '(each-any any))))
                     (if #{tmp 29013}#
                       (@apply
                         (lambda (#{p 29015}# #{y 29016}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i28525" "i28526"))
                                     #(ribcage #(_) #((top)) #("i28517"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i28502" "i28503"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i28410"
                                        "i28408"
                                        "i28406"
                                        "i28404"
                                        "i28402"
                                        "i28400"
                                        "i28398")))
                                    (hygiene guile))
                                 (append #{p 29015}# (list #{y 29016}#))))
                         #{tmp 29013}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 29012}#)))))))))
       (#{quasilist* 28672}#
         (lambda (#{x 29020}# #{y 29021}#)
           (letrec*
             ((#{f 29022}#
                (lambda (#{x 29111}#)
                  (if (null? #{x 29111}#)
                    #{y 29021}#
                    (#{quasicons 28670}#
                      (car #{x 29111}#)
                      (#{f 29022}# (cdr #{x 29111}#)))))))
             (#{f 29022}# #{x 29020}#))))
       (#{emit 28674}#
         (lambda (#{x 29114}#)
           (let ((#{tmp 29116}#
                   ($sc-dispatch #{x 29114}# '(#(atom "quote") any))))
             (if #{tmp 29116}#
               (@apply
                 (lambda (#{x 29120}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i28592"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i28589"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i28410"
                                "i28408"
                                "i28406"
                                "i28404"
                                "i28402"
                                "i28400"
                                "i28398")))
                            (hygiene guile))
                         #{x 29120}#))
                 #{tmp 29116}#)
               (let ((#{tmp 29121}#
                       ($sc-dispatch
                         #{x 29114}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 29121}#
                   (@apply
                     (lambda (#{x 29125}#)
                       (let ((#{tmp 29126}# (map #{emit 28674}# #{x 29125}#)))
                         (let ((#{tmp 29127}#
                                 ($sc-dispatch #{tmp 29126}# 'each-any)))
                           (if #{tmp 29127}#
                             (@apply
                               (lambda (#{ g28597 29129}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g28597}#)
                                             #((m28598 top))
                                             #("i28602"))
                                           #(ribcage #(x) #((top)) #("i28595"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i28589"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i28410"
                                              "i28408"
                                              "i28406"
                                              "i28404"
                                              "i28402"
                                              "i28400"
                                              "i28398")))
                                          (hygiene guile))
                                       #{ g28597 29129}#))
                               #{tmp 29127}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 29126}#)))))
                     #{tmp 29121}#)
                   (let ((#{tmp 29130}#
                           ($sc-dispatch
                             #{x 29114}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 29130}#
                       (@apply
                         (lambda (#{x 29134}# #{y 29135}#)
                           (letrec*
                             ((#{f 29136}#
                                (lambda (#{x* 29139}#)
                                  (if (null? #{x* 29139}#)
                                    (#{emit 28674}# #{y 29135}#)
                                    (let ((#{tmp 29140}#
                                            (list (#{emit 28674}#
                                                    (car #{x* 29139}#))
                                                  (#{f 29136}#
                                                    (cdr #{x* 29139}#)))))
                                      (let ((#{tmp 29141}#
                                              ($sc-dispatch
                                                #{tmp 29140}#
                                                '(any any))))
                                        (if #{tmp 29141}#
                                          (@apply
                                            (lambda (#{ g28617 29143}#
                                                     #{ g28616 29144}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g28617}#
                                                            #{ g28616}#)
                                                          #((m28618 top)
                                                            (m28618 top))
                                                          #("i28622" "i28623"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i28611" "i28612"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i28607" "i28608"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i28589"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i28410"
                                                           "i28408"
                                                           "i28406"
                                                           "i28404"
                                                           "i28402"
                                                           "i28400"
                                                           "i28398")))
                                                       (hygiene guile))
                                                    #{ g28617 29143}#
                                                    #{ g28616 29144}#))
                                            #{tmp 29141}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 29140}#))))))))
                             (#{f 29136}# #{x 29134}#)))
                         #{tmp 29130}#)
                       (let ((#{tmp 29145}#
                               ($sc-dispatch
                                 #{x 29114}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 29145}#
                           (@apply
                             (lambda (#{x 29149}#)
                               (let ((#{tmp 29150}#
                                       (map #{emit 28674}# #{x 29149}#)))
                                 (let ((#{tmp 29151}#
                                         ($sc-dispatch
                                           #{tmp 29150}#
                                           'each-any)))
                                   (if #{tmp 29151}#
                                     (@apply
                                       (lambda (#{ g28629 29153}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g28629}#)
                                                     #((m28630 top))
                                                     #("i28634"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28627"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28589"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i28410"
                                                      "i28408"
                                                      "i28406"
                                                      "i28404"
                                                      "i28402"
                                                      "i28400"
                                                      "i28398")))
                                                  (hygiene guile))
                                               #{ g28629 29153}#))
                                       #{tmp 29151}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 29150}#)))))
                             #{tmp 29145}#)
                           (let ((#{tmp 29154}#
                                   ($sc-dispatch
                                     #{x 29114}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 29154}#
                               (@apply
                                 (lambda (#{x 29158}#)
                                   (let ((#{tmp 29159}#
                                           (map #{emit 28674}# #{x 29158}#)))
                                     (let ((#{tmp 29160}#
                                             ($sc-dispatch
                                               #{tmp 29159}#
                                               'each-any)))
                                       (if #{tmp 29160}#
                                         (@apply
                                           (lambda (#{ g28641 29162}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g28641}#)
                                                         #((m28642 top))
                                                         #("i28646"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i28639"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i28589"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i28410"
                                                          "i28408"
                                                          "i28406"
                                                          "i28404"
                                                          "i28402"
                                                          "i28400"
                                                          "i28398")))
                                                      (hygiene guile))
                                                   #{ g28641 29162}#))
                                           #{tmp 29160}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 29159}#)))))
                                 #{tmp 29154}#)
                               (let ((#{tmp 29163}#
                                       ($sc-dispatch
                                         #{x 29114}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 29163}#
                                   (@apply
                                     (lambda (#{x 29167}#)
                                       (let ((#{tmp 29168}#
                                               (#{emit 28674}# #{x 29167}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g28653}#)
                                                     #((m28654 top))
                                                     #("i28657"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28651"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28589"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i28410"
                                                      "i28408"
                                                      "i28406"
                                                      "i28404"
                                                      "i28402"
                                                      "i28400"
                                                      "i28398")))
                                                  (hygiene guile))
                                               #{tmp 29168}#)))
                                     #{tmp 29163}#)
                                   (let ((#{tmp 29171}#
                                           ($sc-dispatch
                                             #{x 29114}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 29171}#
                                       (@apply
                                         (lambda (#{x 29175}#) #{x 29175}#)
                                         #{tmp 29171}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 29114}#))))))))))))))))))
      (lambda (#{x 28675}#)
        (let ((#{tmp 28677}#
                ($sc-dispatch #{x 28675}# '(_ any))))
          (if #{tmp 28677}#
            (@apply
              (lambda (#{e 28681}#)
                (#{emit 28674}# (#{quasi 28668}# #{e 28681}# 0)))
              #{tmp 28677}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 28675}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 29230}#)
      (letrec*
        ((#{read-file 29231}#
           (lambda (#{fn 29340}# #{k 29341}#)
             (let ((#{p 29342}# (open-input-file #{fn 29340}#)))
               (letrec*
                 ((#{f 29343}#
                    (lambda (#{x 29397}# #{result 29398}#)
                      (if (eof-object? #{x 29397}#)
                        (begin
                          (close-input-port #{p 29342}#)
                          (reverse #{result 29398}#))
                        (#{f 29343}#
                          (read #{p 29342}#)
                          (cons (datum->syntax #{k 29341}# #{x 29397}#)
                                #{result 29398}#))))))
                 (#{f 29343}# (read #{p 29342}#) '()))))))
        (let ((#{tmp 29233}#
                ($sc-dispatch #{x 29230}# '(any any))))
          (if #{tmp 29233}#
            (@apply
              (lambda (#{k 29237}# #{filename 29238}#)
                (let ((#{fn 29239}# (syntax->datum #{filename 29238}#)))
                  (let ((#{tmp 29240}#
                          (#{read-file 29231}#
                            #{fn 29239}#
                            #{filename 29238}#)))
                    (let ((#{tmp 29241}#
                            ($sc-dispatch #{tmp 29240}# 'each-any)))
                      (if #{tmp 29241}#
                        (@apply
                          (lambda (#{exp 29259}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i29227"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i29222"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i29218" "i29219"))
                                      #(ribcage (read-file) ((top)) ("i29202"))
                                      #(ribcage #(x) #((top)) #("i29201")))
                                     (hygiene guile))
                                  #{exp 29259}#))
                          #{tmp 29241}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 29240}#))))))
              #{tmp 29233}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 29230}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 29417}#)
      (let ((#{tmp 29419}#
              ($sc-dispatch #{x 29417}# '(any any))))
        (if #{tmp 29419}#
          (@apply
            (lambda (#{k 29423}# #{filename 29424}#)
              (let ((#{fn 29425}# (syntax->datum #{filename 29424}#)))
                (let ((#{tmp 29426}#
                        (datum->syntax
                          #{filename 29424}#
                          (let ((#{t 29429}# (%search-load-path #{fn 29425}#)))
                            (if #{t 29429}#
                              #{t 29429}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 29417}#
                                #{filename 29424}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i29411"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i29407"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i29403" "i29404"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29400")))
                           (hygiene guile))
                        #{tmp 29426}#))))
            #{tmp 29419}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 29417}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 29438}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 29438}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 29441}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 29441}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 29497}#)
      (let ((#{tmp 29499}#
              ($sc-dispatch
                #{x 29497}#
                '(_ any any . each-any))))
        (if #{tmp 29499}#
          (@apply
            (lambda (#{e 29503}# #{m1 29504}# #{m2 29505}#)
              (let ((#{tmp 29506}#
                      (letrec*
                        ((#{f 29548}#
                           (lambda (#{clause 29551}# #{clauses 29552}#)
                             (if (null? #{clauses 29552}#)
                               (let ((#{tmp 29554}#
                                       ($sc-dispatch
                                         #{clause 29551}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i29456"
                                                    "i29457"
                                                    "i29458"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i29446"
                                                    "i29447"
                                                    "i29448"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i29443")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 29554}#
                                   (@apply
                                     (lambda (#{e1 29558}# #{e2 29559}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i29465" "i29466"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i29456"
                                                     "i29457"
                                                     "i29458"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i29446"
                                                     "i29447"
                                                     "i29448"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i29443")))
                                                (hygiene guile))
                                             (cons #{e1 29558}# #{e2 29559}#)))
                                     #{tmp 29554}#)
                                   (let ((#{tmp 29560}#
                                           ($sc-dispatch
                                             #{clause 29551}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 29560}#
                                       (@apply
                                         (lambda (#{k 29564}#
                                                  #{e1 29565}#
                                                  #{e2 29566}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i29471"
                                                         "i29472"
                                                         "i29473"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i29456"
                                                         "i29457"
                                                         "i29458"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i29446"
                                                         "i29447"
                                                         "i29448"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i29443")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29471"
                                                               "i29472"
                                                               "i29473"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29456"
                                                               "i29457"
                                                               "i29458"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29446"
                                                               "i29447"
                                                               "i29448"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29443")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29471"
                                                               "i29472"
                                                               "i29473"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29456"
                                                               "i29457"
                                                               "i29458"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29446"
                                                               "i29447"
                                                               "i29448"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29443")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i29471"
                                                                     "i29472"
                                                                     "i29473"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i29456"
                                                                     "i29457"
                                                                     "i29458"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i29446"
                                                                     "i29447"
                                                                     "i29448"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i29443")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 29564}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29471"
                                                               "i29472"
                                                               "i29473"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29456"
                                                               "i29457"
                                                               "i29458"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29446"
                                                               "i29447"
                                                               "i29448"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29443")))
                                                          (hygiene guile))
                                                       (cons #{e1 29565}#
                                                             #{e2 29566}#))))
                                         #{tmp 29560}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 29497}#
                                         #{clause 29551}#)))))
                               (let ((#{tmp 29574}#
                                       (#{f 29548}#
                                         (car #{clauses 29552}#)
                                         (cdr #{clauses 29552}#))))
                                 (let ((#{tmp 29577}#
                                         ($sc-dispatch
                                           #{clause 29551}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 29577}#
                                     (@apply
                                       (lambda (#{k 29581}#
                                                #{e1 29582}#
                                                #{e2 29583}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i29487"
                                                       "i29488"
                                                       "i29489"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i29483"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i29456"
                                                       "i29457"
                                                       "i29458"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i29446"
                                                       "i29447"
                                                       "i29448"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29443")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i29487"
                                                             "i29488"
                                                             "i29489"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i29483"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i29456"
                                                             "i29457"
                                                             "i29458"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i29446"
                                                             "i29447"
                                                             "i29448"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i29443")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i29487"
                                                             "i29488"
                                                             "i29489"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i29483"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i29456"
                                                             "i29457"
                                                             "i29458"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i29446"
                                                             "i29447"
                                                             "i29448"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i29443")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i29487"
                                                                   "i29488"
                                                                   "i29489"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i29483"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i29456"
                                                                   "i29457"
                                                                   "i29458"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i29446"
                                                                   "i29447"
                                                                   "i29448"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i29443")))
                                                              (hygiene guile))
                                                           #{k 29581}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i29487"
                                                             "i29488"
                                                             "i29489"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i29483"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i29456"
                                                             "i29457"
                                                             "i29458"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i29446"
                                                             "i29447"
                                                             "i29448"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i29443")))
                                                        (hygiene guile))
                                                     (cons #{e1 29582}#
                                                           #{e2 29583}#))
                                               #{tmp 29574}#))
                                       #{tmp 29577}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 29497}#
                                       #{clause 29551}#))))))))
                        (#{f 29548}# #{m1 29504}# #{m2 29505}#))))
                (let ((#{body 29507}# #{tmp 29506}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i29454"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i29446" "i29447" "i29448"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29443")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i29454"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i29446" "i29447" "i29448"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i29443")))
                                       (hygiene guile))
                                    #{e 29503}#))
                        #{body 29507}#))))
            #{tmp 29499}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 29497}#))))))

(define make-variable-transformer
  (lambda (#{proc 29601}#)
    (if (procedure? #{proc 29601}#)
      (letrec*
        ((#{trans 29602}#
           (lambda (#{x 29608}#)
             (#{proc 29601}# #{x 29608}#))))
        (begin
          (set-procedure-property!
            #{trans 29602}#
            'variable-transformer
            #t)
          #{trans 29602}#))
      (error "variable transformer not a procedure"
             #{proc 29601}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 29640}#)
      (let ((#{tmp 29642}#
              ($sc-dispatch #{x 29640}# '(_ any))))
        (if #{tmp 29642}#
          (@apply
            (lambda (#{e 29646}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i29615"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i29612")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i29615"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i29612")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i29615"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i29612")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i29615"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i29612")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i29615"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i29612")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i29615"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i29612")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i29615"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i29612")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i29615"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29612")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i29615"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i29612")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i29615"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i29612")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i29615"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i29612")))
                                         (hygiene guile))
                                      #{e 29646}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i29615"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29612")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i29615"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29612")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i29615"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29612")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i29615"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i29612")))
                                         (hygiene guile))
                                      (cons #{e 29646}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i29615"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i29612")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i29615"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i29612")))
                                                (hygiene guile)))))))))
            #{tmp 29642}#)
          (let ((#{tmp 29647}#
                  ($sc-dispatch
                    #{x 29640}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i29612")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 29647}#
                  (@apply
                    (lambda (#{id 29651}#
                             #{exp1 29652}#
                             #{var 29653}#
                             #{val 29654}#
                             #{exp2 29655}#)
                      (if (identifier? #{id 29651}#)
                        (identifier? #{var 29653}#)
                        #f))
                    #{tmp 29647}#)
                  #f)
              (@apply
                (lambda (#{id 29656}#
                         #{exp1 29657}#
                         #{var 29658}#
                         #{val 29659}#
                         #{exp2 29660}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i29630" "i29631" "i29632" "i29633" "i29634"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29612")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i29630"
                                      "i29631"
                                      "i29632"
                                      "i29633"
                                      "i29634"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i29612")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i29630"
                                       "i29631"
                                       "i29632"
                                       "i29633"
                                       "i29634"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i29612")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i29630"
                                         "i29631"
                                         "i29632"
                                         "i29633"
                                         "i29634"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29612")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i29630"
                                         "i29631"
                                         "i29632"
                                         "i29633"
                                         "i29634"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29612")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i29630"
                                            "i29631"
                                            "i29632"
                                            "i29633"
                                            "i29634"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i29612")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i29630"
                                            "i29631"
                                            "i29632"
                                            "i29633"
                                            "i29634"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i29612")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i29630"
                                             "i29631"
                                             "i29632"
                                             "i29633"
                                             "i29634"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i29612")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29630"
                                                        "i29631"
                                                        "i29632"
                                                        "i29633"
                                                        "i29634"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i29612")))
                                                   (hygiene guile))
                                                #{var 29658}#
                                                #{val 29659}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29630"
                                                        "i29631"
                                                        "i29632"
                                                        "i29633"
                                                        "i29634"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i29612")))
                                                   (hygiene guile))
                                                #{exp2 29660}#))
                                    (list (cons #{id 29656}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i29630"
                                                         "i29631"
                                                         "i29632"
                                                         "i29633"
                                                         "i29634"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i29612")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i29630"
                                                         "i29631"
                                                         "i29632"
                                                         "i29633"
                                                         "i29634"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i29612")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29630"
                                                        "i29631"
                                                        "i29632"
                                                        "i29633"
                                                        "i29634"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i29612")))
                                                   (hygiene guile))
                                                (cons #{exp1 29657}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i29630"
                                                               "i29631"
                                                               "i29632"
                                                               "i29633"
                                                               "i29634"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29612")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i29630"
                                                               "i29631"
                                                               "i29632"
                                                               "i29633"
                                                               "i29634"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29612")))
                                                          (hygiene guile))))))
                                    (list #{id 29656}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29630"
                                                        "i29631"
                                                        "i29632"
                                                        "i29633"
                                                        "i29634"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i29612")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i29630"
                                                              "i29631"
                                                              "i29632"
                                                              "i29633"
                                                              "i29634"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i29612")))
                                                         (hygiene guile))
                                                      #{id 29656}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29630"
                                                        "i29631"
                                                        "i29632"
                                                        "i29633"
                                                        "i29634"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i29612")))
                                                   (hygiene guile))
                                                #{exp1 29657}#))))))
                #{tmp 29647}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 29640}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 29692}#)
      (let ((#{tmp 29694}#
              ($sc-dispatch
                #{x 29692}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 29694}#
          (@apply
            (lambda (#{id 29698}#
                     #{args 29699}#
                     #{b0 29700}#
                     #{b1 29701}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i29674" "i29675" "i29676" "i29677"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i29671")))
                       (hygiene guile))
                    #{id 29698}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i29674" "i29675" "i29676" "i29677"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i29671")))
                             (hygiene guile))
                          (cons #{args 29699}#
                                (cons #{b0 29700}# #{b1 29701}#)))))
            #{tmp 29694}#)
          (let ((#{tmp 29702}#
                  ($sc-dispatch #{x 29692}# '(_ any any))))
            (if (if #{tmp 29702}#
                  (@apply
                    (lambda (#{id 29706}# #{val 29707}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i29684" "i29685"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29671")))
                           (hygiene guile))))
                    #{tmp 29702}#)
                  #f)
              (@apply
                (lambda (#{id 29708}# #{val 29709}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i29688" "i29689"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29671")))
                           (hygiene guile))
                        #{id 29708}#
                        #{val 29709}#))
                #{tmp 29702}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 29692}#))))))))

