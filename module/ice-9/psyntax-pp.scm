(letrec ((syntmp-lambda-var-list-153 (lambda (syntmp-vars-544) (let syntmp-lvl-545 ((syntmp-vars-546 syntmp-vars-544) (syntmp-ls-547 (quote ())) (syntmp-w-548 (quote (())))) (cond ((pair? syntmp-vars-546) (syntmp-lvl-545 (cdr syntmp-vars-546) (cons (syntmp-wrap-132 (car syntmp-vars-546) syntmp-w-548 #f) syntmp-ls-547) syntmp-w-548)) ((syntmp-id?-104 syntmp-vars-546) (cons (syntmp-wrap-132 syntmp-vars-546 syntmp-w-548 #f) syntmp-ls-547)) ((null? syntmp-vars-546) syntmp-ls-547) ((syntmp-syntax-object?-88 syntmp-vars-546) (syntmp-lvl-545 (syntmp-syntax-object-expression-89 syntmp-vars-546) syntmp-ls-547 (syntmp-join-wraps-123 syntmp-w-548 (syntmp-syntax-object-wrap-90 syntmp-vars-546)))) ((annotation? syntmp-vars-546) (syntmp-lvl-545 (annotation-expression syntmp-vars-546) syntmp-ls-547 syntmp-w-548)) (else (cons syntmp-vars-546 syntmp-ls-547)))))) (syntmp-gen-var-152 (lambda (syntmp-id-549) (let ((syntmp-id-550 (if (syntmp-syntax-object?-88 syntmp-id-549) (syntmp-syntax-object-expression-89 syntmp-id-549) syntmp-id-549))) (if (annotation? syntmp-id-550) (syntmp-build-annotated-81 (annotation-source syntmp-id-550) (gensym (symbol->string (annotation-expression syntmp-id-550)))) (syntmp-build-annotated-81 #f (gensym (symbol->string syntmp-id-550))))))) (syntmp-strip-151 (lambda (syntmp-x-551 syntmp-w-552) (if (memq (quote top) (syntmp-wrap-marks-107 syntmp-w-552)) (if (or (annotation? syntmp-x-551) (and (pair? syntmp-x-551) (annotation? (car syntmp-x-551)))) (syntmp-strip-annotation-150 syntmp-x-551 #f) syntmp-x-551) (let syntmp-f-553 ((syntmp-x-554 syntmp-x-551)) (cond ((syntmp-syntax-object?-88 syntmp-x-554) (syntmp-strip-151 (syntmp-syntax-object-expression-89 syntmp-x-554) (syntmp-syntax-object-wrap-90 syntmp-x-554))) ((pair? syntmp-x-554) (let ((syntmp-a-555 (syntmp-f-553 (car syntmp-x-554))) (syntmp-d-556 (syntmp-f-553 (cdr syntmp-x-554)))) (if (and (eq? syntmp-a-555 (car syntmp-x-554)) (eq? syntmp-d-556 (cdr syntmp-x-554))) syntmp-x-554 (cons syntmp-a-555 syntmp-d-556)))) ((vector? syntmp-x-554) (let ((syntmp-old-557 (vector->list syntmp-x-554))) (let ((syntmp-new-558 (map syntmp-f-553 syntmp-old-557))) (if (andmap eq? syntmp-old-557 syntmp-new-558) syntmp-x-554 (list->vector syntmp-new-558))))) (else syntmp-x-554)))))) (syntmp-strip-annotation-150 (lambda (syntmp-x-559 syntmp-parent-560) (cond ((pair? syntmp-x-559) (let ((syntmp-new-561 (cons #f #f))) (begin (if syntmp-parent-560 (set-annotation-stripped! syntmp-parent-560 syntmp-new-561)) (set-car! syntmp-new-561 (syntmp-strip-annotation-150 (car syntmp-x-559) #f)) (set-cdr! syntmp-new-561 (syntmp-strip-annotation-150 (cdr syntmp-x-559) #f)) syntmp-new-561))) ((annotation? syntmp-x-559) (or (annotation-stripped syntmp-x-559) (syntmp-strip-annotation-150 (annotation-expression syntmp-x-559) syntmp-x-559))) ((vector? syntmp-x-559) (let ((syntmp-new-562 (make-vector (vector-length syntmp-x-559)))) (begin (if syntmp-parent-560 (set-annotation-stripped! syntmp-parent-560 syntmp-new-562)) (let syntmp-loop-563 ((syntmp-i-564 (- (vector-length syntmp-x-559) 1))) (unless (syntmp-fx<-75 syntmp-i-564 0) (vector-set! syntmp-new-562 syntmp-i-564 (syntmp-strip-annotation-150 (vector-ref syntmp-x-559 syntmp-i-564) #f)) (syntmp-loop-563 (syntmp-fx--73 syntmp-i-564 1)))) syntmp-new-562))) (else syntmp-x-559)))) (syntmp-ellipsis?-149 (lambda (syntmp-x-565) (and (syntmp-nonsymbol-id?-103 syntmp-x-565) (syntmp-free-id=?-127 syntmp-x-565 (quote #(syntax-object ... ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-module! set-syntax-object-wrap! set-syntax-object-expression! syntax-object-module syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application build-annotated get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))) (ice-9 syncase))))))) (syntmp-chi-void-148 (lambda () (syntmp-build-annotated-81 #f (list (syntmp-build-annotated-81 #f (quote void)))))) (syntmp-eval-local-transformer-147 (lambda (syntmp-expanded-566 syntmp-mod-567) (let ((syntmp-p-568 (syntmp-local-eval-hook-77 syntmp-expanded-566 syntmp-mod-567))) (if (procedure? syntmp-p-568) syntmp-p-568 (syntax-error syntmp-p-568 "nonprocedure transformer"))))) (syntmp-chi-local-syntax-146 (lambda (syntmp-rec?-569 syntmp-e-570 syntmp-r-571 syntmp-w-572 syntmp-s-573 syntmp-mod-574 syntmp-k-575) ((lambda (syntmp-tmp-576) ((lambda (syntmp-tmp-577) (if syntmp-tmp-577 (apply (lambda (syntmp-_-578 syntmp-id-579 syntmp-val-580 syntmp-e1-581 syntmp-e2-582) (let ((syntmp-ids-583 syntmp-id-579)) (if (not (syntmp-valid-bound-ids?-129 syntmp-ids-583)) (syntax-error syntmp-e-570 "duplicate bound keyword in") (let ((syntmp-labels-585 (syntmp-gen-labels-110 syntmp-ids-583))) (let ((syntmp-new-w-586 (syntmp-make-binding-wrap-121 syntmp-ids-583 syntmp-labels-585 syntmp-w-572))) (syntmp-k-575 (cons syntmp-e1-581 syntmp-e2-582) (syntmp-extend-env-98 syntmp-labels-585 (let ((syntmp-w-588 (if syntmp-rec?-569 syntmp-new-w-586 syntmp-w-572)) (syntmp-trans-r-589 (syntmp-macros-only-env-100 syntmp-r-571))) (map (lambda (syntmp-x-590) (cons (quote macro) (syntmp-eval-local-transformer-147 (syntmp-chi-140 syntmp-x-590 syntmp-trans-r-589 syntmp-w-588 syntmp-mod-574) syntmp-mod-574))) syntmp-val-580)) syntmp-r-571) syntmp-new-w-586 syntmp-s-573 syntmp-mod-574)))))) syntmp-tmp-577) ((lambda (syntmp-_-592) (syntax-error (syntmp-source-wrap-133 syntmp-e-570 syntmp-w-572 syntmp-s-573 syntmp-mod-574))) syntmp-tmp-576))) (syntax-dispatch syntmp-tmp-576 (quote (any #(each (any any)) any . each-any))))) syntmp-e-570))) (syntmp-chi-lambda-clause-145 (lambda (syntmp-e-593 syntmp-c-594 syntmp-r-595 syntmp-w-596 syntmp-mod-597 syntmp-k-598) ((lambda (syntmp-tmp-599) ((lambda (syntmp-tmp-600) (if syntmp-tmp-600 (apply (lambda (syntmp-id-601 syntmp-e1-602 syntmp-e2-603) (let ((syntmp-ids-604 syntmp-id-601)) (if (not (syntmp-valid-bound-ids?-129 syntmp-ids-604)) (syntax-error syntmp-e-593 "invalid parameter list in") (let ((syntmp-labels-606 (syntmp-gen-labels-110 syntmp-ids-604)) (syntmp-new-vars-607 (map syntmp-gen-var-152 syntmp-ids-604))) (syntmp-k-598 syntmp-new-vars-607 (syntmp-chi-body-144 (cons syntmp-e1-602 syntmp-e2-603) syntmp-e-593 (syntmp-extend-var-env-99 syntmp-labels-606 syntmp-new-vars-607 syntmp-r-595) (syntmp-make-binding-wrap-121 syntmp-ids-604 syntmp-labels-606 syntmp-w-596) syntmp-mod-597)))))) syntmp-tmp-600) ((lambda (syntmp-tmp-609) (if syntmp-tmp-609 (apply (lambda (syntmp-ids-610 syntmp-e1-611 syntmp-e2-612) (let ((syntmp-old-ids-613 (syntmp-lambda-var-list-153 syntmp-ids-610))) (if (not (syntmp-valid-bound-ids?-129 syntmp-old-ids-613)) (syntax-error syntmp-e-593 "invalid parameter list in") (let ((syntmp-labels-614 (syntmp-gen-labels-110 syntmp-old-ids-613)) (syntmp-new-vars-615 (map syntmp-gen-var-152 syntmp-old-ids-613))) (syntmp-k-598 (let syntmp-f-616 ((syntmp-ls1-617 (cdr syntmp-new-vars-615)) (syntmp-ls2-618 (car syntmp-new-vars-615))) (if (null? syntmp-ls1-617) syntmp-ls2-618 (syntmp-f-616 (cdr syntmp-ls1-617) (cons (car syntmp-ls1-617) syntmp-ls2-618)))) (syntmp-chi-body-144 (cons syntmp-e1-611 syntmp-e2-612) syntmp-e-593 (syntmp-extend-var-env-99 syntmp-labels-614 syntmp-new-vars-615 syntmp-r-595) (syntmp-make-binding-wrap-121 syntmp-old-ids-613 syntmp-labels-614 syntmp-w-596) syntmp-mod-597)))))) syntmp-tmp-609) ((lambda (syntmp-_-620) (syntax-error syntmp-e-593)) syntmp-tmp-599))) (syntax-dispatch syntmp-tmp-599 (quote (any any . each-any)))))) (syntax-dispatch syntmp-tmp-599 (quote (each-any any . each-any))))) syntmp-c-594))) (syntmp-chi-body-144 (lambda (syntmp-body-621 syntmp-outer-form-622 syntmp-r-623 syntmp-w-624 syntmp-mod-625) (let ((syntmp-r-626 (cons (quote ("placeholder" placeholder)) syntmp-r-623))) (let ((syntmp-ribcage-627 (syntmp-make-ribcage-111 (quote ()) (quote ()) (quote ())))) (let ((syntmp-w-628 (syntmp-make-wrap-106 (syntmp-wrap-marks-107 syntmp-w-624) (cons syntmp-ribcage-627 (syntmp-wrap-subst-108 syntmp-w-624))))) (let syntmp-parse-629 ((syntmp-body-630 (map (lambda (syntmp-x-636) (cons syntmp-r-626 (syntmp-wrap-132 syntmp-x-636 syntmp-w-628 syntmp-mod-625))) syntmp-body-621)) (syntmp-ids-631 (quote ())) (syntmp-labels-632 (quote ())) (syntmp-vars-633 (quote ())) (syntmp-vals-634 (quote ())) (syntmp-bindings-635 (quote ()))) (if (null? syntmp-body-630) (syntax-error syntmp-outer-form-622 "no expressions in body") (let ((syntmp-e-637 (cdar syntmp-body-630)) (syntmp-er-638 (caar syntmp-body-630))) (call-with-values (lambda () (syntmp-syntax-type-138 syntmp-e-637 syntmp-er-638 (quote (())) #f syntmp-ribcage-627 syntmp-mod-625)) (lambda (syntmp-type-639 syntmp-value-640 syntmp-e-641 syntmp-w-642 syntmp-s-643 syntmp-mod-644) (let ((syntmp-t-645 syntmp-type-639)) (if (memv syntmp-t-645 (quote (define-form))) (let ((syntmp-id-646 (syntmp-wrap-132 syntmp-value-640 syntmp-w-642 syntmp-mod-644)) (syntmp-label-647 (syntmp-gen-label-109))) (let ((syntmp-var-648 (syntmp-gen-var-152 syntmp-id-646))) (begin (syntmp-extend-ribcage!-120 syntmp-ribcage-627 syntmp-id-646 syntmp-label-647) (syntmp-parse-629 (cdr syntmp-body-630) (cons syntmp-id-646 syntmp-ids-631) (cons syntmp-label-647 syntmp-labels-632) (cons syntmp-var-648 syntmp-vars-633) (cons (cons syntmp-er-638 (syntmp-wrap-132 syntmp-e-641 syntmp-w-642 syntmp-mod-644)) syntmp-vals-634) (cons (cons (quote lexical) syntmp-var-648) syntmp-bindings-635))))) (if (memv syntmp-t-645 (quote (define-syntax-form))) (let ((syntmp-id-649 (syntmp-wrap-132 syntmp-value-640 syntmp-w-642 syntmp-mod-644)) (syntmp-label-650 (syntmp-gen-label-109))) (begin (syntmp-extend-ribcage!-120 syntmp-ribcage-627 syntmp-id-649 syntmp-label-650) (syntmp-parse-629 (cdr syntmp-body-630) (cons syntmp-id-649 syntmp-ids-631) (cons syntmp-label-650 syntmp-labels-632) syntmp-vars-633 syntmp-vals-634 (cons (cons (quote macro) (cons syntmp-er-638 (syntmp-wrap-132 syntmp-e-641 syntmp-w-642 syntmp-mod-644))) syntmp-bindings-635)))) (if (memv syntmp-t-645 (quote (begin-form))) ((lambda (syntmp-tmp-651) ((lambda (syntmp-tmp-652) (if syntmp-tmp-652 (apply (lambda (syntmp-_-653 syntmp-e1-654) (syntmp-parse-629 (let syntmp-f-655 ((syntmp-forms-656 syntmp-e1-654)) (if (null? syntmp-forms-656) (cdr syntmp-body-630) (cons (cons syntmp-er-638 (syntmp-wrap-132 (car syntmp-forms-656) syntmp-w-642 syntmp-mod-644)) (syntmp-f-655 (cdr syntmp-forms-656))))) syntmp-ids-631 syntmp-labels-632 syntmp-vars-633 syntmp-vals-634 syntmp-bindings-635)) syntmp-tmp-652) (syntax-error syntmp-tmp-651))) (syntax-dispatch syntmp-tmp-651 (quote (any . each-any))))) syntmp-e-641) (if (memv syntmp-t-645 (quote (local-syntax-form))) (syntmp-chi-local-syntax-146 syntmp-value-640 syntmp-e-641 syntmp-er-638 syntmp-w-642 syntmp-s-643 syntmp-mod-644 (lambda (syntmp-forms-658 syntmp-er-659 syntmp-w-660 syntmp-s-661 syntmp-mod-662) (syntmp-parse-629 (let syntmp-f-663 ((syntmp-forms-664 syntmp-forms-658)) (if (null? syntmp-forms-664) (cdr syntmp-body-630) (cons (cons syntmp-er-659 (syntmp-wrap-132 (car syntmp-forms-664) syntmp-w-660 syntmp-mod-662)) (syntmp-f-663 (cdr syntmp-forms-664))))) syntmp-ids-631 syntmp-labels-632 syntmp-vars-633 syntmp-vals-634 syntmp-bindings-635))) (if (null? syntmp-ids-631) (syntmp-build-sequence-83 #f (map (lambda (syntmp-x-665) (syntmp-chi-140 (cdr syntmp-x-665) (car syntmp-x-665) (quote (())) syntmp-mod-644)) (cons (cons syntmp-er-638 (syntmp-source-wrap-133 syntmp-e-641 syntmp-w-642 syntmp-s-643 syntmp-mod-644)) (cdr syntmp-body-630)))) (begin (if (not (syntmp-valid-bound-ids?-129 syntmp-ids-631)) (syntax-error syntmp-outer-form-622 "invalid or duplicate identifier in definition")) (let syntmp-loop-666 ((syntmp-bs-667 syntmp-bindings-635) (syntmp-er-cache-668 #f) (syntmp-r-cache-669 #f)) (if (not (null? syntmp-bs-667)) (let ((syntmp-b-670 (car syntmp-bs-667))) (if (eq? (car syntmp-b-670) (quote macro)) (let ((syntmp-er-671 (cadr syntmp-b-670))) (let ((syntmp-r-cache-672 (if (eq? syntmp-er-671 syntmp-er-cache-668) syntmp-r-cache-669 (syntmp-macros-only-env-100 syntmp-er-671)))) (begin (set-cdr! syntmp-b-670 (syntmp-eval-local-transformer-147 (syntmp-chi-140 (cddr syntmp-b-670) syntmp-r-cache-672 (quote (())) syntmp-mod-644) syntmp-mod-644)) (syntmp-loop-666 (cdr syntmp-bs-667) syntmp-er-671 syntmp-r-cache-672)))) (syntmp-loop-666 (cdr syntmp-bs-667) syntmp-er-cache-668 syntmp-r-cache-669))))) (set-cdr! syntmp-r-626 (syntmp-extend-env-98 syntmp-labels-632 syntmp-bindings-635 (cdr syntmp-r-626))) (syntmp-build-letrec-86 #f syntmp-vars-633 (map (lambda (syntmp-x-673) (syntmp-chi-140 (cdr syntmp-x-673) (car syntmp-x-673) (quote (())) syntmp-mod-644)) syntmp-vals-634) (syntmp-build-sequence-83 #f (map (lambda (syntmp-x-674) (syntmp-chi-140 (cdr syntmp-x-674) (car syntmp-x-674) (quote (())) syntmp-mod-644)) (cons (cons syntmp-er-638 (syntmp-source-wrap-133 syntmp-e-641 syntmp-w-642 syntmp-s-643 syntmp-mod-644)) (cdr syntmp-body-630)))))))))))))))))))))) (syntmp-chi-macro-143 (lambda (syntmp-p-675 syntmp-e-676 syntmp-r-677 syntmp-w-678 syntmp-rib-679 syntmp-mod-680) (letrec ((syntmp-rebuild-macro-output-681 (lambda (syntmp-x-682 syntmp-m-683) (cond ((pair? syntmp-x-682) (cons (syntmp-rebuild-macro-output-681 (car syntmp-x-682) syntmp-m-683) (syntmp-rebuild-macro-output-681 (cdr syntmp-x-682) syntmp-m-683))) ((syntmp-syntax-object?-88 syntmp-x-682) (let ((syntmp-w-684 (syntmp-syntax-object-wrap-90 syntmp-x-682))) (let ((syntmp-ms-685 (syntmp-wrap-marks-107 syntmp-w-684)) (syntmp-s-686 (syntmp-wrap-subst-108 syntmp-w-684))) (if (and (pair? syntmp-ms-685) (eq? (car syntmp-ms-685) #f)) (syntmp-make-syntax-object-87 (syntmp-syntax-object-expression-89 syntmp-x-682) (syntmp-make-wrap-106 (cdr syntmp-ms-685) (if syntmp-rib-679 (cons syntmp-rib-679 (cdr syntmp-s-686)) (cdr syntmp-s-686))) (syntmp-syntax-object-module-91 syntmp-x-682)) (syntmp-make-syntax-object-87 (syntmp-syntax-object-expression-89 syntmp-x-682) (syntmp-make-wrap-106 (cons syntmp-m-683 syntmp-ms-685) (if syntmp-rib-679 (cons syntmp-rib-679 (cons (quote shift) syntmp-s-686)) (cons (quote shift) syntmp-s-686))) (module-name (procedure-module syntmp-p-675))))))) ((vector? syntmp-x-682) (let ((syntmp-n-687 (vector-length syntmp-x-682))) (let ((syntmp-v-688 (make-vector syntmp-n-687))) (let syntmp-doloop-689 ((syntmp-i-690 0)) (if (syntmp-fx=-74 syntmp-i-690 syntmp-n-687) syntmp-v-688 (begin (vector-set! syntmp-v-688 syntmp-i-690 (syntmp-rebuild-macro-output-681 (vector-ref syntmp-x-682 syntmp-i-690) syntmp-m-683)) (syntmp-doloop-689 (syntmp-fx+-72 syntmp-i-690 1)))))))) ((symbol? syntmp-x-682) (syntax-error syntmp-x-682 "encountered raw symbol in macro output")) (else syntmp-x-682))))) (syntmp-rebuild-macro-output-681 (syntmp-p-675 (syntmp-wrap-132 syntmp-e-676 (syntmp-anti-mark-119 syntmp-w-678) syntmp-mod-680)) (string #\m))))) (syntmp-chi-application-142 (lambda (syntmp-x-691 syntmp-e-692 syntmp-r-693 syntmp-w-694 syntmp-s-695 syntmp-mod-696) ((lambda (syntmp-tmp-697) ((lambda (syntmp-tmp-698) (if syntmp-tmp-698 (apply (lambda (syntmp-e0-699 syntmp-e1-700) (syntmp-build-annotated-81 syntmp-s-695 (cons syntmp-x-691 (map (lambda (syntmp-e-701) (syntmp-chi-140 syntmp-e-701 syntmp-r-693 syntmp-w-694 syntmp-mod-696)) syntmp-e1-700)))) syntmp-tmp-698) (syntax-error syntmp-tmp-697))) (syntax-dispatch syntmp-tmp-697 (quote (any . each-any))))) syntmp-e-692))) (syntmp-chi-expr-141 (lambda (syntmp-type-703 syntmp-value-704 syntmp-e-705 syntmp-r-706 syntmp-w-707 syntmp-s-708 syntmp-mod-709) (let ((syntmp-t-710 syntmp-type-703)) (if (memv syntmp-t-710 (quote (lexical))) (syntmp-build-annotated-81 syntmp-s-708 syntmp-value-704) (if (memv syntmp-t-710 (quote (core external-macro))) (syntmp-value-704 syntmp-e-705 syntmp-r-706 syntmp-w-707 syntmp-s-708 syntmp-mod-709) (if (memv syntmp-t-710 (quote (module-ref))) (call-with-values (lambda () (syntmp-value-704 syntmp-e-705)) (lambda (syntmp-id-711 syntmp-mod-712) (syntmp-build-annotated-81 syntmp-s-708 (make-module-ref syntmp-mod-712 syntmp-id-711 #f)))) (if (memv syntmp-t-710 (quote (lexical-call))) (syntmp-chi-application-142 (syntmp-build-annotated-81 (syntmp-source-annotation-95 (car syntmp-e-705)) syntmp-value-704) syntmp-e-705 syntmp-r-706 syntmp-w-707 syntmp-s-708 syntmp-mod-709) (if (memv syntmp-t-710 (quote (global-call))) (syntmp-chi-application-142 (syntmp-build-annotated-81 (syntmp-source-annotation-95 (car syntmp-e-705)) (make-module-ref (if (syntmp-syntax-object?-88 (car syntmp-e-705)) (syntmp-syntax-object-module-91 (car syntmp-e-705)) syntmp-mod-709) syntmp-value-704 #f)) syntmp-e-705 syntmp-r-706 syntmp-w-707 syntmp-s-708 syntmp-mod-709) (if (memv syntmp-t-710 (quote (constant))) (syntmp-build-data-82 syntmp-s-708 (syntmp-strip-151 (syntmp-source-wrap-133 syntmp-e-705 syntmp-w-707 syntmp-s-708 syntmp-mod-709) (quote (())))) (if (memv syntmp-t-710 (quote (global))) (syntmp-build-annotated-81 syntmp-s-708 (make-module-ref syntmp-mod-709 syntmp-value-704 #f)) (if (memv syntmp-t-710 (quote (call))) (syntmp-chi-application-142 (syntmp-chi-140 (car syntmp-e-705) syntmp-r-706 syntmp-w-707 syntmp-mod-709) syntmp-e-705 syntmp-r-706 syntmp-w-707 syntmp-s-708 syntmp-mod-709) (if (memv syntmp-t-710 (quote (begin-form))) ((lambda (syntmp-tmp-713) ((lambda (syntmp-tmp-714) (if syntmp-tmp-714 (apply (lambda (syntmp-_-715 syntmp-e1-716 syntmp-e2-717) (syntmp-chi-sequence-134 (cons syntmp-e1-716 syntmp-e2-717) syntmp-r-706 syntmp-w-707 syntmp-s-708 syntmp-mod-709)) syntmp-tmp-714) (syntax-error syntmp-tmp-713))) (syntax-dispatch syntmp-tmp-713 (quote (any any . each-any))))) syntmp-e-705) (if (memv syntmp-t-710 (quote (local-syntax-form))) (syntmp-chi-local-syntax-146 syntmp-value-704 syntmp-e-705 syntmp-r-706 syntmp-w-707 syntmp-s-708 syntmp-mod-709 syntmp-chi-sequence-134) (if (memv syntmp-t-710 (quote (eval-when-form))) ((lambda (syntmp-tmp-719) ((lambda (syntmp-tmp-720) (if syntmp-tmp-720 (apply (lambda (syntmp-_-721 syntmp-x-722 syntmp-e1-723 syntmp-e2-724) (let ((syntmp-when-list-725 (syntmp-chi-when-list-137 syntmp-e-705 syntmp-x-722 syntmp-w-707))) (if (memq (quote eval) syntmp-when-list-725) (syntmp-chi-sequence-134 (cons syntmp-e1-723 syntmp-e2-724) syntmp-r-706 syntmp-w-707 syntmp-s-708 syntmp-mod-709) (syntmp-chi-void-148)))) syntmp-tmp-720) (syntax-error syntmp-tmp-719))) (syntax-dispatch syntmp-tmp-719 (quote (any each-any any . each-any))))) syntmp-e-705) (if (memv syntmp-t-710 (quote (define-form define-syntax-form))) (syntax-error (syntmp-wrap-132 syntmp-value-704 syntmp-w-707 syntmp-mod-709) "invalid context for definition of") (if (memv syntmp-t-710 (quote (syntax))) (syntax-error (syntmp-source-wrap-133 syntmp-e-705 syntmp-w-707 syntmp-s-708 syntmp-mod-709) "reference to pattern variable outside syntax form") (if (memv syntmp-t-710 (quote (displaced-lexical))) (syntax-error (syntmp-source-wrap-133 syntmp-e-705 syntmp-w-707 syntmp-s-708 syntmp-mod-709) "reference to identifier outside its scope") (syntax-error (syntmp-source-wrap-133 syntmp-e-705 syntmp-w-707 syntmp-s-708 syntmp-mod-709))))))))))))))))))) (syntmp-chi-140 (lambda (syntmp-e-728 syntmp-r-729 syntmp-w-730 syntmp-mod-731) (call-with-values (lambda () (syntmp-syntax-type-138 syntmp-e-728 syntmp-r-729 syntmp-w-730 #f #f syntmp-mod-731)) (lambda (syntmp-type-732 syntmp-value-733 syntmp-e-734 syntmp-w-735 syntmp-s-736 syntmp-mod-737) (syntmp-chi-expr-141 syntmp-type-732 syntmp-value-733 syntmp-e-734 syntmp-r-729 syntmp-w-735 syntmp-s-736 syntmp-mod-737))))) (syntmp-chi-top-139 (lambda (syntmp-e-738 syntmp-r-739 syntmp-w-740 syntmp-m-741 syntmp-esew-742 syntmp-mod-743) (call-with-values (lambda () (syntmp-syntax-type-138 syntmp-e-738 syntmp-r-739 syntmp-w-740 #f #f syntmp-mod-743)) (lambda (syntmp-type-758 syntmp-value-759 syntmp-e-760 syntmp-w-761 syntmp-s-762 syntmp-mod-763) (let ((syntmp-t-764 syntmp-type-758)) (if (memv syntmp-t-764 (quote (begin-form))) ((lambda (syntmp-tmp-765) ((lambda (syntmp-tmp-766) (if syntmp-tmp-766 (apply (lambda (syntmp-_-767) (syntmp-chi-void-148)) syntmp-tmp-766) ((lambda (syntmp-tmp-768) (if syntmp-tmp-768 (apply (lambda (syntmp-_-769 syntmp-e1-770 syntmp-e2-771) (syntmp-chi-top-sequence-135 (cons syntmp-e1-770 syntmp-e2-771) syntmp-r-739 syntmp-w-761 syntmp-s-762 syntmp-m-741 syntmp-esew-742 syntmp-mod-763)) syntmp-tmp-768) (syntax-error syntmp-tmp-765))) (syntax-dispatch syntmp-tmp-765 (quote (any any . each-any)))))) (syntax-dispatch syntmp-tmp-765 (quote (any))))) syntmp-e-760) (if (memv syntmp-t-764 (quote (local-syntax-form))) (syntmp-chi-local-syntax-146 syntmp-value-759 syntmp-e-760 syntmp-r-739 syntmp-w-761 syntmp-s-762 syntmp-mod-763 (lambda (syntmp-body-773 syntmp-r-774 syntmp-w-775 syntmp-s-776 syntmp-mod-777) (syntmp-chi-top-sequence-135 syntmp-body-773 syntmp-r-774 syntmp-w-775 syntmp-s-776 syntmp-m-741 syntmp-esew-742 syntmp-mod-777))) (if (memv syntmp-t-764 (quote (eval-when-form))) ((lambda (syntmp-tmp-778) ((lambda (syntmp-tmp-779) (if syntmp-tmp-779 (apply (lambda (syntmp-_-780 syntmp-x-781 syntmp-e1-782 syntmp-e2-783) (let ((syntmp-when-list-784 (syntmp-chi-when-list-137 syntmp-e-760 syntmp-x-781 syntmp-w-761)) (syntmp-body-785 (cons syntmp-e1-782 syntmp-e2-783))) (cond ((eq? syntmp-m-741 (quote e)) (if (memq (quote eval) syntmp-when-list-784) (syntmp-chi-top-sequence-135 syntmp-body-785 syntmp-r-739 syntmp-w-761 syntmp-s-762 (quote e) (quote (eval)) syntmp-mod-763) (syntmp-chi-void-148))) ((memq (quote load) syntmp-when-list-784) (if (or (memq (quote compile) syntmp-when-list-784) (and (eq? syntmp-m-741 (quote c&e)) (memq (quote eval) syntmp-when-list-784))) (syntmp-chi-top-sequence-135 syntmp-body-785 syntmp-r-739 syntmp-w-761 syntmp-s-762 (quote c&e) (quote (compile load)) syntmp-mod-763) (if (memq syntmp-m-741 (quote (c c&e))) (syntmp-chi-top-sequence-135 syntmp-body-785 syntmp-r-739 syntmp-w-761 syntmp-s-762 (quote c) (quote (load)) syntmp-mod-763) (syntmp-chi-void-148)))) ((or (memq (quote compile) syntmp-when-list-784) (and (eq? syntmp-m-741 (quote c&e)) (memq (quote eval) syntmp-when-list-784))) (syntmp-top-level-eval-hook-76 (syntmp-chi-top-sequence-135 syntmp-body-785 syntmp-r-739 syntmp-w-761 syntmp-s-762 (quote e) (quote (eval)) syntmp-mod-763) syntmp-mod-763) (syntmp-chi-void-148)) (else (syntmp-chi-void-148))))) syntmp-tmp-779) (syntax-error syntmp-tmp-778))) (syntax-dispatch syntmp-tmp-778 (quote (any each-any any . each-any))))) syntmp-e-760) (if (memv syntmp-t-764 (quote (define-syntax-form))) (let ((syntmp-n-788 (syntmp-id-var-name-126 syntmp-value-759 syntmp-w-761)) (syntmp-r-789 (syntmp-macros-only-env-100 syntmp-r-739))) (let ((syntmp-t-790 syntmp-m-741)) (if (memv syntmp-t-790 (quote (c))) (if (memq (quote compile) syntmp-esew-742) (let ((syntmp-e-791 (syntmp-chi-install-global-136 syntmp-n-788 (syntmp-chi-140 syntmp-e-760 syntmp-r-789 syntmp-w-761 syntmp-mod-763)))) (begin (syntmp-top-level-eval-hook-76 syntmp-e-791 syntmp-mod-763) (if (memq (quote load) syntmp-esew-742) syntmp-e-791 (syntmp-chi-void-148)))) (if (memq (quote load) syntmp-esew-742) (syntmp-chi-install-global-136 syntmp-n-788 (syntmp-chi-140 syntmp-e-760 syntmp-r-789 syntmp-w-761 syntmp-mod-763)) (syntmp-chi-void-148))) (if (memv syntmp-t-790 (quote (c&e))) (let ((syntmp-e-792 (syntmp-chi-install-global-136 syntmp-n-788 (syntmp-chi-140 syntmp-e-760 syntmp-r-789 syntmp-w-761 syntmp-mod-763)))) (begin (syntmp-top-level-eval-hook-76 syntmp-e-792 syntmp-mod-763) syntmp-e-792)) (begin (if (memq (quote eval) syntmp-esew-742) (syntmp-top-level-eval-hook-76 (syntmp-chi-install-global-136 syntmp-n-788 (syntmp-chi-140 syntmp-e-760 syntmp-r-789 syntmp-w-761 syntmp-mod-763)) syntmp-mod-763)) (syntmp-chi-void-148)))))) (if (memv syntmp-t-764 (quote (define-form))) (let ((syntmp-n-793 (syntmp-id-var-name-126 syntmp-value-759 syntmp-w-761))) (let ((syntmp-type-794 (syntmp-binding-type-96 (syntmp-lookup-101 syntmp-n-793 syntmp-r-739 syntmp-mod-763)))) (let ((syntmp-t-795 syntmp-type-794)) (if (memv syntmp-t-795 (quote (global))) (let ((syntmp-x-796 (syntmp-build-annotated-81 syntmp-s-762 (list (quote define) syntmp-n-793 (syntmp-chi-140 syntmp-e-760 syntmp-r-739 syntmp-w-761 syntmp-mod-763))))) (begin (if (eq? syntmp-m-741 (quote c&e)) (syntmp-top-level-eval-hook-76 syntmp-x-796 syntmp-mod-763)) syntmp-x-796)) (if (memv syntmp-t-795 (quote (displaced-lexical))) (syntax-error (syntmp-wrap-132 syntmp-value-759 syntmp-w-761 syntmp-mod-763) "identifier out of context") (if (eq? syntmp-type-794 (quote external-macro)) (let ((syntmp-x-797 (syntmp-build-annotated-81 syntmp-s-762 (list (quote define) syntmp-n-793 (syntmp-chi-140 syntmp-e-760 syntmp-r-739 syntmp-w-761 syntmp-mod-763))))) (begin (if (eq? syntmp-m-741 (quote c&e)) (syntmp-top-level-eval-hook-76 syntmp-x-797 syntmp-mod-763)) syntmp-x-797)) (syntax-error (syntmp-wrap-132 syntmp-value-759 syntmp-w-761 syntmp-mod-763) "cannot define keyword at top level"))))))) (let ((syntmp-x-798 (syntmp-chi-expr-141 syntmp-type-758 syntmp-value-759 syntmp-e-760 syntmp-r-739 syntmp-w-761 syntmp-s-762 syntmp-mod-763))) (begin (if (eq? syntmp-m-741 (quote c&e)) (syntmp-top-level-eval-hook-76 syntmp-x-798 syntmp-mod-763)) syntmp-x-798)))))))))))) (syntmp-syntax-type-138 (lambda (syntmp-e-799 syntmp-r-800 syntmp-w-801 syntmp-s-802 syntmp-rib-803 syntmp-mod-804) (cond ((symbol? syntmp-e-799) (let ((syntmp-n-805 (syntmp-id-var-name-126 syntmp-e-799 syntmp-w-801))) (let ((syntmp-b-806 (syntmp-lookup-101 syntmp-n-805 syntmp-r-800 syntmp-mod-804))) (let ((syntmp-type-807 (syntmp-binding-type-96 syntmp-b-806))) (let ((syntmp-t-808 syntmp-type-807)) (if (memv syntmp-t-808 (quote (lexical))) (values syntmp-type-807 (syntmp-binding-value-97 syntmp-b-806) syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804) (if (memv syntmp-t-808 (quote (global))) (values syntmp-type-807 syntmp-n-805 syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804) (if (memv syntmp-t-808 (quote (macro))) (syntmp-syntax-type-138 (syntmp-chi-macro-143 (syntmp-binding-value-97 syntmp-b-806) syntmp-e-799 syntmp-r-800 syntmp-w-801 syntmp-rib-803 syntmp-mod-804) syntmp-r-800 (quote (())) syntmp-s-802 syntmp-rib-803 syntmp-mod-804) (values syntmp-type-807 (syntmp-binding-value-97 syntmp-b-806) syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804))))))))) ((pair? syntmp-e-799) (let ((syntmp-first-809 (car syntmp-e-799))) (if (syntmp-id?-104 syntmp-first-809) (let ((syntmp-n-810 (syntmp-id-var-name-126 syntmp-first-809 syntmp-w-801))) (let ((syntmp-b-811 (syntmp-lookup-101 syntmp-n-810 syntmp-r-800 (or (and (syntmp-syntax-object?-88 syntmp-first-809) (syntmp-syntax-object-module-91 syntmp-first-809)) syntmp-mod-804)))) (let ((syntmp-type-812 (syntmp-binding-type-96 syntmp-b-811))) (let ((syntmp-t-813 syntmp-type-812)) (if (memv syntmp-t-813 (quote (lexical))) (values (quote lexical-call) (syntmp-binding-value-97 syntmp-b-811) syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804) (if (memv syntmp-t-813 (quote (global))) (values (quote global-call) syntmp-n-810 syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804) (if (memv syntmp-t-813 (quote (macro))) (syntmp-syntax-type-138 (syntmp-chi-macro-143 (syntmp-binding-value-97 syntmp-b-811) syntmp-e-799 syntmp-r-800 syntmp-w-801 syntmp-rib-803 syntmp-mod-804) syntmp-r-800 (quote (())) syntmp-s-802 syntmp-rib-803 syntmp-mod-804) (if (memv syntmp-t-813 (quote (core external-macro module-ref))) (values syntmp-type-812 (syntmp-binding-value-97 syntmp-b-811) syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804) (if (memv syntmp-t-813 (quote (local-syntax))) (values (quote local-syntax-form) (syntmp-binding-value-97 syntmp-b-811) syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804) (if (memv syntmp-t-813 (quote (begin))) (values (quote begin-form) #f syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804) (if (memv syntmp-t-813 (quote (eval-when))) (values (quote eval-when-form) #f syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804) (if (memv syntmp-t-813 (quote (define))) ((lambda (syntmp-tmp-814) ((lambda (syntmp-tmp-815) (if (if syntmp-tmp-815 (apply (lambda (syntmp-_-816 syntmp-name-817 syntmp-val-818) (syntmp-id?-104 syntmp-name-817)) syntmp-tmp-815) #f) (apply (lambda (syntmp-_-819 syntmp-name-820 syntmp-val-821) (values (quote define-form) syntmp-name-820 syntmp-val-821 syntmp-w-801 syntmp-s-802 syntmp-mod-804)) syntmp-tmp-815) ((lambda (syntmp-tmp-822) (if (if syntmp-tmp-822 (apply (lambda (syntmp-_-823 syntmp-name-824 syntmp-args-825 syntmp-e1-826 syntmp-e2-827) (and (syntmp-id?-104 syntmp-name-824) (syntmp-valid-bound-ids?-129 (syntmp-lambda-var-list-153 syntmp-args-825)))) syntmp-tmp-822) #f) (apply (lambda (syntmp-_-828 syntmp-name-829 syntmp-args-830 syntmp-e1-831 syntmp-e2-832) (values (quote define-form) (syntmp-wrap-132 syntmp-name-829 syntmp-w-801 syntmp-mod-804) (cons (quote #(syntax-object lambda ((top) #(ribcage #(_ name args e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(t) #(("m" top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(type) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(n) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(first) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(e r w s rib mod) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-module! set-syntax-object-wrap! set-syntax-object-expression! syntax-object-module syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application build-annotated get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))) (ice-9 syncase))) (syntmp-wrap-132 (cons syntmp-args-830 (cons syntmp-e1-831 syntmp-e2-832)) syntmp-w-801 syntmp-mod-804)) (quote (())) syntmp-s-802 syntmp-mod-804)) syntmp-tmp-822) ((lambda (syntmp-tmp-834) (if (if syntmp-tmp-834 (apply (lambda (syntmp-_-835 syntmp-name-836) (syntmp-id?-104 syntmp-name-836)) syntmp-tmp-834) #f) (apply (lambda (syntmp-_-837 syntmp-name-838) (values (quote define-form) (syntmp-wrap-132 syntmp-name-838 syntmp-w-801 syntmp-mod-804) (quote (#(syntax-object void ((top) #(ribcage #(_ name) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(t) #(("m" top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(type) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(n) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(first) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(e r w s rib mod) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-module! set-syntax-object-wrap! set-syntax-object-expression! syntax-object-module syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application build-annotated get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))) (ice-9 syncase)))) (quote (())) syntmp-s-802 syntmp-mod-804)) syntmp-tmp-834) (syntax-error syntmp-tmp-814))) (syntax-dispatch syntmp-tmp-814 (quote (any any)))))) (syntax-dispatch syntmp-tmp-814 (quote (any (any . any) any . each-any)))))) (syntax-dispatch syntmp-tmp-814 (quote (any any any))))) syntmp-e-799) (if (memv syntmp-t-813 (quote (define-syntax))) ((lambda (syntmp-tmp-839) ((lambda (syntmp-tmp-840) (if (if syntmp-tmp-840 (apply (lambda (syntmp-_-841 syntmp-name-842 syntmp-val-843) (syntmp-id?-104 syntmp-name-842)) syntmp-tmp-840) #f) (apply (lambda (syntmp-_-844 syntmp-name-845 syntmp-val-846) (values (quote define-syntax-form) syntmp-name-845 syntmp-val-846 syntmp-w-801 syntmp-s-802 syntmp-mod-804)) syntmp-tmp-840) (syntax-error syntmp-tmp-839))) (syntax-dispatch syntmp-tmp-839 (quote (any any any))))) syntmp-e-799) (values (quote call) #f syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804)))))))))))))) (values (quote call) #f syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804)))) ((syntmp-syntax-object?-88 syntmp-e-799) (syntmp-syntax-type-138 (syntmp-syntax-object-expression-89 syntmp-e-799) syntmp-r-800 (syntmp-join-wraps-123 syntmp-w-801 (syntmp-syntax-object-wrap-90 syntmp-e-799)) #f syntmp-rib-803 (or (syntmp-syntax-object-module-91 syntmp-e-799) syntmp-mod-804))) ((annotation? syntmp-e-799) (syntmp-syntax-type-138 (annotation-expression syntmp-e-799) syntmp-r-800 syntmp-w-801 (annotation-source syntmp-e-799) syntmp-rib-803 syntmp-mod-804)) ((self-evaluating? syntmp-e-799) (values (quote constant) #f syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804)) (else (values (quote other) #f syntmp-e-799 syntmp-w-801 syntmp-s-802 syntmp-mod-804))))) (syntmp-chi-when-list-137 (lambda (syntmp-e-847 syntmp-when-list-848 syntmp-w-849) (let syntmp-f-850 ((syntmp-when-list-851 syntmp-when-list-848) (syntmp-situations-852 (quote ()))) (if (null? syntmp-when-list-851) syntmp-situations-852 (syntmp-f-850 (cdr syntmp-when-list-851) (cons (let ((syntmp-x-853 (car syntmp-when-list-851))) (cond ((syntmp-free-id=?-127 syntmp-x-853 (quote #(syntax-object compile ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f when-list situations) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(e when-list w) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-module! set-syntax-object-wrap! set-syntax-object-expression! syntax-object-module syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application build-annotated get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))) (ice-9 syncase)))) (quote compile)) ((syntmp-free-id=?-127 syntmp-x-853 (quote #(syntax-object load ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f when-list situations) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(e when-list w) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-module! set-syntax-object-wrap! set-syntax-object-expression! syntax-object-module syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application build-annotated get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))) (ice-9 syncase)))) (quote load)) ((syntmp-free-id=?-127 syntmp-x-853 (quote #(syntax-object eval ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f when-list situations) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(e when-list w) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-module! set-syntax-object-wrap! set-syntax-object-expression! syntax-object-module syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application build-annotated get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))) (ice-9 syncase)))) (quote eval)) (else (syntax-error (syntmp-wrap-132 syntmp-x-853 syntmp-w-849 #f) "invalid eval-when situation")))) syntmp-situations-852)))))) (syntmp-chi-install-global-136 (lambda (syntmp-name-854 syntmp-e-855) (syntmp-build-annotated-81 #f (list (syntmp-build-annotated-81 #f (quote install-global-transformer)) (syntmp-build-data-82 #f syntmp-name-854) syntmp-e-855)))) (syntmp-chi-top-sequence-135 (lambda (syntmp-body-856 syntmp-r-857 syntmp-w-858 syntmp-s-859 syntmp-m-860 syntmp-esew-861 syntmp-mod-862) (syntmp-build-sequence-83 syntmp-s-859 (let syntmp-dobody-863 ((syntmp-body-864 syntmp-body-856) (syntmp-r-865 syntmp-r-857) (syntmp-w-866 syntmp-w-858) (syntmp-m-867 syntmp-m-860) (syntmp-esew-868 syntmp-esew-861) (syntmp-mod-869 syntmp-mod-862)) (if (null? syntmp-body-864) (quote ()) (let ((syntmp-first-870 (syntmp-chi-top-139 (car syntmp-body-864) syntmp-r-865 syntmp-w-866 syntmp-m-867 syntmp-esew-868 syntmp-mod-869))) (cons syntmp-first-870 (syntmp-dobody-863 (cdr syntmp-body-864) syntmp-r-865 syntmp-w-866 syntmp-m-867 syntmp-esew-868 syntmp-mod-869)))))))) (syntmp-chi-sequence-134 (lambda (syntmp-body-871 syntmp-r-872 syntmp-w-873 syntmp-s-874 syntmp-mod-875) (syntmp-build-sequence-83 syntmp-s-874 (let syntmp-dobody-876 ((syntmp-body-877 syntmp-body-871) (syntmp-r-878 syntmp-r-872) (syntmp-w-879 syntmp-w-873) (syntmp-mod-880 syntmp-mod-875)) (if (null? syntmp-body-877) (quote ()) (let ((syntmp-first-881 (syntmp-chi-140 (car syntmp-body-877) syntmp-r-878 syntmp-w-879 syntmp-mod-880))) (cons syntmp-first-881 (syntmp-dobody-876 (cdr syntmp-body-877) syntmp-r-878 syntmp-w-879 syntmp-mod-880)))))))) (syntmp-source-wrap-133 (lambda (syntmp-x-882 syntmp-w-883 syntmp-s-884 syntmp-defmod-885) (syntmp-wrap-132 (if syntmp-s-884 (make-annotation syntmp-x-882 syntmp-s-884 #f) syntmp-x-882) syntmp-w-883 syntmp-defmod-885))) (syntmp-wrap-132 (lambda (syntmp-x-886 syntmp-w-887 syntmp-defmod-888) (cond ((and (null? (syntmp-wrap-marks-107 syntmp-w-887)) (null? (syntmp-wrap-subst-108 syntmp-w-887))) syntmp-x-886) ((syntmp-syntax-object?-88 syntmp-x-886) (syntmp-make-syntax-object-87 (syntmp-syntax-object-expression-89 syntmp-x-886) (syntmp-join-wraps-123 syntmp-w-887 (syntmp-syntax-object-wrap-90 syntmp-x-886)) (syntmp-syntax-object-module-91 syntmp-x-886))) ((null? syntmp-x-886) syntmp-x-886) (else (syntmp-make-syntax-object-87 syntmp-x-886 syntmp-w-887 syntmp-defmod-888))))) (syntmp-bound-id-member?-131 (lambda (syntmp-x-889 syntmp-list-890) (and (not (null? syntmp-list-890)) (or (syntmp-bound-id=?-128 syntmp-x-889 (car syntmp-list-890)) (syntmp-bound-id-member?-131 syntmp-x-889 (cdr syntmp-list-890)))))) (syntmp-distinct-bound-ids?-130 (lambda (syntmp-ids-891) (let syntmp-distinct?-892 ((syntmp-ids-893 syntmp-ids-891)) (or (null? syntmp-ids-893) (and (not (syntmp-bound-id-member?-131 (car syntmp-ids-893) (cdr syntmp-ids-893))) (syntmp-distinct?-892 (cdr syntmp-ids-893))))))) (syntmp-valid-bound-ids?-129 (lambda (syntmp-ids-894) (and (let syntmp-all-ids?-895 ((syntmp-ids-896 syntmp-ids-894)) (or (null? syntmp-ids-896) (and (syntmp-id?-104 (car syntmp-ids-896)) (syntmp-all-ids?-895 (cdr syntmp-ids-896))))) (syntmp-distinct-bound-ids?-130 syntmp-ids-894)))) (syntmp-bound-id=?-128 (lambda (syntmp-i-897 syntmp-j-898) (if (and (syntmp-syntax-object?-88 syntmp-i-897) (syntmp-syntax-object?-88 syntmp-j-898)) (and (eq? (let ((syntmp-e-899 (syntmp-syntax-object-expression-89 syntmp-i-897))) (if (annotation? syntmp-e-899) (annotation-expression syntmp-e-899) syntmp-e-899)) (let ((syntmp-e-900 (syntmp-syntax-object-expression-89 syntmp-j-898))) (if (annotation? syntmp-e-900) (annotation-expression syntmp-e-900) syntmp-e-900))) (syntmp-same-marks?-125 (syntmp-wrap-marks-107 (syntmp-syntax-object-wrap-90 syntmp-i-897)) (syntmp-wrap-marks-107 (syntmp-syntax-object-wrap-90 syntmp-j-898)))) (eq? (let ((syntmp-e-901 syntmp-i-897)) (if (annotation? syntmp-e-901) (annotation-expression syntmp-e-901) syntmp-e-901)) (let ((syntmp-e-902 syntmp-j-898)) (if (annotation? syntmp-e-902) (annotation-expression syntmp-e-902) syntmp-e-902)))))) (syntmp-free-id=?-127 (lambda (syntmp-i-903 syntmp-j-904) (and (eq? (let ((syntmp-x-905 syntmp-i-903)) (let ((syntmp-e-906 (if (syntmp-syntax-object?-88 syntmp-x-905) (syntmp-syntax-object-expression-89 syntmp-x-905) syntmp-x-905))) (if (annotation? syntmp-e-906) (annotation-expression syntmp-e-906) syntmp-e-906))) (let ((syntmp-x-907 syntmp-j-904)) (let ((syntmp-e-908 (if (syntmp-syntax-object?-88 syntmp-x-907) (syntmp-syntax-object-expression-89 syntmp-x-907) syntmp-x-907))) (if (annotation? syntmp-e-908) (annotation-expression syntmp-e-908) syntmp-e-908)))) (eq? (syntmp-id-var-name-126 syntmp-i-903 (quote (()))) (syntmp-id-var-name-126 syntmp-j-904 (quote (()))))))) (syntmp-id-var-name-126 (lambda (syntmp-id-909 syntmp-w-910) (letrec ((syntmp-search-vector-rib-913 (lambda (syntmp-sym-924 syntmp-subst-925 syntmp-marks-926 syntmp-symnames-927 syntmp-ribcage-928) (let ((syntmp-n-929 (vector-length syntmp-symnames-927))) (let syntmp-f-930 ((syntmp-i-931 0)) (cond ((syntmp-fx=-74 syntmp-i-931 syntmp-n-929) (syntmp-search-911 syntmp-sym-924 (cdr syntmp-subst-925) syntmp-marks-926)) ((and (eq? (vector-ref syntmp-symnames-927 syntmp-i-931) syntmp-sym-924) (syntmp-same-marks?-125 syntmp-marks-926 (vector-ref (syntmp-ribcage-marks-114 syntmp-ribcage-928) syntmp-i-931))) (values (vector-ref (syntmp-ribcage-labels-115 syntmp-ribcage-928) syntmp-i-931) syntmp-marks-926)) (else (syntmp-f-930 (syntmp-fx+-72 syntmp-i-931 1)))))))) (syntmp-search-list-rib-912 (lambda (syntmp-sym-932 syntmp-subst-933 syntmp-marks-934 syntmp-symnames-935 syntmp-ribcage-936) (let syntmp-f-937 ((syntmp-symnames-938 syntmp-symnames-935) (syntmp-i-939 0)) (cond ((null? syntmp-symnames-938) (syntmp-search-911 syntmp-sym-932 (cdr syntmp-subst-933) syntmp-marks-934)) ((and (eq? (car syntmp-symnames-938) syntmp-sym-932) (syntmp-same-marks?-125 syntmp-marks-934 (list-ref (syntmp-ribcage-marks-114 syntmp-ribcage-936) syntmp-i-939))) (values (list-ref (syntmp-ribcage-labels-115 syntmp-ribcage-936) syntmp-i-939) syntmp-marks-934)) (else (syntmp-f-937 (cdr syntmp-symnames-938) (syntmp-fx+-72 syntmp-i-939 1))))))) (syntmp-search-911 (lambda (syntmp-sym-940 syntmp-subst-941 syntmp-marks-942) (if (null? syntmp-subst-941) (values #f syntmp-marks-942) (let ((syntmp-fst-943 (car syntmp-subst-941))) (if (eq? syntmp-fst-943 (quote shift)) (syntmp-search-911 syntmp-sym-940 (cdr syntmp-subst-941) (cdr syntmp-marks-942)) (let ((syntmp-symnames-944 (syntmp-ribcage-symnames-113 syntmp-fst-943))) (if (vector? syntmp-symnames-944) (syntmp-search-vector-rib-913 syntmp-sym-940 syntmp-subst-941 syntmp-marks-942 syntmp-symnames-944 syntmp-fst-943) (syntmp-search-list-rib-912 syntmp-sym-940 syntmp-subst-941 syntmp-marks-942 syntmp-symnames-944 syntmp-fst-943))))))))) (cond ((symbol? syntmp-id-909) (or (call-with-values (lambda () (syntmp-search-911 syntmp-id-909 (syntmp-wrap-subst-108 syntmp-w-910) (syntmp-wrap-marks-107 syntmp-w-910))) (lambda (syntmp-x-946 . syntmp-ignore-945) syntmp-x-946)) syntmp-id-909)) ((syntmp-syntax-object?-88 syntmp-id-909) (let ((syntmp-id-947 (let ((syntmp-e-949 (syntmp-syntax-object-expression-89 syntmp-id-909))) (if (annotation? syntmp-e-949) (annotation-expression syntmp-e-949) syntmp-e-949))) (syntmp-w1-948 (syntmp-syntax-object-wrap-90 syntmp-id-909))) (let ((syntmp-marks-950 (syntmp-join-marks-124 (syntmp-wrap-marks-107 syntmp-w-910) (syntmp-wrap-marks-107 syntmp-w1-948)))) (call-with-values (lambda () (syntmp-search-911 syntmp-id-947 (syntmp-wrap-subst-108 syntmp-w-910) syntmp-marks-950)) (lambda (syntmp-new-id-951 syntmp-marks-952) (or syntmp-new-id-951 (call-with-values (lambda () (syntmp-search-911 syntmp-id-947 (syntmp-wrap-subst-108 syntmp-w1-948) syntmp-marks-952)) (lambda (syntmp-x-954 . syntmp-ignore-953) syntmp-x-954)) syntmp-id-947)))))) ((annotation? syntmp-id-909) (let ((syntmp-id-955 (let ((syntmp-e-956 syntmp-id-909)) (if (annotation? syntmp-e-956) (annotation-expression syntmp-e-956) syntmp-e-956)))) (or (call-with-values (lambda () (syntmp-search-911 syntmp-id-955 (syntmp-wrap-subst-108 syntmp-w-910) (syntmp-wrap-marks-107 syntmp-w-910))) (lambda (syntmp-x-958 . syntmp-ignore-957) syntmp-x-958)) syntmp-id-955))) (else (syntmp-error-hook-78 (quote id-var-name) "invalid id" syntmp-id-909)))))) (syntmp-same-marks?-125 (lambda (syntmp-x-959 syntmp-y-960) (or (eq? syntmp-x-959 syntmp-y-960) (and (not (null? syntmp-x-959)) (not (null? syntmp-y-960)) (eq? (car syntmp-x-959) (car syntmp-y-960)) (syntmp-same-marks?-125 (cdr syntmp-x-959) (cdr syntmp-y-960)))))) (syntmp-join-marks-124 (lambda (syntmp-m1-961 syntmp-m2-962) (syntmp-smart-append-122 syntmp-m1-961 syntmp-m2-962))) (syntmp-join-wraps-123 (lambda (syntmp-w1-963 syntmp-w2-964) (let ((syntmp-m1-965 (syntmp-wrap-marks-107 syntmp-w1-963)) (syntmp-s1-966 (syntmp-wrap-subst-108 syntmp-w1-963))) (if (null? syntmp-m1-965) (if (null? syntmp-s1-966) syntmp-w2-964 (syntmp-make-wrap-106 (syntmp-wrap-marks-107 syntmp-w2-964) (syntmp-smart-append-122 syntmp-s1-966 (syntmp-wrap-subst-108 syntmp-w2-964)))) (syntmp-make-wrap-106 (syntmp-smart-append-122 syntmp-m1-965 (syntmp-wrap-marks-107 syntmp-w2-964)) (syntmp-smart-append-122 syntmp-s1-966 (syntmp-wrap-subst-108 syntmp-w2-964))))))) (syntmp-smart-append-122 (lambda (syntmp-m1-967 syntmp-m2-968) (if (null? syntmp-m2-968) syntmp-m1-967 (append syntmp-m1-967 syntmp-m2-968)))) (syntmp-make-binding-wrap-121 (lambda (syntmp-ids-969 syntmp-labels-970 syntmp-w-971) (if (null? syntmp-ids-969) syntmp-w-971 (syntmp-make-wrap-106 (syntmp-wrap-marks-107 syntmp-w-971) (cons (let ((syntmp-labelvec-972 (list->vector syntmp-labels-970))) (let ((syntmp-n-973 (vector-length syntmp-labelvec-972))) (let ((syntmp-symnamevec-974 (make-vector syntmp-n-973)) (syntmp-marksvec-975 (make-vector syntmp-n-973))) (begin (let syntmp-f-976 ((syntmp-ids-977 syntmp-ids-969) (syntmp-i-978 0)) (if (not (null? syntmp-ids-977)) (call-with-values (lambda () (syntmp-id-sym-name&marks-105 (car syntmp-ids-977) syntmp-w-971)) (lambda (syntmp-symname-979 syntmp-marks-980) (begin (vector-set! syntmp-symnamevec-974 syntmp-i-978 syntmp-symname-979) (vector-set! syntmp-marksvec-975 syntmp-i-978 syntmp-marks-980) (syntmp-f-976 (cdr syntmp-ids-977) (syntmp-fx+-72 syntmp-i-978 1))))))) (syntmp-make-ribcage-111 syntmp-symnamevec-974 syntmp-marksvec-975 syntmp-labelvec-972))))) (syntmp-wrap-subst-108 syntmp-w-971)))))) (syntmp-extend-ribcage!-120 (lambda (syntmp-ribcage-981 syntmp-id-982 syntmp-label-983) (begin (syntmp-set-ribcage-symnames!-116 syntmp-ribcage-981 (cons (let ((syntmp-e-984 (syntmp-syntax-object-expression-89 syntmp-id-982))) (if (annotation? syntmp-e-984) (annotation-expression syntmp-e-984) syntmp-e-984)) (syntmp-ribcage-symnames-113 syntmp-ribcage-981))) (syntmp-set-ribcage-marks!-117 syntmp-ribcage-981 (cons (syntmp-wrap-marks-107 (syntmp-syntax-object-wrap-90 syntmp-id-982)) (syntmp-ribcage-marks-114 syntmp-ribcage-981))) (syntmp-set-ribcage-labels!-118 syntmp-ribcage-981 (cons syntmp-label-983 (syntmp-ribcage-labels-115 syntmp-ribcage-981)))))) (syntmp-anti-mark-119 (lambda (syntmp-w-985) (syntmp-make-wrap-106 (cons #f (syntmp-wrap-marks-107 syntmp-w-985)) (cons (quote shift) (syntmp-wrap-subst-108 syntmp-w-985))))) (syntmp-set-ribcage-labels!-118 (lambda (syntmp-x-986 syntmp-update-987) (vector-set! syntmp-x-986 3 syntmp-update-987))) (syntmp-set-ribcage-marks!-117 (lambda (syntmp-x-988 syntmp-update-989) (vector-set! syntmp-x-988 2 syntmp-update-989))) (syntmp-set-ribcage-symnames!-116 (lambda (syntmp-x-990 syntmp-update-991) (vector-set! syntmp-x-990 1 syntmp-update-991))) (syntmp-ribcage-labels-115 (lambda (syntmp-x-992) (vector-ref syntmp-x-992 3))) (syntmp-ribcage-marks-114 (lambda (syntmp-x-993) (vector-ref syntmp-x-993 2))) (syntmp-ribcage-symnames-113 (lambda (syntmp-x-994) (vector-ref syntmp-x-994 1))) (syntmp-ribcage?-112 (lambda (syntmp-x-995) (and (vector? syntmp-x-995) (= (vector-length syntmp-x-995) 4) (eq? (vector-ref syntmp-x-995 0) (quote ribcage))))) (syntmp-make-ribcage-111 (lambda (syntmp-symnames-996 syntmp-marks-997 syntmp-labels-998) (vector (quote ribcage) syntmp-symnames-996 syntmp-marks-997 syntmp-labels-998))) (syntmp-gen-labels-110 (lambda (syntmp-ls-999) (if (null? syntmp-ls-999) (quote ()) (cons (syntmp-gen-label-109) (syntmp-gen-labels-110 (cdr syntmp-ls-999)))))) (syntmp-gen-label-109 (lambda () (string #\i))) (syntmp-wrap-subst-108 cdr) (syntmp-wrap-marks-107 car) (syntmp-make-wrap-106 cons) (syntmp-id-sym-name&marks-105 (lambda (syntmp-x-1000 syntmp-w-1001) (if (syntmp-syntax-object?-88 syntmp-x-1000) (values (let ((syntmp-e-1002 (syntmp-syntax-object-expression-89 syntmp-x-1000))) (if (annotation? syntmp-e-1002) (annotation-expression syntmp-e-1002) syntmp-e-1002)) (syntmp-join-marks-124 (syntmp-wrap-marks-107 syntmp-w-1001) (syntmp-wrap-marks-107 (syntmp-syntax-object-wrap-90 syntmp-x-1000)))) (values (let ((syntmp-e-1003 syntmp-x-1000)) (if (annotation? syntmp-e-1003) (annotation-expression syntmp-e-1003) syntmp-e-1003)) (syntmp-wrap-marks-107 syntmp-w-1001))))) (syntmp-id?-104 (lambda (syntmp-x-1004) (cond ((symbol? syntmp-x-1004) #t) ((syntmp-syntax-object?-88 syntmp-x-1004) (symbol? (let ((syntmp-e-1005 (syntmp-syntax-object-expression-89 syntmp-x-1004))) (if (annotation? syntmp-e-1005) (annotation-expression syntmp-e-1005) syntmp-e-1005)))) ((annotation? syntmp-x-1004) (symbol? (annotation-expression syntmp-x-1004))) (else #f)))) (syntmp-nonsymbol-id?-103 (lambda (syntmp-x-1006) (and (syntmp-syntax-object?-88 syntmp-x-1006) (symbol? (let ((syntmp-e-1007 (syntmp-syntax-object-expression-89 syntmp-x-1006))) (if (annotation? syntmp-e-1007) (annotation-expression syntmp-e-1007) syntmp-e-1007)))))) (syntmp-global-extend-102 (lambda (syntmp-type-1008 syntmp-sym-1009 syntmp-val-1010) (syntmp-put-global-definition-hook-79 syntmp-sym-1009 (cons syntmp-type-1008 syntmp-val-1010) (module-name (current-module))))) (syntmp-lookup-101 (lambda (syntmp-x-1011 syntmp-r-1012 syntmp-mod-1013) (cond ((assq syntmp-x-1011 syntmp-r-1012) => cdr) ((symbol? syntmp-x-1011) (or (syntmp-get-global-definition-hook-80 syntmp-x-1011 syntmp-mod-1013) (quote (global)))) (else (quote (displaced-lexical)))))) (syntmp-macros-only-env-100 (lambda (syntmp-r-1014) (if (null? syntmp-r-1014) (quote ()) (let ((syntmp-a-1015 (car syntmp-r-1014))) (if (eq? (cadr syntmp-a-1015) (quote macro)) (cons syntmp-a-1015 (syntmp-macros-only-env-100 (cdr syntmp-r-1014))) (syntmp-macros-only-env-100 (cdr syntmp-r-1014))))))) (syntmp-extend-var-env-99 (lambda (syntmp-labels-1016 syntmp-vars-1017 syntmp-r-1018) (if (null? syntmp-labels-1016) syntmp-r-1018 (syntmp-extend-var-env-99 (cdr syntmp-labels-1016) (cdr syntmp-vars-1017) (cons (cons (car syntmp-labels-1016) (cons (quote lexical) (car syntmp-vars-1017))) syntmp-r-1018))))) (syntmp-extend-env-98 (lambda (syntmp-labels-1019 syntmp-bindings-1020 syntmp-r-1021) (if (null? syntmp-labels-1019) syntmp-r-1021 (syntmp-extend-env-98 (cdr syntmp-labels-1019) (cdr syntmp-bindings-1020) (cons (cons (car syntmp-labels-1019) (car syntmp-bindings-1020)) syntmp-r-1021))))) (syntmp-binding-value-97 cdr) (syntmp-binding-type-96 car) (syntmp-source-annotation-95 (lambda (syntmp-x-1022) (cond ((annotation? syntmp-x-1022) (annotation-source syntmp-x-1022)) ((syntmp-syntax-object?-88 syntmp-x-1022) (syntmp-source-annotation-95 (syntmp-syntax-object-expression-89 syntmp-x-1022))) (else #f)))) (syntmp-set-syntax-object-module!-94 (lambda (syntmp-x-1023 syntmp-update-1024) (vector-set! syntmp-x-1023 3 syntmp-update-1024))) (syntmp-set-syntax-object-wrap!-93 (lambda (syntmp-x-1025 syntmp-update-1026) (vector-set! syntmp-x-1025 2 syntmp-update-1026))) (syntmp-set-syntax-object-expression!-92 (lambda (syntmp-x-1027 syntmp-update-1028) (vector-set! syntmp-x-1027 1 syntmp-update-1028))) (syntmp-syntax-object-module-91 (lambda (syntmp-x-1029) (vector-ref syntmp-x-1029 3))) (syntmp-syntax-object-wrap-90 (lambda (syntmp-x-1030) (vector-ref syntmp-x-1030 2))) (syntmp-syntax-object-expression-89 (lambda (syntmp-x-1031) (vector-ref syntmp-x-1031 1))) (syntmp-syntax-object?-88 (lambda (syntmp-x-1032) (and (vector? syntmp-x-1032) (= (vector-length syntmp-x-1032) 4) (eq? (vector-ref syntmp-x-1032 0) (quote syntax-object))))) (syntmp-make-syntax-object-87 (lambda (syntmp-expression-1033 syntmp-wrap-1034 syntmp-module-1035) (vector (quote syntax-object) syntmp-expression-1033 syntmp-wrap-1034 syntmp-module-1035))) (syntmp-build-letrec-86 (lambda (syntmp-src-1036 syntmp-vars-1037 syntmp-val-exps-1038 syntmp-body-exp-1039) (if (null? syntmp-vars-1037) (syntmp-build-annotated-81 syntmp-src-1036 syntmp-body-exp-1039) (syntmp-build-annotated-81 syntmp-src-1036 (list (quote letrec) (map list syntmp-vars-1037 syntmp-val-exps-1038) syntmp-body-exp-1039))))) (syntmp-build-named-let-85 (lambda (syntmp-src-1040 syntmp-vars-1041 syntmp-val-exps-1042 syntmp-body-exp-1043) (if (null? syntmp-vars-1041) (syntmp-build-annotated-81 syntmp-src-1040 syntmp-body-exp-1043) (syntmp-build-annotated-81 syntmp-src-1040 (list (quote let) (car syntmp-vars-1041) (map list (cdr syntmp-vars-1041) syntmp-val-exps-1042) syntmp-body-exp-1043))))) (syntmp-build-let-84 (lambda (syntmp-src-1044 syntmp-vars-1045 syntmp-val-exps-1046 syntmp-body-exp-1047) (if (null? syntmp-vars-1045) (syntmp-build-annotated-81 syntmp-src-1044 syntmp-body-exp-1047) (syntmp-build-annotated-81 syntmp-src-1044 (list (quote let) (map list syntmp-vars-1045 syntmp-val-exps-1046) syntmp-body-exp-1047))))) (syntmp-build-sequence-83 (lambda (syntmp-src-1048 syntmp-exps-1049) (if (null? (cdr syntmp-exps-1049)) (syntmp-build-annotated-81 syntmp-src-1048 (car syntmp-exps-1049)) (syntmp-build-annotated-81 syntmp-src-1048 (cons (quote begin) syntmp-exps-1049))))) (syntmp-build-data-82 (lambda (syntmp-src-1050 syntmp-exp-1051) (if (and (self-evaluating? syntmp-exp-1051) (not (vector? syntmp-exp-1051))) (syntmp-build-annotated-81 syntmp-src-1050 syntmp-exp-1051) (syntmp-build-annotated-81 syntmp-src-1050 (list (quote quote) syntmp-exp-1051))))) (syntmp-build-annotated-81 (lambda (syntmp-src-1052 syntmp-exp-1053) (if (and syntmp-src-1052 (not (annotation? syntmp-exp-1053))) (make-annotation syntmp-exp-1053 syntmp-src-1052 #t) syntmp-exp-1053))) (syntmp-get-global-definition-hook-80 (lambda (syntmp-symbol-1054 syntmp-module-1055) (let ((syntmp-module-1056 (if syntmp-module-1055 (resolve-module syntmp-module-1055) (warn "wha" syntmp-symbol-1054 (current-module))))) (let ((syntmp-v-1057 (module-variable syntmp-module-1056 syntmp-symbol-1054))) (and syntmp-v-1057 (or (object-property syntmp-v-1057 (quote *sc-expander*)) (and (variable-bound? syntmp-v-1057) (macro? (variable-ref syntmp-v-1057)) (macro-transformer (variable-ref syntmp-v-1057)) guile-macro))))))) (syntmp-put-global-definition-hook-79 (lambda (syntmp-symbol-1058 syntmp-binding-1059 syntmp-module-1060) (let ((syntmp-module-1061 (if syntmp-module-1060 (resolve-module syntmp-module-1060) (warn "wha" syntmp-symbol-1058 (current-module))))) (let ((syntmp-v-1062 (or (module-variable syntmp-module-1061 syntmp-symbol-1058) (let ((syntmp-v-1063 (make-variable sc-macro))) (begin (module-add! syntmp-module-1061 syntmp-symbol-1058 syntmp-v-1063) syntmp-v-1063))))) (begin (if (not (and (symbol-property syntmp-symbol-1058 (quote primitive-syntax)) (eq? syntmp-module-1061 the-syncase-module))) (variable-set! syntmp-v-1062 sc-macro)) (set-object-property! syntmp-v-1062 (quote *sc-expander*) syntmp-binding-1059)))))) (syntmp-error-hook-78 (lambda (syntmp-who-1064 syntmp-why-1065 syntmp-what-1066) (error syntmp-who-1064 "~a ~s" syntmp-why-1065 syntmp-what-1066))) (syntmp-local-eval-hook-77 (lambda (syntmp-x-1067 syntmp-mod-1068) (eval (list syntmp-noexpand-71 syntmp-x-1067) (if syntmp-mod-1068 (resolve-module syntmp-mod-1068) (interaction-environment))))) (syntmp-top-level-eval-hook-76 (lambda (syntmp-x-1069 syntmp-mod-1070) (eval (list syntmp-noexpand-71 syntmp-x-1069) (if syntmp-mod-1070 (resolve-module syntmp-mod-1070) (interaction-environment))))) (syntmp-fx<-75 <) (syntmp-fx=-74 =) (syntmp-fx--73 -) (syntmp-fx+-72 +) (syntmp-noexpand-71 "noexpand")) (begin (syntmp-global-extend-102 (quote local-syntax) (quote letrec-syntax) #t) (syntmp-global-extend-102 (quote local-syntax) (quote let-syntax) #f) (syntmp-global-extend-102 (quote core) (quote fluid-let-syntax) (lambda (syntmp-e-1071 syntmp-r-1072 syntmp-w-1073 syntmp-s-1074 syntmp-mod-1075) ((lambda (syntmp-tmp-1076) ((lambda (syntmp-tmp-1077) (if (if syntmp-tmp-1077 (apply (lambda (syntmp-_-1078 syntmp-var-1079 syntmp-val-1080 syntmp-e1-1081 syntmp-e2-1082) (syntmp-valid-bound-ids?-129 syntmp-var-1079)) syntmp-tmp-1077) #f) (apply (lambda (syntmp-_-1084 syntmp-var-1085 syntmp-val-1086 syntmp-e1-1087 syntmp-e2-1088) (let ((syntmp-names-1089 (map (lambda (syntmp-x-1090) (syntmp-id-var-name-126 syntmp-x-1090 syntmp-w-1073)) syntmp-var-1085))) (begin (for-each (lambda (syntmp-id-1092 syntmp-n-1093) (let ((syntmp-t-1094 (syntmp-binding-type-96 (syntmp-lookup-101 syntmp-n-1093 syntmp-r-1072 syntmp-mod-1075)))) (if (memv syntmp-t-1094 (quote (displaced-lexical))) (syntax-error (syntmp-source-wrap-133 syntmp-id-1092 syntmp-w-1073 syntmp-s-1074 syntmp-mod-1075) "identifier out of context")))) syntmp-var-1085 syntmp-names-1089) (syntmp-chi-body-144 (cons syntmp-e1-1087 syntmp-e2-1088) (syntmp-source-wrap-133 syntmp-e-1071 syntmp-w-1073 syntmp-s-1074 syntmp-mod-1075) (syntmp-extend-env-98 syntmp-names-1089 (let ((syntmp-trans-r-1097 (syntmp-macros-only-env-100 syntmp-r-1072))) (map (lambda (syntmp-x-1098) (cons (quote macro) (syntmp-eval-local-transformer-147 (syntmp-chi-140 syntmp-x-1098 syntmp-trans-r-1097 syntmp-w-1073 syntmp-mod-1075) syntmp-mod-1075))) syntmp-val-1086)) syntmp-r-1072) syntmp-w-1073 syntmp-mod-1075)))) syntmp-tmp-1077) ((lambda (syntmp-_-1100) (syntax-error (syntmp-source-wrap-133 syntmp-e-1071 syntmp-w-1073 syntmp-s-1074 syntmp-mod-1075))) syntmp-tmp-1076))) (syntax-dispatch syntmp-tmp-1076 (quote (any #(each (any any)) any . each-any))))) syntmp-e-1071))) (syntmp-global-extend-102 (quote core) (quote quote) (lambda (syntmp-e-1101 syntmp-r-1102 syntmp-w-1103 syntmp-s-1104 syntmp-mod-1105) ((lambda (syntmp-tmp-1106) ((lambda (syntmp-tmp-1107) (if syntmp-tmp-1107 (apply (lambda (syntmp-_-1108 syntmp-e-1109) (syntmp-build-data-82 syntmp-s-1104 (syntmp-strip-151 syntmp-e-1109 syntmp-w-1103))) syntmp-tmp-1107) ((lambda (syntmp-_-1110) (syntax-error (syntmp-source-wrap-133 syntmp-e-1101 syntmp-w-1103 syntmp-s-1104 syntmp-mod-1105))) syntmp-tmp-1106))) (syntax-dispatch syntmp-tmp-1106 (quote (any any))))) syntmp-e-1101))) (syntmp-global-extend-102 (quote core) (quote syntax) (letrec ((syntmp-regen-1118 (lambda (syntmp-x-1119) (let ((syntmp-t-1120 (car syntmp-x-1119))) (if (memv syntmp-t-1120 (quote (ref))) (syntmp-build-annotated-81 #f (cadr syntmp-x-1119)) (if (memv syntmp-t-1120 (quote (primitive))) (syntmp-build-annotated-81 #f (cadr syntmp-x-1119)) (if (memv syntmp-t-1120 (quote (quote))) (syntmp-build-data-82 #f (cadr syntmp-x-1119)) (if (memv syntmp-t-1120 (quote (lambda))) (syntmp-build-annotated-81 #f (list (quote lambda) (cadr syntmp-x-1119) (syntmp-regen-1118 (caddr syntmp-x-1119)))) (if (memv syntmp-t-1120 (quote (map))) (let ((syntmp-ls-1121 (map syntmp-regen-1118 (cdr syntmp-x-1119)))) (syntmp-build-annotated-81 #f (cons (if (syntmp-fx=-74 (length syntmp-ls-1121) 2) (syntmp-build-annotated-81 #f (quote map)) (syntmp-build-annotated-81 #f (quote map))) syntmp-ls-1121))) (syntmp-build-annotated-81 #f (cons (syntmp-build-annotated-81 #f (car syntmp-x-1119)) (map syntmp-regen-1118 (cdr syntmp-x-1119)))))))))))) (syntmp-gen-vector-1117 (lambda (syntmp-x-1122) (cond ((eq? (car syntmp-x-1122) (quote list)) (cons (quote vector) (cdr syntmp-x-1122))) ((eq? (car syntmp-x-1122) (quote quote)) (list (quote quote) (list->vector (cadr syntmp-x-1122)))) (else (list (quote list->vector) syntmp-x-1122))))) (syntmp-gen-append-1116 (lambda (syntmp-x-1123 syntmp-y-1124) (if (equal? syntmp-y-1124 (quote (quote ()))) syntmp-x-1123 (list (quote append) syntmp-x-1123 syntmp-y-1124)))) (syntmp-gen-cons-1115 (lambda (syntmp-x-1125 syntmp-y-1126) (let ((syntmp-t-1127 (car syntmp-y-1126))) (if (memv syntmp-t-1127 (quote (quote))) (if (eq? (car syntmp-x-1125) (quote quote)) (list (quote quote) (cons (cadr syntmp-x-1125) (cadr syntmp-y-1126))) (if (eq? (cadr syntmp-y-1126) (quote ())) (list (quote list) syntmp-x-1125) (list (quote cons) syntmp-x-1125 syntmp-y-1126))) (if (memv syntmp-t-1127 (quote (list))) (cons (quote list) (cons syntmp-x-1125 (cdr syntmp-y-1126))) (list (quote cons) syntmp-x-1125 syntmp-y-1126)))))) (syntmp-gen-map-1114 (lambda (syntmp-e-1128 syntmp-map-env-1129) (let ((syntmp-formals-1130 (map cdr syntmp-map-env-1129)) (syntmp-actuals-1131 (map (lambda (syntmp-x-1132) (list (quote ref) (car syntmp-x-1132))) syntmp-map-env-1129))) (cond ((eq? (car syntmp-e-1128) (quote ref)) (car syntmp-actuals-1131)) ((andmap (lambda (syntmp-x-1133) (and (eq? (car syntmp-x-1133) (quote ref)) (memq (cadr syntmp-x-1133) syntmp-formals-1130))) (cdr syntmp-e-1128)) (cons (quote map) (cons (list (quote primitive) (car syntmp-e-1128)) (map (let ((syntmp-r-1134 (map cons syntmp-formals-1130 syntmp-actuals-1131))) (lambda (syntmp-x-1135) (cdr (assq (cadr syntmp-x-1135) syntmp-r-1134)))) (cdr syntmp-e-1128))))) (else (cons (quote map) (cons (list (quote lambda) syntmp-formals-1130 syntmp-e-1128) syntmp-actuals-1131))))))) (syntmp-gen-mappend-1113 (lambda (syntmp-e-1136 syntmp-map-env-1137) (list (quote apply) (quote (primitive append)) (syntmp-gen-map-1114 syntmp-e-1136 syntmp-map-env-1137)))) (syntmp-gen-ref-1112 (lambda (syntmp-src-1138 syntmp-var-1139 syntmp-level-1140 syntmp-maps-1141) (if (syntmp-fx=-74 syntmp-level-1140 0) (values syntmp-var-1139 syntmp-maps-1141) (if (null? syntmp-maps-1141) (syntax-error syntmp-src-1138 "missing ellipsis in syntax form") (call-with-values (lambda () (syntmp-gen-ref-1112 syntmp-src-1138 syntmp-var-1139 (syntmp-fx--73 syntmp-level-1140 1) (cdr syntmp-maps-1141))) (lambda (syntmp-outer-var-1142 syntmp-outer-maps-1143) (let ((syntmp-b-1144 (assq syntmp-outer-var-1142 (car syntmp-maps-1141)))) (if syntmp-b-1144 (values (cdr syntmp-b-1144) syntmp-maps-1141) (let ((syntmp-inner-var-1145 (syntmp-gen-var-152 (quote tmp)))) (values syntmp-inner-var-1145 (cons (cons (cons syntmp-outer-var-1142 syntmp-inner-var-1145) (car syntmp-maps-1141)) syntmp-outer-maps-1143))))))))))) (syntmp-gen-syntax-1111 (lambda (syntmp-src-1146 syntmp-e-1147 syntmp-r-1148 syntmp-maps-1149 syntmp-ellipsis?-1150 syntmp-mod-1151) (if (syntmp-id?-104 syntmp-e-1147) (let ((syntmp-label-1152 (syntmp-id-var-name-126 syntmp-e-1147 (quote (()))))) (let ((syntmp-b-1153 (syntmp-lookup-101 syntmp-label-1152 syntmp-r-1148 syntmp-mod-1151))) (if (eq? (syntmp-binding-type-96 syntmp-b-1153) (quote syntax)) (call-with-values (lambda () (let ((syntmp-var.lev-1154 (syntmp-binding-value-97 syntmp-b-1153))) (syntmp-gen-ref-1112 syntmp-src-1146 (car syntmp-var.lev-1154) (cdr syntmp-var.lev-1154) syntmp-maps-1149))) (lambda (syntmp-var-1155 syntmp-maps-1156) (values (list (quote ref) syntmp-var-1155) syntmp-maps-1156))) (if (syntmp-ellipsis?-1150 syntmp-e-1147) (syntax-error syntmp-src-1146 "misplaced ellipsis in syntax form") (values (list (quote quote) syntmp-e-1147) syntmp-maps-1149))))) ((lambda (syntmp-tmp-1157) ((lambda (syntmp-tmp-1158) (if (if syntmp-tmp-1158 (apply (lambda (syntmp-dots-1159 syntmp-e-1160) (syntmp-ellipsis?-1150 syntmp-dots-1159)) syntmp-tmp-1158) #f) (apply (lambda (syntmp-dots-1161 syntmp-e-1162) (syntmp-gen-syntax-1111 syntmp-src-1146 syntmp-e-1162 syntmp-r-1148 syntmp-maps-1149 (lambda (syntmp-x-1163) #f) syntmp-mod-1151)) syntmp-tmp-1158) ((lambda (syntmp-tmp-1164) (if (if syntmp-tmp-1164 (apply (lambda (syntmp-x-1165 syntmp-dots-1166 syntmp-y-1167) (syntmp-ellipsis?-1150 syntmp-dots-1166)) syntmp-tmp-1164) #f) (apply (lambda (syntmp-x-1168 syntmp-dots-1169 syntmp-y-1170) (let syntmp-f-1171 ((syntmp-y-1172 syntmp-y-1170) (syntmp-k-1173 (lambda (syntmp-maps-1174) (call-with-values (lambda () (syntmp-gen-syntax-1111 syntmp-src-1146 syntmp-x-1168 syntmp-r-1148 (cons (quote ()) syntmp-maps-1174) syntmp-ellipsis?-1150 syntmp-mod-1151)) (lambda (syntmp-x-1175 syntmp-maps-1176) (if (null? (car syntmp-maps-1176)) (syntax-error syntmp-src-1146 "extra ellipsis in syntax form") (values (syntmp-gen-map-1114 syntmp-x-1175 (car syntmp-maps-1176)) (cdr syntmp-maps-1176)))))))) ((lambda (syntmp-tmp-1177) ((lambda (syntmp-tmp-1178) (if (if syntmp-tmp-1178 (apply (lambda (syntmp-dots-1179 syntmp-y-1180) (syntmp-ellipsis?-1150 syntmp-dots-1179)) syntmp-tmp-1178) #f) (apply (lambda (syntmp-dots-1181 syntmp-y-1182) (syntmp-f-1171 syntmp-y-1182 (lambda (syntmp-maps-1183) (call-with-values (lambda () (syntmp-k-1173 (cons (quote ()) syntmp-maps-1183))) (lambda (syntmp-x-1184 syntmp-maps-1185) (if (null? (car syntmp-maps-1185)) (syntax-error syntmp-src-1146 "extra ellipsis in syntax form") (values (syntmp-gen-mappend-1113 syntmp-x-1184 (car syntmp-maps-1185)) (cdr syntmp-maps-1185)))))))) syntmp-tmp-1178) ((lambda (syntmp-_-1186) (call-with-values (lambda () (syntmp-gen-syntax-1111 syntmp-src-1146 syntmp-y-1172 syntmp-r-1148 syntmp-maps-1149 syntmp-ellipsis?-1150 syntmp-mod-1151)) (lambda (syntmp-y-1187 syntmp-maps-1188) (call-with-values (lambda () (syntmp-k-1173 syntmp-maps-1188)) (lambda (syntmp-x-1189 syntmp-maps-1190) (values (syntmp-gen-append-1116 syntmp-x-1189 syntmp-y-1187) syntmp-maps-1190)))))) syntmp-tmp-1177))) (syntax-dispatch syntmp-tmp-1177 (quote (any . any))))) syntmp-y-1172))) syntmp-tmp-1164) ((lambda (syntmp-tmp-1191) (if syntmp-tmp-1191 (apply (lambda (syntmp-x-1192 syntmp-y-1193) (call-with-values (lambda () (syntmp-gen-syntax-1111 syntmp-src-1146 syntmp-x-1192 syntmp-r-1148 syntmp-maps-1149 syntmp-ellipsis?-1150 syntmp-mod-1151)) (lambda (syntmp-x-1194 syntmp-maps-1195) (call-with-values (lambda () (syntmp-gen-syntax-1111 syntmp-src-1146 syntmp-y-1193 syntmp-r-1148 syntmp-maps-1195 syntmp-ellipsis?-1150 syntmp-mod-1151)) (lambda (syntmp-y-1196 syntmp-maps-1197) (values (syntmp-gen-cons-1115 syntmp-x-1194 syntmp-y-1196) syntmp-maps-1197)))))) syntmp-tmp-1191) ((lambda (syntmp-tmp-1198) (if syntmp-tmp-1198 (apply (lambda (syntmp-e1-1199 syntmp-e2-1200) (call-with-values (lambda () (syntmp-gen-syntax-1111 syntmp-src-1146 (cons syntmp-e1-1199 syntmp-e2-1200) syntmp-r-1148 syntmp-maps-1149 syntmp-ellipsis?-1150 syntmp-mod-1151)) (lambda (syntmp-e-1202 syntmp-maps-1203) (values (syntmp-gen-vector-1117 syntmp-e-1202) syntmp-maps-1203)))) syntmp-tmp-1198) ((lambda (syntmp-_-1204) (values (list (quote quote) syntmp-e-1147) syntmp-maps-1149)) syntmp-tmp-1157))) (syntax-dispatch syntmp-tmp-1157 (quote #(vector (any . each-any))))))) (syntax-dispatch syntmp-tmp-1157 (quote (any . any)))))) (syntax-dispatch syntmp-tmp-1157 (quote (any any . any)))))) (syntax-dispatch syntmp-tmp-1157 (quote (any any))))) syntmp-e-1147))))) (lambda (syntmp-e-1205 syntmp-r-1206 syntmp-w-1207 syntmp-s-1208 syntmp-mod-1209) (let ((syntmp-e-1210 (syntmp-source-wrap-133 syntmp-e-1205 syntmp-w-1207 syntmp-s-1208 syntmp-mod-1209))) ((lambda (syntmp-tmp-1211) ((lambda (syntmp-tmp-1212) (if syntmp-tmp-1212 (apply (lambda (syntmp-_-1213 syntmp-x-1214) (call-with-values (lambda () (syntmp-gen-syntax-1111 syntmp-e-1210 syntmp-x-1214 syntmp-r-1206 (quote ()) syntmp-ellipsis?-149 syntmp-mod-1209)) (lambda (syntmp-e-1215 syntmp-maps-1216) (syntmp-regen-1118 syntmp-e-1215)))) syntmp-tmp-1212) ((lambda (syntmp-_-1217) (syntax-error syntmp-e-1210)) syntmp-tmp-1211))) (syntax-dispatch syntmp-tmp-1211 (quote (any any))))) syntmp-e-1210))))) (syntmp-global-extend-102 (quote core) (quote lambda) (lambda (syntmp-e-1218 syntmp-r-1219 syntmp-w-1220 syntmp-s-1221 syntmp-mod-1222) ((lambda (syntmp-tmp-1223) ((lambda (syntmp-tmp-1224) (if syntmp-tmp-1224 (apply (lambda (syntmp-_-1225 syntmp-c-1226) (syntmp-chi-lambda-clause-145 (syntmp-source-wrap-133 syntmp-e-1218 syntmp-w-1220 syntmp-s-1221 syntmp-mod-1222) syntmp-c-1226 syntmp-r-1219 syntmp-w-1220 syntmp-mod-1222 (lambda (syntmp-vars-1227 syntmp-body-1228) (syntmp-build-annotated-81 syntmp-s-1221 (list (quote lambda) syntmp-vars-1227 syntmp-body-1228))))) syntmp-tmp-1224) (syntax-error syntmp-tmp-1223))) (syntax-dispatch syntmp-tmp-1223 (quote (any . any))))) syntmp-e-1218))) (syntmp-global-extend-102 (quote core) (quote let) (letrec ((syntmp-chi-let-1229 (lambda (syntmp-e-1230 syntmp-r-1231 syntmp-w-1232 syntmp-s-1233 syntmp-mod-1234 syntmp-constructor-1235 syntmp-ids-1236 syntmp-vals-1237 syntmp-exps-1238) (if (not (syntmp-valid-bound-ids?-129 syntmp-ids-1236)) (syntax-error syntmp-e-1230 "duplicate bound variable in") (let ((syntmp-labels-1239 (syntmp-gen-labels-110 syntmp-ids-1236)) (syntmp-new-vars-1240 (map syntmp-gen-var-152 syntmp-ids-1236))) (let ((syntmp-nw-1241 (syntmp-make-binding-wrap-121 syntmp-ids-1236 syntmp-labels-1239 syntmp-w-1232)) (syntmp-nr-1242 (syntmp-extend-var-env-99 syntmp-labels-1239 syntmp-new-vars-1240 syntmp-r-1231))) (syntmp-constructor-1235 syntmp-s-1233 syntmp-new-vars-1240 (map (lambda (syntmp-x-1243) (syntmp-chi-140 syntmp-x-1243 syntmp-r-1231 syntmp-w-1232 syntmp-mod-1234)) syntmp-vals-1237) (syntmp-chi-body-144 syntmp-exps-1238 (syntmp-source-wrap-133 syntmp-e-1230 syntmp-nw-1241 syntmp-s-1233 syntmp-mod-1234) syntmp-nr-1242 syntmp-nw-1241 syntmp-mod-1234)))))))) (lambda (syntmp-e-1244 syntmp-r-1245 syntmp-w-1246 syntmp-s-1247 syntmp-mod-1248) ((lambda (syntmp-tmp-1249) ((lambda (syntmp-tmp-1250) (if syntmp-tmp-1250 (apply (lambda (syntmp-_-1251 syntmp-id-1252 syntmp-val-1253 syntmp-e1-1254 syntmp-e2-1255) (syntmp-chi-let-1229 syntmp-e-1244 syntmp-r-1245 syntmp-w-1246 syntmp-s-1247 syntmp-mod-1248 syntmp-build-let-84 syntmp-id-1252 syntmp-val-1253 (cons syntmp-e1-1254 syntmp-e2-1255))) syntmp-tmp-1250) ((lambda (syntmp-tmp-1259) (if (if syntmp-tmp-1259 (apply (lambda (syntmp-_-1260 syntmp-f-1261 syntmp-id-1262 syntmp-val-1263 syntmp-e1-1264 syntmp-e2-1265) (syntmp-id?-104 syntmp-f-1261)) syntmp-tmp-1259) #f) (apply (lambda (syntmp-_-1266 syntmp-f-1267 syntmp-id-1268 syntmp-val-1269 syntmp-e1-1270 syntmp-e2-1271) (syntmp-chi-let-1229 syntmp-e-1244 syntmp-r-1245 syntmp-w-1246 syntmp-s-1247 syntmp-mod-1248 syntmp-build-named-let-85 (cons syntmp-f-1267 syntmp-id-1268) syntmp-val-1269 (cons syntmp-e1-1270 syntmp-e2-1271))) syntmp-tmp-1259) ((lambda (syntmp-_-1275) (syntax-error (syntmp-source-wrap-133 syntmp-e-1244 syntmp-w-1246 syntmp-s-1247 syntmp-mod-1248))) syntmp-tmp-1249))) (syntax-dispatch syntmp-tmp-1249 (quote (any any #(each (any any)) any . each-any)))))) (syntax-dispatch syntmp-tmp-1249 (quote (any #(each (any any)) any . each-any))))) syntmp-e-1244)))) (syntmp-global-extend-102 (quote core) (quote letrec) (lambda (syntmp-e-1276 syntmp-r-1277 syntmp-w-1278 syntmp-s-1279 syntmp-mod-1280) ((lambda (syntmp-tmp-1281) ((lambda (syntmp-tmp-1282) (if syntmp-tmp-1282 (apply (lambda (syntmp-_-1283 syntmp-id-1284 syntmp-val-1285 syntmp-e1-1286 syntmp-e2-1287) (let ((syntmp-ids-1288 syntmp-id-1284)) (if (not (syntmp-valid-bound-ids?-129 syntmp-ids-1288)) (syntax-error syntmp-e-1276 "duplicate bound variable in") (let ((syntmp-labels-1290 (syntmp-gen-labels-110 syntmp-ids-1288)) (syntmp-new-vars-1291 (map syntmp-gen-var-152 syntmp-ids-1288))) (let ((syntmp-w-1292 (syntmp-make-binding-wrap-121 syntmp-ids-1288 syntmp-labels-1290 syntmp-w-1278)) (syntmp-r-1293 (syntmp-extend-var-env-99 syntmp-labels-1290 syntmp-new-vars-1291 syntmp-r-1277))) (syntmp-build-letrec-86 syntmp-s-1279 syntmp-new-vars-1291 (map (lambda (syntmp-x-1294) (syntmp-chi-140 syntmp-x-1294 syntmp-r-1293 syntmp-w-1292 syntmp-mod-1280)) syntmp-val-1285) (syntmp-chi-body-144 (cons syntmp-e1-1286 syntmp-e2-1287) (syntmp-source-wrap-133 syntmp-e-1276 syntmp-w-1292 syntmp-s-1279 syntmp-mod-1280) syntmp-r-1293 syntmp-w-1292 syntmp-mod-1280))))))) syntmp-tmp-1282) ((lambda (syntmp-_-1297) (syntax-error (syntmp-source-wrap-133 syntmp-e-1276 syntmp-w-1278 syntmp-s-1279 syntmp-mod-1280))) syntmp-tmp-1281))) (syntax-dispatch syntmp-tmp-1281 (quote (any #(each (any any)) any . each-any))))) syntmp-e-1276))) (syntmp-global-extend-102 (quote core) (quote set!) (lambda (syntmp-e-1298 syntmp-r-1299 syntmp-w-1300 syntmp-s-1301 syntmp-mod-1302) ((lambda (syntmp-tmp-1303) ((lambda (syntmp-tmp-1304) (if (if syntmp-tmp-1304 (apply (lambda (syntmp-_-1305 syntmp-id-1306 syntmp-val-1307) (syntmp-id?-104 syntmp-id-1306)) syntmp-tmp-1304) #f) (apply (lambda (syntmp-_-1308 syntmp-id-1309 syntmp-val-1310) (let ((syntmp-val-1311 (syntmp-chi-140 syntmp-val-1310 syntmp-r-1299 syntmp-w-1300 syntmp-mod-1302)) (syntmp-n-1312 (syntmp-id-var-name-126 syntmp-id-1309 syntmp-w-1300))) (let ((syntmp-b-1313 (syntmp-lookup-101 syntmp-n-1312 syntmp-r-1299 syntmp-mod-1302))) (let ((syntmp-t-1314 (syntmp-binding-type-96 syntmp-b-1313))) (if (memv syntmp-t-1314 (quote (lexical))) (syntmp-build-annotated-81 syntmp-s-1301 (list (quote set!) (syntmp-binding-value-97 syntmp-b-1313) syntmp-val-1311)) (if (memv syntmp-t-1314 (quote (global))) (syntmp-build-annotated-81 syntmp-s-1301 (list (quote set!) (make-module-ref syntmp-mod-1302 syntmp-n-1312 #f) syntmp-val-1311)) (if (memv syntmp-t-1314 (quote (displaced-lexical))) (syntax-error (syntmp-wrap-132 syntmp-id-1309 syntmp-w-1300 syntmp-mod-1302) "identifier out of context") (syntax-error (syntmp-source-wrap-133 syntmp-e-1298 syntmp-w-1300 syntmp-s-1301 syntmp-mod-1302))))))))) syntmp-tmp-1304) ((lambda (syntmp-tmp-1315) (if syntmp-tmp-1315 (apply (lambda (syntmp-_-1316 syntmp-head-1317 syntmp-tail-1318 syntmp-val-1319) (call-with-values (lambda () (syntmp-syntax-type-138 syntmp-head-1317 syntmp-r-1299 (quote (())) #f #f syntmp-mod-1302)) (lambda (syntmp-type-1320 syntmp-value-1321 syntmp-ee-1322 syntmp-ww-1323 syntmp-ss-1324 syntmp-modmod-1325) (let ((syntmp-t-1326 syntmp-type-1320)) (if (memv syntmp-t-1326 (quote (module-ref))) (call-with-values (lambda () (syntmp-value-1321 (cons syntmp-head-1317 syntmp-tail-1318))) (lambda (syntmp-id-1328 syntmp-mod-1329) (syntmp-build-annotated-81 syntmp-s-1301 (list (quote set!) (make-module-ref syntmp-mod-1329 syntmp-id-1328 #f) syntmp-val-1319)))) (syntmp-build-annotated-81 syntmp-s-1301 (cons (syntmp-chi-140 (list (quote #(syntax-object setter ((top) #(ribcage () () ()) #(ribcage #(t) #(("m" top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(type value ee ww ss modmod) #((top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i")) #(ribcage #(_ head tail val) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(e r w s mod) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-module! set-syntax-object-wrap! set-syntax-object-expression! syntax-object-module syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application build-annotated get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))) (ice-9 syncase))) syntmp-head-1317) syntmp-r-1299 syntmp-w-1300 syntmp-mod-1302) (map (lambda (syntmp-e-1330) (syntmp-chi-140 syntmp-e-1330 syntmp-r-1299 syntmp-w-1300 syntmp-mod-1302)) (append syntmp-tail-1318 (list syntmp-val-1319)))))))))) syntmp-tmp-1315) ((lambda (syntmp-_-1332) (syntax-error (syntmp-source-wrap-133 syntmp-e-1298 syntmp-w-1300 syntmp-s-1301 syntmp-mod-1302))) syntmp-tmp-1303))) (syntax-dispatch syntmp-tmp-1303 (quote (any (any . each-any) any)))))) (syntax-dispatch syntmp-tmp-1303 (quote (any any any))))) syntmp-e-1298))) (syntmp-global-extend-102 (quote module-ref) (quote @) (lambda (syntmp-e-1333) ((lambda (syntmp-tmp-1334) ((lambda (syntmp-tmp-1335) (if (if syntmp-tmp-1335 (apply (lambda (syntmp-_-1336 syntmp-mod-1337 syntmp-id-1338) (and (andmap syntmp-id?-104 syntmp-mod-1337) (syntmp-id?-104 syntmp-id-1338))) syntmp-tmp-1335) #f) (apply (lambda (syntmp-_-1340 syntmp-mod-1341 syntmp-id-1342) (values (syntax-object->datum syntmp-id-1342) (syntax-object->datum (append syntmp-mod-1341 (quote (#(syntax-object %module-public-interface ((top) #(ribcage #(_ mod id) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(e) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-module! set-syntax-object-wrap! set-syntax-object-expression! syntax-object-module syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application build-annotated get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))) (ice-9 syncase)))))))) syntmp-tmp-1335) (syntax-error syntmp-tmp-1334))) (syntax-dispatch syntmp-tmp-1334 (quote (any each-any any))))) syntmp-e-1333))) (syntmp-global-extend-102 (quote module-ref) (quote @@) (lambda (syntmp-e-1344) ((lambda (syntmp-tmp-1345) ((lambda (syntmp-tmp-1346) (if (if syntmp-tmp-1346 (apply (lambda (syntmp-_-1347 syntmp-mod-1348 syntmp-id-1349) (and (andmap syntmp-id?-104 syntmp-mod-1348) (syntmp-id?-104 syntmp-id-1349))) syntmp-tmp-1346) #f) (apply (lambda (syntmp-_-1351 syntmp-mod-1352 syntmp-id-1353) (values (syntax-object->datum syntmp-id-1353) (syntax-object->datum syntmp-mod-1352))) syntmp-tmp-1346) (syntax-error syntmp-tmp-1345))) (syntax-dispatch syntmp-tmp-1345 (quote (any each-any any))))) syntmp-e-1344))) (syntmp-global-extend-102 (quote begin) (quote begin) (quote ())) (syntmp-global-extend-102 (quote define) (quote define) (quote ())) (syntmp-global-extend-102 (quote define-syntax) (quote define-syntax) (quote ())) (syntmp-global-extend-102 (quote eval-when) (quote eval-when) (quote ())) (syntmp-global-extend-102 (quote core) (quote syntax-case) (letrec ((syntmp-gen-syntax-case-1358 (lambda (syntmp-x-1359 syntmp-keys-1360 syntmp-clauses-1361 syntmp-r-1362 syntmp-mod-1363) (if (null? syntmp-clauses-1361) (syntmp-build-annotated-81 #f (list (syntmp-build-annotated-81 #f (quote syntax-error)) syntmp-x-1359)) ((lambda (syntmp-tmp-1364) ((lambda (syntmp-tmp-1365) (if syntmp-tmp-1365 (apply (lambda (syntmp-pat-1366 syntmp-exp-1367) (if (and (syntmp-id?-104 syntmp-pat-1366) (andmap (lambda (syntmp-x-1368) (not (syntmp-free-id=?-127 syntmp-pat-1366 syntmp-x-1368))) (cons (quote #(syntax-object ... ((top) #(ribcage #(pat exp) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x keys clauses r mod) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage (gen-syntax-case gen-clause build-dispatch-call convert-pattern) ((top) (top) (top) (top)) ("i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-module! set-syntax-object-wrap! set-syntax-object-expression! syntax-object-module syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application build-annotated get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))) (ice-9 syncase))) syntmp-keys-1360))) (let ((syntmp-labels-1369 (list (syntmp-gen-label-109))) (syntmp-var-1370 (syntmp-gen-var-152 syntmp-pat-1366))) (syntmp-build-annotated-81 #f (list (syntmp-build-annotated-81 #f (list (quote lambda) (list syntmp-var-1370) (syntmp-chi-140 syntmp-exp-1367 (syntmp-extend-env-98 syntmp-labels-1369 (list (cons (quote syntax) (cons syntmp-var-1370 0))) syntmp-r-1362) (syntmp-make-binding-wrap-121 (list syntmp-pat-1366) syntmp-labels-1369 (quote (()))) syntmp-mod-1363))) syntmp-x-1359))) (syntmp-gen-clause-1357 syntmp-x-1359 syntmp-keys-1360 (cdr syntmp-clauses-1361) syntmp-r-1362 syntmp-pat-1366 #t syntmp-exp-1367 syntmp-mod-1363))) syntmp-tmp-1365) ((lambda (syntmp-tmp-1371) (if syntmp-tmp-1371 (apply (lambda (syntmp-pat-1372 syntmp-fender-1373 syntmp-exp-1374) (syntmp-gen-clause-1357 syntmp-x-1359 syntmp-keys-1360 (cdr syntmp-clauses-1361) syntmp-r-1362 syntmp-pat-1372 syntmp-fender-1373 syntmp-exp-1374 syntmp-mod-1363)) syntmp-tmp-1371) ((lambda (syntmp-_-1375) (syntax-error (car syntmp-clauses-1361) "invalid syntax-case clause")) syntmp-tmp-1364))) (syntax-dispatch syntmp-tmp-1364 (quote (any any any)))))) (syntax-dispatch syntmp-tmp-1364 (quote (any any))))) (car syntmp-clauses-1361))))) (syntmp-gen-clause-1357 (lambda (syntmp-x-1376 syntmp-keys-1377 syntmp-clauses-1378 syntmp-r-1379 syntmp-pat-1380 syntmp-fender-1381 syntmp-exp-1382 syntmp-mod-1383) (call-with-values (lambda () (syntmp-convert-pattern-1355 syntmp-pat-1380 syntmp-keys-1377)) (lambda (syntmp-p-1384 syntmp-pvars-1385) (cond ((not (syntmp-distinct-bound-ids?-130 (map car syntmp-pvars-1385))) (syntax-error syntmp-pat-1380 "duplicate pattern variable in syntax-case pattern")) ((not (andmap (lambda (syntmp-x-1386) (not (syntmp-ellipsis?-149 (car syntmp-x-1386)))) syntmp-pvars-1385)) (syntax-error syntmp-pat-1380 "misplaced ellipsis in syntax-case pattern")) (else (let ((syntmp-y-1387 (syntmp-gen-var-152 (quote tmp)))) (syntmp-build-annotated-81 #f (list (syntmp-build-annotated-81 #f (list (quote lambda) (list syntmp-y-1387) (let ((syntmp-y-1388 (syntmp-build-annotated-81 #f syntmp-y-1387))) (syntmp-build-annotated-81 #f (list (quote if) ((lambda (syntmp-tmp-1389) ((lambda (syntmp-tmp-1390) (if syntmp-tmp-1390 (apply (lambda () syntmp-y-1388) syntmp-tmp-1390) ((lambda (syntmp-_-1391) (syntmp-build-annotated-81 #f (list (quote if) syntmp-y-1388 (syntmp-build-dispatch-call-1356 syntmp-pvars-1385 syntmp-fender-1381 syntmp-y-1388 syntmp-r-1379 syntmp-mod-1383) (syntmp-build-data-82 #f #f)))) syntmp-tmp-1389))) (syntax-dispatch syntmp-tmp-1389 (quote #(atom #t))))) syntmp-fender-1381) (syntmp-build-dispatch-call-1356 syntmp-pvars-1385 syntmp-exp-1382 syntmp-y-1388 syntmp-r-1379 syntmp-mod-1383) (syntmp-gen-syntax-case-1358 syntmp-x-1376 syntmp-keys-1377 syntmp-clauses-1378 syntmp-r-1379 syntmp-mod-1383)))))) (if (eq? syntmp-p-1384 (quote any)) (syntmp-build-annotated-81 #f (list (syntmp-build-annotated-81 #f (quote list)) syntmp-x-1376)) (syntmp-build-annotated-81 #f (list (syntmp-build-annotated-81 #f (quote syntax-dispatch)) syntmp-x-1376 (syntmp-build-data-82 #f syntmp-p-1384))))))))))))) (syntmp-build-dispatch-call-1356 (lambda (syntmp-pvars-1392 syntmp-exp-1393 syntmp-y-1394 syntmp-r-1395 syntmp-mod-1396) (let ((syntmp-ids-1397 (map car syntmp-pvars-1392)) (syntmp-levels-1398 (map cdr syntmp-pvars-1392))) (let ((syntmp-labels-1399 (syntmp-gen-labels-110 syntmp-ids-1397)) (syntmp-new-vars-1400 (map syntmp-gen-var-152 syntmp-ids-1397))) (syntmp-build-annotated-81 #f (list (syntmp-build-annotated-81 #f (quote apply)) (syntmp-build-annotated-81 #f (list (quote lambda) syntmp-new-vars-1400 (syntmp-chi-140 syntmp-exp-1393 (syntmp-extend-env-98 syntmp-labels-1399 (map (lambda (syntmp-var-1401 syntmp-level-1402) (cons (quote syntax) (cons syntmp-var-1401 syntmp-level-1402))) syntmp-new-vars-1400 (map cdr syntmp-pvars-1392)) syntmp-r-1395) (syntmp-make-binding-wrap-121 syntmp-ids-1397 syntmp-labels-1399 (quote (()))) syntmp-mod-1396))) syntmp-y-1394)))))) (syntmp-convert-pattern-1355 (lambda (syntmp-pattern-1403 syntmp-keys-1404) (let syntmp-cvt-1405 ((syntmp-p-1406 syntmp-pattern-1403) (syntmp-n-1407 0) (syntmp-ids-1408 (quote ()))) (if (syntmp-id?-104 syntmp-p-1406) (if (syntmp-bound-id-member?-131 syntmp-p-1406 syntmp-keys-1404) (values (vector (quote free-id) syntmp-p-1406) syntmp-ids-1408) (values (quote any) (cons (cons syntmp-p-1406 syntmp-n-1407) syntmp-ids-1408))) ((lambda (syntmp-tmp-1409) ((lambda (syntmp-tmp-1410) (if (if syntmp-tmp-1410 (apply (lambda (syntmp-x-1411 syntmp-dots-1412) (syntmp-ellipsis?-149 syntmp-dots-1412)) syntmp-tmp-1410) #f) (apply (lambda (syntmp-x-1413 syntmp-dots-1414) (call-with-values (lambda () (syntmp-cvt-1405 syntmp-x-1413 (syntmp-fx+-72 syntmp-n-1407 1) syntmp-ids-1408)) (lambda (syntmp-p-1415 syntmp-ids-1416) (values (if (eq? syntmp-p-1415 (quote any)) (quote each-any) (vector (quote each) syntmp-p-1415)) syntmp-ids-1416)))) syntmp-tmp-1410) ((lambda (syntmp-tmp-1417) (if syntmp-tmp-1417 (apply (lambda (syntmp-x-1418 syntmp-y-1419) (call-with-values (lambda () (syntmp-cvt-1405 syntmp-y-1419 syntmp-n-1407 syntmp-ids-1408)) (lambda (syntmp-y-1420 syntmp-ids-1421) (call-with-values (lambda () (syntmp-cvt-1405 syntmp-x-1418 syntmp-n-1407 syntmp-ids-1421)) (lambda (syntmp-x-1422 syntmp-ids-1423) (values (cons syntmp-x-1422 syntmp-y-1420) syntmp-ids-1423)))))) syntmp-tmp-1417) ((lambda (syntmp-tmp-1424) (if syntmp-tmp-1424 (apply (lambda () (values (quote ()) syntmp-ids-1408)) syntmp-tmp-1424) ((lambda (syntmp-tmp-1425) (if syntmp-tmp-1425 (apply (lambda (syntmp-x-1426) (call-with-values (lambda () (syntmp-cvt-1405 syntmp-x-1426 syntmp-n-1407 syntmp-ids-1408)) (lambda (syntmp-p-1428 syntmp-ids-1429) (values (vector (quote vector) syntmp-p-1428) syntmp-ids-1429)))) syntmp-tmp-1425) ((lambda (syntmp-x-1430) (values (vector (quote atom) (syntmp-strip-151 syntmp-p-1406 (quote (())))) syntmp-ids-1408)) syntmp-tmp-1409))) (syntax-dispatch syntmp-tmp-1409 (quote #(vector each-any)))))) (syntax-dispatch syntmp-tmp-1409 (quote ()))))) (syntax-dispatch syntmp-tmp-1409 (quote (any . any)))))) (syntax-dispatch syntmp-tmp-1409 (quote (any any))))) syntmp-p-1406)))))) (lambda (syntmp-e-1431 syntmp-r-1432 syntmp-w-1433 syntmp-s-1434 syntmp-mod-1435) (let ((syntmp-e-1436 (syntmp-source-wrap-133 syntmp-e-1431 syntmp-w-1433 syntmp-s-1434 syntmp-mod-1435))) ((lambda (syntmp-tmp-1437) ((lambda (syntmp-tmp-1438) (if syntmp-tmp-1438 (apply (lambda (syntmp-_-1439 syntmp-val-1440 syntmp-key-1441 syntmp-m-1442) (if (andmap (lambda (syntmp-x-1443) (and (syntmp-id?-104 syntmp-x-1443) (not (syntmp-ellipsis?-149 syntmp-x-1443)))) syntmp-key-1441) (let ((syntmp-x-1445 (syntmp-gen-var-152 (quote tmp)))) (syntmp-build-annotated-81 syntmp-s-1434 (list (syntmp-build-annotated-81 #f (list (quote lambda) (list syntmp-x-1445) (syntmp-gen-syntax-case-1358 (syntmp-build-annotated-81 #f syntmp-x-1445) syntmp-key-1441 syntmp-m-1442 syntmp-r-1432 syntmp-mod-1435))) (syntmp-chi-140 syntmp-val-1440 syntmp-r-1432 (quote (())) syntmp-mod-1435)))) (syntax-error syntmp-e-1436 "invalid literals list in"))) syntmp-tmp-1438) (syntax-error syntmp-tmp-1437))) (syntax-dispatch syntmp-tmp-1437 (quote (any any each-any . each-any))))) syntmp-e-1436))))) (set! sc-expand (let ((syntmp-m-1448 (quote e)) (syntmp-esew-1449 (quote (eval)))) (lambda (syntmp-x-1450) (if (and (pair? syntmp-x-1450) (equal? (car syntmp-x-1450) syntmp-noexpand-71)) (cadr syntmp-x-1450) (syntmp-chi-top-139 syntmp-x-1450 (quote ()) (quote ((top))) syntmp-m-1448 syntmp-esew-1449 (module-name (current-module))))))) (set! sc-expand3 (let ((syntmp-m-1451 (quote e)) (syntmp-esew-1452 (quote (eval)))) (lambda (syntmp-x-1454 . syntmp-rest-1453) (if (and (pair? syntmp-x-1454) (equal? (car syntmp-x-1454) syntmp-noexpand-71)) (cadr syntmp-x-1454) (syntmp-chi-top-139 syntmp-x-1454 (quote ()) (quote ((top))) (if (null? syntmp-rest-1453) syntmp-m-1451 (car syntmp-rest-1453)) (if (or (null? syntmp-rest-1453) (null? (cdr syntmp-rest-1453))) syntmp-esew-1452 (cadr syntmp-rest-1453)) (module-name (current-module))))))) (set! identifier? (lambda (syntmp-x-1455) (syntmp-nonsymbol-id?-103 syntmp-x-1455))) (set! datum->syntax-object (lambda (syntmp-id-1456 syntmp-datum-1457) (syntmp-make-syntax-object-87 syntmp-datum-1457 (syntmp-syntax-object-wrap-90 syntmp-id-1456) #f))) (set! syntax-object->datum (lambda (syntmp-x-1458) (syntmp-strip-151 syntmp-x-1458 (quote (()))))) (set! generate-temporaries (lambda (syntmp-ls-1459) (begin (let ((syntmp-x-1460 syntmp-ls-1459)) (if (not (list? syntmp-x-1460)) (syntmp-error-hook-78 (quote generate-temporaries) "invalid argument" syntmp-x-1460))) (map (lambda (syntmp-x-1461) (syntmp-wrap-132 (gensym) (quote ((top))) #f)) syntmp-ls-1459)))) (set! free-identifier=? (lambda (syntmp-x-1462 syntmp-y-1463) (begin (let ((syntmp-x-1464 syntmp-x-1462)) (if (not (syntmp-nonsymbol-id?-103 syntmp-x-1464)) (syntmp-error-hook-78 (quote free-identifier=?) "invalid argument" syntmp-x-1464))) (let ((syntmp-x-1465 syntmp-y-1463)) (if (not (syntmp-nonsymbol-id?-103 syntmp-x-1465)) (syntmp-error-hook-78 (quote free-identifier=?) "invalid argument" syntmp-x-1465))) (syntmp-free-id=?-127 syntmp-x-1462 syntmp-y-1463)))) (set! bound-identifier=? (lambda (syntmp-x-1466 syntmp-y-1467) (begin (let ((syntmp-x-1468 syntmp-x-1466)) (if (not (syntmp-nonsymbol-id?-103 syntmp-x-1468)) (syntmp-error-hook-78 (quote bound-identifier=?) "invalid argument" syntmp-x-1468))) (let ((syntmp-x-1469 syntmp-y-1467)) (if (not (syntmp-nonsymbol-id?-103 syntmp-x-1469)) (syntmp-error-hook-78 (quote bound-identifier=?) "invalid argument" syntmp-x-1469))) (syntmp-bound-id=?-128 syntmp-x-1466 syntmp-y-1467)))) (set! syntax-error (lambda (syntmp-object-1471 . syntmp-messages-1470) (begin (for-each (lambda (syntmp-x-1472) (let ((syntmp-x-1473 syntmp-x-1472)) (if (not (string? syntmp-x-1473)) (syntmp-error-hook-78 (quote syntax-error) "invalid argument" syntmp-x-1473)))) syntmp-messages-1470) (let ((syntmp-message-1474 (if (null? syntmp-messages-1470) "invalid syntax" (apply string-append syntmp-messages-1470)))) (syntmp-error-hook-78 #f syntmp-message-1474 (syntmp-strip-151 syntmp-object-1471 (quote (())))))))) (set! install-global-transformer (lambda (syntmp-sym-1475 syntmp-v-1476) (begin (let ((syntmp-x-1477 syntmp-sym-1475)) (if (not (symbol? syntmp-x-1477)) (syntmp-error-hook-78 (quote define-syntax) "invalid argument" syntmp-x-1477))) (let ((syntmp-x-1478 syntmp-v-1476)) (if (not (procedure? syntmp-x-1478)) (syntmp-error-hook-78 (quote define-syntax) "invalid argument" syntmp-x-1478))) (syntmp-global-extend-102 (quote macro) syntmp-sym-1475 syntmp-v-1476)))) (letrec ((syntmp-match-1483 (lambda (syntmp-e-1484 syntmp-p-1485 syntmp-w-1486 syntmp-r-1487 syntmp-mod-1488) (cond ((not syntmp-r-1487) #f) ((eq? syntmp-p-1485 (quote any)) (cons (syntmp-wrap-132 syntmp-e-1484 syntmp-w-1486 syntmp-mod-1488) syntmp-r-1487)) ((syntmp-syntax-object?-88 syntmp-e-1484) (syntmp-match*-1482 (let ((syntmp-e-1489 (syntmp-syntax-object-expression-89 syntmp-e-1484))) (if (annotation? syntmp-e-1489) (annotation-expression syntmp-e-1489) syntmp-e-1489)) syntmp-p-1485 (syntmp-join-wraps-123 syntmp-w-1486 (syntmp-syntax-object-wrap-90 syntmp-e-1484)) syntmp-r-1487 (syntmp-syntax-object-module-91 syntmp-e-1484))) (else (syntmp-match*-1482 (let ((syntmp-e-1490 syntmp-e-1484)) (if (annotation? syntmp-e-1490) (annotation-expression syntmp-e-1490) syntmp-e-1490)) syntmp-p-1485 syntmp-w-1486 syntmp-r-1487 syntmp-mod-1488))))) (syntmp-match*-1482 (lambda (syntmp-e-1491 syntmp-p-1492 syntmp-w-1493 syntmp-r-1494 syntmp-mod-1495) (cond ((null? syntmp-p-1492) (and (null? syntmp-e-1491) syntmp-r-1494)) ((pair? syntmp-p-1492) (and (pair? syntmp-e-1491) (syntmp-match-1483 (car syntmp-e-1491) (car syntmp-p-1492) syntmp-w-1493 (syntmp-match-1483 (cdr syntmp-e-1491) (cdr syntmp-p-1492) syntmp-w-1493 syntmp-r-1494 syntmp-mod-1495) syntmp-mod-1495))) ((eq? syntmp-p-1492 (quote each-any)) (let ((syntmp-l-1496 (syntmp-match-each-any-1480 syntmp-e-1491 syntmp-w-1493 syntmp-mod-1495))) (and syntmp-l-1496 (cons syntmp-l-1496 syntmp-r-1494)))) (else (let ((syntmp-t-1497 (vector-ref syntmp-p-1492 0))) (if (memv syntmp-t-1497 (quote (each))) (if (null? syntmp-e-1491) (syntmp-match-empty-1481 (vector-ref syntmp-p-1492 1) syntmp-r-1494) (let ((syntmp-l-1498 (syntmp-match-each-1479 syntmp-e-1491 (vector-ref syntmp-p-1492 1) syntmp-w-1493 syntmp-mod-1495))) (and syntmp-l-1498 (let syntmp-collect-1499 ((syntmp-l-1500 syntmp-l-1498)) (if (null? (car syntmp-l-1500)) syntmp-r-1494 (cons (map car syntmp-l-1500) (syntmp-collect-1499 (map cdr syntmp-l-1500)))))))) (if (memv syntmp-t-1497 (quote (free-id))) (and (syntmp-id?-104 syntmp-e-1491) (syntmp-free-id=?-127 (syntmp-wrap-132 syntmp-e-1491 syntmp-w-1493 syntmp-mod-1495) (vector-ref syntmp-p-1492 1)) syntmp-r-1494) (if (memv syntmp-t-1497 (quote (atom))) (and (equal? (vector-ref syntmp-p-1492 1) (syntmp-strip-151 syntmp-e-1491 syntmp-w-1493)) syntmp-r-1494) (if (memv syntmp-t-1497 (quote (vector))) (and (vector? syntmp-e-1491) (syntmp-match-1483 (vector->list syntmp-e-1491) (vector-ref syntmp-p-1492 1) syntmp-w-1493 syntmp-r-1494 syntmp-mod-1495))))))))))) (syntmp-match-empty-1481 (lambda (syntmp-p-1501 syntmp-r-1502) (cond ((null? syntmp-p-1501) syntmp-r-1502) ((eq? syntmp-p-1501 (quote any)) (cons (quote ()) syntmp-r-1502)) ((pair? syntmp-p-1501) (syntmp-match-empty-1481 (car syntmp-p-1501) (syntmp-match-empty-1481 (cdr syntmp-p-1501) syntmp-r-1502))) ((eq? syntmp-p-1501 (quote each-any)) (cons (quote ()) syntmp-r-1502)) (else (let ((syntmp-t-1503 (vector-ref syntmp-p-1501 0))) (if (memv syntmp-t-1503 (quote (each))) (syntmp-match-empty-1481 (vector-ref syntmp-p-1501 1) syntmp-r-1502) (if (memv syntmp-t-1503 (quote (free-id atom))) syntmp-r-1502 (if (memv syntmp-t-1503 (quote (vector))) (syntmp-match-empty-1481 (vector-ref syntmp-p-1501 1) syntmp-r-1502))))))))) (syntmp-match-each-any-1480 (lambda (syntmp-e-1504 syntmp-w-1505 syntmp-mod-1506) (cond ((annotation? syntmp-e-1504) (syntmp-match-each-any-1480 (annotation-expression syntmp-e-1504) syntmp-w-1505 syntmp-mod-1506)) ((pair? syntmp-e-1504) (let ((syntmp-l-1507 (syntmp-match-each-any-1480 (cdr syntmp-e-1504) syntmp-w-1505 syntmp-mod-1506))) (and syntmp-l-1507 (cons (syntmp-wrap-132 (car syntmp-e-1504) syntmp-w-1505 syntmp-mod-1506) syntmp-l-1507)))) ((null? syntmp-e-1504) (quote ())) ((syntmp-syntax-object?-88 syntmp-e-1504) (syntmp-match-each-any-1480 (syntmp-syntax-object-expression-89 syntmp-e-1504) (syntmp-join-wraps-123 syntmp-w-1505 (syntmp-syntax-object-wrap-90 syntmp-e-1504)) syntmp-mod-1506)) (else #f)))) (syntmp-match-each-1479 (lambda (syntmp-e-1508 syntmp-p-1509 syntmp-w-1510 syntmp-mod-1511) (cond ((annotation? syntmp-e-1508) (syntmp-match-each-1479 (annotation-expression syntmp-e-1508) syntmp-p-1509 syntmp-w-1510 syntmp-mod-1511)) ((pair? syntmp-e-1508) (let ((syntmp-first-1512 (syntmp-match-1483 (car syntmp-e-1508) syntmp-p-1509 syntmp-w-1510 (quote ()) syntmp-mod-1511))) (and syntmp-first-1512 (let ((syntmp-rest-1513 (syntmp-match-each-1479 (cdr syntmp-e-1508) syntmp-p-1509 syntmp-w-1510 syntmp-mod-1511))) (and syntmp-rest-1513 (cons syntmp-first-1512 syntmp-rest-1513)))))) ((null? syntmp-e-1508) (quote ())) ((syntmp-syntax-object?-88 syntmp-e-1508) (syntmp-match-each-1479 (syntmp-syntax-object-expression-89 syntmp-e-1508) syntmp-p-1509 (syntmp-join-wraps-123 syntmp-w-1510 (syntmp-syntax-object-wrap-90 syntmp-e-1508)) (syntmp-syntax-object-module-91 syntmp-e-1508))) (else #f))))) (begin (set! syntax-dispatch (lambda (syntmp-e-1514 syntmp-p-1515) (cond ((eq? syntmp-p-1515 (quote any)) (list syntmp-e-1514)) ((syntmp-syntax-object?-88 syntmp-e-1514) (syntmp-match*-1482 (let ((syntmp-e-1516 (syntmp-syntax-object-expression-89 syntmp-e-1514))) (if (annotation? syntmp-e-1516) (annotation-expression syntmp-e-1516) syntmp-e-1516)) syntmp-p-1515 (syntmp-syntax-object-wrap-90 syntmp-e-1514) (quote ()) (syntmp-syntax-object-module-91 syntmp-e-1514))) (else (syntmp-match*-1482 (let ((syntmp-e-1517 syntmp-e-1514)) (if (annotation? syntmp-e-1517) (annotation-expression syntmp-e-1517) syntmp-e-1517)) syntmp-p-1515 (quote (())) (quote ()) #f))))) (set! sc-chi syntmp-chi-140)))))
(install-global-transformer (quote with-syntax) (lambda (syntmp-x-1518) ((lambda (syntmp-tmp-1519) ((lambda (syntmp-tmp-1520) (if syntmp-tmp-1520 (apply (lambda (syntmp-_-1521 syntmp-e1-1522 syntmp-e2-1523) (cons (quote #(syntax-object begin ((top) #(ribcage #(_ e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons syntmp-e1-1522 syntmp-e2-1523))) syntmp-tmp-1520) ((lambda (syntmp-tmp-1525) (if syntmp-tmp-1525 (apply (lambda (syntmp-_-1526 syntmp-out-1527 syntmp-in-1528 syntmp-e1-1529 syntmp-e2-1530) (list (quote #(syntax-object syntax-case ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) syntmp-in-1528 (quote ()) (list syntmp-out-1527 (cons (quote #(syntax-object begin ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons syntmp-e1-1529 syntmp-e2-1530))))) syntmp-tmp-1525) ((lambda (syntmp-tmp-1532) (if syntmp-tmp-1532 (apply (lambda (syntmp-_-1533 syntmp-out-1534 syntmp-in-1535 syntmp-e1-1536 syntmp-e2-1537) (list (quote #(syntax-object syntax-case ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons (quote #(syntax-object list ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) syntmp-in-1535) (quote ()) (list syntmp-out-1534 (cons (quote #(syntax-object begin ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons syntmp-e1-1536 syntmp-e2-1537))))) syntmp-tmp-1532) (syntax-error syntmp-tmp-1519))) (syntax-dispatch syntmp-tmp-1519 (quote (any #(each (any any)) any . each-any)))))) (syntax-dispatch syntmp-tmp-1519 (quote (any ((any any)) any . each-any)))))) (syntax-dispatch syntmp-tmp-1519 (quote (any () any . each-any))))) syntmp-x-1518)))
(install-global-transformer (quote syntax-rules) (lambda (syntmp-x-1559) ((lambda (syntmp-tmp-1560) ((lambda (syntmp-tmp-1561) (if syntmp-tmp-1561 (apply (lambda (syntmp-_-1562 syntmp-k-1563 syntmp-keyword-1564 syntmp-pattern-1565 syntmp-template-1566) (list (quote #(syntax-object lambda ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (quote (#(syntax-object x ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase)))) (cons (quote #(syntax-object syntax-case ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons (quote #(syntax-object x ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons syntmp-k-1563 (map (lambda (syntmp-tmp-1569 syntmp-tmp-1568) (list (cons (quote #(syntax-object dummy ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) syntmp-tmp-1568) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) syntmp-tmp-1569))) syntmp-template-1566 syntmp-pattern-1565)))))) syntmp-tmp-1561) (syntax-error syntmp-tmp-1560))) (syntax-dispatch syntmp-tmp-1560 (quote (any each-any . #(each ((any . any) any))))))) syntmp-x-1559)))
(install-global-transformer (quote let*) (lambda (syntmp-x-1580) ((lambda (syntmp-tmp-1581) ((lambda (syntmp-tmp-1582) (if (if syntmp-tmp-1582 (apply (lambda (syntmp-let*-1583 syntmp-x-1584 syntmp-v-1585 syntmp-e1-1586 syntmp-e2-1587) (andmap identifier? syntmp-x-1584)) syntmp-tmp-1582) #f) (apply (lambda (syntmp-let*-1589 syntmp-x-1590 syntmp-v-1591 syntmp-e1-1592 syntmp-e2-1593) (let syntmp-f-1594 ((syntmp-bindings-1595 (map list syntmp-x-1590 syntmp-v-1591))) (if (null? syntmp-bindings-1595) (cons (quote #(syntax-object let ((top) #(ribcage () () ()) #(ribcage #(f bindings) #((top) (top)) #("i" "i")) #(ribcage #(let* x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons (quote ()) (cons syntmp-e1-1592 syntmp-e2-1593))) ((lambda (syntmp-tmp-1599) ((lambda (syntmp-tmp-1600) (if syntmp-tmp-1600 (apply (lambda (syntmp-body-1601 syntmp-binding-1602) (list (quote #(syntax-object let ((top) #(ribcage #(body binding) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(f bindings) #((top) (top)) #("i" "i")) #(ribcage #(let* x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (list syntmp-binding-1602) syntmp-body-1601)) syntmp-tmp-1600) (syntax-error syntmp-tmp-1599))) (syntax-dispatch syntmp-tmp-1599 (quote (any any))))) (list (syntmp-f-1594 (cdr syntmp-bindings-1595)) (car syntmp-bindings-1595)))))) syntmp-tmp-1582) (syntax-error syntmp-tmp-1581))) (syntax-dispatch syntmp-tmp-1581 (quote (any #(each (any any)) any . each-any))))) syntmp-x-1580)))
(install-global-transformer (quote do) (lambda (syntmp-orig-x-1622) ((lambda (syntmp-tmp-1623) ((lambda (syntmp-tmp-1624) (if syntmp-tmp-1624 (apply (lambda (syntmp-_-1625 syntmp-var-1626 syntmp-init-1627 syntmp-step-1628 syntmp-e0-1629 syntmp-e1-1630 syntmp-c-1631) ((lambda (syntmp-tmp-1632) ((lambda (syntmp-tmp-1633) (if syntmp-tmp-1633 (apply (lambda (syntmp-step-1634) ((lambda (syntmp-tmp-1635) ((lambda (syntmp-tmp-1636) (if syntmp-tmp-1636 (apply (lambda () (list (quote #(syntax-object let ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) (quote #(syntax-object doloop ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) (map list syntmp-var-1626 syntmp-init-1627) (list (quote #(syntax-object if ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) (list (quote #(syntax-object not ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) syntmp-e0-1629) (cons (quote #(syntax-object begin ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) (append syntmp-c-1631 (list (cons (quote #(syntax-object doloop ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) syntmp-step-1634))))))) syntmp-tmp-1636) ((lambda (syntmp-tmp-1641) (if syntmp-tmp-1641 (apply (lambda (syntmp-e1-1642 syntmp-e2-1643) (list (quote #(syntax-object let ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) (quote #(syntax-object doloop ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) (map list syntmp-var-1626 syntmp-init-1627) (list (quote #(syntax-object if ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) syntmp-e0-1629 (cons (quote #(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) (cons syntmp-e1-1642 syntmp-e2-1643)) (cons (quote #(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) (append syntmp-c-1631 (list (cons (quote #(syntax-object doloop ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))) (ice-9 syncase))) syntmp-step-1634))))))) syntmp-tmp-1641) (syntax-error syntmp-tmp-1635))) (syntax-dispatch syntmp-tmp-1635 (quote (any . each-any)))))) (syntax-dispatch syntmp-tmp-1635 (quote ())))) syntmp-e1-1630)) syntmp-tmp-1633) (syntax-error syntmp-tmp-1632))) (syntax-dispatch syntmp-tmp-1632 (quote each-any)))) (map (lambda (syntmp-v-1650 syntmp-s-1651) ((lambda (syntmp-tmp-1652) ((lambda (syntmp-tmp-1653) (if syntmp-tmp-1653 (apply (lambda () syntmp-v-1650) syntmp-tmp-1653) ((lambda (syntmp-tmp-1654) (if syntmp-tmp-1654 (apply (lambda (syntmp-e-1655) syntmp-e-1655) syntmp-tmp-1654) ((lambda (syntmp-_-1656) (syntax-error syntmp-orig-x-1622)) syntmp-tmp-1652))) (syntax-dispatch syntmp-tmp-1652 (quote (any)))))) (syntax-dispatch syntmp-tmp-1652 (quote ())))) syntmp-s-1651)) syntmp-var-1626 syntmp-step-1628))) syntmp-tmp-1624) (syntax-error syntmp-tmp-1623))) (syntax-dispatch syntmp-tmp-1623 (quote (any #(each (any any . any)) (any . each-any) . each-any))))) syntmp-orig-x-1622)))
(install-global-transformer (quote quasiquote) (letrec ((syntmp-quasicons-1684 (lambda (syntmp-x-1688 syntmp-y-1689) ((lambda (syntmp-tmp-1690) ((lambda (syntmp-tmp-1691) (if syntmp-tmp-1691 (apply (lambda (syntmp-x-1692 syntmp-y-1693) ((lambda (syntmp-tmp-1694) ((lambda (syntmp-tmp-1695) (if syntmp-tmp-1695 (apply (lambda (syntmp-dy-1696) ((lambda (syntmp-tmp-1697) ((lambda (syntmp-tmp-1698) (if syntmp-tmp-1698 (apply (lambda (syntmp-dx-1699) (list (quote #(syntax-object quote ((top) #(ribcage #(dx) #((top)) #("i")) #(ribcage #(dy) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) (cons syntmp-dx-1699 syntmp-dy-1696))) syntmp-tmp-1698) ((lambda (syntmp-_-1700) (if (null? syntmp-dy-1696) (list (quote #(syntax-object list ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(dy) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) syntmp-x-1692) (list (quote #(syntax-object cons ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(dy) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) syntmp-x-1692 syntmp-y-1693))) syntmp-tmp-1697))) (syntax-dispatch syntmp-tmp-1697 (quote (#(free-id #(syntax-object quote ((top) #(ribcage #(dy) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) any))))) syntmp-x-1692)) syntmp-tmp-1695) ((lambda (syntmp-tmp-1701) (if syntmp-tmp-1701 (apply (lambda (syntmp-stuff-1702) (cons (quote #(syntax-object list ((top) #(ribcage #(stuff) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) (cons syntmp-x-1692 syntmp-stuff-1702))) syntmp-tmp-1701) ((lambda (syntmp-else-1703) (list (quote #(syntax-object cons ((top) #(ribcage #(else) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) syntmp-x-1692 syntmp-y-1693)) syntmp-tmp-1694))) (syntax-dispatch syntmp-tmp-1694 (quote (#(free-id #(syntax-object list ((top) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) . any)))))) (syntax-dispatch syntmp-tmp-1694 (quote (#(free-id #(syntax-object quote ((top) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) any))))) syntmp-y-1693)) syntmp-tmp-1691) (syntax-error syntmp-tmp-1690))) (syntax-dispatch syntmp-tmp-1690 (quote (any any))))) (list syntmp-x-1688 syntmp-y-1689)))) (syntmp-quasiappend-1685 (lambda (syntmp-x-1704 syntmp-y-1705) ((lambda (syntmp-tmp-1706) ((lambda (syntmp-tmp-1707) (if syntmp-tmp-1707 (apply (lambda (syntmp-x-1708 syntmp-y-1709) ((lambda (syntmp-tmp-1710) ((lambda (syntmp-tmp-1711) (if syntmp-tmp-1711 (apply (lambda () syntmp-x-1708) syntmp-tmp-1711) ((lambda (syntmp-_-1712) (list (quote #(syntax-object append ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) syntmp-x-1708 syntmp-y-1709)) syntmp-tmp-1710))) (syntax-dispatch syntmp-tmp-1710 (quote (#(free-id #(syntax-object quote ((top) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) ()))))) syntmp-y-1709)) syntmp-tmp-1707) (syntax-error syntmp-tmp-1706))) (syntax-dispatch syntmp-tmp-1706 (quote (any any))))) (list syntmp-x-1704 syntmp-y-1705)))) (syntmp-quasivector-1686 (lambda (syntmp-x-1713) ((lambda (syntmp-tmp-1714) ((lambda (syntmp-x-1715) ((lambda (syntmp-tmp-1716) ((lambda (syntmp-tmp-1717) (if syntmp-tmp-1717 (apply (lambda (syntmp-x-1718) (list (quote #(syntax-object quote ((top) #(ribcage #(x) #((top)) #("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) (list->vector syntmp-x-1718))) syntmp-tmp-1717) ((lambda (syntmp-tmp-1720) (if syntmp-tmp-1720 (apply (lambda (syntmp-x-1721) (cons (quote #(syntax-object vector ((top) #(ribcage #(x) #((top)) #("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) syntmp-x-1721)) syntmp-tmp-1720) ((lambda (syntmp-_-1723) (list (quote #(syntax-object list->vector ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) syntmp-x-1715)) syntmp-tmp-1716))) (syntax-dispatch syntmp-tmp-1716 (quote (#(free-id #(syntax-object list ((top) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) . each-any)))))) (syntax-dispatch syntmp-tmp-1716 (quote (#(free-id #(syntax-object quote ((top) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) each-any))))) syntmp-x-1715)) syntmp-tmp-1714)) syntmp-x-1713))) (syntmp-quasi-1687 (lambda (syntmp-p-1724 syntmp-lev-1725) ((lambda (syntmp-tmp-1726) ((lambda (syntmp-tmp-1727) (if syntmp-tmp-1727 (apply (lambda (syntmp-p-1728) (if (= syntmp-lev-1725 0) syntmp-p-1728 (syntmp-quasicons-1684 (quote (#(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase)) #(syntax-object unquote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase)))) (syntmp-quasi-1687 (list syntmp-p-1728) (- syntmp-lev-1725 1))))) syntmp-tmp-1727) ((lambda (syntmp-tmp-1729) (if syntmp-tmp-1729 (apply (lambda (syntmp-p-1730 syntmp-q-1731) (if (= syntmp-lev-1725 0) (syntmp-quasiappend-1685 syntmp-p-1730 (syntmp-quasi-1687 syntmp-q-1731 syntmp-lev-1725)) (syntmp-quasicons-1684 (syntmp-quasicons-1684 (quote (#(syntax-object quote ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase)) #(syntax-object unquote-splicing ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase)))) (syntmp-quasi-1687 (list syntmp-p-1730) (- syntmp-lev-1725 1))) (syntmp-quasi-1687 syntmp-q-1731 syntmp-lev-1725)))) syntmp-tmp-1729) ((lambda (syntmp-tmp-1732) (if syntmp-tmp-1732 (apply (lambda (syntmp-p-1733) (syntmp-quasicons-1684 (quote (#(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase)) #(syntax-object quasiquote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase)))) (syntmp-quasi-1687 (list syntmp-p-1733) (+ syntmp-lev-1725 1)))) syntmp-tmp-1732) ((lambda (syntmp-tmp-1734) (if syntmp-tmp-1734 (apply (lambda (syntmp-p-1735 syntmp-q-1736) (syntmp-quasicons-1684 (syntmp-quasi-1687 syntmp-p-1735 syntmp-lev-1725) (syntmp-quasi-1687 syntmp-q-1736 syntmp-lev-1725))) syntmp-tmp-1734) ((lambda (syntmp-tmp-1737) (if syntmp-tmp-1737 (apply (lambda (syntmp-x-1738) (syntmp-quasivector-1686 (syntmp-quasi-1687 syntmp-x-1738 syntmp-lev-1725))) syntmp-tmp-1737) ((lambda (syntmp-p-1740) (list (quote #(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) syntmp-p-1740)) syntmp-tmp-1726))) (syntax-dispatch syntmp-tmp-1726 (quote #(vector each-any)))))) (syntax-dispatch syntmp-tmp-1726 (quote (any . any)))))) (syntax-dispatch syntmp-tmp-1726 (quote (#(free-id #(syntax-object quasiquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) any)))))) (syntax-dispatch syntmp-tmp-1726 (quote ((#(free-id #(syntax-object unquote-splicing ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) any) . any)))))) (syntax-dispatch syntmp-tmp-1726 (quote (#(free-id #(syntax-object unquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))) (ice-9 syncase))) any))))) syntmp-p-1724)))) (lambda (syntmp-x-1741) ((lambda (syntmp-tmp-1742) ((lambda (syntmp-tmp-1743) (if syntmp-tmp-1743 (apply (lambda (syntmp-_-1744 syntmp-e-1745) (syntmp-quasi-1687 syntmp-e-1745 0)) syntmp-tmp-1743) (syntax-error syntmp-tmp-1742))) (syntax-dispatch syntmp-tmp-1742 (quote (any any))))) syntmp-x-1741))))
(install-global-transformer (quote include) (lambda (syntmp-x-1805) (letrec ((syntmp-read-file-1806 (lambda (syntmp-fn-1807 syntmp-k-1808) (let ((syntmp-p-1809 (open-input-file syntmp-fn-1807))) (let syntmp-f-1810 ((syntmp-x-1811 (read syntmp-p-1809))) (if (eof-object? syntmp-x-1811) (begin (close-input-port syntmp-p-1809) (quote ())) (cons (datum->syntax-object syntmp-k-1808 syntmp-x-1811) (syntmp-f-1810 (read syntmp-p-1809))))))))) ((lambda (syntmp-tmp-1812) ((lambda (syntmp-tmp-1813) (if syntmp-tmp-1813 (apply (lambda (syntmp-k-1814 syntmp-filename-1815) (let ((syntmp-fn-1816 (syntax-object->datum syntmp-filename-1815))) ((lambda (syntmp-tmp-1817) ((lambda (syntmp-tmp-1818) (if syntmp-tmp-1818 (apply (lambda (syntmp-exp-1819) (cons (quote #(syntax-object begin ((top) #(ribcage #(exp) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(fn) #((top)) #("i")) #(ribcage #(k filename) #((top) (top)) #("i" "i")) #(ribcage (read-file) ((top)) ("i")) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) syntmp-exp-1819)) syntmp-tmp-1818) (syntax-error syntmp-tmp-1817))) (syntax-dispatch syntmp-tmp-1817 (quote each-any)))) (syntmp-read-file-1806 syntmp-fn-1816 syntmp-k-1814)))) syntmp-tmp-1813) (syntax-error syntmp-tmp-1812))) (syntax-dispatch syntmp-tmp-1812 (quote (any any))))) syntmp-x-1805))))
(install-global-transformer (quote unquote) (lambda (syntmp-x-1836) ((lambda (syntmp-tmp-1837) ((lambda (syntmp-tmp-1838) (if syntmp-tmp-1838 (apply (lambda (syntmp-_-1839 syntmp-e-1840) (error (quote unquote) "expression ,~s not valid outside of quasiquote" (syntax-object->datum syntmp-e-1840))) syntmp-tmp-1838) (syntax-error syntmp-tmp-1837))) (syntax-dispatch syntmp-tmp-1837 (quote (any any))))) syntmp-x-1836)))
(install-global-transformer (quote unquote-splicing) (lambda (syntmp-x-1846) ((lambda (syntmp-tmp-1847) ((lambda (syntmp-tmp-1848) (if syntmp-tmp-1848 (apply (lambda (syntmp-_-1849 syntmp-e-1850) (error (quote unquote-splicing) "expression ,@~s not valid outside of quasiquote" (syntax-object->datum syntmp-e-1850))) syntmp-tmp-1848) (syntax-error syntmp-tmp-1847))) (syntax-dispatch syntmp-tmp-1847 (quote (any any))))) syntmp-x-1846)))
(install-global-transformer (quote case) (lambda (syntmp-x-1856) ((lambda (syntmp-tmp-1857) ((lambda (syntmp-tmp-1858) (if syntmp-tmp-1858 (apply (lambda (syntmp-_-1859 syntmp-e-1860 syntmp-m1-1861 syntmp-m2-1862) ((lambda (syntmp-tmp-1863) ((lambda (syntmp-body-1864) (list (quote #(syntax-object let ((top) #(ribcage #(body) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (list (list (quote #(syntax-object t ((top) #(ribcage #(body) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) syntmp-e-1860)) syntmp-body-1864)) syntmp-tmp-1863)) (let syntmp-f-1865 ((syntmp-clause-1866 syntmp-m1-1861) (syntmp-clauses-1867 syntmp-m2-1862)) (if (null? syntmp-clauses-1867) ((lambda (syntmp-tmp-1869) ((lambda (syntmp-tmp-1870) (if syntmp-tmp-1870 (apply (lambda (syntmp-e1-1871 syntmp-e2-1872) (cons (quote #(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons syntmp-e1-1871 syntmp-e2-1872))) syntmp-tmp-1870) ((lambda (syntmp-tmp-1874) (if syntmp-tmp-1874 (apply (lambda (syntmp-k-1875 syntmp-e1-1876 syntmp-e2-1877) (list (quote #(syntax-object if ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (list (quote #(syntax-object memv ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (quote #(syntax-object t ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (list (quote #(syntax-object quote ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) syntmp-k-1875)) (cons (quote #(syntax-object begin ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons syntmp-e1-1876 syntmp-e2-1877)))) syntmp-tmp-1874) ((lambda (syntmp-_-1880) (syntax-error syntmp-x-1856)) syntmp-tmp-1869))) (syntax-dispatch syntmp-tmp-1869 (quote (each-any any . each-any)))))) (syntax-dispatch syntmp-tmp-1869 (quote (#(free-id #(syntax-object else ((top) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) any . each-any))))) syntmp-clause-1866) ((lambda (syntmp-tmp-1881) ((lambda (syntmp-rest-1882) ((lambda (syntmp-tmp-1883) ((lambda (syntmp-tmp-1884) (if syntmp-tmp-1884 (apply (lambda (syntmp-k-1885 syntmp-e1-1886 syntmp-e2-1887) (list (quote #(syntax-object if ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (list (quote #(syntax-object memv ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (quote #(syntax-object t ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (list (quote #(syntax-object quote ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) syntmp-k-1885)) (cons (quote #(syntax-object begin ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons syntmp-e1-1886 syntmp-e2-1887)) syntmp-rest-1882)) syntmp-tmp-1884) ((lambda (syntmp-_-1890) (syntax-error syntmp-x-1856)) syntmp-tmp-1883))) (syntax-dispatch syntmp-tmp-1883 (quote (each-any any . each-any))))) syntmp-clause-1866)) syntmp-tmp-1881)) (syntmp-f-1865 (car syntmp-clauses-1867) (cdr syntmp-clauses-1867))))))) syntmp-tmp-1858) (syntax-error syntmp-tmp-1857))) (syntax-dispatch syntmp-tmp-1857 (quote (any any any . each-any))))) syntmp-x-1856)))
(install-global-transformer (quote identifier-syntax) (lambda (syntmp-x-1920) ((lambda (syntmp-tmp-1921) ((lambda (syntmp-tmp-1922) (if syntmp-tmp-1922 (apply (lambda (syntmp-_-1923 syntmp-e-1924) (list (quote #(syntax-object lambda ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (quote (#(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase)))) (list (quote #(syntax-object syntax-case ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (quote #(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (quote ()) (list (quote #(syntax-object id ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (quote (#(syntax-object identifier? ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase)) (#(syntax-object syntax ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase)) #(syntax-object id ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))))) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) syntmp-e-1924)) (list (cons syntmp-_-1923 (quote (#(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase)) #(syntax-object ... ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))))) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase))) (cons syntmp-e-1924 (quote (#(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase)) #(syntax-object ... ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))) (ice-9 syncase)))))))))) syntmp-tmp-1922) (syntax-error syntmp-tmp-1921))) (syntax-dispatch syntmp-tmp-1921 (quote (any any))))) syntmp-x-1920)))
