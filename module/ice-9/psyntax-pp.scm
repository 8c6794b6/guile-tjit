(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec ((#{and-map*\ 26}#
           (lambda (#{f\ 192}# #{first\ 193}# . #{rest\ 194}#)
             (let ((#{t\ 200}# (null? #{first\ 193}#)))
               (if #{t\ 200}#
                 #{t\ 200}#
                 (if (null? #{rest\ 194}#)
                   (letrec ((#{andmap\ 204}#
                              (lambda (#{first\ 205}#)
                                (let ((#{x\ 208}# (car #{first\ 205}#))
                                      (#{first\ 209}# (cdr #{first\ 205}#)))
                                  (if (null? #{first\ 209}#)
                                    (#{f\ 192}# #{x\ 208}#)
                                    (if (#{f\ 192}# #{x\ 208}#)
                                      (#{andmap\ 204}# #{first\ 209}#)
                                      #f))))))
                     (#{andmap\ 204}# #{first\ 193}#))
                   (letrec ((#{andmap\ 215}#
                              (lambda (#{first\ 216}# #{rest\ 217}#)
                                (let ((#{x\ 222}# (car #{first\ 216}#))
                                      (#{xr\ 223}# (map car #{rest\ 217}#))
                                      (#{first\ 224}# (cdr #{first\ 216}#))
                                      (#{rest\ 225}# (map cdr #{rest\ 217}#)))
                                  (if (null? #{first\ 224}#)
                                    (apply #{f\ 192}#
                                           (cons #{x\ 222}# #{xr\ 223}#))
                                    (if (apply #{f\ 192}#
                                               (cons #{x\ 222}# #{xr\ 223}#))
                                      (#{andmap\ 215}#
                                        #{first\ 224}#
                                        #{rest\ 225}#)
                                      #f))))))
                     (#{andmap\ 215}# #{first\ 193}# #{rest\ 194}#))))))))
  (letrec ((#{lambda-var-list\ 482}#
             (lambda (#{vars\ 814}#)
               (letrec ((#{lvl\ 820}#
                          (lambda (#{vars\ 821}# #{ls\ 822}# #{w\ 823}#)
                            (if (pair? #{vars\ 821}#)
                              (#{lvl\ 820}#
                                (cdr #{vars\ 821}#)
                                (cons (#{wrap\ 436}#
                                        (car #{vars\ 821}#)
                                        #{w\ 823}#
                                        #f)
                                      #{ls\ 822}#)
                                #{w\ 823}#)
                              (if (#{id?\ 367}# #{vars\ 821}#)
                                (cons (#{wrap\ 436}#
                                        #{vars\ 821}#
                                        #{w\ 823}#
                                        #f)
                                      #{ls\ 822}#)
                                (if (null? #{vars\ 821}#)
                                  #{ls\ 822}#
                                  (if (#{syntax-object?\ 331}# #{vars\ 821}#)
                                    (#{lvl\ 820}#
                                      (#{syntax-object-expression\ 333}#
                                        #{vars\ 821}#)
                                      #{ls\ 822}#
                                      (#{join-wraps\ 418}#
                                        #{w\ 823}#
                                        (#{syntax-object-wrap\ 335}#
                                          #{vars\ 821}#)))
                                    (cons #{vars\ 821}# #{ls\ 822}#))))))))
                 (#{lvl\ 820}#
                   #{vars\ 814}#
                   '()
                   '(())))))
           (#{gen-var\ 480}#
             (lambda (#{id\ 834}#)
               (let ((#{id\ 837}#
                       (if (#{syntax-object?\ 331}# #{id\ 834}#)
                         (#{syntax-object-expression\ 333}# #{id\ 834}#)
                         #{id\ 834}#)))
                 (gensym
                   (string-append (symbol->string #{id\ 837}#) " ")))))
           (#{strip\ 478}#
             (lambda (#{x\ 839}# #{w\ 840}#)
               (if (memq 'top
                         (#{wrap-marks\ 374}# #{w\ 840}#))
                 #{x\ 839}#
                 (letrec ((#{f\ 846}# (lambda (#{x\ 847}#)
                                        (if (#{syntax-object?\ 331}#
                                              #{x\ 847}#)
                                          (#{strip\ 478}#
                                            (#{syntax-object-expression\ 333}#
                                              #{x\ 847}#)
                                            (#{syntax-object-wrap\ 335}#
                                              #{x\ 847}#))
                                          (if (pair? #{x\ 847}#)
                                            (let ((#{a\ 854}# (#{f\ 846}# (car #{x\ 847}#)))
                                                  (#{d\ 855}# (#{f\ 846}# (cdr #{x\ 847}#))))
                                              (if (if (eq? #{a\ 854}#
                                                           (car #{x\ 847}#))
                                                    (eq? #{d\ 855}#
                                                         (cdr #{x\ 847}#))
                                                    #f)
                                                #{x\ 847}#
                                                (cons #{a\ 854}# #{d\ 855}#)))
                                            (if (vector? #{x\ 847}#)
                                              (let ((#{old\ 861}#
                                                      (vector->list
                                                        #{x\ 847}#)))
                                                (let ((#{new\ 863}#
                                                        (map #{f\ 846}#
                                                             #{old\ 861}#)))
                                                  (if (#{and-map*\ 26}#
                                                        eq?
                                                        #{old\ 861}#
                                                        #{new\ 863}#)
                                                    #{x\ 847}#
                                                    (list->vector
                                                      #{new\ 863}#))))
                                              #{x\ 847}#))))))
                   (#{f\ 846}# #{x\ 839}#)))))
           (#{chi-lambda-case\ 476}#
             (lambda (#{e\ 865}#
                      #{r\ 866}#
                      #{w\ 867}#
                      #{s\ 868}#
                      #{mod\ 869}#
                      #{get-formals\ 870}#
                      #{clauses\ 871}#)
               (letrec ((#{expand-body\ 886}#
                          (lambda (#{req\ 887}#
                                   #{opt\ 888}#
                                   #{rest\ 889}#
                                   #{kw\ 890}#
                                   #{body\ 891}#
                                   #{vars\ 892}#
                                   #{r*\ 893}#
                                   #{w*\ 894}#
                                   #{inits\ 895}#
                                   #{meta\ 896}#)
                            ((lambda (#{tmp\ 907}#)
                               ((lambda (#{tmp\ 908}#)
                                  (if (if #{tmp\ 908}#
                                        (apply (lambda (#{docstring\ 912}#
                                                        #{e1\ 913}#
                                                        #{e2\ 914}#)
                                                 (string?
                                                   (syntax->datum
                                                     #{docstring\ 912}#)))
                                               #{tmp\ 908}#)
                                        #f)
                                    (apply (lambda (#{docstring\ 918}#
                                                    #{e1\ 919}#
                                                    #{e2\ 920}#)
                                             (#{expand-body\ 886}#
                                               #{req\ 887}#
                                               #{opt\ 888}#
                                               #{rest\ 889}#
                                               #{kw\ 890}#
                                               (cons #{e1\ 919}# #{e2\ 920}#)
                                               #{vars\ 892}#
                                               #{r*\ 893}#
                                               #{w*\ 894}#
                                               #{inits\ 895}#
                                               (append
                                                 #{meta\ 896}#
                                                 (list (cons 'documentation
                                                             (syntax->datum
                                                               #{docstring\ 918}#))))))
                                           #{tmp\ 908}#)
                                    ((lambda (#{tmp\ 923}#)
                                       (if #{tmp\ 923}#
                                         (apply (lambda (#{k\ 928}#
                                                         #{v\ 929}#
                                                         #{e1\ 930}#
                                                         #{e2\ 931}#)
                                                  (#{expand-body\ 886}#
                                                    #{req\ 887}#
                                                    #{opt\ 888}#
                                                    #{rest\ 889}#
                                                    #{kw\ 890}#
                                                    (cons #{e1\ 930}#
                                                          #{e2\ 931}#)
                                                    #{vars\ 892}#
                                                    #{r*\ 893}#
                                                    #{w*\ 894}#
                                                    #{inits\ 895}#
                                                    (append
                                                      #{meta\ 896}#
                                                      (syntax->datum
                                                        (map cons
                                                             #{k\ 928}#
                                                             #{v\ 929}#)))))
                                                #{tmp\ 923}#)
                                         ((lambda (#{tmp\ 935}#)
                                            (if #{tmp\ 935}#
                                              (apply (lambda (#{e1\ 938}#
                                                              #{e2\ 939}#)
                                                       (values
                                                         #{meta\ 896}#
                                                         #{req\ 887}#
                                                         #{opt\ 888}#
                                                         #{rest\ 889}#
                                                         #{kw\ 890}#
                                                         #{inits\ 895}#
                                                         #{vars\ 892}#
                                                         (#{chi-body\ 460}#
                                                           (cons #{e1\ 938}#
                                                                 #{e2\ 939}#)
                                                           (#{source-wrap\ 438}#
                                                             #{e\ 865}#
                                                             #{w\ 867}#
                                                             #{s\ 868}#
                                                             #{mod\ 869}#)
                                                           #{r*\ 893}#
                                                           #{w*\ 894}#
                                                           #{mod\ 869}#)))
                                                     #{tmp\ 935}#)
                                              (syntax-violation
                                                #f
                                                "source expression failed to match any pattern"
                                                #{tmp\ 907}#)))
                                          ($sc-dispatch
                                            #{tmp\ 907}#
                                            '(any . each-any)))))
                                     ($sc-dispatch
                                       #{tmp\ 907}#
                                       '(#(vector #(each (any . any)))
                                         any
                                         .
                                         each-any)))))
                                ($sc-dispatch
                                  #{tmp\ 907}#
                                  '(any any . each-any))))
                             #{body\ 891}#)))
                        (#{expand-kw\ 884}#
                          (lambda (#{req\ 941}#
                                   #{opt\ 942}#
                                   #{rest\ 943}#
                                   #{kw\ 944}#
                                   #{body\ 945}#
                                   #{vars\ 946}#
                                   #{r*\ 947}#
                                   #{w*\ 948}#
                                   #{aok\ 949}#
                                   #{out\ 950}#
                                   #{inits\ 951}#)
                            (if (pair? #{kw\ 944}#)
                              ((lambda (#{tmp\ 965}#)
                                 ((lambda (#{tmp\ 966}#)
                                    (if #{tmp\ 966}#
                                      (apply (lambda (#{k\ 970}#
                                                      #{id\ 971}#
                                                      #{i\ 972}#)
                                               (let ((#{v\ 975}# (#{gen-var\ 480}#
                                                                   #{id\ 971}#)))
                                                 (let ((#{l\ 977}# (#{gen-labels\ 385}#
                                                                     (list #{v\ 975}#))))
                                                   (let ((#{r**\ 979}#
                                                           (#{extend-var-env\ 357}#
                                                             #{l\ 977}#
                                                             (list #{v\ 975}#)
                                                             #{r*\ 947}#)))
                                                     (let ((#{w**\ 981}#
                                                             (#{make-binding-wrap\ 414}#
                                                               (list #{id\ 971}#)
                                                               #{l\ 977}#
                                                               #{w*\ 948}#)))
                                                       (#{expand-kw\ 884}#
                                                         #{req\ 941}#
                                                         #{opt\ 942}#
                                                         #{rest\ 943}#
                                                         (cdr #{kw\ 944}#)
                                                         #{body\ 945}#
                                                         (cons #{v\ 975}#
                                                               #{vars\ 946}#)
                                                         #{r**\ 979}#
                                                         #{w**\ 981}#
                                                         #{aok\ 949}#
                                                         (cons (list (syntax->datum
                                                                       #{k\ 970}#)
                                                                     (syntax->datum
                                                                       #{id\ 971}#)
                                                                     #{v\ 975}#)
                                                               #{out\ 950}#)
                                                         (cons (#{chi\ 452}#
                                                                 #{i\ 972}#
                                                                 #{r*\ 947}#
                                                                 #{w*\ 948}#
                                                                 #{mod\ 869}#)
                                                               #{inits\ 951}#)))))))
                                             #{tmp\ 966}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 965}#)))
                                  ($sc-dispatch
                                    #{tmp\ 965}#
                                    '(any any any))))
                               (car #{kw\ 944}#))
                              (#{expand-body\ 886}#
                                #{req\ 941}#
                                #{opt\ 942}#
                                #{rest\ 943}#
                                (if (let ((#{t\ 985}# #{aok\ 949}#))
                                      (if #{t\ 985}#
                                        #{t\ 985}#
                                        (pair? #{out\ 950}#)))
                                  (cons #{aok\ 949}# (reverse #{out\ 950}#))
                                  #f)
                                #{body\ 945}#
                                (reverse #{vars\ 946}#)
                                #{r*\ 947}#
                                #{w*\ 948}#
                                (reverse #{inits\ 951}#)
                                '()))))
                        (#{expand-opt\ 882}#
                          (lambda (#{req\ 987}#
                                   #{opt\ 988}#
                                   #{rest\ 989}#
                                   #{kw\ 990}#
                                   #{body\ 991}#
                                   #{vars\ 992}#
                                   #{r*\ 993}#
                                   #{w*\ 994}#
                                   #{out\ 995}#
                                   #{inits\ 996}#)
                            (if (pair? #{opt\ 988}#)
                              ((lambda (#{tmp\ 1009}#)
                                 ((lambda (#{tmp\ 1010}#)
                                    (if #{tmp\ 1010}#
                                      (apply (lambda (#{id\ 1013}# #{i\ 1014}#)
                                               (let ((#{v\ 1017}#
                                                       (#{gen-var\ 480}#
                                                         #{id\ 1013}#)))
                                                 (let ((#{l\ 1019}#
                                                         (#{gen-labels\ 385}#
                                                           (list #{v\ 1017}#))))
                                                   (let ((#{r**\ 1021}#
                                                           (#{extend-var-env\ 357}#
                                                             #{l\ 1019}#
                                                             (list #{v\ 1017}#)
                                                             #{r*\ 993}#)))
                                                     (let ((#{w**\ 1023}#
                                                             (#{make-binding-wrap\ 414}#
                                                               (list #{id\ 1013}#)
                                                               #{l\ 1019}#
                                                               #{w*\ 994}#)))
                                                       (#{expand-opt\ 882}#
                                                         #{req\ 987}#
                                                         (cdr #{opt\ 988}#)
                                                         #{rest\ 989}#
                                                         #{kw\ 990}#
                                                         #{body\ 991}#
                                                         (cons #{v\ 1017}#
                                                               #{vars\ 992}#)
                                                         #{r**\ 1021}#
                                                         #{w**\ 1023}#
                                                         (cons (syntax->datum
                                                                 #{id\ 1013}#)
                                                               #{out\ 995}#)
                                                         (cons (#{chi\ 452}#
                                                                 #{i\ 1014}#
                                                                 #{r*\ 993}#
                                                                 #{w*\ 994}#
                                                                 #{mod\ 869}#)
                                                               #{inits\ 996}#)))))))
                                             #{tmp\ 1010}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 1009}#)))
                                  ($sc-dispatch
                                    #{tmp\ 1009}#
                                    '(any any))))
                               (car #{opt\ 988}#))
                              (if #{rest\ 989}#
                                (let ((#{v\ 1028}#
                                        (#{gen-var\ 480}# #{rest\ 989}#)))
                                  (let ((#{l\ 1030}#
                                          (#{gen-labels\ 385}#
                                            (list #{v\ 1028}#))))
                                    (let ((#{r*\ 1032}#
                                            (#{extend-var-env\ 357}#
                                              #{l\ 1030}#
                                              (list #{v\ 1028}#)
                                              #{r*\ 993}#)))
                                      (let ((#{w*\ 1034}#
                                              (#{make-binding-wrap\ 414}#
                                                (list #{rest\ 989}#)
                                                #{l\ 1030}#
                                                #{w*\ 994}#)))
                                        (#{expand-kw\ 884}#
                                          #{req\ 987}#
                                          (if (pair? #{out\ 995}#)
                                            (reverse #{out\ 995}#)
                                            #f)
                                          (syntax->datum #{rest\ 989}#)
                                          (if (pair? #{kw\ 990}#)
                                            (cdr #{kw\ 990}#)
                                            #{kw\ 990}#)
                                          #{body\ 991}#
                                          (cons #{v\ 1028}# #{vars\ 992}#)
                                          #{r*\ 1032}#
                                          #{w*\ 1034}#
                                          (if (pair? #{kw\ 990}#)
                                            (car #{kw\ 990}#)
                                            #f)
                                          '()
                                          #{inits\ 996}#)))))
                                (#{expand-kw\ 884}#
                                  #{req\ 987}#
                                  (if (pair? #{out\ 995}#)
                                    (reverse #{out\ 995}#)
                                    #f)
                                  #f
                                  (if (pair? #{kw\ 990}#)
                                    (cdr #{kw\ 990}#)
                                    #{kw\ 990}#)
                                  #{body\ 991}#
                                  #{vars\ 992}#
                                  #{r*\ 993}#
                                  #{w*\ 994}#
                                  (if (pair? #{kw\ 990}#) (car #{kw\ 990}#) #f)
                                  '()
                                  #{inits\ 996}#)))))
                        (#{expand-req\ 880}#
                          (lambda (#{req\ 1036}#
                                   #{opt\ 1037}#
                                   #{rest\ 1038}#
                                   #{kw\ 1039}#
                                   #{body\ 1040}#)
                            (let ((#{vars\ 1048}#
                                    (map #{gen-var\ 480}# #{req\ 1036}#))
                                  (#{labels\ 1049}#
                                    (#{gen-labels\ 385}# #{req\ 1036}#)))
                              (let ((#{r*\ 1052}#
                                      (#{extend-var-env\ 357}#
                                        #{labels\ 1049}#
                                        #{vars\ 1048}#
                                        #{r\ 866}#))
                                    (#{w*\ 1053}#
                                      (#{make-binding-wrap\ 414}#
                                        #{req\ 1036}#
                                        #{labels\ 1049}#
                                        #{w\ 867}#)))
                                (#{expand-opt\ 882}#
                                  (map syntax->datum #{req\ 1036}#)
                                  #{opt\ 1037}#
                                  #{rest\ 1038}#
                                  #{kw\ 1039}#
                                  #{body\ 1040}#
                                  (reverse #{vars\ 1048}#)
                                  #{r*\ 1052}#
                                  #{w*\ 1053}#
                                  '()
                                  '()))))))
                 ((lambda (#{tmp\ 1054}#)
                    ((lambda (#{tmp\ 1055}#)
                       (if #{tmp\ 1055}#
                         (apply (lambda () (values (quote ()) #f))
                                #{tmp\ 1055}#)
                         ((lambda (#{tmp\ 1056}#)
                            (if #{tmp\ 1056}#
                              (apply (lambda (#{args\ 1063}#
                                              #{e1\ 1064}#
                                              #{e2\ 1065}#
                                              #{args*\ 1066}#
                                              #{e1*\ 1067}#
                                              #{e2*\ 1068}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{get-formals\ 870}#
                                             #{args\ 1063}#))
                                         (lambda (#{req\ 1069}#
                                                  #{opt\ 1070}#
                                                  #{rest\ 1071}#
                                                  #{kw\ 1072}#)
                                           (call-with-values
                                             (lambda ()
                                               (#{expand-req\ 880}#
                                                 #{req\ 1069}#
                                                 #{opt\ 1070}#
                                                 #{rest\ 1071}#
                                                 #{kw\ 1072}#
                                                 (cons #{e1\ 1064}#
                                                       #{e2\ 1065}#)))
                                             (lambda (#{meta\ 1078}#
                                                      #{req\ 1079}#
                                                      #{opt\ 1080}#
                                                      #{rest\ 1081}#
                                                      #{kw\ 1082}#
                                                      #{inits\ 1083}#
                                                      #{vars\ 1084}#
                                                      #{body\ 1085}#)
                                               (call-with-values
                                                 (lambda ()
                                                   (#{chi-lambda-case\ 476}#
                                                     #{e\ 865}#
                                                     #{r\ 866}#
                                                     #{w\ 867}#
                                                     #{s\ 868}#
                                                     #{mod\ 869}#
                                                     #{get-formals\ 870}#
                                                     (map (lambda (#{tmp\ 1096}#
                                                                   #{tmp\ 1095}#
                                                                   #{tmp\ 1094}#)
                                                            (cons #{tmp\ 1094}#
                                                                  (cons #{tmp\ 1095}#
                                                                        #{tmp\ 1096}#)))
                                                          #{e2*\ 1068}#
                                                          #{e1*\ 1067}#
                                                          #{args*\ 1066}#)))
                                                 (lambda (#{meta*\ 1098}#
                                                          #{else*\ 1099}#)
                                                   (values
                                                     (append
                                                       #{meta\ 1078}#
                                                       #{meta*\ 1098}#)
                                                     (#{build-lambda-case\ 313}#
                                                       #{s\ 868}#
                                                       #{req\ 1079}#
                                                       #{opt\ 1080}#
                                                       #{rest\ 1081}#
                                                       #{kw\ 1082}#
                                                       #{inits\ 1083}#
                                                       #{vars\ 1084}#
                                                       #{body\ 1085}#
                                                       #{else*\ 1099}#)))))))))
                                     #{tmp\ 1056}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 1054}#)))
                          ($sc-dispatch
                            #{tmp\ 1054}#
                            '((any any . each-any)
                              .
                              #(each (any any . each-any)))))))
                     ($sc-dispatch #{tmp\ 1054}# (quote ()))))
                  #{clauses\ 871}#))))
           (#{lambda*-formals\ 474}#
             (lambda (#{orig-args\ 1102}#)
               (letrec ((#{check\ 1113}#
                          (lambda (#{req\ 1114}#
                                   #{opt\ 1115}#
                                   #{rest\ 1116}#
                                   #{kw\ 1117}#)
                            (if (#{distinct-bound-ids?\ 432}#
                                  (append
                                    #{req\ 1114}#
                                    (map car #{opt\ 1115}#)
                                    (if #{rest\ 1116}#
                                      (list #{rest\ 1116}#)
                                      '())
                                    (if (pair? #{kw\ 1117}#)
                                      (map cadr (cdr #{kw\ 1117}#))
                                      '())))
                              (values
                                #{req\ 1114}#
                                #{opt\ 1115}#
                                #{rest\ 1116}#
                                #{kw\ 1117}#)
                              (syntax-violation
                                'lambda*
                                "duplicate identifier in argument list"
                                #{orig-args\ 1102}#))))
                        (#{rest\ 1111}#
                          (lambda (#{args\ 1125}#
                                   #{req\ 1126}#
                                   #{opt\ 1127}#
                                   #{kw\ 1128}#)
                            ((lambda (#{tmp\ 1133}#)
                               ((lambda (#{tmp\ 1134}#)
                                  (if (if #{tmp\ 1134}#
                                        (apply (lambda (#{r\ 1136}#)
                                                 (#{id?\ 367}# #{r\ 1136}#))
                                               #{tmp\ 1134}#)
                                        #f)
                                    (apply (lambda (#{r\ 1138}#)
                                             (#{check\ 1113}#
                                               #{req\ 1126}#
                                               #{opt\ 1127}#
                                               #{r\ 1138}#
                                               #{kw\ 1128}#))
                                           #{tmp\ 1134}#)
                                    ((lambda (#{else\ 1140}#)
                                       (syntax-violation
                                         'lambda*
                                         "invalid rest argument"
                                         #{orig-args\ 1102}#
                                         #{args\ 1125}#))
                                     #{tmp\ 1133}#)))
                                (list #{tmp\ 1133}#)))
                             #{args\ 1125}#)))
                        (#{key\ 1109}#
                          (lambda (#{args\ 1141}#
                                   #{req\ 1142}#
                                   #{opt\ 1143}#
                                   #{rkey\ 1144}#)
                            ((lambda (#{tmp\ 1149}#)
                               ((lambda (#{tmp\ 1150}#)
                                  (if #{tmp\ 1150}#
                                    (apply (lambda ()
                                             (#{check\ 1113}#
                                               #{req\ 1142}#
                                               #{opt\ 1143}#
                                               #f
                                               (cons #f
                                                     (reverse
                                                       #{rkey\ 1144}#))))
                                           #{tmp\ 1150}#)
                                    ((lambda (#{tmp\ 1151}#)
                                       (if (if #{tmp\ 1151}#
                                             (apply (lambda (#{a\ 1154}#
                                                             #{b\ 1155}#)
                                                      (#{id?\ 367}#
                                                        #{a\ 1154}#))
                                                    #{tmp\ 1151}#)
                                             #f)
                                         (apply (lambda (#{a\ 1158}#
                                                         #{b\ 1159}#)
                                                  ((lambda (#{tmp\ 1161}#)
                                                     ((lambda (#{k\ 1163}#)
                                                        (#{key\ 1109}#
                                                          #{b\ 1159}#
                                                          #{req\ 1142}#
                                                          #{opt\ 1143}#
                                                          (cons (cons #{k\ 1163}#
                                                                      (cons #{a\ 1158}#
                                                                            '(#(syntax-object
                                                                                #f
                                                                                ((top)
                                                                                 #(ribcage
                                                                                   #(k)
                                                                                   #((top))
                                                                                   #("i1162"))
                                                                                 #(ribcage
                                                                                   #(a
                                                                                     b)
                                                                                   #((top)
                                                                                     (top))
                                                                                   #("i1156"
                                                                                     "i1157"))
                                                                                 #(ribcage
                                                                                   ()
                                                                                   ()
                                                                                   ())
                                                                                 #(ribcage
                                                                                   #(args
                                                                                     req
                                                                                     opt
                                                                                     rkey)
                                                                                   #((top)
                                                                                     (top)
                                                                                     (top)
                                                                                     (top))
                                                                                   #("i1145"
                                                                                     "i1146"
                                                                                     "i1147"
                                                                                     "i1148"))
                                                                                 #(ribcage
                                                                                   (check rest
                                                                                          key
                                                                                          opt
                                                                                          req)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i1112"
                                                                                    "i1110"
                                                                                    "i1108"
                                                                                    "i1106"
                                                                                    "i1104"))
                                                                                 #(ribcage
                                                                                   #(orig-args)
                                                                                   #((top))
                                                                                   #("i1103"))
                                                                                 #(ribcage
                                                                                   (lambda-var-list
                                                                                     gen-var
                                                                                     strip
                                                                                     chi-lambda-case
                                                                                     lambda*-formals
                                                                                     chi-simple-lambda
                                                                                     lambda-formals
                                                                                     ellipsis?
                                                                                     chi-void
                                                                                     eval-local-transformer
                                                                                     chi-local-syntax
                                                                                     chi-body
                                                                                     chi-macro
                                                                                     chi-application
                                                                                     chi-expr
                                                                                     chi
                                                                                     chi-top
                                                                                     syntax-type
                                                                                     chi-when-list
                                                                                     chi-install-global
                                                                                     chi-top-sequence
                                                                                     chi-sequence
                                                                                     source-wrap
                                                                                     wrap
                                                                                     bound-id-member?
                                                                                     distinct-bound-ids?
                                                                                     valid-bound-ids?
                                                                                     bound-id=?
                                                                                     free-id=?
                                                                                     id-var-name
                                                                                     same-marks?
                                                                                     join-marks
                                                                                     join-wraps
                                                                                     smart-append
                                                                                     make-binding-wrap
                                                                                     extend-ribcage!
                                                                                     make-empty-ribcage
                                                                                     new-mark
                                                                                     anti-mark
                                                                                     the-anti-mark
                                                                                     top-marked?
                                                                                     top-wrap
                                                                                     empty-wrap
                                                                                     set-ribcage-labels!
                                                                                     set-ribcage-marks!
                                                                                     set-ribcage-symnames!
                                                                                     ribcage-labels
                                                                                     ribcage-marks
                                                                                     ribcage-symnames
                                                                                     ribcage?
                                                                                     make-ribcage
                                                                                     gen-labels
                                                                                     gen-label
                                                                                     make-rename
                                                                                     rename-marks
                                                                                     rename-new
                                                                                     rename-old
                                                                                     subst-rename?
                                                                                     wrap-subst
                                                                                     wrap-marks
                                                                                     make-wrap
                                                                                     id-sym-name&marks
                                                                                     id-sym-name
                                                                                     id?
                                                                                     nonsymbol-id?
                                                                                     global-extend
                                                                                     lookup
                                                                                     macros-only-env
                                                                                     extend-var-env
                                                                                     extend-env
                                                                                     null-env
                                                                                     binding-value
                                                                                     binding-type
                                                                                     make-binding
                                                                                     arg-check
                                                                                     source-annotation
                                                                                     no-source
                                                                                     set-syntax-object-module!
                                                                                     set-syntax-object-wrap!
                                                                                     set-syntax-object-expression!
                                                                                     syntax-object-module
                                                                                     syntax-object-wrap
                                                                                     syntax-object-expression
                                                                                     syntax-object?
                                                                                     make-syntax-object
                                                                                     build-lexical-var
                                                                                     build-letrec
                                                                                     build-named-let
                                                                                     build-let
                                                                                     build-sequence
                                                                                     build-data
                                                                                     build-primref
                                                                                     build-lambda-case
                                                                                     build-case-lambda
                                                                                     build-simple-lambda
                                                                                     build-global-definition
                                                                                     maybe-name-value!
                                                                                     build-global-assignment
                                                                                     build-global-reference
                                                                                     analyze-variable
                                                                                     build-lexical-assignment
                                                                                     build-lexical-reference
                                                                                     build-dynlet
                                                                                     build-conditional
                                                                                     build-application
                                                                                     build-void
                                                                                     decorate-source
                                                                                     get-global-definition-hook
                                                                                     put-global-definition-hook
                                                                                     gensym-hook
                                                                                     local-eval-hook
                                                                                     top-level-eval-hook
                                                                                     fx<
                                                                                     fx=
                                                                                     fx-
                                                                                     fx+
                                                                                     make-dynlet
                                                                                     make-letrec
                                                                                     make-let
                                                                                     make-lambda-case
                                                                                     make-lambda
                                                                                     make-sequence
                                                                                     make-application
                                                                                     make-conditional
                                                                                     make-toplevel-define
                                                                                     make-toplevel-set
                                                                                     make-toplevel-ref
                                                                                     make-module-set
                                                                                     make-module-ref
                                                                                     make-lexical-set
                                                                                     make-lexical-ref
                                                                                     make-primitive-ref
                                                                                     make-const
                                                                                     make-void
                                                                                     *mode*)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i481"
                                                                                    "i479"
                                                                                    "i477"
                                                                                    "i475"
                                                                                    "i473"
                                                                                    "i471"
                                                                                    "i469"
                                                                                    "i467"
                                                                                    "i465"
                                                                                    "i463"
                                                                                    "i461"
                                                                                    "i459"
                                                                                    "i457"
                                                                                    "i455"
                                                                                    "i453"
                                                                                    "i451"
                                                                                    "i449"
                                                                                    "i447"
                                                                                    "i445"
                                                                                    "i443"
                                                                                    "i441"
                                                                                    "i439"
                                                                                    "i437"
                                                                                    "i435"
                                                                                    "i433"
                                                                                    "i431"
                                                                                    "i429"
                                                                                    "i427"
                                                                                    "i425"
                                                                                    "i423"
                                                                                    "i421"
                                                                                    "i419"
                                                                                    "i417"
                                                                                    "i415"
                                                                                    "i413"
                                                                                    "i411"
                                                                                    "i410"
                                                                                    "i409"
                                                                                    "i407"
                                                                                    "i406"
                                                                                    "i405"
                                                                                    "i404"
                                                                                    "i403"
                                                                                    "i401"
                                                                                    "i399"
                                                                                    "i397"
                                                                                    "i395"
                                                                                    "i393"
                                                                                    "i391"
                                                                                    "i389"
                                                                                    "i387"
                                                                                    "i384"
                                                                                    "i382"
                                                                                    "i381"
                                                                                    "i380"
                                                                                    "i379"
                                                                                    "i378"
                                                                                    "i377"
                                                                                    "i375"
                                                                                    "i373"
                                                                                    "i371"
                                                                                    "i369"
                                                                                    "i368"
                                                                                    "i366"
                                                                                    "i364"
                                                                                    "i362"
                                                                                    "i360"
                                                                                    "i358"
                                                                                    "i356"
                                                                                    "i354"
                                                                                    "i353"
                                                                                    "i351"
                                                                                    "i349"
                                                                                    "i348"
                                                                                    "i347"
                                                                                    "i345"
                                                                                    "i344"
                                                                                    "i342"
                                                                                    "i340"
                                                                                    "i338"
                                                                                    "i336"
                                                                                    "i334"
                                                                                    "i332"
                                                                                    "i330"
                                                                                    "i328"
                                                                                    "i326"
                                                                                    "i324"
                                                                                    "i322"
                                                                                    "i320"
                                                                                    "i318"
                                                                                    "i316"
                                                                                    "i314"
                                                                                    "i312"
                                                                                    "i310"
                                                                                    "i308"
                                                                                    "i306"
                                                                                    "i304"
                                                                                    "i302"
                                                                                    "i300"
                                                                                    "i298"
                                                                                    "i296"
                                                                                    "i294"
                                                                                    "i292"
                                                                                    "i290"
                                                                                    "i288"
                                                                                    "i286"
                                                                                    "i284"
                                                                                    "i282"
                                                                                    "i280"
                                                                                    "i279"
                                                                                    "i277"
                                                                                    "i275"
                                                                                    "i273"
                                                                                    "i271"
                                                                                    "i269"
                                                                                    "i267"
                                                                                    "i265"
                                                                                    "i263"
                                                                                    "i261"
                                                                                    "i259"
                                                                                    "i257"
                                                                                    "i255"
                                                                                    "i253"
                                                                                    "i251"
                                                                                    "i249"
                                                                                    "i247"
                                                                                    "i245"
                                                                                    "i243"
                                                                                    "i241"
                                                                                    "i239"
                                                                                    "i237"
                                                                                    "i235"
                                                                                    "i233"
                                                                                    "i231"
                                                                                    "i228"))
                                                                                 #(ribcage
                                                                                   (define-structure
                                                                                     define-expansion-constructors
                                                                                     and-map*)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i28"
                                                                                    "i27"
                                                                                    "i25")))
                                                                                (hygiene
                                                                                  guile)))))
                                                                #{rkey\ 1144}#)))
                                                      #{tmp\ 1161}#))
                                                   (symbol->keyword
                                                     (syntax->datum
                                                       #{a\ 1158}#))))
                                                #{tmp\ 1151}#)
                                         ((lambda (#{tmp\ 1164}#)
                                            (if (if #{tmp\ 1164}#
                                                  (apply (lambda (#{a\ 1168}#
                                                                  #{init\ 1169}#
                                                                  #{b\ 1170}#)
                                                           (#{id?\ 367}#
                                                             #{a\ 1168}#))
                                                         #{tmp\ 1164}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1174}#
                                                              #{init\ 1175}#
                                                              #{b\ 1176}#)
                                                       ((lambda (#{tmp\ 1178}#)
                                                          ((lambda (#{k\ 1180}#)
                                                             (#{key\ 1109}#
                                                               #{b\ 1176}#
                                                               #{req\ 1142}#
                                                               #{opt\ 1143}#
                                                               (cons (list #{k\ 1180}#
                                                                           #{a\ 1174}#
                                                                           #{init\ 1175}#)
                                                                     #{rkey\ 1144}#)))
                                                           #{tmp\ 1178}#))
                                                        (symbol->keyword
                                                          (syntax->datum
                                                            #{a\ 1174}#))))
                                                     #{tmp\ 1164}#)
                                              ((lambda (#{tmp\ 1181}#)
                                                 (if (if #{tmp\ 1181}#
                                                       (apply (lambda (#{a\ 1186}#
                                                                       #{init\ 1187}#
                                                                       #{k\ 1188}#
                                                                       #{b\ 1189}#)
                                                                (if (#{id?\ 367}#
                                                                      #{a\ 1186}#)
                                                                  (keyword?
                                                                    (syntax->datum
                                                                      #{k\ 1188}#))
                                                                  #f))
                                                              #{tmp\ 1181}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1196}#
                                                                   #{init\ 1197}#
                                                                   #{k\ 1198}#
                                                                   #{b\ 1199}#)
                                                            (#{key\ 1109}#
                                                              #{b\ 1199}#
                                                              #{req\ 1142}#
                                                              #{opt\ 1143}#
                                                              (cons (list #{k\ 1198}#
                                                                          #{a\ 1196}#
                                                                          #{init\ 1197}#)
                                                                    #{rkey\ 1144}#)))
                                                          #{tmp\ 1181}#)
                                                   ((lambda (#{tmp\ 1200}#)
                                                      (if (if #{tmp\ 1200}#
                                                            (apply (lambda (#{aok\ 1202}#)
                                                                     (eq? (syntax->datum
                                                                            #{aok\ 1202}#)
                                                                          #:allow-other-keys))
                                                                   #{tmp\ 1200}#)
                                                            #f)
                                                        (apply (lambda (#{aok\ 1204}#)
                                                                 (#{check\ 1113}#
                                                                   #{req\ 1142}#
                                                                   #{opt\ 1143}#
                                                                   #f
                                                                   (cons #t
                                                                         (reverse
                                                                           #{rkey\ 1144}#))))
                                                               #{tmp\ 1200}#)
                                                        ((lambda (#{tmp\ 1205}#)
                                                           (if (if #{tmp\ 1205}#
                                                                 (apply (lambda (#{aok\ 1209}#
                                                                                 #{a\ 1210}#
                                                                                 #{b\ 1211}#)
                                                                          (if (eq? (syntax->datum
                                                                                     #{aok\ 1209}#)
                                                                                   #:allow-other-keys)
                                                                            (eq? (syntax->datum
                                                                                   #{a\ 1210}#)
                                                                                 #:rest)
                                                                            #f))
                                                                        #{tmp\ 1205}#)
                                                                 #f)
                                                             (apply (lambda (#{aok\ 1217}#
                                                                             #{a\ 1218}#
                                                                             #{b\ 1219}#)
                                                                      (#{rest\ 1111}#
                                                                        #{b\ 1219}#
                                                                        #{req\ 1142}#
                                                                        #{opt\ 1143}#
                                                                        (cons #t
                                                                              (reverse
                                                                                #{rkey\ 1144}#))))
                                                                    #{tmp\ 1205}#)
                                                             ((lambda (#{tmp\ 1220}#)
                                                                (if (if #{tmp\ 1220}#
                                                                      (apply (lambda (#{aok\ 1223}#
                                                                                      #{r\ 1224}#)
                                                                               (if (eq? (syntax->datum
                                                                                          #{aok\ 1223}#)
                                                                                        #:allow-other-keys)
                                                                                 (#{id?\ 367}#
                                                                                   #{r\ 1224}#)
                                                                                 #f))
                                                                             #{tmp\ 1220}#)
                                                                      #f)
                                                                  (apply (lambda (#{aok\ 1229}#
                                                                                  #{r\ 1230}#)
                                                                           (#{rest\ 1111}#
                                                                             #{r\ 1230}#
                                                                             #{req\ 1142}#
                                                                             #{opt\ 1143}#
                                                                             (cons #t
                                                                                   (reverse
                                                                                     #{rkey\ 1144}#))))
                                                                         #{tmp\ 1220}#)
                                                                  ((lambda (#{tmp\ 1231}#)
                                                                     (if (if #{tmp\ 1231}#
                                                                           (apply (lambda (#{a\ 1234}#
                                                                                           #{b\ 1235}#)
                                                                                    (eq? (syntax->datum
                                                                                           #{a\ 1234}#)
                                                                                         #:rest))
                                                                                  #{tmp\ 1231}#)
                                                                           #f)
                                                                       (apply (lambda (#{a\ 1238}#
                                                                                       #{b\ 1239}#)
                                                                                (#{rest\ 1111}#
                                                                                  #{b\ 1239}#
                                                                                  #{req\ 1142}#
                                                                                  #{opt\ 1143}#
                                                                                  (cons #f
                                                                                        (reverse
                                                                                          #{rkey\ 1144}#))))
                                                                              #{tmp\ 1231}#)
                                                                       ((lambda (#{tmp\ 1240}#)
                                                                          (if (if #{tmp\ 1240}#
                                                                                (apply (lambda (#{r\ 1242}#)
                                                                                         (#{id?\ 367}#
                                                                                           #{r\ 1242}#))
                                                                                       #{tmp\ 1240}#)
                                                                                #f)
                                                                            (apply (lambda (#{r\ 1244}#)
                                                                                     (#{rest\ 1111}#
                                                                                       #{r\ 1244}#
                                                                                       #{req\ 1142}#
                                                                                       #{opt\ 1143}#
                                                                                       (cons #f
                                                                                             (reverse
                                                                                               #{rkey\ 1144}#))))
                                                                                   #{tmp\ 1240}#)
                                                                            ((lambda (#{else\ 1246}#)
                                                                               (syntax-violation
                                                                                 'lambda*
                                                                                 "invalid keyword argument list"
                                                                                 #{orig-args\ 1102}#
                                                                                 #{args\ 1141}#))
                                                                             #{tmp\ 1149}#)))
                                                                        (list #{tmp\ 1149}#))))
                                                                   ($sc-dispatch
                                                                     #{tmp\ 1149}#
                                                                     '(any any)))))
                                                              ($sc-dispatch
                                                                #{tmp\ 1149}#
                                                                '(any .
                                                                      any)))))
                                                         ($sc-dispatch
                                                           #{tmp\ 1149}#
                                                           '(any any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1149}#
                                                      '(any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1149}#
                                                 '((any any any) . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1149}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1149}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1149}# (quote ()))))
                             #{args\ 1141}#)))
                        (#{opt\ 1107}#
                          (lambda (#{args\ 1247}# #{req\ 1248}# #{ropt\ 1249}#)
                            ((lambda (#{tmp\ 1253}#)
                               ((lambda (#{tmp\ 1254}#)
                                  (if #{tmp\ 1254}#
                                    (apply (lambda ()
                                             (#{check\ 1113}#
                                               #{req\ 1248}#
                                               (reverse #{ropt\ 1249}#)
                                               #f
                                               '()))
                                           #{tmp\ 1254}#)
                                    ((lambda (#{tmp\ 1255}#)
                                       (if (if #{tmp\ 1255}#
                                             (apply (lambda (#{a\ 1258}#
                                                             #{b\ 1259}#)
                                                      (#{id?\ 367}#
                                                        #{a\ 1258}#))
                                                    #{tmp\ 1255}#)
                                             #f)
                                         (apply (lambda (#{a\ 1262}#
                                                         #{b\ 1263}#)
                                                  (#{opt\ 1107}#
                                                    #{b\ 1263}#
                                                    #{req\ 1248}#
                                                    (cons (cons #{a\ 1262}#
                                                                '(#(syntax-object
                                                                    #f
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(a b)
                                                                       #((top)
                                                                         (top))
                                                                       #("i1260"
                                                                         "i1261"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(args
                                                                         req
                                                                         ropt)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1250"
                                                                         "i1251"
                                                                         "i1252"))
                                                                     #(ribcage
                                                                       (check rest
                                                                              key
                                                                              opt
                                                                              req)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i1112"
                                                                        "i1110"
                                                                        "i1108"
                                                                        "i1106"
                                                                        "i1104"))
                                                                     #(ribcage
                                                                       #(orig-args)
                                                                       #((top))
                                                                       #("i1103"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         chi-lambda-case
                                                                         lambda*-formals
                                                                         chi-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         chi-void
                                                                         eval-local-transformer
                                                                         chi-local-syntax
                                                                         chi-body
                                                                         chi-macro
                                                                         chi-application
                                                                         chi-expr
                                                                         chi
                                                                         chi-top
                                                                         syntax-type
                                                                         chi-when-list
                                                                         chi-install-global
                                                                         chi-top-sequence
                                                                         chi-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         maybe-name-value!
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void
                                                                         *mode*)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i481"
                                                                        "i479"
                                                                        "i477"
                                                                        "i475"
                                                                        "i473"
                                                                        "i471"
                                                                        "i469"
                                                                        "i467"
                                                                        "i465"
                                                                        "i463"
                                                                        "i461"
                                                                        "i459"
                                                                        "i457"
                                                                        "i455"
                                                                        "i453"
                                                                        "i451"
                                                                        "i449"
                                                                        "i447"
                                                                        "i445"
                                                                        "i443"
                                                                        "i441"
                                                                        "i439"
                                                                        "i437"
                                                                        "i435"
                                                                        "i433"
                                                                        "i431"
                                                                        "i429"
                                                                        "i427"
                                                                        "i425"
                                                                        "i423"
                                                                        "i421"
                                                                        "i419"
                                                                        "i417"
                                                                        "i415"
                                                                        "i413"
                                                                        "i411"
                                                                        "i410"
                                                                        "i409"
                                                                        "i407"
                                                                        "i406"
                                                                        "i405"
                                                                        "i404"
                                                                        "i403"
                                                                        "i401"
                                                                        "i399"
                                                                        "i397"
                                                                        "i395"
                                                                        "i393"
                                                                        "i391"
                                                                        "i389"
                                                                        "i387"
                                                                        "i384"
                                                                        "i382"
                                                                        "i381"
                                                                        "i380"
                                                                        "i379"
                                                                        "i378"
                                                                        "i377"
                                                                        "i375"
                                                                        "i373"
                                                                        "i371"
                                                                        "i369"
                                                                        "i368"
                                                                        "i366"
                                                                        "i364"
                                                                        "i362"
                                                                        "i360"
                                                                        "i358"
                                                                        "i356"
                                                                        "i354"
                                                                        "i353"
                                                                        "i351"
                                                                        "i349"
                                                                        "i348"
                                                                        "i347"
                                                                        "i345"
                                                                        "i344"
                                                                        "i342"
                                                                        "i340"
                                                                        "i338"
                                                                        "i336"
                                                                        "i334"
                                                                        "i332"
                                                                        "i330"
                                                                        "i328"
                                                                        "i326"
                                                                        "i324"
                                                                        "i322"
                                                                        "i320"
                                                                        "i318"
                                                                        "i316"
                                                                        "i314"
                                                                        "i312"
                                                                        "i310"
                                                                        "i308"
                                                                        "i306"
                                                                        "i304"
                                                                        "i302"
                                                                        "i300"
                                                                        "i298"
                                                                        "i296"
                                                                        "i294"
                                                                        "i292"
                                                                        "i290"
                                                                        "i288"
                                                                        "i286"
                                                                        "i284"
                                                                        "i282"
                                                                        "i280"
                                                                        "i279"
                                                                        "i277"
                                                                        "i275"
                                                                        "i273"
                                                                        "i271"
                                                                        "i269"
                                                                        "i267"
                                                                        "i265"
                                                                        "i263"
                                                                        "i261"
                                                                        "i259"
                                                                        "i257"
                                                                        "i255"
                                                                        "i253"
                                                                        "i251"
                                                                        "i249"
                                                                        "i247"
                                                                        "i245"
                                                                        "i243"
                                                                        "i241"
                                                                        "i239"
                                                                        "i237"
                                                                        "i235"
                                                                        "i233"
                                                                        "i231"
                                                                        "i228"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-constructors
                                                                         and-map*)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("i28"
                                                                        "i27"
                                                                        "i25")))
                                                                    (hygiene
                                                                      guile))))
                                                          #{ropt\ 1249}#)))
                                                #{tmp\ 1255}#)
                                         ((lambda (#{tmp\ 1264}#)
                                            (if (if #{tmp\ 1264}#
                                                  (apply (lambda (#{a\ 1268}#
                                                                  #{init\ 1269}#
                                                                  #{b\ 1270}#)
                                                           (#{id?\ 367}#
                                                             #{a\ 1268}#))
                                                         #{tmp\ 1264}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1274}#
                                                              #{init\ 1275}#
                                                              #{b\ 1276}#)
                                                       (#{opt\ 1107}#
                                                         #{b\ 1276}#
                                                         #{req\ 1248}#
                                                         (cons (list #{a\ 1274}#
                                                                     #{init\ 1275}#)
                                                               #{ropt\ 1249}#)))
                                                     #{tmp\ 1264}#)
                                              ((lambda (#{tmp\ 1277}#)
                                                 (if (if #{tmp\ 1277}#
                                                       (apply (lambda (#{a\ 1280}#
                                                                       #{b\ 1281}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1280}#)
                                                                     #:key))
                                                              #{tmp\ 1277}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1284}#
                                                                   #{b\ 1285}#)
                                                            (#{key\ 1109}#
                                                              #{b\ 1285}#
                                                              #{req\ 1248}#
                                                              (reverse
                                                                #{ropt\ 1249}#)
                                                              '()))
                                                          #{tmp\ 1277}#)
                                                   ((lambda (#{tmp\ 1286}#)
                                                      (if (if #{tmp\ 1286}#
                                                            (apply (lambda (#{a\ 1289}#
                                                                            #{b\ 1290}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1289}#)
                                                                          #:rest))
                                                                   #{tmp\ 1286}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1293}#
                                                                        #{b\ 1294}#)
                                                                 (#{rest\ 1111}#
                                                                   #{b\ 1294}#
                                                                   #{req\ 1248}#
                                                                   (reverse
                                                                     #{ropt\ 1249}#)
                                                                   '()))
                                                               #{tmp\ 1286}#)
                                                        ((lambda (#{tmp\ 1295}#)
                                                           (if (if #{tmp\ 1295}#
                                                                 (apply (lambda (#{r\ 1297}#)
                                                                          (#{id?\ 367}#
                                                                            #{r\ 1297}#))
                                                                        #{tmp\ 1295}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1299}#)
                                                                      (#{rest\ 1111}#
                                                                        #{r\ 1299}#
                                                                        #{req\ 1248}#
                                                                        (reverse
                                                                          #{ropt\ 1249}#)
                                                                        '()))
                                                                    #{tmp\ 1295}#)
                                                             ((lambda (#{else\ 1301}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid optional argument list"
                                                                  #{orig-args\ 1102}#
                                                                  #{args\ 1247}#))
                                                              #{tmp\ 1253}#)))
                                                         (list #{tmp\ 1253}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1253}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1253}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1253}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1253}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1253}# (quote ()))))
                             #{args\ 1247}#)))
                        (#{req\ 1105}#
                          (lambda (#{args\ 1302}# #{rreq\ 1303}#)
                            ((lambda (#{tmp\ 1306}#)
                               ((lambda (#{tmp\ 1307}#)
                                  (if #{tmp\ 1307}#
                                    (apply (lambda ()
                                             (#{check\ 1113}#
                                               (reverse #{rreq\ 1303}#)
                                               '()
                                               #f
                                               '()))
                                           #{tmp\ 1307}#)
                                    ((lambda (#{tmp\ 1308}#)
                                       (if (if #{tmp\ 1308}#
                                             (apply (lambda (#{a\ 1311}#
                                                             #{b\ 1312}#)
                                                      (#{id?\ 367}#
                                                        #{a\ 1311}#))
                                                    #{tmp\ 1308}#)
                                             #f)
                                         (apply (lambda (#{a\ 1315}#
                                                         #{b\ 1316}#)
                                                  (#{req\ 1105}#
                                                    #{b\ 1316}#
                                                    (cons #{a\ 1315}#
                                                          #{rreq\ 1303}#)))
                                                #{tmp\ 1308}#)
                                         ((lambda (#{tmp\ 1317}#)
                                            (if (if #{tmp\ 1317}#
                                                  (apply (lambda (#{a\ 1320}#
                                                                  #{b\ 1321}#)
                                                           (eq? (syntax->datum
                                                                  #{a\ 1320}#)
                                                                #:optional))
                                                         #{tmp\ 1317}#)
                                                  #f)
                                              (apply (lambda (#{a\ 1324}#
                                                              #{b\ 1325}#)
                                                       (#{opt\ 1107}#
                                                         #{b\ 1325}#
                                                         (reverse
                                                           #{rreq\ 1303}#)
                                                         '()))
                                                     #{tmp\ 1317}#)
                                              ((lambda (#{tmp\ 1326}#)
                                                 (if (if #{tmp\ 1326}#
                                                       (apply (lambda (#{a\ 1329}#
                                                                       #{b\ 1330}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 1329}#)
                                                                     #:key))
                                                              #{tmp\ 1326}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 1333}#
                                                                   #{b\ 1334}#)
                                                            (#{key\ 1109}#
                                                              #{b\ 1334}#
                                                              (reverse
                                                                #{rreq\ 1303}#)
                                                              '()
                                                              '()))
                                                          #{tmp\ 1326}#)
                                                   ((lambda (#{tmp\ 1335}#)
                                                      (if (if #{tmp\ 1335}#
                                                            (apply (lambda (#{a\ 1338}#
                                                                            #{b\ 1339}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 1338}#)
                                                                          #:rest))
                                                                   #{tmp\ 1335}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 1342}#
                                                                        #{b\ 1343}#)
                                                                 (#{rest\ 1111}#
                                                                   #{b\ 1343}#
                                                                   (reverse
                                                                     #{rreq\ 1303}#)
                                                                   '()
                                                                   '()))
                                                               #{tmp\ 1335}#)
                                                        ((lambda (#{tmp\ 1344}#)
                                                           (if (if #{tmp\ 1344}#
                                                                 (apply (lambda (#{r\ 1346}#)
                                                                          (#{id?\ 367}#
                                                                            #{r\ 1346}#))
                                                                        #{tmp\ 1344}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 1348}#)
                                                                      (#{rest\ 1111}#
                                                                        #{r\ 1348}#
                                                                        (reverse
                                                                          #{rreq\ 1303}#)
                                                                        '()
                                                                        '()))
                                                                    #{tmp\ 1344}#)
                                                             ((lambda (#{else\ 1350}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid argument list"
                                                                  #{orig-args\ 1102}#
                                                                  #{args\ 1302}#))
                                                              #{tmp\ 1306}#)))
                                                         (list #{tmp\ 1306}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1306}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1306}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 1306}#
                                            '(any . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 1306}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1306}# (quote ()))))
                             #{args\ 1302}#))))
                 (#{req\ 1105}# #{orig-args\ 1102}# (quote ())))))
           (#{chi-simple-lambda\ 472}#
             (lambda (#{e\ 1351}#
                      #{r\ 1352}#
                      #{w\ 1353}#
                      #{s\ 1354}#
                      #{mod\ 1355}#
                      #{req\ 1356}#
                      #{rest\ 1357}#
                      #{meta\ 1358}#
                      #{body\ 1359}#)
               (let ((#{ids\ 1371}#
                       (if #{rest\ 1357}#
                         (append #{req\ 1356}# (list #{rest\ 1357}#))
                         #{req\ 1356}#)))
                 (let ((#{vars\ 1373}#
                         (map #{gen-var\ 480}# #{ids\ 1371}#)))
                   (let ((#{labels\ 1375}#
                           (#{gen-labels\ 385}# #{ids\ 1371}#)))
                     (#{build-simple-lambda\ 309}#
                       #{s\ 1354}#
                       (map syntax->datum #{req\ 1356}#)
                       (if #{rest\ 1357}#
                         (syntax->datum #{rest\ 1357}#)
                         #f)
                       #{vars\ 1373}#
                       #{meta\ 1358}#
                       (#{chi-body\ 460}#
                         #{body\ 1359}#
                         (#{source-wrap\ 438}#
                           #{e\ 1351}#
                           #{w\ 1353}#
                           #{s\ 1354}#
                           #{mod\ 1355}#)
                         (#{extend-var-env\ 357}#
                           #{labels\ 1375}#
                           #{vars\ 1373}#
                           #{r\ 1352}#)
                         (#{make-binding-wrap\ 414}#
                           #{ids\ 1371}#
                           #{labels\ 1375}#
                           #{w\ 1353}#)
                         #{mod\ 1355}#)))))))
           (#{lambda-formals\ 470}#
             (lambda (#{orig-args\ 1378}#)
               (letrec ((#{check\ 1383}#
                          (lambda (#{req\ 1384}# #{rest\ 1385}#)
                            (if (#{distinct-bound-ids?\ 432}#
                                  (if #{rest\ 1385}#
                                    (cons #{rest\ 1385}# #{req\ 1384}#)
                                    #{req\ 1384}#))
                              (values #{req\ 1384}# #f #{rest\ 1385}# #f)
                              (syntax-violation
                                'lambda
                                "duplicate identifier in argument list"
                                #{orig-args\ 1378}#))))
                        (#{req\ 1381}#
                          (lambda (#{args\ 1391}# #{rreq\ 1392}#)
                            ((lambda (#{tmp\ 1395}#)
                               ((lambda (#{tmp\ 1396}#)
                                  (if #{tmp\ 1396}#
                                    (apply (lambda ()
                                             (#{check\ 1383}#
                                               (reverse #{rreq\ 1392}#)
                                               #f))
                                           #{tmp\ 1396}#)
                                    ((lambda (#{tmp\ 1397}#)
                                       (if (if #{tmp\ 1397}#
                                             (apply (lambda (#{a\ 1400}#
                                                             #{b\ 1401}#)
                                                      (#{id?\ 367}#
                                                        #{a\ 1400}#))
                                                    #{tmp\ 1397}#)
                                             #f)
                                         (apply (lambda (#{a\ 1404}#
                                                         #{b\ 1405}#)
                                                  (#{req\ 1381}#
                                                    #{b\ 1405}#
                                                    (cons #{a\ 1404}#
                                                          #{rreq\ 1392}#)))
                                                #{tmp\ 1397}#)
                                         ((lambda (#{tmp\ 1406}#)
                                            (if (if #{tmp\ 1406}#
                                                  (apply (lambda (#{r\ 1408}#)
                                                           (#{id?\ 367}#
                                                             #{r\ 1408}#))
                                                         #{tmp\ 1406}#)
                                                  #f)
                                              (apply (lambda (#{r\ 1410}#)
                                                       (#{check\ 1383}#
                                                         (reverse
                                                           #{rreq\ 1392}#)
                                                         #{r\ 1410}#))
                                                     #{tmp\ 1406}#)
                                              ((lambda (#{else\ 1412}#)
                                                 (syntax-violation
                                                   'lambda
                                                   "invalid argument list"
                                                   #{orig-args\ 1378}#
                                                   #{args\ 1391}#))
                                               #{tmp\ 1395}#)))
                                          (list #{tmp\ 1395}#))))
                                     ($sc-dispatch
                                       #{tmp\ 1395}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 1395}# (quote ()))))
                             #{args\ 1391}#))))
                 (#{req\ 1381}# #{orig-args\ 1378}# (quote ())))))
           (#{ellipsis?\ 468}#
             (lambda (#{x\ 1413}#)
               (if (#{nonsymbol-id?\ 365}# #{x\ 1413}#)
                 (#{free-id=?\ 426}#
                   #{x\ 1413}#
                   '#(syntax-object
                      ...
                      ((top)
                       #(ribcage () () ())
                       #(ribcage () () ())
                       #(ribcage #(x) #((top)) #("i1414"))
                       #(ribcage
                         (lambda-var-list
                           gen-var
                           strip
                           chi-lambda-case
                           lambda*-formals
                           chi-simple-lambda
                           lambda-formals
                           ellipsis?
                           chi-void
                           eval-local-transformer
                           chi-local-syntax
                           chi-body
                           chi-macro
                           chi-application
                           chi-expr
                           chi
                           chi-top
                           syntax-type
                           chi-when-list
                           chi-install-global
                           chi-top-sequence
                           chi-sequence
                           source-wrap
                           wrap
                           bound-id-member?
                           distinct-bound-ids?
                           valid-bound-ids?
                           bound-id=?
                           free-id=?
                           id-var-name
                           same-marks?
                           join-marks
                           join-wraps
                           smart-append
                           make-binding-wrap
                           extend-ribcage!
                           make-empty-ribcage
                           new-mark
                           anti-mark
                           the-anti-mark
                           top-marked?
                           top-wrap
                           empty-wrap
                           set-ribcage-labels!
                           set-ribcage-marks!
                           set-ribcage-symnames!
                           ribcage-labels
                           ribcage-marks
                           ribcage-symnames
                           ribcage?
                           make-ribcage
                           gen-labels
                           gen-label
                           make-rename
                           rename-marks
                           rename-new
                           rename-old
                           subst-rename?
                           wrap-subst
                           wrap-marks
                           make-wrap
                           id-sym-name&marks
                           id-sym-name
                           id?
                           nonsymbol-id?
                           global-extend
                           lookup
                           macros-only-env
                           extend-var-env
                           extend-env
                           null-env
                           binding-value
                           binding-type
                           make-binding
                           arg-check
                           source-annotation
                           no-source
                           set-syntax-object-module!
                           set-syntax-object-wrap!
                           set-syntax-object-expression!
                           syntax-object-module
                           syntax-object-wrap
                           syntax-object-expression
                           syntax-object?
                           make-syntax-object
                           build-lexical-var
                           build-letrec
                           build-named-let
                           build-let
                           build-sequence
                           build-data
                           build-primref
                           build-lambda-case
                           build-case-lambda
                           build-simple-lambda
                           build-global-definition
                           maybe-name-value!
                           build-global-assignment
                           build-global-reference
                           analyze-variable
                           build-lexical-assignment
                           build-lexical-reference
                           build-dynlet
                           build-conditional
                           build-application
                           build-void
                           decorate-source
                           get-global-definition-hook
                           put-global-definition-hook
                           gensym-hook
                           local-eval-hook
                           top-level-eval-hook
                           fx<
                           fx=
                           fx-
                           fx+
                           make-dynlet
                           make-letrec
                           make-let
                           make-lambda-case
                           make-lambda
                           make-sequence
                           make-application
                           make-conditional
                           make-toplevel-define
                           make-toplevel-set
                           make-toplevel-ref
                           make-module-set
                           make-module-ref
                           make-lexical-set
                           make-lexical-ref
                           make-primitive-ref
                           make-const
                           make-void
                           *mode*)
                         ((top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top))
                         ("i481"
                          "i479"
                          "i477"
                          "i475"
                          "i473"
                          "i471"
                          "i469"
                          "i467"
                          "i465"
                          "i463"
                          "i461"
                          "i459"
                          "i457"
                          "i455"
                          "i453"
                          "i451"
                          "i449"
                          "i447"
                          "i445"
                          "i443"
                          "i441"
                          "i439"
                          "i437"
                          "i435"
                          "i433"
                          "i431"
                          "i429"
                          "i427"
                          "i425"
                          "i423"
                          "i421"
                          "i419"
                          "i417"
                          "i415"
                          "i413"
                          "i411"
                          "i410"
                          "i409"
                          "i407"
                          "i406"
                          "i405"
                          "i404"
                          "i403"
                          "i401"
                          "i399"
                          "i397"
                          "i395"
                          "i393"
                          "i391"
                          "i389"
                          "i387"
                          "i384"
                          "i382"
                          "i381"
                          "i380"
                          "i379"
                          "i378"
                          "i377"
                          "i375"
                          "i373"
                          "i371"
                          "i369"
                          "i368"
                          "i366"
                          "i364"
                          "i362"
                          "i360"
                          "i358"
                          "i356"
                          "i354"
                          "i353"
                          "i351"
                          "i349"
                          "i348"
                          "i347"
                          "i345"
                          "i344"
                          "i342"
                          "i340"
                          "i338"
                          "i336"
                          "i334"
                          "i332"
                          "i330"
                          "i328"
                          "i326"
                          "i324"
                          "i322"
                          "i320"
                          "i318"
                          "i316"
                          "i314"
                          "i312"
                          "i310"
                          "i308"
                          "i306"
                          "i304"
                          "i302"
                          "i300"
                          "i298"
                          "i296"
                          "i294"
                          "i292"
                          "i290"
                          "i288"
                          "i286"
                          "i284"
                          "i282"
                          "i280"
                          "i279"
                          "i277"
                          "i275"
                          "i273"
                          "i271"
                          "i269"
                          "i267"
                          "i265"
                          "i263"
                          "i261"
                          "i259"
                          "i257"
                          "i255"
                          "i253"
                          "i251"
                          "i249"
                          "i247"
                          "i245"
                          "i243"
                          "i241"
                          "i239"
                          "i237"
                          "i235"
                          "i233"
                          "i231"
                          "i228"))
                       #(ribcage
                         (define-structure
                           define-expansion-constructors
                           and-map*)
                         ((top) (top) (top))
                         ("i28" "i27" "i25")))
                      (hygiene guile)))
                 #f)))
           (#{chi-void\ 466}#
             (lambda () (#{build-void\ 287}# #f)))
           (#{eval-local-transformer\ 464}#
             (lambda (#{expanded\ 1418}# #{mod\ 1419}#)
               (let ((#{p\ 1423}#
                       (#{local-eval-hook\ 278}#
                         #{expanded\ 1418}#
                         #{mod\ 1419}#)))
                 (if (procedure? #{p\ 1423}#)
                   (cons #{p\ 1423}# (module-name (current-module)))
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 1423}#)))))
           (#{chi-local-syntax\ 462}#
             (lambda (#{rec?\ 1424}#
                      #{e\ 1425}#
                      #{r\ 1426}#
                      #{w\ 1427}#
                      #{s\ 1428}#
                      #{mod\ 1429}#
                      #{k\ 1430}#)
               ((lambda (#{tmp\ 1438}#)
                  ((lambda (#{tmp\ 1439}#)
                     (if #{tmp\ 1439}#
                       (apply (lambda (#{_\ 1445}#
                                       #{id\ 1446}#
                                       #{val\ 1447}#
                                       #{e1\ 1448}#
                                       #{e2\ 1449}#)
                                (let ((#{ids\ 1451}# #{id\ 1446}#))
                                  (if (not (#{valid-bound-ids?\ 430}#
                                             #{ids\ 1451}#))
                                    (syntax-violation
                                      #f
                                      "duplicate bound keyword"
                                      #{e\ 1425}#)
                                    (let ((#{labels\ 1454}#
                                            (#{gen-labels\ 385}#
                                              #{ids\ 1451}#)))
                                      (let ((#{new-w\ 1456}#
                                              (#{make-binding-wrap\ 414}#
                                                #{ids\ 1451}#
                                                #{labels\ 1454}#
                                                #{w\ 1427}#)))
                                        (#{k\ 1430}#
                                          (cons #{e1\ 1448}# #{e2\ 1449}#)
                                          (#{extend-env\ 355}#
                                            #{labels\ 1454}#
                                            (let ((#{w\ 1460}#
                                                    (if #{rec?\ 1424}#
                                                      #{new-w\ 1456}#
                                                      #{w\ 1427}#))
                                                  (#{trans-r\ 1461}#
                                                    (#{macros-only-env\ 359}#
                                                      #{r\ 1426}#)))
                                              (map (lambda (#{x\ 1462}#)
                                                     (cons 'macro
                                                           (#{eval-local-transformer\ 464}#
                                                             (#{chi\ 452}#
                                                               #{x\ 1462}#
                                                               #{trans-r\ 1461}#
                                                               #{w\ 1460}#
                                                               #{mod\ 1429}#)
                                                             #{mod\ 1429}#)))
                                                   #{val\ 1447}#))
                                            #{r\ 1426}#)
                                          #{new-w\ 1456}#
                                          #{s\ 1428}#
                                          #{mod\ 1429}#))))))
                              #{tmp\ 1439}#)
                       ((lambda (#{_\ 1467}#)
                          (syntax-violation
                            #f
                            "bad local syntax definition"
                            (#{source-wrap\ 438}#
                              #{e\ 1425}#
                              #{w\ 1427}#
                              #{s\ 1428}#
                              #{mod\ 1429}#)))
                        #{tmp\ 1438}#)))
                   ($sc-dispatch
                     #{tmp\ 1438}#
                     '(any #(each (any any)) any . each-any))))
                #{e\ 1425}#)))
           (#{chi-body\ 460}#
             (lambda (#{body\ 1468}#
                      #{outer-form\ 1469}#
                      #{r\ 1470}#
                      #{w\ 1471}#
                      #{mod\ 1472}#)
               (let ((#{r\ 1480}#
                       (cons '("placeholder" placeholder)
                             #{r\ 1470}#)))
                 (let ((#{ribcage\ 1482}#
                         (#{make-ribcage\ 388}#
                           '()
                           '()
                           '())))
                   (let ((#{w\ 1485}#
                           (#{make-wrap\ 372}#
                             (#{wrap-marks\ 374}# #{w\ 1471}#)
                             (cons #{ribcage\ 1482}#
                                   (#{wrap-subst\ 376}# #{w\ 1471}#)))))
                     (letrec ((#{parse\ 1494}#
                                (lambda (#{body\ 1495}#
                                         #{ids\ 1496}#
                                         #{labels\ 1497}#
                                         #{var-ids\ 1498}#
                                         #{vars\ 1499}#
                                         #{vals\ 1500}#
                                         #{bindings\ 1501}#)
                                  (if (null? #{body\ 1495}#)
                                    (syntax-violation
                                      #f
                                      "no expressions in body"
                                      #{outer-form\ 1469}#)
                                    (let ((#{e\ 1506}# (cdar #{body\ 1495}#))
                                          (#{er\ 1507}# (caar #{body\ 1495}#)))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 448}#
                                            #{e\ 1506}#
                                            #{er\ 1507}#
                                            '(())
                                            (#{source-annotation\ 346}#
                                              #{er\ 1507}#)
                                            #{ribcage\ 1482}#
                                            #{mod\ 1472}#
                                            #f))
                                        (lambda (#{type\ 1509}#
                                                 #{value\ 1510}#
                                                 #{e\ 1511}#
                                                 #{w\ 1512}#
                                                 #{s\ 1513}#
                                                 #{mod\ 1514}#)
                                          (if (memv #{type\ 1509}#
                                                    '(define-form))
                                            (let ((#{id\ 1524}#
                                                    (#{wrap\ 436}#
                                                      #{value\ 1510}#
                                                      #{w\ 1512}#
                                                      #{mod\ 1514}#))
                                                  (#{label\ 1525}#
                                                    (#{gen-label\ 383}#)))
                                              (let ((#{var\ 1527}#
                                                      (#{gen-var\ 480}#
                                                        #{id\ 1524}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 412}#
                                                    #{ribcage\ 1482}#
                                                    #{id\ 1524}#
                                                    #{label\ 1525}#)
                                                  (#{parse\ 1494}#
                                                    (cdr #{body\ 1495}#)
                                                    (cons #{id\ 1524}#
                                                          #{ids\ 1496}#)
                                                    (cons #{label\ 1525}#
                                                          #{labels\ 1497}#)
                                                    (cons #{id\ 1524}#
                                                          #{var-ids\ 1498}#)
                                                    (cons #{var\ 1527}#
                                                          #{vars\ 1499}#)
                                                    (cons (cons #{er\ 1507}#
                                                                (#{wrap\ 436}#
                                                                  #{e\ 1511}#
                                                                  #{w\ 1512}#
                                                                  #{mod\ 1514}#))
                                                          #{vals\ 1500}#)
                                                    (cons (cons 'lexical
                                                                #{var\ 1527}#)
                                                          #{bindings\ 1501}#)))))
                                            (if (memv #{type\ 1509}#
                                                      '(define-syntax-form))
                                              (let ((#{id\ 1532}#
                                                      (#{wrap\ 436}#
                                                        #{value\ 1510}#
                                                        #{w\ 1512}#
                                                        #{mod\ 1514}#))
                                                    (#{label\ 1533}#
                                                      (#{gen-label\ 383}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 412}#
                                                    #{ribcage\ 1482}#
                                                    #{id\ 1532}#
                                                    #{label\ 1533}#)
                                                  (#{parse\ 1494}#
                                                    (cdr #{body\ 1495}#)
                                                    (cons #{id\ 1532}#
                                                          #{ids\ 1496}#)
                                                    (cons #{label\ 1533}#
                                                          #{labels\ 1497}#)
                                                    #{var-ids\ 1498}#
                                                    #{vars\ 1499}#
                                                    #{vals\ 1500}#
                                                    (cons (cons 'macro
                                                                (cons #{er\ 1507}#
                                                                      (#{wrap\ 436}#
                                                                        #{e\ 1511}#
                                                                        #{w\ 1512}#
                                                                        #{mod\ 1514}#)))
                                                          #{bindings\ 1501}#))))
                                              (if (memv #{type\ 1509}#
                                                        '(begin-form))
                                                ((lambda (#{tmp\ 1536}#)
                                                   ((lambda (#{tmp\ 1537}#)
                                                      (if #{tmp\ 1537}#
                                                        (apply (lambda (#{_\ 1540}#
                                                                        #{e1\ 1541}#)
                                                                 (#{parse\ 1494}#
                                                                   (letrec ((#{f\ 1544}#
                                                                              (lambda (#{forms\ 1545}#)
                                                                                (if (null? #{forms\ 1545}#)
                                                                                  (cdr #{body\ 1495}#)
                                                                                  (cons (cons #{er\ 1507}#
                                                                                              (#{wrap\ 436}#
                                                                                                (car #{forms\ 1545}#)
                                                                                                #{w\ 1512}#
                                                                                                #{mod\ 1514}#))
                                                                                        (#{f\ 1544}#
                                                                                          (cdr #{forms\ 1545}#)))))))
                                                                     (#{f\ 1544}#
                                                                       #{e1\ 1541}#))
                                                                   #{ids\ 1496}#
                                                                   #{labels\ 1497}#
                                                                   #{var-ids\ 1498}#
                                                                   #{vars\ 1499}#
                                                                   #{vals\ 1500}#
                                                                   #{bindings\ 1501}#))
                                                               #{tmp\ 1537}#)
                                                        (syntax-violation
                                                          #f
                                                          "source expression failed to match any pattern"
                                                          #{tmp\ 1536}#)))
                                                    ($sc-dispatch
                                                      #{tmp\ 1536}#
                                                      '(any . each-any))))
                                                 #{e\ 1511}#)
                                                (if (memv #{type\ 1509}#
                                                          '(local-syntax-form))
                                                  (#{chi-local-syntax\ 462}#
                                                    #{value\ 1510}#
                                                    #{e\ 1511}#
                                                    #{er\ 1507}#
                                                    #{w\ 1512}#
                                                    #{s\ 1513}#
                                                    #{mod\ 1514}#
                                                    (lambda (#{forms\ 1548}#
                                                             #{er\ 1549}#
                                                             #{w\ 1550}#
                                                             #{s\ 1551}#
                                                             #{mod\ 1552}#)
                                                      (#{parse\ 1494}#
                                                        (letrec ((#{f\ 1560}#
                                                                   (lambda (#{forms\ 1561}#)
                                                                     (if (null? #{forms\ 1561}#)
                                                                       (cdr #{body\ 1495}#)
                                                                       (cons (cons #{er\ 1549}#
                                                                                   (#{wrap\ 436}#
                                                                                     (car #{forms\ 1561}#)
                                                                                     #{w\ 1550}#
                                                                                     #{mod\ 1552}#))
                                                                             (#{f\ 1560}#
                                                                               (cdr #{forms\ 1561}#)))))))
                                                          (#{f\ 1560}#
                                                            #{forms\ 1548}#))
                                                        #{ids\ 1496}#
                                                        #{labels\ 1497}#
                                                        #{var-ids\ 1498}#
                                                        #{vars\ 1499}#
                                                        #{vals\ 1500}#
                                                        #{bindings\ 1501}#)))
                                                  (if (null? #{ids\ 1496}#)
                                                    (#{build-sequence\ 319}#
                                                      #f
                                                      (map (lambda (#{x\ 1564}#)
                                                             (#{chi\ 452}#
                                                               (cdr #{x\ 1564}#)
                                                               (car #{x\ 1564}#)
                                                               '(())
                                                               #{mod\ 1514}#))
                                                           (cons (cons #{er\ 1507}#
                                                                       (#{source-wrap\ 438}#
                                                                         #{e\ 1511}#
                                                                         #{w\ 1512}#
                                                                         #{s\ 1513}#
                                                                         #{mod\ 1514}#))
                                                                 (cdr #{body\ 1495}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 430}#
                                                                 #{ids\ 1496}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 1469}#))
                                                      (letrec ((#{loop\ 1571}#
                                                                 (lambda (#{bs\ 1572}#
                                                                          #{er-cache\ 1573}#
                                                                          #{r-cache\ 1574}#)
                                                                   (if (not (null? #{bs\ 1572}#))
                                                                     (let ((#{b\ 1577}#
                                                                             (car #{bs\ 1572}#)))
                                                                       (if (eq? (car #{b\ 1577}#)
                                                                                'macro)
                                                                         (let ((#{er\ 1580}#
                                                                                 (cadr #{b\ 1577}#)))
                                                                           (let ((#{r-cache\ 1582}#
                                                                                   (if (eq? #{er\ 1580}#
                                                                                            #{er-cache\ 1573}#)
                                                                                     #{r-cache\ 1574}#
                                                                                     (#{macros-only-env\ 359}#
                                                                                       #{er\ 1580}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 1577}#
                                                                                 (#{eval-local-transformer\ 464}#
                                                                                   (#{chi\ 452}#
                                                                                     (cddr #{b\ 1577}#)
                                                                                     #{r-cache\ 1582}#
                                                                                     '(())
                                                                                     #{mod\ 1514}#)
                                                                                   #{mod\ 1514}#))
                                                                               (#{loop\ 1571}#
                                                                                 (cdr #{bs\ 1572}#)
                                                                                 #{er\ 1580}#
                                                                                 #{r-cache\ 1582}#))))
                                                                         (#{loop\ 1571}#
                                                                           (cdr #{bs\ 1572}#)
                                                                           #{er-cache\ 1573}#
                                                                           #{r-cache\ 1574}#)))))))
                                                        (#{loop\ 1571}#
                                                          #{bindings\ 1501}#
                                                          #f
                                                          #f))
                                                      (set-cdr!
                                                        #{r\ 1480}#
                                                        (#{extend-env\ 355}#
                                                          #{labels\ 1497}#
                                                          #{bindings\ 1501}#
                                                          (cdr #{r\ 1480}#)))
                                                      (#{build-letrec\ 325}#
                                                        #f
                                                        (map syntax->datum
                                                             #{var-ids\ 1498}#)
                                                        #{vars\ 1499}#
                                                        (map (lambda (#{x\ 1585}#)
                                                               (#{chi\ 452}#
                                                                 (cdr #{x\ 1585}#)
                                                                 (car #{x\ 1585}#)
                                                                 '(())
                                                                 #{mod\ 1514}#))
                                                             #{vals\ 1500}#)
                                                        (#{build-sequence\ 319}#
                                                          #f
                                                          (map (lambda (#{x\ 1589}#)
                                                                 (#{chi\ 452}#
                                                                   (cdr #{x\ 1589}#)
                                                                   (car #{x\ 1589}#)
                                                                   '(())
                                                                   #{mod\ 1514}#))
                                                               (cons (cons #{er\ 1507}#
                                                                           (#{source-wrap\ 438}#
                                                                             #{e\ 1511}#
                                                                             #{w\ 1512}#
                                                                             #{s\ 1513}#
                                                                             #{mod\ 1514}#))
                                                                     (cdr #{body\ 1495}#))))))))))))))))))
                       (#{parse\ 1494}#
                         (map (lambda (#{x\ 1502}#)
                                (cons #{r\ 1480}#
                                      (#{wrap\ 436}#
                                        #{x\ 1502}#
                                        #{w\ 1485}#
                                        #{mod\ 1472}#)))
                              #{body\ 1468}#)
                         '()
                         '()
                         '()
                         '()
                         '()
                         '())))))))
           (#{chi-macro\ 458}#
             (lambda (#{p\ 1592}#
                      #{e\ 1593}#
                      #{r\ 1594}#
                      #{w\ 1595}#
                      #{rib\ 1596}#
                      #{mod\ 1597}#)
               (letrec ((#{rebuild-macro-output\ 1605}#
                          (lambda (#{x\ 1606}# #{m\ 1607}#)
                            (if (pair? #{x\ 1606}#)
                              (cons (#{rebuild-macro-output\ 1605}#
                                      (car #{x\ 1606}#)
                                      #{m\ 1607}#)
                                    (#{rebuild-macro-output\ 1605}#
                                      (cdr #{x\ 1606}#)
                                      #{m\ 1607}#))
                              (if (#{syntax-object?\ 331}# #{x\ 1606}#)
                                (let ((#{w\ 1615}#
                                        (#{syntax-object-wrap\ 335}#
                                          #{x\ 1606}#)))
                                  (let ((#{ms\ 1618}#
                                          (#{wrap-marks\ 374}# #{w\ 1615}#))
                                        (#{s\ 1619}#
                                          (#{wrap-subst\ 376}# #{w\ 1615}#)))
                                    (if (if (pair? #{ms\ 1618}#)
                                          (eq? (car #{ms\ 1618}#) #f)
                                          #f)
                                      (#{make-syntax-object\ 329}#
                                        (#{syntax-object-expression\ 333}#
                                          #{x\ 1606}#)
                                        (#{make-wrap\ 372}#
                                          (cdr #{ms\ 1618}#)
                                          (if #{rib\ 1596}#
                                            (cons #{rib\ 1596}#
                                                  (cdr #{s\ 1619}#))
                                            (cdr #{s\ 1619}#)))
                                        (#{syntax-object-module\ 337}#
                                          #{x\ 1606}#))
                                      (#{make-syntax-object\ 329}#
                                        (#{syntax-object-expression\ 333}#
                                          #{x\ 1606}#)
                                        (#{make-wrap\ 372}#
                                          (cons #{m\ 1607}# #{ms\ 1618}#)
                                          (if #{rib\ 1596}#
                                            (cons #{rib\ 1596}#
                                                  (cons 'shift
                                                        #{s\ 1619}#))
                                            (cons (quote shift) #{s\ 1619}#)))
                                        (cons 'hygiene
                                              (cdr #{p\ 1592}#))))))
                                (if (vector? #{x\ 1606}#)
                                  (let ((#{n\ 1627}#
                                          (vector-length #{x\ 1606}#)))
                                    (let ((#{v\ 1629}#
                                            (make-vector #{n\ 1627}#)))
                                      (letrec ((#{loop\ 1632}#
                                                 (lambda (#{i\ 1633}#)
                                                   (if (#{fx=\ 272}#
                                                         #{i\ 1633}#
                                                         #{n\ 1627}#)
                                                     (begin
                                                       (if #f #f)
                                                       #{v\ 1629}#)
                                                     (begin
                                                       (vector-set!
                                                         #{v\ 1629}#
                                                         #{i\ 1633}#
                                                         (#{rebuild-macro-output\ 1605}#
                                                           (vector-ref
                                                             #{x\ 1606}#
                                                             #{i\ 1633}#)
                                                           #{m\ 1607}#))
                                                       (#{loop\ 1632}#
                                                         (#{fx+\ 268}#
                                                           #{i\ 1633}#
                                                           1)))))))
                                        (#{loop\ 1632}# 0))))
                                  (if (symbol? #{x\ 1606}#)
                                    (syntax-violation
                                      #f
                                      "encountered raw symbol in macro output"
                                      (#{source-wrap\ 438}#
                                        #{e\ 1593}#
                                        #{w\ 1595}#
                                        (#{wrap-subst\ 376}# #{w\ 1595}#)
                                        #{mod\ 1597}#)
                                      #{x\ 1606}#)
                                    #{x\ 1606}#)))))))
                 (#{rebuild-macro-output\ 1605}#
                   ((car #{p\ 1592}#)
                    (#{wrap\ 436}#
                      #{e\ 1593}#
                      (#{anti-mark\ 408}# #{w\ 1595}#)
                      #{mod\ 1597}#))
                   (gensym "m")))))
           (#{chi-application\ 456}#
             (lambda (#{x\ 1640}#
                      #{e\ 1641}#
                      #{r\ 1642}#
                      #{w\ 1643}#
                      #{s\ 1644}#
                      #{mod\ 1645}#)
               ((lambda (#{tmp\ 1652}#)
                  ((lambda (#{tmp\ 1653}#)
                     (if #{tmp\ 1653}#
                       (apply (lambda (#{e0\ 1656}# #{e1\ 1657}#)
                                (#{build-application\ 289}#
                                  #{s\ 1644}#
                                  #{x\ 1640}#
                                  (map (lambda (#{e\ 1658}#)
                                         (#{chi\ 452}#
                                           #{e\ 1658}#
                                           #{r\ 1642}#
                                           #{w\ 1643}#
                                           #{mod\ 1645}#))
                                       #{e1\ 1657}#)))
                              #{tmp\ 1653}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 1652}#)))
                   ($sc-dispatch
                     #{tmp\ 1652}#
                     '(any . each-any))))
                #{e\ 1641}#)))
           (#{chi-expr\ 454}#
             (lambda (#{type\ 1661}#
                      #{value\ 1662}#
                      #{e\ 1663}#
                      #{r\ 1664}#
                      #{w\ 1665}#
                      #{s\ 1666}#
                      #{mod\ 1667}#)
               (if (memv #{type\ 1661}# (quote (lexical)))
                 (#{build-lexical-reference\ 295}#
                   'value
                   #{s\ 1666}#
                   #{e\ 1663}#
                   #{value\ 1662}#)
                 (if (memv #{type\ 1661}# (quote (core core-form)))
                   (#{value\ 1662}#
                     #{e\ 1663}#
                     #{r\ 1664}#
                     #{w\ 1665}#
                     #{s\ 1666}#
                     #{mod\ 1667}#)
                   (if (memv #{type\ 1661}# (quote (module-ref)))
                     (call-with-values
                       (lambda ()
                         (#{value\ 1662}#
                           #{e\ 1663}#
                           #{r\ 1664}#
                           #{w\ 1665}#))
                       (lambda (#{e\ 1678}#
                                #{r\ 1679}#
                                #{w\ 1680}#
                                #{s\ 1681}#
                                #{mod\ 1682}#)
                         (#{chi\ 452}#
                           #{e\ 1678}#
                           #{r\ 1679}#
                           #{w\ 1680}#
                           #{mod\ 1682}#)))
                     (if (memv #{type\ 1661}# (quote (lexical-call)))
                       (#{chi-application\ 456}#
                         (#{build-lexical-reference\ 295}#
                           'fun
                           (#{source-annotation\ 346}# (car #{e\ 1663}#))
                           (car #{e\ 1663}#)
                           #{value\ 1662}#)
                         #{e\ 1663}#
                         #{r\ 1664}#
                         #{w\ 1665}#
                         #{s\ 1666}#
                         #{mod\ 1667}#)
                       (if (memv #{type\ 1661}# (quote (global-call)))
                         (#{chi-application\ 456}#
                           (#{build-global-reference\ 301}#
                             (#{source-annotation\ 346}# (car #{e\ 1663}#))
                             (if (#{syntax-object?\ 331}# #{value\ 1662}#)
                               (#{syntax-object-expression\ 333}#
                                 #{value\ 1662}#)
                               #{value\ 1662}#)
                             (if (#{syntax-object?\ 331}# #{value\ 1662}#)
                               (#{syntax-object-module\ 337}# #{value\ 1662}#)
                               #{mod\ 1667}#))
                           #{e\ 1663}#
                           #{r\ 1664}#
                           #{w\ 1665}#
                           #{s\ 1666}#
                           #{mod\ 1667}#)
                         (if (memv #{type\ 1661}# (quote (constant)))
                           (#{build-data\ 317}#
                             #{s\ 1666}#
                             (#{strip\ 478}#
                               (#{source-wrap\ 438}#
                                 #{e\ 1663}#
                                 #{w\ 1665}#
                                 #{s\ 1666}#
                                 #{mod\ 1667}#)
                               '(())))
                           (if (memv #{type\ 1661}# (quote (global)))
                             (#{build-global-reference\ 301}#
                               #{s\ 1666}#
                               #{value\ 1662}#
                               #{mod\ 1667}#)
                             (if (memv #{type\ 1661}# (quote (call)))
                               (#{chi-application\ 456}#
                                 (#{chi\ 452}#
                                   (car #{e\ 1663}#)
                                   #{r\ 1664}#
                                   #{w\ 1665}#
                                   #{mod\ 1667}#)
                                 #{e\ 1663}#
                                 #{r\ 1664}#
                                 #{w\ 1665}#
                                 #{s\ 1666}#
                                 #{mod\ 1667}#)
                               (if (memv #{type\ 1661}# (quote (begin-form)))
                                 ((lambda (#{tmp\ 1695}#)
                                    ((lambda (#{tmp\ 1696}#)
                                       (if #{tmp\ 1696}#
                                         (apply (lambda (#{_\ 1700}#
                                                         #{e1\ 1701}#
                                                         #{e2\ 1702}#)
                                                  (#{chi-sequence\ 440}#
                                                    (cons #{e1\ 1701}#
                                                          #{e2\ 1702}#)
                                                    #{r\ 1664}#
                                                    #{w\ 1665}#
                                                    #{s\ 1666}#
                                                    #{mod\ 1667}#))
                                                #{tmp\ 1696}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 1695}#)))
                                     ($sc-dispatch
                                       #{tmp\ 1695}#
                                       '(any any . each-any))))
                                  #{e\ 1663}#)
                                 (if (memv #{type\ 1661}#
                                           '(local-syntax-form))
                                   (#{chi-local-syntax\ 462}#
                                     #{value\ 1662}#
                                     #{e\ 1663}#
                                     #{r\ 1664}#
                                     #{w\ 1665}#
                                     #{s\ 1666}#
                                     #{mod\ 1667}#
                                     #{chi-sequence\ 440}#)
                                   (if (memv #{type\ 1661}#
                                             '(eval-when-form))
                                     ((lambda (#{tmp\ 1706}#)
                                        ((lambda (#{tmp\ 1707}#)
                                           (if #{tmp\ 1707}#
                                             (apply (lambda (#{_\ 1712}#
                                                             #{x\ 1713}#
                                                             #{e1\ 1714}#
                                                             #{e2\ 1715}#)
                                                      (let ((#{when-list\ 1717}#
                                                              (#{chi-when-list\ 446}#
                                                                #{e\ 1663}#
                                                                #{x\ 1713}#
                                                                #{w\ 1665}#)))
                                                        (if (memq 'eval
                                                                  #{when-list\ 1717}#)
                                                          (#{chi-sequence\ 440}#
                                                            (cons #{e1\ 1714}#
                                                                  #{e2\ 1715}#)
                                                            #{r\ 1664}#
                                                            #{w\ 1665}#
                                                            #{s\ 1666}#
                                                            #{mod\ 1667}#)
                                                          (#{chi-void\ 466}#))))
                                                    #{tmp\ 1707}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{tmp\ 1706}#)))
                                         ($sc-dispatch
                                           #{tmp\ 1706}#
                                           '(any each-any any . each-any))))
                                      #{e\ 1663}#)
                                     (if (memv #{type\ 1661}#
                                               '(define-form
                                                  define-syntax-form))
                                       (syntax-violation
                                         #f
                                         "definition in expression context"
                                         #{e\ 1663}#
                                         (#{wrap\ 436}#
                                           #{value\ 1662}#
                                           #{w\ 1665}#
                                           #{mod\ 1667}#))
                                       (if (memv #{type\ 1661}#
                                                 '(syntax))
                                         (syntax-violation
                                           #f
                                           "reference to pattern variable outside syntax form"
                                           (#{source-wrap\ 438}#
                                             #{e\ 1663}#
                                             #{w\ 1665}#
                                             #{s\ 1666}#
                                             #{mod\ 1667}#))
                                         (if (memv #{type\ 1661}#
                                                   '(displaced-lexical))
                                           (syntax-violation
                                             #f
                                             "reference to identifier outside its scope"
                                             (#{source-wrap\ 438}#
                                               #{e\ 1663}#
                                               #{w\ 1665}#
                                               #{s\ 1666}#
                                               #{mod\ 1667}#))
                                           (syntax-violation
                                             #f
                                             "unexpected syntax"
                                             (#{source-wrap\ 438}#
                                               #{e\ 1663}#
                                               #{w\ 1665}#
                                               #{s\ 1666}#
                                               #{mod\ 1667}#))))))))))))))))))
           (#{chi\ 452}#
             (lambda (#{e\ 1724}#
                      #{r\ 1725}#
                      #{w\ 1726}#
                      #{mod\ 1727}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 448}#
                     #{e\ 1724}#
                     #{r\ 1725}#
                     #{w\ 1726}#
                     (#{source-annotation\ 346}# #{e\ 1724}#)
                     #f
                     #{mod\ 1727}#
                     #f))
                 (lambda (#{type\ 1732}#
                          #{value\ 1733}#
                          #{e\ 1734}#
                          #{w\ 1735}#
                          #{s\ 1736}#
                          #{mod\ 1737}#)
                   (#{chi-expr\ 454}#
                     #{type\ 1732}#
                     #{value\ 1733}#
                     #{e\ 1734}#
                     #{r\ 1725}#
                     #{w\ 1735}#
                     #{s\ 1736}#
                     #{mod\ 1737}#)))))
           (#{chi-top\ 450}#
             (lambda (#{e\ 1744}#
                      #{r\ 1745}#
                      #{w\ 1746}#
                      #{m\ 1747}#
                      #{esew\ 1748}#
                      #{mod\ 1749}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 448}#
                     #{e\ 1744}#
                     #{r\ 1745}#
                     #{w\ 1746}#
                     (#{source-annotation\ 346}# #{e\ 1744}#)
                     #f
                     #{mod\ 1749}#
                     #f))
                 (lambda (#{type\ 1777}#
                          #{value\ 1778}#
                          #{e\ 1779}#
                          #{w\ 1780}#
                          #{s\ 1781}#
                          #{mod\ 1782}#)
                   (if (memv #{type\ 1777}# (quote (begin-form)))
                     ((lambda (#{tmp\ 1790}#)
                        ((lambda (#{tmp\ 1791}#)
                           (if #{tmp\ 1791}#
                             (apply (lambda (#{_\ 1793}#) (#{chi-void\ 466}#))
                                    #{tmp\ 1791}#)
                             ((lambda (#{tmp\ 1794}#)
                                (if #{tmp\ 1794}#
                                  (apply (lambda (#{_\ 1798}#
                                                  #{e1\ 1799}#
                                                  #{e2\ 1800}#)
                                           (#{chi-top-sequence\ 442}#
                                             (cons #{e1\ 1799}# #{e2\ 1800}#)
                                             #{r\ 1745}#
                                             #{w\ 1780}#
                                             #{s\ 1781}#
                                             #{m\ 1747}#
                                             #{esew\ 1748}#
                                             #{mod\ 1782}#))
                                         #{tmp\ 1794}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 1790}#)))
                              ($sc-dispatch
                                #{tmp\ 1790}#
                                '(any any . each-any)))))
                         ($sc-dispatch #{tmp\ 1790}# (quote (any)))))
                      #{e\ 1779}#)
                     (if (memv #{type\ 1777}# (quote (local-syntax-form)))
                       (#{chi-local-syntax\ 462}#
                         #{value\ 1778}#
                         #{e\ 1779}#
                         #{r\ 1745}#
                         #{w\ 1780}#
                         #{s\ 1781}#
                         #{mod\ 1782}#
                         (lambda (#{body\ 1803}#
                                  #{r\ 1804}#
                                  #{w\ 1805}#
                                  #{s\ 1806}#
                                  #{mod\ 1807}#)
                           (#{chi-top-sequence\ 442}#
                             #{body\ 1803}#
                             #{r\ 1804}#
                             #{w\ 1805}#
                             #{s\ 1806}#
                             #{m\ 1747}#
                             #{esew\ 1748}#
                             #{mod\ 1807}#)))
                       (if (memv #{type\ 1777}# (quote (eval-when-form)))
                         ((lambda (#{tmp\ 1814}#)
                            ((lambda (#{tmp\ 1815}#)
                               (if #{tmp\ 1815}#
                                 (apply (lambda (#{_\ 1820}#
                                                 #{x\ 1821}#
                                                 #{e1\ 1822}#
                                                 #{e2\ 1823}#)
                                          (let ((#{when-list\ 1826}#
                                                  (#{chi-when-list\ 446}#
                                                    #{e\ 1779}#
                                                    #{x\ 1821}#
                                                    #{w\ 1780}#))
                                                (#{body\ 1827}#
                                                  (cons #{e1\ 1822}#
                                                        #{e2\ 1823}#)))
                                            (if (eq? #{m\ 1747}# (quote e))
                                              (if (memq 'eval
                                                        #{when-list\ 1826}#)
                                                (#{chi-top-sequence\ 442}#
                                                  #{body\ 1827}#
                                                  #{r\ 1745}#
                                                  #{w\ 1780}#
                                                  #{s\ 1781}#
                                                  (if (memq 'expand
                                                            #{when-list\ 1826}#)
                                                    'c&e
                                                    'e)
                                                  '(eval)
                                                  #{mod\ 1782}#)
                                                (begin
                                                  (if (memq 'expand
                                                            #{when-list\ 1826}#)
                                                    (#{top-level-eval-hook\ 276}#
                                                      (#{chi-top-sequence\ 442}#
                                                        #{body\ 1827}#
                                                        #{r\ 1745}#
                                                        #{w\ 1780}#
                                                        #{s\ 1781}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1782}#)
                                                      #{mod\ 1782}#))
                                                  (#{chi-void\ 466}#)))
                                              (if (memq 'load
                                                        #{when-list\ 1826}#)
                                                (if (let ((#{t\ 1836}#
                                                            (memq 'compile
                                                                  #{when-list\ 1826}#)))
                                                      (if #{t\ 1836}#
                                                        #{t\ 1836}#
                                                        (let ((#{t\ 1839}#
                                                                (memq 'expand
                                                                      #{when-list\ 1826}#)))
                                                          (if #{t\ 1839}#
                                                            #{t\ 1839}#
                                                            (if (eq? #{m\ 1747}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 1826}#)
                                                              #f)))))
                                                  (#{chi-top-sequence\ 442}#
                                                    #{body\ 1827}#
                                                    #{r\ 1745}#
                                                    #{w\ 1780}#
                                                    #{s\ 1781}#
                                                    'c&e
                                                    '(compile load)
                                                    #{mod\ 1782}#)
                                                  (if (memq #{m\ 1747}#
                                                            '(c c&e))
                                                    (#{chi-top-sequence\ 442}#
                                                      #{body\ 1827}#
                                                      #{r\ 1745}#
                                                      #{w\ 1780}#
                                                      #{s\ 1781}#
                                                      'c
                                                      '(load)
                                                      #{mod\ 1782}#)
                                                    (#{chi-void\ 466}#)))
                                                (if (let ((#{t\ 1847}#
                                                            (memq 'compile
                                                                  #{when-list\ 1826}#)))
                                                      (if #{t\ 1847}#
                                                        #{t\ 1847}#
                                                        (let ((#{t\ 1850}#
                                                                (memq 'expand
                                                                      #{when-list\ 1826}#)))
                                                          (if #{t\ 1850}#
                                                            #{t\ 1850}#
                                                            (if (eq? #{m\ 1747}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 1826}#)
                                                              #f)))))
                                                  (begin
                                                    (#{top-level-eval-hook\ 276}#
                                                      (#{chi-top-sequence\ 442}#
                                                        #{body\ 1827}#
                                                        #{r\ 1745}#
                                                        #{w\ 1780}#
                                                        #{s\ 1781}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 1782}#)
                                                      #{mod\ 1782}#)
                                                    (#{chi-void\ 466}#))
                                                  (#{chi-void\ 466}#))))))
                                        #{tmp\ 1815}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{tmp\ 1814}#)))
                             ($sc-dispatch
                               #{tmp\ 1814}#
                               '(any each-any any . each-any))))
                          #{e\ 1779}#)
                         (if (memv #{type\ 1777}#
                                   '(define-syntax-form))
                           (let ((#{n\ 1858}#
                                   (#{id-var-name\ 424}#
                                     #{value\ 1778}#
                                     #{w\ 1780}#))
                                 (#{r\ 1859}#
                                   (#{macros-only-env\ 359}# #{r\ 1745}#)))
                             (if (memv #{m\ 1747}# (quote (c)))
                               (if (memq (quote compile) #{esew\ 1748}#)
                                 (let ((#{e\ 1862}#
                                         (#{chi-install-global\ 444}#
                                           #{n\ 1858}#
                                           (#{chi\ 452}#
                                             #{e\ 1779}#
                                             #{r\ 1859}#
                                             #{w\ 1780}#
                                             #{mod\ 1782}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 276}#
                                       #{e\ 1862}#
                                       #{mod\ 1782}#)
                                     (if (memq (quote load) #{esew\ 1748}#)
                                       #{e\ 1862}#
                                       (#{chi-void\ 466}#))))
                                 (if (memq (quote load) #{esew\ 1748}#)
                                   (#{chi-install-global\ 444}#
                                     #{n\ 1858}#
                                     (#{chi\ 452}#
                                       #{e\ 1779}#
                                       #{r\ 1859}#
                                       #{w\ 1780}#
                                       #{mod\ 1782}#))
                                   (#{chi-void\ 466}#)))
                               (if (memv #{m\ 1747}# (quote (c&e)))
                                 (let ((#{e\ 1865}#
                                         (#{chi-install-global\ 444}#
                                           #{n\ 1858}#
                                           (#{chi\ 452}#
                                             #{e\ 1779}#
                                             #{r\ 1859}#
                                             #{w\ 1780}#
                                             #{mod\ 1782}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 276}#
                                       #{e\ 1865}#
                                       #{mod\ 1782}#)
                                     #{e\ 1865}#))
                                 (begin
                                   (if (memq (quote eval) #{esew\ 1748}#)
                                     (#{top-level-eval-hook\ 276}#
                                       (#{chi-install-global\ 444}#
                                         #{n\ 1858}#
                                         (#{chi\ 452}#
                                           #{e\ 1779}#
                                           #{r\ 1859}#
                                           #{w\ 1780}#
                                           #{mod\ 1782}#))
                                       #{mod\ 1782}#))
                                   (#{chi-void\ 466}#)))))
                           (if (memv #{type\ 1777}# (quote (define-form)))
                             (let ((#{n\ 1870}#
                                     (#{id-var-name\ 424}#
                                       #{value\ 1778}#
                                       #{w\ 1780}#)))
                               (let ((#{type\ 1872}#
                                       (#{binding-type\ 350}#
                                         (#{lookup\ 361}#
                                           #{n\ 1870}#
                                           #{r\ 1745}#
                                           #{mod\ 1782}#))))
                                 (if (memv #{type\ 1872}#
                                           '(global core macro module-ref))
                                   (begin
                                     (if (if (memq #{m\ 1747}# (quote (c c&e)))
                                           (if (not (module-local-variable
                                                      (current-module)
                                                      #{n\ 1870}#))
                                             (current-module)
                                             #f)
                                           #f)
                                       (let ((#{old\ 1878}#
                                               (module-variable
                                                 (current-module)
                                                 #{n\ 1870}#)))
                                         (module-define!
                                           (current-module)
                                           #{n\ 1870}#
                                           (if (variable? #{old\ 1878}#)
                                             (variable-ref #{old\ 1878}#)
                                             #f))))
                                     (let ((#{x\ 1881}#
                                             (#{build-global-definition\ 307}#
                                               #{s\ 1781}#
                                               #{n\ 1870}#
                                               (#{chi\ 452}#
                                                 #{e\ 1779}#
                                                 #{r\ 1745}#
                                                 #{w\ 1780}#
                                                 #{mod\ 1782}#))))
                                       (begin
                                         (if (eq? #{m\ 1747}# (quote c&e))
                                           (#{top-level-eval-hook\ 276}#
                                             #{x\ 1881}#
                                             #{mod\ 1782}#))
                                         #{x\ 1881}#)))
                                   (if (memv #{type\ 1872}#
                                             '(displaced-lexical))
                                     (syntax-violation
                                       #f
                                       "identifier out of context"
                                       #{e\ 1779}#
                                       (#{wrap\ 436}#
                                         #{value\ 1778}#
                                         #{w\ 1780}#
                                         #{mod\ 1782}#))
                                     (syntax-violation
                                       #f
                                       "cannot define keyword at top level"
                                       #{e\ 1779}#
                                       (#{wrap\ 436}#
                                         #{value\ 1778}#
                                         #{w\ 1780}#
                                         #{mod\ 1782}#))))))
                             (let ((#{x\ 1887}#
                                     (#{chi-expr\ 454}#
                                       #{type\ 1777}#
                                       #{value\ 1778}#
                                       #{e\ 1779}#
                                       #{r\ 1745}#
                                       #{w\ 1780}#
                                       #{s\ 1781}#
                                       #{mod\ 1782}#)))
                               (begin
                                 (if (eq? #{m\ 1747}# (quote c&e))
                                   (#{top-level-eval-hook\ 276}#
                                     #{x\ 1887}#
                                     #{mod\ 1782}#))
                                 #{x\ 1887}#)))))))))))
           (#{syntax-type\ 448}#
             (lambda (#{e\ 1888}#
                      #{r\ 1889}#
                      #{w\ 1890}#
                      #{s\ 1891}#
                      #{rib\ 1892}#
                      #{mod\ 1893}#
                      #{for-car?\ 1894}#)
               (if (symbol? #{e\ 1888}#)
                 (let ((#{n\ 1906}#
                         (#{id-var-name\ 424}# #{e\ 1888}# #{w\ 1890}#)))
                   (let ((#{b\ 1908}#
                           (#{lookup\ 361}#
                             #{n\ 1906}#
                             #{r\ 1889}#
                             #{mod\ 1893}#)))
                     (let ((#{type\ 1910}#
                             (#{binding-type\ 350}# #{b\ 1908}#)))
                       (if (memv #{type\ 1910}# (quote (lexical)))
                         (values
                           #{type\ 1910}#
                           (#{binding-value\ 352}# #{b\ 1908}#)
                           #{e\ 1888}#
                           #{w\ 1890}#
                           #{s\ 1891}#
                           #{mod\ 1893}#)
                         (if (memv #{type\ 1910}# (quote (global)))
                           (values
                             #{type\ 1910}#
                             #{n\ 1906}#
                             #{e\ 1888}#
                             #{w\ 1890}#
                             #{s\ 1891}#
                             #{mod\ 1893}#)
                           (if (memv #{type\ 1910}# (quote (macro)))
                             (if #{for-car?\ 1894}#
                               (values
                                 #{type\ 1910}#
                                 (#{binding-value\ 352}# #{b\ 1908}#)
                                 #{e\ 1888}#
                                 #{w\ 1890}#
                                 #{s\ 1891}#
                                 #{mod\ 1893}#)
                               (#{syntax-type\ 448}#
                                 (#{chi-macro\ 458}#
                                   (#{binding-value\ 352}# #{b\ 1908}#)
                                   #{e\ 1888}#
                                   #{r\ 1889}#
                                   #{w\ 1890}#
                                   #{rib\ 1892}#
                                   #{mod\ 1893}#)
                                 #{r\ 1889}#
                                 '(())
                                 #{s\ 1891}#
                                 #{rib\ 1892}#
                                 #{mod\ 1893}#
                                 #f))
                             (values
                               #{type\ 1910}#
                               (#{binding-value\ 352}# #{b\ 1908}#)
                               #{e\ 1888}#
                               #{w\ 1890}#
                               #{s\ 1891}#
                               #{mod\ 1893}#)))))))
                 (if (pair? #{e\ 1888}#)
                   (let ((#{first\ 1919}# (car #{e\ 1888}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 448}#
                           #{first\ 1919}#
                           #{r\ 1889}#
                           #{w\ 1890}#
                           #{s\ 1891}#
                           #{rib\ 1892}#
                           #{mod\ 1893}#
                           #t))
                       (lambda (#{ftype\ 1920}#
                                #{fval\ 1921}#
                                #{fe\ 1922}#
                                #{fw\ 1923}#
                                #{fs\ 1924}#
                                #{fmod\ 1925}#)
                         (if (memv #{ftype\ 1920}# (quote (lexical)))
                           (values
                             'lexical-call
                             #{fval\ 1921}#
                             #{e\ 1888}#
                             #{w\ 1890}#
                             #{s\ 1891}#
                             #{mod\ 1893}#)
                           (if (memv #{ftype\ 1920}# (quote (global)))
                             (values
                               'global-call
                               (#{make-syntax-object\ 329}#
                                 #{fval\ 1921}#
                                 #{w\ 1890}#
                                 #{fmod\ 1925}#)
                               #{e\ 1888}#
                               #{w\ 1890}#
                               #{s\ 1891}#
                               #{mod\ 1893}#)
                             (if (memv #{ftype\ 1920}# (quote (macro)))
                               (#{syntax-type\ 448}#
                                 (#{chi-macro\ 458}#
                                   #{fval\ 1921}#
                                   #{e\ 1888}#
                                   #{r\ 1889}#
                                   #{w\ 1890}#
                                   #{rib\ 1892}#
                                   #{mod\ 1893}#)
                                 #{r\ 1889}#
                                 '(())
                                 #{s\ 1891}#
                                 #{rib\ 1892}#
                                 #{mod\ 1893}#
                                 #{for-car?\ 1894}#)
                               (if (memv #{ftype\ 1920}# (quote (module-ref)))
                                 (call-with-values
                                   (lambda ()
                                     (#{fval\ 1921}#
                                       #{e\ 1888}#
                                       #{r\ 1889}#
                                       #{w\ 1890}#))
                                   (lambda (#{e\ 1937}#
                                            #{r\ 1938}#
                                            #{w\ 1939}#
                                            #{s\ 1940}#
                                            #{mod\ 1941}#)
                                     (#{syntax-type\ 448}#
                                       #{e\ 1937}#
                                       #{r\ 1938}#
                                       #{w\ 1939}#
                                       #{s\ 1940}#
                                       #{rib\ 1892}#
                                       #{mod\ 1941}#
                                       #{for-car?\ 1894}#)))
                                 (if (memv #{ftype\ 1920}# (quote (core)))
                                   (values
                                     'core-form
                                     #{fval\ 1921}#
                                     #{e\ 1888}#
                                     #{w\ 1890}#
                                     #{s\ 1891}#
                                     #{mod\ 1893}#)
                                   (if (memv #{ftype\ 1920}#
                                             '(local-syntax))
                                     (values
                                       'local-syntax-form
                                       #{fval\ 1921}#
                                       #{e\ 1888}#
                                       #{w\ 1890}#
                                       #{s\ 1891}#
                                       #{mod\ 1893}#)
                                     (if (memv #{ftype\ 1920}# (quote (begin)))
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 1888}#
                                         #{w\ 1890}#
                                         #{s\ 1891}#
                                         #{mod\ 1893}#)
                                       (if (memv #{ftype\ 1920}#
                                                 '(eval-when))
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 1888}#
                                           #{w\ 1890}#
                                           #{s\ 1891}#
                                           #{mod\ 1893}#)
                                         (if (memv #{ftype\ 1920}#
                                                   '(define))
                                           ((lambda (#{tmp\ 1952}#)
                                              ((lambda (#{tmp\ 1953}#)
                                                 (if (if #{tmp\ 1953}#
                                                       (apply (lambda (#{_\ 1957}#
                                                                       #{name\ 1958}#
                                                                       #{val\ 1959}#)
                                                                (#{id?\ 367}#
                                                                  #{name\ 1958}#))
                                                              #{tmp\ 1953}#)
                                                       #f)
                                                   (apply (lambda (#{_\ 1963}#
                                                                   #{name\ 1964}#
                                                                   #{val\ 1965}#)
                                                            (values
                                                              'define-form
                                                              #{name\ 1964}#
                                                              #{val\ 1965}#
                                                              #{w\ 1890}#
                                                              #{s\ 1891}#
                                                              #{mod\ 1893}#))
                                                          #{tmp\ 1953}#)
                                                   ((lambda (#{tmp\ 1966}#)
                                                      (if (if #{tmp\ 1966}#
                                                            (apply (lambda (#{_\ 1972}#
                                                                            #{name\ 1973}#
                                                                            #{args\ 1974}#
                                                                            #{e1\ 1975}#
                                                                            #{e2\ 1976}#)
                                                                     (if (#{id?\ 367}#
                                                                           #{name\ 1973}#)
                                                                       (#{valid-bound-ids?\ 430}#
                                                                         (#{lambda-var-list\ 482}#
                                                                           #{args\ 1974}#))
                                                                       #f))
                                                                   #{tmp\ 1966}#)
                                                            #f)
                                                        (apply (lambda (#{_\ 1984}#
                                                                        #{name\ 1985}#
                                                                        #{args\ 1986}#
                                                                        #{e1\ 1987}#
                                                                        #{e2\ 1988}#)
                                                                 (values
                                                                   'define-form
                                                                   (#{wrap\ 436}#
                                                                     #{name\ 1985}#
                                                                     #{w\ 1890}#
                                                                     #{mod\ 1893}#)
                                                                   (#{decorate-source\ 285}#
                                                                     (cons '#(syntax-object
                                                                              lambda
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(_
                                                                                   name
                                                                                   args
                                                                                   e1
                                                                                   e2)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1979"
                                                                                   "i1980"
                                                                                   "i1981"
                                                                                   "i1982"
                                                                                   "i1983"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(ftype
                                                                                   fval
                                                                                   fe
                                                                                   fw
                                                                                   fs
                                                                                   fmod)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1926"
                                                                                   "i1927"
                                                                                   "i1928"
                                                                                   "i1929"
                                                                                   "i1930"
                                                                                   "i1931"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(first)
                                                                                 #((top))
                                                                                 #("i1918"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(e
                                                                                   r
                                                                                   w
                                                                                   s
                                                                                   rib
                                                                                   mod
                                                                                   for-car?)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i1895"
                                                                                   "i1896"
                                                                                   "i1897"
                                                                                   "i1898"
                                                                                   "i1899"
                                                                                   "i1900"
                                                                                   "i1901"))
                                                                               #(ribcage
                                                                                 (lambda-var-list
                                                                                   gen-var
                                                                                   strip
                                                                                   chi-lambda-case
                                                                                   lambda*-formals
                                                                                   chi-simple-lambda
                                                                                   lambda-formals
                                                                                   ellipsis?
                                                                                   chi-void
                                                                                   eval-local-transformer
                                                                                   chi-local-syntax
                                                                                   chi-body
                                                                                   chi-macro
                                                                                   chi-application
                                                                                   chi-expr
                                                                                   chi
                                                                                   chi-top
                                                                                   syntax-type
                                                                                   chi-when-list
                                                                                   chi-install-global
                                                                                   chi-top-sequence
                                                                                   chi-sequence
                                                                                   source-wrap
                                                                                   wrap
                                                                                   bound-id-member?
                                                                                   distinct-bound-ids?
                                                                                   valid-bound-ids?
                                                                                   bound-id=?
                                                                                   free-id=?
                                                                                   id-var-name
                                                                                   same-marks?
                                                                                   join-marks
                                                                                   join-wraps
                                                                                   smart-append
                                                                                   make-binding-wrap
                                                                                   extend-ribcage!
                                                                                   make-empty-ribcage
                                                                                   new-mark
                                                                                   anti-mark
                                                                                   the-anti-mark
                                                                                   top-marked?
                                                                                   top-wrap
                                                                                   empty-wrap
                                                                                   set-ribcage-labels!
                                                                                   set-ribcage-marks!
                                                                                   set-ribcage-symnames!
                                                                                   ribcage-labels
                                                                                   ribcage-marks
                                                                                   ribcage-symnames
                                                                                   ribcage?
                                                                                   make-ribcage
                                                                                   gen-labels
                                                                                   gen-label
                                                                                   make-rename
                                                                                   rename-marks
                                                                                   rename-new
                                                                                   rename-old
                                                                                   subst-rename?
                                                                                   wrap-subst
                                                                                   wrap-marks
                                                                                   make-wrap
                                                                                   id-sym-name&marks
                                                                                   id-sym-name
                                                                                   id?
                                                                                   nonsymbol-id?
                                                                                   global-extend
                                                                                   lookup
                                                                                   macros-only-env
                                                                                   extend-var-env
                                                                                   extend-env
                                                                                   null-env
                                                                                   binding-value
                                                                                   binding-type
                                                                                   make-binding
                                                                                   arg-check
                                                                                   source-annotation
                                                                                   no-source
                                                                                   set-syntax-object-module!
                                                                                   set-syntax-object-wrap!
                                                                                   set-syntax-object-expression!
                                                                                   syntax-object-module
                                                                                   syntax-object-wrap
                                                                                   syntax-object-expression
                                                                                   syntax-object?
                                                                                   make-syntax-object
                                                                                   build-lexical-var
                                                                                   build-letrec
                                                                                   build-named-let
                                                                                   build-let
                                                                                   build-sequence
                                                                                   build-data
                                                                                   build-primref
                                                                                   build-lambda-case
                                                                                   build-case-lambda
                                                                                   build-simple-lambda
                                                                                   build-global-definition
                                                                                   maybe-name-value!
                                                                                   build-global-assignment
                                                                                   build-global-reference
                                                                                   analyze-variable
                                                                                   build-lexical-assignment
                                                                                   build-lexical-reference
                                                                                   build-dynlet
                                                                                   build-conditional
                                                                                   build-application
                                                                                   build-void
                                                                                   decorate-source
                                                                                   get-global-definition-hook
                                                                                   put-global-definition-hook
                                                                                   gensym-hook
                                                                                   local-eval-hook
                                                                                   top-level-eval-hook
                                                                                   fx<
                                                                                   fx=
                                                                                   fx-
                                                                                   fx+
                                                                                   make-dynlet
                                                                                   make-letrec
                                                                                   make-let
                                                                                   make-lambda-case
                                                                                   make-lambda
                                                                                   make-sequence
                                                                                   make-application
                                                                                   make-conditional
                                                                                   make-toplevel-define
                                                                                   make-toplevel-set
                                                                                   make-toplevel-ref
                                                                                   make-module-set
                                                                                   make-module-ref
                                                                                   make-lexical-set
                                                                                   make-lexical-ref
                                                                                   make-primitive-ref
                                                                                   make-const
                                                                                   make-void
                                                                                   *mode*)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i481"
                                                                                  "i479"
                                                                                  "i477"
                                                                                  "i475"
                                                                                  "i473"
                                                                                  "i471"
                                                                                  "i469"
                                                                                  "i467"
                                                                                  "i465"
                                                                                  "i463"
                                                                                  "i461"
                                                                                  "i459"
                                                                                  "i457"
                                                                                  "i455"
                                                                                  "i453"
                                                                                  "i451"
                                                                                  "i449"
                                                                                  "i447"
                                                                                  "i445"
                                                                                  "i443"
                                                                                  "i441"
                                                                                  "i439"
                                                                                  "i437"
                                                                                  "i435"
                                                                                  "i433"
                                                                                  "i431"
                                                                                  "i429"
                                                                                  "i427"
                                                                                  "i425"
                                                                                  "i423"
                                                                                  "i421"
                                                                                  "i419"
                                                                                  "i417"
                                                                                  "i415"
                                                                                  "i413"
                                                                                  "i411"
                                                                                  "i410"
                                                                                  "i409"
                                                                                  "i407"
                                                                                  "i406"
                                                                                  "i405"
                                                                                  "i404"
                                                                                  "i403"
                                                                                  "i401"
                                                                                  "i399"
                                                                                  "i397"
                                                                                  "i395"
                                                                                  "i393"
                                                                                  "i391"
                                                                                  "i389"
                                                                                  "i387"
                                                                                  "i384"
                                                                                  "i382"
                                                                                  "i381"
                                                                                  "i380"
                                                                                  "i379"
                                                                                  "i378"
                                                                                  "i377"
                                                                                  "i375"
                                                                                  "i373"
                                                                                  "i371"
                                                                                  "i369"
                                                                                  "i368"
                                                                                  "i366"
                                                                                  "i364"
                                                                                  "i362"
                                                                                  "i360"
                                                                                  "i358"
                                                                                  "i356"
                                                                                  "i354"
                                                                                  "i353"
                                                                                  "i351"
                                                                                  "i349"
                                                                                  "i348"
                                                                                  "i347"
                                                                                  "i345"
                                                                                  "i344"
                                                                                  "i342"
                                                                                  "i340"
                                                                                  "i338"
                                                                                  "i336"
                                                                                  "i334"
                                                                                  "i332"
                                                                                  "i330"
                                                                                  "i328"
                                                                                  "i326"
                                                                                  "i324"
                                                                                  "i322"
                                                                                  "i320"
                                                                                  "i318"
                                                                                  "i316"
                                                                                  "i314"
                                                                                  "i312"
                                                                                  "i310"
                                                                                  "i308"
                                                                                  "i306"
                                                                                  "i304"
                                                                                  "i302"
                                                                                  "i300"
                                                                                  "i298"
                                                                                  "i296"
                                                                                  "i294"
                                                                                  "i292"
                                                                                  "i290"
                                                                                  "i288"
                                                                                  "i286"
                                                                                  "i284"
                                                                                  "i282"
                                                                                  "i280"
                                                                                  "i279"
                                                                                  "i277"
                                                                                  "i275"
                                                                                  "i273"
                                                                                  "i271"
                                                                                  "i269"
                                                                                  "i267"
                                                                                  "i265"
                                                                                  "i263"
                                                                                  "i261"
                                                                                  "i259"
                                                                                  "i257"
                                                                                  "i255"
                                                                                  "i253"
                                                                                  "i251"
                                                                                  "i249"
                                                                                  "i247"
                                                                                  "i245"
                                                                                  "i243"
                                                                                  "i241"
                                                                                  "i239"
                                                                                  "i237"
                                                                                  "i235"
                                                                                  "i233"
                                                                                  "i231"
                                                                                  "i228"))
                                                                               #(ribcage
                                                                                 (define-structure
                                                                                   define-expansion-constructors
                                                                                   and-map*)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i28"
                                                                                  "i27"
                                                                                  "i25")))
                                                                              (hygiene
                                                                                guile))
                                                                           (#{wrap\ 436}#
                                                                             (cons #{args\ 1986}#
                                                                                   (cons #{e1\ 1987}#
                                                                                         #{e2\ 1988}#))
                                                                             #{w\ 1890}#
                                                                             #{mod\ 1893}#))
                                                                     #{s\ 1891}#)
                                                                   '(())
                                                                   #{s\ 1891}#
                                                                   #{mod\ 1893}#))
                                                               #{tmp\ 1966}#)
                                                        ((lambda (#{tmp\ 1991}#)
                                                           (if (if #{tmp\ 1991}#
                                                                 (apply (lambda (#{_\ 1994}#
                                                                                 #{name\ 1995}#)
                                                                          (#{id?\ 367}#
                                                                            #{name\ 1995}#))
                                                                        #{tmp\ 1991}#)
                                                                 #f)
                                                             (apply (lambda (#{_\ 1998}#
                                                                             #{name\ 1999}#)
                                                                      (values
                                                                        'define-form
                                                                        (#{wrap\ 436}#
                                                                          #{name\ 1999}#
                                                                          #{w\ 1890}#
                                                                          #{mod\ 1893}#)
                                                                        '(#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1996"
                                                                                 "i1997"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1926"
                                                                                 "i1927"
                                                                                 "i1928"
                                                                                 "i1929"
                                                                                 "i1930"
                                                                                 "i1931"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1918"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1895"
                                                                                 "i1896"
                                                                                 "i1897"
                                                                                 "i1898"
                                                                                 "i1899"
                                                                                 "i1900"
                                                                                 "i1901"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void
                                                                                 *mode*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i481"
                                                                                "i479"
                                                                                "i477"
                                                                                "i475"
                                                                                "i473"
                                                                                "i471"
                                                                                "i469"
                                                                                "i467"
                                                                                "i465"
                                                                                "i463"
                                                                                "i461"
                                                                                "i459"
                                                                                "i457"
                                                                                "i455"
                                                                                "i453"
                                                                                "i451"
                                                                                "i449"
                                                                                "i447"
                                                                                "i445"
                                                                                "i443"
                                                                                "i441"
                                                                                "i439"
                                                                                "i437"
                                                                                "i435"
                                                                                "i433"
                                                                                "i431"
                                                                                "i429"
                                                                                "i427"
                                                                                "i425"
                                                                                "i423"
                                                                                "i421"
                                                                                "i419"
                                                                                "i417"
                                                                                "i415"
                                                                                "i413"
                                                                                "i411"
                                                                                "i410"
                                                                                "i409"
                                                                                "i407"
                                                                                "i406"
                                                                                "i405"
                                                                                "i404"
                                                                                "i403"
                                                                                "i401"
                                                                                "i399"
                                                                                "i397"
                                                                                "i395"
                                                                                "i393"
                                                                                "i391"
                                                                                "i389"
                                                                                "i387"
                                                                                "i384"
                                                                                "i382"
                                                                                "i381"
                                                                                "i380"
                                                                                "i379"
                                                                                "i378"
                                                                                "i377"
                                                                                "i375"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i368"
                                                                                "i366"
                                                                                "i364"
                                                                                "i362"
                                                                                "i360"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i353"
                                                                                "i351"
                                                                                "i349"
                                                                                "i348"
                                                                                "i347"
                                                                                "i345"
                                                                                "i344"
                                                                                "i342"
                                                                                "i340"
                                                                                "i338"
                                                                                "i336"
                                                                                "i334"
                                                                                "i332"
                                                                                "i330"
                                                                                "i328"
                                                                                "i326"
                                                                                "i324"
                                                                                "i322"
                                                                                "i320"
                                                                                "i318"
                                                                                "i316"
                                                                                "i314"
                                                                                "i312"
                                                                                "i310"
                                                                                "i308"
                                                                                "i306"
                                                                                "i304"
                                                                                "i302"
                                                                                "i300"
                                                                                "i298"
                                                                                "i296"
                                                                                "i294"
                                                                                "i292"
                                                                                "i290"
                                                                                "i288"
                                                                                "i286"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i279"
                                                                                "i277"
                                                                                "i275"
                                                                                "i273"
                                                                                "i271"
                                                                                "i269"
                                                                                "i267"
                                                                                "i265"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i228"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top))
                                                                               ("i28"
                                                                                "i27"
                                                                                "i25")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1996"
                                                                                 "i1997"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1926"
                                                                                 "i1927"
                                                                                 "i1928"
                                                                                 "i1929"
                                                                                 "i1930"
                                                                                 "i1931"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1918"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1895"
                                                                                 "i1896"
                                                                                 "i1897"
                                                                                 "i1898"
                                                                                 "i1899"
                                                                                 "i1900"
                                                                                 "i1901"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void
                                                                                 *mode*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i481"
                                                                                "i479"
                                                                                "i477"
                                                                                "i475"
                                                                                "i473"
                                                                                "i471"
                                                                                "i469"
                                                                                "i467"
                                                                                "i465"
                                                                                "i463"
                                                                                "i461"
                                                                                "i459"
                                                                                "i457"
                                                                                "i455"
                                                                                "i453"
                                                                                "i451"
                                                                                "i449"
                                                                                "i447"
                                                                                "i445"
                                                                                "i443"
                                                                                "i441"
                                                                                "i439"
                                                                                "i437"
                                                                                "i435"
                                                                                "i433"
                                                                                "i431"
                                                                                "i429"
                                                                                "i427"
                                                                                "i425"
                                                                                "i423"
                                                                                "i421"
                                                                                "i419"
                                                                                "i417"
                                                                                "i415"
                                                                                "i413"
                                                                                "i411"
                                                                                "i410"
                                                                                "i409"
                                                                                "i407"
                                                                                "i406"
                                                                                "i405"
                                                                                "i404"
                                                                                "i403"
                                                                                "i401"
                                                                                "i399"
                                                                                "i397"
                                                                                "i395"
                                                                                "i393"
                                                                                "i391"
                                                                                "i389"
                                                                                "i387"
                                                                                "i384"
                                                                                "i382"
                                                                                "i381"
                                                                                "i380"
                                                                                "i379"
                                                                                "i378"
                                                                                "i377"
                                                                                "i375"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i368"
                                                                                "i366"
                                                                                "i364"
                                                                                "i362"
                                                                                "i360"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i353"
                                                                                "i351"
                                                                                "i349"
                                                                                "i348"
                                                                                "i347"
                                                                                "i345"
                                                                                "i344"
                                                                                "i342"
                                                                                "i340"
                                                                                "i338"
                                                                                "i336"
                                                                                "i334"
                                                                                "i332"
                                                                                "i330"
                                                                                "i328"
                                                                                "i326"
                                                                                "i324"
                                                                                "i322"
                                                                                "i320"
                                                                                "i318"
                                                                                "i316"
                                                                                "i314"
                                                                                "i312"
                                                                                "i310"
                                                                                "i308"
                                                                                "i306"
                                                                                "i304"
                                                                                "i302"
                                                                                "i300"
                                                                                "i298"
                                                                                "i296"
                                                                                "i294"
                                                                                "i292"
                                                                                "i290"
                                                                                "i288"
                                                                                "i286"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i279"
                                                                                "i277"
                                                                                "i275"
                                                                                "i273"
                                                                                "i271"
                                                                                "i269"
                                                                                "i267"
                                                                                "i265"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i228"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top))
                                                                               ("i28"
                                                                                "i27"
                                                                                "i25")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i1996"
                                                                                 "i1997"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1926"
                                                                                 "i1927"
                                                                                 "i1928"
                                                                                 "i1929"
                                                                                 "i1930"
                                                                                 "i1931"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i1918"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i1895"
                                                                                 "i1896"
                                                                                 "i1897"
                                                                                 "i1898"
                                                                                 "i1899"
                                                                                 "i1900"
                                                                                 "i1901"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void
                                                                                 *mode*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i481"
                                                                                "i479"
                                                                                "i477"
                                                                                "i475"
                                                                                "i473"
                                                                                "i471"
                                                                                "i469"
                                                                                "i467"
                                                                                "i465"
                                                                                "i463"
                                                                                "i461"
                                                                                "i459"
                                                                                "i457"
                                                                                "i455"
                                                                                "i453"
                                                                                "i451"
                                                                                "i449"
                                                                                "i447"
                                                                                "i445"
                                                                                "i443"
                                                                                "i441"
                                                                                "i439"
                                                                                "i437"
                                                                                "i435"
                                                                                "i433"
                                                                                "i431"
                                                                                "i429"
                                                                                "i427"
                                                                                "i425"
                                                                                "i423"
                                                                                "i421"
                                                                                "i419"
                                                                                "i417"
                                                                                "i415"
                                                                                "i413"
                                                                                "i411"
                                                                                "i410"
                                                                                "i409"
                                                                                "i407"
                                                                                "i406"
                                                                                "i405"
                                                                                "i404"
                                                                                "i403"
                                                                                "i401"
                                                                                "i399"
                                                                                "i397"
                                                                                "i395"
                                                                                "i393"
                                                                                "i391"
                                                                                "i389"
                                                                                "i387"
                                                                                "i384"
                                                                                "i382"
                                                                                "i381"
                                                                                "i380"
                                                                                "i379"
                                                                                "i378"
                                                                                "i377"
                                                                                "i375"
                                                                                "i373"
                                                                                "i371"
                                                                                "i369"
                                                                                "i368"
                                                                                "i366"
                                                                                "i364"
                                                                                "i362"
                                                                                "i360"
                                                                                "i358"
                                                                                "i356"
                                                                                "i354"
                                                                                "i353"
                                                                                "i351"
                                                                                "i349"
                                                                                "i348"
                                                                                "i347"
                                                                                "i345"
                                                                                "i344"
                                                                                "i342"
                                                                                "i340"
                                                                                "i338"
                                                                                "i336"
                                                                                "i334"
                                                                                "i332"
                                                                                "i330"
                                                                                "i328"
                                                                                "i326"
                                                                                "i324"
                                                                                "i322"
                                                                                "i320"
                                                                                "i318"
                                                                                "i316"
                                                                                "i314"
                                                                                "i312"
                                                                                "i310"
                                                                                "i308"
                                                                                "i306"
                                                                                "i304"
                                                                                "i302"
                                                                                "i300"
                                                                                "i298"
                                                                                "i296"
                                                                                "i294"
                                                                                "i292"
                                                                                "i290"
                                                                                "i288"
                                                                                "i286"
                                                                                "i284"
                                                                                "i282"
                                                                                "i280"
                                                                                "i279"
                                                                                "i277"
                                                                                "i275"
                                                                                "i273"
                                                                                "i271"
                                                                                "i269"
                                                                                "i267"
                                                                                "i265"
                                                                                "i263"
                                                                                "i261"
                                                                                "i259"
                                                                                "i257"
                                                                                "i255"
                                                                                "i253"
                                                                                "i251"
                                                                                "i249"
                                                                                "i247"
                                                                                "i245"
                                                                                "i243"
                                                                                "i241"
                                                                                "i239"
                                                                                "i237"
                                                                                "i235"
                                                                                "i233"
                                                                                "i231"
                                                                                "i228"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top))
                                                                               ("i28"
                                                                                "i27"
                                                                                "i25")))
                                                                            (hygiene
                                                                              guile)))
                                                                        '(())
                                                                        #{s\ 1891}#
                                                                        #{mod\ 1893}#))
                                                                    #{tmp\ 1991}#)
                                                             (syntax-violation
                                                               #f
                                                               "source expression failed to match any pattern"
                                                               #{tmp\ 1952}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 1952}#
                                                           '(any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 1952}#
                                                      '(any (any . any)
                                                            any
                                                            .
                                                            each-any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 1952}#
                                                 '(any any any))))
                                            #{e\ 1888}#)
                                           (if (memv #{ftype\ 1920}#
                                                     '(define-syntax))
                                             ((lambda (#{tmp\ 2002}#)
                                                ((lambda (#{tmp\ 2003}#)
                                                   (if (if #{tmp\ 2003}#
                                                         (apply (lambda (#{_\ 2007}#
                                                                         #{name\ 2008}#
                                                                         #{val\ 2009}#)
                                                                  (#{id?\ 367}#
                                                                    #{name\ 2008}#))
                                                                #{tmp\ 2003}#)
                                                         #f)
                                                     (apply (lambda (#{_\ 2013}#
                                                                     #{name\ 2014}#
                                                                     #{val\ 2015}#)
                                                              (values
                                                                'define-syntax-form
                                                                #{name\ 2014}#
                                                                #{val\ 2015}#
                                                                #{w\ 1890}#
                                                                #{s\ 1891}#
                                                                #{mod\ 1893}#))
                                                            #{tmp\ 2003}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 2002}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 2002}#
                                                   '(any any any))))
                                              #{e\ 1888}#)
                                             (values
                                               'call
                                               #f
                                               #{e\ 1888}#
                                               #{w\ 1890}#
                                               #{s\ 1891}#
                                               #{mod\ 1893}#))))))))))))))
                   (if (#{syntax-object?\ 331}# #{e\ 1888}#)
                     (#{syntax-type\ 448}#
                       (#{syntax-object-expression\ 333}# #{e\ 1888}#)
                       #{r\ 1889}#
                       (#{join-wraps\ 418}#
                         #{w\ 1890}#
                         (#{syntax-object-wrap\ 335}# #{e\ 1888}#))
                       #{s\ 1891}#
                       #{rib\ 1892}#
                       (let ((#{t\ 2021}#
                               (#{syntax-object-module\ 337}# #{e\ 1888}#)))
                         (if #{t\ 2021}# #{t\ 2021}# #{mod\ 1893}#))
                       #{for-car?\ 1894}#)
                     (if (self-evaluating? #{e\ 1888}#)
                       (values
                         'constant
                         #f
                         #{e\ 1888}#
                         #{w\ 1890}#
                         #{s\ 1891}#
                         #{mod\ 1893}#)
                       (values
                         'other
                         #f
                         #{e\ 1888}#
                         #{w\ 1890}#
                         #{s\ 1891}#
                         #{mod\ 1893}#)))))))
           (#{chi-when-list\ 446}#
             (lambda (#{e\ 2026}# #{when-list\ 2027}# #{w\ 2028}#)
               (letrec ((#{f\ 2035}#
                          (lambda (#{when-list\ 2036}# #{situations\ 2037}#)
                            (if (null? #{when-list\ 2036}#)
                              #{situations\ 2037}#
                              (#{f\ 2035}#
                                (cdr #{when-list\ 2036}#)
                                (cons (let ((#{x\ 2039}#
                                              (car #{when-list\ 2036}#)))
                                        (if (#{free-id=?\ 426}#
                                              #{x\ 2039}#
                                              '#(syntax-object
                                                 compile
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i2038"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i2032" "i2033" "i2034"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i2029" "i2030" "i2031"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      maybe-name-value!
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void
                                                      *mode*)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i481"
                                                     "i479"
                                                     "i477"
                                                     "i475"
                                                     "i473"
                                                     "i471"
                                                     "i469"
                                                     "i467"
                                                     "i465"
                                                     "i463"
                                                     "i461"
                                                     "i459"
                                                     "i457"
                                                     "i455"
                                                     "i453"
                                                     "i451"
                                                     "i449"
                                                     "i447"
                                                     "i445"
                                                     "i443"
                                                     "i441"
                                                     "i439"
                                                     "i437"
                                                     "i435"
                                                     "i433"
                                                     "i431"
                                                     "i429"
                                                     "i427"
                                                     "i425"
                                                     "i423"
                                                     "i421"
                                                     "i419"
                                                     "i417"
                                                     "i415"
                                                     "i413"
                                                     "i411"
                                                     "i410"
                                                     "i409"
                                                     "i407"
                                                     "i406"
                                                     "i405"
                                                     "i404"
                                                     "i403"
                                                     "i401"
                                                     "i399"
                                                     "i397"
                                                     "i395"
                                                     "i393"
                                                     "i391"
                                                     "i389"
                                                     "i387"
                                                     "i384"
                                                     "i382"
                                                     "i381"
                                                     "i380"
                                                     "i379"
                                                     "i378"
                                                     "i377"
                                                     "i375"
                                                     "i373"
                                                     "i371"
                                                     "i369"
                                                     "i368"
                                                     "i366"
                                                     "i364"
                                                     "i362"
                                                     "i360"
                                                     "i358"
                                                     "i356"
                                                     "i354"
                                                     "i353"
                                                     "i351"
                                                     "i349"
                                                     "i348"
                                                     "i347"
                                                     "i345"
                                                     "i344"
                                                     "i342"
                                                     "i340"
                                                     "i338"
                                                     "i336"
                                                     "i334"
                                                     "i332"
                                                     "i330"
                                                     "i328"
                                                     "i326"
                                                     "i324"
                                                     "i322"
                                                     "i320"
                                                     "i318"
                                                     "i316"
                                                     "i314"
                                                     "i312"
                                                     "i310"
                                                     "i308"
                                                     "i306"
                                                     "i304"
                                                     "i302"
                                                     "i300"
                                                     "i298"
                                                     "i296"
                                                     "i294"
                                                     "i292"
                                                     "i290"
                                                     "i288"
                                                     "i286"
                                                     "i284"
                                                     "i282"
                                                     "i280"
                                                     "i279"
                                                     "i277"
                                                     "i275"
                                                     "i273"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i259"
                                                     "i257"
                                                     "i255"
                                                     "i253"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i243"
                                                     "i241"
                                                     "i239"
                                                     "i237"
                                                     "i235"
                                                     "i233"
                                                     "i231"
                                                     "i228"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top))
                                                    ("i28" "i27" "i25")))
                                                 (hygiene guile)))
                                          'compile
                                          (if (#{free-id=?\ 426}#
                                                #{x\ 2039}#
                                                '#(syntax-object
                                                   load
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i2038"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f when-list situations)
                                                      #((top) (top) (top))
                                                      #("i2032"
                                                        "i2033"
                                                        "i2034"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e when-list w)
                                                      #((top) (top) (top))
                                                      #("i2029"
                                                        "i2030"
                                                        "i2031"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void
                                                        *mode*)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i481"
                                                       "i479"
                                                       "i477"
                                                       "i475"
                                                       "i473"
                                                       "i471"
                                                       "i469"
                                                       "i467"
                                                       "i465"
                                                       "i463"
                                                       "i461"
                                                       "i459"
                                                       "i457"
                                                       "i455"
                                                       "i453"
                                                       "i451"
                                                       "i449"
                                                       "i447"
                                                       "i445"
                                                       "i443"
                                                       "i441"
                                                       "i439"
                                                       "i437"
                                                       "i435"
                                                       "i433"
                                                       "i431"
                                                       "i429"
                                                       "i427"
                                                       "i425"
                                                       "i423"
                                                       "i421"
                                                       "i419"
                                                       "i417"
                                                       "i415"
                                                       "i413"
                                                       "i411"
                                                       "i410"
                                                       "i409"
                                                       "i407"
                                                       "i406"
                                                       "i405"
                                                       "i404"
                                                       "i403"
                                                       "i401"
                                                       "i399"
                                                       "i397"
                                                       "i395"
                                                       "i393"
                                                       "i391"
                                                       "i389"
                                                       "i387"
                                                       "i384"
                                                       "i382"
                                                       "i381"
                                                       "i380"
                                                       "i379"
                                                       "i378"
                                                       "i377"
                                                       "i375"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i368"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i360"
                                                       "i358"
                                                       "i356"
                                                       "i354"
                                                       "i353"
                                                       "i351"
                                                       "i349"
                                                       "i348"
                                                       "i347"
                                                       "i345"
                                                       "i344"
                                                       "i342"
                                                       "i340"
                                                       "i338"
                                                       "i336"
                                                       "i334"
                                                       "i332"
                                                       "i330"
                                                       "i328"
                                                       "i326"
                                                       "i324"
                                                       "i322"
                                                       "i320"
                                                       "i318"
                                                       "i316"
                                                       "i314"
                                                       "i312"
                                                       "i310"
                                                       "i308"
                                                       "i306"
                                                       "i304"
                                                       "i302"
                                                       "i300"
                                                       "i298"
                                                       "i296"
                                                       "i294"
                                                       "i292"
                                                       "i290"
                                                       "i288"
                                                       "i286"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i279"
                                                       "i277"
                                                       "i275"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"
                                                       "i237"
                                                       "i235"
                                                       "i233"
                                                       "i231"
                                                       "i228"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top))
                                                      ("i28" "i27" "i25")))
                                                   (hygiene guile)))
                                            'load
                                            (if (#{free-id=?\ 426}#
                                                  #{x\ 2039}#
                                                  '#(syntax-object
                                                     eval
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i2038"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f
                                                          when-list
                                                          situations)
                                                        #((top) (top) (top))
                                                        #("i2032"
                                                          "i2033"
                                                          "i2034"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(e when-list w)
                                                        #((top) (top) (top))
                                                        #("i2029"
                                                          "i2030"
                                                          "i2031"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          chi-lambda-case
                                                          lambda*-formals
                                                          chi-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          chi-void
                                                          eval-local-transformer
                                                          chi-local-syntax
                                                          chi-body
                                                          chi-macro
                                                          chi-application
                                                          chi-expr
                                                          chi
                                                          chi-top
                                                          syntax-type
                                                          chi-when-list
                                                          chi-install-global
                                                          chi-top-sequence
                                                          chi-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          maybe-name-value!
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void
                                                          *mode*)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i481"
                                                         "i479"
                                                         "i477"
                                                         "i475"
                                                         "i473"
                                                         "i471"
                                                         "i469"
                                                         "i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i410"
                                                         "i409"
                                                         "i407"
                                                         "i406"
                                                         "i405"
                                                         "i404"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i397"
                                                         "i395"
                                                         "i393"
                                                         "i391"
                                                         "i389"
                                                         "i387"
                                                         "i384"
                                                         "i382"
                                                         "i381"
                                                         "i380"
                                                         "i379"
                                                         "i378"
                                                         "i377"
                                                         "i375"
                                                         "i373"
                                                         "i371"
                                                         "i369"
                                                         "i368"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i356"
                                                         "i354"
                                                         "i353"
                                                         "i351"
                                                         "i349"
                                                         "i348"
                                                         "i347"
                                                         "i345"
                                                         "i344"
                                                         "i342"
                                                         "i340"
                                                         "i338"
                                                         "i336"
                                                         "i334"
                                                         "i332"
                                                         "i330"
                                                         "i328"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i306"
                                                         "i304"
                                                         "i302"
                                                         "i300"
                                                         "i298"
                                                         "i296"
                                                         "i294"
                                                         "i292"
                                                         "i290"
                                                         "i288"
                                                         "i286"
                                                         "i284"
                                                         "i282"
                                                         "i280"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i259"
                                                         "i257"
                                                         "i255"
                                                         "i253"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i243"
                                                         "i241"
                                                         "i239"
                                                         "i237"
                                                         "i235"
                                                         "i233"
                                                         "i231"
                                                         "i228"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-constructors
                                                          and-map*)
                                                        ((top) (top) (top))
                                                        ("i28" "i27" "i25")))
                                                     (hygiene guile)))
                                              'eval
                                              (if (#{free-id=?\ 426}#
                                                    #{x\ 2039}#
                                                    '#(syntax-object
                                                       expand
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i2038"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f
                                                            when-list
                                                            situations)
                                                          #((top) (top) (top))
                                                          #("i2032"
                                                            "i2033"
                                                            "i2034"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(e when-list w)
                                                          #((top) (top) (top))
                                                          #("i2029"
                                                            "i2030"
                                                            "i2031"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            chi-lambda-case
                                                            lambda*-formals
                                                            chi-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            chi-void
                                                            eval-local-transformer
                                                            chi-local-syntax
                                                            chi-body
                                                            chi-macro
                                                            chi-application
                                                            chi-expr
                                                            chi
                                                            chi-top
                                                            syntax-type
                                                            chi-when-list
                                                            chi-install-global
                                                            chi-top-sequence
                                                            chi-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            maybe-name-value!
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void
                                                            *mode*)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i481"
                                                           "i479"
                                                           "i477"
                                                           "i475"
                                                           "i473"
                                                           "i471"
                                                           "i469"
                                                           "i467"
                                                           "i465"
                                                           "i463"
                                                           "i461"
                                                           "i459"
                                                           "i457"
                                                           "i455"
                                                           "i453"
                                                           "i451"
                                                           "i449"
                                                           "i447"
                                                           "i445"
                                                           "i443"
                                                           "i441"
                                                           "i439"
                                                           "i437"
                                                           "i435"
                                                           "i433"
                                                           "i431"
                                                           "i429"
                                                           "i427"
                                                           "i425"
                                                           "i423"
                                                           "i421"
                                                           "i419"
                                                           "i417"
                                                           "i415"
                                                           "i413"
                                                           "i411"
                                                           "i410"
                                                           "i409"
                                                           "i407"
                                                           "i406"
                                                           "i405"
                                                           "i404"
                                                           "i403"
                                                           "i401"
                                                           "i399"
                                                           "i397"
                                                           "i395"
                                                           "i393"
                                                           "i391"
                                                           "i389"
                                                           "i387"
                                                           "i384"
                                                           "i382"
                                                           "i381"
                                                           "i380"
                                                           "i379"
                                                           "i378"
                                                           "i377"
                                                           "i375"
                                                           "i373"
                                                           "i371"
                                                           "i369"
                                                           "i368"
                                                           "i366"
                                                           "i364"
                                                           "i362"
                                                           "i360"
                                                           "i358"
                                                           "i356"
                                                           "i354"
                                                           "i353"
                                                           "i351"
                                                           "i349"
                                                           "i348"
                                                           "i347"
                                                           "i345"
                                                           "i344"
                                                           "i342"
                                                           "i340"
                                                           "i338"
                                                           "i336"
                                                           "i334"
                                                           "i332"
                                                           "i330"
                                                           "i328"
                                                           "i326"
                                                           "i324"
                                                           "i322"
                                                           "i320"
                                                           "i318"
                                                           "i316"
                                                           "i314"
                                                           "i312"
                                                           "i310"
                                                           "i308"
                                                           "i306"
                                                           "i304"
                                                           "i302"
                                                           "i300"
                                                           "i298"
                                                           "i296"
                                                           "i294"
                                                           "i292"
                                                           "i290"
                                                           "i288"
                                                           "i286"
                                                           "i284"
                                                           "i282"
                                                           "i280"
                                                           "i279"
                                                           "i277"
                                                           "i275"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i259"
                                                           "i257"
                                                           "i255"
                                                           "i253"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i243"
                                                           "i241"
                                                           "i239"
                                                           "i237"
                                                           "i235"
                                                           "i233"
                                                           "i231"
                                                           "i228"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-constructors
                                                            and-map*)
                                                          ((top) (top) (top))
                                                          ("i28" "i27" "i25")))
                                                       (hygiene guile)))
                                                'expand
                                                (syntax-violation
                                                  'eval-when
                                                  "invalid situation"
                                                  #{e\ 2026}#
                                                  (#{wrap\ 436}#
                                                    #{x\ 2039}#
                                                    #{w\ 2028}#
                                                    #f)))))))
                                      #{situations\ 2037}#))))))
                 (#{f\ 2035}# #{when-list\ 2027}# (quote ())))))
           (#{chi-install-global\ 444}#
             (lambda (#{name\ 2049}# #{e\ 2050}#)
               (#{build-global-definition\ 307}#
                 #f
                 #{name\ 2049}#
                 (#{build-application\ 289}#
                   #f
                   (#{build-primref\ 315}#
                     #f
                     'make-syntax-transformer)
                   (list (#{build-data\ 317}# #f #{name\ 2049}#)
                         (#{build-data\ 317}# #f (quote macro))
                         (#{build-application\ 289}#
                           #f
                           (#{build-primref\ 315}# #f (quote cons))
                           (list #{e\ 2050}#
                                 (#{build-application\ 289}#
                                   #f
                                   (#{build-primref\ 315}#
                                     #f
                                     'module-name)
                                   (list (#{build-application\ 289}#
                                           #f
                                           (#{build-primref\ 315}#
                                             #f
                                             'current-module)
                                           '()))))))))))
           (#{chi-top-sequence\ 442}#
             (lambda (#{body\ 2064}#
                      #{r\ 2065}#
                      #{w\ 2066}#
                      #{s\ 2067}#
                      #{m\ 2068}#
                      #{esew\ 2069}#
                      #{mod\ 2070}#)
               (#{build-sequence\ 319}#
                 #{s\ 2067}#
                 (letrec ((#{dobody\ 2086}#
                            (lambda (#{body\ 2087}#
                                     #{r\ 2088}#
                                     #{w\ 2089}#
                                     #{m\ 2090}#
                                     #{esew\ 2091}#
                                     #{mod\ 2092}#
                                     #{out\ 2093}#)
                              (if (null? #{body\ 2087}#)
                                (reverse #{out\ 2093}#)
                                (#{dobody\ 2086}#
                                  (cdr #{body\ 2087}#)
                                  #{r\ 2088}#
                                  #{w\ 2089}#
                                  #{m\ 2090}#
                                  #{esew\ 2091}#
                                  #{mod\ 2092}#
                                  (cons (#{chi-top\ 450}#
                                          (car #{body\ 2087}#)
                                          #{r\ 2088}#
                                          #{w\ 2089}#
                                          #{m\ 2090}#
                                          #{esew\ 2091}#
                                          #{mod\ 2092}#)
                                        #{out\ 2093}#))))))
                   (#{dobody\ 2086}#
                     #{body\ 2064}#
                     #{r\ 2065}#
                     #{w\ 2066}#
                     #{m\ 2068}#
                     #{esew\ 2069}#
                     #{mod\ 2070}#
                     '())))))
           (#{chi-sequence\ 440}#
             (lambda (#{body\ 2094}#
                      #{r\ 2095}#
                      #{w\ 2096}#
                      #{s\ 2097}#
                      #{mod\ 2098}#)
               (#{build-sequence\ 319}#
                 #{s\ 2097}#
                 (letrec ((#{dobody\ 2109}#
                            (lambda (#{body\ 2110}#
                                     #{r\ 2111}#
                                     #{w\ 2112}#
                                     #{mod\ 2113}#)
                              (if (null? #{body\ 2110}#)
                                '()
                                (let ((#{first\ 2115}#
                                        (#{chi\ 452}#
                                          (car #{body\ 2110}#)
                                          #{r\ 2111}#
                                          #{w\ 2112}#
                                          #{mod\ 2113}#)))
                                  (cons #{first\ 2115}#
                                        (#{dobody\ 2109}#
                                          (cdr #{body\ 2110}#)
                                          #{r\ 2111}#
                                          #{w\ 2112}#
                                          #{mod\ 2113}#)))))))
                   (#{dobody\ 2109}#
                     #{body\ 2094}#
                     #{r\ 2095}#
                     #{w\ 2096}#
                     #{mod\ 2098}#)))))
           (#{source-wrap\ 438}#
             (lambda (#{x\ 2116}#
                      #{w\ 2117}#
                      #{s\ 2118}#
                      #{defmod\ 2119}#)
               (#{wrap\ 436}#
                 (#{decorate-source\ 285}#
                   #{x\ 2116}#
                   #{s\ 2118}#)
                 #{w\ 2117}#
                 #{defmod\ 2119}#)))
           (#{wrap\ 436}#
             (lambda (#{x\ 2124}# #{w\ 2125}# #{defmod\ 2126}#)
               (if (if (null? (#{wrap-marks\ 374}# #{w\ 2125}#))
                     (null? (#{wrap-subst\ 376}# #{w\ 2125}#))
                     #f)
                 #{x\ 2124}#
                 (if (#{syntax-object?\ 331}# #{x\ 2124}#)
                   (#{make-syntax-object\ 329}#
                     (#{syntax-object-expression\ 333}# #{x\ 2124}#)
                     (#{join-wraps\ 418}#
                       #{w\ 2125}#
                       (#{syntax-object-wrap\ 335}# #{x\ 2124}#))
                     (#{syntax-object-module\ 337}# #{x\ 2124}#))
                   (if (null? #{x\ 2124}#)
                     #{x\ 2124}#
                     (#{make-syntax-object\ 329}#
                       #{x\ 2124}#
                       #{w\ 2125}#
                       #{defmod\ 2126}#))))))
           (#{bound-id-member?\ 434}#
             (lambda (#{x\ 2139}# #{list\ 2140}#)
               (if (not (null? #{list\ 2140}#))
                 (let ((#{t\ 2147}#
                         (#{bound-id=?\ 428}#
                           #{x\ 2139}#
                           (car #{list\ 2140}#))))
                   (if #{t\ 2147}#
                     #{t\ 2147}#
                     (#{bound-id-member?\ 434}#
                       #{x\ 2139}#
                       (cdr #{list\ 2140}#))))
                 #f)))
           (#{distinct-bound-ids?\ 432}#
             (lambda (#{ids\ 2149}#)
               (letrec ((#{distinct?\ 2153}#
                          (lambda (#{ids\ 2154}#)
                            (let ((#{t\ 2157}# (null? #{ids\ 2154}#)))
                              (if #{t\ 2157}#
                                #{t\ 2157}#
                                (if (not (#{bound-id-member?\ 434}#
                                           (car #{ids\ 2154}#)
                                           (cdr #{ids\ 2154}#)))
                                  (#{distinct?\ 2153}# (cdr #{ids\ 2154}#))
                                  #f))))))
                 (#{distinct?\ 2153}# #{ids\ 2149}#))))
           (#{valid-bound-ids?\ 430}#
             (lambda (#{ids\ 2161}#)
               (if (letrec ((#{all-ids?\ 2166}#
                              (lambda (#{ids\ 2167}#)
                                (let ((#{t\ 2170}# (null? #{ids\ 2167}#)))
                                  (if #{t\ 2170}#
                                    #{t\ 2170}#
                                    (if (#{id?\ 367}# (car #{ids\ 2167}#))
                                      (#{all-ids?\ 2166}# (cdr #{ids\ 2167}#))
                                      #f))))))
                     (#{all-ids?\ 2166}# #{ids\ 2161}#))
                 (#{distinct-bound-ids?\ 432}# #{ids\ 2161}#)
                 #f)))
           (#{bound-id=?\ 428}#
             (lambda (#{i\ 2175}# #{j\ 2176}#)
               (if (if (#{syntax-object?\ 331}# #{i\ 2175}#)
                     (#{syntax-object?\ 331}# #{j\ 2176}#)
                     #f)
                 (if (eq? (#{syntax-object-expression\ 333}# #{i\ 2175}#)
                          (#{syntax-object-expression\ 333}# #{j\ 2176}#))
                   (#{same-marks?\ 422}#
                     (#{wrap-marks\ 374}#
                       (#{syntax-object-wrap\ 335}# #{i\ 2175}#))
                     (#{wrap-marks\ 374}#
                       (#{syntax-object-wrap\ 335}# #{j\ 2176}#)))
                   #f)
                 (eq? #{i\ 2175}# #{j\ 2176}#))))
           (#{free-id=?\ 426}#
             (lambda (#{i\ 2183}# #{j\ 2184}#)
               (if (eq? (let ((#{x\ 2190}# #{i\ 2183}#))
                          (if (#{syntax-object?\ 331}# #{x\ 2190}#)
                            (#{syntax-object-expression\ 333}# #{x\ 2190}#)
                            #{x\ 2190}#))
                        (let ((#{x\ 2193}# #{j\ 2184}#))
                          (if (#{syntax-object?\ 331}# #{x\ 2193}#)
                            (#{syntax-object-expression\ 333}# #{x\ 2193}#)
                            #{x\ 2193}#)))
                 (eq? (#{id-var-name\ 424}# #{i\ 2183}# (quote (())))
                      (#{id-var-name\ 424}# #{j\ 2184}# (quote (()))))
                 #f)))
           (#{id-var-name\ 424}#
             (lambda (#{id\ 2197}# #{w\ 2198}#)
               (letrec ((#{search-vector-rib\ 2207}#
                          (lambda (#{sym\ 2224}#
                                   #{subst\ 2225}#
                                   #{marks\ 2226}#
                                   #{symnames\ 2227}#
                                   #{ribcage\ 2228}#)
                            (let ((#{n\ 2235}#
                                    (vector-length #{symnames\ 2227}#)))
                              (letrec ((#{f\ 2238}#
                                         (lambda (#{i\ 2239}#)
                                           (if (#{fx=\ 272}#
                                                 #{i\ 2239}#
                                                 #{n\ 2235}#)
                                             (#{search\ 2203}#
                                               #{sym\ 2224}#
                                               (cdr #{subst\ 2225}#)
                                               #{marks\ 2226}#)
                                             (if (if (eq? (vector-ref
                                                            #{symnames\ 2227}#
                                                            #{i\ 2239}#)
                                                          #{sym\ 2224}#)
                                                   (#{same-marks?\ 422}#
                                                     #{marks\ 2226}#
                                                     (vector-ref
                                                       (#{ribcage-marks\ 394}#
                                                         #{ribcage\ 2228}#)
                                                       #{i\ 2239}#))
                                                   #f)
                                               (values
                                                 (vector-ref
                                                   (#{ribcage-labels\ 396}#
                                                     #{ribcage\ 2228}#)
                                                   #{i\ 2239}#)
                                                 #{marks\ 2226}#)
                                               (#{f\ 2238}#
                                                 (#{fx+\ 268}#
                                                   #{i\ 2239}#
                                                   1)))))))
                                (#{f\ 2238}# 0)))))
                        (#{search-list-rib\ 2205}#
                          (lambda (#{sym\ 2247}#
                                   #{subst\ 2248}#
                                   #{marks\ 2249}#
                                   #{symnames\ 2250}#
                                   #{ribcage\ 2251}#)
                            (letrec ((#{f\ 2260}#
                                       (lambda (#{symnames\ 2261}# #{i\ 2262}#)
                                         (if (null? #{symnames\ 2261}#)
                                           (#{search\ 2203}#
                                             #{sym\ 2247}#
                                             (cdr #{subst\ 2248}#)
                                             #{marks\ 2249}#)
                                           (if (if (eq? (car #{symnames\ 2261}#)
                                                        #{sym\ 2247}#)
                                                 (#{same-marks?\ 422}#
                                                   #{marks\ 2249}#
                                                   (list-ref
                                                     (#{ribcage-marks\ 394}#
                                                       #{ribcage\ 2251}#)
                                                     #{i\ 2262}#))
                                                 #f)
                                             (values
                                               (list-ref
                                                 (#{ribcage-labels\ 396}#
                                                   #{ribcage\ 2251}#)
                                                 #{i\ 2262}#)
                                               #{marks\ 2249}#)
                                             (#{f\ 2260}#
                                               (cdr #{symnames\ 2261}#)
                                               (#{fx+\ 268}#
                                                 #{i\ 2262}#
                                                 1)))))))
                              (#{f\ 2260}# #{symnames\ 2250}# 0))))
                        (#{search\ 2203}#
                          (lambda (#{sym\ 2270}#
                                   #{subst\ 2271}#
                                   #{marks\ 2272}#)
                            (if (null? #{subst\ 2271}#)
                              (values #f #{marks\ 2272}#)
                              (let ((#{fst\ 2277}# (car #{subst\ 2271}#)))
                                (if (eq? #{fst\ 2277}# (quote shift))
                                  (#{search\ 2203}#
                                    #{sym\ 2270}#
                                    (cdr #{subst\ 2271}#)
                                    (cdr #{marks\ 2272}#))
                                  (let ((#{symnames\ 2279}#
                                          (#{ribcage-symnames\ 392}#
                                            #{fst\ 2277}#)))
                                    (if (vector? #{symnames\ 2279}#)
                                      (#{search-vector-rib\ 2207}#
                                        #{sym\ 2270}#
                                        #{subst\ 2271}#
                                        #{marks\ 2272}#
                                        #{symnames\ 2279}#
                                        #{fst\ 2277}#)
                                      (#{search-list-rib\ 2205}#
                                        #{sym\ 2270}#
                                        #{subst\ 2271}#
                                        #{marks\ 2272}#
                                        #{symnames\ 2279}#
                                        #{fst\ 2277}#)))))))))
                 (if (symbol? #{id\ 2197}#)
                   (let ((#{t\ 2282}#
                           (call-with-values
                             (lambda ()
                               (#{search\ 2203}#
                                 #{id\ 2197}#
                                 (#{wrap-subst\ 376}# #{w\ 2198}#)
                                 (#{wrap-marks\ 374}# #{w\ 2198}#)))
                             (lambda (#{x\ 2284}# . #{ignore\ 2285}#)
                               #{x\ 2284}#))))
                     (if #{t\ 2282}# #{t\ 2282}# #{id\ 2197}#))
                   (if (#{syntax-object?\ 331}# #{id\ 2197}#)
                     (let ((#{id\ 2293}#
                             (#{syntax-object-expression\ 333}# #{id\ 2197}#))
                           (#{w1\ 2294}#
                             (#{syntax-object-wrap\ 335}# #{id\ 2197}#)))
                       (let ((#{marks\ 2296}#
                               (#{join-marks\ 420}#
                                 (#{wrap-marks\ 374}# #{w\ 2198}#)
                                 (#{wrap-marks\ 374}# #{w1\ 2294}#))))
                         (call-with-values
                           (lambda ()
                             (#{search\ 2203}#
                               #{id\ 2293}#
                               (#{wrap-subst\ 376}# #{w\ 2198}#)
                               #{marks\ 2296}#))
                           (lambda (#{new-id\ 2297}# #{marks\ 2298}#)
                             (let ((#{t\ 2303}# #{new-id\ 2297}#))
                               (if #{t\ 2303}#
                                 #{t\ 2303}#
                                 (let ((#{t\ 2306}#
                                         (call-with-values
                                           (lambda ()
                                             (#{search\ 2203}#
                                               #{id\ 2293}#
                                               (#{wrap-subst\ 376}#
                                                 #{w1\ 2294}#)
                                               #{marks\ 2298}#))
                                           (lambda (#{x\ 2308}#
                                                    .
                                                    #{ignore\ 2309}#)
                                             #{x\ 2308}#))))
                                   (if #{t\ 2306}#
                                     #{t\ 2306}#
                                     #{id\ 2293}#))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 2197}#))))))
           (#{same-marks?\ 422}#
             (lambda (#{x\ 2314}# #{y\ 2315}#)
               (let ((#{t\ 2320}# (eq? #{x\ 2314}# #{y\ 2315}#)))
                 (if #{t\ 2320}#
                   #{t\ 2320}#
                   (if (not (null? #{x\ 2314}#))
                     (if (not (null? #{y\ 2315}#))
                       (if (eq? (car #{x\ 2314}#) (car #{y\ 2315}#))
                         (#{same-marks?\ 422}#
                           (cdr #{x\ 2314}#)
                           (cdr #{y\ 2315}#))
                         #f)
                       #f)
                     #f)))))
           (#{join-marks\ 420}#
             (lambda (#{m1\ 2326}# #{m2\ 2327}#)
               (#{smart-append\ 416}# #{m1\ 2326}# #{m2\ 2327}#)))
           (#{join-wraps\ 418}#
             (lambda (#{w1\ 2330}# #{w2\ 2331}#)
               (let ((#{m1\ 2336}# (#{wrap-marks\ 374}# #{w1\ 2330}#))
                     (#{s1\ 2337}# (#{wrap-subst\ 376}# #{w1\ 2330}#)))
                 (if (null? #{m1\ 2336}#)
                   (if (null? #{s1\ 2337}#)
                     #{w2\ 2331}#
                     (#{make-wrap\ 372}#
                       (#{wrap-marks\ 374}# #{w2\ 2331}#)
                       (#{smart-append\ 416}#
                         #{s1\ 2337}#
                         (#{wrap-subst\ 376}# #{w2\ 2331}#))))
                   (#{make-wrap\ 372}#
                     (#{smart-append\ 416}#
                       #{m1\ 2336}#
                       (#{wrap-marks\ 374}# #{w2\ 2331}#))
                     (#{smart-append\ 416}#
                       #{s1\ 2337}#
                       (#{wrap-subst\ 376}# #{w2\ 2331}#)))))))
           (#{smart-append\ 416}#
             (lambda (#{m1\ 2338}# #{m2\ 2339}#)
               (if (null? #{m2\ 2339}#)
                 #{m1\ 2338}#
                 (append #{m1\ 2338}# #{m2\ 2339}#))))
           (#{make-binding-wrap\ 414}#
             (lambda (#{ids\ 2342}# #{labels\ 2343}# #{w\ 2344}#)
               (if (null? #{ids\ 2342}#)
                 #{w\ 2344}#
                 (#{make-wrap\ 372}#
                   (#{wrap-marks\ 374}# #{w\ 2344}#)
                   (cons (let ((#{labelvec\ 2349}#
                                 (list->vector #{labels\ 2343}#)))
                           (let ((#{n\ 2351}#
                                   (vector-length #{labelvec\ 2349}#)))
                             (let ((#{symnamevec\ 2354}#
                                     (make-vector #{n\ 2351}#))
                                   (#{marksvec\ 2355}#
                                     (make-vector #{n\ 2351}#)))
                               (begin
                                 (letrec ((#{f\ 2359}#
                                            (lambda (#{ids\ 2360}# #{i\ 2361}#)
                                              (if (not (null? #{ids\ 2360}#))
                                                (call-with-values
                                                  (lambda ()
                                                    (#{id-sym-name&marks\ 370}#
                                                      (car #{ids\ 2360}#)
                                                      #{w\ 2344}#))
                                                  (lambda (#{symname\ 2362}#
                                                           #{marks\ 2363}#)
                                                    (begin
                                                      (vector-set!
                                                        #{symnamevec\ 2354}#
                                                        #{i\ 2361}#
                                                        #{symname\ 2362}#)
                                                      (vector-set!
                                                        #{marksvec\ 2355}#
                                                        #{i\ 2361}#
                                                        #{marks\ 2363}#)
                                                      (#{f\ 2359}#
                                                        (cdr #{ids\ 2360}#)
                                                        (#{fx+\ 268}#
                                                          #{i\ 2361}#
                                                          1)))))))))
                                   (#{f\ 2359}# #{ids\ 2342}# 0))
                                 (#{make-ribcage\ 388}#
                                   #{symnamevec\ 2354}#
                                   #{marksvec\ 2355}#
                                   #{labelvec\ 2349}#)))))
                         (#{wrap-subst\ 376}# #{w\ 2344}#))))))
           (#{extend-ribcage!\ 412}#
             (lambda (#{ribcage\ 2366}# #{id\ 2367}# #{label\ 2368}#)
               (begin
                 (#{set-ribcage-symnames!\ 398}#
                   #{ribcage\ 2366}#
                   (cons (#{syntax-object-expression\ 333}# #{id\ 2367}#)
                         (#{ribcage-symnames\ 392}# #{ribcage\ 2366}#)))
                 (#{set-ribcage-marks!\ 400}#
                   #{ribcage\ 2366}#
                   (cons (#{wrap-marks\ 374}#
                           (#{syntax-object-wrap\ 335}# #{id\ 2367}#))
                         (#{ribcage-marks\ 394}# #{ribcage\ 2366}#)))
                 (#{set-ribcage-labels!\ 402}#
                   #{ribcage\ 2366}#
                   (cons #{label\ 2368}#
                         (#{ribcage-labels\ 396}# #{ribcage\ 2366}#))))))
           (#{anti-mark\ 408}#
             (lambda (#{w\ 2372}#)
               (#{make-wrap\ 372}#
                 (cons #f (#{wrap-marks\ 374}# #{w\ 2372}#))
                 (cons 'shift
                       (#{wrap-subst\ 376}# #{w\ 2372}#)))))
           (#{set-ribcage-labels!\ 402}#
             (lambda (#{x\ 2375}# #{update\ 2376}#)
               (vector-set! #{x\ 2375}# 3 #{update\ 2376}#)))
           (#{set-ribcage-marks!\ 400}#
             (lambda (#{x\ 2379}# #{update\ 2380}#)
               (vector-set! #{x\ 2379}# 2 #{update\ 2380}#)))
           (#{set-ribcage-symnames!\ 398}#
             (lambda (#{x\ 2383}# #{update\ 2384}#)
               (vector-set! #{x\ 2383}# 1 #{update\ 2384}#)))
           (#{ribcage-labels\ 396}#
             (lambda (#{x\ 2387}#) (vector-ref #{x\ 2387}# 3)))
           (#{ribcage-marks\ 394}#
             (lambda (#{x\ 2389}#) (vector-ref #{x\ 2389}# 2)))
           (#{ribcage-symnames\ 392}#
             (lambda (#{x\ 2391}#) (vector-ref #{x\ 2391}# 1)))
           (#{ribcage?\ 390}#
             (lambda (#{x\ 2393}#)
               (if (vector? #{x\ 2393}#)
                 (if (= (vector-length #{x\ 2393}#) 4)
                   (eq? (vector-ref #{x\ 2393}# 0) (quote ribcage))
                   #f)
                 #f)))
           (#{make-ribcage\ 388}#
             (lambda (#{symnames\ 2398}#
                      #{marks\ 2399}#
                      #{labels\ 2400}#)
               (vector
                 'ribcage
                 #{symnames\ 2398}#
                 #{marks\ 2399}#
                 #{labels\ 2400}#)))
           (#{gen-labels\ 385}#
             (lambda (#{ls\ 2404}#)
               (if (null? #{ls\ 2404}#)
                 '()
                 (cons (#{gen-label\ 383}#)
                       (#{gen-labels\ 385}# (cdr #{ls\ 2404}#))))))
           (#{gen-label\ 383}#
             (lambda () (symbol->string (gensym "i"))))
           (#{wrap-subst\ 376}# cdr)
           (#{wrap-marks\ 374}# car)
           (#{make-wrap\ 372}# cons)
           (#{id-sym-name&marks\ 370}#
             (lambda (#{x\ 2406}# #{w\ 2407}#)
               (if (#{syntax-object?\ 331}# #{x\ 2406}#)
                 (values
                   (#{syntax-object-expression\ 333}# #{x\ 2406}#)
                   (#{join-marks\ 420}#
                     (#{wrap-marks\ 374}# #{w\ 2407}#)
                     (#{wrap-marks\ 374}#
                       (#{syntax-object-wrap\ 335}# #{x\ 2406}#))))
                 (values
                   #{x\ 2406}#
                   (#{wrap-marks\ 374}# #{w\ 2407}#)))))
           (#{id?\ 367}#
             (lambda (#{x\ 2410}#)
               (if (symbol? #{x\ 2410}#)
                 #t
                 (if (#{syntax-object?\ 331}# #{x\ 2410}#)
                   (symbol?
                     (#{syntax-object-expression\ 333}# #{x\ 2410}#))
                   #f))))
           (#{nonsymbol-id?\ 365}#
             (lambda (#{x\ 2417}#)
               (if (#{syntax-object?\ 331}# #{x\ 2417}#)
                 (symbol?
                   (#{syntax-object-expression\ 333}# #{x\ 2417}#))
                 #f)))
           (#{global-extend\ 363}#
             (lambda (#{type\ 2421}# #{sym\ 2422}# #{val\ 2423}#)
               (#{put-global-definition-hook\ 281}#
                 #{sym\ 2422}#
                 #{type\ 2421}#
                 #{val\ 2423}#)))
           (#{lookup\ 361}#
             (lambda (#{x\ 2427}# #{r\ 2428}# #{mod\ 2429}#)
               (let ((#{t\ 2435}# (assq #{x\ 2427}# #{r\ 2428}#)))
                 (if #{t\ 2435}#
                   (cdr #{t\ 2435}#)
                   (if (symbol? #{x\ 2427}#)
                     (let ((#{t\ 2441}#
                             (#{get-global-definition-hook\ 283}#
                               #{x\ 2427}#
                               #{mod\ 2429}#)))
                       (if #{t\ 2441}# #{t\ 2441}# (quote (global))))
                     '(displaced-lexical))))))
           (#{macros-only-env\ 359}#
             (lambda (#{r\ 2446}#)
               (if (null? #{r\ 2446}#)
                 '()
                 (let ((#{a\ 2449}# (car #{r\ 2446}#)))
                   (if (eq? (cadr #{a\ 2449}#) (quote macro))
                     (cons #{a\ 2449}#
                           (#{macros-only-env\ 359}# (cdr #{r\ 2446}#)))
                     (#{macros-only-env\ 359}# (cdr #{r\ 2446}#)))))))
           (#{extend-var-env\ 357}#
             (lambda (#{labels\ 2450}# #{vars\ 2451}# #{r\ 2452}#)
               (if (null? #{labels\ 2450}#)
                 #{r\ 2452}#
                 (#{extend-var-env\ 357}#
                   (cdr #{labels\ 2450}#)
                   (cdr #{vars\ 2451}#)
                   (cons (cons (car #{labels\ 2450}#)
                               (cons (quote lexical) (car #{vars\ 2451}#)))
                         #{r\ 2452}#)))))
           (#{extend-env\ 355}#
             (lambda (#{labels\ 2457}# #{bindings\ 2458}# #{r\ 2459}#)
               (if (null? #{labels\ 2457}#)
                 #{r\ 2459}#
                 (#{extend-env\ 355}#
                   (cdr #{labels\ 2457}#)
                   (cdr #{bindings\ 2458}#)
                   (cons (cons (car #{labels\ 2457}#)
                               (car #{bindings\ 2458}#))
                         #{r\ 2459}#)))))
           (#{binding-value\ 352}# cdr)
           (#{binding-type\ 350}# car)
           (#{source-annotation\ 346}#
             (lambda (#{x\ 2463}#)
               (if (#{syntax-object?\ 331}# #{x\ 2463}#)
                 (#{source-annotation\ 346}#
                   (#{syntax-object-expression\ 333}# #{x\ 2463}#))
                 (if (pair? #{x\ 2463}#)
                   (let ((#{props\ 2470}# (source-properties #{x\ 2463}#)))
                     (if (pair? #{props\ 2470}#) #{props\ 2470}# #f))
                   #f))))
           (#{set-syntax-object-module!\ 343}#
             (lambda (#{x\ 2472}# #{update\ 2473}#)
               (vector-set! #{x\ 2472}# 3 #{update\ 2473}#)))
           (#{set-syntax-object-wrap!\ 341}#
             (lambda (#{x\ 2476}# #{update\ 2477}#)
               (vector-set! #{x\ 2476}# 2 #{update\ 2477}#)))
           (#{set-syntax-object-expression!\ 339}#
             (lambda (#{x\ 2480}# #{update\ 2481}#)
               (vector-set! #{x\ 2480}# 1 #{update\ 2481}#)))
           (#{syntax-object-module\ 337}#
             (lambda (#{x\ 2484}#) (vector-ref #{x\ 2484}# 3)))
           (#{syntax-object-wrap\ 335}#
             (lambda (#{x\ 2486}#) (vector-ref #{x\ 2486}# 2)))
           (#{syntax-object-expression\ 333}#
             (lambda (#{x\ 2488}#) (vector-ref #{x\ 2488}# 1)))
           (#{syntax-object?\ 331}#
             (lambda (#{x\ 2490}#)
               (if (vector? #{x\ 2490}#)
                 (if (= (vector-length #{x\ 2490}#) 4)
                   (eq? (vector-ref #{x\ 2490}# 0)
                        'syntax-object)
                   #f)
                 #f)))
           (#{make-syntax-object\ 329}#
             (lambda (#{expression\ 2495}#
                      #{wrap\ 2496}#
                      #{module\ 2497}#)
               (vector
                 'syntax-object
                 #{expression\ 2495}#
                 #{wrap\ 2496}#
                 #{module\ 2497}#)))
           (#{build-letrec\ 325}#
             (lambda (#{src\ 2501}#
                      #{ids\ 2502}#
                      #{vars\ 2503}#
                      #{val-exps\ 2504}#
                      #{body-exp\ 2505}#)
               (if (null? #{vars\ 2503}#)
                 #{body-exp\ 2505}#
                 (let ((#{atom-key\ 2513}# (fluid-ref #{*mode*\ 229}#)))
                   (if (memv #{atom-key\ 2513}# (quote (c)))
                     (begin
                       (for-each
                         #{maybe-name-value!\ 305}#
                         #{ids\ 2502}#
                         #{val-exps\ 2504}#)
                       (#{make-letrec\ 264}#
                         #{src\ 2501}#
                         #{ids\ 2502}#
                         #{vars\ 2503}#
                         #{val-exps\ 2504}#
                         #{body-exp\ 2505}#))
                     (#{decorate-source\ 285}#
                       (list 'letrec
                             (map list #{vars\ 2503}# #{val-exps\ 2504}#)
                             #{body-exp\ 2505}#)
                       #{src\ 2501}#))))))
           (#{build-named-let\ 323}#
             (lambda (#{src\ 2517}#
                      #{ids\ 2518}#
                      #{vars\ 2519}#
                      #{val-exps\ 2520}#
                      #{body-exp\ 2521}#)
               (let ((#{f\ 2531}# (car #{vars\ 2519}#))
                     (#{f-name\ 2532}# (car #{ids\ 2518}#))
                     (#{vars\ 2533}# (cdr #{vars\ 2519}#))
                     (#{ids\ 2534}# (cdr #{ids\ 2518}#)))
                 (let ((#{atom-key\ 2537}# (fluid-ref #{*mode*\ 229}#)))
                   (if (memv #{atom-key\ 2537}# (quote (c)))
                     (let ((#{proc\ 2540}#
                             (#{build-simple-lambda\ 309}#
                               #{src\ 2517}#
                               #{ids\ 2534}#
                               #f
                               #{vars\ 2533}#
                               '()
                               #{body-exp\ 2521}#)))
                       (begin
                         (#{maybe-name-value!\ 305}#
                           #{f-name\ 2532}#
                           #{proc\ 2540}#)
                         (for-each
                           #{maybe-name-value!\ 305}#
                           #{ids\ 2534}#
                           #{val-exps\ 2520}#)
                         (#{make-letrec\ 264}#
                           #{src\ 2517}#
                           (list #{f-name\ 2532}#)
                           (list #{f\ 2531}#)
                           (list #{proc\ 2540}#)
                           (#{build-application\ 289}#
                             #{src\ 2517}#
                             (#{build-lexical-reference\ 295}#
                               'fun
                               #{src\ 2517}#
                               #{f-name\ 2532}#
                               #{f\ 2531}#)
                             #{val-exps\ 2520}#))))
                     (#{decorate-source\ 285}#
                       (list 'letrec
                             (list (list #{f\ 2531}#
                                         (list 'lambda
                                               #{vars\ 2533}#
                                               #{body-exp\ 2521}#)))
                             (cons #{f\ 2531}# #{val-exps\ 2520}#))
                       #{src\ 2517}#))))))
           (#{build-let\ 321}#
             (lambda (#{src\ 2543}#
                      #{ids\ 2544}#
                      #{vars\ 2545}#
                      #{val-exps\ 2546}#
                      #{body-exp\ 2547}#)
               (if (null? #{vars\ 2545}#)
                 #{body-exp\ 2547}#
                 (let ((#{atom-key\ 2555}# (fluid-ref #{*mode*\ 229}#)))
                   (if (memv #{atom-key\ 2555}# (quote (c)))
                     (begin
                       (for-each
                         #{maybe-name-value!\ 305}#
                         #{ids\ 2544}#
                         #{val-exps\ 2546}#)
                       (#{make-let\ 262}#
                         #{src\ 2543}#
                         #{ids\ 2544}#
                         #{vars\ 2545}#
                         #{val-exps\ 2546}#
                         #{body-exp\ 2547}#))
                     (#{decorate-source\ 285}#
                       (list 'let
                             (map list #{vars\ 2545}# #{val-exps\ 2546}#)
                             #{body-exp\ 2547}#)
                       #{src\ 2543}#))))))
           (#{build-sequence\ 319}#
             (lambda (#{src\ 2559}# #{exps\ 2560}#)
               (if (null? (cdr #{exps\ 2560}#))
                 (car #{exps\ 2560}#)
                 (let ((#{atom-key\ 2565}# (fluid-ref #{*mode*\ 229}#)))
                   (if (memv #{atom-key\ 2565}# (quote (c)))
                     (#{make-sequence\ 256}#
                       #{src\ 2559}#
                       #{exps\ 2560}#)
                     (#{decorate-source\ 285}#
                       (cons (quote begin) #{exps\ 2560}#)
                       #{src\ 2559}#))))))
           (#{build-data\ 317}#
             (lambda (#{src\ 2569}# #{exp\ 2570}#)
               (let ((#{atom-key\ 2575}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2575}# (quote (c)))
                   (#{make-const\ 234}# #{src\ 2569}# #{exp\ 2570}#)
                   (#{decorate-source\ 285}#
                     (if (if (self-evaluating? #{exp\ 2570}#)
                           (not (vector? #{exp\ 2570}#))
                           #f)
                       #{exp\ 2570}#
                       (list (quote quote) #{exp\ 2570}#))
                     #{src\ 2569}#)))))
           (#{build-primref\ 315}#
             (lambda (#{src\ 2580}# #{name\ 2581}#)
               (if (equal?
                     (module-name (current-module))
                     '(guile))
                 (let ((#{atom-key\ 2586}# (fluid-ref #{*mode*\ 229}#)))
                   (if (memv #{atom-key\ 2586}# (quote (c)))
                     (#{make-toplevel-ref\ 246}#
                       #{src\ 2580}#
                       #{name\ 2581}#)
                     (#{decorate-source\ 285}#
                       #{name\ 2581}#
                       #{src\ 2580}#)))
                 (let ((#{atom-key\ 2591}# (fluid-ref #{*mode*\ 229}#)))
                   (if (memv #{atom-key\ 2591}# (quote (c)))
                     (#{make-module-ref\ 242}#
                       #{src\ 2580}#
                       '(guile)
                       #{name\ 2581}#
                       #f)
                     (#{decorate-source\ 285}#
                       (list (quote @@) (quote (guile)) #{name\ 2581}#)
                       #{src\ 2580}#))))))
           (#{build-lambda-case\ 313}#
             (lambda (#{src\ 2595}#
                      #{req\ 2596}#
                      #{opt\ 2597}#
                      #{rest\ 2598}#
                      #{kw\ 2599}#
                      #{inits\ 2600}#
                      #{vars\ 2601}#
                      #{body\ 2602}#
                      #{else-case\ 2603}#)
               (let ((#{atom-key\ 2615}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2615}# (quote (c)))
                   (#{make-lambda-case\ 260}#
                     #{src\ 2595}#
                     #{req\ 2596}#
                     #{opt\ 2597}#
                     #{rest\ 2598}#
                     #{kw\ 2599}#
                     #{inits\ 2600}#
                     #{vars\ 2601}#
                     #{body\ 2602}#
                     #{else-case\ 2603}#)
                   (let ((#{nreq\ 2620}# (length #{req\ 2596}#)))
                     (let ((#{nopt\ 2622}#
                             (if #{opt\ 2597}# (length #{opt\ 2597}#) 0)))
                       (let ((#{rest-idx\ 2624}#
                               (if #{rest\ 2598}#
                                 (+ #{nreq\ 2620}# #{nopt\ 2622}#)
                                 #f)))
                         (let ((#{allow-other-keys?\ 2628}#
                                 (if #{kw\ 2599}# (car #{kw\ 2599}#) #f)))
                           (let ((#{kw-indices\ 2630}#
                                   (map (lambda (#{x\ 2631}#)
                                          (cons (car #{x\ 2631}#)
                                                (list-index
                                                  #{vars\ 2601}#
                                                  (caddr #{x\ 2631}#))))
                                        (if #{kw\ 2599}#
                                          (cdr #{kw\ 2599}#)
                                          '()))))
                             (let ((#{nargs\ 2634}#
                                     (apply max
                                            (+ #{nreq\ 2620}#
                                               #{nopt\ 2622}#
                                               (if #{rest\ 2598}# 1 0))
                                            (map 1+
                                                 (map cdr
                                                      #{kw-indices\ 2630}#)))))
                               (begin
                                 (let ((#{t\ 2637}#
                                         (= #{nargs\ 2634}#
                                            (length #{vars\ 2601}#)
                                            (+ #{nreq\ 2620}#
                                               (length #{inits\ 2600}#)
                                               (if #{rest\ 2598}# 1 0)))))
                                   (if #{t\ 2637}#
                                     #{t\ 2637}#
                                     (error "something went wrong"
                                            #{req\ 2596}#
                                            #{opt\ 2597}#
                                            #{rest\ 2598}#
                                            #{kw\ 2599}#
                                            #{inits\ 2600}#
                                            #{vars\ 2601}#
                                            #{nreq\ 2620}#
                                            #{nopt\ 2622}#
                                            #{kw-indices\ 2630}#
                                            #{nargs\ 2634}#)))
                                 (#{decorate-source\ 285}#
                                   (cons (list (append
                                                 (list-head
                                                   #{vars\ 2601}#
                                                   #{nreq\ 2620}#)
                                                 (append
                                                   (if #{opt\ 2597}#
                                                     (cons #:optional
                                                           (map list
                                                                (list-head
                                                                  (list-tail
                                                                    #{vars\ 2601}#
                                                                    #{nreq\ 2620}#)
                                                                  #{nopt\ 2622}#)
                                                                (list-head
                                                                  #{inits\ 2600}#
                                                                  #{nopt\ 2622}#)))
                                                     '())
                                                   (append
                                                     (if #{kw\ 2599}#
                                                       (cons #:key
                                                             (map (lambda (#{x\ 2642}#
                                                                           #{init\ 2643}#)
                                                                    (list (caddr #{x\ 2642}#)
                                                                          #{init\ 2643}#
                                                                          (car #{x\ 2642}#)))
                                                                  (cdr #{kw\ 2599}#)
                                                                  (list-tail
                                                                    #{inits\ 2600}#
                                                                    #{nopt\ 2622}#)))
                                                       '())
                                                     (append
                                                       (if #{allow-other-keys?\ 2628}#
                                                         '(#:allow-other-keys)
                                                         '())
                                                       (if #{rest\ 2598}#
                                                         (list-ref
                                                           #{vars\ 2601}#
                                                           #{rest-idx\ 2624}#)
                                                         '())))))
                                               #{body\ 2602}#)
                                         (let ((#{t\ 2648}#
                                                 #{else-case\ 2603}#))
                                           (if #{t\ 2648}#
                                             #{t\ 2648}#
                                             '())))
                                   #{src\ 2595}#))))))))))))
           (#{build-case-lambda\ 311}#
             (lambda (#{src\ 2650}# #{meta\ 2651}# #{body\ 2652}#)
               (let ((#{atom-key\ 2658}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2658}# (quote (c)))
                   (#{make-lambda\ 258}#
                     #{src\ 2650}#
                     #{meta\ 2651}#
                     #{body\ 2652}#)
                   (#{decorate-source\ 285}#
                     (cons (quote case-lambda*) #{body\ 2652}#)
                     #{src\ 2650}#)))))
           (#{build-simple-lambda\ 309}#
             (lambda (#{src\ 2662}#
                      #{req\ 2663}#
                      #{rest\ 2664}#
                      #{vars\ 2665}#
                      #{meta\ 2666}#
                      #{exp\ 2667}#)
               (let ((#{atom-key\ 2676}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2676}# (quote (c)))
                   (#{make-lambda\ 258}#
                     #{src\ 2662}#
                     #{meta\ 2666}#
                     (#{make-lambda-case\ 260}#
                       #{src\ 2662}#
                       #{req\ 2663}#
                       #f
                       #{rest\ 2664}#
                       #f
                       '()
                       #{vars\ 2665}#
                       #{exp\ 2667}#
                       #f))
                   (#{decorate-source\ 285}#
                     (list 'lambda
                           (if #{rest\ 2664}#
                             (apply cons* #{vars\ 2665}#)
                             #{vars\ 2665}#)
                           #{exp\ 2667}#)
                     #{src\ 2662}#)))))
           (#{build-global-definition\ 307}#
             (lambda (#{source\ 2680}# #{var\ 2681}# #{exp\ 2682}#)
               (let ((#{atom-key\ 2688}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2688}# (quote (c)))
                   (begin
                     (#{maybe-name-value!\ 305}#
                       #{var\ 2681}#
                       #{exp\ 2682}#)
                     (#{make-toplevel-define\ 250}#
                       #{source\ 2680}#
                       #{var\ 2681}#
                       #{exp\ 2682}#))
                   (#{decorate-source\ 285}#
                     (list (quote define) #{var\ 2681}# #{exp\ 2682}#)
                     #{source\ 2680}#)))))
           (#{maybe-name-value!\ 305}#
             (lambda (#{name\ 2692}# #{val\ 2693}#)
               (if ((@ (language tree-il) lambda?) #{val\ 2693}#)
                 (let ((#{meta\ 2699}#
                         ((@ (language tree-il) lambda-meta)
                          #{val\ 2693}#)))
                   (if (not (assq (quote name) #{meta\ 2699}#))
                     ((setter (@ (language tree-il) lambda-meta))
                      #{val\ 2693}#
                      (acons 'name
                             #{name\ 2692}#
                             #{meta\ 2699}#)))))))
           (#{build-global-assignment\ 303}#
             (lambda (#{source\ 2700}#
                      #{var\ 2701}#
                      #{exp\ 2702}#
                      #{mod\ 2703}#)
               (#{analyze-variable\ 299}#
                 #{mod\ 2703}#
                 #{var\ 2701}#
                 (lambda (#{mod\ 2708}# #{var\ 2709}# #{public?\ 2710}#)
                   (let ((#{atom-key\ 2716}# (fluid-ref #{*mode*\ 229}#)))
                     (if (memv #{atom-key\ 2716}# (quote (c)))
                       (#{make-module-set\ 244}#
                         #{source\ 2700}#
                         #{mod\ 2708}#
                         #{var\ 2709}#
                         #{public?\ 2710}#
                         #{exp\ 2702}#)
                       (#{decorate-source\ 285}#
                         (list 'set!
                               (list (if #{public?\ 2710}#
                                       '@
                                       '@@)
                                     #{mod\ 2708}#
                                     #{var\ 2709}#)
                               #{exp\ 2702}#)
                         #{source\ 2700}#))))
                 (lambda (#{var\ 2720}#)
                   (let ((#{atom-key\ 2724}# (fluid-ref #{*mode*\ 229}#)))
                     (if (memv #{atom-key\ 2724}# (quote (c)))
                       (#{make-toplevel-set\ 248}#
                         #{source\ 2700}#
                         #{var\ 2720}#
                         #{exp\ 2702}#)
                       (#{decorate-source\ 285}#
                         (list (quote set!) #{var\ 2720}# #{exp\ 2702}#)
                         #{source\ 2700}#)))))))
           (#{build-global-reference\ 301}#
             (lambda (#{source\ 2728}# #{var\ 2729}# #{mod\ 2730}#)
               (#{analyze-variable\ 299}#
                 #{mod\ 2730}#
                 #{var\ 2729}#
                 (lambda (#{mod\ 2734}# #{var\ 2735}# #{public?\ 2736}#)
                   (let ((#{atom-key\ 2742}# (fluid-ref #{*mode*\ 229}#)))
                     (if (memv #{atom-key\ 2742}# (quote (c)))
                       (#{make-module-ref\ 242}#
                         #{source\ 2728}#
                         #{mod\ 2734}#
                         #{var\ 2735}#
                         #{public?\ 2736}#)
                       (#{decorate-source\ 285}#
                         (list (if #{public?\ 2736}# (quote @) (quote @@))
                               #{mod\ 2734}#
                               #{var\ 2735}#)
                         #{source\ 2728}#))))
                 (lambda (#{var\ 2745}#)
                   (let ((#{atom-key\ 2749}# (fluid-ref #{*mode*\ 229}#)))
                     (if (memv #{atom-key\ 2749}# (quote (c)))
                       (#{make-toplevel-ref\ 246}#
                         #{source\ 2728}#
                         #{var\ 2745}#)
                       (#{decorate-source\ 285}#
                         #{var\ 2745}#
                         #{source\ 2728}#)))))))
           (#{analyze-variable\ 299}#
             (lambda (#{mod\ 2752}#
                      #{var\ 2753}#
                      #{modref-cont\ 2754}#
                      #{bare-cont\ 2755}#)
               (if (not #{mod\ 2752}#)
                 (#{bare-cont\ 2755}# #{var\ 2753}#)
                 (let ((#{kind\ 2762}# (car #{mod\ 2752}#))
                       (#{mod\ 2763}# (cdr #{mod\ 2752}#)))
                   (if (memv #{kind\ 2762}# (quote (public)))
                     (#{modref-cont\ 2754}#
                       #{mod\ 2763}#
                       #{var\ 2753}#
                       #t)
                     (if (memv #{kind\ 2762}# (quote (private)))
                       (if (not (equal?
                                  #{mod\ 2763}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 2754}#
                           #{mod\ 2763}#
                           #{var\ 2753}#
                           #f)
                         (#{bare-cont\ 2755}# #{var\ 2753}#))
                       (if (memv #{kind\ 2762}# (quote (bare)))
                         (#{bare-cont\ 2755}# #{var\ 2753}#)
                         (if (memv #{kind\ 2762}# (quote (hygiene)))
                           (if (if (not (equal?
                                          #{mod\ 2763}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 2763}#)
                                   #{var\ 2753}#)
                                 #f)
                             (#{modref-cont\ 2754}#
                               #{mod\ 2763}#
                               #{var\ 2753}#
                               #f)
                             (#{bare-cont\ 2755}# #{var\ 2753}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 2753}#
                             #{mod\ 2763}#)))))))))
           (#{build-lexical-assignment\ 297}#
             (lambda (#{source\ 2771}#
                      #{name\ 2772}#
                      #{var\ 2773}#
                      #{exp\ 2774}#)
               (let ((#{atom-key\ 2781}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2781}# (quote (c)))
                   (#{make-lexical-set\ 240}#
                     #{source\ 2771}#
                     #{name\ 2772}#
                     #{var\ 2773}#
                     #{exp\ 2774}#)
                   (#{decorate-source\ 285}#
                     (list (quote set!) #{var\ 2773}# #{exp\ 2774}#)
                     #{source\ 2771}#)))))
           (#{build-lexical-reference\ 295}#
             (lambda (#{type\ 2785}#
                      #{source\ 2786}#
                      #{name\ 2787}#
                      #{var\ 2788}#)
               (let ((#{atom-key\ 2795}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2795}# (quote (c)))
                   (#{make-lexical-ref\ 238}#
                     #{source\ 2786}#
                     #{name\ 2787}#
                     #{var\ 2788}#)
                   (#{decorate-source\ 285}#
                     #{var\ 2788}#
                     #{source\ 2786}#)))))
           (#{build-dynlet\ 293}#
             (lambda (#{source\ 2798}#
                      #{fluids\ 2799}#
                      #{vals\ 2800}#
                      #{body\ 2801}#)
               (let ((#{atom-key\ 2808}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2808}# (quote (c)))
                   (#{make-dynlet\ 266}#
                     #{source\ 2798}#
                     #{fluids\ 2799}#
                     #{vals\ 2800}#
                     #{body\ 2801}#)
                   (#{decorate-source\ 285}#
                     (list 'with-fluids
                           (map list #{fluids\ 2799}# #{vals\ 2800}#)
                           #{body\ 2801}#)
                     #{source\ 2798}#)))))
           (#{build-conditional\ 291}#
             (lambda (#{source\ 2812}#
                      #{test-exp\ 2813}#
                      #{then-exp\ 2814}#
                      #{else-exp\ 2815}#)
               (let ((#{atom-key\ 2822}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2822}# (quote (c)))
                   (#{make-conditional\ 252}#
                     #{source\ 2812}#
                     #{test-exp\ 2813}#
                     #{then-exp\ 2814}#
                     #{else-exp\ 2815}#)
                   (#{decorate-source\ 285}#
                     (if (equal? #{else-exp\ 2815}# (quote (if #f #f)))
                       (list 'if
                             #{test-exp\ 2813}#
                             #{then-exp\ 2814}#)
                       (list 'if
                             #{test-exp\ 2813}#
                             #{then-exp\ 2814}#
                             #{else-exp\ 2815}#))
                     #{source\ 2812}#)))))
           (#{build-application\ 289}#
             (lambda (#{source\ 2827}#
                      #{fun-exp\ 2828}#
                      #{arg-exps\ 2829}#)
               (let ((#{atom-key\ 2835}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2835}# (quote (c)))
                   (#{make-application\ 254}#
                     #{source\ 2827}#
                     #{fun-exp\ 2828}#
                     #{arg-exps\ 2829}#)
                   (#{decorate-source\ 285}#
                     (cons #{fun-exp\ 2828}# #{arg-exps\ 2829}#)
                     #{source\ 2827}#)))))
           (#{build-void\ 287}#
             (lambda (#{source\ 2839}#)
               (let ((#{atom-key\ 2843}# (fluid-ref #{*mode*\ 229}#)))
                 (if (memv #{atom-key\ 2843}# (quote (c)))
                   (#{make-void\ 232}# #{source\ 2839}#)
                   (#{decorate-source\ 285}#
                     '(if #f #f)
                     #{source\ 2839}#)))))
           (#{decorate-source\ 285}#
             (lambda (#{e\ 2846}# #{s\ 2847}#)
               (begin
                 (if (if (pair? #{e\ 2846}#) #{s\ 2847}# #f)
                   (set-source-properties! #{e\ 2846}# #{s\ 2847}#))
                 #{e\ 2846}#)))
           (#{get-global-definition-hook\ 283}#
             (lambda (#{symbol\ 2852}# #{module\ 2853}#)
               (begin
                 (if (if (not #{module\ 2853}#) (current-module) #f)
                   (warn "module system is booted, we should have a module"
                         #{symbol\ 2852}#))
                 (let ((#{v\ 2859}#
                         (module-variable
                           (if #{module\ 2853}#
                             (resolve-module (cdr #{module\ 2853}#))
                             (current-module))
                           #{symbol\ 2852}#)))
                   (if #{v\ 2859}#
                     (if (variable-bound? #{v\ 2859}#)
                       (let ((#{val\ 2864}# (variable-ref #{v\ 2859}#)))
                         (if (macro? #{val\ 2864}#)
                           (if (macro-type #{val\ 2864}#)
                             (cons (macro-type #{val\ 2864}#)
                                   (macro-binding #{val\ 2864}#))
                             #f)
                           #f))
                       #f)
                     #f)))))
           (#{put-global-definition-hook\ 281}#
             (lambda (#{symbol\ 2868}# #{type\ 2869}# #{val\ 2870}#)
               (module-define!
                 (current-module)
                 #{symbol\ 2868}#
                 (make-syntax-transformer
                   #{symbol\ 2868}#
                   #{type\ 2869}#
                   #{val\ 2870}#))))
           (#{local-eval-hook\ 278}#
             (lambda (#{x\ 2874}# #{mod\ 2875}#)
               (primitive-eval
                 (memoize-expression
                   (let ((#{atom-key\ 2880}# (fluid-ref #{*mode*\ 229}#)))
                     (if (memv #{atom-key\ 2880}# (quote (c)))
                       ((@ (language tree-il) tree-il->scheme)
                        #{x\ 2874}#)
                       #{x\ 2874}#))))))
           (#{top-level-eval-hook\ 276}#
             (lambda (#{x\ 2883}# #{mod\ 2884}#)
               (primitive-eval
                 (memoize-expression
                   (let ((#{atom-key\ 2889}# (fluid-ref #{*mode*\ 229}#)))
                     (if (memv #{atom-key\ 2889}# (quote (c)))
                       ((@ (language tree-il) tree-il->scheme)
                        #{x\ 2883}#)
                       #{x\ 2883}#))))))
           (#{fx<\ 274}# <)
           (#{fx=\ 272}# =)
           (#{fx-\ 270}# -)
           (#{fx+\ 268}# +)
           (#{make-dynlet\ 266}#
             (lambda (#{src\ 2892}#
                      #{fluids\ 2893}#
                      #{vals\ 2894}#
                      #{body\ 2895}#)
               (make-struct
                 (vector-ref %expanded-vtables 17)
                 0
                 #{src\ 2892}#
                 #{fluids\ 2893}#
                 #{vals\ 2894}#
                 #{body\ 2895}#)))
           (#{make-letrec\ 264}#
             (lambda (#{src\ 2900}#
                      #{names\ 2901}#
                      #{gensyms\ 2902}#
                      #{vals\ 2903}#
                      #{body\ 2904}#)
               (make-struct
                 (vector-ref %expanded-vtables 16)
                 0
                 #{src\ 2900}#
                 #{names\ 2901}#
                 #{gensyms\ 2902}#
                 #{vals\ 2903}#
                 #{body\ 2904}#)))
           (#{make-let\ 262}#
             (lambda (#{src\ 2910}#
                      #{names\ 2911}#
                      #{gensyms\ 2912}#
                      #{vals\ 2913}#
                      #{body\ 2914}#)
               (make-struct
                 (vector-ref %expanded-vtables 15)
                 0
                 #{src\ 2910}#
                 #{names\ 2911}#
                 #{gensyms\ 2912}#
                 #{vals\ 2913}#
                 #{body\ 2914}#)))
           (#{make-lambda-case\ 260}#
             (lambda (#{src\ 2920}#
                      #{req\ 2921}#
                      #{opt\ 2922}#
                      #{rest\ 2923}#
                      #{kw\ 2924}#
                      #{inits\ 2925}#
                      #{gensyms\ 2926}#
                      #{body\ 2927}#
                      #{alternate\ 2928}#)
               (make-struct
                 (vector-ref %expanded-vtables 14)
                 0
                 #{src\ 2920}#
                 #{req\ 2921}#
                 #{opt\ 2922}#
                 #{rest\ 2923}#
                 #{kw\ 2924}#
                 #{inits\ 2925}#
                 #{gensyms\ 2926}#
                 #{body\ 2927}#
                 #{alternate\ 2928}#)))
           (#{make-lambda\ 258}#
             (lambda (#{src\ 2938}# #{meta\ 2939}# #{body\ 2940}#)
               (make-struct
                 (vector-ref %expanded-vtables 13)
                 0
                 #{src\ 2938}#
                 #{meta\ 2939}#
                 #{body\ 2940}#)))
           (#{make-sequence\ 256}#
             (lambda (#{src\ 2944}# #{exps\ 2945}#)
               (make-struct
                 (vector-ref %expanded-vtables 12)
                 0
                 #{src\ 2944}#
                 #{exps\ 2945}#)))
           (#{make-application\ 254}#
             (lambda (#{src\ 2948}# #{proc\ 2949}# #{args\ 2950}#)
               (make-struct
                 (vector-ref %expanded-vtables 11)
                 0
                 #{src\ 2948}#
                 #{proc\ 2949}#
                 #{args\ 2950}#)))
           (#{make-conditional\ 252}#
             (lambda (#{src\ 2954}#
                      #{test\ 2955}#
                      #{consequent\ 2956}#
                      #{alternate\ 2957}#)
               (make-struct
                 (vector-ref %expanded-vtables 10)
                 0
                 #{src\ 2954}#
                 #{test\ 2955}#
                 #{consequent\ 2956}#
                 #{alternate\ 2957}#)))
           (#{make-toplevel-define\ 250}#
             (lambda (#{src\ 2962}# #{name\ 2963}# #{exp\ 2964}#)
               (make-struct
                 (vector-ref %expanded-vtables 9)
                 0
                 #{src\ 2962}#
                 #{name\ 2963}#
                 #{exp\ 2964}#)))
           (#{make-toplevel-set\ 248}#
             (lambda (#{src\ 2968}# #{name\ 2969}# #{exp\ 2970}#)
               (make-struct
                 (vector-ref %expanded-vtables 8)
                 0
                 #{src\ 2968}#
                 #{name\ 2969}#
                 #{exp\ 2970}#)))
           (#{make-toplevel-ref\ 246}#
             (lambda (#{src\ 2974}# #{name\ 2975}#)
               (make-struct
                 (vector-ref %expanded-vtables 7)
                 0
                 #{src\ 2974}#
                 #{name\ 2975}#)))
           (#{make-module-set\ 244}#
             (lambda (#{src\ 2978}#
                      #{mod\ 2979}#
                      #{name\ 2980}#
                      #{public?\ 2981}#
                      #{exp\ 2982}#)
               (make-struct
                 (vector-ref %expanded-vtables 6)
                 0
                 #{src\ 2978}#
                 #{mod\ 2979}#
                 #{name\ 2980}#
                 #{public?\ 2981}#
                 #{exp\ 2982}#)))
           (#{make-module-ref\ 242}#
             (lambda (#{src\ 2988}#
                      #{mod\ 2989}#
                      #{name\ 2990}#
                      #{public?\ 2991}#)
               (make-struct
                 (vector-ref %expanded-vtables 5)
                 0
                 #{src\ 2988}#
                 #{mod\ 2989}#
                 #{name\ 2990}#
                 #{public?\ 2991}#)))
           (#{make-lexical-set\ 240}#
             (lambda (#{src\ 2996}#
                      #{name\ 2997}#
                      #{gensym\ 2998}#
                      #{exp\ 2999}#)
               (make-struct
                 (vector-ref %expanded-vtables 4)
                 0
                 #{src\ 2996}#
                 #{name\ 2997}#
                 #{gensym\ 2998}#
                 #{exp\ 2999}#)))
           (#{make-lexical-ref\ 238}#
             (lambda (#{src\ 3004}# #{name\ 3005}# #{gensym\ 3006}#)
               (make-struct
                 (vector-ref %expanded-vtables 3)
                 0
                 #{src\ 3004}#
                 #{name\ 3005}#
                 #{gensym\ 3006}#)))
           (#{make-primitive-ref\ 236}#
             (lambda (#{src\ 3010}# #{name\ 3011}#)
               (make-struct
                 (vector-ref %expanded-vtables 2)
                 0
                 #{src\ 3010}#
                 #{name\ 3011}#)))
           (#{make-const\ 234}#
             (lambda (#{src\ 3014}# #{exp\ 3015}#)
               (make-struct
                 (vector-ref %expanded-vtables 1)
                 0
                 #{src\ 3014}#
                 #{exp\ 3015}#)))
           (#{make-void\ 232}#
             (lambda (#{src\ 3018}#)
               (make-struct
                 (vector-ref %expanded-vtables 0)
                 0
                 #{src\ 3018}#)))
           (#{*mode*\ 229}# (make-fluid)))
    (begin
      (#{global-extend\ 363}#
        'local-syntax
        'letrec-syntax
        #t)
      (#{global-extend\ 363}#
        'local-syntax
        'let-syntax
        #f)
      (#{global-extend\ 363}#
        'core
        'fluid-let-syntax
        (lambda (#{e\ 3020}#
                 #{r\ 3021}#
                 #{w\ 3022}#
                 #{s\ 3023}#
                 #{mod\ 3024}#)
          ((lambda (#{tmp\ 3030}#)
             ((lambda (#{tmp\ 3031}#)
                (if (if #{tmp\ 3031}#
                      (apply (lambda (#{_\ 3037}#
                                      #{var\ 3038}#
                                      #{val\ 3039}#
                                      #{e1\ 3040}#
                                      #{e2\ 3041}#)
                               (#{valid-bound-ids?\ 430}# #{var\ 3038}#))
                             #{tmp\ 3031}#)
                      #f)
                  (apply (lambda (#{_\ 3048}#
                                  #{var\ 3049}#
                                  #{val\ 3050}#
                                  #{e1\ 3051}#
                                  #{e2\ 3052}#)
                           (let ((#{names\ 3054}#
                                   (map (lambda (#{x\ 3055}#)
                                          (#{id-var-name\ 424}#
                                            #{x\ 3055}#
                                            #{w\ 3022}#))
                                        #{var\ 3049}#)))
                             (begin
                               (for-each
                                 (lambda (#{id\ 3058}# #{n\ 3059}#)
                                   (let ((#{atom-key\ 3064}#
                                           (#{binding-type\ 350}#
                                             (#{lookup\ 361}#
                                               #{n\ 3059}#
                                               #{r\ 3021}#
                                               #{mod\ 3024}#))))
                                     (if (memv #{atom-key\ 3064}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'fluid-let-syntax
                                         "identifier out of context"
                                         #{e\ 3020}#
                                         (#{source-wrap\ 438}#
                                           #{id\ 3058}#
                                           #{w\ 3022}#
                                           #{s\ 3023}#
                                           #{mod\ 3024}#)))))
                                 #{var\ 3049}#
                                 #{names\ 3054}#)
                               (#{chi-body\ 460}#
                                 (cons #{e1\ 3051}# #{e2\ 3052}#)
                                 (#{source-wrap\ 438}#
                                   #{e\ 3020}#
                                   #{w\ 3022}#
                                   #{s\ 3023}#
                                   #{mod\ 3024}#)
                                 (#{extend-env\ 355}#
                                   #{names\ 3054}#
                                   (let ((#{trans-r\ 3069}#
                                           (#{macros-only-env\ 359}#
                                             #{r\ 3021}#)))
                                     (map (lambda (#{x\ 3070}#)
                                            (cons 'macro
                                                  (#{eval-local-transformer\ 464}#
                                                    (#{chi\ 452}#
                                                      #{x\ 3070}#
                                                      #{trans-r\ 3069}#
                                                      #{w\ 3022}#
                                                      #{mod\ 3024}#)
                                                    #{mod\ 3024}#)))
                                          #{val\ 3050}#))
                                   #{r\ 3021}#)
                                 #{w\ 3022}#
                                 #{mod\ 3024}#))))
                         #{tmp\ 3031}#)
                  ((lambda (#{_\ 3075}#)
                     (syntax-violation
                       'fluid-let-syntax
                       "bad syntax"
                       (#{source-wrap\ 438}#
                         #{e\ 3020}#
                         #{w\ 3022}#
                         #{s\ 3023}#
                         #{mod\ 3024}#)))
                   #{tmp\ 3030}#)))
              ($sc-dispatch
                #{tmp\ 3030}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3020}#)))
      (#{global-extend\ 363}#
        'core
        'quote
        (lambda (#{e\ 3076}#
                 #{r\ 3077}#
                 #{w\ 3078}#
                 #{s\ 3079}#
                 #{mod\ 3080}#)
          ((lambda (#{tmp\ 3086}#)
             ((lambda (#{tmp\ 3087}#)
                (if #{tmp\ 3087}#
                  (apply (lambda (#{_\ 3090}# #{e\ 3091}#)
                           (#{build-data\ 317}#
                             #{s\ 3079}#
                             (#{strip\ 478}# #{e\ 3091}# #{w\ 3078}#)))
                         #{tmp\ 3087}#)
                  ((lambda (#{_\ 3093}#)
                     (syntax-violation
                       'quote
                       "bad syntax"
                       (#{source-wrap\ 438}#
                         #{e\ 3076}#
                         #{w\ 3078}#
                         #{s\ 3079}#
                         #{mod\ 3080}#)))
                   #{tmp\ 3086}#)))
              ($sc-dispatch #{tmp\ 3086}# (quote (any any)))))
           #{e\ 3076}#)))
      (#{global-extend\ 363}#
        'core
        'syntax
        (letrec ((#{regen\ 3109}#
                   (lambda (#{x\ 3110}#)
                     (let ((#{atom-key\ 3114}# (car #{x\ 3110}#)))
                       (if (memv #{atom-key\ 3114}# (quote (ref)))
                         (#{build-lexical-reference\ 295}#
                           'value
                           #f
                           (cadr #{x\ 3110}#)
                           (cadr #{x\ 3110}#))
                         (if (memv #{atom-key\ 3114}# (quote (primitive)))
                           (#{build-primref\ 315}# #f (cadr #{x\ 3110}#))
                           (if (memv #{atom-key\ 3114}# (quote (quote)))
                             (#{build-data\ 317}# #f (cadr #{x\ 3110}#))
                             (if (memv #{atom-key\ 3114}# (quote (lambda)))
                               (if (list? (cadr #{x\ 3110}#))
                                 (#{build-simple-lambda\ 309}#
                                   #f
                                   (cadr #{x\ 3110}#)
                                   #f
                                   (cadr #{x\ 3110}#)
                                   '()
                                   (#{regen\ 3109}# (caddr #{x\ 3110}#)))
                                 (error "how did we get here" #{x\ 3110}#))
                               (#{build-application\ 289}#
                                 #f
                                 (#{build-primref\ 315}# #f (car #{x\ 3110}#))
                                 (map #{regen\ 3109}#
                                      (cdr #{x\ 3110}#))))))))))
                 (#{gen-vector\ 3107}#
                   (lambda (#{x\ 3126}#)
                     (if (eq? (car #{x\ 3126}#) (quote list))
                       (cons (quote vector) (cdr #{x\ 3126}#))
                       (if (eq? (car #{x\ 3126}#) (quote quote))
                         (list 'quote
                               (list->vector (cadr #{x\ 3126}#)))
                         (list (quote list->vector) #{x\ 3126}#)))))
                 (#{gen-append\ 3105}#
                   (lambda (#{x\ 3136}# #{y\ 3137}#)
                     (if (equal? #{y\ 3137}# (quote (quote ())))
                       #{x\ 3136}#
                       (list (quote append) #{x\ 3136}# #{y\ 3137}#))))
                 (#{gen-cons\ 3103}#
                   (lambda (#{x\ 3141}# #{y\ 3142}#)
                     (let ((#{atom-key\ 3147}# (car #{y\ 3142}#)))
                       (if (memv #{atom-key\ 3147}# (quote (quote)))
                         (if (eq? (car #{x\ 3141}#) (quote quote))
                           (list 'quote
                                 (cons (cadr #{x\ 3141}#) (cadr #{y\ 3142}#)))
                           (if (eq? (cadr #{y\ 3142}#) (quote ()))
                             (list (quote list) #{x\ 3141}#)
                             (list (quote cons) #{x\ 3141}# #{y\ 3142}#)))
                         (if (memv #{atom-key\ 3147}# (quote (list)))
                           (cons 'list
                                 (cons #{x\ 3141}# (cdr #{y\ 3142}#)))
                           (list (quote cons) #{x\ 3141}# #{y\ 3142}#))))))
                 (#{gen-map\ 3101}#
                   (lambda (#{e\ 3156}# #{map-env\ 3157}#)
                     (let ((#{formals\ 3162}# (map cdr #{map-env\ 3157}#))
                           (#{actuals\ 3163}#
                             (map (lambda (#{x\ 3164}#)
                                    (list (quote ref) (car #{x\ 3164}#)))
                                  #{map-env\ 3157}#)))
                       (if (eq? (car #{e\ 3156}#) (quote ref))
                         (car #{actuals\ 3163}#)
                         (if (and-map
                               (lambda (#{x\ 3171}#)
                                 (if (eq? (car #{x\ 3171}#) (quote ref))
                                   (memq (cadr #{x\ 3171}#) #{formals\ 3162}#)
                                   #f))
                               (cdr #{e\ 3156}#))
                           (cons 'map
                                 (cons (list 'primitive
                                             (car #{e\ 3156}#))
                                       (map (let ((#{r\ 3177}#
                                                    (map cons
                                                         #{formals\ 3162}#
                                                         #{actuals\ 3163}#)))
                                              (lambda (#{x\ 3178}#)
                                                (cdr (assq (cadr #{x\ 3178}#)
                                                           #{r\ 3177}#))))
                                            (cdr #{e\ 3156}#))))
                           (cons 'map
                                 (cons (list 'lambda
                                             #{formals\ 3162}#
                                             #{e\ 3156}#)
                                       #{actuals\ 3163}#)))))))
                 (#{gen-mappend\ 3099}#
                   (lambda (#{e\ 3182}# #{map-env\ 3183}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 3101}# #{e\ 3182}# #{map-env\ 3183}#))))
                 (#{gen-ref\ 3097}#
                   (lambda (#{src\ 3187}#
                            #{var\ 3188}#
                            #{level\ 3189}#
                            #{maps\ 3190}#)
                     (if (#{fx=\ 272}# #{level\ 3189}# 0)
                       (values #{var\ 3188}# #{maps\ 3190}#)
                       (if (null? #{maps\ 3190}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 3187}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 3097}#
                               #{src\ 3187}#
                               #{var\ 3188}#
                               (#{fx-\ 270}# #{level\ 3189}# 1)
                               (cdr #{maps\ 3190}#)))
                           (lambda (#{outer-var\ 3195}# #{outer-maps\ 3196}#)
                             (let ((#{b\ 3200}#
                                     (assq #{outer-var\ 3195}#
                                           (car #{maps\ 3190}#))))
                               (if #{b\ 3200}#
                                 (values (cdr #{b\ 3200}#) #{maps\ 3190}#)
                                 (let ((#{inner-var\ 3202}#
                                         (#{gen-var\ 480}# (quote tmp))))
                                   (values
                                     #{inner-var\ 3202}#
                                     (cons (cons (cons #{outer-var\ 3195}#
                                                       #{inner-var\ 3202}#)
                                                 (car #{maps\ 3190}#))
                                           #{outer-maps\ 3196}#)))))))))))
                 (#{gen-syntax\ 3095}#
                   (lambda (#{src\ 3203}#
                            #{e\ 3204}#
                            #{r\ 3205}#
                            #{maps\ 3206}#
                            #{ellipsis?\ 3207}#
                            #{mod\ 3208}#)
                     (if (#{id?\ 367}# #{e\ 3204}#)
                       (let ((#{label\ 3216}#
                               (#{id-var-name\ 424}#
                                 #{e\ 3204}#
                                 '(()))))
                         (let ((#{b\ 3219}#
                                 (#{lookup\ 361}#
                                   #{label\ 3216}#
                                   #{r\ 3205}#
                                   #{mod\ 3208}#)))
                           (if (eq? (#{binding-type\ 350}# #{b\ 3219}#)
                                    'syntax)
                             (call-with-values
                               (lambda ()
                                 (let ((#{var.lev\ 3221}#
                                         (#{binding-value\ 352}# #{b\ 3219}#)))
                                   (#{gen-ref\ 3097}#
                                     #{src\ 3203}#
                                     (car #{var.lev\ 3221}#)
                                     (cdr #{var.lev\ 3221}#)
                                     #{maps\ 3206}#)))
                               (lambda (#{var\ 3222}# #{maps\ 3223}#)
                                 (values
                                   (list (quote ref) #{var\ 3222}#)
                                   #{maps\ 3223}#)))
                             (if (#{ellipsis?\ 3207}# #{e\ 3204}#)
                               (syntax-violation
                                 'syntax
                                 "misplaced ellipsis"
                                 #{src\ 3203}#)
                               (values
                                 (list (quote quote) #{e\ 3204}#)
                                 #{maps\ 3206}#)))))
                       ((lambda (#{tmp\ 3228}#)
                          ((lambda (#{tmp\ 3229}#)
                             (if (if #{tmp\ 3229}#
                                   (apply (lambda (#{dots\ 3232}# #{e\ 3233}#)
                                            (#{ellipsis?\ 3207}#
                                              #{dots\ 3232}#))
                                          #{tmp\ 3229}#)
                                   #f)
                               (apply (lambda (#{dots\ 3236}# #{e\ 3237}#)
                                        (#{gen-syntax\ 3095}#
                                          #{src\ 3203}#
                                          #{e\ 3237}#
                                          #{r\ 3205}#
                                          #{maps\ 3206}#
                                          (lambda (#{x\ 3238}#) #f)
                                          #{mod\ 3208}#))
                                      #{tmp\ 3229}#)
                               ((lambda (#{tmp\ 3240}#)
                                  (if (if #{tmp\ 3240}#
                                        (apply (lambda (#{x\ 3244}#
                                                        #{dots\ 3245}#
                                                        #{y\ 3246}#)
                                                 (#{ellipsis?\ 3207}#
                                                   #{dots\ 3245}#))
                                               #{tmp\ 3240}#)
                                        #f)
                                    (apply (lambda (#{x\ 3250}#
                                                    #{dots\ 3251}#
                                                    #{y\ 3252}#)
                                             (letrec ((#{f\ 3256}#
                                                        (lambda (#{y\ 3257}#
                                                                 #{k\ 3258}#)
                                                          ((lambda (#{tmp\ 3265}#)
                                                             ((lambda (#{tmp\ 3266}#)
                                                                (if (if #{tmp\ 3266}#
                                                                      (apply (lambda (#{dots\ 3269}#
                                                                                      #{y\ 3270}#)
                                                                               (#{ellipsis?\ 3207}#
                                                                                 #{dots\ 3269}#))
                                                                             #{tmp\ 3266}#)
                                                                      #f)
                                                                  (apply (lambda (#{dots\ 3273}#
                                                                                  #{y\ 3274}#)
                                                                           (#{f\ 3256}#
                                                                             #{y\ 3274}#
                                                                             (lambda (#{maps\ 3275}#)
                                                                               (call-with-values
                                                                                 (lambda ()
                                                                                   (#{k\ 3258}#
                                                                                     (cons '()
                                                                                           #{maps\ 3275}#)))
                                                                                 (lambda (#{x\ 3277}#
                                                                                          #{maps\ 3278}#)
                                                                                   (if (null? (car #{maps\ 3278}#))
                                                                                     (syntax-violation
                                                                                       'syntax
                                                                                       "extra ellipsis"
                                                                                       #{src\ 3203}#)
                                                                                     (values
                                                                                       (#{gen-mappend\ 3099}#
                                                                                         #{x\ 3277}#
                                                                                         (car #{maps\ 3278}#))
                                                                                       (cdr #{maps\ 3278}#))))))))
                                                                         #{tmp\ 3266}#)
                                                                  ((lambda (#{_\ 3282}#)
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (#{gen-syntax\ 3095}#
                                                                           #{src\ 3203}#
                                                                           #{y\ 3257}#
                                                                           #{r\ 3205}#
                                                                           #{maps\ 3206}#
                                                                           #{ellipsis?\ 3207}#
                                                                           #{mod\ 3208}#))
                                                                       (lambda (#{y\ 3283}#
                                                                                #{maps\ 3284}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{k\ 3258}#
                                                                               #{maps\ 3284}#))
                                                                           (lambda (#{x\ 3287}#
                                                                                    #{maps\ 3288}#)
                                                                             (values
                                                                               (#{gen-append\ 3105}#
                                                                                 #{x\ 3287}#
                                                                                 #{y\ 3283}#)
                                                                               #{maps\ 3288}#))))))
                                                                   #{tmp\ 3265}#)))
                                                              ($sc-dispatch
                                                                #{tmp\ 3265}#
                                                                '(any . any))))
                                                           #{y\ 3257}#))))
                                               (#{f\ 3256}#
                                                 #{y\ 3252}#
                                                 (lambda (#{maps\ 3259}#)
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{gen-syntax\ 3095}#
                                                         #{src\ 3203}#
                                                         #{x\ 3250}#
                                                         #{r\ 3205}#
                                                         (cons '()
                                                               #{maps\ 3259}#)
                                                         #{ellipsis?\ 3207}#
                                                         #{mod\ 3208}#))
                                                     (lambda (#{x\ 3261}#
                                                              #{maps\ 3262}#)
                                                       (if (null? (car #{maps\ 3262}#))
                                                         (syntax-violation
                                                           'syntax
                                                           "extra ellipsis"
                                                           #{src\ 3203}#)
                                                         (values
                                                           (#{gen-map\ 3101}#
                                                             #{x\ 3261}#
                                                             (car #{maps\ 3262}#))
                                                           (cdr #{maps\ 3262}#)))))))))
                                           #{tmp\ 3240}#)
                                    ((lambda (#{tmp\ 3291}#)
                                       (if #{tmp\ 3291}#
                                         (apply (lambda (#{x\ 3294}#
                                                         #{y\ 3295}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{gen-syntax\ 3095}#
                                                        #{src\ 3203}#
                                                        #{x\ 3294}#
                                                        #{r\ 3205}#
                                                        #{maps\ 3206}#
                                                        #{ellipsis?\ 3207}#
                                                        #{mod\ 3208}#))
                                                    (lambda (#{x\ 3296}#
                                                             #{maps\ 3297}#)
                                                      (call-with-values
                                                        (lambda ()
                                                          (#{gen-syntax\ 3095}#
                                                            #{src\ 3203}#
                                                            #{y\ 3295}#
                                                            #{r\ 3205}#
                                                            #{maps\ 3297}#
                                                            #{ellipsis?\ 3207}#
                                                            #{mod\ 3208}#))
                                                        (lambda (#{y\ 3300}#
                                                                 #{maps\ 3301}#)
                                                          (values
                                                            (#{gen-cons\ 3103}#
                                                              #{x\ 3296}#
                                                              #{y\ 3300}#)
                                                            #{maps\ 3301}#))))))
                                                #{tmp\ 3291}#)
                                         ((lambda (#{tmp\ 3304}#)
                                            (if #{tmp\ 3304}#
                                              (apply (lambda (#{e1\ 3307}#
                                                              #{e2\ 3308}#)
                                                       (call-with-values
                                                         (lambda ()
                                                           (#{gen-syntax\ 3095}#
                                                             #{src\ 3203}#
                                                             (cons #{e1\ 3307}#
                                                                   #{e2\ 3308}#)
                                                             #{r\ 3205}#
                                                             #{maps\ 3206}#
                                                             #{ellipsis?\ 3207}#
                                                             #{mod\ 3208}#))
                                                         (lambda (#{e\ 3310}#
                                                                  #{maps\ 3311}#)
                                                           (values
                                                             (#{gen-vector\ 3107}#
                                                               #{e\ 3310}#)
                                                             #{maps\ 3311}#))))
                                                     #{tmp\ 3304}#)
                                              ((lambda (#{_\ 3315}#)
                                                 (values
                                                   (list 'quote
                                                         #{e\ 3204}#)
                                                   #{maps\ 3206}#))
                                               #{tmp\ 3228}#)))
                                          ($sc-dispatch
                                            #{tmp\ 3228}#
                                            '#(vector (any . each-any))))))
                                     ($sc-dispatch
                                       #{tmp\ 3228}#
                                       '(any . any)))))
                                ($sc-dispatch
                                  #{tmp\ 3228}#
                                  '(any any . any)))))
                           ($sc-dispatch #{tmp\ 3228}# (quote (any any)))))
                        #{e\ 3204}#)))))
          (lambda (#{e\ 3317}#
                   #{r\ 3318}#
                   #{w\ 3319}#
                   #{s\ 3320}#
                   #{mod\ 3321}#)
            (let ((#{e\ 3328}#
                    (#{source-wrap\ 438}#
                      #{e\ 3317}#
                      #{w\ 3319}#
                      #{s\ 3320}#
                      #{mod\ 3321}#)))
              ((lambda (#{tmp\ 3329}#)
                 ((lambda (#{tmp\ 3330}#)
                    (if #{tmp\ 3330}#
                      (apply (lambda (#{_\ 3333}# #{x\ 3334}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax\ 3095}#
                                     #{e\ 3328}#
                                     #{x\ 3334}#
                                     #{r\ 3318}#
                                     '()
                                     #{ellipsis?\ 468}#
                                     #{mod\ 3321}#))
                                 (lambda (#{e\ 3335}# #{maps\ 3336}#)
                                   (#{regen\ 3109}# #{e\ 3335}#))))
                             #{tmp\ 3330}#)
                      ((lambda (#{_\ 3340}#)
                         (syntax-violation
                           'syntax
                           "bad `syntax' form"
                           #{e\ 3328}#))
                       #{tmp\ 3329}#)))
                  ($sc-dispatch #{tmp\ 3329}# (quote (any any)))))
               #{e\ 3328}#)))))
      (#{global-extend\ 363}#
        'core
        'lambda
        (lambda (#{e\ 3341}#
                 #{r\ 3342}#
                 #{w\ 3343}#
                 #{s\ 3344}#
                 #{mod\ 3345}#)
          ((lambda (#{tmp\ 3351}#)
             ((lambda (#{tmp\ 3352}#)
                (if #{tmp\ 3352}#
                  (apply (lambda (#{_\ 3357}#
                                  #{args\ 3358}#
                                  #{e1\ 3359}#
                                  #{e2\ 3360}#)
                           (call-with-values
                             (lambda ()
                               (#{lambda-formals\ 470}# #{args\ 3358}#))
                             (lambda (#{req\ 3361}#
                                      #{opt\ 3362}#
                                      #{rest\ 3363}#
                                      #{kw\ 3364}#)
                               (letrec ((#{lp\ 3372}#
                                          (lambda (#{body\ 3373}#
                                                   #{meta\ 3374}#)
                                            ((lambda (#{tmp\ 3376}#)
                                               ((lambda (#{tmp\ 3377}#)
                                                  (if (if #{tmp\ 3377}#
                                                        (apply (lambda (#{docstring\ 3381}#
                                                                        #{e1\ 3382}#
                                                                        #{e2\ 3383}#)
                                                                 (string?
                                                                   (syntax->datum
                                                                     #{docstring\ 3381}#)))
                                                               #{tmp\ 3377}#)
                                                        #f)
                                                    (apply (lambda (#{docstring\ 3387}#
                                                                    #{e1\ 3388}#
                                                                    #{e2\ 3389}#)
                                                             (#{lp\ 3372}#
                                                               (cons #{e1\ 3388}#
                                                                     #{e2\ 3389}#)
                                                               (append
                                                                 #{meta\ 3374}#
                                                                 (list (cons 'documentation
                                                                             (syntax->datum
                                                                               #{docstring\ 3387}#))))))
                                                           #{tmp\ 3377}#)
                                                    ((lambda (#{tmp\ 3392}#)
                                                       (if #{tmp\ 3392}#
                                                         (apply (lambda (#{k\ 3397}#
                                                                         #{v\ 3398}#
                                                                         #{e1\ 3399}#
                                                                         #{e2\ 3400}#)
                                                                  (#{lp\ 3372}#
                                                                    (cons #{e1\ 3399}#
                                                                          #{e2\ 3400}#)
                                                                    (append
                                                                      #{meta\ 3374}#
                                                                      (syntax->datum
                                                                        (map cons
                                                                             #{k\ 3397}#
                                                                             #{v\ 3398}#)))))
                                                                #{tmp\ 3392}#)
                                                         ((lambda (#{_\ 3405}#)
                                                            (#{chi-simple-lambda\ 472}#
                                                              #{e\ 3341}#
                                                              #{r\ 3342}#
                                                              #{w\ 3343}#
                                                              #{s\ 3344}#
                                                              #{mod\ 3345}#
                                                              #{req\ 3361}#
                                                              #{rest\ 3363}#
                                                              #{meta\ 3374}#
                                                              #{body\ 3373}#))
                                                          #{tmp\ 3376}#)))
                                                     ($sc-dispatch
                                                       #{tmp\ 3376}#
                                                       '(#(vector
                                                           #(each (any . any)))
                                                         any
                                                         .
                                                         each-any)))))
                                                ($sc-dispatch
                                                  #{tmp\ 3376}#
                                                  '(any any . each-any))))
                                             #{body\ 3373}#))))
                                 (#{lp\ 3372}#
                                   (cons #{e1\ 3359}# #{e2\ 3360}#)
                                   '())))))
                         #{tmp\ 3352}#)
                  ((lambda (#{_\ 3407}#)
                     (syntax-violation
                       'lambda
                       "bad lambda"
                       #{e\ 3341}#))
                   #{tmp\ 3351}#)))
              ($sc-dispatch
                #{tmp\ 3351}#
                '(any any any . each-any))))
           #{e\ 3341}#)))
      (#{global-extend\ 363}#
        'core
        'lambda*
        (lambda (#{e\ 3408}#
                 #{r\ 3409}#
                 #{w\ 3410}#
                 #{s\ 3411}#
                 #{mod\ 3412}#)
          ((lambda (#{tmp\ 3418}#)
             ((lambda (#{tmp\ 3419}#)
                (if #{tmp\ 3419}#
                  (apply (lambda (#{_\ 3424}#
                                  #{args\ 3425}#
                                  #{e1\ 3426}#
                                  #{e2\ 3427}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 476}#
                                 #{e\ 3408}#
                                 #{r\ 3409}#
                                 #{w\ 3410}#
                                 #{s\ 3411}#
                                 #{mod\ 3412}#
                                 #{lambda*-formals\ 474}#
                                 (list (cons #{args\ 3425}#
                                             (cons #{e1\ 3426}#
                                                   #{e2\ 3427}#)))))
                             (lambda (#{meta\ 3429}# #{lcase\ 3430}#)
                               (#{build-case-lambda\ 311}#
                                 #{s\ 3411}#
                                 #{meta\ 3429}#
                                 #{lcase\ 3430}#))))
                         #{tmp\ 3419}#)
                  ((lambda (#{_\ 3434}#)
                     (syntax-violation
                       'lambda
                       "bad lambda*"
                       #{e\ 3408}#))
                   #{tmp\ 3418}#)))
              ($sc-dispatch
                #{tmp\ 3418}#
                '(any any any . each-any))))
           #{e\ 3408}#)))
      (#{global-extend\ 363}#
        'core
        'case-lambda
        (lambda (#{e\ 3435}#
                 #{r\ 3436}#
                 #{w\ 3437}#
                 #{s\ 3438}#
                 #{mod\ 3439}#)
          ((lambda (#{tmp\ 3445}#)
             ((lambda (#{tmp\ 3446}#)
                (if #{tmp\ 3446}#
                  (apply (lambda (#{_\ 3454}#
                                  #{args\ 3455}#
                                  #{e1\ 3456}#
                                  #{e2\ 3457}#
                                  #{args*\ 3458}#
                                  #{e1*\ 3459}#
                                  #{e2*\ 3460}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 476}#
                                 #{e\ 3435}#
                                 #{r\ 3436}#
                                 #{w\ 3437}#
                                 #{s\ 3438}#
                                 #{mod\ 3439}#
                                 #{lambda-formals\ 470}#
                                 (cons (cons #{args\ 3455}#
                                             (cons #{e1\ 3456}# #{e2\ 3457}#))
                                       (map (lambda (#{tmp\ 3464}#
                                                     #{tmp\ 3463}#
                                                     #{tmp\ 3462}#)
                                              (cons #{tmp\ 3462}#
                                                    (cons #{tmp\ 3463}#
                                                          #{tmp\ 3464}#)))
                                            #{e2*\ 3460}#
                                            #{e1*\ 3459}#
                                            #{args*\ 3458}#))))
                             (lambda (#{meta\ 3466}# #{lcase\ 3467}#)
                               (#{build-case-lambda\ 311}#
                                 #{s\ 3438}#
                                 #{meta\ 3466}#
                                 #{lcase\ 3467}#))))
                         #{tmp\ 3446}#)
                  ((lambda (#{_\ 3471}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda"
                       #{e\ 3435}#))
                   #{tmp\ 3445}#)))
              ($sc-dispatch
                #{tmp\ 3445}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3435}#)))
      (#{global-extend\ 363}#
        'core
        'case-lambda*
        (lambda (#{e\ 3472}#
                 #{r\ 3473}#
                 #{w\ 3474}#
                 #{s\ 3475}#
                 #{mod\ 3476}#)
          ((lambda (#{tmp\ 3482}#)
             ((lambda (#{tmp\ 3483}#)
                (if #{tmp\ 3483}#
                  (apply (lambda (#{_\ 3491}#
                                  #{args\ 3492}#
                                  #{e1\ 3493}#
                                  #{e2\ 3494}#
                                  #{args*\ 3495}#
                                  #{e1*\ 3496}#
                                  #{e2*\ 3497}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 476}#
                                 #{e\ 3472}#
                                 #{r\ 3473}#
                                 #{w\ 3474}#
                                 #{s\ 3475}#
                                 #{mod\ 3476}#
                                 #{lambda*-formals\ 474}#
                                 (cons (cons #{args\ 3492}#
                                             (cons #{e1\ 3493}# #{e2\ 3494}#))
                                       (map (lambda (#{tmp\ 3501}#
                                                     #{tmp\ 3500}#
                                                     #{tmp\ 3499}#)
                                              (cons #{tmp\ 3499}#
                                                    (cons #{tmp\ 3500}#
                                                          #{tmp\ 3501}#)))
                                            #{e2*\ 3497}#
                                            #{e1*\ 3496}#
                                            #{args*\ 3495}#))))
                             (lambda (#{meta\ 3503}# #{lcase\ 3504}#)
                               (#{build-case-lambda\ 311}#
                                 #{s\ 3475}#
                                 #{meta\ 3503}#
                                 #{lcase\ 3504}#))))
                         #{tmp\ 3483}#)
                  ((lambda (#{_\ 3508}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda*"
                       #{e\ 3472}#))
                   #{tmp\ 3482}#)))
              ($sc-dispatch
                #{tmp\ 3482}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 3472}#)))
      (#{global-extend\ 363}#
        'core
        'let
        (letrec ((#{chi-let\ 3510}#
                   (lambda (#{e\ 3511}#
                            #{r\ 3512}#
                            #{w\ 3513}#
                            #{s\ 3514}#
                            #{mod\ 3515}#
                            #{constructor\ 3516}#
                            #{ids\ 3517}#
                            #{vals\ 3518}#
                            #{exps\ 3519}#)
                     (if (not (#{valid-bound-ids?\ 430}# #{ids\ 3517}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 3511}#)
                       (let ((#{labels\ 3531}#
                               (#{gen-labels\ 385}# #{ids\ 3517}#))
                             (#{new-vars\ 3532}#
                               (map #{gen-var\ 480}# #{ids\ 3517}#)))
                         (let ((#{nw\ 3535}#
                                 (#{make-binding-wrap\ 414}#
                                   #{ids\ 3517}#
                                   #{labels\ 3531}#
                                   #{w\ 3513}#))
                               (#{nr\ 3536}#
                                 (#{extend-var-env\ 357}#
                                   #{labels\ 3531}#
                                   #{new-vars\ 3532}#
                                   #{r\ 3512}#)))
                           (#{constructor\ 3516}#
                             #{s\ 3514}#
                             (map syntax->datum #{ids\ 3517}#)
                             #{new-vars\ 3532}#
                             (map (lambda (#{x\ 3537}#)
                                    (#{chi\ 452}#
                                      #{x\ 3537}#
                                      #{r\ 3512}#
                                      #{w\ 3513}#
                                      #{mod\ 3515}#))
                                  #{vals\ 3518}#)
                             (#{chi-body\ 460}#
                               #{exps\ 3519}#
                               (#{source-wrap\ 438}#
                                 #{e\ 3511}#
                                 #{nw\ 3535}#
                                 #{s\ 3514}#
                                 #{mod\ 3515}#)
                               #{nr\ 3536}#
                               #{nw\ 3535}#
                               #{mod\ 3515}#))))))))
          (lambda (#{e\ 3539}#
                   #{r\ 3540}#
                   #{w\ 3541}#
                   #{s\ 3542}#
                   #{mod\ 3543}#)
            ((lambda (#{tmp\ 3549}#)
               ((lambda (#{tmp\ 3550}#)
                  (if (if #{tmp\ 3550}#
                        (apply (lambda (#{_\ 3556}#
                                        #{id\ 3557}#
                                        #{val\ 3558}#
                                        #{e1\ 3559}#
                                        #{e2\ 3560}#)
                                 (and-map #{id?\ 367}# #{id\ 3557}#))
                               #{tmp\ 3550}#)
                        #f)
                    (apply (lambda (#{_\ 3567}#
                                    #{id\ 3568}#
                                    #{val\ 3569}#
                                    #{e1\ 3570}#
                                    #{e2\ 3571}#)
                             (#{chi-let\ 3510}#
                               #{e\ 3539}#
                               #{r\ 3540}#
                               #{w\ 3541}#
                               #{s\ 3542}#
                               #{mod\ 3543}#
                               #{build-let\ 321}#
                               #{id\ 3568}#
                               #{val\ 3569}#
                               (cons #{e1\ 3570}# #{e2\ 3571}#)))
                           #{tmp\ 3550}#)
                    ((lambda (#{tmp\ 3575}#)
                       (if (if #{tmp\ 3575}#
                             (apply (lambda (#{_\ 3582}#
                                             #{f\ 3583}#
                                             #{id\ 3584}#
                                             #{val\ 3585}#
                                             #{e1\ 3586}#
                                             #{e2\ 3587}#)
                                      (if (#{id?\ 367}# #{f\ 3583}#)
                                        (and-map #{id?\ 367}# #{id\ 3584}#)
                                        #f))
                                    #{tmp\ 3575}#)
                             #f)
                         (apply (lambda (#{_\ 3597}#
                                         #{f\ 3598}#
                                         #{id\ 3599}#
                                         #{val\ 3600}#
                                         #{e1\ 3601}#
                                         #{e2\ 3602}#)
                                  (#{chi-let\ 3510}#
                                    #{e\ 3539}#
                                    #{r\ 3540}#
                                    #{w\ 3541}#
                                    #{s\ 3542}#
                                    #{mod\ 3543}#
                                    #{build-named-let\ 323}#
                                    (cons #{f\ 3598}# #{id\ 3599}#)
                                    #{val\ 3600}#
                                    (cons #{e1\ 3601}# #{e2\ 3602}#)))
                                #{tmp\ 3575}#)
                         ((lambda (#{_\ 3607}#)
                            (syntax-violation
                              'let
                              "bad let"
                              (#{source-wrap\ 438}#
                                #{e\ 3539}#
                                #{w\ 3541}#
                                #{s\ 3542}#
                                #{mod\ 3543}#)))
                          #{tmp\ 3549}#)))
                     ($sc-dispatch
                       #{tmp\ 3549}#
                       '(any any #(each (any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 3549}#
                  '(any #(each (any any)) any . each-any))))
             #{e\ 3539}#))))
      (#{global-extend\ 363}#
        'core
        'letrec
        (lambda (#{e\ 3608}#
                 #{r\ 3609}#
                 #{w\ 3610}#
                 #{s\ 3611}#
                 #{mod\ 3612}#)
          ((lambda (#{tmp\ 3618}#)
             ((lambda (#{tmp\ 3619}#)
                (if (if #{tmp\ 3619}#
                      (apply (lambda (#{_\ 3625}#
                                      #{id\ 3626}#
                                      #{val\ 3627}#
                                      #{e1\ 3628}#
                                      #{e2\ 3629}#)
                               (and-map #{id?\ 367}# #{id\ 3626}#))
                             #{tmp\ 3619}#)
                      #f)
                  (apply (lambda (#{_\ 3636}#
                                  #{id\ 3637}#
                                  #{val\ 3638}#
                                  #{e1\ 3639}#
                                  #{e2\ 3640}#)
                           (let ((#{ids\ 3642}# #{id\ 3637}#))
                             (if (not (#{valid-bound-ids?\ 430}#
                                        #{ids\ 3642}#))
                               (syntax-violation
                                 'letrec
                                 "duplicate bound variable"
                                 #{e\ 3608}#)
                               (let ((#{labels\ 3646}#
                                       (#{gen-labels\ 385}# #{ids\ 3642}#))
                                     (#{new-vars\ 3647}#
                                       (map #{gen-var\ 480}# #{ids\ 3642}#)))
                                 (let ((#{w\ 3650}#
                                         (#{make-binding-wrap\ 414}#
                                           #{ids\ 3642}#
                                           #{labels\ 3646}#
                                           #{w\ 3610}#))
                                       (#{r\ 3651}#
                                         (#{extend-var-env\ 357}#
                                           #{labels\ 3646}#
                                           #{new-vars\ 3647}#
                                           #{r\ 3609}#)))
                                   (#{build-letrec\ 325}#
                                     #{s\ 3611}#
                                     (map syntax->datum #{ids\ 3642}#)
                                     #{new-vars\ 3647}#
                                     (map (lambda (#{x\ 3652}#)
                                            (#{chi\ 452}#
                                              #{x\ 3652}#
                                              #{r\ 3651}#
                                              #{w\ 3650}#
                                              #{mod\ 3612}#))
                                          #{val\ 3638}#)
                                     (#{chi-body\ 460}#
                                       (cons #{e1\ 3639}# #{e2\ 3640}#)
                                       (#{source-wrap\ 438}#
                                         #{e\ 3608}#
                                         #{w\ 3650}#
                                         #{s\ 3611}#
                                         #{mod\ 3612}#)
                                       #{r\ 3651}#
                                       #{w\ 3650}#
                                       #{mod\ 3612}#)))))))
                         #{tmp\ 3619}#)
                  ((lambda (#{_\ 3657}#)
                     (syntax-violation
                       'letrec
                       "bad letrec"
                       (#{source-wrap\ 438}#
                         #{e\ 3608}#
                         #{w\ 3610}#
                         #{s\ 3611}#
                         #{mod\ 3612}#)))
                   #{tmp\ 3618}#)))
              ($sc-dispatch
                #{tmp\ 3618}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3608}#)))
      (#{global-extend\ 363}#
        'core
        'set!
        (lambda (#{e\ 3658}#
                 #{r\ 3659}#
                 #{w\ 3660}#
                 #{s\ 3661}#
                 #{mod\ 3662}#)
          ((lambda (#{tmp\ 3668}#)
             ((lambda (#{tmp\ 3669}#)
                (if (if #{tmp\ 3669}#
                      (apply (lambda (#{_\ 3673}# #{id\ 3674}# #{val\ 3675}#)
                               (#{id?\ 367}# #{id\ 3674}#))
                             #{tmp\ 3669}#)
                      #f)
                  (apply (lambda (#{_\ 3679}# #{id\ 3680}# #{val\ 3681}#)
                           (let ((#{val\ 3684}#
                                   (#{chi\ 452}#
                                     #{val\ 3681}#
                                     #{r\ 3659}#
                                     #{w\ 3660}#
                                     #{mod\ 3662}#))
                                 (#{n\ 3685}#
                                   (#{id-var-name\ 424}#
                                     #{id\ 3680}#
                                     #{w\ 3660}#)))
                             (let ((#{b\ 3687}#
                                     (#{lookup\ 361}#
                                       #{n\ 3685}#
                                       #{r\ 3659}#
                                       #{mod\ 3662}#)))
                               (let ((#{atom-key\ 3690}#
                                       (#{binding-type\ 350}# #{b\ 3687}#)))
                                 (if (memv #{atom-key\ 3690}#
                                           '(lexical))
                                   (#{build-lexical-assignment\ 297}#
                                     #{s\ 3661}#
                                     (syntax->datum #{id\ 3680}#)
                                     (#{binding-value\ 352}# #{b\ 3687}#)
                                     #{val\ 3684}#)
                                   (if (memv #{atom-key\ 3690}#
                                             '(global))
                                     (#{build-global-assignment\ 303}#
                                       #{s\ 3661}#
                                       #{n\ 3685}#
                                       #{val\ 3684}#
                                       #{mod\ 3662}#)
                                     (if (memv #{atom-key\ 3690}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'set!
                                         "identifier out of context"
                                         (#{wrap\ 436}#
                                           #{id\ 3680}#
                                           #{w\ 3660}#
                                           #{mod\ 3662}#))
                                       (syntax-violation
                                         'set!
                                         "bad set!"
                                         (#{source-wrap\ 438}#
                                           #{e\ 3658}#
                                           #{w\ 3660}#
                                           #{s\ 3661}#
                                           #{mod\ 3662}#)))))))))
                         #{tmp\ 3669}#)
                  ((lambda (#{tmp\ 3695}#)
                     (if #{tmp\ 3695}#
                       (apply (lambda (#{_\ 3700}#
                                       #{head\ 3701}#
                                       #{tail\ 3702}#
                                       #{val\ 3703}#)
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type\ 448}#
                                      #{head\ 3701}#
                                      #{r\ 3659}#
                                      '(())
                                      #f
                                      #f
                                      #{mod\ 3662}#
                                      #t))
                                  (lambda (#{type\ 3706}#
                                           #{value\ 3707}#
                                           #{ee\ 3708}#
                                           #{ww\ 3709}#
                                           #{ss\ 3710}#
                                           #{modmod\ 3711}#)
                                    (if (memv #{type\ 3706}#
                                              '(module-ref))
                                      (let ((#{val\ 3720}#
                                              (#{chi\ 452}#
                                                #{val\ 3703}#
                                                #{r\ 3659}#
                                                #{w\ 3660}#
                                                #{mod\ 3662}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 3707}#
                                              (cons #{head\ 3701}#
                                                    #{tail\ 3702}#)
                                              #{r\ 3659}#
                                              #{w\ 3660}#))
                                          (lambda (#{e\ 3722}#
                                                   #{r\ 3723}#
                                                   #{w\ 3724}#
                                                   #{s*\ 3725}#
                                                   #{mod\ 3726}#)
                                            ((lambda (#{tmp\ 3732}#)
                                               ((lambda (#{tmp\ 3733}#)
                                                  (if (if #{tmp\ 3733}#
                                                        (apply (lambda (#{e\ 3735}#)
                                                                 (#{id?\ 367}#
                                                                   #{e\ 3735}#))
                                                               #{tmp\ 3733}#)
                                                        #f)
                                                    (apply (lambda (#{e\ 3737}#)
                                                             (#{build-global-assignment\ 303}#
                                                               #{s\ 3661}#
                                                               (syntax->datum
                                                                 #{e\ 3737}#)
                                                               #{val\ 3720}#
                                                               #{mod\ 3726}#))
                                                           #{tmp\ 3733}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 3732}#)))
                                                (list #{tmp\ 3732}#)))
                                             #{e\ 3722}#))))
                                      (#{build-application\ 289}#
                                        #{s\ 3661}#
                                        (#{chi\ 452}#
                                          (list '#(syntax-object
                                                   setter
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(type
                                                        value
                                                        ee
                                                        ww
                                                        ss
                                                        modmod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3712"
                                                        "i3713"
                                                        "i3714"
                                                        "i3715"
                                                        "i3716"
                                                        "i3717"))
                                                    #(ribcage
                                                      #(_ head tail val)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3696"
                                                        "i3697"
                                                        "i3698"
                                                        "i3699"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e r w s mod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i3663"
                                                        "i3664"
                                                        "i3665"
                                                        "i3666"
                                                        "i3667"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void
                                                        *mode*)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i481"
                                                       "i479"
                                                       "i477"
                                                       "i475"
                                                       "i473"
                                                       "i471"
                                                       "i469"
                                                       "i467"
                                                       "i465"
                                                       "i463"
                                                       "i461"
                                                       "i459"
                                                       "i457"
                                                       "i455"
                                                       "i453"
                                                       "i451"
                                                       "i449"
                                                       "i447"
                                                       "i445"
                                                       "i443"
                                                       "i441"
                                                       "i439"
                                                       "i437"
                                                       "i435"
                                                       "i433"
                                                       "i431"
                                                       "i429"
                                                       "i427"
                                                       "i425"
                                                       "i423"
                                                       "i421"
                                                       "i419"
                                                       "i417"
                                                       "i415"
                                                       "i413"
                                                       "i411"
                                                       "i410"
                                                       "i409"
                                                       "i407"
                                                       "i406"
                                                       "i405"
                                                       "i404"
                                                       "i403"
                                                       "i401"
                                                       "i399"
                                                       "i397"
                                                       "i395"
                                                       "i393"
                                                       "i391"
                                                       "i389"
                                                       "i387"
                                                       "i384"
                                                       "i382"
                                                       "i381"
                                                       "i380"
                                                       "i379"
                                                       "i378"
                                                       "i377"
                                                       "i375"
                                                       "i373"
                                                       "i371"
                                                       "i369"
                                                       "i368"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i360"
                                                       "i358"
                                                       "i356"
                                                       "i354"
                                                       "i353"
                                                       "i351"
                                                       "i349"
                                                       "i348"
                                                       "i347"
                                                       "i345"
                                                       "i344"
                                                       "i342"
                                                       "i340"
                                                       "i338"
                                                       "i336"
                                                       "i334"
                                                       "i332"
                                                       "i330"
                                                       "i328"
                                                       "i326"
                                                       "i324"
                                                       "i322"
                                                       "i320"
                                                       "i318"
                                                       "i316"
                                                       "i314"
                                                       "i312"
                                                       "i310"
                                                       "i308"
                                                       "i306"
                                                       "i304"
                                                       "i302"
                                                       "i300"
                                                       "i298"
                                                       "i296"
                                                       "i294"
                                                       "i292"
                                                       "i290"
                                                       "i288"
                                                       "i286"
                                                       "i284"
                                                       "i282"
                                                       "i280"
                                                       "i279"
                                                       "i277"
                                                       "i275"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i259"
                                                       "i257"
                                                       "i255"
                                                       "i253"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i243"
                                                       "i241"
                                                       "i239"
                                                       "i237"
                                                       "i235"
                                                       "i233"
                                                       "i231"
                                                       "i228"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top))
                                                      ("i28" "i27" "i25")))
                                                   (hygiene guile))
                                                #{head\ 3701}#)
                                          #{r\ 3659}#
                                          #{w\ 3660}#
                                          #{mod\ 3662}#)
                                        (map (lambda (#{e\ 3739}#)
                                               (#{chi\ 452}#
                                                 #{e\ 3739}#
                                                 #{r\ 3659}#
                                                 #{w\ 3660}#
                                                 #{mod\ 3662}#))
                                             (append
                                               #{tail\ 3702}#
                                               (list #{val\ 3703}#))))))))
                              #{tmp\ 3695}#)
                       ((lambda (#{_\ 3743}#)
                          (syntax-violation
                            'set!
                            "bad set!"
                            (#{source-wrap\ 438}#
                              #{e\ 3658}#
                              #{w\ 3660}#
                              #{s\ 3661}#
                              #{mod\ 3662}#)))
                        #{tmp\ 3668}#)))
                   ($sc-dispatch
                     #{tmp\ 3668}#
                     '(any (any . each-any) any)))))
              ($sc-dispatch
                #{tmp\ 3668}#
                '(any any any))))
           #{e\ 3658}#)))
      (#{global-extend\ 363}#
        'module-ref
        '@
        (lambda (#{e\ 3744}# #{r\ 3745}# #{w\ 3746}#)
          ((lambda (#{tmp\ 3750}#)
             ((lambda (#{tmp\ 3751}#)
                (if (if #{tmp\ 3751}#
                      (apply (lambda (#{_\ 3755}# #{mod\ 3756}# #{id\ 3757}#)
                               (if (and-map #{id?\ 367}# #{mod\ 3756}#)
                                 (#{id?\ 367}# #{id\ 3757}#)
                                 #f))
                             #{tmp\ 3751}#)
                      #f)
                  (apply (lambda (#{_\ 3764}# #{mod\ 3765}# #{id\ 3766}#)
                           (values
                             (syntax->datum #{id\ 3766}#)
                             #{r\ 3745}#
                             #{w\ 3746}#
                             #f
                             (syntax->datum
                               (cons '#(syntax-object
                                        public
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i3761" "i3762" "i3763"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(e r w)
                                           #((top) (top) (top))
                                           #("i3747" "i3748" "i3749"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void
                                             *mode*)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i481"
                                            "i479"
                                            "i477"
                                            "i475"
                                            "i473"
                                            "i471"
                                            "i469"
                                            "i467"
                                            "i465"
                                            "i463"
                                            "i461"
                                            "i459"
                                            "i457"
                                            "i455"
                                            "i453"
                                            "i451"
                                            "i449"
                                            "i447"
                                            "i445"
                                            "i443"
                                            "i441"
                                            "i439"
                                            "i437"
                                            "i435"
                                            "i433"
                                            "i431"
                                            "i429"
                                            "i427"
                                            "i425"
                                            "i423"
                                            "i421"
                                            "i419"
                                            "i417"
                                            "i415"
                                            "i413"
                                            "i411"
                                            "i410"
                                            "i409"
                                            "i407"
                                            "i406"
                                            "i405"
                                            "i404"
                                            "i403"
                                            "i401"
                                            "i399"
                                            "i397"
                                            "i395"
                                            "i393"
                                            "i391"
                                            "i389"
                                            "i387"
                                            "i384"
                                            "i382"
                                            "i381"
                                            "i380"
                                            "i379"
                                            "i378"
                                            "i377"
                                            "i375"
                                            "i373"
                                            "i371"
                                            "i369"
                                            "i368"
                                            "i366"
                                            "i364"
                                            "i362"
                                            "i360"
                                            "i358"
                                            "i356"
                                            "i354"
                                            "i353"
                                            "i351"
                                            "i349"
                                            "i348"
                                            "i347"
                                            "i345"
                                            "i344"
                                            "i342"
                                            "i340"
                                            "i338"
                                            "i336"
                                            "i334"
                                            "i332"
                                            "i330"
                                            "i328"
                                            "i326"
                                            "i324"
                                            "i322"
                                            "i320"
                                            "i318"
                                            "i316"
                                            "i314"
                                            "i312"
                                            "i310"
                                            "i308"
                                            "i306"
                                            "i304"
                                            "i302"
                                            "i300"
                                            "i298"
                                            "i296"
                                            "i294"
                                            "i292"
                                            "i290"
                                            "i288"
                                            "i286"
                                            "i284"
                                            "i282"
                                            "i280"
                                            "i279"
                                            "i277"
                                            "i275"
                                            "i273"
                                            "i271"
                                            "i269"
                                            "i267"
                                            "i265"
                                            "i263"
                                            "i261"
                                            "i259"
                                            "i257"
                                            "i255"
                                            "i253"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i245"
                                            "i243"
                                            "i241"
                                            "i239"
                                            "i237"
                                            "i235"
                                            "i233"
                                            "i231"
                                            "i228"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-constructors
                                             and-map*)
                                           ((top) (top) (top))
                                           ("i28" "i27" "i25")))
                                        (hygiene guile))
                                     #{mod\ 3765}#))))
                         #{tmp\ 3751}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3750}#)))
              ($sc-dispatch
                #{tmp\ 3750}#
                '(any each-any any))))
           #{e\ 3744}#)))
      (#{global-extend\ 363}#
        'module-ref
        '@@
        (lambda (#{e\ 3768}# #{r\ 3769}# #{w\ 3770}#)
          (letrec ((#{remodulate\ 3775}#
                     (lambda (#{x\ 3776}# #{mod\ 3777}#)
                       (if (pair? #{x\ 3776}#)
                         (cons (#{remodulate\ 3775}#
                                 (car #{x\ 3776}#)
                                 #{mod\ 3777}#)
                               (#{remodulate\ 3775}#
                                 (cdr #{x\ 3776}#)
                                 #{mod\ 3777}#))
                         (if (#{syntax-object?\ 331}# #{x\ 3776}#)
                           (#{make-syntax-object\ 329}#
                             (#{remodulate\ 3775}#
                               (#{syntax-object-expression\ 333}# #{x\ 3776}#)
                               #{mod\ 3777}#)
                             (#{syntax-object-wrap\ 335}# #{x\ 3776}#)
                             #{mod\ 3777}#)
                           (if (vector? #{x\ 3776}#)
                             (let ((#{n\ 3788}# (vector-length #{x\ 3776}#)))
                               (let ((#{v\ 3790}# (make-vector #{n\ 3788}#)))
                                 (letrec ((#{loop\ 3793}#
                                            (lambda (#{i\ 3794}#)
                                              (if (#{fx=\ 272}#
                                                    #{i\ 3794}#
                                                    #{n\ 3788}#)
                                                (begin (if #f #f) #{v\ 3790}#)
                                                (begin
                                                  (vector-set!
                                                    #{v\ 3790}#
                                                    #{i\ 3794}#
                                                    (#{remodulate\ 3775}#
                                                      (vector-ref
                                                        #{x\ 3776}#
                                                        #{i\ 3794}#)
                                                      #{mod\ 3777}#))
                                                  (#{loop\ 3793}#
                                                    (#{fx+\ 268}#
                                                      #{i\ 3794}#
                                                      1)))))))
                                   (#{loop\ 3793}# 0))))
                             #{x\ 3776}#))))))
            ((lambda (#{tmp\ 3798}#)
               ((lambda (#{tmp\ 3799}#)
                  (if (if #{tmp\ 3799}#
                        (apply (lambda (#{_\ 3803}#
                                        #{mod\ 3804}#
                                        #{exp\ 3805}#)
                                 (and-map #{id?\ 367}# #{mod\ 3804}#))
                               #{tmp\ 3799}#)
                        #f)
                    (apply (lambda (#{_\ 3810}# #{mod\ 3811}# #{exp\ 3812}#)
                             (let ((#{mod\ 3814}#
                                     (syntax->datum
                                       (cons '#(syntax-object
                                                private
                                                ((top)
                                                 #(ribcage
                                                   #(_ mod exp)
                                                   #((top) (top) (top))
                                                   #("i3807" "i3808" "i3809"))
                                                 #(ribcage
                                                   (remodulate)
                                                   ((top))
                                                   ("i3774"))
                                                 #(ribcage
                                                   #(e r w)
                                                   #((top) (top) (top))
                                                   #("i3771" "i3772" "i3773"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     chi-lambda-case
                                                     lambda*-formals
                                                     chi-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     chi-void
                                                     eval-local-transformer
                                                     chi-local-syntax
                                                     chi-body
                                                     chi-macro
                                                     chi-application
                                                     chi-expr
                                                     chi
                                                     chi-top
                                                     syntax-type
                                                     chi-when-list
                                                     chi-install-global
                                                     chi-top-sequence
                                                     chi-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     maybe-name-value!
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void
                                                     *mode*)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i481"
                                                    "i479"
                                                    "i477"
                                                    "i475"
                                                    "i473"
                                                    "i471"
                                                    "i469"
                                                    "i467"
                                                    "i465"
                                                    "i463"
                                                    "i461"
                                                    "i459"
                                                    "i457"
                                                    "i455"
                                                    "i453"
                                                    "i451"
                                                    "i449"
                                                    "i447"
                                                    "i445"
                                                    "i443"
                                                    "i441"
                                                    "i439"
                                                    "i437"
                                                    "i435"
                                                    "i433"
                                                    "i431"
                                                    "i429"
                                                    "i427"
                                                    "i425"
                                                    "i423"
                                                    "i421"
                                                    "i419"
                                                    "i417"
                                                    "i415"
                                                    "i413"
                                                    "i411"
                                                    "i410"
                                                    "i409"
                                                    "i407"
                                                    "i406"
                                                    "i405"
                                                    "i404"
                                                    "i403"
                                                    "i401"
                                                    "i399"
                                                    "i397"
                                                    "i395"
                                                    "i393"
                                                    "i391"
                                                    "i389"
                                                    "i387"
                                                    "i384"
                                                    "i382"
                                                    "i381"
                                                    "i380"
                                                    "i379"
                                                    "i378"
                                                    "i377"
                                                    "i375"
                                                    "i373"
                                                    "i371"
                                                    "i369"
                                                    "i368"
                                                    "i366"
                                                    "i364"
                                                    "i362"
                                                    "i360"
                                                    "i358"
                                                    "i356"
                                                    "i354"
                                                    "i353"
                                                    "i351"
                                                    "i349"
                                                    "i348"
                                                    "i347"
                                                    "i345"
                                                    "i344"
                                                    "i342"
                                                    "i340"
                                                    "i338"
                                                    "i336"
                                                    "i334"
                                                    "i332"
                                                    "i330"
                                                    "i328"
                                                    "i326"
                                                    "i324"
                                                    "i322"
                                                    "i320"
                                                    "i318"
                                                    "i316"
                                                    "i314"
                                                    "i312"
                                                    "i310"
                                                    "i308"
                                                    "i306"
                                                    "i304"
                                                    "i302"
                                                    "i300"
                                                    "i298"
                                                    "i296"
                                                    "i294"
                                                    "i292"
                                                    "i290"
                                                    "i288"
                                                    "i286"
                                                    "i284"
                                                    "i282"
                                                    "i280"
                                                    "i279"
                                                    "i277"
                                                    "i275"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i259"
                                                    "i257"
                                                    "i255"
                                                    "i253"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i243"
                                                    "i241"
                                                    "i239"
                                                    "i237"
                                                    "i235"
                                                    "i233"
                                                    "i231"
                                                    "i228"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-constructors
                                                     and-map*)
                                                   ((top) (top) (top))
                                                   ("i28" "i27" "i25")))
                                                (hygiene guile))
                                             #{mod\ 3811}#))))
                               (values
                                 (#{remodulate\ 3775}#
                                   #{exp\ 3812}#
                                   #{mod\ 3814}#)
                                 #{r\ 3769}#
                                 #{w\ 3770}#
                                 (#{source-annotation\ 346}# #{exp\ 3812}#)
                                 #{mod\ 3814}#)))
                           #{tmp\ 3799}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 3798}#)))
                ($sc-dispatch
                  #{tmp\ 3798}#
                  '(any each-any any))))
             #{e\ 3768}#))))
      (#{global-extend\ 363}#
        'core
        'if
        (lambda (#{e\ 3816}#
                 #{r\ 3817}#
                 #{w\ 3818}#
                 #{s\ 3819}#
                 #{mod\ 3820}#)
          ((lambda (#{tmp\ 3826}#)
             ((lambda (#{tmp\ 3827}#)
                (if #{tmp\ 3827}#
                  (apply (lambda (#{_\ 3831}# #{test\ 3832}# #{then\ 3833}#)
                           (#{build-conditional\ 291}#
                             #{s\ 3819}#
                             (#{chi\ 452}#
                               #{test\ 3832}#
                               #{r\ 3817}#
                               #{w\ 3818}#
                               #{mod\ 3820}#)
                             (#{chi\ 452}#
                               #{then\ 3833}#
                               #{r\ 3817}#
                               #{w\ 3818}#
                               #{mod\ 3820}#)
                             (#{build-void\ 287}# #f)))
                         #{tmp\ 3827}#)
                  ((lambda (#{tmp\ 3835}#)
                     (if #{tmp\ 3835}#
                       (apply (lambda (#{_\ 3840}#
                                       #{test\ 3841}#
                                       #{then\ 3842}#
                                       #{else\ 3843}#)
                                (#{build-conditional\ 291}#
                                  #{s\ 3819}#
                                  (#{chi\ 452}#
                                    #{test\ 3841}#
                                    #{r\ 3817}#
                                    #{w\ 3818}#
                                    #{mod\ 3820}#)
                                  (#{chi\ 452}#
                                    #{then\ 3842}#
                                    #{r\ 3817}#
                                    #{w\ 3818}#
                                    #{mod\ 3820}#)
                                  (#{chi\ 452}#
                                    #{else\ 3843}#
                                    #{r\ 3817}#
                                    #{w\ 3818}#
                                    #{mod\ 3820}#)))
                              #{tmp\ 3835}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 3826}#)))
                   ($sc-dispatch
                     #{tmp\ 3826}#
                     '(any any any any)))))
              ($sc-dispatch
                #{tmp\ 3826}#
                '(any any any))))
           #{e\ 3816}#)))
      (#{global-extend\ 363}#
        'core
        'with-fluids
        (lambda (#{e\ 3844}#
                 #{r\ 3845}#
                 #{w\ 3846}#
                 #{s\ 3847}#
                 #{mod\ 3848}#)
          ((lambda (#{tmp\ 3854}#)
             ((lambda (#{tmp\ 3855}#)
                (if #{tmp\ 3855}#
                  (apply (lambda (#{_\ 3861}#
                                  #{fluid\ 3862}#
                                  #{val\ 3863}#
                                  #{b\ 3864}#
                                  #{b*\ 3865}#)
                           (#{build-dynlet\ 293}#
                             #{s\ 3847}#
                             (map (lambda (#{x\ 3866}#)
                                    (#{chi\ 452}#
                                      #{x\ 3866}#
                                      #{r\ 3845}#
                                      #{w\ 3846}#
                                      #{mod\ 3848}#))
                                  #{fluid\ 3862}#)
                             (map (lambda (#{x\ 3869}#)
                                    (#{chi\ 452}#
                                      #{x\ 3869}#
                                      #{r\ 3845}#
                                      #{w\ 3846}#
                                      #{mod\ 3848}#))
                                  #{val\ 3863}#)
                             (#{chi-body\ 460}#
                               (cons #{b\ 3864}# #{b*\ 3865}#)
                               (#{source-wrap\ 438}#
                                 #{e\ 3844}#
                                 #{w\ 3846}#
                                 #{s\ 3847}#
                                 #{mod\ 3848}#)
                               #{r\ 3845}#
                               #{w\ 3846}#
                               #{mod\ 3848}#)))
                         #{tmp\ 3855}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 3854}#)))
              ($sc-dispatch
                #{tmp\ 3854}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 3844}#)))
      (#{global-extend\ 363}#
        'begin
        'begin
        '())
      (#{global-extend\ 363}#
        'define
        'define
        '())
      (#{global-extend\ 363}#
        'define-syntax
        'define-syntax
        '())
      (#{global-extend\ 363}#
        'eval-when
        'eval-when
        '())
      (#{global-extend\ 363}#
        'core
        'syntax-case
        (letrec ((#{gen-syntax-case\ 3880}#
                   (lambda (#{x\ 3881}#
                            #{keys\ 3882}#
                            #{clauses\ 3883}#
                            #{r\ 3884}#
                            #{mod\ 3885}#)
                     (if (null? #{clauses\ 3883}#)
                       (#{build-application\ 289}#
                         #f
                         (#{build-primref\ 315}#
                           #f
                           'syntax-violation)
                         (list (#{build-data\ 317}# #f #f)
                               (#{build-data\ 317}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 3881}#))
                       ((lambda (#{tmp\ 3895}#)
                          ((lambda (#{tmp\ 3896}#)
                             (if #{tmp\ 3896}#
                               (apply (lambda (#{pat\ 3899}# #{exp\ 3900}#)
                                        (if (if (#{id?\ 367}# #{pat\ 3899}#)
                                              (and-map
                                                (lambda (#{x\ 3903}#)
                                                  (not (#{free-id=?\ 426}#
                                                         #{pat\ 3899}#
                                                         #{x\ 3903}#)))
                                                (cons '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(pat exp)
                                                            #((top) (top))
                                                            #("i3897" "i3898"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x
                                                              keys
                                                              clauses
                                                              r
                                                              mod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i3886"
                                                              "i3887"
                                                              "i3888"
                                                              "i3889"
                                                              "i3890"))
                                                          #(ribcage
                                                            (gen-syntax-case
                                                              gen-clause
                                                              build-dispatch-call
                                                              convert-pattern)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i3879"
                                                             "i3877"
                                                             "i3875"
                                                             "i3873"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              chi-top
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              maybe-name-value!
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void
                                                              *mode*)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i481"
                                                             "i479"
                                                             "i477"
                                                             "i475"
                                                             "i473"
                                                             "i471"
                                                             "i469"
                                                             "i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i410"
                                                             "i409"
                                                             "i407"
                                                             "i406"
                                                             "i405"
                                                             "i404"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i397"
                                                             "i395"
                                                             "i393"
                                                             "i391"
                                                             "i389"
                                                             "i387"
                                                             "i384"
                                                             "i382"
                                                             "i381"
                                                             "i380"
                                                             "i379"
                                                             "i378"
                                                             "i377"
                                                             "i375"
                                                             "i373"
                                                             "i371"
                                                             "i369"
                                                             "i368"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i356"
                                                             "i354"
                                                             "i353"
                                                             "i351"
                                                             "i349"
                                                             "i348"
                                                             "i347"
                                                             "i345"
                                                             "i344"
                                                             "i342"
                                                             "i340"
                                                             "i338"
                                                             "i336"
                                                             "i334"
                                                             "i332"
                                                             "i330"
                                                             "i328"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i306"
                                                             "i304"
                                                             "i302"
                                                             "i300"
                                                             "i298"
                                                             "i296"
                                                             "i294"
                                                             "i292"
                                                             "i290"
                                                             "i288"
                                                             "i286"
                                                             "i284"
                                                             "i282"
                                                             "i280"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i259"
                                                             "i257"
                                                             "i255"
                                                             "i253"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i243"
                                                             "i241"
                                                             "i239"
                                                             "i237"
                                                             "i235"
                                                             "i233"
                                                             "i231"
                                                             "i228"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-constructors
                                                              and-map*)
                                                            ((top) (top) (top))
                                                            ("i28"
                                                             "i27"
                                                             "i25")))
                                                         (hygiene guile))
                                                      #{keys\ 3882}#))
                                              #f)
                                          (let ((#{labels\ 3907}#
                                                  (list (#{gen-label\ 383}#)))
                                                (#{var\ 3908}#
                                                  (#{gen-var\ 480}#
                                                    #{pat\ 3899}#)))
                                            (#{build-application\ 289}#
                                              #f
                                              (#{build-simple-lambda\ 309}#
                                                #f
                                                (list (syntax->datum
                                                        #{pat\ 3899}#))
                                                #f
                                                (list #{var\ 3908}#)
                                                '()
                                                (#{chi\ 452}#
                                                  #{exp\ 3900}#
                                                  (#{extend-env\ 355}#
                                                    #{labels\ 3907}#
                                                    (list (cons 'syntax
                                                                (cons #{var\ 3908}#
                                                                      0)))
                                                    #{r\ 3884}#)
                                                  (#{make-binding-wrap\ 414}#
                                                    (list #{pat\ 3899}#)
                                                    #{labels\ 3907}#
                                                    '(()))
                                                  #{mod\ 3885}#))
                                              (list #{x\ 3881}#)))
                                          (#{gen-clause\ 3878}#
                                            #{x\ 3881}#
                                            #{keys\ 3882}#
                                            (cdr #{clauses\ 3883}#)
                                            #{r\ 3884}#
                                            #{pat\ 3899}#
                                            #t
                                            #{exp\ 3900}#
                                            #{mod\ 3885}#)))
                                      #{tmp\ 3896}#)
                               ((lambda (#{tmp\ 3914}#)
                                  (if #{tmp\ 3914}#
                                    (apply (lambda (#{pat\ 3918}#
                                                    #{fender\ 3919}#
                                                    #{exp\ 3920}#)
                                             (#{gen-clause\ 3878}#
                                               #{x\ 3881}#
                                               #{keys\ 3882}#
                                               (cdr #{clauses\ 3883}#)
                                               #{r\ 3884}#
                                               #{pat\ 3918}#
                                               #{fender\ 3919}#
                                               #{exp\ 3920}#
                                               #{mod\ 3885}#))
                                           #{tmp\ 3914}#)
                                    ((lambda (#{_\ 3922}#)
                                       (syntax-violation
                                         'syntax-case
                                         "invalid clause"
                                         (car #{clauses\ 3883}#)))
                                     #{tmp\ 3895}#)))
                                ($sc-dispatch
                                  #{tmp\ 3895}#
                                  '(any any any)))))
                           ($sc-dispatch #{tmp\ 3895}# (quote (any any)))))
                        (car #{clauses\ 3883}#)))))
                 (#{gen-clause\ 3878}#
                   (lambda (#{x\ 3923}#
                            #{keys\ 3924}#
                            #{clauses\ 3925}#
                            #{r\ 3926}#
                            #{pat\ 3927}#
                            #{fender\ 3928}#
                            #{exp\ 3929}#
                            #{mod\ 3930}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 3874}#
                           #{pat\ 3927}#
                           #{keys\ 3924}#))
                       (lambda (#{p\ 3939}# #{pvars\ 3940}#)
                         (if (not (#{distinct-bound-ids?\ 432}#
                                    (map car #{pvars\ 3940}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 3927}#)
                           (if (not (and-map
                                      (lambda (#{x\ 3947}#)
                                        (not (#{ellipsis?\ 468}#
                                               (car #{x\ 3947}#))))
                                      #{pvars\ 3940}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 3927}#)
                             (let ((#{y\ 3951}#
                                     (#{gen-var\ 480}# (quote tmp))))
                               (#{build-application\ 289}#
                                 #f
                                 (#{build-simple-lambda\ 309}#
                                   #f
                                   (list (quote tmp))
                                   #f
                                   (list #{y\ 3951}#)
                                   '()
                                   (let ((#{y\ 3955}#
                                           (#{build-lexical-reference\ 295}#
                                             'value
                                             #f
                                             'tmp
                                             #{y\ 3951}#)))
                                     (#{build-conditional\ 291}#
                                       #f
                                       ((lambda (#{tmp\ 3958}#)
                                          ((lambda (#{tmp\ 3959}#)
                                             (if #{tmp\ 3959}#
                                               (apply (lambda () #{y\ 3955}#)
                                                      #{tmp\ 3959}#)
                                               ((lambda (#{_\ 3961}#)
                                                  (#{build-conditional\ 291}#
                                                    #f
                                                    #{y\ 3955}#
                                                    (#{build-dispatch-call\ 3876}#
                                                      #{pvars\ 3940}#
                                                      #{fender\ 3928}#
                                                      #{y\ 3955}#
                                                      #{r\ 3926}#
                                                      #{mod\ 3930}#)
                                                    (#{build-data\ 317}#
                                                      #f
                                                      #f)))
                                                #{tmp\ 3958}#)))
                                           ($sc-dispatch
                                             #{tmp\ 3958}#
                                             '#(atom #t))))
                                        #{fender\ 3928}#)
                                       (#{build-dispatch-call\ 3876}#
                                         #{pvars\ 3940}#
                                         #{exp\ 3929}#
                                         #{y\ 3955}#
                                         #{r\ 3926}#
                                         #{mod\ 3930}#)
                                       (#{gen-syntax-case\ 3880}#
                                         #{x\ 3923}#
                                         #{keys\ 3924}#
                                         #{clauses\ 3925}#
                                         #{r\ 3926}#
                                         #{mod\ 3930}#))))
                                 (list (if (eq? #{p\ 3939}# (quote any))
                                         (#{build-application\ 289}#
                                           #f
                                           (#{build-primref\ 315}#
                                             #f
                                             'list)
                                           (list #{x\ 3923}#))
                                         (#{build-application\ 289}#
                                           #f
                                           (#{build-primref\ 315}#
                                             #f
                                             '$sc-dispatch)
                                           (list #{x\ 3923}#
                                                 (#{build-data\ 317}#
                                                   #f
                                                   #{p\ 3939}#)))))))))))))
                 (#{build-dispatch-call\ 3876}#
                   (lambda (#{pvars\ 3969}#
                            #{exp\ 3970}#
                            #{y\ 3971}#
                            #{r\ 3972}#
                            #{mod\ 3973}#)
                     (let ((#{ids\ 3981}# (map car #{pvars\ 3969}#))
                           (#{levels\ 3982}# (map cdr #{pvars\ 3969}#)))
                       (let ((#{labels\ 3985}#
                               (#{gen-labels\ 385}# #{ids\ 3981}#))
                             (#{new-vars\ 3986}#
                               (map #{gen-var\ 480}# #{ids\ 3981}#)))
                         (#{build-application\ 289}#
                           #f
                           (#{build-primref\ 315}# #f (quote apply))
                           (list (#{build-simple-lambda\ 309}#
                                   #f
                                   (map syntax->datum #{ids\ 3981}#)
                                   #f
                                   #{new-vars\ 3986}#
                                   '()
                                   (#{chi\ 452}#
                                     #{exp\ 3970}#
                                     (#{extend-env\ 355}#
                                       #{labels\ 3985}#
                                       (map (lambda (#{var\ 3990}#
                                                     #{level\ 3991}#)
                                              (cons 'syntax
                                                    (cons #{var\ 3990}#
                                                          #{level\ 3991}#)))
                                            #{new-vars\ 3986}#
                                            (map cdr #{pvars\ 3969}#))
                                       #{r\ 3972}#)
                                     (#{make-binding-wrap\ 414}#
                                       #{ids\ 3981}#
                                       #{labels\ 3985}#
                                       '(()))
                                     #{mod\ 3973}#))
                                 #{y\ 3971}#))))))
                 (#{convert-pattern\ 3874}#
                   (lambda (#{pattern\ 3997}# #{keys\ 3998}#)
                     (letrec ((#{cvt\ 4004}#
                                (lambda (#{p\ 4005}# #{n\ 4006}# #{ids\ 4007}#)
                                  (if (#{id?\ 367}# #{p\ 4005}#)
                                    (if (#{bound-id-member?\ 434}#
                                          #{p\ 4005}#
                                          #{keys\ 3998}#)
                                      (values
                                        (vector (quote free-id) #{p\ 4005}#)
                                        #{ids\ 4007}#)
                                      (values
                                        'any
                                        (cons (cons #{p\ 4005}# #{n\ 4006}#)
                                              #{ids\ 4007}#)))
                                    ((lambda (#{tmp\ 4011}#)
                                       ((lambda (#{tmp\ 4012}#)
                                          (if (if #{tmp\ 4012}#
                                                (apply (lambda (#{x\ 4015}#
                                                                #{dots\ 4016}#)
                                                         (#{ellipsis?\ 468}#
                                                           #{dots\ 4016}#))
                                                       #{tmp\ 4012}#)
                                                #f)
                                            (apply (lambda (#{x\ 4019}#
                                                            #{dots\ 4020}#)
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{cvt\ 4004}#
                                                           #{x\ 4019}#
                                                           (#{fx+\ 268}#
                                                             #{n\ 4006}#
                                                             1)
                                                           #{ids\ 4007}#))
                                                       (lambda (#{p\ 4021}#
                                                                #{ids\ 4022}#)
                                                         (values
                                                           (if (eq? #{p\ 4021}#
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               #{p\ 4021}#))
                                                           #{ids\ 4022}#))))
                                                   #{tmp\ 4012}#)
                                            ((lambda (#{tmp\ 4025}#)
                                               (if (if #{tmp\ 4025}#
                                                     (apply (lambda (#{x\ 4029}#
                                                                     #{dots\ 4030}#
                                                                     #{ys\ 4031}#)
                                                              (#{ellipsis?\ 468}#
                                                                #{dots\ 4030}#))
                                                            #{tmp\ 4025}#)
                                                     #f)
                                                 (apply (lambda (#{x\ 4035}#
                                                                 #{dots\ 4036}#
                                                                 #{ys\ 4037}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{cvt*\ 4002}#
                                                                #{ys\ 4037}#
                                                                #{n\ 4006}#
                                                                #{ids\ 4007}#))
                                                            (lambda (#{ys\ 4039}#
                                                                     #{ids\ 4040}#)
                                                              (call-with-values
                                                                (lambda ()
                                                                  (#{cvt\ 4004}#
                                                                    #{x\ 4035}#
                                                                    (+ #{n\ 4006}#
                                                                       1)
                                                                    #{ids\ 4040}#))
                                                                (lambda (#{x\ 4043}#
                                                                         #{ids\ 4044}#)
                                                                  (values
                                                                    (list->vector
                                                                      (cons 'each+
                                                                            (cons #{x\ 4043}#
                                                                                  (cons (reverse
                                                                                          #{ys\ 4039}#)
                                                                                        '(())))))
                                                                    #{ids\ 4044}#))))))
                                                        #{tmp\ 4025}#)
                                                 ((lambda (#{tmp\ 4048}#)
                                                    (if #{tmp\ 4048}#
                                                      (apply (lambda (#{x\ 4051}#
                                                                      #{y\ 4052}#)
                                                               (call-with-values
                                                                 (lambda ()
                                                                   (#{cvt\ 4004}#
                                                                     #{y\ 4052}#
                                                                     #{n\ 4006}#
                                                                     #{ids\ 4007}#))
                                                                 (lambda (#{y\ 4053}#
                                                                          #{ids\ 4054}#)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (#{cvt\ 4004}#
                                                                         #{x\ 4051}#
                                                                         #{n\ 4006}#
                                                                         #{ids\ 4054}#))
                                                                     (lambda (#{x\ 4057}#
                                                                              #{ids\ 4058}#)
                                                                       (values
                                                                         (cons #{x\ 4057}#
                                                                               #{y\ 4053}#)
                                                                         #{ids\ 4058}#))))))
                                                             #{tmp\ 4048}#)
                                                      ((lambda (#{tmp\ 4061}#)
                                                         (if #{tmp\ 4061}#
                                                           (apply (lambda ()
                                                                    (values
                                                                      '()
                                                                      #{ids\ 4007}#))
                                                                  #{tmp\ 4061}#)
                                                           ((lambda (#{tmp\ 4062}#)
                                                              (if #{tmp\ 4062}#
                                                                (apply (lambda (#{x\ 4064}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{cvt\ 4004}#
                                                                               #{x\ 4064}#
                                                                               #{n\ 4006}#
                                                                               #{ids\ 4007}#))
                                                                           (lambda (#{p\ 4066}#
                                                                                    #{ids\ 4067}#)
                                                                             (values
                                                                               (vector
                                                                                 'vector
                                                                                 #{p\ 4066}#)
                                                                               #{ids\ 4067}#))))
                                                                       #{tmp\ 4062}#)
                                                                ((lambda (#{x\ 4071}#)
                                                                   (values
                                                                     (vector
                                                                       'atom
                                                                       (#{strip\ 478}#
                                                                         #{p\ 4005}#
                                                                         '(())))
                                                                     #{ids\ 4007}#))
                                                                 #{tmp\ 4011}#)))
                                                            ($sc-dispatch
                                                              #{tmp\ 4011}#
                                                              '#(vector
                                                                 each-any)))))
                                                       ($sc-dispatch
                                                         #{tmp\ 4011}#
                                                         '()))))
                                                  ($sc-dispatch
                                                    #{tmp\ 4011}#
                                                    '(any . any)))))
                                             ($sc-dispatch
                                               #{tmp\ 4011}#
                                               '(any any . each-any)))))
                                        ($sc-dispatch
                                          #{tmp\ 4011}#
                                          '(any any))))
                                     #{p\ 4005}#))))
                              (#{cvt*\ 4002}#
                                (lambda (#{p*\ 4073}#
                                         #{n\ 4074}#
                                         #{ids\ 4075}#)
                                  (if (null? #{p*\ 4073}#)
                                    (values (quote ()) #{ids\ 4075}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt*\ 4002}#
                                          (cdr #{p*\ 4073}#)
                                          #{n\ 4074}#
                                          #{ids\ 4075}#))
                                      (lambda (#{y\ 4079}# #{ids\ 4080}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 4004}#
                                              (car #{p*\ 4073}#)
                                              #{n\ 4074}#
                                              #{ids\ 4080}#))
                                          (lambda (#{x\ 4083}# #{ids\ 4084}#)
                                            (values
                                              (cons #{x\ 4083}# #{y\ 4079}#)
                                              #{ids\ 4084}#)))))))))
                       (#{cvt\ 4004}# #{pattern\ 3997}# 0 (quote ()))))))
          (lambda (#{e\ 4087}#
                   #{r\ 4088}#
                   #{w\ 4089}#
                   #{s\ 4090}#
                   #{mod\ 4091}#)
            (let ((#{e\ 4098}#
                    (#{source-wrap\ 438}#
                      #{e\ 4087}#
                      #{w\ 4089}#
                      #{s\ 4090}#
                      #{mod\ 4091}#)))
              ((lambda (#{tmp\ 4099}#)
                 ((lambda (#{tmp\ 4100}#)
                    (if #{tmp\ 4100}#
                      (apply (lambda (#{_\ 4105}#
                                      #{val\ 4106}#
                                      #{key\ 4107}#
                                      #{m\ 4108}#)
                               (if (and-map
                                     (lambda (#{x\ 4109}#)
                                       (if (#{id?\ 367}# #{x\ 4109}#)
                                         (not (#{ellipsis?\ 468}# #{x\ 4109}#))
                                         #f))
                                     #{key\ 4107}#)
                                 (let ((#{x\ 4115}#
                                         (#{gen-var\ 480}# (quote tmp))))
                                   (#{build-application\ 289}#
                                     #{s\ 4090}#
                                     (#{build-simple-lambda\ 309}#
                                       #f
                                       (list (quote tmp))
                                       #f
                                       (list #{x\ 4115}#)
                                       '()
                                       (#{gen-syntax-case\ 3880}#
                                         (#{build-lexical-reference\ 295}#
                                           'value
                                           #f
                                           'tmp
                                           #{x\ 4115}#)
                                         #{key\ 4107}#
                                         #{m\ 4108}#
                                         #{r\ 4088}#
                                         #{mod\ 4091}#))
                                     (list (#{chi\ 452}#
                                             #{val\ 4106}#
                                             #{r\ 4088}#
                                             '(())
                                             #{mod\ 4091}#))))
                                 (syntax-violation
                                   'syntax-case
                                   "invalid literals list"
                                   #{e\ 4098}#)))
                             #{tmp\ 4100}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4099}#)))
                  ($sc-dispatch
                    #{tmp\ 4099}#
                    '(any any each-any . each-any))))
               #{e\ 4098}#)))))
      (set! macroexpand
        (lambda (#{x\ 4121}# . #{rest\ 4122}#)
          (let ((#{m\ 4128}#
                  (if (null? #{rest\ 4122}#)
                    'e
                    (car #{rest\ 4122}#)))
                (#{esew\ 4129}#
                  (if (let ((#{t\ 4133}# (null? #{rest\ 4122}#)))
                        (if #{t\ 4133}#
                          #{t\ 4133}#
                          (null? (cdr #{rest\ 4122}#))))
                    '(eval)
                    (cadr #{rest\ 4122}#)))
                (#{mod\ 4130}#
                  (cons 'hygiene
                        (module-name (current-module)))))
            (with-fluids
              ((#{*mode*\ 229}# #{m\ 4128}#))
              (if (eq? #{m\ 4128}# (quote e))
                (memoize-expression
                  (#{chi-top\ 450}#
                    #{x\ 4121}#
                    '()
                    '((top))
                    #{m\ 4128}#
                    #{esew\ 4129}#
                    #{mod\ 4130}#))
                (#{chi-top\ 450}#
                  #{x\ 4121}#
                  '()
                  '((top))
                  #{m\ 4128}#
                  #{esew\ 4129}#
                  #{mod\ 4130}#))))))
      (set! identifier?
        (lambda (#{x\ 4139}#)
          (#{nonsymbol-id?\ 365}# #{x\ 4139}#)))
      (set! datum->syntax
        (lambda (#{id\ 4141}# #{datum\ 4142}#)
          (#{make-syntax-object\ 329}#
            #{datum\ 4142}#
            (#{syntax-object-wrap\ 335}# #{id\ 4141}#)
            #f)))
      (set! syntax->datum
        (lambda (#{x\ 4145}#)
          (#{strip\ 478}# #{x\ 4145}# (quote (())))))
      (set! generate-temporaries
        (lambda (#{ls\ 4148}#)
          (begin
            (let ((#{x\ 4152}# #{ls\ 4148}#))
              (if (not (list? #{x\ 4152}#))
                (syntax-violation
                  'generate-temporaries
                  "invalid argument"
                  #{x\ 4152}#)))
            (map (lambda (#{x\ 4153}#)
                   (#{wrap\ 436}# (gensym) (quote ((top))) #f))
                 #{ls\ 4148}#))))
      (set! free-identifier=?
        (lambda (#{x\ 4157}# #{y\ 4158}#)
          (begin
            (let ((#{x\ 4163}# #{x\ 4157}#))
              (if (not (#{nonsymbol-id?\ 365}# #{x\ 4163}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 4163}#)))
            (let ((#{x\ 4166}# #{y\ 4158}#))
              (if (not (#{nonsymbol-id?\ 365}# #{x\ 4166}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 4166}#)))
            (#{free-id=?\ 426}# #{x\ 4157}# #{y\ 4158}#))))
      (set! bound-identifier=?
        (lambda (#{x\ 4167}# #{y\ 4168}#)
          (begin
            (let ((#{x\ 4173}# #{x\ 4167}#))
              (if (not (#{nonsymbol-id?\ 365}# #{x\ 4173}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 4173}#)))
            (let ((#{x\ 4176}# #{y\ 4168}#))
              (if (not (#{nonsymbol-id?\ 365}# #{x\ 4176}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 4176}#)))
            (#{bound-id=?\ 428}# #{x\ 4167}# #{y\ 4168}#))))
      (set! syntax-violation
        (lambda (#{who\ 4177}#
                 #{message\ 4178}#
                 #{form\ 4179}#
                 .
                 #{subform\ 4180}#)
          (begin
            (let ((#{x\ 4187}# #{who\ 4177}#))
              (if (not ((lambda (#{x\ 4188}#)
                          (let ((#{t\ 4192}# (not #{x\ 4188}#)))
                            (if #{t\ 4192}#
                              #{t\ 4192}#
                              (let ((#{t\ 4195}# (string? #{x\ 4188}#)))
                                (if #{t\ 4195}#
                                  #{t\ 4195}#
                                  (symbol? #{x\ 4188}#))))))
                        #{x\ 4187}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 4187}#)))
            (let ((#{x\ 4199}# #{message\ 4178}#))
              (if (not (string? #{x\ 4199}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 4199}#)))
            (scm-error
              'syntax-error
              'macroexpand
              (string-append
                (if #{who\ 4177}# "~a: " "")
                "~a "
                (if (null? #{subform\ 4180}#)
                  "in ~a"
                  "in subform `~s' of `~s'"))
              (let ((#{tail\ 4201}#
                      (cons #{message\ 4178}#
                            (map (lambda (#{x\ 4202}#)
                                   (#{strip\ 478}# #{x\ 4202}# (quote (()))))
                                 (append
                                   #{subform\ 4180}#
                                   (list #{form\ 4179}#))))))
                (if #{who\ 4177}#
                  (cons #{who\ 4177}# #{tail\ 4201}#)
                  #{tail\ 4201}#))
              #f))))
      (letrec ((#{match\ 4218}#
                 (lambda (#{e\ 4219}#
                          #{p\ 4220}#
                          #{w\ 4221}#
                          #{r\ 4222}#
                          #{mod\ 4223}#)
                   (if (not #{r\ 4222}#)
                     #f
                     (if (eq? #{p\ 4220}# (quote any))
                       (cons (#{wrap\ 436}#
                               #{e\ 4219}#
                               #{w\ 4221}#
                               #{mod\ 4223}#)
                             #{r\ 4222}#)
                       (if (#{syntax-object?\ 331}# #{e\ 4219}#)
                         (#{match*\ 4216}#
                           (#{syntax-object-expression\ 333}# #{e\ 4219}#)
                           #{p\ 4220}#
                           (#{join-wraps\ 418}#
                             #{w\ 4221}#
                             (#{syntax-object-wrap\ 335}# #{e\ 4219}#))
                           #{r\ 4222}#
                           (#{syntax-object-module\ 337}# #{e\ 4219}#))
                         (#{match*\ 4216}#
                           #{e\ 4219}#
                           #{p\ 4220}#
                           #{w\ 4221}#
                           #{r\ 4222}#
                           #{mod\ 4223}#))))))
               (#{match*\ 4216}#
                 (lambda (#{e\ 4236}#
                          #{p\ 4237}#
                          #{w\ 4238}#
                          #{r\ 4239}#
                          #{mod\ 4240}#)
                   (if (null? #{p\ 4237}#)
                     (if (null? #{e\ 4236}#) #{r\ 4239}# #f)
                     (if (pair? #{p\ 4237}#)
                       (if (pair? #{e\ 4236}#)
                         (#{match\ 4218}#
                           (car #{e\ 4236}#)
                           (car #{p\ 4237}#)
                           #{w\ 4238}#
                           (#{match\ 4218}#
                             (cdr #{e\ 4236}#)
                             (cdr #{p\ 4237}#)
                             #{w\ 4238}#
                             #{r\ 4239}#
                             #{mod\ 4240}#)
                           #{mod\ 4240}#)
                         #f)
                       (if (eq? #{p\ 4237}# (quote each-any))
                         (let ((#{l\ 4257}#
                                 (#{match-each-any\ 4210}#
                                   #{e\ 4236}#
                                   #{w\ 4238}#
                                   #{mod\ 4240}#)))
                           (if #{l\ 4257}#
                             (cons #{l\ 4257}# #{r\ 4239}#)
                             #f))
                         (let ((#{atom-key\ 4263}# (vector-ref #{p\ 4237}# 0)))
                           (if (memv #{atom-key\ 4263}# (quote (each)))
                             (if (null? #{e\ 4236}#)
                               (#{match-empty\ 4212}#
                                 (vector-ref #{p\ 4237}# 1)
                                 #{r\ 4239}#)
                               (let ((#{l\ 4266}#
                                       (#{match-each\ 4206}#
                                         #{e\ 4236}#
                                         (vector-ref #{p\ 4237}# 1)
                                         #{w\ 4238}#
                                         #{mod\ 4240}#)))
                                 (if #{l\ 4266}#
                                   (letrec ((#{collect\ 4271}#
                                              (lambda (#{l\ 4272}#)
                                                (if (null? (car #{l\ 4272}#))
                                                  #{r\ 4239}#
                                                  (cons (map car #{l\ 4272}#)
                                                        (#{collect\ 4271}#
                                                          (map cdr
                                                               #{l\ 4272}#)))))))
                                     (#{collect\ 4271}# #{l\ 4266}#))
                                   #f)))
                             (if (memv #{atom-key\ 4263}# (quote (each+)))
                               (call-with-values
                                 (lambda ()
                                   (#{match-each+\ 4208}#
                                     #{e\ 4236}#
                                     (vector-ref #{p\ 4237}# 1)
                                     (vector-ref #{p\ 4237}# 2)
                                     (vector-ref #{p\ 4237}# 3)
                                     #{w\ 4238}#
                                     #{r\ 4239}#
                                     #{mod\ 4240}#))
                                 (lambda (#{xr*\ 4274}#
                                          #{y-pat\ 4275}#
                                          #{r\ 4276}#)
                                   (if #{r\ 4276}#
                                     (if (null? #{y-pat\ 4275}#)
                                       (if (null? #{xr*\ 4274}#)
                                         (#{match-empty\ 4212}#
                                           (vector-ref #{p\ 4237}# 1)
                                           #{r\ 4276}#)
                                         (#{combine\ 4214}#
                                           #{xr*\ 4274}#
                                           #{r\ 4276}#))
                                       #f)
                                     #f)))
                               (if (memv #{atom-key\ 4263}# (quote (free-id)))
                                 (if (#{id?\ 367}# #{e\ 4236}#)
                                   (if (#{free-id=?\ 426}#
                                         (#{wrap\ 436}#
                                           #{e\ 4236}#
                                           #{w\ 4238}#
                                           #{mod\ 4240}#)
                                         (vector-ref #{p\ 4237}# 1))
                                     #{r\ 4239}#
                                     #f)
                                   #f)
                                 (if (memv #{atom-key\ 4263}# (quote (atom)))
                                   (if (equal?
                                         (vector-ref #{p\ 4237}# 1)
                                         (#{strip\ 478}#
                                           #{e\ 4236}#
                                           #{w\ 4238}#))
                                     #{r\ 4239}#
                                     #f)
                                   (if (memv #{atom-key\ 4263}#
                                             '(vector))
                                     (if (vector? #{e\ 4236}#)
                                       (#{match\ 4218}#
                                         (vector->list #{e\ 4236}#)
                                         (vector-ref #{p\ 4237}# 1)
                                         #{w\ 4238}#
                                         #{r\ 4239}#
                                         #{mod\ 4240}#)
                                       #f))))))))))))
               (#{combine\ 4214}#
                 (lambda (#{r*\ 4293}# #{r\ 4294}#)
                   (if (null? (car #{r*\ 4293}#))
                     #{r\ 4294}#
                     (cons (map car #{r*\ 4293}#)
                           (#{combine\ 4214}#
                             (map cdr #{r*\ 4293}#)
                             #{r\ 4294}#)))))
               (#{match-empty\ 4212}#
                 (lambda (#{p\ 4297}# #{r\ 4298}#)
                   (if (null? #{p\ 4297}#)
                     #{r\ 4298}#
                     (if (eq? #{p\ 4297}# (quote any))
                       (cons (quote ()) #{r\ 4298}#)
                       (if (pair? #{p\ 4297}#)
                         (#{match-empty\ 4212}#
                           (car #{p\ 4297}#)
                           (#{match-empty\ 4212}#
                             (cdr #{p\ 4297}#)
                             #{r\ 4298}#))
                         (if (eq? #{p\ 4297}# (quote each-any))
                           (cons (quote ()) #{r\ 4298}#)
                           (let ((#{atom-key\ 4312}#
                                   (vector-ref #{p\ 4297}# 0)))
                             (if (memv #{atom-key\ 4312}# (quote (each)))
                               (#{match-empty\ 4212}#
                                 (vector-ref #{p\ 4297}# 1)
                                 #{r\ 4298}#)
                               (if (memv #{atom-key\ 4312}# (quote (each+)))
                                 (#{match-empty\ 4212}#
                                   (vector-ref #{p\ 4297}# 1)
                                   (#{match-empty\ 4212}#
                                     (reverse (vector-ref #{p\ 4297}# 2))
                                     (#{match-empty\ 4212}#
                                       (vector-ref #{p\ 4297}# 3)
                                       #{r\ 4298}#)))
                                 (if (memv #{atom-key\ 4312}#
                                           '(free-id atom))
                                   #{r\ 4298}#
                                   (if (memv #{atom-key\ 4312}#
                                             '(vector))
                                     (#{match-empty\ 4212}#
                                       (vector-ref #{p\ 4297}# 1)
                                       #{r\ 4298}#))))))))))))
               (#{match-each-any\ 4210}#
                 (lambda (#{e\ 4317}# #{w\ 4318}# #{mod\ 4319}#)
                   (if (pair? #{e\ 4317}#)
                     (let ((#{l\ 4326}#
                             (#{match-each-any\ 4210}#
                               (cdr #{e\ 4317}#)
                               #{w\ 4318}#
                               #{mod\ 4319}#)))
                       (if #{l\ 4326}#
                         (cons (#{wrap\ 436}#
                                 (car #{e\ 4317}#)
                                 #{w\ 4318}#
                                 #{mod\ 4319}#)
                               #{l\ 4326}#)
                         #f))
                     (if (null? #{e\ 4317}#)
                       '()
                       (if (#{syntax-object?\ 331}# #{e\ 4317}#)
                         (#{match-each-any\ 4210}#
                           (#{syntax-object-expression\ 333}# #{e\ 4317}#)
                           (#{join-wraps\ 418}#
                             #{w\ 4318}#
                             (#{syntax-object-wrap\ 335}# #{e\ 4317}#))
                           #{mod\ 4319}#)
                         #f)))))
               (#{match-each+\ 4208}#
                 (lambda (#{e\ 4334}#
                          #{x-pat\ 4335}#
                          #{y-pat\ 4336}#
                          #{z-pat\ 4337}#
                          #{w\ 4338}#
                          #{r\ 4339}#
                          #{mod\ 4340}#)
                   (letrec ((#{f\ 4351}#
                              (lambda (#{e\ 4352}# #{w\ 4353}#)
                                (if (pair? #{e\ 4352}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{f\ 4351}#
                                        (cdr #{e\ 4352}#)
                                        #{w\ 4353}#))
                                    (lambda (#{xr*\ 4356}#
                                             #{y-pat\ 4357}#
                                             #{r\ 4358}#)
                                      (if #{r\ 4358}#
                                        (if (null? #{y-pat\ 4357}#)
                                          (let ((#{xr\ 4363}#
                                                  (#{match\ 4218}#
                                                    (car #{e\ 4352}#)
                                                    #{x-pat\ 4335}#
                                                    #{w\ 4353}#
                                                    '()
                                                    #{mod\ 4340}#)))
                                            (if #{xr\ 4363}#
                                              (values
                                                (cons #{xr\ 4363}#
                                                      #{xr*\ 4356}#)
                                                #{y-pat\ 4357}#
                                                #{r\ 4358}#)
                                              (values #f #f #f)))
                                          (values
                                            '()
                                            (cdr #{y-pat\ 4357}#)
                                            (#{match\ 4218}#
                                              (car #{e\ 4352}#)
                                              (car #{y-pat\ 4357}#)
                                              #{w\ 4353}#
                                              #{r\ 4358}#
                                              #{mod\ 4340}#)))
                                        (values #f #f #f))))
                                  (if (#{syntax-object?\ 331}# #{e\ 4352}#)
                                    (#{f\ 4351}#
                                      (#{syntax-object-expression\ 333}#
                                        #{e\ 4352}#)
                                      (#{join-wraps\ 418}#
                                        #{w\ 4353}#
                                        #{e\ 4352}#))
                                    (values
                                      '()
                                      #{y-pat\ 4336}#
                                      (#{match\ 4218}#
                                        #{e\ 4352}#
                                        #{z-pat\ 4337}#
                                        #{w\ 4353}#
                                        #{r\ 4339}#
                                        #{mod\ 4340}#)))))))
                     (#{f\ 4351}# #{e\ 4334}# #{w\ 4338}#))))
               (#{match-each\ 4206}#
                 (lambda (#{e\ 4367}#
                          #{p\ 4368}#
                          #{w\ 4369}#
                          #{mod\ 4370}#)
                   (if (pair? #{e\ 4367}#)
                     (let ((#{first\ 4378}#
                             (#{match\ 4218}#
                               (car #{e\ 4367}#)
                               #{p\ 4368}#
                               #{w\ 4369}#
                               '()
                               #{mod\ 4370}#)))
                       (if #{first\ 4378}#
                         (let ((#{rest\ 4382}#
                                 (#{match-each\ 4206}#
                                   (cdr #{e\ 4367}#)
                                   #{p\ 4368}#
                                   #{w\ 4369}#
                                   #{mod\ 4370}#)))
                           (if #{rest\ 4382}#
                             (cons #{first\ 4378}# #{rest\ 4382}#)
                             #f))
                         #f))
                     (if (null? #{e\ 4367}#)
                       '()
                       (if (#{syntax-object?\ 331}# #{e\ 4367}#)
                         (#{match-each\ 4206}#
                           (#{syntax-object-expression\ 333}# #{e\ 4367}#)
                           #{p\ 4368}#
                           (#{join-wraps\ 418}#
                             #{w\ 4369}#
                             (#{syntax-object-wrap\ 335}# #{e\ 4367}#))
                           (#{syntax-object-module\ 337}# #{e\ 4367}#))
                         #f))))))
        (set! $sc-dispatch
          (lambda (#{e\ 4390}# #{p\ 4391}#)
            (if (eq? #{p\ 4391}# (quote any))
              (list #{e\ 4390}#)
              (if (#{syntax-object?\ 331}# #{e\ 4390}#)
                (#{match*\ 4216}#
                  (#{syntax-object-expression\ 333}# #{e\ 4390}#)
                  #{p\ 4391}#
                  (#{syntax-object-wrap\ 335}# #{e\ 4390}#)
                  '()
                  (#{syntax-object-module\ 337}# #{e\ 4390}#))
                (#{match*\ 4216}#
                  #{e\ 4390}#
                  #{p\ 4391}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (cons (lambda (#{x\ 4400}#)
            ((lambda (#{tmp\ 4402}#)
               ((lambda (#{tmp\ 4403}#)
                  (if #{tmp\ 4403}#
                    (apply (lambda (#{_\ 4407}# #{e1\ 4408}# #{e2\ 4409}#)
                             (cons '#(syntax-object
                                      begin
                                      ((top)
                                       #(ribcage
                                         #(_ e1 e2)
                                         #((top) (top) (top))
                                         #("i4404" "i4405" "i4406"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4401")))
                                      (hygiene guile))
                                   (cons #{e1\ 4408}# #{e2\ 4409}#)))
                           #{tmp\ 4403}#)
                    ((lambda (#{tmp\ 4411}#)
                       (if #{tmp\ 4411}#
                         (apply (lambda (#{_\ 4417}#
                                         #{out\ 4418}#
                                         #{in\ 4419}#
                                         #{e1\ 4420}#
                                         #{e2\ 4421}#)
                                  (list '#(syntax-object
                                           syntax-case
                                           ((top)
                                            #(ribcage
                                              #(_ out in e1 e2)
                                              #((top) (top) (top) (top) (top))
                                              #("i4412"
                                                "i4413"
                                                "i4414"
                                                "i4415"
                                                "i4416"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4401")))
                                           (hygiene guile))
                                        #{in\ 4419}#
                                        '()
                                        (list #{out\ 4418}#
                                              (cons '#(syntax-object
                                                       begin
                                                       ((top)
                                                        #(ribcage
                                                          #(_ out in e1 e2)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4412"
                                                            "i4413"
                                                            "i4414"
                                                            "i4415"
                                                            "i4416"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4401")))
                                                       (hygiene guile))
                                                    (cons #{e1\ 4420}#
                                                          #{e2\ 4421}#)))))
                                #{tmp\ 4411}#)
                         ((lambda (#{tmp\ 4423}#)
                            (if #{tmp\ 4423}#
                              (apply (lambda (#{_\ 4429}#
                                              #{out\ 4430}#
                                              #{in\ 4431}#
                                              #{e1\ 4432}#
                                              #{e2\ 4433}#)
                                       (list '#(syntax-object
                                                syntax-case
                                                ((top)
                                                 #(ribcage
                                                   #(_ out in e1 e2)
                                                   #((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                   #("i4424"
                                                     "i4425"
                                                     "i4426"
                                                     "i4427"
                                                     "i4428"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i4401")))
                                                (hygiene guile))
                                             (cons '#(syntax-object
                                                      list
                                                      ((top)
                                                       #(ribcage
                                                         #(_ out in e1 e2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4424"
                                                           "i4425"
                                                           "i4426"
                                                           "i4427"
                                                           "i4428"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4401")))
                                                      (hygiene guile))
                                                   #{in\ 4431}#)
                                             '()
                                             (list #{out\ 4430}#
                                                   (cons '#(syntax-object
                                                            begin
                                                            ((top)
                                                             #(ribcage
                                                               #(_
                                                                 out
                                                                 in
                                                                 e1
                                                                 e2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4424"
                                                                 "i4425"
                                                                 "i4426"
                                                                 "i4427"
                                                                 "i4428"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4401")))
                                                            (hygiene guile))
                                                         (cons #{e1\ 4432}#
                                                               #{e2\ 4433}#)))))
                                     #{tmp\ 4423}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 4402}#)))
                          ($sc-dispatch
                            #{tmp\ 4402}#
                            '(any #(each (any any)) any . each-any)))))
                     ($sc-dispatch
                       #{tmp\ 4402}#
                       '(any ((any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 4402}#
                  '(any () any . each-any))))
             #{x\ 4400}#))
          (module-name (current-module)))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (cons (lambda (#{x\ 4455}#)
            ((lambda (#{tmp\ 4457}#)
               ((lambda (#{tmp\ 4458}#)
                  (if #{tmp\ 4458}#
                    (apply (lambda (#{_\ 4464}#
                                    #{k\ 4465}#
                                    #{keyword\ 4466}#
                                    #{pattern\ 4467}#
                                    #{template\ 4468}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ k keyword pattern template)
                                         #((top) (top) (top) (top) (top))
                                         #("i4459"
                                           "i4460"
                                           "i4461"
                                           "i4462"
                                           "i4463"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4456")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ k keyword pattern template)
                                          #((top) (top) (top) (top) (top))
                                          #("i4459"
                                            "i4460"
                                            "i4461"
                                            "i4462"
                                            "i4463"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4456")))
                                       (hygiene guile)))
                                   (vector
                                     '(#(syntax-object
                                         macro-type
                                         ((top)
                                          #(ribcage
                                            #(_ k keyword pattern template)
                                            #((top) (top) (top) (top) (top))
                                            #("i4459"
                                              "i4460"
                                              "i4461"
                                              "i4462"
                                              "i4463"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4456")))
                                         (hygiene guile))
                                       .
                                       #(syntax-object
                                         syntax-rules
                                         ((top)
                                          #(ribcage
                                            #(_ k keyword pattern template)
                                            #((top) (top) (top) (top) (top))
                                            #("i4459"
                                              "i4460"
                                              "i4461"
                                              "i4462"
                                              "i4463"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4456")))
                                         (hygiene guile)))
                                     (cons '#(syntax-object
                                              patterns
                                              ((top)
                                               #(ribcage
                                                 #(_
                                                   k
                                                   keyword
                                                   pattern
                                                   template)
                                                 #((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                 #("i4459"
                                                   "i4460"
                                                   "i4461"
                                                   "i4462"
                                                   "i4463"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4456")))
                                              (hygiene guile))
                                           #{pattern\ 4467}#))
                                   (cons '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ k keyword pattern template)
                                               #((top) (top) (top) (top) (top))
                                               #("i4459"
                                                 "i4460"
                                                 "i4461"
                                                 "i4462"
                                                 "i4463"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4456")))
                                            (hygiene guile))
                                         (cons '#(syntax-object
                                                  x
                                                  ((top)
                                                   #(ribcage
                                                     #(_
                                                       k
                                                       keyword
                                                       pattern
                                                       template)
                                                     #((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                     #("i4459"
                                                       "i4460"
                                                       "i4461"
                                                       "i4462"
                                                       "i4463"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4456")))
                                                  (hygiene guile))
                                               (cons #{k\ 4465}#
                                                     (map (lambda (#{tmp\ 4472}#
                                                                   #{tmp\ 4471}#)
                                                            (list (cons '#(syntax-object
                                                                           dummy
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i4459"
                                                                                "i4460"
                                                                                "i4461"
                                                                                "i4462"
                                                                                "i4463"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i4456")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 4471}#)
                                                                  (list '#(syntax-object
                                                                           syntax
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i4459"
                                                                                "i4460"
                                                                                "i4461"
                                                                                "i4462"
                                                                                "i4463"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i4456")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 4472}#)))
                                                          #{template\ 4468}#
                                                          #{pattern\ 4467}#))))))
                           #{tmp\ 4458}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4457}#)))
                ($sc-dispatch
                  #{tmp\ 4457}#
                  '(any each-any . #(each ((any . any) any))))))
             #{x\ 4455}#))
          (module-name (current-module)))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (cons (lambda (#{x\ 4483}#)
            ((lambda (#{tmp\ 4485}#)
               ((lambda (#{tmp\ 4486}#)
                  (if (if #{tmp\ 4486}#
                        (apply (lambda (#{let*\ 4492}#
                                        #{x\ 4493}#
                                        #{v\ 4494}#
                                        #{e1\ 4495}#
                                        #{e2\ 4496}#)
                                 (and-map identifier? #{x\ 4493}#))
                               #{tmp\ 4486}#)
                        #f)
                    (apply (lambda (#{let*\ 4503}#
                                    #{x\ 4504}#
                                    #{v\ 4505}#
                                    #{e1\ 4506}#
                                    #{e2\ 4507}#)
                             (letrec ((#{f\ 4510}#
                                        (lambda (#{bindings\ 4511}#)
                                          (if (null? #{bindings\ 4511}#)
                                            (cons '#(syntax-object
                                                     let
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f bindings)
                                                        #((top) (top))
                                                        #("i4508" "i4509"))
                                                      #(ribcage
                                                        #(let* x v e1 e2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4498"
                                                          "i4499"
                                                          "i4500"
                                                          "i4501"
                                                          "i4502"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4484")))
                                                     (hygiene guile))
                                                  (cons '()
                                                        (cons #{e1\ 4506}#
                                                              #{e2\ 4507}#)))
                                            ((lambda (#{tmp\ 4516}#)
                                               ((lambda (#{tmp\ 4517}#)
                                                  (if #{tmp\ 4517}#
                                                    (apply (lambda (#{body\ 4520}#
                                                                    #{binding\ 4521}#)
                                                             (list '#(syntax-object
                                                                      let
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(body
                                                                           binding)
                                                                         #((top)
                                                                           (top))
                                                                         #("i4518"
                                                                           "i4519"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           bindings)
                                                                         #((top)
                                                                           (top))
                                                                         #("i4508"
                                                                           "i4509"))
                                                                       #(ribcage
                                                                         #(let*
                                                                           x
                                                                           v
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i4498"
                                                                           "i4499"
                                                                           "i4500"
                                                                           "i4501"
                                                                           "i4502"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i4484")))
                                                                      (hygiene
                                                                        guile))
                                                                   (list #{binding\ 4521}#)
                                                                   #{body\ 4520}#))
                                                           #{tmp\ 4517}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 4516}#)))
                                                ($sc-dispatch
                                                  #{tmp\ 4516}#
                                                  '(any any))))
                                             (list (#{f\ 4510}#
                                                     (cdr #{bindings\ 4511}#))
                                                   (car #{bindings\ 4511}#)))))))
                               (#{f\ 4510}#
                                 (map list #{x\ 4504}# #{v\ 4505}#))))
                           #{tmp\ 4486}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4485}#)))
                ($sc-dispatch
                  #{tmp\ 4485}#
                  '(any #(each (any any)) any . each-any))))
             #{x\ 4483}#))
          (module-name (current-module)))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (cons (lambda (#{orig-x\ 4541}#)
            ((lambda (#{tmp\ 4543}#)
               ((lambda (#{tmp\ 4544}#)
                  (if #{tmp\ 4544}#
                    (apply (lambda (#{_\ 4552}#
                                    #{var\ 4553}#
                                    #{init\ 4554}#
                                    #{step\ 4555}#
                                    #{e0\ 4556}#
                                    #{e1\ 4557}#
                                    #{c\ 4558}#)
                             ((lambda (#{tmp\ 4560}#)
                                ((lambda (#{tmp\ 4561}#)
                                   (if #{tmp\ 4561}#
                                     (apply (lambda (#{step\ 4563}#)
                                              ((lambda (#{tmp\ 4564}#)
                                                 ((lambda (#{tmp\ 4565}#)
                                                    (if #{tmp\ 4565}#
                                                      (apply (lambda ()
                                                               (list '#(syntax-object
                                                                        let
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4562"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4545"
                                                                             "i4546"
                                                                             "i4547"
                                                                             "i4548"
                                                                             "i4549"
                                                                             "i4550"
                                                                             "i4551"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4542")))
                                                                        (hygiene
                                                                          guile))
                                                                     '#(syntax-object
                                                                        doloop
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i4562"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i4545"
                                                                             "i4546"
                                                                             "i4547"
                                                                             "i4548"
                                                                             "i4549"
                                                                             "i4550"
                                                                             "i4551"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i4542")))
                                                                        (hygiene
                                                                          guile))
                                                                     (map list
                                                                          #{var\ 4553}#
                                                                          #{init\ 4554}#)
                                                                     (list '#(syntax-object
                                                                              if
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i4562"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i4545"
                                                                                   "i4546"
                                                                                   "i4547"
                                                                                   "i4548"
                                                                                   "i4549"
                                                                                   "i4550"
                                                                                   "i4551"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i4542")))
                                                                              (hygiene
                                                                                guile))
                                                                           (list '#(syntax-object
                                                                                    not
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i4562"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i4545"
                                                                                         "i4546"
                                                                                         "i4547"
                                                                                         "i4548"
                                                                                         "i4549"
                                                                                         "i4550"
                                                                                         "i4551"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i4542")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 #{e0\ 4556}#)
                                                                           (cons '#(syntax-object
                                                                                    begin
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i4562"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i4545"
                                                                                         "i4546"
                                                                                         "i4547"
                                                                                         "i4548"
                                                                                         "i4549"
                                                                                         "i4550"
                                                                                         "i4551"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i4542")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 (append
                                                                                   #{c\ 4558}#
                                                                                   (list (cons '#(syntax-object
                                                                                                  doloop
                                                                                                  ((top)
                                                                                                   #(ribcage
                                                                                                     #(step)
                                                                                                     #((top))
                                                                                                     #("i4562"))
                                                                                                   #(ribcage
                                                                                                     #(_
                                                                                                       var
                                                                                                       init
                                                                                                       step
                                                                                                       e0
                                                                                                       e1
                                                                                                       c)
                                                                                                     #((top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top))
                                                                                                     #("i4545"
                                                                                                       "i4546"
                                                                                                       "i4547"
                                                                                                       "i4548"
                                                                                                       "i4549"
                                                                                                       "i4550"
                                                                                                       "i4551"))
                                                                                                   #(ribcage
                                                                                                     ()
                                                                                                     ()
                                                                                                     ())
                                                                                                   #(ribcage
                                                                                                     #(orig-x)
                                                                                                     #((top))
                                                                                                     #("i4542")))
                                                                                                  (hygiene
                                                                                                    guile))
                                                                                               #{step\ 4563}#)))))))
                                                             #{tmp\ 4565}#)
                                                      ((lambda (#{tmp\ 4570}#)
                                                         (if #{tmp\ 4570}#
                                                           (apply (lambda (#{e1\ 4573}#
                                                                           #{e2\ 4574}#)
                                                                    (list '#(syntax-object
                                                                             let
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4571"
                                                                                  "i4572"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4562"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4545"
                                                                                  "i4546"
                                                                                  "i4547"
                                                                                  "i4548"
                                                                                  "i4549"
                                                                                  "i4550"
                                                                                  "i4551"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4542")))
                                                                             (hygiene
                                                                               guile))
                                                                          '#(syntax-object
                                                                             doloop
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i4571"
                                                                                  "i4572"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i4562"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4545"
                                                                                  "i4546"
                                                                                  "i4547"
                                                                                  "i4548"
                                                                                  "i4549"
                                                                                  "i4550"
                                                                                  "i4551"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i4542")))
                                                                             (hygiene
                                                                               guile))
                                                                          (map list
                                                                               #{var\ 4553}#
                                                                               #{init\ 4554}#)
                                                                          (list '#(syntax-object
                                                                                   if
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4571"
                                                                                        "i4572"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i4562"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4545"
                                                                                        "i4546"
                                                                                        "i4547"
                                                                                        "i4548"
                                                                                        "i4549"
                                                                                        "i4550"
                                                                                        "i4551"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i4542")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                #{e0\ 4556}#
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i4571"
                                                                                              "i4572"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i4562"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4545"
                                                                                              "i4546"
                                                                                              "i4547"
                                                                                              "i4548"
                                                                                              "i4549"
                                                                                              "i4550"
                                                                                              "i4551"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i4542")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (cons #{e1\ 4573}#
                                                                                            #{e2\ 4574}#))
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i4571"
                                                                                              "i4572"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i4562"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4545"
                                                                                              "i4546"
                                                                                              "i4547"
                                                                                              "i4548"
                                                                                              "i4549"
                                                                                              "i4550"
                                                                                              "i4551"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i4542")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (append
                                                                                        #{c\ 4558}#
                                                                                        (list (cons '#(syntax-object
                                                                                                       doloop
                                                                                                       ((top)
                                                                                                        #(ribcage
                                                                                                          #(e1
                                                                                                            e2)
                                                                                                          #((top)
                                                                                                            (top))
                                                                                                          #("i4571"
                                                                                                            "i4572"))
                                                                                                        #(ribcage
                                                                                                          #(step)
                                                                                                          #((top))
                                                                                                          #("i4562"))
                                                                                                        #(ribcage
                                                                                                          #(_
                                                                                                            var
                                                                                                            init
                                                                                                            step
                                                                                                            e0
                                                                                                            e1
                                                                                                            c)
                                                                                                          #((top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top))
                                                                                                          #("i4545"
                                                                                                            "i4546"
                                                                                                            "i4547"
                                                                                                            "i4548"
                                                                                                            "i4549"
                                                                                                            "i4550"
                                                                                                            "i4551"))
                                                                                                        #(ribcage
                                                                                                          ()
                                                                                                          ()
                                                                                                          ())
                                                                                                        #(ribcage
                                                                                                          #(orig-x)
                                                                                                          #((top))
                                                                                                          #("i4542")))
                                                                                                       (hygiene
                                                                                                         guile))
                                                                                                    #{step\ 4563}#)))))))
                                                                  #{tmp\ 4570}#)
                                                           (syntax-violation
                                                             #f
                                                             "source expression failed to match any pattern"
                                                             #{tmp\ 4564}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4564}#
                                                         '(any . each-any)))))
                                                  ($sc-dispatch
                                                    #{tmp\ 4564}#
                                                    '())))
                                               #{e1\ 4557}#))
                                            #{tmp\ 4561}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp\ 4560}#)))
                                 ($sc-dispatch
                                   #{tmp\ 4560}#
                                   'each-any)))
                              (map (lambda (#{v\ 4581}# #{s\ 4582}#)
                                     ((lambda (#{tmp\ 4585}#)
                                        ((lambda (#{tmp\ 4586}#)
                                           (if #{tmp\ 4586}#
                                             (apply (lambda () #{v\ 4581}#)
                                                    #{tmp\ 4586}#)
                                             ((lambda (#{tmp\ 4587}#)
                                                (if #{tmp\ 4587}#
                                                  (apply (lambda (#{e\ 4589}#)
                                                           #{e\ 4589}#)
                                                         #{tmp\ 4587}#)
                                                  ((lambda (#{_\ 4591}#)
                                                     (syntax-violation
                                                       'do
                                                       "bad step expression"
                                                       #{orig-x\ 4541}#
                                                       #{s\ 4582}#))
                                                   #{tmp\ 4585}#)))
                                              ($sc-dispatch
                                                #{tmp\ 4585}#
                                                '(any)))))
                                         ($sc-dispatch
                                           #{tmp\ 4585}#
                                           '())))
                                      #{s\ 4582}#))
                                   #{var\ 4553}#
                                   #{step\ 4555}#)))
                           #{tmp\ 4544}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4543}#)))
                ($sc-dispatch
                  #{tmp\ 4543}#
                  '(any #(each (any any . any))
                        (any . each-any)
                        .
                        each-any))))
             #{orig-x\ 4541}#))
          (module-name (current-module)))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (cons (letrec ((#{quasicons\ 4623}#
                     (lambda (#{x\ 4627}# #{y\ 4628}#)
                       ((lambda (#{tmp\ 4632}#)
                          ((lambda (#{tmp\ 4633}#)
                             (if #{tmp\ 4633}#
                               (apply (lambda (#{x\ 4636}# #{y\ 4637}#)
                                        ((lambda (#{tmp\ 4638}#)
                                           ((lambda (#{tmp\ 4639}#)
                                              (if #{tmp\ 4639}#
                                                (apply (lambda (#{dy\ 4641}#)
                                                         ((lambda (#{tmp\ 4642}#)
                                                            ((lambda (#{tmp\ 4643}#)
                                                               (if #{tmp\ 4643}#
                                                                 (apply (lambda (#{dx\ 4645}#)
                                                                          (list '#(syntax-object
                                                                                   quote
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(dx)
                                                                                      #((top))
                                                                                      #("i4644"))
                                                                                    #(ribcage
                                                                                      #(dy)
                                                                                      #((top))
                                                                                      #("i4640"))
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4634"
                                                                                        "i4635"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i4629"
                                                                                        "i4630"))
                                                                                    #(ribcage
                                                                                      #(quasicons
                                                                                        quasiappend
                                                                                        quasivector
                                                                                        quasi)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4619"
                                                                                        "i4620"
                                                                                        "i4621"
                                                                                        "i4622")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{dx\ 4645}#
                                                                                      #{dy\ 4641}#)))
                                                                        #{tmp\ 4643}#)
                                                                 ((lambda (#{_\ 4647}#)
                                                                    (if (null? #{dy\ 4641}#)
                                                                      (list '#(syntax-object
                                                                               list
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i4646"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i4640"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4634"
                                                                                    "i4635"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4629"
                                                                                    "i4630"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i4619"
                                                                                    "i4620"
                                                                                    "i4621"
                                                                                    "i4622")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 4636}#)
                                                                      (list '#(syntax-object
                                                                               cons
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i4646"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i4640"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4634"
                                                                                    "i4635"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i4629"
                                                                                    "i4630"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i4619"
                                                                                    "i4620"
                                                                                    "i4621"
                                                                                    "i4622")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 4636}#
                                                                            #{y\ 4637}#)))
                                                                  #{tmp\ 4642}#)))
                                                             ($sc-dispatch
                                                               #{tmp\ 4642}#
                                                               '(#(free-id
                                                                   #(syntax-object
                                                                     quote
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(dy)
                                                                        #((top))
                                                                        #("i4640"))
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i4634"
                                                                          "i4635"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i4629"
                                                                          "i4630"))
                                                                      #(ribcage
                                                                        #(quasicons
                                                                          quasiappend
                                                                          quasivector
                                                                          quasi)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i4619"
                                                                          "i4620"
                                                                          "i4621"
                                                                          "i4622")))
                                                                     (hygiene
                                                                       guile)))
                                                                 any))))
                                                          #{x\ 4636}#))
                                                       #{tmp\ 4639}#)
                                                ((lambda (#{tmp\ 4648}#)
                                                   (if #{tmp\ 4648}#
                                                     (apply (lambda (#{stuff\ 4650}#)
                                                              (cons '#(syntax-object
                                                                       list
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(stuff)
                                                                          #((top))
                                                                          #("i4649"))
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4634"
                                                                            "i4635"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4629"
                                                                            "i4630"))
                                                                        #(ribcage
                                                                          #(quasicons
                                                                            quasiappend
                                                                            quasivector
                                                                            quasi)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4619"
                                                                            "i4620"
                                                                            "i4621"
                                                                            "i4622")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{x\ 4636}#
                                                                          #{stuff\ 4650}#)))
                                                            #{tmp\ 4648}#)
                                                     ((lambda (#{else\ 4652}#)
                                                        (list '#(syntax-object
                                                                 cons
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i4651"))
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4634"
                                                                      "i4635"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i4629"
                                                                      "i4630"))
                                                                  #(ribcage
                                                                    #(quasicons
                                                                      quasiappend
                                                                      quasivector
                                                                      quasi)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i4619"
                                                                      "i4620"
                                                                      "i4621"
                                                                      "i4622")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x\ 4636}#
                                                              #{y\ 4637}#))
                                                      #{tmp\ 4638}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 4638}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         list
                                                         ((top)
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i4634" "i4635"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i4629" "i4630"))
                                                          #(ribcage
                                                            #(quasicons
                                                              quasiappend
                                                              quasivector
                                                              quasi)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4619"
                                                              "i4620"
                                                              "i4621"
                                                              "i4622")))
                                                         (hygiene guile)))
                                                     .
                                                     any)))))
                                            ($sc-dispatch
                                              #{tmp\ 4638}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4634" "i4635"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4629" "i4630"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i4619"
                                                         "i4620"
                                                         "i4621"
                                                         "i4622")))
                                                    (hygiene guile)))
                                                any))))
                                         #{y\ 4637}#))
                                      #{tmp\ 4633}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4632}#)))
                           ($sc-dispatch #{tmp\ 4632}# (quote (any any)))))
                        (list #{x\ 4627}# #{y\ 4628}#))))
                   (#{quasiappend\ 4624}#
                     (lambda (#{x\ 4653}# #{y\ 4654}#)
                       ((lambda (#{tmp\ 4658}#)
                          ((lambda (#{tmp\ 4659}#)
                             (if #{tmp\ 4659}#
                               (apply (lambda (#{x\ 4662}# #{y\ 4663}#)
                                        ((lambda (#{tmp\ 4664}#)
                                           ((lambda (#{tmp\ 4665}#)
                                              (if #{tmp\ 4665}#
                                                (apply (lambda () #{x\ 4662}#)
                                                       #{tmp\ 4665}#)
                                                ((lambda (#{_\ 4667}#)
                                                   (list '#(syntax-object
                                                            append
                                                            ((top)
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i4666"))
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i4660"
                                                                 "i4661"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i4655"
                                                                 "i4656"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4619"
                                                                 "i4620"
                                                                 "i4621"
                                                                 "i4622")))
                                                            (hygiene guile))
                                                         #{x\ 4662}#
                                                         #{y\ 4663}#))
                                                 #{tmp\ 4664}#)))
                                            ($sc-dispatch
                                              #{tmp\ 4664}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4660" "i4661"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i4655" "i4656"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i4619"
                                                         "i4620"
                                                         "i4621"
                                                         "i4622")))
                                                    (hygiene guile)))
                                                ()))))
                                         #{y\ 4663}#))
                                      #{tmp\ 4659}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 4658}#)))
                           ($sc-dispatch #{tmp\ 4658}# (quote (any any)))))
                        (list #{x\ 4653}# #{y\ 4654}#))))
                   (#{quasivector\ 4625}#
                     (lambda (#{x\ 4668}#)
                       ((lambda (#{tmp\ 4671}#)
                          ((lambda (#{x\ 4673}#)
                             ((lambda (#{tmp\ 4674}#)
                                ((lambda (#{tmp\ 4675}#)
                                   (if #{tmp\ 4675}#
                                     (apply (lambda (#{x\ 4677}#)
                                              (list '#(syntax-object
                                                       quote
                                                       ((top)
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4676"))
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4672"))
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4669"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4619"
                                                            "i4620"
                                                            "i4621"
                                                            "i4622")))
                                                       (hygiene guile))
                                                    (list->vector
                                                      #{x\ 4677}#)))
                                            #{tmp\ 4675}#)
                                     ((lambda (#{tmp\ 4679}#)
                                        (if #{tmp\ 4679}#
                                          (apply (lambda (#{x\ 4681}#)
                                                   (cons '#(syntax-object
                                                            vector
                                                            ((top)
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4680"))
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4672"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4669"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4619"
                                                                 "i4620"
                                                                 "i4621"
                                                                 "i4622")))
                                                            (hygiene guile))
                                                         #{x\ 4681}#))
                                                 #{tmp\ 4679}#)
                                          ((lambda (#{_\ 4684}#)
                                             (list '#(syntax-object
                                                      list->vector
                                                      ((top)
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i4683"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4672"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4669"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4619"
                                                           "i4620"
                                                           "i4621"
                                                           "i4622")))
                                                      (hygiene guile))
                                                   #{x\ 4673}#))
                                           #{tmp\ 4674}#)))
                                      ($sc-dispatch
                                        #{tmp\ 4674}#
                                        '(#(free-id
                                            #(syntax-object
                                              list
                                              ((top)
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4672"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4669"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4619"
                                                   "i4620"
                                                   "i4621"
                                                   "i4622")))
                                              (hygiene guile)))
                                          .
                                          each-any)))))
                                 ($sc-dispatch
                                   #{tmp\ 4674}#
                                   '(#(free-id
                                       #(syntax-object
                                         quote
                                         ((top)
                                          #(ribcage #(x) #((top)) #("i4672"))
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4669"))
                                          #(ribcage
                                            #(quasicons
                                              quasiappend
                                              quasivector
                                              quasi)
                                            #((top) (top) (top) (top))
                                            #("i4619"
                                              "i4620"
                                              "i4621"
                                              "i4622")))
                                         (hygiene guile)))
                                     each-any))))
                              #{x\ 4673}#))
                           #{tmp\ 4671}#))
                        #{x\ 4668}#)))
                   (#{quasi\ 4626}#
                     (lambda (#{p\ 4685}# #{lev\ 4686}#)
                       ((lambda (#{tmp\ 4689}#)
                          ((lambda (#{tmp\ 4690}#)
                             (if #{tmp\ 4690}#
                               (apply (lambda (#{p\ 4692}#)
                                        (if (= #{lev\ 4686}# 0)
                                          #{p\ 4692}#
                                          (#{quasicons\ 4623}#
                                            '(#(syntax-object
                                                quote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i4691"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i4687" "i4688"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4619"
                                                     "i4620"
                                                     "i4621"
                                                     "i4622")))
                                                (hygiene guile))
                                              #(syntax-object
                                                unquote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i4691"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i4687" "i4688"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i4619"
                                                     "i4620"
                                                     "i4621"
                                                     "i4622")))
                                                (hygiene guile)))
                                            (#{quasi\ 4626}#
                                              (list #{p\ 4692}#)
                                              (- #{lev\ 4686}# 1)))))
                                      #{tmp\ 4690}#)
                               ((lambda (#{tmp\ 4693}#)
                                  (if (if #{tmp\ 4693}#
                                        (apply (lambda (#{args\ 4695}#)
                                                 (= #{lev\ 4686}# 0))
                                               #{tmp\ 4693}#)
                                        #f)
                                    (apply (lambda (#{args\ 4697}#)
                                             (syntax-violation
                                               'unquote
                                               "unquote takes exactly one argument"
                                               #{p\ 4685}#
                                               (cons '#(syntax-object
                                                        unquote
                                                        ((top)
                                                         #(ribcage
                                                           #(args)
                                                           #((top))
                                                           #("i4696"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(p lev)
                                                           #((top) (top))
                                                           #("i4687" "i4688"))
                                                         #(ribcage
                                                           #(quasicons
                                                             quasiappend
                                                             quasivector
                                                             quasi)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i4619"
                                                             "i4620"
                                                             "i4621"
                                                             "i4622")))
                                                        (hygiene guile))
                                                     #{args\ 4697}#)))
                                           #{tmp\ 4693}#)
                                    ((lambda (#{tmp\ 4698}#)
                                       (if #{tmp\ 4698}#
                                         (apply (lambda (#{p\ 4701}#
                                                         #{q\ 4702}#)
                                                  (if (= #{lev\ 4686}# 0)
                                                    (#{quasiappend\ 4624}#
                                                      #{p\ 4701}#
                                                      (#{quasi\ 4626}#
                                                        #{q\ 4702}#
                                                        #{lev\ 4686}#))
                                                    (#{quasicons\ 4623}#
                                                      (#{quasicons\ 4623}#
                                                        '(#(syntax-object
                                                            quote
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i4699"
                                                                 "i4700"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4687"
                                                                 "i4688"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4619"
                                                                 "i4620"
                                                                 "i4621"
                                                                 "i4622")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            unquote-splicing
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i4699"
                                                                 "i4700"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i4687"
                                                                 "i4688"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4619"
                                                                 "i4620"
                                                                 "i4621"
                                                                 "i4622")))
                                                            (hygiene guile)))
                                                        (#{quasi\ 4626}#
                                                          (list #{p\ 4701}#)
                                                          (- #{lev\ 4686}# 1)))
                                                      (#{quasi\ 4626}#
                                                        #{q\ 4702}#
                                                        #{lev\ 4686}#))))
                                                #{tmp\ 4698}#)
                                         ((lambda (#{tmp\ 4703}#)
                                            (if (if #{tmp\ 4703}#
                                                  (apply (lambda (#{args\ 4706}#
                                                                  #{q\ 4707}#)
                                                           (= #{lev\ 4686}# 0))
                                                         #{tmp\ 4703}#)
                                                  #f)
                                              (apply (lambda (#{args\ 4710}#
                                                              #{q\ 4711}#)
                                                       (syntax-violation
                                                         'unquote-splicing
                                                         "unquote-splicing takes exactly one argument"
                                                         #{p\ 4685}#
                                                         (cons '#(syntax-object
                                                                  unquote-splicing
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(args q)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4708"
                                                                       "i4709"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4687"
                                                                       "i4688"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4619"
                                                                       "i4620"
                                                                       "i4621"
                                                                       "i4622")))
                                                                  (hygiene
                                                                    guile))
                                                               #{args\ 4710}#)))
                                                     #{tmp\ 4703}#)
                                              ((lambda (#{tmp\ 4712}#)
                                                 (if #{tmp\ 4712}#
                                                   (apply (lambda (#{p\ 4714}#)
                                                            (#{quasicons\ 4623}#
                                                              '(#(syntax-object
                                                                  quote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i4713"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4687"
                                                                       "i4688"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4619"
                                                                       "i4620"
                                                                       "i4621"
                                                                       "i4622")))
                                                                  (hygiene
                                                                    guile))
                                                                #(syntax-object
                                                                  quasiquote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i4713"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i4687"
                                                                       "i4688"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4619"
                                                                       "i4620"
                                                                       "i4621"
                                                                       "i4622")))
                                                                  (hygiene
                                                                    guile)))
                                                              (#{quasi\ 4626}#
                                                                (list #{p\ 4714}#)
                                                                (+ #{lev\ 4686}#
                                                                   1))))
                                                          #{tmp\ 4712}#)
                                                   ((lambda (#{tmp\ 4715}#)
                                                      (if #{tmp\ 4715}#
                                                        (apply (lambda (#{p\ 4718}#
                                                                        #{q\ 4719}#)
                                                                 (#{quasicons\ 4623}#
                                                                   (#{quasi\ 4626}#
                                                                     #{p\ 4718}#
                                                                     #{lev\ 4686}#)
                                                                   (#{quasi\ 4626}#
                                                                     #{q\ 4719}#
                                                                     #{lev\ 4686}#)))
                                                               #{tmp\ 4715}#)
                                                        ((lambda (#{tmp\ 4720}#)
                                                           (if #{tmp\ 4720}#
                                                             (apply (lambda (#{x\ 4722}#)
                                                                      (#{quasivector\ 4625}#
                                                                        (#{quasi\ 4626}#
                                                                          #{x\ 4722}#
                                                                          #{lev\ 4686}#)))
                                                                    #{tmp\ 4720}#)
                                                             ((lambda (#{p\ 4725}#)
                                                                (list '#(syntax-object
                                                                         quote
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(p)
                                                                            #((top))
                                                                            #("i4724"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(p
                                                                              lev)
                                                                            #((top)
                                                                              (top))
                                                                            #("i4687"
                                                                              "i4688"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i4619"
                                                                              "i4620"
                                                                              "i4621"
                                                                              "i4622")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{p\ 4725}#))
                                                              #{tmp\ 4689}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 4689}#
                                                           '#(vector
                                                              each-any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 4689}#
                                                      '(any . any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 4689}#
                                                 '(#(free-id
                                                     #(syntax-object
                                                       quasiquote
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i4687" "i4688"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4619"
                                                            "i4620"
                                                            "i4621"
                                                            "i4622")))
                                                       (hygiene guile)))
                                                   any)))))
                                          ($sc-dispatch
                                            #{tmp\ 4689}#
                                            '((#(free-id
                                                 #(syntax-object
                                                   unquote-splicing
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i4687" "i4688"))
                                                    #(ribcage
                                                      #(quasicons
                                                        quasiappend
                                                        quasivector
                                                        quasi)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4619"
                                                        "i4620"
                                                        "i4621"
                                                        "i4622")))
                                                   (hygiene guile)))
                                               .
                                               any)
                                              .
                                              any)))))
                                     ($sc-dispatch
                                       #{tmp\ 4689}#
                                       '((#(free-id
                                            #(syntax-object
                                              unquote-splicing
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(p lev)
                                                 #((top) (top))
                                                 #("i4687" "i4688"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i4619"
                                                   "i4620"
                                                   "i4621"
                                                   "i4622")))
                                              (hygiene guile)))
                                          any)
                                         .
                                         any)))))
                                ($sc-dispatch
                                  #{tmp\ 4689}#
                                  '(#(free-id
                                      #(syntax-object
                                        unquote
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i4687" "i4688"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i4619" "i4620" "i4621" "i4622")))
                                        (hygiene guile)))
                                    .
                                    any)))))
                           ($sc-dispatch
                             #{tmp\ 4689}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i4687" "i4688"))
                                    #(ribcage
                                      #(quasicons
                                        quasiappend
                                        quasivector
                                        quasi)
                                      #((top) (top) (top) (top))
                                      #("i4619" "i4620" "i4621" "i4622")))
                                   (hygiene guile)))
                               any))))
                        #{p\ 4685}#))))
            (lambda (#{x\ 4726}#)
              ((lambda (#{tmp\ 4728}#)
                 ((lambda (#{tmp\ 4729}#)
                    (if #{tmp\ 4729}#
                      (apply (lambda (#{_\ 4732}# #{e\ 4733}#)
                               (#{quasi\ 4626}# #{e\ 4733}# 0))
                             #{tmp\ 4729}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4728}#)))
                  ($sc-dispatch #{tmp\ 4728}# (quote (any any)))))
               #{x\ 4726}#)))
          (module-name (current-module)))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (cons (lambda (#{x\ 4801}#)
            (letrec ((#{read-file\ 4804}#
                       (lambda (#{fn\ 4805}# #{k\ 4806}#)
                         (let ((#{p\ 4810}# (open-input-file #{fn\ 4805}#)))
                           (letrec ((#{f\ 4814}#
                                      (lambda (#{x\ 4815}# #{result\ 4816}#)
                                        (if (eof-object? #{x\ 4815}#)
                                          (begin
                                            (close-input-port #{p\ 4810}#)
                                            (reverse #{result\ 4816}#))
                                          (#{f\ 4814}#
                                            (read #{p\ 4810}#)
                                            (cons (datum->syntax
                                                    #{k\ 4806}#
                                                    #{x\ 4815}#)
                                                  #{result\ 4816}#))))))
                             (#{f\ 4814}# (read #{p\ 4810}#) (quote ())))))))
              ((lambda (#{tmp\ 4817}#)
                 ((lambda (#{tmp\ 4818}#)
                    (if #{tmp\ 4818}#
                      (apply (lambda (#{k\ 4821}# #{filename\ 4822}#)
                               (let ((#{fn\ 4824}#
                                       (syntax->datum #{filename\ 4822}#)))
                                 ((lambda (#{tmp\ 4826}#)
                                    ((lambda (#{tmp\ 4827}#)
                                       (if #{tmp\ 4827}#
                                         (apply (lambda (#{exp\ 4829}#)
                                                  (cons '#(syntax-object
                                                           begin
                                                           ((top)
                                                            #(ribcage
                                                              #(exp)
                                                              #((top))
                                                              #("i4828"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(fn)
                                                              #((top))
                                                              #("i4823"))
                                                            #(ribcage
                                                              #(k filename)
                                                              #((top) (top))
                                                              #("i4819"
                                                                "i4820"))
                                                            #(ribcage
                                                              (read-file)
                                                              ((top))
                                                              ("i4803"))
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i4802")))
                                                           (hygiene guile))
                                                        #{exp\ 4829}#))
                                                #{tmp\ 4827}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 4826}#)))
                                     ($sc-dispatch
                                       #{tmp\ 4826}#
                                       'each-any)))
                                  (#{read-file\ 4804}#
                                    #{fn\ 4824}#
                                    #{k\ 4821}#))))
                             #{tmp\ 4818}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 4817}#)))
                  ($sc-dispatch #{tmp\ 4817}# (quote (any any)))))
               #{x\ 4801}#)))
          (module-name (current-module)))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (cons (lambda (#{x\ 4847}#)
            ((lambda (#{tmp\ 4849}#)
               ((lambda (#{tmp\ 4850}#)
                  (if #{tmp\ 4850}#
                    (apply (lambda (#{k\ 4853}# #{filename\ 4854}#)
                             (let ((#{fn\ 4856}#
                                     (syntax->datum #{filename\ 4854}#)))
                               ((lambda (#{tmp\ 4858}#)
                                  ((lambda (#{fn\ 4860}#)
                                     (list '#(syntax-object
                                              include
                                              ((top)
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i4859"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i4855"))
                                               #(ribcage
                                                 #(k filename)
                                                 #((top) (top))
                                                 #("i4851" "i4852"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4848")))
                                              (hygiene guile))
                                           #{fn\ 4860}#))
                                   #{tmp\ 4858}#))
                                (let ((#{t\ 4863}#
                                        (%search-load-path #{fn\ 4856}#)))
                                  (if #{t\ 4863}#
                                    #{t\ 4863}#
                                    (syntax-violation
                                      'include-from-path
                                      "file not found in path"
                                      #{x\ 4847}#
                                      #{filename\ 4854}#))))))
                           #{tmp\ 4850}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4849}#)))
                ($sc-dispatch #{tmp\ 4849}# (quote (any any)))))
             #{x\ 4847}#))
          (module-name (current-module)))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (cons (lambda (#{x\ 4874}#)
            ((lambda (#{tmp\ 4876}#)
               ((lambda (#{tmp\ 4877}#)
                  (if #{tmp\ 4877}#
                    (apply (lambda (#{_\ 4880}# #{e\ 4881}#)
                             (syntax-violation
                               'unquote
                               "expression not valid outside of quasiquote"
                               #{x\ 4874}#))
                           #{tmp\ 4877}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4876}#)))
                ($sc-dispatch #{tmp\ 4876}# (quote (any any)))))
             #{x\ 4874}#))
          (module-name (current-module)))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (cons (lambda (#{x\ 4887}#)
            ((lambda (#{tmp\ 4889}#)
               ((lambda (#{tmp\ 4890}#)
                  (if #{tmp\ 4890}#
                    (apply (lambda (#{_\ 4893}# #{e\ 4894}#)
                             (syntax-violation
                               'unquote-splicing
                               "expression not valid outside of quasiquote"
                               #{x\ 4887}#))
                           #{tmp\ 4890}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4889}#)))
                ($sc-dispatch #{tmp\ 4889}# (quote (any any)))))
             #{x\ 4887}#))
          (module-name (current-module)))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (cons (lambda (#{x\ 4900}#)
            ((lambda (#{tmp\ 4902}#)
               ((lambda (#{tmp\ 4903}#)
                  (if #{tmp\ 4903}#
                    (apply (lambda (#{_\ 4908}#
                                    #{e\ 4909}#
                                    #{m1\ 4910}#
                                    #{m2\ 4911}#)
                             ((lambda (#{tmp\ 4913}#)
                                ((lambda (#{body\ 4915}#)
                                   (list '#(syntax-object
                                            let
                                            ((top)
                                             #(ribcage
                                               #(body)
                                               #((top))
                                               #("i4914"))
                                             #(ribcage
                                               #(_ e m1 m2)
                                               #((top) (top) (top) (top))
                                               #("i4904"
                                                 "i4905"
                                                 "i4906"
                                                 "i4907"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4901")))
                                            (hygiene guile))
                                         (list (list '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(body)
                                                           #((top))
                                                           #("i4914"))
                                                         #(ribcage
                                                           #(_ e m1 m2)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i4904"
                                                             "i4905"
                                                             "i4906"
                                                             "i4907"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4901")))
                                                        (hygiene guile))
                                                     #{e\ 4909}#))
                                         #{body\ 4915}#))
                                 #{tmp\ 4913}#))
                              (letrec ((#{f\ 4919}#
                                         (lambda (#{clause\ 4920}#
                                                  #{clauses\ 4921}#)
                                           (if (null? #{clauses\ 4921}#)
                                             ((lambda (#{tmp\ 4923}#)
                                                ((lambda (#{tmp\ 4924}#)
                                                   (if #{tmp\ 4924}#
                                                     (apply (lambda (#{e1\ 4927}#
                                                                     #{e2\ 4928}#)
                                                              (cons '#(syntax-object
                                                                       begin
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i4925"
                                                                            "i4926"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(f
                                                                            clause
                                                                            clauses)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4916"
                                                                            "i4917"
                                                                            "i4918"))
                                                                        #(ribcage
                                                                          #(_
                                                                            e
                                                                            m1
                                                                            m2)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4904"
                                                                            "i4905"
                                                                            "i4906"
                                                                            "i4907"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x)
                                                                          #((top))
                                                                          #("i4901")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{e1\ 4927}#
                                                                          #{e2\ 4928}#)))
                                                            #{tmp\ 4924}#)
                                                     ((lambda (#{tmp\ 4930}#)
                                                        (if #{tmp\ 4930}#
                                                          (apply (lambda (#{k\ 4934}#
                                                                          #{e1\ 4935}#
                                                                          #{e2\ 4936}#)
                                                                   (list '#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4931"
                                                                                 "i4932"
                                                                                 "i4933"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4916"
                                                                                 "i4917"
                                                                                 "i4918"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i4904"
                                                                                 "i4905"
                                                                                 "i4906"
                                                                                 "i4907"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i4901")))
                                                                            (hygiene
                                                                              guile))
                                                                         (list '#(syntax-object
                                                                                  memv
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4931"
                                                                                       "i4932"
                                                                                       "i4933"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4916"
                                                                                       "i4917"
                                                                                       "i4918"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4904"
                                                                                       "i4905"
                                                                                       "i4906"
                                                                                       "i4907"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4901")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               '#(syntax-object
                                                                                  t
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4931"
                                                                                       "i4932"
                                                                                       "i4933"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4916"
                                                                                       "i4917"
                                                                                       "i4918"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4904"
                                                                                       "i4905"
                                                                                       "i4906"
                                                                                       "i4907"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4901")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (list '#(syntax-object
                                                                                        quote
                                                                                        ((top)
                                                                                         #(ribcage
                                                                                           #(k
                                                                                             e1
                                                                                             e2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4931"
                                                                                             "i4932"
                                                                                             "i4933"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(f
                                                                                             clause
                                                                                             clauses)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4916"
                                                                                             "i4917"
                                                                                             "i4918"))
                                                                                         #(ribcage
                                                                                           #(_
                                                                                             e
                                                                                             m1
                                                                                             m2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i4904"
                                                                                             "i4905"
                                                                                             "i4906"
                                                                                             "i4907"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(x)
                                                                                           #((top))
                                                                                           #("i4901")))
                                                                                        (hygiene
                                                                                          guile))
                                                                                     #{k\ 4934}#))
                                                                         (cons '#(syntax-object
                                                                                  begin
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4931"
                                                                                       "i4932"
                                                                                       "i4933"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4916"
                                                                                       "i4917"
                                                                                       "i4918"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i4904"
                                                                                       "i4905"
                                                                                       "i4906"
                                                                                       "i4907"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i4901")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (cons #{e1\ 4935}#
                                                                                     #{e2\ 4936}#))))
                                                                 #{tmp\ 4930}#)
                                                          ((lambda (#{_\ 4940}#)
                                                             (syntax-violation
                                                               'case
                                                               "bad clause"
                                                               #{x\ 4900}#
                                                               #{clause\ 4920}#))
                                                           #{tmp\ 4923}#)))
                                                      ($sc-dispatch
                                                        #{tmp\ 4923}#
                                                        '(each-any
                                                           any
                                                           .
                                                           each-any)))))
                                                 ($sc-dispatch
                                                   #{tmp\ 4923}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         else
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(f clause clauses)
                                                            #((top)
                                                              (top)
                                                              (top))
                                                            #("i4916"
                                                              "i4917"
                                                              "i4918"))
                                                          #(ribcage
                                                            #(_ e m1 m2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4904"
                                                              "i4905"
                                                              "i4906"
                                                              "i4907"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4901")))
                                                         (hygiene guile)))
                                                     any
                                                     .
                                                     each-any))))
                                              #{clause\ 4920}#)
                                             ((lambda (#{tmp\ 4942}#)
                                                ((lambda (#{rest\ 4944}#)
                                                   ((lambda (#{tmp\ 4945}#)
                                                      ((lambda (#{tmp\ 4946}#)
                                                         (if #{tmp\ 4946}#
                                                           (apply (lambda (#{k\ 4950}#
                                                                           #{e1\ 4951}#
                                                                           #{e2\ 4952}#)
                                                                    (list '#(syntax-object
                                                                             if
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4947"
                                                                                  "i4948"
                                                                                  "i4949"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i4943"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4916"
                                                                                  "i4917"
                                                                                  "i4918"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i4904"
                                                                                  "i4905"
                                                                                  "i4906"
                                                                                  "i4907"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i4901")))
                                                                             (hygiene
                                                                               guile))
                                                                          (list '#(syntax-object
                                                                                   memv
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4947"
                                                                                        "i4948"
                                                                                        "i4949"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4943"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4916"
                                                                                        "i4917"
                                                                                        "i4918"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4904"
                                                                                        "i4905"
                                                                                        "i4906"
                                                                                        "i4907"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4901")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                '#(syntax-object
                                                                                   t
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4947"
                                                                                        "i4948"
                                                                                        "i4949"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4943"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4916"
                                                                                        "i4917"
                                                                                        "i4918"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4904"
                                                                                        "i4905"
                                                                                        "i4906"
                                                                                        "i4907"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4901")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (list '#(syntax-object
                                                                                         quote
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(k
                                                                                              e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4947"
                                                                                              "i4948"
                                                                                              "i4949"))
                                                                                          #(ribcage
                                                                                            #(rest)
                                                                                            #((top))
                                                                                            #("i4943"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(f
                                                                                              clause
                                                                                              clauses)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4916"
                                                                                              "i4917"
                                                                                              "i4918"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              e
                                                                                              m1
                                                                                              m2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i4904"
                                                                                              "i4905"
                                                                                              "i4906"
                                                                                              "i4907"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(x)
                                                                                            #((top))
                                                                                            #("i4901")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      #{k\ 4950}#))
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4947"
                                                                                        "i4948"
                                                                                        "i4949"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i4943"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4916"
                                                                                        "i4917"
                                                                                        "i4918"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i4904"
                                                                                        "i4905"
                                                                                        "i4906"
                                                                                        "i4907"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i4901")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{e1\ 4951}#
                                                                                      #{e2\ 4952}#))
                                                                          #{rest\ 4944}#))
                                                                  #{tmp\ 4946}#)
                                                           ((lambda (#{_\ 4956}#)
                                                              (syntax-violation
                                                                'case
                                                                "bad clause"
                                                                #{x\ 4900}#
                                                                #{clause\ 4920}#))
                                                            #{tmp\ 4945}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 4945}#
                                                         '(each-any
                                                            any
                                                            .
                                                            each-any))))
                                                    #{clause\ 4920}#))
                                                 #{tmp\ 4942}#))
                                              (#{f\ 4919}#
                                                (car #{clauses\ 4921}#)
                                                (cdr #{clauses\ 4921}#)))))))
                                (#{f\ 4919}# #{m1\ 4910}# #{m2\ 4911}#))))
                           #{tmp\ 4903}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4902}#)))
                ($sc-dispatch
                  #{tmp\ 4902}#
                  '(any any any . each-any))))
             #{x\ 4900}#))
          (module-name (current-module)))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (cons (lambda (#{x\ 4986}#)
            ((lambda (#{tmp\ 4988}#)
               ((lambda (#{tmp\ 4989}#)
                  (if #{tmp\ 4989}#
                    (apply (lambda (#{_\ 4992}# #{e\ 4993}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i4990" "i4991"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4987")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ e)
                                          #((top) (top))
                                          #("i4990" "i4991"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4987")))
                                       (hygiene guile)))
                                   '#((#(syntax-object
                                         macro-type
                                         ((top)
                                          #(ribcage
                                            #(_ e)
                                            #((top) (top))
                                            #("i4990" "i4991"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4987")))
                                         (hygiene guile))
                                       .
                                       #(syntax-object
                                         identifier-syntax
                                         ((top)
                                          #(ribcage
                                            #(_ e)
                                            #((top) (top))
                                            #("i4990" "i4991"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4987")))
                                         (hygiene guile))))
                                   (list '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4990" "i4991"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4987")))
                                            (hygiene guile))
                                         '#(syntax-object
                                            x
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i4990" "i4991"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4987")))
                                            (hygiene guile))
                                         '()
                                         (list '#(syntax-object
                                                  id
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i4990" "i4991"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4987")))
                                                  (hygiene guile))
                                               '(#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i4990" "i4991"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4987")))
                                                   (hygiene guile))
                                                 (#(syntax-object
                                                    syntax
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i4990" "i4991"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4987")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    id
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i4990" "i4991"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4987")))
                                                    (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i4990" "i4991"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4987")))
                                                        (hygiene guile))
                                                     #{e\ 4993}#))
                                         (list (cons #{_\ 4992}#
                                                     '(#(syntax-object
                                                         x
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4990" "i4991"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4987")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i4990" "i4991"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4987")))
                                                         (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i4990" "i4991"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4987")))
                                                        (hygiene guile))
                                                     (cons #{e\ 4993}#
                                                           '(#(syntax-object
                                                               x
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4990"
                                                                    "i4991"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i4987")))
                                                               (hygiene guile))
                                                             #(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4990"
                                                                    "i4991"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i4987")))
                                                               (hygiene
                                                                 guile)))))))))
                           #{tmp\ 4989}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 4988}#)))
                ($sc-dispatch #{tmp\ 4988}# (quote (any any)))))
             #{x\ 4986}#))
          (module-name (current-module)))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (cons (lambda (#{x\ 4999}#)
            ((lambda (#{tmp\ 5001}#)
               ((lambda (#{tmp\ 5002}#)
                  (if #{tmp\ 5002}#
                    (apply (lambda (#{_\ 5008}#
                                    #{id\ 5009}#
                                    #{args\ 5010}#
                                    #{b0\ 5011}#
                                    #{b1\ 5012}#)
                             (list '#(syntax-object
                                      define
                                      ((top)
                                       #(ribcage
                                         #(_ id args b0 b1)
                                         #((top) (top) (top) (top) (top))
                                         #("i5003"
                                           "i5004"
                                           "i5005"
                                           "i5006"
                                           "i5007"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i5000")))
                                      (hygiene guile))
                                   #{id\ 5009}#
                                   (cons '#(syntax-object
                                            lambda*
                                            ((top)
                                             #(ribcage
                                               #(_ id args b0 b1)
                                               #((top) (top) (top) (top) (top))
                                               #("i5003"
                                                 "i5004"
                                                 "i5005"
                                                 "i5006"
                                                 "i5007"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i5000")))
                                            (hygiene guile))
                                         (cons #{args\ 5010}#
                                               (cons #{b0\ 5011}#
                                                     #{b1\ 5012}#)))))
                           #{tmp\ 5002}#)
                    ((lambda (#{tmp\ 5014}#)
                       (if (if #{tmp\ 5014}#
                             (apply (lambda (#{_\ 5018}#
                                             #{id\ 5019}#
                                             #{val\ 5020}#)
                                      (identifier?
                                        '#(syntax-object
                                           x
                                           ((top)
                                            #(ribcage
                                              #(_ id val)
                                              #((top) (top) (top))
                                              #("i5015" "i5016" "i5017"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i5000")))
                                           (hygiene guile))))
                                    #{tmp\ 5014}#)
                             #f)
                         (apply (lambda (#{_\ 5024}#
                                         #{id\ 5025}#
                                         #{val\ 5026}#)
                                  (list '#(syntax-object
                                           define
                                           ((top)
                                            #(ribcage
                                              #(_ id val)
                                              #((top) (top) (top))
                                              #("i5021" "i5022" "i5023"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i5000")))
                                           (hygiene guile))
                                        #{id\ 5025}#
                                        #{val\ 5026}#))
                                #{tmp\ 5014}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 5001}#)))
                     ($sc-dispatch
                       #{tmp\ 5001}#
                       '(any any any)))))
                ($sc-dispatch
                  #{tmp\ 5001}#
                  '(any (any . any) any . each-any))))
             #{x\ 4999}#))
          (module-name (current-module)))))

