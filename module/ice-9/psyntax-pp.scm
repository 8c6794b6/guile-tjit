(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(let ((#{gen-label -ANAU$bmvAmthP7L7xwnNi}# (if #f #f))
      (#{transformer-environment -ANAU$bmvAmthP7L7xwnN2}#
        (if #f #f)))
  (letrec*
    ((#{top-level-eval-hook -ANAU$bmvAmthP7L7xwnM4}#
       (lambda (#{x -ANAU$bmvAmthP7L7xwsuQ}#
                #{mod -ANAU$bmvAmthP7L7xwsuR}#)
         (primitive-eval #{x -ANAU$bmvAmthP7L7xwsuQ}#)))
     (#{get-global-definition-hook -ANAU$bmvAmthP7L7xwnM7}#
       (lambda (#{symbol -ANAU$bmvAmthP7L7xwp7A}#
                #{module -ANAU$bmvAmthP7L7xwp7B}#)
         (begin
           (if (if (not #{module -ANAU$bmvAmthP7L7xwp7B}#)
                 (current-module)
                 #f)
             (warn "module system is booted, we should have a module"
                   #{symbol -ANAU$bmvAmthP7L7xwp7A}#))
           (let ((#{v -ANAU$bmvAmthP7L7xwp7C}#
                   (module-variable
                     (if #{module -ANAU$bmvAmthP7L7xwp7B}#
                       (resolve-module
                         (cdr #{module -ANAU$bmvAmthP7L7xwp7B}#))
                       (current-module))
                     #{symbol -ANAU$bmvAmthP7L7xwp7A}#)))
             (if #{v -ANAU$bmvAmthP7L7xwp7C}#
               (if (variable-bound? #{v -ANAU$bmvAmthP7L7xwp7C}#)
                 (let ((#{val -ANAU$bmvAmthP7L7xwp7E}#
                         (variable-ref #{v -ANAU$bmvAmthP7L7xwp7C}#)))
                   (if (macro? #{val -ANAU$bmvAmthP7L7xwp7E}#)
                     (if (macro-type #{val -ANAU$bmvAmthP7L7xwp7E}#)
                       (cons (macro-type #{val -ANAU$bmvAmthP7L7xwp7E}#)
                             (macro-binding #{val -ANAU$bmvAmthP7L7xwp7E}#))
                       #f)
                     #f))
                 #f)
               #f)))))
     (#{maybe-name-value! -ANAU$bmvAmthP7L7xwnM9}#
       (lambda (#{name -ANAU$bmvAmthP7L7xwp@Z}#
                #{val -ANAU$bmvAmthP7L7xwp@a}#)
         (if (if (struct? #{val -ANAU$bmvAmthP7L7xwp@a}#)
               (eq? (struct-vtable #{val -ANAU$bmvAmthP7L7xwp@a}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta -ANAU$bmvAmthP7L7xwp@h}#
                   (struct-ref #{val -ANAU$bmvAmthP7L7xwp@a}# 1)))
             (if (not (assq 'name #{meta -ANAU$bmvAmthP7L7xwp@h}#))
               (let ((#{v -ANAU$bmvAmthP7L7xwp@m}#
                       (cons (cons 'name #{name -ANAU$bmvAmthP7L7xwp@Z}#)
                             #{meta -ANAU$bmvAmthP7L7xwp@h}#)))
                 (struct-set!
                   #{val -ANAU$bmvAmthP7L7xwp@a}#
                   1
                   #{v -ANAU$bmvAmthP7L7xwp@m}#)))))))
     (#{build-application -ANAU$bmvAmthP7L7xwnM@}#
       (lambda (#{source -ANAU$bmvAmthP7L7xwp7G}#
                #{fun-exp -ANAU$bmvAmthP7L7xwp7H}#
                #{arg-exps -ANAU$bmvAmthP7L7xwp7I}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 11)
           #{source -ANAU$bmvAmthP7L7xwp7G}#
           #{fun-exp -ANAU$bmvAmthP7L7xwp7H}#
           #{arg-exps -ANAU$bmvAmthP7L7xwp7I}#)))
     (#{build-conditional -ANAU$bmvAmthP7L7xwnNA}#
       (lambda (#{source -ANAU$bmvAmthP7L7xwp7O}#
                #{test-exp -ANAU$bmvAmthP7L7xwp7P}#
                #{then-exp -ANAU$bmvAmthP7L7xwp7Q}#
                #{else-exp -ANAU$bmvAmthP7L7xwp7R}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 10)
           #{source -ANAU$bmvAmthP7L7xwp7O}#
           #{test-exp -ANAU$bmvAmthP7L7xwp7P}#
           #{then-exp -ANAU$bmvAmthP7L7xwp7Q}#
           #{else-exp -ANAU$bmvAmthP7L7xwp7R}#)))
     (#{build-dynlet -ANAU$bmvAmthP7L7xwnNB}#
       (lambda (#{source -ANAU$bmvAmthP7L7xwp7Y}#
                #{fluids -ANAU$bmvAmthP7L7xwp7Z}#
                #{vals -ANAU$bmvAmthP7L7xwp7a}#
                #{body -ANAU$bmvAmthP7L7xwp7b}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 17)
           #{source -ANAU$bmvAmthP7L7xwp7Y}#
           #{fluids -ANAU$bmvAmthP7L7xwp7Z}#
           #{vals -ANAU$bmvAmthP7L7xwp7a}#
           #{body -ANAU$bmvAmthP7L7xwp7b}#)))
     (#{build-lexical-reference -ANAU$bmvAmthP7L7xwnNC}#
       (lambda (#{type -ANAU$bmvAmthP7L7xwsuS}#
                #{source -ANAU$bmvAmthP7L7xwsuT}#
                #{name -ANAU$bmvAmthP7L7xwsuU}#
                #{var -ANAU$bmvAmthP7L7xwsuV}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{source -ANAU$bmvAmthP7L7xwsuT}#
           #{name -ANAU$bmvAmthP7L7xwsuU}#
           #{var -ANAU$bmvAmthP7L7xwsuV}#)))
     (#{build-lexical-assignment -ANAU$bmvAmthP7L7xwnND}#
       (lambda (#{source -ANAU$bmvAmthP7L7xwp7i}#
                #{name -ANAU$bmvAmthP7L7xwp7j}#
                #{var -ANAU$bmvAmthP7L7xwp7k}#
                #{exp -ANAU$bmvAmthP7L7xwp7l}#)
         (begin
           (if (if (struct? #{exp -ANAU$bmvAmthP7L7xwp7l}#)
                 (eq? (struct-vtable #{exp -ANAU$bmvAmthP7L7xwp7l}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta -ANAU$bmvAmthP7L7xwp71}#
                     (struct-ref #{exp -ANAU$bmvAmthP7L7xwp7l}# 1)))
               (if (not (assq 'name #{meta -ANAU$bmvAmthP7L7xwp71}#))
                 (let ((#{v -ANAU$bmvAmthP7L7xwp78}#
                         (cons (cons 'name #{name -ANAU$bmvAmthP7L7xwp7j}#)
                               #{meta -ANAU$bmvAmthP7L7xwp71}#)))
                   (struct-set!
                     #{exp -ANAU$bmvAmthP7L7xwp7l}#
                     1
                     #{v -ANAU$bmvAmthP7L7xwp78}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 4)
             #{source -ANAU$bmvAmthP7L7xwp7i}#
             #{name -ANAU$bmvAmthP7L7xwp7j}#
             #{var -ANAU$bmvAmthP7L7xwp7k}#
             #{exp -ANAU$bmvAmthP7L7xwp7l}#))))
     (#{analyze-variable -ANAU$bmvAmthP7L7xwnNE}#
       (lambda (#{mod -ANAU$bmvAmthP7L7xwsub}#
                #{var -ANAU$bmvAmthP7L7xwsuc}#
                #{modref-cont -ANAU$bmvAmthP7L7xwsud}#
                #{bare-cont -ANAU$bmvAmthP7L7xwsue}#)
         (if (not #{mod -ANAU$bmvAmthP7L7xwsub}#)
           (#{bare-cont -ANAU$bmvAmthP7L7xwsue}#
             #{var -ANAU$bmvAmthP7L7xwsuc}#)
           (let ((#{kind -ANAU$bmvAmthP7L7xwsuf}#
                   (car #{mod -ANAU$bmvAmthP7L7xwsub}#))
                 (#{mod -ANAU$bmvAmthP7L7xwsug}#
                   (cdr #{mod -ANAU$bmvAmthP7L7xwsub}#)))
             (if (eqv? #{kind -ANAU$bmvAmthP7L7xwsuf}# 'public)
               (#{modref-cont -ANAU$bmvAmthP7L7xwsud}#
                 #{mod -ANAU$bmvAmthP7L7xwsug}#
                 #{var -ANAU$bmvAmthP7L7xwsuc}#
                 #t)
               (if (eqv? #{kind -ANAU$bmvAmthP7L7xwsuf}# 'private)
                 (if (not (equal?
                            #{mod -ANAU$bmvAmthP7L7xwsug}#
                            (module-name (current-module))))
                   (#{modref-cont -ANAU$bmvAmthP7L7xwsud}#
                     #{mod -ANAU$bmvAmthP7L7xwsug}#
                     #{var -ANAU$bmvAmthP7L7xwsuc}#
                     #f)
                   (#{bare-cont -ANAU$bmvAmthP7L7xwsue}#
                     #{var -ANAU$bmvAmthP7L7xwsuc}#))
                 (if (eqv? #{kind -ANAU$bmvAmthP7L7xwsuf}# 'bare)
                   (#{bare-cont -ANAU$bmvAmthP7L7xwsue}#
                     #{var -ANAU$bmvAmthP7L7xwsuc}#)
                   (if (eqv? #{kind -ANAU$bmvAmthP7L7xwsuf}# 'hygiene)
                     (if (if (not (equal?
                                    #{mod -ANAU$bmvAmthP7L7xwsug}#
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module #{mod -ANAU$bmvAmthP7L7xwsug}#)
                             #{var -ANAU$bmvAmthP7L7xwsuc}#)
                           #f)
                       (#{modref-cont -ANAU$bmvAmthP7L7xwsud}#
                         #{mod -ANAU$bmvAmthP7L7xwsug}#
                         #{var -ANAU$bmvAmthP7L7xwsuc}#
                         #f)
                       (#{bare-cont -ANAU$bmvAmthP7L7xwsue}#
                         #{var -ANAU$bmvAmthP7L7xwsuc}#))
                     (syntax-violation
                       #f
                       "bad module kind"
                       #{var -ANAU$bmvAmthP7L7xwsuc}#
                       #{mod -ANAU$bmvAmthP7L7xwsug}#)))))))))
     (#{build-global-reference -ANAU$bmvAmthP7L7xwnNF}#
       (lambda (#{source -ANAU$bmvAmthP7L7xwsuv}#
                #{var -ANAU$bmvAmthP7L7xwsuw}#
                #{mod -ANAU$bmvAmthP7L7xwsux}#)
         (#{analyze-variable -ANAU$bmvAmthP7L7xwnNE}#
           #{mod -ANAU$bmvAmthP7L7xwsux}#
           #{var -ANAU$bmvAmthP7L7xwsuw}#
           (lambda (#{mod -ANAU$bmvAmthP7L7xwsu0}#
                    #{var -ANAU$bmvAmthP7L7xwsu1}#
                    #{public? -ANAU$bmvAmthP7L7xwsu2}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               #{source -ANAU$bmvAmthP7L7xwsuv}#
               #{mod -ANAU$bmvAmthP7L7xwsu0}#
               #{var -ANAU$bmvAmthP7L7xwsu1}#
               #{public? -ANAU$bmvAmthP7L7xwsu2}#))
           (lambda (#{var -ANAU$bmvAmthP7L7xwsu$}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               #{source -ANAU$bmvAmthP7L7xwsuv}#
               #{var -ANAU$bmvAmthP7L7xwsu$}#)))))
     (#{build-global-assignment -ANAU$bmvAmthP7L7xwnNG}#
       (lambda (#{source -ANAU$bmvAmthP7L7xwp8F}#
                #{var -ANAU$bmvAmthP7L7xwp8G}#
                #{exp -ANAU$bmvAmthP7L7xwp8H}#
                #{mod -ANAU$bmvAmthP7L7xwp8I}#)
         (begin
           (if (if (struct? #{exp -ANAU$bmvAmthP7L7xwp8H}#)
                 (eq? (struct-vtable #{exp -ANAU$bmvAmthP7L7xwp8H}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta -ANAU$bmvAmthP7L7xwp8Y}#
                     (struct-ref #{exp -ANAU$bmvAmthP7L7xwp8H}# 1)))
               (if (not (assq 'name #{meta -ANAU$bmvAmthP7L7xwp8Y}#))
                 (let ((#{v -ANAU$bmvAmthP7L7xwp8f}#
                         (cons (cons 'name #{var -ANAU$bmvAmthP7L7xwp8G}#)
                               #{meta -ANAU$bmvAmthP7L7xwp8Y}#)))
                   (struct-set!
                     #{exp -ANAU$bmvAmthP7L7xwp8H}#
                     1
                     #{v -ANAU$bmvAmthP7L7xwp8f}#)))))
           (#{analyze-variable -ANAU$bmvAmthP7L7xwnNE}#
             #{mod -ANAU$bmvAmthP7L7xwp8I}#
             #{var -ANAU$bmvAmthP7L7xwp8G}#
             (lambda (#{mod -ANAU$bmvAmthP7L7xwp8k}#
                      #{var -ANAU$bmvAmthP7L7xwp8l}#
                      #{public? -ANAU$bmvAmthP7L7xwp8m}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 6)
                 #{source -ANAU$bmvAmthP7L7xwp8F}#
                 #{mod -ANAU$bmvAmthP7L7xwp8k}#
                 #{var -ANAU$bmvAmthP7L7xwp8l}#
                 #{public? -ANAU$bmvAmthP7L7xwp8m}#
                 #{exp -ANAU$bmvAmthP7L7xwp8H}#))
             (lambda (#{var -ANAU$bmvAmthP7L7xwp8u}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 8)
                 #{source -ANAU$bmvAmthP7L7xwp8F}#
                 #{var -ANAU$bmvAmthP7L7xwp8u}#
                 #{exp -ANAU$bmvAmthP7L7xwp8H}#))))))
     (#{build-global-definition -ANAU$bmvAmthP7L7xwnNH}#
       (lambda (#{source -ANAU$bmvAmthP7L7xwsvE}#
                #{var -ANAU$bmvAmthP7L7xwsvF}#
                #{exp -ANAU$bmvAmthP7L7xwsvG}#)
         (begin
           (if (if (struct? #{exp -ANAU$bmvAmthP7L7xwsvG}#)
                 (eq? (struct-vtable #{exp -ANAU$bmvAmthP7L7xwsvG}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta -ANAU$bmvAmthP7L7xwsvW}#
                     (struct-ref #{exp -ANAU$bmvAmthP7L7xwsvG}# 1)))
               (if (not (assq 'name #{meta -ANAU$bmvAmthP7L7xwsvW}#))
                 (let ((#{v -ANAU$bmvAmthP7L7xwsvd}#
                         (cons (cons 'name #{var -ANAU$bmvAmthP7L7xwsvF}#)
                               #{meta -ANAU$bmvAmthP7L7xwsvW}#)))
                   (struct-set!
                     #{exp -ANAU$bmvAmthP7L7xwsvG}#
                     1
                     #{v -ANAU$bmvAmthP7L7xwsvd}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #{source -ANAU$bmvAmthP7L7xwsvE}#
             #{var -ANAU$bmvAmthP7L7xwsvF}#
             #{exp -ANAU$bmvAmthP7L7xwsvG}#))))
     (#{build-simple-lambda -ANAU$bmvAmthP7L7xwnNI}#
       (lambda (#{src -ANAU$bmvAmthP7L7xwp80}#
                #{req -ANAU$bmvAmthP7L7xwp81}#
                #{rest -ANAU$bmvAmthP7L7xwp82}#
                #{vars -ANAU$bmvAmthP7L7xwp83}#
                #{meta -ANAU$bmvAmthP7L7xwp84}#
                #{exp -ANAU$bmvAmthP7L7xwp85}#)
         (let ((#{body -ANAU$bmvAmthP7L7xwp8@}#
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 14)
                   #{src -ANAU$bmvAmthP7L7xwp80}#
                   #{req -ANAU$bmvAmthP7L7xwp81}#
                   #f
                   #{rest -ANAU$bmvAmthP7L7xwp82}#
                   #f
                   '()
                   #{vars -ANAU$bmvAmthP7L7xwp83}#
                   #{exp -ANAU$bmvAmthP7L7xwp85}#
                   #f)))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src -ANAU$bmvAmthP7L7xwp80}#
             #{meta -ANAU$bmvAmthP7L7xwp84}#
             #{body -ANAU$bmvAmthP7L7xwp8@}#))))
     (#{build-sequence -ANAU$bmvAmthP7L7xwnNN}#
       (lambda (#{src -ANAU$bmvAmthP7L7xwsvl}#
                #{exps -ANAU$bmvAmthP7L7xwsvm}#)
         (if (null? (cdr #{exps -ANAU$bmvAmthP7L7xwsvm}#))
           (car #{exps -ANAU$bmvAmthP7L7xwsvm}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 12)
             #{src -ANAU$bmvAmthP7L7xwsvl}#
             #{exps -ANAU$bmvAmthP7L7xwsvm}#))))
     (#{build-let -ANAU$bmvAmthP7L7xwnNO}#
       (lambda (#{src -ANAU$bmvAmthP7L7xwp9L}#
                #{ids -ANAU$bmvAmthP7L7xwp9M}#
                #{vars -ANAU$bmvAmthP7L7xwp9N}#
                #{val-exps -ANAU$bmvAmthP7L7xwp9O}#
                #{body-exp -ANAU$bmvAmthP7L7xwp9P}#)
         (begin
           (for-each
             #{maybe-name-value! -ANAU$bmvAmthP7L7xwnM9}#
             #{ids -ANAU$bmvAmthP7L7xwp9M}#
             #{val-exps -ANAU$bmvAmthP7L7xwp9O}#)
           (if (null? #{vars -ANAU$bmvAmthP7L7xwp9N}#)
             #{body-exp -ANAU$bmvAmthP7L7xwp9P}#
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               #{src -ANAU$bmvAmthP7L7xwp9L}#
               #{ids -ANAU$bmvAmthP7L7xwp9M}#
               #{vars -ANAU$bmvAmthP7L7xwp9N}#
               #{val-exps -ANAU$bmvAmthP7L7xwp9O}#
               #{body-exp -ANAU$bmvAmthP7L7xwp9P}#)))))
     (#{build-named-let -ANAU$bmvAmthP7L7xwnNP}#
       (lambda (#{src -ANAU$bmvAmthP7L7xwp9n}#
                #{ids -ANAU$bmvAmthP7L7xwp9o}#
                #{vars -ANAU$bmvAmthP7L7xwp9p}#
                #{val-exps -ANAU$bmvAmthP7L7xwp9q}#
                #{body-exp -ANAU$bmvAmthP7L7xwp9r}#)
         (let ((#{f -ANAU$bmvAmthP7L7xwp9s}#
                 (car #{vars -ANAU$bmvAmthP7L7xwp9p}#))
               (#{f-name -ANAU$bmvAmthP7L7xwp9t}#
                 (car #{ids -ANAU$bmvAmthP7L7xwp9o}#))
               (#{vars -ANAU$bmvAmthP7L7xwp9u}#
                 (cdr #{vars -ANAU$bmvAmthP7L7xwp9p}#))
               (#{ids -ANAU$bmvAmthP7L7xwp9v}#
                 (cdr #{ids -ANAU$bmvAmthP7L7xwp9o}#)))
           (let ((#{proc -ANAU$bmvAmthP7L7xwp9w}#
                   (let ((#{body -ANAU$bmvAmthP7L7xwp$E}#
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 14)
                             #{src -ANAU$bmvAmthP7L7xwp9n}#
                             #{ids -ANAU$bmvAmthP7L7xwp9v}#
                             #f
                             #f
                             #f
                             '()
                             #{vars -ANAU$bmvAmthP7L7xwp9u}#
                             #{body-exp -ANAU$bmvAmthP7L7xwp9r}#
                             #f)))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 13)
                       #{src -ANAU$bmvAmthP7L7xwp9n}#
                       '()
                       #{body -ANAU$bmvAmthP7L7xwp$E}#))))
             (begin
               (if (if (struct? #{proc -ANAU$bmvAmthP7L7xwp9w}#)
                     (eq? (struct-vtable #{proc -ANAU$bmvAmthP7L7xwp9w}#)
                          (vector-ref %expanded-vtables 13))
                     #f)
                 (let ((#{meta -ANAU$bmvAmthP7L7xwp$c}#
                         (struct-ref #{proc -ANAU$bmvAmthP7L7xwp9w}# 1)))
                   (if (not (assq 'name #{meta -ANAU$bmvAmthP7L7xwp$c}#))
                     (let ((#{v -ANAU$bmvAmthP7L7xwp$j}#
                             (cons (cons 'name
                                         #{f-name -ANAU$bmvAmthP7L7xwp9t}#)
                                   #{meta -ANAU$bmvAmthP7L7xwp$c}#)))
                       (struct-set!
                         #{proc -ANAU$bmvAmthP7L7xwp9w}#
                         1
                         #{v -ANAU$bmvAmthP7L7xwp$j}#)))))
               (for-each
                 #{maybe-name-value! -ANAU$bmvAmthP7L7xwnM9}#
                 #{ids -ANAU$bmvAmthP7L7xwp9v}#
                 #{val-exps -ANAU$bmvAmthP7L7xwp9q}#)
               (let ((#{names -ANAU$bmvAmthP7L7xwp$7}#
                       (list #{f-name -ANAU$bmvAmthP7L7xwp9t}#))
                     (#{gensyms -ANAU$bmvAmthP7L7xwp$8}#
                       (list #{f -ANAU$bmvAmthP7L7xwp9s}#))
                     (#{vals -ANAU$bmvAmthP7L7xwp$9}#
                       (list #{proc -ANAU$bmvAmthP7L7xwp9w}#))
                     (#{body -ANAU$bmvAmthP7L7xwp$$}#
                       (let ((#{fun-exp -ANAU$bmvAmthP7L7xwp@C}#
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 3)
                                 #{src -ANAU$bmvAmthP7L7xwp9n}#
                                 #{f-name -ANAU$bmvAmthP7L7xwp9t}#
                                 #{f -ANAU$bmvAmthP7L7xwp9s}#)))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #{src -ANAU$bmvAmthP7L7xwp9n}#
                           #{fun-exp -ANAU$bmvAmthP7L7xwp@C}#
                           #{val-exps -ANAU$bmvAmthP7L7xwp9q}#))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 16)
                   #{src -ANAU$bmvAmthP7L7xwp9n}#
                   #f
                   #{names -ANAU$bmvAmthP7L7xwp$7}#
                   #{gensyms -ANAU$bmvAmthP7L7xwp$8}#
                   #{vals -ANAU$bmvAmthP7L7xwp$9}#
                   #{body -ANAU$bmvAmthP7L7xwp$$}#)))))))
     (#{build-letrec -ANAU$bmvAmthP7L7xwnNQ}#
       (lambda (#{src -ANAU$bmvAmthP7L7xwp@S}#
                #{in-order? -ANAU$bmvAmthP7L7xwp@T}#
                #{ids -ANAU$bmvAmthP7L7xwp@U}#
                #{vars -ANAU$bmvAmthP7L7xwp@V}#
                #{val-exps -ANAU$bmvAmthP7L7xwp@W}#
                #{body-exp -ANAU$bmvAmthP7L7xwp@X}#)
         (if (null? #{vars -ANAU$bmvAmthP7L7xwp@V}#)
           #{body-exp -ANAU$bmvAmthP7L7xwp@X}#
           (begin
             (for-each
               #{maybe-name-value! -ANAU$bmvAmthP7L7xwnM9}#
               #{ids -ANAU$bmvAmthP7L7xwp@U}#
               #{val-exps -ANAU$bmvAmthP7L7xwp@W}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               #{src -ANAU$bmvAmthP7L7xwp@S}#
               #{in-order? -ANAU$bmvAmthP7L7xwp@T}#
               #{ids -ANAU$bmvAmthP7L7xwp@U}#
               #{vars -ANAU$bmvAmthP7L7xwp@V}#
               #{val-exps -ANAU$bmvAmthP7L7xwp@W}#
               #{body-exp -ANAU$bmvAmthP7L7xwp@X}#)))))
     (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
       (lambda (#{x -ANAU$bmvAmthP7L7xwp@x}#)
         (if (if (vector? #{x -ANAU$bmvAmthP7L7xwp@x}#)
               (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwp@x}#)
                      4)
                 (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwp@x}# 0)
                      'syntax-object)
                 #f)
               #f)
           (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
             (vector-ref #{x -ANAU$bmvAmthP7L7xwp@x}# 1))
           (if (pair? #{x -ANAU$bmvAmthP7L7xwp@x}#)
             (let ((#{props -ANAU$bmvAmthP7L7xwqAA}#
                     (source-properties #{x -ANAU$bmvAmthP7L7xwp@x}#)))
               (if (pair? #{props -ANAU$bmvAmthP7L7xwqAA}#)
                 #{props -ANAU$bmvAmthP7L7xwqAA}#
                 #f))
             #f))))
     (#{extend-env -ANAU$bmvAmthP7L7xwnNa}#
       (lambda (#{labels -ANAU$bmvAmthP7L7xwqAC}#
                #{bindings -ANAU$bmvAmthP7L7xwqAD}#
                #{r -ANAU$bmvAmthP7L7xwqAE}#)
         (if (null? #{labels -ANAU$bmvAmthP7L7xwqAC}#)
           #{r -ANAU$bmvAmthP7L7xwqAE}#
           (#{extend-env -ANAU$bmvAmthP7L7xwnNa}#
             (cdr #{labels -ANAU$bmvAmthP7L7xwqAC}#)
             (cdr #{bindings -ANAU$bmvAmthP7L7xwqAD}#)
             (cons (cons (car #{labels -ANAU$bmvAmthP7L7xwqAC}#)
                         (car #{bindings -ANAU$bmvAmthP7L7xwqAD}#))
                   #{r -ANAU$bmvAmthP7L7xwqAE}#)))))
     (#{extend-var-env -ANAU$bmvAmthP7L7xwnNb}#
       (lambda (#{labels -ANAU$bmvAmthP7L7xwqAF}#
                #{vars -ANAU$bmvAmthP7L7xwqAG}#
                #{r -ANAU$bmvAmthP7L7xwqAH}#)
         (if (null? #{labels -ANAU$bmvAmthP7L7xwqAF}#)
           #{r -ANAU$bmvAmthP7L7xwqAH}#
           (#{extend-var-env -ANAU$bmvAmthP7L7xwnNb}#
             (cdr #{labels -ANAU$bmvAmthP7L7xwqAF}#)
             (cdr #{vars -ANAU$bmvAmthP7L7xwqAG}#)
             (cons (cons (car #{labels -ANAU$bmvAmthP7L7xwqAF}#)
                         (cons 'lexical
                               (car #{vars -ANAU$bmvAmthP7L7xwqAG}#)))
                   #{r -ANAU$bmvAmthP7L7xwqAH}#)))))
     (#{macros-only-env -ANAU$bmvAmthP7L7xwnNc}#
       (lambda (#{r -ANAU$bmvAmthP7L7xwqAI}#)
         (if (null? #{r -ANAU$bmvAmthP7L7xwqAI}#)
           '()
           (let ((#{a -ANAU$bmvAmthP7L7xwqAJ}#
                   (car #{r -ANAU$bmvAmthP7L7xwqAI}#)))
             (if (eq? (car (cdr #{a -ANAU$bmvAmthP7L7xwqAJ}#))
                      'macro)
               (cons #{a -ANAU$bmvAmthP7L7xwqAJ}#
                     (#{macros-only-env -ANAU$bmvAmthP7L7xwnNc}#
                       (cdr #{r -ANAU$bmvAmthP7L7xwqAI}#)))
               (#{macros-only-env -ANAU$bmvAmthP7L7xwnNc}#
                 (cdr #{r -ANAU$bmvAmthP7L7xwqAI}#)))))))
     (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
       (lambda (#{type -ANAU$bmvAmthP7L7xwqAL}#
                #{sym -ANAU$bmvAmthP7L7xwqAM}#
                #{val -ANAU$bmvAmthP7L7xwqAN}#)
         (module-define!
           (current-module)
           #{sym -ANAU$bmvAmthP7L7xwqAM}#
           (make-syntax-transformer
             #{sym -ANAU$bmvAmthP7L7xwqAM}#
             #{type -ANAU$bmvAmthP7L7xwqAL}#
             #{val -ANAU$bmvAmthP7L7xwqAN}#))))
     (#{id? -ANAU$bmvAmthP7L7xwnNg}#
       (lambda (#{x -ANAU$bmvAmthP7L7xwofs}#)
         (if (symbol? #{x -ANAU$bmvAmthP7L7xwofs}#)
           #t
           (if (if (vector? #{x -ANAU$bmvAmthP7L7xwofs}#)
                 (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwofs}#)
                        4)
                   (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwofs}# 0)
                        'syntax-object)
                   #f)
                 #f)
             (symbol?
               (vector-ref #{x -ANAU$bmvAmthP7L7xwofs}# 1))
             #f))))
     (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
       (lambda (#{ls -ANAU$bmvAmthP7L7xwqAa}#)
         (if (null? #{ls -ANAU$bmvAmthP7L7xwqAa}#)
           '()
           (cons (#{gen-label -ANAU$bmvAmthP7L7xwnNi}#)
                 (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                   (cdr #{ls -ANAU$bmvAmthP7L7xwqAa}#))))))
     (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
       (lambda (#{ids -ANAU$bmvAmthP7L7xwqAb}#
                #{labels -ANAU$bmvAmthP7L7xwqAc}#
                #{w -ANAU$bmvAmthP7L7xwqAd}#)
         (if (null? #{ids -ANAU$bmvAmthP7L7xwqAb}#)
           #{w -ANAU$bmvAmthP7L7xwqAd}#
           (cons (car #{w -ANAU$bmvAmthP7L7xwqAd}#)
                 (cons (let ((#{labelvec -ANAU$bmvAmthP7L7xwqAe}#
                               (list->vector
                                 #{labels -ANAU$bmvAmthP7L7xwqAc}#)))
                         (let ((#{n -ANAU$bmvAmthP7L7xwqAf}#
                                 (vector-length
                                   #{labelvec -ANAU$bmvAmthP7L7xwqAe}#)))
                           (let ((#{symnamevec -ANAU$bmvAmthP7L7xwqAg}#
                                   (make-vector #{n -ANAU$bmvAmthP7L7xwqAf}#))
                                 (#{marksvec -ANAU$bmvAmthP7L7xwqAh}#
                                   (make-vector #{n -ANAU$bmvAmthP7L7xwqAf}#)))
                             (begin
                               (letrec*
                                 ((#{f -ANAU$bmvAmthP7L7xwqAi}#
                                    (lambda (#{ids -ANAU$bmvAmthP7L7xwqAl}#
                                             #{i -ANAU$bmvAmthP7L7xwqAm}#)
                                      (if (not (null? #{ids -ANAU$bmvAmthP7L7xwqAl}#))
                                        (call-with-values
                                          (lambda ()
                                            (let ((#{x -ANAU$bmvAmthP7L7xwqAp}#
                                                    (car #{ids -ANAU$bmvAmthP7L7xwqAl}#)))
                                              (if (if (vector?
                                                        #{x -ANAU$bmvAmthP7L7xwqAp}#)
                                                    (if (= (vector-length
                                                             #{x -ANAU$bmvAmthP7L7xwqAp}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x -ANAU$bmvAmthP7L7xwqAp}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (values
                                                  (vector-ref
                                                    #{x -ANAU$bmvAmthP7L7xwqAp}#
                                                    1)
                                                  (let ((#{m1 -ANAU$bmvAmthP7L7xwqA5}#
                                                          (car #{w -ANAU$bmvAmthP7L7xwqAd}#))
                                                        (#{m2 -ANAU$bmvAmthP7L7xwqA6}#
                                                          (car (vector-ref
                                                                 #{x -ANAU$bmvAmthP7L7xwqAp}#
                                                                 2))))
                                                    (if (null? #{m2 -ANAU$bmvAmthP7L7xwqA6}#)
                                                      #{m1 -ANAU$bmvAmthP7L7xwqA5}#
                                                      (append
                                                        #{m1 -ANAU$bmvAmthP7L7xwqA5}#
                                                        #{m2 -ANAU$bmvAmthP7L7xwqA6}#))))
                                                (values
                                                  #{x -ANAU$bmvAmthP7L7xwqAp}#
                                                  (car #{w -ANAU$bmvAmthP7L7xwqAd}#)))))
                                          (lambda (#{symname -ANAU$bmvAmthP7L7xwqBO}#
                                                   #{marks -ANAU$bmvAmthP7L7xwqBP}#)
                                            (begin
                                              (vector-set!
                                                #{symnamevec -ANAU$bmvAmthP7L7xwqAg}#
                                                #{i -ANAU$bmvAmthP7L7xwqAm}#
                                                #{symname -ANAU$bmvAmthP7L7xwqBO}#)
                                              (vector-set!
                                                #{marksvec -ANAU$bmvAmthP7L7xwqAh}#
                                                #{i -ANAU$bmvAmthP7L7xwqAm}#
                                                #{marks -ANAU$bmvAmthP7L7xwqBP}#)
                                              (#{f -ANAU$bmvAmthP7L7xwqAi}#
                                                (cdr #{ids -ANAU$bmvAmthP7L7xwqAl}#)
                                                (#{1+}# #{i -ANAU$bmvAmthP7L7xwqAm}#)))))))))
                                 (#{f -ANAU$bmvAmthP7L7xwqAi}#
                                   #{ids -ANAU$bmvAmthP7L7xwqAb}#
                                   0))
                               (vector
                                 'ribcage
                                 #{symnamevec -ANAU$bmvAmthP7L7xwqAg}#
                                 #{marksvec -ANAU$bmvAmthP7L7xwqAh}#
                                 #{labelvec -ANAU$bmvAmthP7L7xwqAe}#)))))
                       (cdr #{w -ANAU$bmvAmthP7L7xwqAd}#))))))
     (#{join-wraps -ANAU$bmvAmthP7L7xwnNw}#
       (lambda (#{w1 -ANAU$bmvAmthP7L7xwqBY}#
                #{w2 -ANAU$bmvAmthP7L7xwqBZ}#)
         (let ((#{m1 -ANAU$bmvAmthP7L7xwqBa}#
                 (car #{w1 -ANAU$bmvAmthP7L7xwqBY}#))
               (#{s1 -ANAU$bmvAmthP7L7xwqBb}#
                 (cdr #{w1 -ANAU$bmvAmthP7L7xwqBY}#)))
           (if (null? #{m1 -ANAU$bmvAmthP7L7xwqBa}#)
             (if (null? #{s1 -ANAU$bmvAmthP7L7xwqBb}#)
               #{w2 -ANAU$bmvAmthP7L7xwqBZ}#
               (cons (car #{w2 -ANAU$bmvAmthP7L7xwqBZ}#)
                     (let ((#{m2 -ANAU$bmvAmthP7L7xwqBi}#
                             (cdr #{w2 -ANAU$bmvAmthP7L7xwqBZ}#)))
                       (if (null? #{m2 -ANAU$bmvAmthP7L7xwqBi}#)
                         #{s1 -ANAU$bmvAmthP7L7xwqBb}#
                         (append
                           #{s1 -ANAU$bmvAmthP7L7xwqBb}#
                           #{m2 -ANAU$bmvAmthP7L7xwqBi}#)))))
             (cons (let ((#{m2 -ANAU$bmvAmthP7L7xwqBr}#
                           (car #{w2 -ANAU$bmvAmthP7L7xwqBZ}#)))
                     (if (null? #{m2 -ANAU$bmvAmthP7L7xwqBr}#)
                       #{m1 -ANAU$bmvAmthP7L7xwqBa}#
                       (append
                         #{m1 -ANAU$bmvAmthP7L7xwqBa}#
                         #{m2 -ANAU$bmvAmthP7L7xwqBr}#)))
                   (let ((#{m2 -ANAU$bmvAmthP7L7xwqB0}#
                           (cdr #{w2 -ANAU$bmvAmthP7L7xwqBZ}#)))
                     (if (null? #{m2 -ANAU$bmvAmthP7L7xwqB0}#)
                       #{s1 -ANAU$bmvAmthP7L7xwqBb}#
                       (append
                         #{s1 -ANAU$bmvAmthP7L7xwqBb}#
                         #{m2 -ANAU$bmvAmthP7L7xwqB0}#))))))))
     (#{same-marks? -ANAU$bmvAmthP7L7xwnNy}#
       (lambda (#{x -ANAU$bmvAmthP7L7xwqB5}#
                #{y -ANAU$bmvAmthP7L7xwqB6}#)
         (if (eq? #{x -ANAU$bmvAmthP7L7xwqB5}#
                  #{y -ANAU$bmvAmthP7L7xwqB6}#)
           (eq? #{x -ANAU$bmvAmthP7L7xwqB5}#
                #{y -ANAU$bmvAmthP7L7xwqB6}#)
           (if (not (null? #{x -ANAU$bmvAmthP7L7xwqB5}#))
             (if (not (null? #{y -ANAU$bmvAmthP7L7xwqB6}#))
               (if (eq? (car #{x -ANAU$bmvAmthP7L7xwqB5}#)
                        (car #{y -ANAU$bmvAmthP7L7xwqB6}#))
                 (#{same-marks? -ANAU$bmvAmthP7L7xwnNy}#
                   (cdr #{x -ANAU$bmvAmthP7L7xwqB5}#)
                   (cdr #{y -ANAU$bmvAmthP7L7xwqB6}#))
                 #f)
               #f)
             #f))))
     (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
       (lambda (#{id -ANAU$bmvAmthP7L7xwqCC}#
                #{w -ANAU$bmvAmthP7L7xwqCD}#)
         (letrec*
           ((#{search -ANAU$bmvAmthP7L7xwqCE}#
              (lambda (#{sym -ANAU$bmvAmthP7L7xwqDB}#
                       #{subst -ANAU$bmvAmthP7L7xwqDC}#
                       #{marks -ANAU$bmvAmthP7L7xwqDD}#)
                (if (null? #{subst -ANAU$bmvAmthP7L7xwqDC}#)
                  (values #f #{marks -ANAU$bmvAmthP7L7xwqDD}#)
                  (let ((#{fst -ANAU$bmvAmthP7L7xwqDE}#
                          (car #{subst -ANAU$bmvAmthP7L7xwqDC}#)))
                    (if (eq? #{fst -ANAU$bmvAmthP7L7xwqDE}# 'shift)
                      (#{search -ANAU$bmvAmthP7L7xwqCE}#
                        #{sym -ANAU$bmvAmthP7L7xwqDB}#
                        (cdr #{subst -ANAU$bmvAmthP7L7xwqDC}#)
                        (cdr #{marks -ANAU$bmvAmthP7L7xwqDD}#))
                      (let ((#{symnames -ANAU$bmvAmthP7L7xwqDG}#
                              (vector-ref #{fst -ANAU$bmvAmthP7L7xwqDE}# 1)))
                        (if (vector? #{symnames -ANAU$bmvAmthP7L7xwqDG}#)
                          (let ((#{n -ANAU$bmvAmthP7L7xwqDS}#
                                  (vector-length
                                    #{symnames -ANAU$bmvAmthP7L7xwqDG}#)))
                            (letrec*
                              ((#{f -ANAU$bmvAmthP7L7xwqDT}#
                                 (lambda (#{i -ANAU$bmvAmthP7L7xwqDV}#)
                                   (if (= #{i -ANAU$bmvAmthP7L7xwqDV}#
                                          #{n -ANAU$bmvAmthP7L7xwqDS}#)
                                     (#{search -ANAU$bmvAmthP7L7xwqCE}#
                                       #{sym -ANAU$bmvAmthP7L7xwqDB}#
                                       (cdr #{subst -ANAU$bmvAmthP7L7xwqDC}#)
                                       #{marks -ANAU$bmvAmthP7L7xwqDD}#)
                                     (if (if (eq? (vector-ref
                                                    #{symnames -ANAU$bmvAmthP7L7xwqDG}#
                                                    #{i -ANAU$bmvAmthP7L7xwqDV}#)
                                                  #{sym -ANAU$bmvAmthP7L7xwqDB}#)
                                           (#{same-marks? -ANAU$bmvAmthP7L7xwnNy}#
                                             #{marks -ANAU$bmvAmthP7L7xwqDD}#
                                             (vector-ref
                                               (vector-ref
                                                 #{fst -ANAU$bmvAmthP7L7xwqDE}#
                                                 2)
                                               #{i -ANAU$bmvAmthP7L7xwqDV}#))
                                           #f)
                                       (values
                                         (vector-ref
                                           (vector-ref
                                             #{fst -ANAU$bmvAmthP7L7xwqDE}#
                                             3)
                                           #{i -ANAU$bmvAmthP7L7xwqDV}#)
                                         #{marks -ANAU$bmvAmthP7L7xwqDD}#)
                                       (#{f -ANAU$bmvAmthP7L7xwqDT}#
                                         (#{1+}# #{i -ANAU$bmvAmthP7L7xwqDV}#)))))))
                              (#{f -ANAU$bmvAmthP7L7xwqDT}# 0)))
                          (letrec*
                            ((#{f -ANAU$bmvAmthP7L7xwqD2}#
                               (lambda (#{symnames -ANAU$bmvAmthP7L7xwqD4}#
                                        #{i -ANAU$bmvAmthP7L7xwqD5}#)
                                 (if (null? #{symnames -ANAU$bmvAmthP7L7xwqD4}#)
                                   (#{search -ANAU$bmvAmthP7L7xwqCE}#
                                     #{sym -ANAU$bmvAmthP7L7xwqDB}#
                                     (cdr #{subst -ANAU$bmvAmthP7L7xwqDC}#)
                                     #{marks -ANAU$bmvAmthP7L7xwqDD}#)
                                   (if (if (eq? (car #{symnames -ANAU$bmvAmthP7L7xwqD4}#)
                                                #{sym -ANAU$bmvAmthP7L7xwqDB}#)
                                         (#{same-marks? -ANAU$bmvAmthP7L7xwnNy}#
                                           #{marks -ANAU$bmvAmthP7L7xwqDD}#
                                           (list-ref
                                             (vector-ref
                                               #{fst -ANAU$bmvAmthP7L7xwqDE}#
                                               2)
                                             #{i -ANAU$bmvAmthP7L7xwqD5}#))
                                         #f)
                                     (values
                                       (list-ref
                                         (vector-ref
                                           #{fst -ANAU$bmvAmthP7L7xwqDE}#
                                           3)
                                         #{i -ANAU$bmvAmthP7L7xwqD5}#)
                                       #{marks -ANAU$bmvAmthP7L7xwqDD}#)
                                     (#{f -ANAU$bmvAmthP7L7xwqD2}#
                                       (cdr #{symnames -ANAU$bmvAmthP7L7xwqD4}#)
                                       (#{1+}# #{i -ANAU$bmvAmthP7L7xwqD5}#)))))))
                            (#{f -ANAU$bmvAmthP7L7xwqD2}#
                              #{symnames -ANAU$bmvAmthP7L7xwqDG}#
                              0))))))))))
           (if (symbol? #{id -ANAU$bmvAmthP7L7xwqCC}#)
             (let ((#{t -ANAU$bmvAmthP7L7xwqCH}#
                     (#{search -ANAU$bmvAmthP7L7xwqCE}#
                       #{id -ANAU$bmvAmthP7L7xwqCC}#
                       (cdr #{w -ANAU$bmvAmthP7L7xwqCD}#)
                       (car #{w -ANAU$bmvAmthP7L7xwqCD}#))))
               (if #{t -ANAU$bmvAmthP7L7xwqCH}#
                 #{t -ANAU$bmvAmthP7L7xwqCH}#
                 #{id -ANAU$bmvAmthP7L7xwqCC}#))
             (if (if (vector? #{id -ANAU$bmvAmthP7L7xwqCC}#)
                   (if (= (vector-length #{id -ANAU$bmvAmthP7L7xwqCC}#)
                          4)
                     (eq? (vector-ref #{id -ANAU$bmvAmthP7L7xwqCC}# 0)
                          'syntax-object)
                     #f)
                   #f)
               (let ((#{id -ANAU$bmvAmthP7L7xwqCW}#
                       (vector-ref #{id -ANAU$bmvAmthP7L7xwqCC}# 1))
                     (#{w1 -ANAU$bmvAmthP7L7xwqCX}#
                       (vector-ref #{id -ANAU$bmvAmthP7L7xwqCC}# 2)))
                 (let ((#{marks -ANAU$bmvAmthP7L7xwqCY}#
                         (let ((#{m1 -ANAU$bmvAmthP7L7xwqCi}#
                                 (car #{w -ANAU$bmvAmthP7L7xwqCD}#))
                               (#{m2 -ANAU$bmvAmthP7L7xwqCj}#
                                 (car #{w1 -ANAU$bmvAmthP7L7xwqCX}#)))
                           (if (null? #{m2 -ANAU$bmvAmthP7L7xwqCj}#)
                             #{m1 -ANAU$bmvAmthP7L7xwqCi}#
                             (append
                               #{m1 -ANAU$bmvAmthP7L7xwqCi}#
                               #{m2 -ANAU$bmvAmthP7L7xwqCj}#)))))
                   (call-with-values
                     (lambda ()
                       (#{search -ANAU$bmvAmthP7L7xwqCE}#
                         #{id -ANAU$bmvAmthP7L7xwqCW}#
                         (cdr #{w -ANAU$bmvAmthP7L7xwqCD}#)
                         #{marks -ANAU$bmvAmthP7L7xwqCY}#))
                     (lambda (#{new-id -ANAU$bmvAmthP7L7xwqCz}#
                              #{marks -ANAU$bmvAmthP7L7xwqC0}#)
                       (if #{new-id -ANAU$bmvAmthP7L7xwqCz}#
                         #{new-id -ANAU$bmvAmthP7L7xwqCz}#
                         (let ((#{t -ANAU$bmvAmthP7L7xwqC8}#
                                 (#{search -ANAU$bmvAmthP7L7xwqCE}#
                                   #{id -ANAU$bmvAmthP7L7xwqCW}#
                                   (cdr #{w1 -ANAU$bmvAmthP7L7xwqCX}#)
                                   #{marks -ANAU$bmvAmthP7L7xwqC0}#)))
                           (if #{t -ANAU$bmvAmthP7L7xwqC8}#
                             #{t -ANAU$bmvAmthP7L7xwqC8}#
                             #{id -ANAU$bmvAmthP7L7xwqCW}#)))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 #{id -ANAU$bmvAmthP7L7xwqCC}#))))))
     (#{locally-bound-identifiers -ANAU$bmvAmthP7L7xwnN0}#
       (lambda (#{w -ANAU$bmvAmthP7L7xwqEP}#
                #{mod -ANAU$bmvAmthP7L7xwqEQ}#)
         (letrec*
           ((#{scan -ANAU$bmvAmthP7L7xwqER}#
              (lambda (#{subst -ANAU$bmvAmthP7L7xwqEW}#
                       #{results -ANAU$bmvAmthP7L7xwqEX}#)
                (if (null? #{subst -ANAU$bmvAmthP7L7xwqEW}#)
                  #{results -ANAU$bmvAmthP7L7xwqEX}#
                  (let ((#{fst -ANAU$bmvAmthP7L7xwqEY}#
                          (car #{subst -ANAU$bmvAmthP7L7xwqEW}#)))
                    (if (eq? #{fst -ANAU$bmvAmthP7L7xwqEY}# 'shift)
                      (#{scan -ANAU$bmvAmthP7L7xwqER}#
                        (cdr #{subst -ANAU$bmvAmthP7L7xwqEW}#)
                        #{results -ANAU$bmvAmthP7L7xwqEX}#)
                      (let ((#{symnames -ANAU$bmvAmthP7L7xwqEa}#
                              (vector-ref #{fst -ANAU$bmvAmthP7L7xwqEY}# 1))
                            (#{marks -ANAU$bmvAmthP7L7xwqEb}#
                              (vector-ref #{fst -ANAU$bmvAmthP7L7xwqEY}# 2)))
                        (if (vector? #{symnames -ANAU$bmvAmthP7L7xwqEa}#)
                          (#{scan-vector-rib -ANAU$bmvAmthP7L7xwqET}#
                            #{subst -ANAU$bmvAmthP7L7xwqEW}#
                            #{symnames -ANAU$bmvAmthP7L7xwqEa}#
                            #{marks -ANAU$bmvAmthP7L7xwqEb}#
                            #{results -ANAU$bmvAmthP7L7xwqEX}#)
                          (#{scan-list-rib -ANAU$bmvAmthP7L7xwqES}#
                            #{subst -ANAU$bmvAmthP7L7xwqEW}#
                            #{symnames -ANAU$bmvAmthP7L7xwqEa}#
                            #{marks -ANAU$bmvAmthP7L7xwqEb}#
                            #{results -ANAU$bmvAmthP7L7xwqEX}#))))))))
            (#{scan-list-rib -ANAU$bmvAmthP7L7xwqES}#
              (lambda (#{subst -ANAU$bmvAmthP7L7xwqF9}#
                       #{symnames -ANAU$bmvAmthP7L7xwqF$}#
                       #{marks -ANAU$bmvAmthP7L7xwqF@}#
                       #{results -ANAU$bmvAmthP7L7xwqGA}#)
                (letrec*
                  ((#{f -ANAU$bmvAmthP7L7xwqGB}#
                     (lambda (#{symnames -ANAU$bmvAmthP7L7xwqHl}#
                              #{marks -ANAU$bmvAmthP7L7xwqHm}#
                              #{results -ANAU$bmvAmthP7L7xwqHn}#)
                       (if (null? #{symnames -ANAU$bmvAmthP7L7xwqHl}#)
                         (#{scan -ANAU$bmvAmthP7L7xwqER}#
                           (cdr #{subst -ANAU$bmvAmthP7L7xwqF9}#)
                           #{results -ANAU$bmvAmthP7L7xwqHn}#)
                         (#{f -ANAU$bmvAmthP7L7xwqGB}#
                           (cdr #{symnames -ANAU$bmvAmthP7L7xwqHl}#)
                           (cdr #{marks -ANAU$bmvAmthP7L7xwqHm}#)
                           (cons (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                   (car #{symnames -ANAU$bmvAmthP7L7xwqHl}#)
                                   (let ((#{w -ANAU$bmvAmthP7L7xwqHv}#
                                           (cons (car #{marks -ANAU$bmvAmthP7L7xwqHm}#)
                                                 #{subst -ANAU$bmvAmthP7L7xwqF9}#)))
                                     (cons (cons #f
                                                 (car #{w -ANAU$bmvAmthP7L7xwqHv}#))
                                           (cons 'shift
                                                 (cdr #{w -ANAU$bmvAmthP7L7xwqHv}#))))
                                   #{mod -ANAU$bmvAmthP7L7xwqEQ}#)
                                 #{results -ANAU$bmvAmthP7L7xwqHn}#))))))
                  (#{f -ANAU$bmvAmthP7L7xwqGB}#
                    #{symnames -ANAU$bmvAmthP7L7xwqF$}#
                    #{marks -ANAU$bmvAmthP7L7xwqF@}#
                    #{results -ANAU$bmvAmthP7L7xwqGA}#))))
            (#{scan-vector-rib -ANAU$bmvAmthP7L7xwqET}#
              (lambda (#{subst -ANAU$bmvAmthP7L7xwqHw}#
                       #{symnames -ANAU$bmvAmthP7L7xwqHx}#
                       #{marks -ANAU$bmvAmthP7L7xwqHy}#
                       #{results -ANAU$bmvAmthP7L7xwqHz}#)
                (let ((#{n -ANAU$bmvAmthP7L7xwqH0}#
                        (vector-length
                          #{symnames -ANAU$bmvAmthP7L7xwqHx}#)))
                  (letrec*
                    ((#{f -ANAU$bmvAmthP7L7xwqH1}#
                       (lambda (#{i -ANAU$bmvAmthP7L7xwqJI}#
                                #{results -ANAU$bmvAmthP7L7xwqJJ}#)
                         (if (= #{i -ANAU$bmvAmthP7L7xwqJI}#
                                #{n -ANAU$bmvAmthP7L7xwqH0}#)
                           (#{scan -ANAU$bmvAmthP7L7xwqER}#
                             (cdr #{subst -ANAU$bmvAmthP7L7xwqHw}#)
                             #{results -ANAU$bmvAmthP7L7xwqJJ}#)
                           (#{f -ANAU$bmvAmthP7L7xwqH1}#
                             (#{1+}# #{i -ANAU$bmvAmthP7L7xwqJI}#)
                             (cons (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                     (vector-ref
                                       #{symnames -ANAU$bmvAmthP7L7xwqHx}#
                                       #{i -ANAU$bmvAmthP7L7xwqJI}#)
                                     (let ((#{w -ANAU$bmvAmthP7L7xwqJR}#
                                             (cons (vector-ref
                                                     #{marks -ANAU$bmvAmthP7L7xwqHy}#
                                                     #{i -ANAU$bmvAmthP7L7xwqJI}#)
                                                   #{subst -ANAU$bmvAmthP7L7xwqHw}#)))
                                       (cons (cons #f
                                                   (car #{w -ANAU$bmvAmthP7L7xwqJR}#))
                                             (cons 'shift
                                                   (cdr #{w -ANAU$bmvAmthP7L7xwqJR}#))))
                                     #{mod -ANAU$bmvAmthP7L7xwqEQ}#)
                                   #{results -ANAU$bmvAmthP7L7xwqJJ}#))))))
                    (#{f -ANAU$bmvAmthP7L7xwqH1}#
                      0
                      #{results -ANAU$bmvAmthP7L7xwqHz}#))))))
           (#{scan -ANAU$bmvAmthP7L7xwqER}#
             (cdr #{w -ANAU$bmvAmthP7L7xwqEP}#)
             '()))))
     (#{valid-bound-ids? -ANAU$bmvAmthP7L7xwnN6}#
       (lambda (#{ids -ANAU$bmvAmthP7L7xwqJS}#)
         (if (letrec*
               ((#{all-ids? -ANAU$bmvAmthP7L7xwqJT}#
                  (lambda (#{ids -ANAU$bmvAmthP7L7xwqL1}#)
                    (if (null? #{ids -ANAU$bmvAmthP7L7xwqL1}#)
                      (null? #{ids -ANAU$bmvAmthP7L7xwqL1}#)
                      (if (let ((#{x -ANAU$bmvAmthP7L7xwqMA}#
                                  (car #{ids -ANAU$bmvAmthP7L7xwqL1}#)))
                            (if (symbol? #{x -ANAU$bmvAmthP7L7xwqMA}#)
                              #t
                              (if (if (vector? #{x -ANAU$bmvAmthP7L7xwqMA}#)
                                    (if (= (vector-length
                                             #{x -ANAU$bmvAmthP7L7xwqMA}#)
                                           4)
                                      (eq? (vector-ref
                                             #{x -ANAU$bmvAmthP7L7xwqMA}#
                                             0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (symbol?
                                  (vector-ref #{x -ANAU$bmvAmthP7L7xwqMA}# 1))
                                #f)))
                        (#{all-ids? -ANAU$bmvAmthP7L7xwqJT}#
                          (cdr #{ids -ANAU$bmvAmthP7L7xwqL1}#))
                        #f)))))
               (#{all-ids? -ANAU$bmvAmthP7L7xwqJT}#
                 #{ids -ANAU$bmvAmthP7L7xwqJS}#))
           (#{distinct-bound-ids? -ANAU$bmvAmthP7L7xwnN7}#
             #{ids -ANAU$bmvAmthP7L7xwqJS}#)
           #f)))
     (#{distinct-bound-ids? -ANAU$bmvAmthP7L7xwnN7}#
       (lambda (#{ids -ANAU$bmvAmthP7L7xwqOA}#)
         (letrec*
           ((#{distinct? -ANAU$bmvAmthP7L7xwqOB}#
              (lambda (#{ids -ANAU$bmvAmthP7L7xwqPx}#)
                (if (null? #{ids -ANAU$bmvAmthP7L7xwqPx}#)
                  (null? #{ids -ANAU$bmvAmthP7L7xwqPx}#)
                  (if (not (#{bound-id-member? -ANAU$bmvAmthP7L7xwnN8}#
                             (car #{ids -ANAU$bmvAmthP7L7xwqPx}#)
                             (cdr #{ids -ANAU$bmvAmthP7L7xwqPx}#)))
                    (#{distinct? -ANAU$bmvAmthP7L7xwqOB}#
                      (cdr #{ids -ANAU$bmvAmthP7L7xwqPx}#))
                    #f)))))
           (#{distinct? -ANAU$bmvAmthP7L7xwqOB}#
             #{ids -ANAU$bmvAmthP7L7xwqOA}#))))
     (#{bound-id-member? -ANAU$bmvAmthP7L7xwnN8}#
       (lambda (#{x -ANAU$bmvAmthP7L7xwqTD}#
                #{list -ANAU$bmvAmthP7L7xwqTE}#)
         (if (not (null? #{list -ANAU$bmvAmthP7L7xwqTE}#))
           (let ((#{t -ANAU$bmvAmthP7L7xwqTF}#
                   (let ((#{j -ANAU$bmvAmthP7L7xwqUW}#
                           (car #{list -ANAU$bmvAmthP7L7xwqTE}#)))
                     (if (if (if (vector? #{x -ANAU$bmvAmthP7L7xwqTD}#)
                               (if (= (vector-length
                                        #{x -ANAU$bmvAmthP7L7xwqTD}#)
                                      4)
                                 (eq? (vector-ref
                                        #{x -ANAU$bmvAmthP7L7xwqTD}#
                                        0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (if (vector? #{j -ANAU$bmvAmthP7L7xwqUW}#)
                             (if (= (vector-length
                                      #{j -ANAU$bmvAmthP7L7xwqUW}#)
                                    4)
                               (eq? (vector-ref #{j -ANAU$bmvAmthP7L7xwqUW}# 0)
                                    'syntax-object)
                               #f)
                             #f)
                           #f)
                       (if (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwqTD}# 1)
                                (vector-ref #{j -ANAU$bmvAmthP7L7xwqUW}# 1))
                         (#{same-marks? -ANAU$bmvAmthP7L7xwnNy}#
                           (car (vector-ref #{x -ANAU$bmvAmthP7L7xwqTD}# 2))
                           (car (vector-ref #{j -ANAU$bmvAmthP7L7xwqUW}# 2)))
                         #f)
                       (eq? #{x -ANAU$bmvAmthP7L7xwqTD}#
                            #{j -ANAU$bmvAmthP7L7xwqUW}#)))))
             (if #{t -ANAU$bmvAmthP7L7xwqTF}#
               #{t -ANAU$bmvAmthP7L7xwqTF}#
               (#{bound-id-member? -ANAU$bmvAmthP7L7xwnN8}#
                 #{x -ANAU$bmvAmthP7L7xwqTD}#
                 (cdr #{list -ANAU$bmvAmthP7L7xwqTE}#))))
           #f)))
     (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
       (lambda (#{x -ANAU$bmvAmthP7L7xwqVC}#
                #{w -ANAU$bmvAmthP7L7xwqVD}#
                #{defmod -ANAU$bmvAmthP7L7xwqVE}#)
         (if (if (null? (car #{w -ANAU$bmvAmthP7L7xwqVD}#))
               (null? (cdr #{w -ANAU$bmvAmthP7L7xwqVD}#))
               #f)
           #{x -ANAU$bmvAmthP7L7xwqVC}#
           (if (if (vector? #{x -ANAU$bmvAmthP7L7xwqVC}#)
                 (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwqVC}#)
                        4)
                   (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwqVC}# 0)
                        'syntax-object)
                   #f)
                 #f)
             (let ((#{expression -ANAU$bmvAmthP7L7xwqVS}#
                     (vector-ref #{x -ANAU$bmvAmthP7L7xwqVC}# 1))
                   (#{wrap -ANAU$bmvAmthP7L7xwqVT}#
                     (#{join-wraps -ANAU$bmvAmthP7L7xwnNw}#
                       #{w -ANAU$bmvAmthP7L7xwqVD}#
                       (vector-ref #{x -ANAU$bmvAmthP7L7xwqVC}# 2)))
                   (#{module -ANAU$bmvAmthP7L7xwqVU}#
                     (vector-ref #{x -ANAU$bmvAmthP7L7xwqVC}# 3)))
               (vector
                 'syntax-object
                 #{expression -ANAU$bmvAmthP7L7xwqVS}#
                 #{wrap -ANAU$bmvAmthP7L7xwqVT}#
                 #{module -ANAU$bmvAmthP7L7xwqVU}#))
             (if (null? #{x -ANAU$bmvAmthP7L7xwqVC}#)
               #{x -ANAU$bmvAmthP7L7xwqVC}#
               (vector
                 'syntax-object
                 #{x -ANAU$bmvAmthP7L7xwqVC}#
                 #{w -ANAU$bmvAmthP7L7xwqVD}#
                 #{defmod -ANAU$bmvAmthP7L7xwqVE}#))))))
     (#{source-wrap -ANAU$bmvAmthP7L7xwnN$}#
       (lambda (#{x -ANAU$bmvAmthP7L7xwqVl}#
                #{w -ANAU$bmvAmthP7L7xwqVm}#
                #{s -ANAU$bmvAmthP7L7xwqVn}#
                #{defmod -ANAU$bmvAmthP7L7xwqVo}#)
         (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
           (begin
             (if (if (pair? #{x -ANAU$bmvAmthP7L7xwqVl}#)
                   #{s -ANAU$bmvAmthP7L7xwqVn}#
                   #f)
               (set-source-properties!
                 #{x -ANAU$bmvAmthP7L7xwqVl}#
                 #{s -ANAU$bmvAmthP7L7xwqVn}#))
             #{x -ANAU$bmvAmthP7L7xwqVl}#)
           #{w -ANAU$bmvAmthP7L7xwqVm}#
           #{defmod -ANAU$bmvAmthP7L7xwqVo}#)))
     (#{expand-sequence -ANAU$bmvAmthP7L7xwnN@}#
       (lambda (#{body -ANAU$bmvAmthP7L7xwsvr}#
                #{r -ANAU$bmvAmthP7L7xwsvs}#
                #{w -ANAU$bmvAmthP7L7xwsvt}#
                #{s -ANAU$bmvAmthP7L7xwsvu}#
                #{mod -ANAU$bmvAmthP7L7xwsvv}#)
         (#{build-sequence -ANAU$bmvAmthP7L7xwnNN}#
           #{s -ANAU$bmvAmthP7L7xwsvu}#
           (letrec*
             ((#{dobody -ANAU$bmvAmthP7L7xwsw@}#
                (lambda (#{body -ANAU$bmvAmthP7L7xws2d}#
                         #{r -ANAU$bmvAmthP7L7xws2e}#
                         #{w -ANAU$bmvAmthP7L7xws2f}#
                         #{mod -ANAU$bmvAmthP7L7xws2g}#)
                  (if (null? #{body -ANAU$bmvAmthP7L7xws2d}#)
                    '()
                    (let ((#{first -ANAU$bmvAmthP7L7xws2h}#
                            (let ((#{e -ANAU$bmvAmthP7L7xws2l}#
                                    (car #{body -ANAU$bmvAmthP7L7xws2d}#)))
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                                    #{e -ANAU$bmvAmthP7L7xws2l}#
                                    #{r -ANAU$bmvAmthP7L7xws2e}#
                                    #{w -ANAU$bmvAmthP7L7xws2f}#
                                    (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                                      #{e -ANAU$bmvAmthP7L7xws2l}#)
                                    #f
                                    #{mod -ANAU$bmvAmthP7L7xws2g}#
                                    #f))
                                (lambda (#{type -ANAU$bmvAmthP7L7xws2s}#
                                         #{value -ANAU$bmvAmthP7L7xws2t}#
                                         #{e -ANAU$bmvAmthP7L7xws2u}#
                                         #{w -ANAU$bmvAmthP7L7xws2v}#
                                         #{s -ANAU$bmvAmthP7L7xws2w}#
                                         #{mod -ANAU$bmvAmthP7L7xws2x}#)
                                  (#{expand-expr -ANAU$bmvAmthP7L7xwnOF}#
                                    #{type -ANAU$bmvAmthP7L7xws2s}#
                                    #{value -ANAU$bmvAmthP7L7xws2t}#
                                    #{e -ANAU$bmvAmthP7L7xws2u}#
                                    #{r -ANAU$bmvAmthP7L7xws2e}#
                                    #{w -ANAU$bmvAmthP7L7xws2v}#
                                    #{s -ANAU$bmvAmthP7L7xws2w}#
                                    #{mod -ANAU$bmvAmthP7L7xws2x}#))))))
                      (cons #{first -ANAU$bmvAmthP7L7xws2h}#
                            (#{dobody -ANAU$bmvAmthP7L7xwsw@}#
                              (cdr #{body -ANAU$bmvAmthP7L7xws2d}#)
                              #{r -ANAU$bmvAmthP7L7xws2e}#
                              #{w -ANAU$bmvAmthP7L7xws2f}#
                              #{mod -ANAU$bmvAmthP7L7xws2g}#)))))))
             (#{dobody -ANAU$bmvAmthP7L7xwsw@}#
               #{body -ANAU$bmvAmthP7L7xwsvr}#
               #{r -ANAU$bmvAmthP7L7xwsvs}#
               #{w -ANAU$bmvAmthP7L7xwsvt}#
               #{mod -ANAU$bmvAmthP7L7xwsvv}#)))))
     (#{expand-top-sequence -ANAU$bmvAmthP7L7xwnOA}#
       (lambda (#{body -ANAU$bmvAmthP7L7xwqV6}#
                #{r -ANAU$bmvAmthP7L7xwqV7}#
                #{w -ANAU$bmvAmthP7L7xwqV8}#
                #{s -ANAU$bmvAmthP7L7xwqV9}#
                #{m -ANAU$bmvAmthP7L7xwqV$}#
                #{esew -ANAU$bmvAmthP7L7xwqV@}#
                #{mod -ANAU$bmvAmthP7L7xwqWA}#)
         (letrec*
           ((#{scan -ANAU$bmvAmthP7L7xwqWB}#
              (lambda (#{body -ANAU$bmvAmthP7L7xwqYE}#
                       #{r -ANAU$bmvAmthP7L7xwqYF}#
                       #{w -ANAU$bmvAmthP7L7xwqYG}#
                       #{s -ANAU$bmvAmthP7L7xwqYH}#
                       #{m -ANAU$bmvAmthP7L7xwqYI}#
                       #{esew -ANAU$bmvAmthP7L7xwqYJ}#
                       #{mod -ANAU$bmvAmthP7L7xwqYK}#
                       #{exps -ANAU$bmvAmthP7L7xwqYL}#)
                (if (null? #{body -ANAU$bmvAmthP7L7xwqYE}#)
                  #{exps -ANAU$bmvAmthP7L7xwqYL}#
                  (call-with-values
                    (lambda ()
                      (call-with-values
                        (lambda ()
                          (let ((#{e -ANAU$bmvAmthP7L7xwqYM}#
                                  (car #{body -ANAU$bmvAmthP7L7xwqYE}#)))
                            (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                              #{e -ANAU$bmvAmthP7L7xwqYM}#
                              #{r -ANAU$bmvAmthP7L7xwqYF}#
                              #{w -ANAU$bmvAmthP7L7xwqYG}#
                              (let ((#{t -ANAU$bmvAmthP7L7xwqYQ}#
                                      (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                                        #{e -ANAU$bmvAmthP7L7xwqYM}#)))
                                (if #{t -ANAU$bmvAmthP7L7xwqYQ}#
                                  #{t -ANAU$bmvAmthP7L7xwqYQ}#
                                  #{s -ANAU$bmvAmthP7L7xwqYH}#))
                              #f
                              #{mod -ANAU$bmvAmthP7L7xwqYK}#
                              #f)))
                        (lambda (#{type -ANAU$bmvAmthP7L7xwqb7}#
                                 #{value -ANAU$bmvAmthP7L7xwqb8}#
                                 #{e -ANAU$bmvAmthP7L7xwqb9}#
                                 #{w -ANAU$bmvAmthP7L7xwqb$}#
                                 #{s -ANAU$bmvAmthP7L7xwqb@}#
                                 #{mod -ANAU$bmvAmthP7L7xwqcA}#)
                          (if (eqv? #{type -ANAU$bmvAmthP7L7xwqb7}#
                                    'begin-form)
                            (let ((#{tmp -ANAU$bmvAmthP7L7xwqcF}#
                                    ($sc-dispatch
                                      #{e -ANAU$bmvAmthP7L7xwqb9}#
                                      '(_))))
                              (if #{tmp -ANAU$bmvAmthP7L7xwqcF}#
                                (@apply
                                  (lambda () #{exps -ANAU$bmvAmthP7L7xwqYL}#)
                                  #{tmp -ANAU$bmvAmthP7L7xwqcF}#)
                                (let ((#{tmp -ANAU$bmvAmthP7L7xwqcJ}#
                                        ($sc-dispatch
                                          #{e -ANAU$bmvAmthP7L7xwqb9}#
                                          '(_ any . each-any))))
                                  (if #{tmp -ANAU$bmvAmthP7L7xwqcJ}#
                                    (@apply
                                      (lambda (#{e1 -ANAU$bmvAmthP7L7xwqcN}#
                                               #{e2 -ANAU$bmvAmthP7L7xwqcO}#)
                                        (#{scan -ANAU$bmvAmthP7L7xwqWB}#
                                          (cons #{e1 -ANAU$bmvAmthP7L7xwqcN}#
                                                #{e2 -ANAU$bmvAmthP7L7xwqcO}#)
                                          #{r -ANAU$bmvAmthP7L7xwqYF}#
                                          #{w -ANAU$bmvAmthP7L7xwqb$}#
                                          #{s -ANAU$bmvAmthP7L7xwqb@}#
                                          #{m -ANAU$bmvAmthP7L7xwqYI}#
                                          #{esew -ANAU$bmvAmthP7L7xwqYJ}#
                                          #{mod -ANAU$bmvAmthP7L7xwqcA}#
                                          #{exps -ANAU$bmvAmthP7L7xwqYL}#))
                                      #{tmp -ANAU$bmvAmthP7L7xwqcJ}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e -ANAU$bmvAmthP7L7xwqb9}#)))))
                            (if (eqv? #{type -ANAU$bmvAmthP7L7xwqb7}#
                                      'local-syntax-form)
                              (#{expand-local-syntax -ANAU$bmvAmthP7L7xwnOJ}#
                                #{value -ANAU$bmvAmthP7L7xwqb8}#
                                #{e -ANAU$bmvAmthP7L7xwqb9}#
                                #{r -ANAU$bmvAmthP7L7xwqYF}#
                                #{w -ANAU$bmvAmthP7L7xwqb$}#
                                #{s -ANAU$bmvAmthP7L7xwqb@}#
                                #{mod -ANAU$bmvAmthP7L7xwqcA}#
                                (lambda (#{body -ANAU$bmvAmthP7L7xwqcd}#
                                         #{r -ANAU$bmvAmthP7L7xwqce}#
                                         #{w -ANAU$bmvAmthP7L7xwqcf}#
                                         #{s -ANAU$bmvAmthP7L7xwqcg}#
                                         #{mod -ANAU$bmvAmthP7L7xwqch}#)
                                  (#{scan -ANAU$bmvAmthP7L7xwqWB}#
                                    #{body -ANAU$bmvAmthP7L7xwqcd}#
                                    #{r -ANAU$bmvAmthP7L7xwqce}#
                                    #{w -ANAU$bmvAmthP7L7xwqcf}#
                                    #{s -ANAU$bmvAmthP7L7xwqcg}#
                                    #{m -ANAU$bmvAmthP7L7xwqYI}#
                                    #{esew -ANAU$bmvAmthP7L7xwqYJ}#
                                    #{mod -ANAU$bmvAmthP7L7xwqch}#
                                    #{exps -ANAU$bmvAmthP7L7xwqYL}#)))
                              (if (eqv? #{type -ANAU$bmvAmthP7L7xwqb7}#
                                        'eval-when-form)
                                (let ((#{tmp -ANAU$bmvAmthP7L7xwqcm}#
                                        ($sc-dispatch
                                          #{e -ANAU$bmvAmthP7L7xwqb9}#
                                          '(_ each-any any . each-any))))
                                  (if #{tmp -ANAU$bmvAmthP7L7xwqcm}#
                                    (@apply
                                      (lambda (#{x -ANAU$bmvAmthP7L7xwqcq}#
                                               #{e1 -ANAU$bmvAmthP7L7xwqcr}#
                                               #{e2 -ANAU$bmvAmthP7L7xwqcs}#)
                                        (let ((#{when-list -ANAU$bmvAmthP7L7xwqct}#
                                                (#{parse-when-list -ANAU$bmvAmthP7L7xwnOC}#
                                                  #{e -ANAU$bmvAmthP7L7xwqb9}#
                                                  #{x -ANAU$bmvAmthP7L7xwqcq}#))
                                              (#{body -ANAU$bmvAmthP7L7xwqcu}#
                                                (cons #{e1 -ANAU$bmvAmthP7L7xwqcr}#
                                                      #{e2 -ANAU$bmvAmthP7L7xwqcs}#)))
                                          (if (eq? #{m -ANAU$bmvAmthP7L7xwqYI}#
                                                   'e)
                                            (if (memq 'eval
                                                      #{when-list -ANAU$bmvAmthP7L7xwqct}#)
                                              (#{scan -ANAU$bmvAmthP7L7xwqWB}#
                                                #{body -ANAU$bmvAmthP7L7xwqcu}#
                                                #{r -ANAU$bmvAmthP7L7xwqYF}#
                                                #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                #{s -ANAU$bmvAmthP7L7xwqb@}#
                                                (if (memq 'expand
                                                          #{when-list -ANAU$bmvAmthP7L7xwqct}#)
                                                  'c&e
                                                  'e)
                                                '(eval)
                                                #{mod -ANAU$bmvAmthP7L7xwqcA}#
                                                #{exps -ANAU$bmvAmthP7L7xwqYL}#)
                                              (begin
                                                (if (memq 'expand
                                                          #{when-list -ANAU$bmvAmthP7L7xwqct}#)
                                                  (let ((#{x -ANAU$bmvAmthP7L7xwqd7}#
                                                          (#{expand-top-sequence -ANAU$bmvAmthP7L7xwnOA}#
                                                            #{body -ANAU$bmvAmthP7L7xwqcu}#
                                                            #{r -ANAU$bmvAmthP7L7xwqYF}#
                                                            #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                            #{s -ANAU$bmvAmthP7L7xwqb@}#
                                                            'e
                                                            '(eval)
                                                            #{mod -ANAU$bmvAmthP7L7xwqcA}#)))
                                                    (primitive-eval
                                                      #{x -ANAU$bmvAmthP7L7xwqd7}#)))
                                                #{exps -ANAU$bmvAmthP7L7xwqYL}#))
                                            (if (memq 'load
                                                      #{when-list -ANAU$bmvAmthP7L7xwqct}#)
                                              (if (let ((#{t -ANAU$bmvAmthP7L7xwqeV}#
                                                          (memq 'compile
                                                                #{when-list -ANAU$bmvAmthP7L7xwqct}#)))
                                                    (if #{t -ANAU$bmvAmthP7L7xwqeV}#
                                                      #{t -ANAU$bmvAmthP7L7xwqeV}#
                                                      (let ((#{t -ANAU$bmvAmthP7L7xwqfG}#
                                                              (memq 'expand
                                                                    #{when-list -ANAU$bmvAmthP7L7xwqct}#)))
                                                        (if #{t -ANAU$bmvAmthP7L7xwqfG}#
                                                          #{t -ANAU$bmvAmthP7L7xwqfG}#
                                                          (if (eq? #{m -ANAU$bmvAmthP7L7xwqYI}#
                                                                   'c&e)
                                                            (memq 'eval
                                                                  #{when-list -ANAU$bmvAmthP7L7xwqct}#)
                                                            #f)))))
                                                (#{scan -ANAU$bmvAmthP7L7xwqWB}#
                                                  #{body -ANAU$bmvAmthP7L7xwqcu}#
                                                  #{r -ANAU$bmvAmthP7L7xwqYF}#
                                                  #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                  #{s -ANAU$bmvAmthP7L7xwqb@}#
                                                  'c&e
                                                  '(compile load)
                                                  #{mod -ANAU$bmvAmthP7L7xwqcA}#
                                                  #{exps -ANAU$bmvAmthP7L7xwqYL}#)
                                                (if (if (eq? #{m -ANAU$bmvAmthP7L7xwqYI}#
                                                             'c)
                                                      #t
                                                      (eq? #{m -ANAU$bmvAmthP7L7xwqYI}#
                                                           'c&e))
                                                  (#{scan -ANAU$bmvAmthP7L7xwqWB}#
                                                    #{body -ANAU$bmvAmthP7L7xwqcu}#
                                                    #{r -ANAU$bmvAmthP7L7xwqYF}#
                                                    #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                    #{s -ANAU$bmvAmthP7L7xwqb@}#
                                                    'c
                                                    '(load)
                                                    #{mod -ANAU$bmvAmthP7L7xwqcA}#
                                                    #{exps -ANAU$bmvAmthP7L7xwqYL}#)
                                                  #{exps -ANAU$bmvAmthP7L7xwqYL}#))
                                              (if (let ((#{t -ANAU$bmvAmthP7L7xwqhH}#
                                                          (memq 'compile
                                                                #{when-list -ANAU$bmvAmthP7L7xwqct}#)))
                                                    (if #{t -ANAU$bmvAmthP7L7xwqhH}#
                                                      #{t -ANAU$bmvAmthP7L7xwqhH}#
                                                      (let ((#{t -ANAU$bmvAmthP7L7xwqh4}#
                                                              (memq 'expand
                                                                    #{when-list -ANAU$bmvAmthP7L7xwqct}#)))
                                                        (if #{t -ANAU$bmvAmthP7L7xwqh4}#
                                                          #{t -ANAU$bmvAmthP7L7xwqh4}#
                                                          (if (eq? #{m -ANAU$bmvAmthP7L7xwqYI}#
                                                                   'c&e)
                                                            (memq 'eval
                                                                  #{when-list -ANAU$bmvAmthP7L7xwqct}#)
                                                            #f)))))
                                                (begin
                                                  (let ((#{x -ANAU$bmvAmthP7L7xwqj0}#
                                                          (#{expand-top-sequence -ANAU$bmvAmthP7L7xwnOA}#
                                                            #{body -ANAU$bmvAmthP7L7xwqcu}#
                                                            #{r -ANAU$bmvAmthP7L7xwqYF}#
                                                            #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                            #{s -ANAU$bmvAmthP7L7xwqb@}#
                                                            'e
                                                            '(eval)
                                                            #{mod -ANAU$bmvAmthP7L7xwqcA}#)))
                                                    (primitive-eval
                                                      #{x -ANAU$bmvAmthP7L7xwqj0}#))
                                                  #{exps -ANAU$bmvAmthP7L7xwqYL}#)
                                                #{exps -ANAU$bmvAmthP7L7xwqYL}#)))))
                                      #{tmp -ANAU$bmvAmthP7L7xwqcm}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e -ANAU$bmvAmthP7L7xwqb9}#)))
                                (if (if (eqv? #{type -ANAU$bmvAmthP7L7xwqb7}#
                                              'define-syntax-form)
                                      #t
                                      (eqv? #{type -ANAU$bmvAmthP7L7xwqb7}#
                                            'define-syntax-parameter-form))
                                  (let ((#{n -ANAU$bmvAmthP7L7xwqki}#
                                          (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                            #{value -ANAU$bmvAmthP7L7xwqb8}#
                                            #{w -ANAU$bmvAmthP7L7xwqb$}#))
                                        (#{r -ANAU$bmvAmthP7L7xwqkj}#
                                          (#{macros-only-env -ANAU$bmvAmthP7L7xwnNc}#
                                            #{r -ANAU$bmvAmthP7L7xwqYF}#)))
                                    (if (eqv? #{m -ANAU$bmvAmthP7L7xwqYI}# 'c)
                                      (if (memq 'compile
                                                #{esew -ANAU$bmvAmthP7L7xwqYJ}#)
                                        (let ((#{e -ANAU$bmvAmthP7L7xwqkn}#
                                                (#{expand-install-global -ANAU$bmvAmthP7L7xwnOB}#
                                                  #{n -ANAU$bmvAmthP7L7xwqki}#
                                                  (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                                    #{e -ANAU$bmvAmthP7L7xwqb9}#
                                                    #{r -ANAU$bmvAmthP7L7xwqkj}#
                                                    #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                    #{mod -ANAU$bmvAmthP7L7xwqcA}#))))
                                          (begin
                                            (#{top-level-eval-hook -ANAU$bmvAmthP7L7xwnM4}#
                                              #{e -ANAU$bmvAmthP7L7xwqkn}#
                                              #{mod -ANAU$bmvAmthP7L7xwqcA}#)
                                            (if (memq 'load
                                                      #{esew -ANAU$bmvAmthP7L7xwqYJ}#)
                                              (cons #{e -ANAU$bmvAmthP7L7xwqkn}#
                                                    #{exps -ANAU$bmvAmthP7L7xwqYL}#)
                                              #{exps -ANAU$bmvAmthP7L7xwqYL}#)))
                                        (if (memq 'load
                                                  #{esew -ANAU$bmvAmthP7L7xwqYJ}#)
                                          (cons (#{expand-install-global -ANAU$bmvAmthP7L7xwnOB}#
                                                  #{n -ANAU$bmvAmthP7L7xwqki}#
                                                  (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                                    #{e -ANAU$bmvAmthP7L7xwqb9}#
                                                    #{r -ANAU$bmvAmthP7L7xwqkj}#
                                                    #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                    #{mod -ANAU$bmvAmthP7L7xwqcA}#))
                                                #{exps -ANAU$bmvAmthP7L7xwqYL}#)
                                          #{exps -ANAU$bmvAmthP7L7xwqYL}#))
                                      (if (eqv? #{m -ANAU$bmvAmthP7L7xwqYI}#
                                                'c&e)
                                        (let ((#{e -ANAU$bmvAmthP7L7xwqup}#
                                                (#{expand-install-global -ANAU$bmvAmthP7L7xwnOB}#
                                                  #{n -ANAU$bmvAmthP7L7xwqki}#
                                                  (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                                    #{e -ANAU$bmvAmthP7L7xwqb9}#
                                                    #{r -ANAU$bmvAmthP7L7xwqkj}#
                                                    #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                    #{mod -ANAU$bmvAmthP7L7xwqcA}#))))
                                          (begin
                                            (#{top-level-eval-hook -ANAU$bmvAmthP7L7xwnM4}#
                                              #{e -ANAU$bmvAmthP7L7xwqup}#
                                              #{mod -ANAU$bmvAmthP7L7xwqcA}#)
                                            (cons #{e -ANAU$bmvAmthP7L7xwqup}#
                                                  #{exps -ANAU$bmvAmthP7L7xwqYL}#)))
                                        (begin
                                          (if (memq 'eval
                                                    #{esew -ANAU$bmvAmthP7L7xwqYJ}#)
                                            (#{top-level-eval-hook -ANAU$bmvAmthP7L7xwnM4}#
                                              (#{expand-install-global -ANAU$bmvAmthP7L7xwnOB}#
                                                #{n -ANAU$bmvAmthP7L7xwqki}#
                                                (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                                  #{e -ANAU$bmvAmthP7L7xwqb9}#
                                                  #{r -ANAU$bmvAmthP7L7xwqkj}#
                                                  #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                  #{mod -ANAU$bmvAmthP7L7xwqcA}#))
                                              #{mod -ANAU$bmvAmthP7L7xwqcA}#))
                                          #{exps -ANAU$bmvAmthP7L7xwqYL}#))))
                                  (if (eqv? #{type -ANAU$bmvAmthP7L7xwqb7}#
                                            'define-form)
                                    (let ((#{n -ANAU$bmvAmthP7L7xwq5L}#
                                            (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                              #{value -ANAU$bmvAmthP7L7xwqb8}#
                                              #{w -ANAU$bmvAmthP7L7xwqb$}#)))
                                      (let ((#{type -ANAU$bmvAmthP7L7xwq5M}#
                                              (car (let ((#{t -ANAU$bmvAmthP7L7xwq5T}#
                                                           (assq #{n -ANAU$bmvAmthP7L7xwq5L}#
                                                                 #{r -ANAU$bmvAmthP7L7xwqYF}#)))
                                                     (if #{t -ANAU$bmvAmthP7L7xwq5T}#
                                                       (cdr #{t -ANAU$bmvAmthP7L7xwq5T}#)
                                                       (if (symbol?
                                                             #{n -ANAU$bmvAmthP7L7xwq5L}#)
                                                         (let ((#{t -ANAU$bmvAmthP7L7xwq5Z}#
                                                                 (#{get-global-definition-hook -ANAU$bmvAmthP7L7xwnM7}#
                                                                   #{n -ANAU$bmvAmthP7L7xwq5L}#
                                                                   #{mod -ANAU$bmvAmthP7L7xwqcA}#)))
                                                           (if #{t -ANAU$bmvAmthP7L7xwq5Z}#
                                                             #{t -ANAU$bmvAmthP7L7xwq5Z}#
                                                             '(global)))
                                                         '(displaced-lexical)))))))
                                        (if (if (eqv? #{type -ANAU$bmvAmthP7L7xwq5M}#
                                                      'global)
                                              #t
                                              (if (eqv? #{type -ANAU$bmvAmthP7L7xwq5M}#
                                                        'core)
                                                #t
                                                (if (eqv? #{type -ANAU$bmvAmthP7L7xwq5M}#
                                                          'macro)
                                                  #t
                                                  (eqv? #{type -ANAU$bmvAmthP7L7xwq5M}#
                                                        'module-ref))))
                                          (begin
                                            (if (if (if (eq? #{m -ANAU$bmvAmthP7L7xwqYI}#
                                                             'c)
                                                      #t
                                                      (eq? #{m -ANAU$bmvAmthP7L7xwqYI}#
                                                           'c&e))
                                                  (if (not (module-local-variable
                                                             (current-module)
                                                             #{n -ANAU$bmvAmthP7L7xwq5L}#))
                                                    (current-module)
                                                    #f)
                                                  #f)
                                              (let ((#{old -ANAU$bmvAmthP7L7xwq54}#
                                                      (module-variable
                                                        (current-module)
                                                        #{n -ANAU$bmvAmthP7L7xwq5L}#)))
                                                (if (if (variable?
                                                          #{old -ANAU$bmvAmthP7L7xwq54}#)
                                                      (variable-bound?
                                                        #{old -ANAU$bmvAmthP7L7xwq54}#)
                                                      #f)
                                                  (module-define!
                                                    (current-module)
                                                    #{n -ANAU$bmvAmthP7L7xwq5L}#
                                                    (variable-ref
                                                      #{old -ANAU$bmvAmthP7L7xwq54}#))
                                                  (module-add!
                                                    (current-module)
                                                    #{n -ANAU$bmvAmthP7L7xwq5L}#
                                                    (make-undefined-variable)))))
                                            (cons (if (eq? #{m -ANAU$bmvAmthP7L7xwqYI}#
                                                           'c&e)
                                                    (let ((#{x -ANAU$bmvAmthP7L7xwrAx}#
                                                            (#{build-global-definition -ANAU$bmvAmthP7L7xwnNH}#
                                                              #{s -ANAU$bmvAmthP7L7xwqb@}#
                                                              #{n -ANAU$bmvAmthP7L7xwq5L}#
                                                              (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                                                #{e -ANAU$bmvAmthP7L7xwqb9}#
                                                                #{r -ANAU$bmvAmthP7L7xwqYF}#
                                                                #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                                #{mod -ANAU$bmvAmthP7L7xwqcA}#))))
                                                      (begin
                                                        (#{top-level-eval-hook -ANAU$bmvAmthP7L7xwnM4}#
                                                          #{x -ANAU$bmvAmthP7L7xwrAx}#
                                                          #{mod -ANAU$bmvAmthP7L7xwqcA}#)
                                                        #{x -ANAU$bmvAmthP7L7xwrAx}#))
                                                    (lambda ()
                                                      (#{build-global-definition -ANAU$bmvAmthP7L7xwnNH}#
                                                        #{s -ANAU$bmvAmthP7L7xwqb@}#
                                                        #{n -ANAU$bmvAmthP7L7xwq5L}#
                                                        (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                                          #{e -ANAU$bmvAmthP7L7xwqb9}#
                                                          #{r -ANAU$bmvAmthP7L7xwqYF}#
                                                          #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                          #{mod -ANAU$bmvAmthP7L7xwqcA}#))))
                                                  #{exps -ANAU$bmvAmthP7L7xwqYL}#))
                                          (if (eqv? #{type -ANAU$bmvAmthP7L7xwq5M}#
                                                    'displaced-lexical)
                                            (syntax-violation
                                              #f
                                              "identifier out of context"
                                              #{e -ANAU$bmvAmthP7L7xwqb9}#
                                              (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                #{value -ANAU$bmvAmthP7L7xwqb8}#
                                                #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                #{mod -ANAU$bmvAmthP7L7xwqcA}#))
                                            (syntax-violation
                                              #f
                                              "cannot define keyword at top level"
                                              #{e -ANAU$bmvAmthP7L7xwqb9}#
                                              (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                #{value -ANAU$bmvAmthP7L7xwqb8}#
                                                #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                #{mod -ANAU$bmvAmthP7L7xwqcA}#))))))
                                    (cons (if (eq? #{m -ANAU$bmvAmthP7L7xwqYI}#
                                                   'c&e)
                                            (let ((#{x -ANAU$bmvAmthP7L7xwrH4}#
                                                    (#{expand-expr -ANAU$bmvAmthP7L7xwnOF}#
                                                      #{type -ANAU$bmvAmthP7L7xwqb7}#
                                                      #{value -ANAU$bmvAmthP7L7xwqb8}#
                                                      #{e -ANAU$bmvAmthP7L7xwqb9}#
                                                      #{r -ANAU$bmvAmthP7L7xwqYF}#
                                                      #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                      #{s -ANAU$bmvAmthP7L7xwqb@}#
                                                      #{mod -ANAU$bmvAmthP7L7xwqcA}#)))
                                              (begin
                                                (primitive-eval
                                                  #{x -ANAU$bmvAmthP7L7xwrH4}#)
                                                #{x -ANAU$bmvAmthP7L7xwrH4}#))
                                            (lambda ()
                                              (#{expand-expr -ANAU$bmvAmthP7L7xwnOF}#
                                                #{type -ANAU$bmvAmthP7L7xwqb7}#
                                                #{value -ANAU$bmvAmthP7L7xwqb8}#
                                                #{e -ANAU$bmvAmthP7L7xwqb9}#
                                                #{r -ANAU$bmvAmthP7L7xwqYF}#
                                                #{w -ANAU$bmvAmthP7L7xwqb$}#
                                                #{s -ANAU$bmvAmthP7L7xwqb@}#
                                                #{mod -ANAU$bmvAmthP7L7xwqcA}#)))
                                          #{exps -ANAU$bmvAmthP7L7xwqYL}#)))))))))
                    (lambda (#{exps -ANAU$bmvAmthP7L7xwrH9}#)
                      (#{scan -ANAU$bmvAmthP7L7xwqWB}#
                        (cdr #{body -ANAU$bmvAmthP7L7xwqYE}#)
                        #{r -ANAU$bmvAmthP7L7xwqYF}#
                        #{w -ANAU$bmvAmthP7L7xwqYG}#
                        #{s -ANAU$bmvAmthP7L7xwqYH}#
                        #{m -ANAU$bmvAmthP7L7xwqYI}#
                        #{esew -ANAU$bmvAmthP7L7xwqYJ}#
                        #{mod -ANAU$bmvAmthP7L7xwqYK}#
                        #{exps -ANAU$bmvAmthP7L7xwrH9}#)))))))
           (call-with-values
             (lambda ()
               (#{scan -ANAU$bmvAmthP7L7xwqWB}#
                 #{body -ANAU$bmvAmthP7L7xwqV6}#
                 #{r -ANAU$bmvAmthP7L7xwqV7}#
                 #{w -ANAU$bmvAmthP7L7xwqV8}#
                 #{s -ANAU$bmvAmthP7L7xwqV9}#
                 #{m -ANAU$bmvAmthP7L7xwqV$}#
                 #{esew -ANAU$bmvAmthP7L7xwqV@}#
                 #{mod -ANAU$bmvAmthP7L7xwqWA}#
                 '()))
             (lambda (#{exps -ANAU$bmvAmthP7L7xwqWE}#)
               (if (null? #{exps -ANAU$bmvAmthP7L7xwqWE}#)
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 0)
                   #{s -ANAU$bmvAmthP7L7xwqV9}#)
                 (#{build-sequence -ANAU$bmvAmthP7L7xwnNN}#
                   #{s -ANAU$bmvAmthP7L7xwqV9}#
                   (letrec*
                     ((#{lp -ANAU$bmvAmthP7L7xwqWs}#
                        (lambda (#{in -ANAU$bmvAmthP7L7xwqYA}#
                                 #{out -ANAU$bmvAmthP7L7xwqYB}#)
                          (if (null? #{in -ANAU$bmvAmthP7L7xwqYA}#)
                            #{out -ANAU$bmvAmthP7L7xwqYB}#
                            (let ((#{e -ANAU$bmvAmthP7L7xwqYC}#
                                    (car #{in -ANAU$bmvAmthP7L7xwqYA}#)))
                              (#{lp -ANAU$bmvAmthP7L7xwqWs}#
                                (cdr #{in -ANAU$bmvAmthP7L7xwqYA}#)
                                (cons (if (procedure?
                                            #{e -ANAU$bmvAmthP7L7xwqYC}#)
                                        (#{e -ANAU$bmvAmthP7L7xwqYC}#)
                                        #{e -ANAU$bmvAmthP7L7xwqYC}#)
                                      #{out -ANAU$bmvAmthP7L7xwqYB}#)))))))
                     (#{lp -ANAU$bmvAmthP7L7xwqWs}#
                       #{exps -ANAU$bmvAmthP7L7xwqWE}#
                       '())))))))))
     (#{expand-install-global -ANAU$bmvAmthP7L7xwnOB}#
       (lambda (#{name -ANAU$bmvAmthP7L7xwrH$}#
                #{e -ANAU$bmvAmthP7L7xwrH@}#)
         (let ((#{exp -ANAU$bmvAmthP7L7xwrIF}#
                 (let ((#{fun-exp -ANAU$bmvAmthP7L7xwrIP}#
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'make-syntax-transformer)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'make-syntax-transformer
                             #f)))
                       (#{arg-exps -ANAU$bmvAmthP7L7xwrIQ}#
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name -ANAU$bmvAmthP7L7xwrH$}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               #{e -ANAU$bmvAmthP7L7xwrH@}#)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     #{fun-exp -ANAU$bmvAmthP7L7xwrIP}#
                     #{arg-exps -ANAU$bmvAmthP7L7xwrIQ}#))))
           (begin
             (if (if (struct? #{exp -ANAU$bmvAmthP7L7xwrIF}#)
                   (eq? (struct-vtable #{exp -ANAU$bmvAmthP7L7xwrIF}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta -ANAU$bmvAmthP7L7xwrI5}#
                       (struct-ref #{exp -ANAU$bmvAmthP7L7xwrIF}# 1)))
                 (if (not (assq 'name #{meta -ANAU$bmvAmthP7L7xwrI5}#))
                   (let ((#{v -ANAU$bmvAmthP7L7xwrJA}#
                           (cons (cons 'name #{name -ANAU$bmvAmthP7L7xwrH$}#)
                                 #{meta -ANAU$bmvAmthP7L7xwrI5}#)))
                     (struct-set!
                       #{exp -ANAU$bmvAmthP7L7xwrIF}#
                       1
                       #{v -ANAU$bmvAmthP7L7xwrJA}#)))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #f
               #{name -ANAU$bmvAmthP7L7xwrH$}#
               #{exp -ANAU$bmvAmthP7L7xwrIF}#)))))
     (#{parse-when-list -ANAU$bmvAmthP7L7xwnOC}#
       (lambda (#{e -ANAU$bmvAmthP7L7xwrJL}#
                #{when-list -ANAU$bmvAmthP7L7xwrJM}#)
         (let ((#{result -ANAU$bmvAmthP7L7xwrJN}#
                 (#{strip -ANAU$bmvAmthP7L7xwnOR}#
                   #{when-list -ANAU$bmvAmthP7L7xwrJM}#
                   '(()))))
           (letrec*
             ((#{lp -ANAU$bmvAmthP7L7xwrJO}#
                (lambda (#{l -ANAU$bmvAmthP7L7xwrKE}#)
                  (if (null? #{l -ANAU$bmvAmthP7L7xwrKE}#)
                    #{result -ANAU$bmvAmthP7L7xwrJN}#
                    (if (let ((#{t -ANAU$bmvAmthP7L7xwrKG}#
                                (car #{l -ANAU$bmvAmthP7L7xwrKE}#)))
                          (if (eq? #{t -ANAU$bmvAmthP7L7xwrKG}# 'compile)
                            #t
                            (if (eq? #{t -ANAU$bmvAmthP7L7xwrKG}# 'load)
                              #t
                              (if (eq? #{t -ANAU$bmvAmthP7L7xwrKG}# 'eval)
                                #t
                                (eq? #{t -ANAU$bmvAmthP7L7xwrKG}# 'expand)))))
                      (#{lp -ANAU$bmvAmthP7L7xwrJO}#
                        (cdr #{l -ANAU$bmvAmthP7L7xwrKE}#))
                      (syntax-violation
                        'eval-when
                        "invalid situation"
                        #{e -ANAU$bmvAmthP7L7xwrJL}#
                        (car #{l -ANAU$bmvAmthP7L7xwrKE}#)))))))
             (#{lp -ANAU$bmvAmthP7L7xwrJO}#
               #{result -ANAU$bmvAmthP7L7xwrJN}#)))))
     (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
       (lambda (#{e -ANAU$bmvAmthP7L7xwrKI}#
                #{r -ANAU$bmvAmthP7L7xwrKJ}#
                #{w -ANAU$bmvAmthP7L7xwrKK}#
                #{s -ANAU$bmvAmthP7L7xwrKL}#
                #{rib -ANAU$bmvAmthP7L7xwrKM}#
                #{mod -ANAU$bmvAmthP7L7xwrKN}#
                #{for-car? -ANAU$bmvAmthP7L7xwrKO}#)
         (if (symbol? #{e -ANAU$bmvAmthP7L7xwrKI}#)
           (let ((#{n -ANAU$bmvAmthP7L7xwrKP}#
                   (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                     #{e -ANAU$bmvAmthP7L7xwrKI}#
                     #{w -ANAU$bmvAmthP7L7xwrKK}#)))
             (let ((#{b -ANAU$bmvAmthP7L7xwrKQ}#
                     (let ((#{t -ANAU$bmvAmthP7L7xwrKY}#
                             (assq #{n -ANAU$bmvAmthP7L7xwrKP}#
                                   #{r -ANAU$bmvAmthP7L7xwrKJ}#)))
                       (if #{t -ANAU$bmvAmthP7L7xwrKY}#
                         (cdr #{t -ANAU$bmvAmthP7L7xwrKY}#)
                         (if (symbol? #{n -ANAU$bmvAmthP7L7xwrKP}#)
                           (let ((#{t -ANAU$bmvAmthP7L7xwrKe}#
                                   (#{get-global-definition-hook -ANAU$bmvAmthP7L7xwnM7}#
                                     #{n -ANAU$bmvAmthP7L7xwrKP}#
                                     #{mod -ANAU$bmvAmthP7L7xwrKN}#)))
                             (if #{t -ANAU$bmvAmthP7L7xwrKe}#
                               #{t -ANAU$bmvAmthP7L7xwrKe}#
                               '(global)))
                           '(displaced-lexical))))))
               (let ((#{type -ANAU$bmvAmthP7L7xwrKR}#
                       (car #{b -ANAU$bmvAmthP7L7xwrKQ}#)))
                 (if (eqv? #{type -ANAU$bmvAmthP7L7xwrKR}# 'lexical)
                   (values
                     #{type -ANAU$bmvAmthP7L7xwrKR}#
                     (cdr #{b -ANAU$bmvAmthP7L7xwrKQ}#)
                     #{e -ANAU$bmvAmthP7L7xwrKI}#
                     #{w -ANAU$bmvAmthP7L7xwrKK}#
                     #{s -ANAU$bmvAmthP7L7xwrKL}#
                     #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                   (if (eqv? #{type -ANAU$bmvAmthP7L7xwrKR}# 'global)
                     (values
                       #{type -ANAU$bmvAmthP7L7xwrKR}#
                       #{n -ANAU$bmvAmthP7L7xwrKP}#
                       #{e -ANAU$bmvAmthP7L7xwrKI}#
                       #{w -ANAU$bmvAmthP7L7xwrKK}#
                       #{s -ANAU$bmvAmthP7L7xwrKL}#
                       #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                     (if (eqv? #{type -ANAU$bmvAmthP7L7xwrKR}# 'macro)
                       (if #{for-car? -ANAU$bmvAmthP7L7xwrKO}#
                         (values
                           #{type -ANAU$bmvAmthP7L7xwrKR}#
                           (cdr #{b -ANAU$bmvAmthP7L7xwrKQ}#)
                           #{e -ANAU$bmvAmthP7L7xwrKI}#
                           #{w -ANAU$bmvAmthP7L7xwrKK}#
                           #{s -ANAU$bmvAmthP7L7xwrKL}#
                           #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                         (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                           (#{expand-macro -ANAU$bmvAmthP7L7xwnOH}#
                             (cdr #{b -ANAU$bmvAmthP7L7xwrKQ}#)
                             #{e -ANAU$bmvAmthP7L7xwrKI}#
                             #{r -ANAU$bmvAmthP7L7xwrKJ}#
                             #{w -ANAU$bmvAmthP7L7xwrKK}#
                             #{s -ANAU$bmvAmthP7L7xwrKL}#
                             #{rib -ANAU$bmvAmthP7L7xwrKM}#
                             #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                           #{r -ANAU$bmvAmthP7L7xwrKJ}#
                           '(())
                           #{s -ANAU$bmvAmthP7L7xwrKL}#
                           #{rib -ANAU$bmvAmthP7L7xwrKM}#
                           #{mod -ANAU$bmvAmthP7L7xwrKN}#
                           #f))
                       (values
                         #{type -ANAU$bmvAmthP7L7xwrKR}#
                         (cdr #{b -ANAU$bmvAmthP7L7xwrKQ}#)
                         #{e -ANAU$bmvAmthP7L7xwrKI}#
                         #{w -ANAU$bmvAmthP7L7xwrKK}#
                         #{s -ANAU$bmvAmthP7L7xwrKL}#
                         #{mod -ANAU$bmvAmthP7L7xwrKN}#)))))))
           (if (pair? #{e -ANAU$bmvAmthP7L7xwrKI}#)
             (let ((#{first -ANAU$bmvAmthP7L7xwrKy}#
                     (car #{e -ANAU$bmvAmthP7L7xwrKI}#)))
               (call-with-values
                 (lambda ()
                   (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                     #{first -ANAU$bmvAmthP7L7xwrKy}#
                     #{r -ANAU$bmvAmthP7L7xwrKJ}#
                     #{w -ANAU$bmvAmthP7L7xwrKK}#
                     #{s -ANAU$bmvAmthP7L7xwrKL}#
                     #{rib -ANAU$bmvAmthP7L7xwrKM}#
                     #{mod -ANAU$bmvAmthP7L7xwrKN}#
                     #t))
                 (lambda (#{ftype -ANAU$bmvAmthP7L7xwrK0}#
                          #{fval -ANAU$bmvAmthP7L7xwrK1}#
                          #{fe -ANAU$bmvAmthP7L7xwrK2}#
                          #{fw -ANAU$bmvAmthP7L7xwrK3}#
                          #{fs -ANAU$bmvAmthP7L7xwrK4}#
                          #{fmod -ANAU$bmvAmthP7L7xwrK5}#)
                   (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}# 'lexical)
                     (values
                       'lexical-call
                       #{fval -ANAU$bmvAmthP7L7xwrK1}#
                       #{e -ANAU$bmvAmthP7L7xwrKI}#
                       #{w -ANAU$bmvAmthP7L7xwrKK}#
                       #{s -ANAU$bmvAmthP7L7xwrKL}#
                       #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                     (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}# 'global)
                       (values
                         'global-call
                         (vector
                           'syntax-object
                           #{fval -ANAU$bmvAmthP7L7xwrK1}#
                           #{w -ANAU$bmvAmthP7L7xwrKK}#
                           #{fmod -ANAU$bmvAmthP7L7xwrK5}#)
                         #{e -ANAU$bmvAmthP7L7xwrKI}#
                         #{w -ANAU$bmvAmthP7L7xwrKK}#
                         #{s -ANAU$bmvAmthP7L7xwrKL}#
                         #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                       (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}# 'macro)
                         (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                           (#{expand-macro -ANAU$bmvAmthP7L7xwnOH}#
                             #{fval -ANAU$bmvAmthP7L7xwrK1}#
                             #{e -ANAU$bmvAmthP7L7xwrKI}#
                             #{r -ANAU$bmvAmthP7L7xwrKJ}#
                             #{w -ANAU$bmvAmthP7L7xwrKK}#
                             #{s -ANAU$bmvAmthP7L7xwrKL}#
                             #{rib -ANAU$bmvAmthP7L7xwrKM}#
                             #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                           #{r -ANAU$bmvAmthP7L7xwrKJ}#
                           '(())
                           #{s -ANAU$bmvAmthP7L7xwrKL}#
                           #{rib -ANAU$bmvAmthP7L7xwrKM}#
                           #{mod -ANAU$bmvAmthP7L7xwrKN}#
                           #{for-car? -ANAU$bmvAmthP7L7xwrKO}#)
                         (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}#
                                   'module-ref)
                           (call-with-values
                             (lambda ()
                               (#{fval -ANAU$bmvAmthP7L7xwrK1}#
                                 #{e -ANAU$bmvAmthP7L7xwrKI}#
                                 #{r -ANAU$bmvAmthP7L7xwrKJ}#
                                 #{w -ANAU$bmvAmthP7L7xwrKK}#))
                             (lambda (#{e -ANAU$bmvAmthP7L7xwrLO}#
                                      #{r -ANAU$bmvAmthP7L7xwrLP}#
                                      #{w -ANAU$bmvAmthP7L7xwrLQ}#
                                      #{s -ANAU$bmvAmthP7L7xwrLR}#
                                      #{mod -ANAU$bmvAmthP7L7xwrLS}#)
                               (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                                 #{e -ANAU$bmvAmthP7L7xwrLO}#
                                 #{r -ANAU$bmvAmthP7L7xwrLP}#
                                 #{w -ANAU$bmvAmthP7L7xwrLQ}#
                                 #{s -ANAU$bmvAmthP7L7xwrLR}#
                                 #{rib -ANAU$bmvAmthP7L7xwrKM}#
                                 #{mod -ANAU$bmvAmthP7L7xwrLS}#
                                 #{for-car? -ANAU$bmvAmthP7L7xwrKO}#)))
                           (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}# 'core)
                             (values
                               'core-form
                               #{fval -ANAU$bmvAmthP7L7xwrK1}#
                               #{e -ANAU$bmvAmthP7L7xwrKI}#
                               #{w -ANAU$bmvAmthP7L7xwrKK}#
                               #{s -ANAU$bmvAmthP7L7xwrKL}#
                               #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                             (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}#
                                       'local-syntax)
                               (values
                                 'local-syntax-form
                                 #{fval -ANAU$bmvAmthP7L7xwrK1}#
                                 #{e -ANAU$bmvAmthP7L7xwrKI}#
                                 #{w -ANAU$bmvAmthP7L7xwrKK}#
                                 #{s -ANAU$bmvAmthP7L7xwrKL}#
                                 #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                               (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}#
                                         'begin)
                                 (values
                                   'begin-form
                                   #f
                                   #{e -ANAU$bmvAmthP7L7xwrKI}#
                                   #{w -ANAU$bmvAmthP7L7xwrKK}#
                                   #{s -ANAU$bmvAmthP7L7xwrKL}#
                                   #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                                 (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}#
                                           'eval-when)
                                   (values
                                     'eval-when-form
                                     #f
                                     #{e -ANAU$bmvAmthP7L7xwrKI}#
                                     #{w -ANAU$bmvAmthP7L7xwrKK}#
                                     #{s -ANAU$bmvAmthP7L7xwrKL}#
                                     #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                                   (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}#
                                             'define)
                                     (let ((#{tmp -ANAU$bmvAmthP7L7xwrLj}#
                                             ($sc-dispatch
                                               #{e -ANAU$bmvAmthP7L7xwrKI}#
                                               '(_ any any))))
                                       (if (if #{tmp -ANAU$bmvAmthP7L7xwrLj}#
                                             (@apply
                                               (lambda (#{name -ANAU$bmvAmthP7L7xwrLn}#
                                                        #{val -ANAU$bmvAmthP7L7xwrLo}#)
                                                 (if (symbol?
                                                       #{name -ANAU$bmvAmthP7L7xwrLn}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name -ANAU$bmvAmthP7L7xwrLn}#)
                                                         (if (= (vector-length
                                                                  #{name -ANAU$bmvAmthP7L7xwrLn}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name -ANAU$bmvAmthP7L7xwrLn}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name -ANAU$bmvAmthP7L7xwrLn}#
                                                         1))
                                                     #f)))
                                               #{tmp -ANAU$bmvAmthP7L7xwrLj}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name -ANAU$bmvAmthP7L7xwrMD}#
                                                    #{val -ANAU$bmvAmthP7L7xwrME}#)
                                             (values
                                               'define-form
                                               #{name -ANAU$bmvAmthP7L7xwrMD}#
                                               #{val -ANAU$bmvAmthP7L7xwrME}#
                                               #{w -ANAU$bmvAmthP7L7xwrKK}#
                                               #{s -ANAU$bmvAmthP7L7xwrKL}#
                                               #{mod -ANAU$bmvAmthP7L7xwrKN}#))
                                           #{tmp -ANAU$bmvAmthP7L7xwrLj}#)
                                         (let ((#{tmp -ANAU$bmvAmthP7L7xwrMF}#
                                                 ($sc-dispatch
                                                   #{e -ANAU$bmvAmthP7L7xwrKI}#
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if #{tmp -ANAU$bmvAmthP7L7xwrMF}#
                                                 (@apply
                                                   (lambda (#{name -ANAU$bmvAmthP7L7xwrMJ}#
                                                            #{args -ANAU$bmvAmthP7L7xwrMK}#
                                                            #{e1 -ANAU$bmvAmthP7L7xwrML}#
                                                            #{e2 -ANAU$bmvAmthP7L7xwrMM}#)
                                                     (if (if (symbol?
                                                               #{name -ANAU$bmvAmthP7L7xwrMJ}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name -ANAU$bmvAmthP7L7xwrMJ}#)
                                                                 (if (= (vector-length
                                                                          #{name -ANAU$bmvAmthP7L7xwrMJ}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name -ANAU$bmvAmthP7L7xwrMJ}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name -ANAU$bmvAmthP7L7xwrMJ}#
                                                                 1))
                                                             #f))
                                                       (#{valid-bound-ids? -ANAU$bmvAmthP7L7xwnN6}#
                                                         (letrec*
                                                           ((#{lvl -ANAU$bmvAmthP7L7xwrOh}#
                                                              (lambda (#{vars -ANAU$bmvAmthP7L7xwrOj}#
                                                                       #{ls -ANAU$bmvAmthP7L7xwrOk}#
                                                                       #{w -ANAU$bmvAmthP7L7xwrOl}#)
                                                                (if (pair? #{vars -ANAU$bmvAmthP7L7xwrOj}#)
                                                                  (#{lvl -ANAU$bmvAmthP7L7xwrOh}#
                                                                    (cdr #{vars -ANAU$bmvAmthP7L7xwrOj}#)
                                                                    (cons (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                                            (car #{vars -ANAU$bmvAmthP7L7xwrOj}#)
                                                                            #{w -ANAU$bmvAmthP7L7xwrOl}#
                                                                            #f)
                                                                          #{ls -ANAU$bmvAmthP7L7xwrOk}#)
                                                                    #{w -ANAU$bmvAmthP7L7xwrOl}#)
                                                                  (if (if (symbol?
                                                                            #{vars -ANAU$bmvAmthP7L7xwrOj}#)
                                                                        #t
                                                                        (if (if (vector?
                                                                                  #{vars -ANAU$bmvAmthP7L7xwrOj}#)
                                                                              (if (= (vector-length
                                                                                       #{vars -ANAU$bmvAmthP7L7xwrOj}#)
                                                                                     4)
                                                                                (eq? (vector-ref
                                                                                       #{vars -ANAU$bmvAmthP7L7xwrOj}#
                                                                                       0)
                                                                                     'syntax-object)
                                                                                #f)
                                                                              #f)
                                                                          (symbol?
                                                                            (vector-ref
                                                                              #{vars -ANAU$bmvAmthP7L7xwrOj}#
                                                                              1))
                                                                          #f))
                                                                    (cons (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                                            #{vars -ANAU$bmvAmthP7L7xwrOj}#
                                                                            #{w -ANAU$bmvAmthP7L7xwrOl}#
                                                                            #f)
                                                                          #{ls -ANAU$bmvAmthP7L7xwrOk}#)
                                                                    (if (null? #{vars -ANAU$bmvAmthP7L7xwrOj}#)
                                                                      #{ls -ANAU$bmvAmthP7L7xwrOk}#
                                                                      (if (if (vector?
                                                                                #{vars -ANAU$bmvAmthP7L7xwrOj}#)
                                                                            (if (= (vector-length
                                                                                     #{vars -ANAU$bmvAmthP7L7xwrOj}#)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     #{vars -ANAU$bmvAmthP7L7xwrOj}#
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (#{lvl -ANAU$bmvAmthP7L7xwrOh}#
                                                                          (vector-ref
                                                                            #{vars -ANAU$bmvAmthP7L7xwrOj}#
                                                                            1)
                                                                          #{ls -ANAU$bmvAmthP7L7xwrOk}#
                                                                          (#{join-wraps -ANAU$bmvAmthP7L7xwnNw}#
                                                                            #{w -ANAU$bmvAmthP7L7xwrOl}#
                                                                            (vector-ref
                                                                              #{vars -ANAU$bmvAmthP7L7xwrOj}#
                                                                              2)))
                                                                        (cons #{vars -ANAU$bmvAmthP7L7xwrOj}#
                                                                              #{ls -ANAU$bmvAmthP7L7xwrOk}#))))))))
                                                           (#{lvl -ANAU$bmvAmthP7L7xwrOh}#
                                                             #{args -ANAU$bmvAmthP7L7xwrMK}#
                                                             '()
                                                             '(()))))
                                                       #f))
                                                   #{tmp -ANAU$bmvAmthP7L7xwrMF}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name -ANAU$bmvAmthP7L7xwrPR}#
                                                        #{args -ANAU$bmvAmthP7L7xwrPS}#
                                                        #{e1 -ANAU$bmvAmthP7L7xwrPT}#
                                                        #{e2 -ANAU$bmvAmthP7L7xwrPU}#)
                                                 (values
                                                   'define-form
                                                   (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                     #{name -ANAU$bmvAmthP7L7xwrPR}#
                                                     #{w -ANAU$bmvAmthP7L7xwrKK}#
                                                     #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                                                   (let ((#{e -ANAU$bmvAmthP7L7xwrPa}#
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l7"
                                                                         "l8"
                                                                         "l9"
                                                                         "la"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("ko"
                                                                         "kp"
                                                                         "kq"
                                                                         "kr"
                                                                         "ks"
                                                                         "kt"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("kn"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("kd"
                                                                         "ke"
                                                                         "kf"
                                                                         "kg"
                                                                         "kh"
                                                                         "ki"
                                                                         "kj"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("5l"
                                                                        "5k"
                                                                        "5j"
                                                                        "5i"
                                                                        "5h"
                                                                        "5g"
                                                                        "5f"
                                                                        "5e"
                                                                        "5d"
                                                                        "5c"
                                                                        "5b"
                                                                        "5a"
                                                                        "59"
                                                                        "58"
                                                                        "57"
                                                                        "56"
                                                                        "55"
                                                                        "54"
                                                                        "53"
                                                                        "52"
                                                                        "51"
                                                                        "50"
                                                                        "4z"
                                                                        "4y"
                                                                        "4x"
                                                                        "4w"
                                                                        "4v"
                                                                        "4u"
                                                                        "4t"
                                                                        "4s"
                                                                        "4r"
                                                                        "4q"
                                                                        "4p"
                                                                        "4o"
                                                                        "4n"
                                                                        "4m"
                                                                        "4l"
                                                                        "4k"
                                                                        "4j"
                                                                        "4i"
                                                                        "4h"
                                                                        "4g"
                                                                        "4f"
                                                                        "4e"
                                                                        "4d"
                                                                        "4c"
                                                                        "4b"
                                                                        "4a"
                                                                        "49"
                                                                        "48"
                                                                        "47"
                                                                        "46"
                                                                        "45"
                                                                        "44"
                                                                        "43"
                                                                        "42"
                                                                        "41"
                                                                        "40"
                                                                        "3z"
                                                                        "3y"
                                                                        "3x"
                                                                        "3w"
                                                                        "3v"
                                                                        "3u"
                                                                        "3t"
                                                                        "3s"
                                                                        "3r"
                                                                        "3q"
                                                                        "3p"
                                                                        "3o"
                                                                        "3n"
                                                                        "3m"
                                                                        "3l"
                                                                        "3k"
                                                                        "3j"
                                                                        "3i"
                                                                        "3h"
                                                                        "3g"
                                                                        "3f"
                                                                        "3e"
                                                                        "3d"
                                                                        "3c"
                                                                        "3b"
                                                                        "3a"
                                                                        "39"
                                                                        "38"
                                                                        "37"
                                                                        "36"
                                                                        "35"
                                                                        "34"
                                                                        "33"
                                                                        "32"
                                                                        "31"
                                                                        "30"
                                                                        "2z"
                                                                        "2y"
                                                                        "2x"
                                                                        "2w"
                                                                        "2v"
                                                                        "2u"
                                                                        "2t"
                                                                        "2s"
                                                                        "2r"
                                                                        "2q"
                                                                        "2p"
                                                                        "2o"
                                                                        "2n"
                                                                        "2m"
                                                                        "2l"
                                                                        "2k"
                                                                        "2j"
                                                                        "2i"
                                                                        "2h"
                                                                        "2g"
                                                                        "2f"
                                                                        "2e"
                                                                        "2d"
                                                                        "2c"
                                                                        "2b"
                                                                        "2a"
                                                                        "29"
                                                                        "28"
                                                                        "27"
                                                                        "26"
                                                                        "25"
                                                                        "24"
                                                                        "23"
                                                                        "22"
                                                                        "21"
                                                                        "20"
                                                                        "1z"
                                                                        "1y"
                                                                        "1x"
                                                                        "1w"
                                                                        "1v"
                                                                        "1u"
                                                                        "1t"
                                                                        "1s"
                                                                        "1r"
                                                                        "1q"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("8"
                                                                        "7"
                                                                        "6")))
                                                                    (hygiene
                                                                      guile))
                                                                 (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                                   (cons #{args -ANAU$bmvAmthP7L7xwrPS}#
                                                                         (cons #{e1 -ANAU$bmvAmthP7L7xwrPT}#
                                                                               #{e2 -ANAU$bmvAmthP7L7xwrPU}#))
                                                                   #{w -ANAU$bmvAmthP7L7xwrKK}#
                                                                   #{mod -ANAU$bmvAmthP7L7xwrKN}#))))
                                                     (begin
                                                       (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrPa}#)
                                                             #{s -ANAU$bmvAmthP7L7xwrKL}#
                                                             #f)
                                                         (set-source-properties!
                                                           #{e -ANAU$bmvAmthP7L7xwrPa}#
                                                           #{s -ANAU$bmvAmthP7L7xwrKL}#))
                                                       #{e -ANAU$bmvAmthP7L7xwrPa}#))
                                                   '(())
                                                   #{s -ANAU$bmvAmthP7L7xwrKL}#
                                                   #{mod -ANAU$bmvAmthP7L7xwrKN}#))
                                               #{tmp -ANAU$bmvAmthP7L7xwrMF}#)
                                             (let ((#{tmp -ANAU$bmvAmthP7L7xwrPh}#
                                                     ($sc-dispatch
                                                       #{e -ANAU$bmvAmthP7L7xwrKI}#
                                                       '(_ any))))
                                               (if (if #{tmp -ANAU$bmvAmthP7L7xwrPh}#
                                                     (@apply
                                                       (lambda (#{name -ANAU$bmvAmthP7L7xwrPl}#)
                                                         (if (symbol?
                                                               #{name -ANAU$bmvAmthP7L7xwrPl}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name -ANAU$bmvAmthP7L7xwrPl}#)
                                                                 (if (= (vector-length
                                                                          #{name -ANAU$bmvAmthP7L7xwrPl}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name -ANAU$bmvAmthP7L7xwrPl}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name -ANAU$bmvAmthP7L7xwrPl}#
                                                                 1))
                                                             #f)))
                                                       #{tmp -ANAU$bmvAmthP7L7xwrPh}#)
                                                     #f)
                                                 (@apply
                                                   (lambda (#{name -ANAU$bmvAmthP7L7xwrQA}#)
                                                     (values
                                                       'define-form
                                                       (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                         #{name -ANAU$bmvAmthP7L7xwrQA}#
                                                         #{w -ANAU$bmvAmthP7L7xwrKK}#
                                                         #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                                                       '(#(syntax-object
                                                           if
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("lc"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("ko"
                                                                "kp"
                                                                "kq"
                                                                "kr"
                                                                "ks"
                                                                "kt"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("kn"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("kd"
                                                                "ke"
                                                                "kf"
                                                                "kg"
                                                                "kh"
                                                                "ki"
                                                                "kj"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("5l"
                                                               "5k"
                                                               "5j"
                                                               "5i"
                                                               "5h"
                                                               "5g"
                                                               "5f"
                                                               "5e"
                                                               "5d"
                                                               "5c"
                                                               "5b"
                                                               "5a"
                                                               "59"
                                                               "58"
                                                               "57"
                                                               "56"
                                                               "55"
                                                               "54"
                                                               "53"
                                                               "52"
                                                               "51"
                                                               "50"
                                                               "4z"
                                                               "4y"
                                                               "4x"
                                                               "4w"
                                                               "4v"
                                                               "4u"
                                                               "4t"
                                                               "4s"
                                                               "4r"
                                                               "4q"
                                                               "4p"
                                                               "4o"
                                                               "4n"
                                                               "4m"
                                                               "4l"
                                                               "4k"
                                                               "4j"
                                                               "4i"
                                                               "4h"
                                                               "4g"
                                                               "4f"
                                                               "4e"
                                                               "4d"
                                                               "4c"
                                                               "4b"
                                                               "4a"
                                                               "49"
                                                               "48"
                                                               "47"
                                                               "46"
                                                               "45"
                                                               "44"
                                                               "43"
                                                               "42"
                                                               "41"
                                                               "40"
                                                               "3z"
                                                               "3y"
                                                               "3x"
                                                               "3w"
                                                               "3v"
                                                               "3u"
                                                               "3t"
                                                               "3s"
                                                               "3r"
                                                               "3q"
                                                               "3p"
                                                               "3o"
                                                               "3n"
                                                               "3m"
                                                               "3l"
                                                               "3k"
                                                               "3j"
                                                               "3i"
                                                               "3h"
                                                               "3g"
                                                               "3f"
                                                               "3e"
                                                               "3d"
                                                               "3c"
                                                               "3b"
                                                               "3a"
                                                               "39"
                                                               "38"
                                                               "37"
                                                               "36"
                                                               "35"
                                                               "34"
                                                               "33"
                                                               "32"
                                                               "31"
                                                               "30"
                                                               "2z"
                                                               "2y"
                                                               "2x"
                                                               "2w"
                                                               "2v"
                                                               "2u"
                                                               "2t"
                                                               "2s"
                                                               "2r"
                                                               "2q"
                                                               "2p"
                                                               "2o"
                                                               "2n"
                                                               "2m"
                                                               "2l"
                                                               "2k"
                                                               "2j"
                                                               "2i"
                                                               "2h"
                                                               "2g"
                                                               "2f"
                                                               "2e"
                                                               "2d"
                                                               "2c"
                                                               "2b"
                                                               "2a"
                                                               "29"
                                                               "28"
                                                               "27"
                                                               "26"
                                                               "25"
                                                               "24"
                                                               "23"
                                                               "22"
                                                               "21"
                                                               "20"
                                                               "1z"
                                                               "1y"
                                                               "1x"
                                                               "1w"
                                                               "1v"
                                                               "1u"
                                                               "1t"
                                                               "1s"
                                                               "1r"
                                                               "1q"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("8" "7" "6")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("lc"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("ko"
                                                                "kp"
                                                                "kq"
                                                                "kr"
                                                                "ks"
                                                                "kt"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("kn"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("kd"
                                                                "ke"
                                                                "kf"
                                                                "kg"
                                                                "kh"
                                                                "ki"
                                                                "kj"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("5l"
                                                               "5k"
                                                               "5j"
                                                               "5i"
                                                               "5h"
                                                               "5g"
                                                               "5f"
                                                               "5e"
                                                               "5d"
                                                               "5c"
                                                               "5b"
                                                               "5a"
                                                               "59"
                                                               "58"
                                                               "57"
                                                               "56"
                                                               "55"
                                                               "54"
                                                               "53"
                                                               "52"
                                                               "51"
                                                               "50"
                                                               "4z"
                                                               "4y"
                                                               "4x"
                                                               "4w"
                                                               "4v"
                                                               "4u"
                                                               "4t"
                                                               "4s"
                                                               "4r"
                                                               "4q"
                                                               "4p"
                                                               "4o"
                                                               "4n"
                                                               "4m"
                                                               "4l"
                                                               "4k"
                                                               "4j"
                                                               "4i"
                                                               "4h"
                                                               "4g"
                                                               "4f"
                                                               "4e"
                                                               "4d"
                                                               "4c"
                                                               "4b"
                                                               "4a"
                                                               "49"
                                                               "48"
                                                               "47"
                                                               "46"
                                                               "45"
                                                               "44"
                                                               "43"
                                                               "42"
                                                               "41"
                                                               "40"
                                                               "3z"
                                                               "3y"
                                                               "3x"
                                                               "3w"
                                                               "3v"
                                                               "3u"
                                                               "3t"
                                                               "3s"
                                                               "3r"
                                                               "3q"
                                                               "3p"
                                                               "3o"
                                                               "3n"
                                                               "3m"
                                                               "3l"
                                                               "3k"
                                                               "3j"
                                                               "3i"
                                                               "3h"
                                                               "3g"
                                                               "3f"
                                                               "3e"
                                                               "3d"
                                                               "3c"
                                                               "3b"
                                                               "3a"
                                                               "39"
                                                               "38"
                                                               "37"
                                                               "36"
                                                               "35"
                                                               "34"
                                                               "33"
                                                               "32"
                                                               "31"
                                                               "30"
                                                               "2z"
                                                               "2y"
                                                               "2x"
                                                               "2w"
                                                               "2v"
                                                               "2u"
                                                               "2t"
                                                               "2s"
                                                               "2r"
                                                               "2q"
                                                               "2p"
                                                               "2o"
                                                               "2n"
                                                               "2m"
                                                               "2l"
                                                               "2k"
                                                               "2j"
                                                               "2i"
                                                               "2h"
                                                               "2g"
                                                               "2f"
                                                               "2e"
                                                               "2d"
                                                               "2c"
                                                               "2b"
                                                               "2a"
                                                               "29"
                                                               "28"
                                                               "27"
                                                               "26"
                                                               "25"
                                                               "24"
                                                               "23"
                                                               "22"
                                                               "21"
                                                               "20"
                                                               "1z"
                                                               "1y"
                                                               "1x"
                                                               "1w"
                                                               "1v"
                                                               "1u"
                                                               "1t"
                                                               "1s"
                                                               "1r"
                                                               "1q"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("8" "7" "6")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("lc"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("ko"
                                                                "kp"
                                                                "kq"
                                                                "kr"
                                                                "ks"
                                                                "kt"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("kn"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("kd"
                                                                "ke"
                                                                "kf"
                                                                "kg"
                                                                "kh"
                                                                "ki"
                                                                "kj"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("5l"
                                                               "5k"
                                                               "5j"
                                                               "5i"
                                                               "5h"
                                                               "5g"
                                                               "5f"
                                                               "5e"
                                                               "5d"
                                                               "5c"
                                                               "5b"
                                                               "5a"
                                                               "59"
                                                               "58"
                                                               "57"
                                                               "56"
                                                               "55"
                                                               "54"
                                                               "53"
                                                               "52"
                                                               "51"
                                                               "50"
                                                               "4z"
                                                               "4y"
                                                               "4x"
                                                               "4w"
                                                               "4v"
                                                               "4u"
                                                               "4t"
                                                               "4s"
                                                               "4r"
                                                               "4q"
                                                               "4p"
                                                               "4o"
                                                               "4n"
                                                               "4m"
                                                               "4l"
                                                               "4k"
                                                               "4j"
                                                               "4i"
                                                               "4h"
                                                               "4g"
                                                               "4f"
                                                               "4e"
                                                               "4d"
                                                               "4c"
                                                               "4b"
                                                               "4a"
                                                               "49"
                                                               "48"
                                                               "47"
                                                               "46"
                                                               "45"
                                                               "44"
                                                               "43"
                                                               "42"
                                                               "41"
                                                               "40"
                                                               "3z"
                                                               "3y"
                                                               "3x"
                                                               "3w"
                                                               "3v"
                                                               "3u"
                                                               "3t"
                                                               "3s"
                                                               "3r"
                                                               "3q"
                                                               "3p"
                                                               "3o"
                                                               "3n"
                                                               "3m"
                                                               "3l"
                                                               "3k"
                                                               "3j"
                                                               "3i"
                                                               "3h"
                                                               "3g"
                                                               "3f"
                                                               "3e"
                                                               "3d"
                                                               "3c"
                                                               "3b"
                                                               "3a"
                                                               "39"
                                                               "38"
                                                               "37"
                                                               "36"
                                                               "35"
                                                               "34"
                                                               "33"
                                                               "32"
                                                               "31"
                                                               "30"
                                                               "2z"
                                                               "2y"
                                                               "2x"
                                                               "2w"
                                                               "2v"
                                                               "2u"
                                                               "2t"
                                                               "2s"
                                                               "2r"
                                                               "2q"
                                                               "2p"
                                                               "2o"
                                                               "2n"
                                                               "2m"
                                                               "2l"
                                                               "2k"
                                                               "2j"
                                                               "2i"
                                                               "2h"
                                                               "2g"
                                                               "2f"
                                                               "2e"
                                                               "2d"
                                                               "2c"
                                                               "2b"
                                                               "2a"
                                                               "29"
                                                               "28"
                                                               "27"
                                                               "26"
                                                               "25"
                                                               "24"
                                                               "23"
                                                               "22"
                                                               "21"
                                                               "20"
                                                               "1z"
                                                               "1y"
                                                               "1x"
                                                               "1w"
                                                               "1v"
                                                               "1u"
                                                               "1t"
                                                               "1s"
                                                               "1r"
                                                               "1q"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("8" "7" "6")))
                                                           (hygiene guile)))
                                                       '(())
                                                       #{s -ANAU$bmvAmthP7L7xwrKL}#
                                                       #{mod -ANAU$bmvAmthP7L7xwrKN}#))
                                                   #{tmp -ANAU$bmvAmthP7L7xwrPh}#)
                                                 (syntax-violation
                                                   #f
                                                   "source expression failed to match any pattern"
                                                   #{e -ANAU$bmvAmthP7L7xwrKI}#)))))))
                                     (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}#
                                               'define-syntax)
                                       (let ((#{tmp -ANAU$bmvAmthP7L7xwrQT}#
                                               ($sc-dispatch
                                                 #{e -ANAU$bmvAmthP7L7xwrKI}#
                                                 '(_ any any))))
                                         (if (if #{tmp -ANAU$bmvAmthP7L7xwrQT}#
                                               (@apply
                                                 (lambda (#{name -ANAU$bmvAmthP7L7xwrQX}#
                                                          #{val -ANAU$bmvAmthP7L7xwrQY}#)
                                                   (if (symbol?
                                                         #{name -ANAU$bmvAmthP7L7xwrQX}#)
                                                     #t
                                                     (if (if (vector?
                                                               #{name -ANAU$bmvAmthP7L7xwrQX}#)
                                                           (if (= (vector-length
                                                                    #{name -ANAU$bmvAmthP7L7xwrQX}#)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    #{name -ANAU$bmvAmthP7L7xwrQX}#
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           #{name -ANAU$bmvAmthP7L7xwrQX}#
                                                           1))
                                                       #f)))
                                                 #{tmp -ANAU$bmvAmthP7L7xwrQT}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name -ANAU$bmvAmthP7L7xwrQz}#
                                                      #{val -ANAU$bmvAmthP7L7xwrQ0}#)
                                               (values
                                                 'define-syntax-form
                                                 #{name -ANAU$bmvAmthP7L7xwrQz}#
                                                 #{val -ANAU$bmvAmthP7L7xwrQ0}#
                                                 #{w -ANAU$bmvAmthP7L7xwrKK}#
                                                 #{s -ANAU$bmvAmthP7L7xwrKL}#
                                                 #{mod -ANAU$bmvAmthP7L7xwrKN}#))
                                             #{tmp -ANAU$bmvAmthP7L7xwrQT}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{e -ANAU$bmvAmthP7L7xwrKI}#)))
                                       (if (eqv? #{ftype -ANAU$bmvAmthP7L7xwrK0}#
                                                 'define-syntax-parameter)
                                         (let ((#{tmp -ANAU$bmvAmthP7L7xwrQ@}#
                                                 ($sc-dispatch
                                                   #{e -ANAU$bmvAmthP7L7xwrKI}#
                                                   '(_ any any))))
                                           (if (if #{tmp -ANAU$bmvAmthP7L7xwrQ@}#
                                                 (@apply
                                                   (lambda (#{name -ANAU$bmvAmthP7L7xwrRD}#
                                                            #{val -ANAU$bmvAmthP7L7xwrRE}#)
                                                     (if (symbol?
                                                           #{name -ANAU$bmvAmthP7L7xwrRD}#)
                                                       #t
                                                       (if (if (vector?
                                                                 #{name -ANAU$bmvAmthP7L7xwrRD}#)
                                                             (if (= (vector-length
                                                                      #{name -ANAU$bmvAmthP7L7xwrRD}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name -ANAU$bmvAmthP7L7xwrRD}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (symbol?
                                                           (vector-ref
                                                             #{name -ANAU$bmvAmthP7L7xwrRD}#
                                                             1))
                                                         #f)))
                                                   #{tmp -ANAU$bmvAmthP7L7xwrQ@}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name -ANAU$bmvAmthP7L7xwrRf}#
                                                        #{val -ANAU$bmvAmthP7L7xwrRg}#)
                                                 (values
                                                   'define-syntax-parameter-form
                                                   #{name -ANAU$bmvAmthP7L7xwrRf}#
                                                   #{val -ANAU$bmvAmthP7L7xwrRg}#
                                                   #{w -ANAU$bmvAmthP7L7xwrKK}#
                                                   #{s -ANAU$bmvAmthP7L7xwrKL}#
                                                   #{mod -ANAU$bmvAmthP7L7xwrKN}#))
                                               #{tmp -ANAU$bmvAmthP7L7xwrQ@}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{e -ANAU$bmvAmthP7L7xwrKI}#)))
                                         (values
                                           'call
                                           #f
                                           #{e -ANAU$bmvAmthP7L7xwrKI}#
                                           #{w -ANAU$bmvAmthP7L7xwrKK}#
                                           #{s -ANAU$bmvAmthP7L7xwrKL}#
                                           #{mod -ANAU$bmvAmthP7L7xwrKN}#)))))))))))))))
             (if (if (vector? #{e -ANAU$bmvAmthP7L7xwrKI}#)
                   (if (= (vector-length #{e -ANAU$bmvAmthP7L7xwrKI}#)
                          4)
                     (eq? (vector-ref #{e -ANAU$bmvAmthP7L7xwrKI}# 0)
                          'syntax-object)
                     #f)
                   #f)
               (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                 (vector-ref #{e -ANAU$bmvAmthP7L7xwrKI}# 1)
                 #{r -ANAU$bmvAmthP7L7xwrKJ}#
                 (#{join-wraps -ANAU$bmvAmthP7L7xwnNw}#
                   #{w -ANAU$bmvAmthP7L7xwrKK}#
                   (vector-ref #{e -ANAU$bmvAmthP7L7xwrKI}# 2))
                 (let ((#{t -ANAU$bmvAmthP7L7xwrR7}#
                         (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                           #{e -ANAU$bmvAmthP7L7xwrKI}#)))
                   (if #{t -ANAU$bmvAmthP7L7xwrR7}#
                     #{t -ANAU$bmvAmthP7L7xwrR7}#
                     #{s -ANAU$bmvAmthP7L7xwrKL}#))
                 #{rib -ANAU$bmvAmthP7L7xwrKM}#
                 (let ((#{t -ANAU$bmvAmthP7L7xwrVm}#
                         (vector-ref #{e -ANAU$bmvAmthP7L7xwrKI}# 3)))
                   (if #{t -ANAU$bmvAmthP7L7xwrVm}#
                     #{t -ANAU$bmvAmthP7L7xwrVm}#
                     #{mod -ANAU$bmvAmthP7L7xwrKN}#))
                 #{for-car? -ANAU$bmvAmthP7L7xwrKO}#)
               (if (self-evaluating? #{e -ANAU$bmvAmthP7L7xwrKI}#)
                 (values
                   'constant
                   #f
                   #{e -ANAU$bmvAmthP7L7xwrKI}#
                   #{w -ANAU$bmvAmthP7L7xwrKK}#
                   #{s -ANAU$bmvAmthP7L7xwrKL}#
                   #{mod -ANAU$bmvAmthP7L7xwrKN}#)
                 (values
                   'other
                   #f
                   #{e -ANAU$bmvAmthP7L7xwrKI}#
                   #{w -ANAU$bmvAmthP7L7xwrKK}#
                   #{s -ANAU$bmvAmthP7L7xwrKL}#
                   #{mod -ANAU$bmvAmthP7L7xwrKN}#)))))))
     (#{expand -ANAU$bmvAmthP7L7xwnOE}#
       (lambda (#{e -ANAU$bmvAmthP7L7xwrVv}#
                #{r -ANAU$bmvAmthP7L7xwrVw}#
                #{w -ANAU$bmvAmthP7L7xwrVx}#
                #{mod -ANAU$bmvAmthP7L7xwrVy}#)
         (call-with-values
           (lambda ()
             (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
               #{e -ANAU$bmvAmthP7L7xwrVv}#
               #{r -ANAU$bmvAmthP7L7xwrVw}#
               #{w -ANAU$bmvAmthP7L7xwrVx}#
               (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                 #{e -ANAU$bmvAmthP7L7xwrVv}#)
               #f
               #{mod -ANAU$bmvAmthP7L7xwrVy}#
               #f))
           (lambda (#{type -ANAU$bmvAmthP7L7xwrYN}#
                    #{value -ANAU$bmvAmthP7L7xwrYO}#
                    #{e -ANAU$bmvAmthP7L7xwrYP}#
                    #{w -ANAU$bmvAmthP7L7xwrYQ}#
                    #{s -ANAU$bmvAmthP7L7xwrYR}#
                    #{mod -ANAU$bmvAmthP7L7xwrYS}#)
             (#{expand-expr -ANAU$bmvAmthP7L7xwnOF}#
               #{type -ANAU$bmvAmthP7L7xwrYN}#
               #{value -ANAU$bmvAmthP7L7xwrYO}#
               #{e -ANAU$bmvAmthP7L7xwrYP}#
               #{r -ANAU$bmvAmthP7L7xwrVw}#
               #{w -ANAU$bmvAmthP7L7xwrYQ}#
               #{s -ANAU$bmvAmthP7L7xwrYR}#
               #{mod -ANAU$bmvAmthP7L7xwrYS}#)))))
     (#{expand-expr -ANAU$bmvAmthP7L7xwnOF}#
       (lambda (#{type -ANAU$bmvAmthP7L7xwrYV}#
                #{value -ANAU$bmvAmthP7L7xwrYW}#
                #{e -ANAU$bmvAmthP7L7xwrYX}#
                #{r -ANAU$bmvAmthP7L7xwrYY}#
                #{w -ANAU$bmvAmthP7L7xwrYZ}#
                #{s -ANAU$bmvAmthP7L7xwrYa}#
                #{mod -ANAU$bmvAmthP7L7xwrYb}#)
         (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}# 'lexical)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 3)
             #{s -ANAU$bmvAmthP7L7xwrYa}#
             #{e -ANAU$bmvAmthP7L7xwrYX}#
             #{value -ANAU$bmvAmthP7L7xwrYW}#)
           (if (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}# 'core)
                 #t
                 (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}# 'core-form))
             (#{value -ANAU$bmvAmthP7L7xwrYW}#
               #{e -ANAU$bmvAmthP7L7xwrYX}#
               #{r -ANAU$bmvAmthP7L7xwrYY}#
               #{w -ANAU$bmvAmthP7L7xwrYZ}#
               #{s -ANAU$bmvAmthP7L7xwrYa}#
               #{mod -ANAU$bmvAmthP7L7xwrYb}#)
             (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                       'module-ref)
               (call-with-values
                 (lambda ()
                   (#{value -ANAU$bmvAmthP7L7xwrYW}#
                     #{e -ANAU$bmvAmthP7L7xwrYX}#
                     #{r -ANAU$bmvAmthP7L7xwrYY}#
                     #{w -ANAU$bmvAmthP7L7xwrYZ}#))
                 (lambda (#{e -ANAU$bmvAmthP7L7xwrY1}#
                          #{r -ANAU$bmvAmthP7L7xwrY2}#
                          #{w -ANAU$bmvAmthP7L7xwrY3}#
                          #{s -ANAU$bmvAmthP7L7xwrY4}#
                          #{mod -ANAU$bmvAmthP7L7xwrY5}#)
                   (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                     #{e -ANAU$bmvAmthP7L7xwrY1}#
                     #{r -ANAU$bmvAmthP7L7xwrY2}#
                     #{w -ANAU$bmvAmthP7L7xwrY3}#
                     #{mod -ANAU$bmvAmthP7L7xwrY5}#)))
               (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                         'lexical-call)
                 (#{expand-application -ANAU$bmvAmthP7L7xwnOG}#
                   (let ((#{id -ANAU$bmvAmthP7L7xwraE}#
                           (car #{e -ANAU$bmvAmthP7L7xwrYX}#)))
                     (#{build-lexical-reference -ANAU$bmvAmthP7L7xwnNC}#
                       'fun
                       (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                         #{id -ANAU$bmvAmthP7L7xwraE}#)
                       (if (if (vector? #{id -ANAU$bmvAmthP7L7xwraE}#)
                             (if (= (vector-length
                                      #{id -ANAU$bmvAmthP7L7xwraE}#)
                                    4)
                               (eq? (vector-ref
                                      #{id -ANAU$bmvAmthP7L7xwraE}#
                                      0)
                                    'syntax-object)
                               #f)
                             #f)
                         (syntax->datum #{id -ANAU$bmvAmthP7L7xwraE}#)
                         #{id -ANAU$bmvAmthP7L7xwraE}#)
                       #{value -ANAU$bmvAmthP7L7xwrYW}#))
                   #{e -ANAU$bmvAmthP7L7xwrYX}#
                   #{r -ANAU$bmvAmthP7L7xwrYY}#
                   #{w -ANAU$bmvAmthP7L7xwrYZ}#
                   #{s -ANAU$bmvAmthP7L7xwrYa}#
                   #{mod -ANAU$bmvAmthP7L7xwrYb}#)
                 (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                           'global-call)
                   (#{expand-application -ANAU$bmvAmthP7L7xwnOG}#
                     (#{build-global-reference -ANAU$bmvAmthP7L7xwnNF}#
                       (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                         (car #{e -ANAU$bmvAmthP7L7xwrYX}#))
                       (if (if (vector? #{value -ANAU$bmvAmthP7L7xwrYW}#)
                             (if (= (vector-length
                                      #{value -ANAU$bmvAmthP7L7xwrYW}#)
                                    4)
                               (eq? (vector-ref
                                      #{value -ANAU$bmvAmthP7L7xwrYW}#
                                      0)
                                    'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{value -ANAU$bmvAmthP7L7xwrYW}# 1)
                         #{value -ANAU$bmvAmthP7L7xwrYW}#)
                       (if (if (vector? #{value -ANAU$bmvAmthP7L7xwrYW}#)
                             (if (= (vector-length
                                      #{value -ANAU$bmvAmthP7L7xwrYW}#)
                                    4)
                               (eq? (vector-ref
                                      #{value -ANAU$bmvAmthP7L7xwrYW}#
                                      0)
                                    'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{value -ANAU$bmvAmthP7L7xwrYW}# 3)
                         #{mod -ANAU$bmvAmthP7L7xwrYb}#))
                     #{e -ANAU$bmvAmthP7L7xwrYX}#
                     #{r -ANAU$bmvAmthP7L7xwrYY}#
                     #{w -ANAU$bmvAmthP7L7xwrYZ}#
                     #{s -ANAU$bmvAmthP7L7xwrYa}#
                     #{mod -ANAU$bmvAmthP7L7xwrYb}#)
                   (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}# 'constant)
                     (let ((#{exp -ANAU$bmvAmthP7L7xwrfV}#
                             (#{strip -ANAU$bmvAmthP7L7xwnOR}#
                               (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                 (begin
                                   (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrYX}#)
                                         #{s -ANAU$bmvAmthP7L7xwrYa}#
                                         #f)
                                     (set-source-properties!
                                       #{e -ANAU$bmvAmthP7L7xwrYX}#
                                       #{s -ANAU$bmvAmthP7L7xwrYa}#))
                                   #{e -ANAU$bmvAmthP7L7xwrYX}#)
                                 #{w -ANAU$bmvAmthP7L7xwrYZ}#
                                 #{mod -ANAU$bmvAmthP7L7xwrYb}#)
                               '(()))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #{s -ANAU$bmvAmthP7L7xwrYa}#
                         #{exp -ANAU$bmvAmthP7L7xwrfV}#))
                     (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}# 'global)
                       (#{analyze-variable -ANAU$bmvAmthP7L7xwnNE}#
                         #{mod -ANAU$bmvAmthP7L7xwrYb}#
                         #{value -ANAU$bmvAmthP7L7xwrYW}#
                         (lambda (#{mod -ANAU$bmvAmthP7L7xwrf5}#
                                  #{var -ANAU$bmvAmthP7L7xwrf6}#
                                  #{public? -ANAU$bmvAmthP7L7xwrf7}#)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #{s -ANAU$bmvAmthP7L7xwrYa}#
                             #{mod -ANAU$bmvAmthP7L7xwrf5}#
                             #{var -ANAU$bmvAmthP7L7xwrf6}#
                             #{public? -ANAU$bmvAmthP7L7xwrf7}#))
                         (lambda (#{var -ANAU$bmvAmthP7L7xwrgE}#)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #{s -ANAU$bmvAmthP7L7xwrYa}#
                             #{var -ANAU$bmvAmthP7L7xwrgE}#)))
                       (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}# 'call)
                         (#{expand-application -ANAU$bmvAmthP7L7xwnOG}#
                           (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                             (car #{e -ANAU$bmvAmthP7L7xwrYX}#)
                             #{r -ANAU$bmvAmthP7L7xwrYY}#
                             #{w -ANAU$bmvAmthP7L7xwrYZ}#
                             #{mod -ANAU$bmvAmthP7L7xwrYb}#)
                           #{e -ANAU$bmvAmthP7L7xwrYX}#
                           #{r -ANAU$bmvAmthP7L7xwrYY}#
                           #{w -ANAU$bmvAmthP7L7xwrYZ}#
                           #{s -ANAU$bmvAmthP7L7xwrYa}#
                           #{mod -ANAU$bmvAmthP7L7xwrYb}#)
                         (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                                   'begin-form)
                           (let ((#{tmp -ANAU$bmvAmthP7L7xwrhP}#
                                   ($sc-dispatch
                                     #{e -ANAU$bmvAmthP7L7xwrYX}#
                                     '(_ any . each-any))))
                             (if #{tmp -ANAU$bmvAmthP7L7xwrhP}#
                               (@apply
                                 (lambda (#{e1 -ANAU$bmvAmthP7L7xwrhT}#
                                          #{e2 -ANAU$bmvAmthP7L7xwrhU}#)
                                   (#{expand-sequence -ANAU$bmvAmthP7L7xwnN@}#
                                     (cons #{e1 -ANAU$bmvAmthP7L7xwrhT}#
                                           #{e2 -ANAU$bmvAmthP7L7xwrhU}#)
                                     #{r -ANAU$bmvAmthP7L7xwrYY}#
                                     #{w -ANAU$bmvAmthP7L7xwrYZ}#
                                     #{s -ANAU$bmvAmthP7L7xwrYa}#
                                     #{mod -ANAU$bmvAmthP7L7xwrYb}#))
                                 #{tmp -ANAU$bmvAmthP7L7xwrhP}#)
                               (let ((#{tmp -ANAU$bmvAmthP7L7xwrir}#
                                       ($sc-dispatch
                                         #{e -ANAU$bmvAmthP7L7xwrYX}#
                                         '(_))))
                                 (if #{tmp -ANAU$bmvAmthP7L7xwrir}#
                                   (@apply
                                     (lambda ()
                                       (if (include-deprecated-features)
                                         (begin
                                           (issue-deprecation-warning
                                             "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))
                                         (syntax-violation
                                           #f
                                           "sequence of zero expressions"
                                           (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                             (begin
                                               (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrYX}#)
                                                     #{s -ANAU$bmvAmthP7L7xwrYa}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e -ANAU$bmvAmthP7L7xwrYX}#
                                                   #{s -ANAU$bmvAmthP7L7xwrYa}#))
                                               #{e -ANAU$bmvAmthP7L7xwrYX}#)
                                             #{w -ANAU$bmvAmthP7L7xwrYZ}#
                                             #{mod -ANAU$bmvAmthP7L7xwrYb}#))))
                                     #{tmp -ANAU$bmvAmthP7L7xwrir}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{e -ANAU$bmvAmthP7L7xwrYX}#)))))
                           (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                                     'local-syntax-form)
                             (#{expand-local-syntax -ANAU$bmvAmthP7L7xwnOJ}#
                               #{value -ANAU$bmvAmthP7L7xwrYW}#
                               #{e -ANAU$bmvAmthP7L7xwrYX}#
                               #{r -ANAU$bmvAmthP7L7xwrYY}#
                               #{w -ANAU$bmvAmthP7L7xwrYZ}#
                               #{s -ANAU$bmvAmthP7L7xwrYa}#
                               #{mod -ANAU$bmvAmthP7L7xwrYb}#
                               #{expand-sequence -ANAU$bmvAmthP7L7xwnN@}#)
                             (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                                       'eval-when-form)
                               (let ((#{tmp -ANAU$bmvAmthP7L7xwrka}#
                                       ($sc-dispatch
                                         #{e -ANAU$bmvAmthP7L7xwrYX}#
                                         '(_ each-any any . each-any))))
                                 (if #{tmp -ANAU$bmvAmthP7L7xwrka}#
                                   (@apply
                                     (lambda (#{x -ANAU$bmvAmthP7L7xwrke}#
                                              #{e1 -ANAU$bmvAmthP7L7xwrkf}#
                                              #{e2 -ANAU$bmvAmthP7L7xwrkg}#)
                                       (let ((#{when-list -ANAU$bmvAmthP7L7xwrkh}#
                                               (#{parse-when-list -ANAU$bmvAmthP7L7xwnOC}#
                                                 #{e -ANAU$bmvAmthP7L7xwrYX}#
                                                 #{x -ANAU$bmvAmthP7L7xwrke}#)))
                                         (if (memq 'eval
                                                   #{when-list -ANAU$bmvAmthP7L7xwrkh}#)
                                           (#{expand-sequence -ANAU$bmvAmthP7L7xwnN@}#
                                             (cons #{e1 -ANAU$bmvAmthP7L7xwrkf}#
                                                   #{e2 -ANAU$bmvAmthP7L7xwrkg}#)
                                             #{r -ANAU$bmvAmthP7L7xwrYY}#
                                             #{w -ANAU$bmvAmthP7L7xwrYZ}#
                                             #{s -ANAU$bmvAmthP7L7xwrYa}#
                                             #{mod -ANAU$bmvAmthP7L7xwrYb}#)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))))
                                     #{tmp -ANAU$bmvAmthP7L7xwrka}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{e -ANAU$bmvAmthP7L7xwrYX}#)))
                               (if (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                                             'define-form)
                                     #t
                                     (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                                               'define-syntax-form)
                                       #t
                                       (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                                             'define-syntax-parameter-form)))
                                 (syntax-violation
                                   #f
                                   "definition in expression context"
                                   #{e -ANAU$bmvAmthP7L7xwrYX}#
                                   (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                     #{value -ANAU$bmvAmthP7L7xwrYW}#
                                     #{w -ANAU$bmvAmthP7L7xwrYZ}#
                                     #{mod -ANAU$bmvAmthP7L7xwrYb}#))
                                 (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                                           'syntax)
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                       (begin
                                         (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrYX}#)
                                               #{s -ANAU$bmvAmthP7L7xwrYa}#
                                               #f)
                                           (set-source-properties!
                                             #{e -ANAU$bmvAmthP7L7xwrYX}#
                                             #{s -ANAU$bmvAmthP7L7xwrYa}#))
                                         #{e -ANAU$bmvAmthP7L7xwrYX}#)
                                       #{w -ANAU$bmvAmthP7L7xwrYZ}#
                                       #{mod -ANAU$bmvAmthP7L7xwrYb}#))
                                   (if (eqv? #{type -ANAU$bmvAmthP7L7xwrYV}#
                                             'displaced-lexical)
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                         (begin
                                           (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrYX}#)
                                                 #{s -ANAU$bmvAmthP7L7xwrYa}#
                                                 #f)
                                             (set-source-properties!
                                               #{e -ANAU$bmvAmthP7L7xwrYX}#
                                               #{s -ANAU$bmvAmthP7L7xwrYa}#))
                                           #{e -ANAU$bmvAmthP7L7xwrYX}#)
                                         #{w -ANAU$bmvAmthP7L7xwrYZ}#
                                         #{mod -ANAU$bmvAmthP7L7xwrYb}#))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                         (begin
                                           (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrYX}#)
                                                 #{s -ANAU$bmvAmthP7L7xwrYa}#
                                                 #f)
                                             (set-source-properties!
                                               #{e -ANAU$bmvAmthP7L7xwrYX}#
                                               #{s -ANAU$bmvAmthP7L7xwrYa}#))
                                           #{e -ANAU$bmvAmthP7L7xwrYX}#)
                                         #{w -ANAU$bmvAmthP7L7xwrYZ}#
                                         #{mod -ANAU$bmvAmthP7L7xwrYb}#))))))))))))))))))
     (#{expand-application -ANAU$bmvAmthP7L7xwnOG}#
       (lambda (#{x -ANAU$bmvAmthP7L7xwroR}#
                #{e -ANAU$bmvAmthP7L7xwroS}#
                #{r -ANAU$bmvAmthP7L7xwroT}#
                #{w -ANAU$bmvAmthP7L7xwroU}#
                #{s -ANAU$bmvAmthP7L7xwroV}#
                #{mod -ANAU$bmvAmthP7L7xwroW}#)
         (let ((#{tmp -ANAU$bmvAmthP7L7xwroY}#
                 ($sc-dispatch
                   #{e -ANAU$bmvAmthP7L7xwroS}#
                   '(any . each-any))))
           (if #{tmp -ANAU$bmvAmthP7L7xwroY}#
             (@apply
               (lambda (#{e0 -ANAU$bmvAmthP7L7xwroc}#
                        #{e1 -ANAU$bmvAmthP7L7xwrod}#)
                 (#{build-application -ANAU$bmvAmthP7L7xwnM@}#
                   #{s -ANAU$bmvAmthP7L7xwroV}#
                   #{x -ANAU$bmvAmthP7L7xwroR}#
                   (map (lambda (#{e -ANAU$bmvAmthP7L7xwrpt}#)
                          (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                            #{e -ANAU$bmvAmthP7L7xwrpt}#
                            #{r -ANAU$bmvAmthP7L7xwroT}#
                            #{w -ANAU$bmvAmthP7L7xwroU}#
                            #{mod -ANAU$bmvAmthP7L7xwroW}#))
                        #{e1 -ANAU$bmvAmthP7L7xwrod}#)))
               #{tmp -ANAU$bmvAmthP7L7xwroY}#)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               #{e -ANAU$bmvAmthP7L7xwroS}#)))))
     (#{expand-macro -ANAU$bmvAmthP7L7xwnOH}#
       (lambda (#{p -ANAU$bmvAmthP7L7xwrq5}#
                #{e -ANAU$bmvAmthP7L7xwrq6}#
                #{r -ANAU$bmvAmthP7L7xwrq7}#
                #{w -ANAU$bmvAmthP7L7xwrq8}#
                #{s -ANAU$bmvAmthP7L7xwrq9}#
                #{rib -ANAU$bmvAmthP7L7xwrq$}#
                #{mod -ANAU$bmvAmthP7L7xwrq@}#)
         (letrec*
           ((#{rebuild-macro-output -ANAU$bmvAmthP7L7xwrrA}#
              (lambda (#{x -ANAU$bmvAmthP7L7xwrrh}#
                       #{m -ANAU$bmvAmthP7L7xwrri}#)
                (if (pair? #{x -ANAU$bmvAmthP7L7xwrrh}#)
                  (let ((#{e -ANAU$bmvAmthP7L7xwrrm}#
                          (cons (#{rebuild-macro-output -ANAU$bmvAmthP7L7xwrrA}#
                                  (car #{x -ANAU$bmvAmthP7L7xwrrh}#)
                                  #{m -ANAU$bmvAmthP7L7xwrri}#)
                                (#{rebuild-macro-output -ANAU$bmvAmthP7L7xwrrA}#
                                  (cdr #{x -ANAU$bmvAmthP7L7xwrrh}#)
                                  #{m -ANAU$bmvAmthP7L7xwrri}#))))
                    (begin
                      (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrrm}#)
                            #{s -ANAU$bmvAmthP7L7xwrq9}#
                            #f)
                        (set-source-properties!
                          #{e -ANAU$bmvAmthP7L7xwrrm}#
                          #{s -ANAU$bmvAmthP7L7xwrq9}#))
                      #{e -ANAU$bmvAmthP7L7xwrrm}#))
                  (if (if (vector? #{x -ANAU$bmvAmthP7L7xwrrh}#)
                        (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwrrh}#)
                               4)
                          (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwrrh}# 0)
                               'syntax-object)
                          #f)
                        #f)
                    (let ((#{w -ANAU$bmvAmthP7L7xwrr2}#
                            (vector-ref #{x -ANAU$bmvAmthP7L7xwrrh}# 2)))
                      (let ((#{ms -ANAU$bmvAmthP7L7xwrr3}#
                              (car #{w -ANAU$bmvAmthP7L7xwrr2}#))
                            (#{s -ANAU$bmvAmthP7L7xwrr4}#
                              (cdr #{w -ANAU$bmvAmthP7L7xwrr2}#)))
                        (if (if (pair? #{ms -ANAU$bmvAmthP7L7xwrr3}#)
                              (eq? (car #{ms -ANAU$bmvAmthP7L7xwrr3}#) #f)
                              #f)
                          (let ((#{expression -ANAU$bmvAmthP7L7xwrsA}#
                                  (vector-ref #{x -ANAU$bmvAmthP7L7xwrrh}# 1))
                                (#{wrap -ANAU$bmvAmthP7L7xwrsB}#
                                  (cons (cdr #{ms -ANAU$bmvAmthP7L7xwrr3}#)
                                        (if #{rib -ANAU$bmvAmthP7L7xwrq$}#
                                          (cons #{rib -ANAU$bmvAmthP7L7xwrq$}#
                                                (cdr #{s -ANAU$bmvAmthP7L7xwrr4}#))
                                          (cdr #{s -ANAU$bmvAmthP7L7xwrr4}#))))
                                (#{module -ANAU$bmvAmthP7L7xwrsC}#
                                  (vector-ref #{x -ANAU$bmvAmthP7L7xwrrh}# 3)))
                            (vector
                              'syntax-object
                              #{expression -ANAU$bmvAmthP7L7xwrsA}#
                              #{wrap -ANAU$bmvAmthP7L7xwrsB}#
                              #{module -ANAU$bmvAmthP7L7xwrsC}#))
                          (let ((#{expression -ANAU$bmvAmthP7L7xwrsM}#
                                  (let ((#{e -ANAU$bmvAmthP7L7xwrsR}#
                                          (vector-ref
                                            #{x -ANAU$bmvAmthP7L7xwrrh}#
                                            1)))
                                    (begin
                                      (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrsR}#)
                                            #{s -ANAU$bmvAmthP7L7xwrr4}#
                                            #f)
                                        (set-source-properties!
                                          #{e -ANAU$bmvAmthP7L7xwrsR}#
                                          #{s -ANAU$bmvAmthP7L7xwrr4}#))
                                      #{e -ANAU$bmvAmthP7L7xwrsR}#)))
                                (#{wrap -ANAU$bmvAmthP7L7xwrsN}#
                                  (cons (cons #{m -ANAU$bmvAmthP7L7xwrri}#
                                              #{ms -ANAU$bmvAmthP7L7xwrr3}#)
                                        (if #{rib -ANAU$bmvAmthP7L7xwrq$}#
                                          (cons #{rib -ANAU$bmvAmthP7L7xwrq$}#
                                                (cons 'shift
                                                      #{s -ANAU$bmvAmthP7L7xwrr4}#))
                                          (cons 'shift
                                                #{s -ANAU$bmvAmthP7L7xwrr4}#))))
                                (#{module -ANAU$bmvAmthP7L7xwrsO}#
                                  (vector-ref #{x -ANAU$bmvAmthP7L7xwrrh}# 3)))
                            (vector
                              'syntax-object
                              #{expression -ANAU$bmvAmthP7L7xwrsM}#
                              #{wrap -ANAU$bmvAmthP7L7xwrsN}#
                              #{module -ANAU$bmvAmthP7L7xwrsO}#)))))
                    (if (vector? #{x -ANAU$bmvAmthP7L7xwrrh}#)
                      (let ((#{n -ANAU$bmvAmthP7L7xwrsd}#
                              (vector-length #{x -ANAU$bmvAmthP7L7xwrrh}#)))
                        (let ((#{v -ANAU$bmvAmthP7L7xwrse}#
                                (let ((#{e -ANAU$bmvAmthP7L7xwrsm}#
                                        (make-vector
                                          #{n -ANAU$bmvAmthP7L7xwrsd}#)))
                                  (begin
                                    (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrsm}#)
                                          #{x -ANAU$bmvAmthP7L7xwrrh}#
                                          #f)
                                      (set-source-properties!
                                        #{e -ANAU$bmvAmthP7L7xwrsm}#
                                        #{x -ANAU$bmvAmthP7L7xwrrh}#))
                                    #{e -ANAU$bmvAmthP7L7xwrsm}#))))
                          (letrec*
                            ((#{loop -ANAU$bmvAmthP7L7xwrsf}#
                               (lambda (#{i -ANAU$bmvAmthP7L7xwrtT}#)
                                 (if (= #{i -ANAU$bmvAmthP7L7xwrtT}#
                                        #{n -ANAU$bmvAmthP7L7xwrsd}#)
                                   #{v -ANAU$bmvAmthP7L7xwrse}#
                                   (begin
                                     (vector-set!
                                       #{v -ANAU$bmvAmthP7L7xwrse}#
                                       #{i -ANAU$bmvAmthP7L7xwrtT}#
                                       (#{rebuild-macro-output -ANAU$bmvAmthP7L7xwrrA}#
                                         (vector-ref
                                           #{x -ANAU$bmvAmthP7L7xwrrh}#
                                           #{i -ANAU$bmvAmthP7L7xwrtT}#)
                                         #{m -ANAU$bmvAmthP7L7xwrri}#))
                                     (#{loop -ANAU$bmvAmthP7L7xwrsf}#
                                       (#{1+}# #{i -ANAU$bmvAmthP7L7xwrtT}#)))))))
                            (#{loop -ANAU$bmvAmthP7L7xwrsf}# 0))))
                      (if (symbol? #{x -ANAU$bmvAmthP7L7xwrrh}#)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (let ((#{s -ANAU$bmvAmthP7L7xwrtZ}#
                                  (cdr #{w -ANAU$bmvAmthP7L7xwrq8}#)))
                            (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                              (begin
                                (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrq6}#)
                                      #{s -ANAU$bmvAmthP7L7xwrtZ}#
                                      #f)
                                  (set-source-properties!
                                    #{e -ANAU$bmvAmthP7L7xwrq6}#
                                    #{s -ANAU$bmvAmthP7L7xwrtZ}#))
                                #{e -ANAU$bmvAmthP7L7xwrq6}#)
                              #{w -ANAU$bmvAmthP7L7xwrq8}#
                              #{mod -ANAU$bmvAmthP7L7xwrq@}#))
                          #{x -ANAU$bmvAmthP7L7xwrrh}#)
                        (begin
                          (if (if (pair? #{x -ANAU$bmvAmthP7L7xwrrh}#)
                                #{s -ANAU$bmvAmthP7L7xwrq9}#
                                #f)
                            (set-source-properties!
                              #{x -ANAU$bmvAmthP7L7xwrrh}#
                              #{s -ANAU$bmvAmthP7L7xwrq9}#))
                          #{x -ANAU$bmvAmthP7L7xwrrh}#))))))))
           (with-fluids
             ((#{transformer-environment -ANAU$bmvAmthP7L7xwnN2}#
                (lambda (#{k -ANAU$bmvAmthP7L7xwrrB}#)
                  (#{k -ANAU$bmvAmthP7L7xwrrB}#
                    #{e -ANAU$bmvAmthP7L7xwrq6}#
                    #{r -ANAU$bmvAmthP7L7xwrq7}#
                    #{w -ANAU$bmvAmthP7L7xwrq8}#
                    #{s -ANAU$bmvAmthP7L7xwrq9}#
                    #{rib -ANAU$bmvAmthP7L7xwrq$}#
                    #{mod -ANAU$bmvAmthP7L7xwrq@}#))))
             (#{rebuild-macro-output -ANAU$bmvAmthP7L7xwrrA}#
               (#{p -ANAU$bmvAmthP7L7xwrq5}#
                 (let ((#{w -ANAU$bmvAmthP7L7xwrrI}#
                         (cons (cons #f (car #{w -ANAU$bmvAmthP7L7xwrq8}#))
                               (cons 'shift
                                     (cdr #{w -ANAU$bmvAmthP7L7xwrq8}#)))))
                   (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                     (begin
                       (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrq6}#)
                             #{s -ANAU$bmvAmthP7L7xwrq9}#
                             #f)
                         (set-source-properties!
                           #{e -ANAU$bmvAmthP7L7xwrq6}#
                           #{s -ANAU$bmvAmthP7L7xwrq9}#))
                       #{e -ANAU$bmvAmthP7L7xwrq6}#)
                     #{w -ANAU$bmvAmthP7L7xwrrI}#
                     #{mod -ANAU$bmvAmthP7L7xwrq@}#)))
               (gensym "m"))))))
     (#{expand-body -ANAU$bmvAmthP7L7xwnOI}#
       (lambda (#{body -ANAU$bmvAmthP7L7xwrt5}#
                #{outer-form -ANAU$bmvAmthP7L7xwrt6}#
                #{r -ANAU$bmvAmthP7L7xwrt7}#
                #{w -ANAU$bmvAmthP7L7xwrt8}#
                #{mod -ANAU$bmvAmthP7L7xwrt9}#)
         (let ((#{r -ANAU$bmvAmthP7L7xwrt$}#
                 (cons '("placeholder" placeholder)
                       #{r -ANAU$bmvAmthP7L7xwrt7}#)))
           (let ((#{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                   (vector 'ribcage '() '() '())))
             (let ((#{w -ANAU$bmvAmthP7L7xwruA}#
                     (cons (car #{w -ANAU$bmvAmthP7L7xwrt8}#)
                           (cons #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                 (cdr #{w -ANAU$bmvAmthP7L7xwrt8}#)))))
               (letrec*
                 ((#{parse -ANAU$bmvAmthP7L7xwruB}#
                    (lambda (#{body -ANAU$bmvAmthP7L7xwruO}#
                             #{ids -ANAU$bmvAmthP7L7xwruP}#
                             #{labels -ANAU$bmvAmthP7L7xwruQ}#
                             #{var-ids -ANAU$bmvAmthP7L7xwruR}#
                             #{vars -ANAU$bmvAmthP7L7xwruS}#
                             #{vals -ANAU$bmvAmthP7L7xwruT}#
                             #{bindings -ANAU$bmvAmthP7L7xwruU}#)
                      (if (null? #{body -ANAU$bmvAmthP7L7xwruO}#)
                        (syntax-violation
                          #f
                          "no expressions in body"
                          #{outer-form -ANAU$bmvAmthP7L7xwrt6}#)
                        (let ((#{e -ANAU$bmvAmthP7L7xwruV}#
                                (cdr (car #{body -ANAU$bmvAmthP7L7xwruO}#)))
                              (#{er -ANAU$bmvAmthP7L7xwruW}#
                                (car (car #{body -ANAU$bmvAmthP7L7xwruO}#))))
                          (call-with-values
                            (lambda ()
                              (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                                #{e -ANAU$bmvAmthP7L7xwruV}#
                                #{er -ANAU$bmvAmthP7L7xwruW}#
                                '(())
                                (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                                  #{er -ANAU$bmvAmthP7L7xwruW}#)
                                #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                #{mod -ANAU$bmvAmthP7L7xwrt9}#
                                #f))
                            (lambda (#{type -ANAU$bmvAmthP7L7xwrwz}#
                                     #{value -ANAU$bmvAmthP7L7xwrw0}#
                                     #{e -ANAU$bmvAmthP7L7xwrw1}#
                                     #{w -ANAU$bmvAmthP7L7xwrw2}#
                                     #{s -ANAU$bmvAmthP7L7xwrw3}#
                                     #{mod -ANAU$bmvAmthP7L7xwrw4}#)
                              (if (eqv? #{type -ANAU$bmvAmthP7L7xwrwz}#
                                        'define-form)
                                (let ((#{id -ANAU$bmvAmthP7L7xwrw8}#
                                        (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                          #{value -ANAU$bmvAmthP7L7xwrw0}#
                                          #{w -ANAU$bmvAmthP7L7xwrw2}#
                                          #{mod -ANAU$bmvAmthP7L7xwrw4}#))
                                      (#{label -ANAU$bmvAmthP7L7xwrw9}#
                                        (#{gen-label -ANAU$bmvAmthP7L7xwnNi}#)))
                                  (let ((#{var -ANAU$bmvAmthP7L7xwrw$}#
                                          (let ((#{id -ANAU$bmvAmthP7L7xwrx4}#
                                                  (if (if (vector?
                                                            #{id -ANAU$bmvAmthP7L7xwrw8}#)
                                                        (if (= (vector-length
                                                                 #{id -ANAU$bmvAmthP7L7xwrw8}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{id -ANAU$bmvAmthP7L7xwrw8}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref
                                                      #{id -ANAU$bmvAmthP7L7xwrw8}#
                                                      1)
                                                    #{id -ANAU$bmvAmthP7L7xwrw8}#)))
                                            (gensym
                                              (string-append
                                                (symbol->string
                                                  #{id -ANAU$bmvAmthP7L7xwrx4}#)
                                                " ")))))
                                    (begin
                                      (let ((#{update -ANAU$bmvAmthP7L7xwrxu}#
                                              (cons (vector-ref
                                                      #{id -ANAU$bmvAmthP7L7xwrw8}#
                                                      1)
                                                    (vector-ref
                                                      #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                          1
                                          #{update -ANAU$bmvAmthP7L7xwrxu}#))
                                      (let ((#{update -ANAU$bmvAmthP7L7xwrxw}#
                                              (cons (car (vector-ref
                                                           #{id -ANAU$bmvAmthP7L7xwrw8}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                          2
                                          #{update -ANAU$bmvAmthP7L7xwrxw}#))
                                      (let ((#{update -ANAU$bmvAmthP7L7xwrxy}#
                                              (cons #{label -ANAU$bmvAmthP7L7xwrw9}#
                                                    (vector-ref
                                                      #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                          3
                                          #{update -ANAU$bmvAmthP7L7xwrxy}#))
                                      (#{parse -ANAU$bmvAmthP7L7xwruB}#
                                        (cdr #{body -ANAU$bmvAmthP7L7xwruO}#)
                                        (cons #{id -ANAU$bmvAmthP7L7xwrw8}#
                                              #{ids -ANAU$bmvAmthP7L7xwruP}#)
                                        (cons #{label -ANAU$bmvAmthP7L7xwrw9}#
                                              #{labels -ANAU$bmvAmthP7L7xwruQ}#)
                                        (cons #{id -ANAU$bmvAmthP7L7xwrw8}#
                                              #{var-ids -ANAU$bmvAmthP7L7xwruR}#)
                                        (cons #{var -ANAU$bmvAmthP7L7xwrw$}#
                                              #{vars -ANAU$bmvAmthP7L7xwruS}#)
                                        (cons (cons #{er -ANAU$bmvAmthP7L7xwruW}#
                                                    (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                      #{e -ANAU$bmvAmthP7L7xwrw1}#
                                                      #{w -ANAU$bmvAmthP7L7xwrw2}#
                                                      #{mod -ANAU$bmvAmthP7L7xwrw4}#))
                                              #{vals -ANAU$bmvAmthP7L7xwruT}#)
                                        (cons (cons 'lexical
                                                    #{var -ANAU$bmvAmthP7L7xwrw$}#)
                                              #{bindings -ANAU$bmvAmthP7L7xwruU}#)))))
                                (if (if (eqv? #{type -ANAU$bmvAmthP7L7xwrwz}#
                                              'define-syntax-form)
                                      #t
                                      (eqv? #{type -ANAU$bmvAmthP7L7xwrwz}#
                                            'define-syntax-parameter-form))
                                  (let ((#{id -ANAU$bmvAmthP7L7xwryZ}#
                                          (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                            #{value -ANAU$bmvAmthP7L7xwrw0}#
                                            #{w -ANAU$bmvAmthP7L7xwrw2}#
                                            #{mod -ANAU$bmvAmthP7L7xwrw4}#))
                                        (#{label -ANAU$bmvAmthP7L7xwrya}#
                                          (#{gen-label -ANAU$bmvAmthP7L7xwnNi}#)))
                                    (begin
                                      (let ((#{update -ANAU$bmvAmthP7L7xwrzK}#
                                              (cons (vector-ref
                                                      #{id -ANAU$bmvAmthP7L7xwryZ}#
                                                      1)
                                                    (vector-ref
                                                      #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                          1
                                          #{update -ANAU$bmvAmthP7L7xwrzK}#))
                                      (let ((#{update -ANAU$bmvAmthP7L7xwrzM}#
                                              (cons (car (vector-ref
                                                           #{id -ANAU$bmvAmthP7L7xwryZ}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                          2
                                          #{update -ANAU$bmvAmthP7L7xwrzM}#))
                                      (let ((#{update -ANAU$bmvAmthP7L7xwrzO}#
                                              (cons #{label -ANAU$bmvAmthP7L7xwrya}#
                                                    (vector-ref
                                                      #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage -ANAU$bmvAmthP7L7xwrt@}#
                                          3
                                          #{update -ANAU$bmvAmthP7L7xwrzO}#))
                                      (#{parse -ANAU$bmvAmthP7L7xwruB}#
                                        (cdr #{body -ANAU$bmvAmthP7L7xwruO}#)
                                        (cons #{id -ANAU$bmvAmthP7L7xwryZ}#
                                              #{ids -ANAU$bmvAmthP7L7xwruP}#)
                                        (cons #{label -ANAU$bmvAmthP7L7xwrya}#
                                              #{labels -ANAU$bmvAmthP7L7xwruQ}#)
                                        #{var-ids -ANAU$bmvAmthP7L7xwruR}#
                                        #{vars -ANAU$bmvAmthP7L7xwruS}#
                                        #{vals -ANAU$bmvAmthP7L7xwruT}#
                                        (cons (cons 'macro
                                                    (cons #{er -ANAU$bmvAmthP7L7xwruW}#
                                                          (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                            #{e -ANAU$bmvAmthP7L7xwrw1}#
                                                            #{w -ANAU$bmvAmthP7L7xwrw2}#
                                                            #{mod -ANAU$bmvAmthP7L7xwrw4}#)))
                                              #{bindings -ANAU$bmvAmthP7L7xwruU}#))))
                                  (if (eqv? #{type -ANAU$bmvAmthP7L7xwrwz}#
                                            'begin-form)
                                    (let ((#{tmp -ANAU$bmvAmthP7L7xwrzW}#
                                            ($sc-dispatch
                                              #{e -ANAU$bmvAmthP7L7xwrw1}#
                                              '(_ . each-any))))
                                      (if #{tmp -ANAU$bmvAmthP7L7xwrzW}#
                                        (@apply
                                          (lambda (#{e1 -ANAU$bmvAmthP7L7xwrza}#)
                                            (#{parse -ANAU$bmvAmthP7L7xwruB}#
                                              (letrec*
                                                ((#{f -ANAU$bmvAmthP7L7xwrzb}#
                                                   (lambda (#{forms -ANAU$bmvAmthP7L7xwr0a}#)
                                                     (if (null? #{forms -ANAU$bmvAmthP7L7xwr0a}#)
                                                       (cdr #{body -ANAU$bmvAmthP7L7xwruO}#)
                                                       (cons (cons #{er -ANAU$bmvAmthP7L7xwruW}#
                                                                   (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                                     (car #{forms -ANAU$bmvAmthP7L7xwr0a}#)
                                                                     #{w -ANAU$bmvAmthP7L7xwrw2}#
                                                                     #{mod -ANAU$bmvAmthP7L7xwrw4}#))
                                                             (#{f -ANAU$bmvAmthP7L7xwrzb}#
                                                               (cdr #{forms -ANAU$bmvAmthP7L7xwr0a}#)))))))
                                                (#{f -ANAU$bmvAmthP7L7xwrzb}#
                                                  #{e1 -ANAU$bmvAmthP7L7xwrza}#))
                                              #{ids -ANAU$bmvAmthP7L7xwruP}#
                                              #{labels -ANAU$bmvAmthP7L7xwruQ}#
                                              #{var-ids -ANAU$bmvAmthP7L7xwruR}#
                                              #{vars -ANAU$bmvAmthP7L7xwruS}#
                                              #{vals -ANAU$bmvAmthP7L7xwruT}#
                                              #{bindings -ANAU$bmvAmthP7L7xwruU}#))
                                          #{tmp -ANAU$bmvAmthP7L7xwrzW}#)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          #{e -ANAU$bmvAmthP7L7xwrw1}#)))
                                    (if (eqv? #{type -ANAU$bmvAmthP7L7xwrwz}#
                                              'local-syntax-form)
                                      (#{expand-local-syntax -ANAU$bmvAmthP7L7xwnOJ}#
                                        #{value -ANAU$bmvAmthP7L7xwrw0}#
                                        #{e -ANAU$bmvAmthP7L7xwrw1}#
                                        #{er -ANAU$bmvAmthP7L7xwruW}#
                                        #{w -ANAU$bmvAmthP7L7xwrw2}#
                                        #{s -ANAU$bmvAmthP7L7xwrw3}#
                                        #{mod -ANAU$bmvAmthP7L7xwrw4}#
                                        (lambda (#{forms -ANAU$bmvAmthP7L7xwr0o}#
                                                 #{er -ANAU$bmvAmthP7L7xwr0p}#
                                                 #{w -ANAU$bmvAmthP7L7xwr0q}#
                                                 #{s -ANAU$bmvAmthP7L7xwr0r}#
                                                 #{mod -ANAU$bmvAmthP7L7xwr0s}#)
                                          (#{parse -ANAU$bmvAmthP7L7xwruB}#
                                            (letrec*
                                              ((#{f -ANAU$bmvAmthP7L7xwr0t}#
                                                 (lambda (#{forms -ANAU$bmvAmthP7L7xwr1s}#)
                                                   (if (null? #{forms -ANAU$bmvAmthP7L7xwr1s}#)
                                                     (cdr #{body -ANAU$bmvAmthP7L7xwruO}#)
                                                     (cons (cons #{er -ANAU$bmvAmthP7L7xwr0p}#
                                                                 (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                                   (car #{forms -ANAU$bmvAmthP7L7xwr1s}#)
                                                                   #{w -ANAU$bmvAmthP7L7xwr0q}#
                                                                   #{mod -ANAU$bmvAmthP7L7xwr0s}#))
                                                           (#{f -ANAU$bmvAmthP7L7xwr0t}#
                                                             (cdr #{forms -ANAU$bmvAmthP7L7xwr1s}#)))))))
                                              (#{f -ANAU$bmvAmthP7L7xwr0t}#
                                                #{forms -ANAU$bmvAmthP7L7xwr0o}#))
                                            #{ids -ANAU$bmvAmthP7L7xwruP}#
                                            #{labels -ANAU$bmvAmthP7L7xwruQ}#
                                            #{var-ids -ANAU$bmvAmthP7L7xwruR}#
                                            #{vars -ANAU$bmvAmthP7L7xwruS}#
                                            #{vals -ANAU$bmvAmthP7L7xwruT}#
                                            #{bindings -ANAU$bmvAmthP7L7xwruU}#)))
                                      (if (null? #{ids -ANAU$bmvAmthP7L7xwruP}#)
                                        (#{build-sequence -ANAU$bmvAmthP7L7xwnNN}#
                                          #f
                                          (map (lambda (#{x -ANAU$bmvAmthP7L7xwr2t}#)
                                                 (let ((#{e -ANAU$bmvAmthP7L7xwr2x}#
                                                         (cdr #{x -ANAU$bmvAmthP7L7xwr2t}#))
                                                       (#{r -ANAU$bmvAmthP7L7xwr2y}#
                                                         (car #{x -ANAU$bmvAmthP7L7xwr2t}#)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                                                         #{e -ANAU$bmvAmthP7L7xwr2x}#
                                                         #{r -ANAU$bmvAmthP7L7xwr2y}#
                                                         '(())
                                                         (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                                                           #{e -ANAU$bmvAmthP7L7xwr2x}#)
                                                         #f
                                                         #{mod -ANAU$bmvAmthP7L7xwrw4}#
                                                         #f))
                                                     (lambda (#{type -ANAU$bmvAmthP7L7xwr22}#
                                                              #{value -ANAU$bmvAmthP7L7xwr23}#
                                                              #{e -ANAU$bmvAmthP7L7xwr24}#
                                                              #{w -ANAU$bmvAmthP7L7xwr25}#
                                                              #{s -ANAU$bmvAmthP7L7xwr26}#
                                                              #{mod -ANAU$bmvAmthP7L7xwr27}#)
                                                       (#{expand-expr -ANAU$bmvAmthP7L7xwnOF}#
                                                         #{type -ANAU$bmvAmthP7L7xwr22}#
                                                         #{value -ANAU$bmvAmthP7L7xwr23}#
                                                         #{e -ANAU$bmvAmthP7L7xwr24}#
                                                         #{r -ANAU$bmvAmthP7L7xwr2y}#
                                                         #{w -ANAU$bmvAmthP7L7xwr25}#
                                                         #{s -ANAU$bmvAmthP7L7xwr26}#
                                                         #{mod -ANAU$bmvAmthP7L7xwr27}#)))))
                                               (cons (cons #{er -ANAU$bmvAmthP7L7xwruW}#
                                                           (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                             (begin
                                                               (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrw1}#)
                                                                     #{s -ANAU$bmvAmthP7L7xwrw3}#
                                                                     #f)
                                                                 (set-source-properties!
                                                                   #{e -ANAU$bmvAmthP7L7xwrw1}#
                                                                   #{s -ANAU$bmvAmthP7L7xwrw3}#))
                                                               #{e -ANAU$bmvAmthP7L7xwrw1}#)
                                                             #{w -ANAU$bmvAmthP7L7xwrw2}#
                                                             #{mod -ANAU$bmvAmthP7L7xwrw4}#))
                                                     (cdr #{body -ANAU$bmvAmthP7L7xwruO}#))))
                                        (begin
                                          (if (not (#{valid-bound-ids? -ANAU$bmvAmthP7L7xwnN6}#
                                                     #{ids -ANAU$bmvAmthP7L7xwruP}#))
                                            (syntax-violation
                                              #f
                                              "invalid or duplicate identifier in definition"
                                              #{outer-form -ANAU$bmvAmthP7L7xwrt6}#))
                                          (letrec*
                                            ((#{loop -ANAU$bmvAmthP7L7xwr4g}#
                                               (lambda (#{bs -ANAU$bmvAmthP7L7xwr4j}#
                                                        #{er-cache -ANAU$bmvAmthP7L7xwr4k}#
                                                        #{r-cache -ANAU$bmvAmthP7L7xwr4l}#)
                                                 (if (not (null? #{bs -ANAU$bmvAmthP7L7xwr4j}#))
                                                   (let ((#{b -ANAU$bmvAmthP7L7xwr4m}#
                                                           (car #{bs -ANAU$bmvAmthP7L7xwr4j}#)))
                                                     (if (eq? (car #{b -ANAU$bmvAmthP7L7xwr4m}#)
                                                              'macro)
                                                       (let ((#{er -ANAU$bmvAmthP7L7xwr4o}#
                                                               (car (cdr #{b -ANAU$bmvAmthP7L7xwr4m}#))))
                                                         (let ((#{r-cache -ANAU$bmvAmthP7L7xwr4p}#
                                                                 (if (eq? #{er -ANAU$bmvAmthP7L7xwr4o}#
                                                                          #{er-cache -ANAU$bmvAmthP7L7xwr4k}#)
                                                                   #{r-cache -ANAU$bmvAmthP7L7xwr4l}#
                                                                   (#{macros-only-env -ANAU$bmvAmthP7L7xwnNc}#
                                                                     #{er -ANAU$bmvAmthP7L7xwr4o}#))))
                                                           (begin
                                                             (set-cdr!
                                                               #{b -ANAU$bmvAmthP7L7xwr4m}#
                                                               (#{eval-local-transformer -ANAU$bmvAmthP7L7xwnOK}#
                                                                 (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                                                   (cdr (cdr #{b -ANAU$bmvAmthP7L7xwr4m}#))
                                                                   #{r-cache -ANAU$bmvAmthP7L7xwr4p}#
                                                                   '(())
                                                                   #{mod -ANAU$bmvAmthP7L7xwrw4}#)
                                                                 #{mod -ANAU$bmvAmthP7L7xwrw4}#))
                                                             (#{loop -ANAU$bmvAmthP7L7xwr4g}#
                                                               (cdr #{bs -ANAU$bmvAmthP7L7xwr4j}#)
                                                               #{er -ANAU$bmvAmthP7L7xwr4o}#
                                                               #{r-cache -ANAU$bmvAmthP7L7xwr4p}#))))
                                                       (#{loop -ANAU$bmvAmthP7L7xwr4g}#
                                                         (cdr #{bs -ANAU$bmvAmthP7L7xwr4j}#)
                                                         #{er-cache -ANAU$bmvAmthP7L7xwr4k}#
                                                         #{r-cache -ANAU$bmvAmthP7L7xwr4l}#)))))))
                                            (#{loop -ANAU$bmvAmthP7L7xwr4g}#
                                              #{bindings -ANAU$bmvAmthP7L7xwruU}#
                                              #f
                                              #f))
                                          (set-cdr!
                                            #{r -ANAU$bmvAmthP7L7xwrt$}#
                                            (#{extend-env -ANAU$bmvAmthP7L7xwnNa}#
                                              #{labels -ANAU$bmvAmthP7L7xwruQ}#
                                              #{bindings -ANAU$bmvAmthP7L7xwruU}#
                                              (cdr #{r -ANAU$bmvAmthP7L7xwrt$}#)))
                                          (#{build-letrec -ANAU$bmvAmthP7L7xwnNQ}#
                                            #f
                                            #t
                                            (reverse
                                              (map syntax->datum
                                                   #{var-ids -ANAU$bmvAmthP7L7xwruR}#))
                                            (reverse
                                              #{vars -ANAU$bmvAmthP7L7xwruS}#)
                                            (map (lambda (#{x -ANAU$bmvAmthP7L7xwr$A}#)
                                                   (let ((#{e -ANAU$bmvAmthP7L7xwr$E}#
                                                           (cdr #{x -ANAU$bmvAmthP7L7xwr$A}#))
                                                         (#{r -ANAU$bmvAmthP7L7xwr$F}#
                                                           (car #{x -ANAU$bmvAmthP7L7xwr$A}#)))
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                                                           #{e -ANAU$bmvAmthP7L7xwr$E}#
                                                           #{r -ANAU$bmvAmthP7L7xwr$F}#
                                                           '(())
                                                           (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                                                             #{e -ANAU$bmvAmthP7L7xwr$E}#)
                                                           #f
                                                           #{mod -ANAU$bmvAmthP7L7xwrw4}#
                                                           #f))
                                                       (lambda (#{type -ANAU$bmvAmthP7L7xwr$J}#
                                                                #{value -ANAU$bmvAmthP7L7xwr$K}#
                                                                #{e -ANAU$bmvAmthP7L7xwr$L}#
                                                                #{w -ANAU$bmvAmthP7L7xwr$M}#
                                                                #{s -ANAU$bmvAmthP7L7xwr$N}#
                                                                #{mod -ANAU$bmvAmthP7L7xwr$O}#)
                                                         (#{expand-expr -ANAU$bmvAmthP7L7xwnOF}#
                                                           #{type -ANAU$bmvAmthP7L7xwr$J}#
                                                           #{value -ANAU$bmvAmthP7L7xwr$K}#
                                                           #{e -ANAU$bmvAmthP7L7xwr$L}#
                                                           #{r -ANAU$bmvAmthP7L7xwr$F}#
                                                           #{w -ANAU$bmvAmthP7L7xwr$M}#
                                                           #{s -ANAU$bmvAmthP7L7xwr$N}#
                                                           #{mod -ANAU$bmvAmthP7L7xwr$O}#)))))
                                                 (reverse
                                                   #{vals -ANAU$bmvAmthP7L7xwruT}#))
                                            (let ((#{exps -ANAU$bmvAmthP7L7xwr$U}#
                                                    (map (lambda (#{x -ANAU$bmvAmthP7L7xwr$V}#)
                                                           (let ((#{e -ANAU$bmvAmthP7L7xwr$Y}#
                                                                   (cdr #{x -ANAU$bmvAmthP7L7xwr$V}#))
                                                                 (#{r -ANAU$bmvAmthP7L7xwr$Z}#
                                                                   (car #{x -ANAU$bmvAmthP7L7xwr$V}#)))
                                                             (call-with-values
                                                               (lambda ()
                                                                 (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                                                                   #{e -ANAU$bmvAmthP7L7xwr$Y}#
                                                                   #{r -ANAU$bmvAmthP7L7xwr$Z}#
                                                                   '(())
                                                                   (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                                                                     #{e -ANAU$bmvAmthP7L7xwr$Y}#)
                                                                   #f
                                                                   #{mod -ANAU$bmvAmthP7L7xwrw4}#
                                                                   #f))
                                                               (lambda (#{type -ANAU$bmvAmthP7L7xwr$d}#
                                                                        #{value -ANAU$bmvAmthP7L7xwr$e}#
                                                                        #{e -ANAU$bmvAmthP7L7xwr$f}#
                                                                        #{w -ANAU$bmvAmthP7L7xwr$g}#
                                                                        #{s -ANAU$bmvAmthP7L7xwr$h}#
                                                                        #{mod -ANAU$bmvAmthP7L7xwr$i}#)
                                                                 (#{expand-expr -ANAU$bmvAmthP7L7xwnOF}#
                                                                   #{type -ANAU$bmvAmthP7L7xwr$d}#
                                                                   #{value -ANAU$bmvAmthP7L7xwr$e}#
                                                                   #{e -ANAU$bmvAmthP7L7xwr$f}#
                                                                   #{r -ANAU$bmvAmthP7L7xwr$Z}#
                                                                   #{w -ANAU$bmvAmthP7L7xwr$g}#
                                                                   #{s -ANAU$bmvAmthP7L7xwr$h}#
                                                                   #{mod -ANAU$bmvAmthP7L7xwr$i}#)))))
                                                         (cons (cons #{er -ANAU$bmvAmthP7L7xwruW}#
                                                                     (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                                                       (begin
                                                                         (if (if (pair? #{e -ANAU$bmvAmthP7L7xwrw1}#)
                                                                               #{s -ANAU$bmvAmthP7L7xwrw3}#
                                                                               #f)
                                                                           (set-source-properties!
                                                                             #{e -ANAU$bmvAmthP7L7xwrw1}#
                                                                             #{s -ANAU$bmvAmthP7L7xwrw3}#))
                                                                         #{e -ANAU$bmvAmthP7L7xwrw1}#)
                                                                       #{w -ANAU$bmvAmthP7L7xwrw2}#
                                                                       #{mod -ANAU$bmvAmthP7L7xwrw4}#))
                                                               (cdr #{body -ANAU$bmvAmthP7L7xwruO}#)))))
                                              (if (null? (cdr #{exps -ANAU$bmvAmthP7L7xwr$U}#))
                                                (car #{exps -ANAU$bmvAmthP7L7xwr$U}#)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    12)
                                                  #f
                                                  #{exps -ANAU$bmvAmthP7L7xwr$U}#)))))))))))))))))
                 (#{parse -ANAU$bmvAmthP7L7xwruB}#
                   (map (lambda (#{x -ANAU$bmvAmthP7L7xwruE}#)
                          (cons #{r -ANAU$bmvAmthP7L7xwrt$}#
                                (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                  #{x -ANAU$bmvAmthP7L7xwruE}#
                                  #{w -ANAU$bmvAmthP7L7xwruA}#
                                  #{mod -ANAU$bmvAmthP7L7xwrt9}#)))
                        #{body -ANAU$bmvAmthP7L7xwrt5}#)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (#{expand-local-syntax -ANAU$bmvAmthP7L7xwnOJ}#
       (lambda (#{rec? -ANAU$bmvAmthP7L7xwr$8}#
                #{e -ANAU$bmvAmthP7L7xwr$9}#
                #{r -ANAU$bmvAmthP7L7xwr$$}#
                #{w -ANAU$bmvAmthP7L7xwr$@}#
                #{s -ANAU$bmvAmthP7L7xwr@A}#
                #{mod -ANAU$bmvAmthP7L7xwr@B}#
                #{k -ANAU$bmvAmthP7L7xwr@C}#)
         (let ((#{tmp -ANAU$bmvAmthP7L7xwr@E}#
                 ($sc-dispatch
                   #{e -ANAU$bmvAmthP7L7xwr$9}#
                   '(_ #(each (any any)) any . each-any))))
           (if #{tmp -ANAU$bmvAmthP7L7xwr@E}#
             (@apply
               (lambda (#{id -ANAU$bmvAmthP7L7xwr@I}#
                        #{val -ANAU$bmvAmthP7L7xwr@J}#
                        #{e1 -ANAU$bmvAmthP7L7xwr@K}#
                        #{e2 -ANAU$bmvAmthP7L7xwr@L}#)
                 (if (not (#{valid-bound-ids? -ANAU$bmvAmthP7L7xwnN6}#
                            #{id -ANAU$bmvAmthP7L7xwr@I}#))
                   (syntax-violation
                     #f
                     "duplicate bound keyword"
                     #{e -ANAU$bmvAmthP7L7xwr$9}#)
                   (let ((#{labels -ANAU$bmvAmthP7L7xwsAl}#
                           (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                             #{id -ANAU$bmvAmthP7L7xwr@I}#)))
                     (let ((#{new-w -ANAU$bmvAmthP7L7xwsAm}#
                             (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                               #{id -ANAU$bmvAmthP7L7xwr@I}#
                               #{labels -ANAU$bmvAmthP7L7xwsAl}#
                               #{w -ANAU$bmvAmthP7L7xwr$@}#)))
                       (#{k -ANAU$bmvAmthP7L7xwr@C}#
                         (cons #{e1 -ANAU$bmvAmthP7L7xwr@K}#
                               #{e2 -ANAU$bmvAmthP7L7xwr@L}#)
                         (#{extend-env -ANAU$bmvAmthP7L7xwnNa}#
                           #{labels -ANAU$bmvAmthP7L7xwsAl}#
                           (let ((#{trans-r -ANAU$bmvAmthP7L7xwsBG}#
                                   (#{macros-only-env -ANAU$bmvAmthP7L7xwnNc}#
                                     #{r -ANAU$bmvAmthP7L7xwr$$}#)))
                             (begin
                               (if #{rec? -ANAU$bmvAmthP7L7xwr$8}#
                                 #{new-w -ANAU$bmvAmthP7L7xwsAm}#
                                 #{w -ANAU$bmvAmthP7L7xwr$@}#)
                               (map (lambda (#{x -ANAU$bmvAmthP7L7xwsBH}#)
                                      (cons 'macro
                                            (#{eval-local-transformer -ANAU$bmvAmthP7L7xwnOK}#
                                              (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                                #{x -ANAU$bmvAmthP7L7xwsBH}#
                                                #{trans-r -ANAU$bmvAmthP7L7xwsBG}#
                                                (values
                                                  (if #{rec? -ANAU$bmvAmthP7L7xwr$8}#
                                                    #{new-w -ANAU$bmvAmthP7L7xwsAm}#
                                                    #{w -ANAU$bmvAmthP7L7xwr$@}#))
                                                #{mod -ANAU$bmvAmthP7L7xwr@B}#)
                                              #{mod -ANAU$bmvAmthP7L7xwr@B}#)))
                                    #{val -ANAU$bmvAmthP7L7xwr@J}#)))
                           #{r -ANAU$bmvAmthP7L7xwr$$}#)
                         #{new-w -ANAU$bmvAmthP7L7xwsAm}#
                         #{s -ANAU$bmvAmthP7L7xwr@A}#
                         #{mod -ANAU$bmvAmthP7L7xwr@B}#)))))
               #{tmp -ANAU$bmvAmthP7L7xwr@E}#)
             (syntax-violation
               #f
               "bad local syntax definition"
               (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                 (begin
                   (if (if (pair? #{e -ANAU$bmvAmthP7L7xwr$9}#)
                         #{s -ANAU$bmvAmthP7L7xwr@A}#
                         #f)
                     (set-source-properties!
                       #{e -ANAU$bmvAmthP7L7xwr$9}#
                       #{s -ANAU$bmvAmthP7L7xwr@A}#))
                   #{e -ANAU$bmvAmthP7L7xwr$9}#)
                 #{w -ANAU$bmvAmthP7L7xwr$@}#
                 #{mod -ANAU$bmvAmthP7L7xwr@B}#))))))
     (#{eval-local-transformer -ANAU$bmvAmthP7L7xwnOK}#
       (lambda (#{expanded -ANAU$bmvAmthP7L7xwsFb}#
                #{mod -ANAU$bmvAmthP7L7xwsFc}#)
         (let ((#{p -ANAU$bmvAmthP7L7xwsFd}#
                 (primitive-eval
                   #{expanded -ANAU$bmvAmthP7L7xwsFb}#)))
           (if (procedure? #{p -ANAU$bmvAmthP7L7xwsFd}#)
             #{p -ANAU$bmvAmthP7L7xwsFd}#
             (syntax-violation
               #f
               "nonprocedure transformer"
               #{p -ANAU$bmvAmthP7L7xwsFd}#)))))
     (#{ellipsis? -ANAU$bmvAmthP7L7xwnOM}#
       (lambda (#{x -ANAU$bmvAmthP7L7xwnYh}#)
         (if (if (if (vector? #{x -ANAU$bmvAmthP7L7xwnYh}#)
                   (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwnYh}#)
                          4)
                     (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwnYh}# 0)
                          'syntax-object)
                     #f)
                   #f)
               (symbol?
                 (vector-ref #{x -ANAU$bmvAmthP7L7xwnYh}# 1))
               #f)
           (if (eq? (if (if (vector? #{x -ANAU$bmvAmthP7L7xwnYh}#)
                          (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwnYh}#)
                                 4)
                            (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwnYh}# 0)
                                 'syntax-object)
                            #f)
                          #f)
                      (vector-ref #{x -ANAU$bmvAmthP7L7xwnYh}# 1)
                      #{x -ANAU$bmvAmthP7L7xwnYh}#)
                    (if (if (= (vector-length
                                 '#(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("p6"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-application
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         with-transformer-environment
                                         transformer-environment
                                         resolve-identifier
                                         locally-bound-identifiers
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-application
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-sequence
                                         make-application
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("5l"
                                        "5k"
                                        "5j"
                                        "5i"
                                        "5h"
                                        "5g"
                                        "5f"
                                        "5e"
                                        "5d"
                                        "5c"
                                        "5b"
                                        "5a"
                                        "59"
                                        "58"
                                        "57"
                                        "56"
                                        "55"
                                        "54"
                                        "53"
                                        "52"
                                        "51"
                                        "50"
                                        "4z"
                                        "4y"
                                        "4x"
                                        "4w"
                                        "4v"
                                        "4u"
                                        "4t"
                                        "4s"
                                        "4r"
                                        "4q"
                                        "4p"
                                        "4o"
                                        "4n"
                                        "4m"
                                        "4l"
                                        "4k"
                                        "4j"
                                        "4i"
                                        "4h"
                                        "4g"
                                        "4f"
                                        "4e"
                                        "4d"
                                        "4c"
                                        "4b"
                                        "4a"
                                        "49"
                                        "48"
                                        "47"
                                        "46"
                                        "45"
                                        "44"
                                        "43"
                                        "42"
                                        "41"
                                        "40"
                                        "3z"
                                        "3y"
                                        "3x"
                                        "3w"
                                        "3v"
                                        "3u"
                                        "3t"
                                        "3s"
                                        "3r"
                                        "3q"
                                        "3p"
                                        "3o"
                                        "3n"
                                        "3m"
                                        "3l"
                                        "3k"
                                        "3j"
                                        "3i"
                                        "3h"
                                        "3g"
                                        "3f"
                                        "3e"
                                        "3d"
                                        "3c"
                                        "3b"
                                        "3a"
                                        "39"
                                        "38"
                                        "37"
                                        "36"
                                        "35"
                                        "34"
                                        "33"
                                        "32"
                                        "31"
                                        "30"
                                        "2z"
                                        "2y"
                                        "2x"
                                        "2w"
                                        "2v"
                                        "2u"
                                        "2t"
                                        "2s"
                                        "2r"
                                        "2q"
                                        "2p"
                                        "2o"
                                        "2n"
                                        "2m"
                                        "2l"
                                        "2k"
                                        "2j"
                                        "2i"
                                        "2h"
                                        "2g"
                                        "2f"
                                        "2e"
                                        "2d"
                                        "2c"
                                        "2b"
                                        "2a"
                                        "29"
                                        "28"
                                        "27"
                                        "26"
                                        "25"
                                        "24"
                                        "23"
                                        "22"
                                        "21"
                                        "20"
                                        "1z"
                                        "1y"
                                        "1x"
                                        "1w"
                                        "1v"
                                        "1u"
                                        "1t"
                                        "1s"
                                        "1r"
                                        "1q"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("8" "7" "6")))
                                    (hygiene guile)))
                               4)
                          #t
                          #f)
                      '...
                      '#(syntax-object
                         ...
                         ((top)
                          #(ribcage () () ())
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("p6"))
                          #(ribcage
                            (lambda-var-list
                              gen-var
                              strip
                              expand-lambda-case
                              lambda*-formals
                              expand-simple-lambda
                              lambda-formals
                              ellipsis?
                              expand-void
                              eval-local-transformer
                              expand-local-syntax
                              expand-body
                              expand-macro
                              expand-application
                              expand-expr
                              expand
                              syntax-type
                              parse-when-list
                              expand-install-global
                              expand-top-sequence
                              expand-sequence
                              source-wrap
                              wrap
                              bound-id-member?
                              distinct-bound-ids?
                              valid-bound-ids?
                              bound-id=?
                              free-id=?
                              with-transformer-environment
                              transformer-environment
                              resolve-identifier
                              locally-bound-identifiers
                              id-var-name
                              same-marks?
                              join-marks
                              join-wraps
                              smart-append
                              make-binding-wrap
                              extend-ribcage!
                              make-empty-ribcage
                              new-mark
                              anti-mark
                              the-anti-mark
                              top-marked?
                              top-wrap
                              empty-wrap
                              set-ribcage-labels!
                              set-ribcage-marks!
                              set-ribcage-symnames!
                              ribcage-labels
                              ribcage-marks
                              ribcage-symnames
                              ribcage?
                              make-ribcage
                              gen-labels
                              gen-label
                              make-rename
                              rename-marks
                              rename-new
                              rename-old
                              subst-rename?
                              wrap-subst
                              wrap-marks
                              make-wrap
                              id-sym-name&marks
                              id-sym-name
                              id?
                              nonsymbol-id?
                              global-extend
                              lookup
                              macros-only-env
                              extend-var-env
                              extend-env
                              null-env
                              binding-value
                              binding-type
                              make-binding
                              arg-check
                              source-annotation
                              no-source
                              set-syntax-object-module!
                              set-syntax-object-wrap!
                              set-syntax-object-expression!
                              syntax-object-module
                              syntax-object-wrap
                              syntax-object-expression
                              syntax-object?
                              make-syntax-object
                              build-lexical-var
                              build-letrec
                              build-named-let
                              build-let
                              build-sequence
                              build-data
                              build-primref
                              build-lambda-case
                              build-case-lambda
                              build-simple-lambda
                              build-global-definition
                              build-global-assignment
                              build-global-reference
                              analyze-variable
                              build-lexical-assignment
                              build-lexical-reference
                              build-dynlet
                              build-conditional
                              build-application
                              build-void
                              maybe-name-value!
                              decorate-source
                              get-global-definition-hook
                              put-global-definition-hook
                              gensym-hook
                              local-eval-hook
                              top-level-eval-hook
                              fx<
                              fx=
                              fx-
                              fx+
                              set-lambda-meta!
                              lambda-meta
                              lambda?
                              make-dynlet
                              make-letrec
                              make-let
                              make-lambda-case
                              make-lambda
                              make-sequence
                              make-application
                              make-conditional
                              make-toplevel-define
                              make-toplevel-set
                              make-toplevel-ref
                              make-module-set
                              make-module-ref
                              make-lexical-set
                              make-lexical-ref
                              make-primitive-ref
                              make-const
                              make-void)
                            ((top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top))
                            ("5l"
                             "5k"
                             "5j"
                             "5i"
                             "5h"
                             "5g"
                             "5f"
                             "5e"
                             "5d"
                             "5c"
                             "5b"
                             "5a"
                             "59"
                             "58"
                             "57"
                             "56"
                             "55"
                             "54"
                             "53"
                             "52"
                             "51"
                             "50"
                             "4z"
                             "4y"
                             "4x"
                             "4w"
                             "4v"
                             "4u"
                             "4t"
                             "4s"
                             "4r"
                             "4q"
                             "4p"
                             "4o"
                             "4n"
                             "4m"
                             "4l"
                             "4k"
                             "4j"
                             "4i"
                             "4h"
                             "4g"
                             "4f"
                             "4e"
                             "4d"
                             "4c"
                             "4b"
                             "4a"
                             "49"
                             "48"
                             "47"
                             "46"
                             "45"
                             "44"
                             "43"
                             "42"
                             "41"
                             "40"
                             "3z"
                             "3y"
                             "3x"
                             "3w"
                             "3v"
                             "3u"
                             "3t"
                             "3s"
                             "3r"
                             "3q"
                             "3p"
                             "3o"
                             "3n"
                             "3m"
                             "3l"
                             "3k"
                             "3j"
                             "3i"
                             "3h"
                             "3g"
                             "3f"
                             "3e"
                             "3d"
                             "3c"
                             "3b"
                             "3a"
                             "39"
                             "38"
                             "37"
                             "36"
                             "35"
                             "34"
                             "33"
                             "32"
                             "31"
                             "30"
                             "2z"
                             "2y"
                             "2x"
                             "2w"
                             "2v"
                             "2u"
                             "2t"
                             "2s"
                             "2r"
                             "2q"
                             "2p"
                             "2o"
                             "2n"
                             "2m"
                             "2l"
                             "2k"
                             "2j"
                             "2i"
                             "2h"
                             "2g"
                             "2f"
                             "2e"
                             "2d"
                             "2c"
                             "2b"
                             "2a"
                             "29"
                             "28"
                             "27"
                             "26"
                             "25"
                             "24"
                             "23"
                             "22"
                             "21"
                             "20"
                             "1z"
                             "1y"
                             "1x"
                             "1w"
                             "1v"
                             "1u"
                             "1t"
                             "1s"
                             "1r"
                             "1q"))
                          #(ribcage
                            (define-structure
                              define-expansion-accessors
                              define-expansion-constructors)
                            ((top) (top) (top))
                            ("8" "7" "6")))
                         (hygiene guile))))
             (eq? (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                    #{x -ANAU$bmvAmthP7L7xwnYh}#
                    '(()))
                  (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("p6"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            with-transformer-environment
                            transformer-environment
                            resolve-identifier
                            locally-bound-identifiers
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("5l"
                           "5k"
                           "5j"
                           "5i"
                           "5h"
                           "5g"
                           "5f"
                           "5e"
                           "5d"
                           "5c"
                           "5b"
                           "5a"
                           "59"
                           "58"
                           "57"
                           "56"
                           "55"
                           "54"
                           "53"
                           "52"
                           "51"
                           "50"
                           "4z"
                           "4y"
                           "4x"
                           "4w"
                           "4v"
                           "4u"
                           "4t"
                           "4s"
                           "4r"
                           "4q"
                           "4p"
                           "4o"
                           "4n"
                           "4m"
                           "4l"
                           "4k"
                           "4j"
                           "4i"
                           "4h"
                           "4g"
                           "4f"
                           "4e"
                           "4d"
                           "4c"
                           "4b"
                           "4a"
                           "49"
                           "48"
                           "47"
                           "46"
                           "45"
                           "44"
                           "43"
                           "42"
                           "41"
                           "40"
                           "3z"
                           "3y"
                           "3x"
                           "3w"
                           "3v"
                           "3u"
                           "3t"
                           "3s"
                           "3r"
                           "3q"
                           "3p"
                           "3o"
                           "3n"
                           "3m"
                           "3l"
                           "3k"
                           "3j"
                           "3i"
                           "3h"
                           "3g"
                           "3f"
                           "3e"
                           "3d"
                           "3c"
                           "3b"
                           "3a"
                           "39"
                           "38"
                           "37"
                           "36"
                           "35"
                           "34"
                           "33"
                           "32"
                           "31"
                           "30"
                           "2z"
                           "2y"
                           "2x"
                           "2w"
                           "2v"
                           "2u"
                           "2t"
                           "2s"
                           "2r"
                           "2q"
                           "2p"
                           "2o"
                           "2n"
                           "2m"
                           "2l"
                           "2k"
                           "2j"
                           "2i"
                           "2h"
                           "2g"
                           "2f"
                           "2e"
                           "2d"
                           "2c"
                           "2b"
                           "2a"
                           "29"
                           "28"
                           "27"
                           "26"
                           "25"
                           "24"
                           "23"
                           "22"
                           "21"
                           "20"
                           "1z"
                           "1y"
                           "1x"
                           "1w"
                           "1v"
                           "1u"
                           "1t"
                           "1s"
                           "1r"
                           "1q"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("8" "7" "6")))
                       (hygiene guile))
                    '(())))
             #f)
           #f)))
     (#{lambda-formals -ANAU$bmvAmthP7L7xwnON}#
       (lambda (#{orig-args -ANAU$bmvAmthP7L7xwsFi}#)
         (letrec*
           ((#{req -ANAU$bmvAmthP7L7xwsFj}#
              (lambda (#{args -ANAU$bmvAmthP7L7xwsFn}#
                       #{rreq -ANAU$bmvAmthP7L7xwsFo}#)
                (let ((#{tmp -ANAU$bmvAmthP7L7xwsFq}#
                        ($sc-dispatch
                          #{args -ANAU$bmvAmthP7L7xwsFn}#
                          '())))
                  (if #{tmp -ANAU$bmvAmthP7L7xwsFq}#
                    (@apply
                      (lambda ()
                        (#{check -ANAU$bmvAmthP7L7xwsFk}#
                          (reverse #{rreq -ANAU$bmvAmthP7L7xwsFo}#)
                          #f))
                      #{tmp -ANAU$bmvAmthP7L7xwsFq}#)
                    (let ((#{tmp -ANAU$bmvAmthP7L7xwsHl}#
                            ($sc-dispatch
                              #{args -ANAU$bmvAmthP7L7xwsFn}#
                              '(any . any))))
                      (if (if #{tmp -ANAU$bmvAmthP7L7xwsHl}#
                            (@apply
                              (lambda (#{a -ANAU$bmvAmthP7L7xwsHp}#
                                       #{b -ANAU$bmvAmthP7L7xwsHq}#)
                                (if (symbol? #{a -ANAU$bmvAmthP7L7xwsHp}#)
                                  #t
                                  (if (if (vector?
                                            #{a -ANAU$bmvAmthP7L7xwsHp}#)
                                        (if (= (vector-length
                                                 #{a -ANAU$bmvAmthP7L7xwsHp}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a -ANAU$bmvAmthP7L7xwsHp}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a -ANAU$bmvAmthP7L7xwsHp}#
                                        1))
                                    #f)))
                              #{tmp -ANAU$bmvAmthP7L7xwsHl}#)
                            #f)
                        (@apply
                          (lambda (#{a -ANAU$bmvAmthP7L7xwsIF}#
                                   #{b -ANAU$bmvAmthP7L7xwsIG}#)
                            (#{req -ANAU$bmvAmthP7L7xwsFj}#
                              #{b -ANAU$bmvAmthP7L7xwsIG}#
                              (cons #{a -ANAU$bmvAmthP7L7xwsIF}#
                                    #{rreq -ANAU$bmvAmthP7L7xwsFo}#)))
                          #{tmp -ANAU$bmvAmthP7L7xwsHl}#)
                        (let ((#{tmp -ANAU$bmvAmthP7L7xwsIH}#
                                (list #{args -ANAU$bmvAmthP7L7xwsFn}#)))
                          (if (@apply
                                (lambda (#{r -ANAU$bmvAmthP7L7xwsIJ}#)
                                  (if (symbol? #{r -ANAU$bmvAmthP7L7xwsIJ}#)
                                    #t
                                    (if (if (vector?
                                              #{r -ANAU$bmvAmthP7L7xwsIJ}#)
                                          (if (= (vector-length
                                                   #{r -ANAU$bmvAmthP7L7xwsIJ}#)
                                                 4)
                                            (eq? (vector-ref
                                                   #{r -ANAU$bmvAmthP7L7xwsIJ}#
                                                   0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol?
                                        (vector-ref
                                          #{r -ANAU$bmvAmthP7L7xwsIJ}#
                                          1))
                                      #f)))
                                #{tmp -ANAU$bmvAmthP7L7xwsIH}#)
                            (@apply
                              (lambda (#{r -ANAU$bmvAmthP7L7xwsIn}#)
                                (#{check -ANAU$bmvAmthP7L7xwsFk}#
                                  (reverse #{rreq -ANAU$bmvAmthP7L7xwsFo}#)
                                  #{r -ANAU$bmvAmthP7L7xwsIn}#))
                              #{tmp -ANAU$bmvAmthP7L7xwsIH}#)
                            (syntax-violation
                              'lambda
                              "invalid argument list"
                              #{orig-args -ANAU$bmvAmthP7L7xwsFi}#
                              #{args -ANAU$bmvAmthP7L7xwsFn}#)))))))))
            (#{check -ANAU$bmvAmthP7L7xwsFk}#
              (lambda (#{req -ANAU$bmvAmthP7L7xwsKq}#
                       #{rest -ANAU$bmvAmthP7L7xwsKr}#)
                (if (#{distinct-bound-ids? -ANAU$bmvAmthP7L7xwnN7}#
                      (if #{rest -ANAU$bmvAmthP7L7xwsKr}#
                        (cons #{rest -ANAU$bmvAmthP7L7xwsKr}#
                              #{req -ANAU$bmvAmthP7L7xwsKq}#)
                        #{req -ANAU$bmvAmthP7L7xwsKq}#))
                  (values
                    #{req -ANAU$bmvAmthP7L7xwsKq}#
                    #f
                    #{rest -ANAU$bmvAmthP7L7xwsKr}#
                    #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    #{orig-args -ANAU$bmvAmthP7L7xwsFi}#)))))
           (#{req -ANAU$bmvAmthP7L7xwsFj}#
             #{orig-args -ANAU$bmvAmthP7L7xwsFi}#
             '()))))
     (#{expand-simple-lambda -ANAU$bmvAmthP7L7xwnOO}#
       (lambda (#{e -ANAU$bmvAmthP7L7xwsMf}#
                #{r -ANAU$bmvAmthP7L7xwsMg}#
                #{w -ANAU$bmvAmthP7L7xwsMh}#
                #{s -ANAU$bmvAmthP7L7xwsMi}#
                #{mod -ANAU$bmvAmthP7L7xwsMj}#
                #{req -ANAU$bmvAmthP7L7xwsMk}#
                #{rest -ANAU$bmvAmthP7L7xwsMl}#
                #{meta -ANAU$bmvAmthP7L7xwsMm}#
                #{body -ANAU$bmvAmthP7L7xwsMn}#)
         (let ((#{ids -ANAU$bmvAmthP7L7xwsMo}#
                 (if #{rest -ANAU$bmvAmthP7L7xwsMl}#
                   (append
                     #{req -ANAU$bmvAmthP7L7xwsMk}#
                     (list #{rest -ANAU$bmvAmthP7L7xwsMl}#))
                   #{req -ANAU$bmvAmthP7L7xwsMk}#)))
           (let ((#{vars -ANAU$bmvAmthP7L7xwsMp}#
                   (map #{gen-var -ANAU$bmvAmthP7L7xwnOS}#
                        #{ids -ANAU$bmvAmthP7L7xwsMo}#)))
             (let ((#{labels -ANAU$bmvAmthP7L7xwsMq}#
                     (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                       #{ids -ANAU$bmvAmthP7L7xwsMo}#)))
               (#{build-simple-lambda -ANAU$bmvAmthP7L7xwnNI}#
                 #{s -ANAU$bmvAmthP7L7xwsMi}#
                 (map syntax->datum
                      #{req -ANAU$bmvAmthP7L7xwsMk}#)
                 (if #{rest -ANAU$bmvAmthP7L7xwsMl}#
                   (syntax->datum #{rest -ANAU$bmvAmthP7L7xwsMl}#)
                   #f)
                 #{vars -ANAU$bmvAmthP7L7xwsMp}#
                 #{meta -ANAU$bmvAmthP7L7xwsMm}#
                 (#{expand-body -ANAU$bmvAmthP7L7xwnOI}#
                   #{body -ANAU$bmvAmthP7L7xwsMn}#
                   (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                     (begin
                       (if (if (pair? #{e -ANAU$bmvAmthP7L7xwsMf}#)
                             #{s -ANAU$bmvAmthP7L7xwsMi}#
                             #f)
                         (set-source-properties!
                           #{e -ANAU$bmvAmthP7L7xwsMf}#
                           #{s -ANAU$bmvAmthP7L7xwsMi}#))
                       #{e -ANAU$bmvAmthP7L7xwsMf}#)
                     #{w -ANAU$bmvAmthP7L7xwsMh}#
                     #{mod -ANAU$bmvAmthP7L7xwsMj}#)
                   (#{extend-var-env -ANAU$bmvAmthP7L7xwnNb}#
                     #{labels -ANAU$bmvAmthP7L7xwsMq}#
                     #{vars -ANAU$bmvAmthP7L7xwsMp}#
                     #{r -ANAU$bmvAmthP7L7xwsMg}#)
                   (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                     #{ids -ANAU$bmvAmthP7L7xwsMo}#
                     #{labels -ANAU$bmvAmthP7L7xwsMq}#
                     #{w -ANAU$bmvAmthP7L7xwsMh}#)
                   #{mod -ANAU$bmvAmthP7L7xwsMj}#)))))))
     (#{lambda*-formals -ANAU$bmvAmthP7L7xwnOP}#
       (lambda (#{orig-args -ANAU$bmvAmthP7L7xwsQ6}#)
         (letrec*
           ((#{req -ANAU$bmvAmthP7L7xwsQ7}#
              (lambda (#{args -ANAU$bmvAmthP7L7xwsRC}#
                       #{rreq -ANAU$bmvAmthP7L7xwsRD}#)
                (let ((#{tmp -ANAU$bmvAmthP7L7xwsRF}#
                        ($sc-dispatch
                          #{args -ANAU$bmvAmthP7L7xwsRC}#
                          '())))
                  (if #{tmp -ANAU$bmvAmthP7L7xwsRF}#
                    (@apply
                      (lambda ()
                        (#{check -ANAU$bmvAmthP7L7xwsQ@}#
                          (reverse #{rreq -ANAU$bmvAmthP7L7xwsRD}#)
                          '()
                          #f
                          '()))
                      #{tmp -ANAU$bmvAmthP7L7xwsRF}#)
                    (let ((#{tmp -ANAU$bmvAmthP7L7xwsRL}#
                            ($sc-dispatch
                              #{args -ANAU$bmvAmthP7L7xwsRC}#
                              '(any . any))))
                      (if (if #{tmp -ANAU$bmvAmthP7L7xwsRL}#
                            (@apply
                              (lambda (#{a -ANAU$bmvAmthP7L7xwsRP}#
                                       #{b -ANAU$bmvAmthP7L7xwsRQ}#)
                                (if (symbol? #{a -ANAU$bmvAmthP7L7xwsRP}#)
                                  #t
                                  (if (if (vector?
                                            #{a -ANAU$bmvAmthP7L7xwsRP}#)
                                        (if (= (vector-length
                                                 #{a -ANAU$bmvAmthP7L7xwsRP}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a -ANAU$bmvAmthP7L7xwsRP}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a -ANAU$bmvAmthP7L7xwsRP}#
                                        1))
                                    #f)))
                              #{tmp -ANAU$bmvAmthP7L7xwsRL}#)
                            #f)
                        (@apply
                          (lambda (#{a -ANAU$bmvAmthP7L7xwsRr}#
                                   #{b -ANAU$bmvAmthP7L7xwsRs}#)
                            (#{req -ANAU$bmvAmthP7L7xwsQ7}#
                              #{b -ANAU$bmvAmthP7L7xwsRs}#
                              (cons #{a -ANAU$bmvAmthP7L7xwsRr}#
                                    #{rreq -ANAU$bmvAmthP7L7xwsRD}#)))
                          #{tmp -ANAU$bmvAmthP7L7xwsRL}#)
                        (let ((#{tmp -ANAU$bmvAmthP7L7xwsRt}#
                                ($sc-dispatch
                                  #{args -ANAU$bmvAmthP7L7xwsRC}#
                                  '(any . any))))
                          (if (if #{tmp -ANAU$bmvAmthP7L7xwsRt}#
                                (@apply
                                  (lambda (#{a -ANAU$bmvAmthP7L7xwsRx}#
                                           #{b -ANAU$bmvAmthP7L7xwsRy}#)
                                    (eq? (syntax->datum
                                           #{a -ANAU$bmvAmthP7L7xwsRx}#)
                                         #:optional))
                                  #{tmp -ANAU$bmvAmthP7L7xwsRt}#)
                                #f)
                            (@apply
                              (lambda (#{a -ANAU$bmvAmthP7L7xwsRz}#
                                       #{b -ANAU$bmvAmthP7L7xwsR0}#)
                                (#{opt -ANAU$bmvAmthP7L7xwsQ8}#
                                  #{b -ANAU$bmvAmthP7L7xwsR0}#
                                  (reverse #{rreq -ANAU$bmvAmthP7L7xwsRD}#)
                                  '()))
                              #{tmp -ANAU$bmvAmthP7L7xwsRt}#)
                            (let ((#{tmp -ANAU$bmvAmthP7L7xwsR3}#
                                    ($sc-dispatch
                                      #{args -ANAU$bmvAmthP7L7xwsRC}#
                                      '(any . any))))
                              (if (if #{tmp -ANAU$bmvAmthP7L7xwsR3}#
                                    (@apply
                                      (lambda (#{a -ANAU$bmvAmthP7L7xwsR7}#
                                               #{b -ANAU$bmvAmthP7L7xwsR8}#)
                                        (eq? (syntax->datum
                                               #{a -ANAU$bmvAmthP7L7xwsR7}#)
                                             #:key))
                                      #{tmp -ANAU$bmvAmthP7L7xwsR3}#)
                                    #f)
                                (@apply
                                  (lambda (#{a -ANAU$bmvAmthP7L7xwsR9}#
                                           #{b -ANAU$bmvAmthP7L7xwsR$}#)
                                    (#{key -ANAU$bmvAmthP7L7xwsQ9}#
                                      #{b -ANAU$bmvAmthP7L7xwsR$}#
                                      (reverse #{rreq -ANAU$bmvAmthP7L7xwsRD}#)
                                      '()
                                      '()))
                                  #{tmp -ANAU$bmvAmthP7L7xwsR3}#)
                                (let ((#{tmp -ANAU$bmvAmthP7L7xwsSB}#
                                        ($sc-dispatch
                                          #{args -ANAU$bmvAmthP7L7xwsRC}#
                                          '(any any))))
                                  (if (if #{tmp -ANAU$bmvAmthP7L7xwsSB}#
                                        (@apply
                                          (lambda (#{a -ANAU$bmvAmthP7L7xwsSF}#
                                                   #{b -ANAU$bmvAmthP7L7xwsSG}#)
                                            (eq? (syntax->datum
                                                   #{a -ANAU$bmvAmthP7L7xwsSF}#)
                                                 #:rest))
                                          #{tmp -ANAU$bmvAmthP7L7xwsSB}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a -ANAU$bmvAmthP7L7xwsSH}#
                                               #{b -ANAU$bmvAmthP7L7xwsSI}#)
                                        (#{rest -ANAU$bmvAmthP7L7xwsQ$}#
                                          #{b -ANAU$bmvAmthP7L7xwsSI}#
                                          (reverse
                                            #{rreq -ANAU$bmvAmthP7L7xwsRD}#)
                                          '()
                                          '()))
                                      #{tmp -ANAU$bmvAmthP7L7xwsSB}#)
                                    (let ((#{tmp -ANAU$bmvAmthP7L7xwsSL}#
                                            (list #{args -ANAU$bmvAmthP7L7xwsRC}#)))
                                      (if (@apply
                                            (lambda (#{r -ANAU$bmvAmthP7L7xwsSN}#)
                                              (if (symbol?
                                                    #{r -ANAU$bmvAmthP7L7xwsSN}#)
                                                #t
                                                (if (if (vector?
                                                          #{r -ANAU$bmvAmthP7L7xwsSN}#)
                                                      (if (= (vector-length
                                                               #{r -ANAU$bmvAmthP7L7xwsSN}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{r -ANAU$bmvAmthP7L7xwsSN}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref
                                                      #{r -ANAU$bmvAmthP7L7xwsSN}#
                                                      1))
                                                  #f)))
                                            #{tmp -ANAU$bmvAmthP7L7xwsSL}#)
                                        (@apply
                                          (lambda (#{r -ANAU$bmvAmthP7L7xwsSr}#)
                                            (#{rest -ANAU$bmvAmthP7L7xwsQ$}#
                                              #{r -ANAU$bmvAmthP7L7xwsSr}#
                                              (reverse
                                                #{rreq -ANAU$bmvAmthP7L7xwsRD}#)
                                              '()
                                              '()))
                                          #{tmp -ANAU$bmvAmthP7L7xwsSL}#)
                                        (syntax-violation
                                          'lambda*
                                          "invalid argument list"
                                          #{orig-args -ANAU$bmvAmthP7L7xwsQ6}#
                                          #{args -ANAU$bmvAmthP7L7xwsRC}#)))))))))))))))
            (#{opt -ANAU$bmvAmthP7L7xwsQ8}#
              (lambda (#{args -ANAU$bmvAmthP7L7xwsS$}#
                       #{req -ANAU$bmvAmthP7L7xwsS@}#
                       #{ropt -ANAU$bmvAmthP7L7xwsTA}#)
                (let ((#{tmp -ANAU$bmvAmthP7L7xwsTC}#
                        ($sc-dispatch
                          #{args -ANAU$bmvAmthP7L7xwsS$}#
                          '())))
                  (if #{tmp -ANAU$bmvAmthP7L7xwsTC}#
                    (@apply
                      (lambda ()
                        (#{check -ANAU$bmvAmthP7L7xwsQ@}#
                          #{req -ANAU$bmvAmthP7L7xwsS@}#
                          (reverse #{ropt -ANAU$bmvAmthP7L7xwsTA}#)
                          #f
                          '()))
                      #{tmp -ANAU$bmvAmthP7L7xwsTC}#)
                    (let ((#{tmp -ANAU$bmvAmthP7L7xwsTI}#
                            ($sc-dispatch
                              #{args -ANAU$bmvAmthP7L7xwsS$}#
                              '(any . any))))
                      (if (if #{tmp -ANAU$bmvAmthP7L7xwsTI}#
                            (@apply
                              (lambda (#{a -ANAU$bmvAmthP7L7xwsTM}#
                                       #{b -ANAU$bmvAmthP7L7xwsTN}#)
                                (if (symbol? #{a -ANAU$bmvAmthP7L7xwsTM}#)
                                  #t
                                  (if (if (vector?
                                            #{a -ANAU$bmvAmthP7L7xwsTM}#)
                                        (if (= (vector-length
                                                 #{a -ANAU$bmvAmthP7L7xwsTM}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a -ANAU$bmvAmthP7L7xwsTM}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a -ANAU$bmvAmthP7L7xwsTM}#
                                        1))
                                    #f)))
                              #{tmp -ANAU$bmvAmthP7L7xwsTI}#)
                            #f)
                        (@apply
                          (lambda (#{a -ANAU$bmvAmthP7L7xwsTo}#
                                   #{b -ANAU$bmvAmthP7L7xwsTp}#)
                            (#{opt -ANAU$bmvAmthP7L7xwsQ8}#
                              #{b -ANAU$bmvAmthP7L7xwsTp}#
                              #{req -ANAU$bmvAmthP7L7xwsS@}#
                              (cons (cons #{a -ANAU$bmvAmthP7L7xwsTo}#
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("qt" "qu"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("qo" "qp" "qq"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("q2" "q1" "q0" "pz" "py"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("px"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   locally-bound-identifiers
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("5l"
                                                  "5k"
                                                  "5j"
                                                  "5i"
                                                  "5h"
                                                  "5g"
                                                  "5f"
                                                  "5e"
                                                  "5d"
                                                  "5c"
                                                  "5b"
                                                  "5a"
                                                  "59"
                                                  "58"
                                                  "57"
                                                  "56"
                                                  "55"
                                                  "54"
                                                  "53"
                                                  "52"
                                                  "51"
                                                  "50"
                                                  "4z"
                                                  "4y"
                                                  "4x"
                                                  "4w"
                                                  "4v"
                                                  "4u"
                                                  "4t"
                                                  "4s"
                                                  "4r"
                                                  "4q"
                                                  "4p"
                                                  "4o"
                                                  "4n"
                                                  "4m"
                                                  "4l"
                                                  "4k"
                                                  "4j"
                                                  "4i"
                                                  "4h"
                                                  "4g"
                                                  "4f"
                                                  "4e"
                                                  "4d"
                                                  "4c"
                                                  "4b"
                                                  "4a"
                                                  "49"
                                                  "48"
                                                  "47"
                                                  "46"
                                                  "45"
                                                  "44"
                                                  "43"
                                                  "42"
                                                  "41"
                                                  "40"
                                                  "3z"
                                                  "3y"
                                                  "3x"
                                                  "3w"
                                                  "3v"
                                                  "3u"
                                                  "3t"
                                                  "3s"
                                                  "3r"
                                                  "3q"
                                                  "3p"
                                                  "3o"
                                                  "3n"
                                                  "3m"
                                                  "3l"
                                                  "3k"
                                                  "3j"
                                                  "3i"
                                                  "3h"
                                                  "3g"
                                                  "3f"
                                                  "3e"
                                                  "3d"
                                                  "3c"
                                                  "3b"
                                                  "3a"
                                                  "39"
                                                  "38"
                                                  "37"
                                                  "36"
                                                  "35"
                                                  "34"
                                                  "33"
                                                  "32"
                                                  "31"
                                                  "30"
                                                  "2z"
                                                  "2y"
                                                  "2x"
                                                  "2w"
                                                  "2v"
                                                  "2u"
                                                  "2t"
                                                  "2s"
                                                  "2r"
                                                  "2q"
                                                  "2p"
                                                  "2o"
                                                  "2n"
                                                  "2m"
                                                  "2l"
                                                  "2k"
                                                  "2j"
                                                  "2i"
                                                  "2h"
                                                  "2g"
                                                  "2f"
                                                  "2e"
                                                  "2d"
                                                  "2c"
                                                  "2b"
                                                  "2a"
                                                  "29"
                                                  "28"
                                                  "27"
                                                  "26"
                                                  "25"
                                                  "24"
                                                  "23"
                                                  "22"
                                                  "21"
                                                  "20"
                                                  "1z"
                                                  "1y"
                                                  "1x"
                                                  "1w"
                                                  "1v"
                                                  "1u"
                                                  "1t"
                                                  "1s"
                                                  "1r"
                                                  "1q"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("8" "7" "6")))
                                              (hygiene guile))))
                                    #{ropt -ANAU$bmvAmthP7L7xwsTA}#)))
                          #{tmp -ANAU$bmvAmthP7L7xwsTI}#)
                        (let ((#{tmp -ANAU$bmvAmthP7L7xwsTq}#
                                ($sc-dispatch
                                  #{args -ANAU$bmvAmthP7L7xwsS$}#
                                  '((any any) . any))))
                          (if (if #{tmp -ANAU$bmvAmthP7L7xwsTq}#
                                (@apply
                                  (lambda (#{a -ANAU$bmvAmthP7L7xwsTu}#
                                           #{init -ANAU$bmvAmthP7L7xwsTv}#
                                           #{b -ANAU$bmvAmthP7L7xwsTw}#)
                                    (if (symbol? #{a -ANAU$bmvAmthP7L7xwsTu}#)
                                      #t
                                      (if (if (vector?
                                                #{a -ANAU$bmvAmthP7L7xwsTu}#)
                                            (if (= (vector-length
                                                     #{a -ANAU$bmvAmthP7L7xwsTu}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{a -ANAU$bmvAmthP7L7xwsTu}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol?
                                          (vector-ref
                                            #{a -ANAU$bmvAmthP7L7xwsTu}#
                                            1))
                                        #f)))
                                  #{tmp -ANAU$bmvAmthP7L7xwsTq}#)
                                #f)
                            (@apply
                              (lambda (#{a -ANAU$bmvAmthP7L7xwsUL}#
                                       #{init -ANAU$bmvAmthP7L7xwsUM}#
                                       #{b -ANAU$bmvAmthP7L7xwsUN}#)
                                (#{opt -ANAU$bmvAmthP7L7xwsQ8}#
                                  #{b -ANAU$bmvAmthP7L7xwsUN}#
                                  #{req -ANAU$bmvAmthP7L7xwsS@}#
                                  (cons (list #{a -ANAU$bmvAmthP7L7xwsUL}#
                                              #{init -ANAU$bmvAmthP7L7xwsUM}#)
                                        #{ropt -ANAU$bmvAmthP7L7xwsTA}#)))
                              #{tmp -ANAU$bmvAmthP7L7xwsTq}#)
                            (let ((#{tmp -ANAU$bmvAmthP7L7xwsUO}#
                                    ($sc-dispatch
                                      #{args -ANAU$bmvAmthP7L7xwsS$}#
                                      '(any . any))))
                              (if (if #{tmp -ANAU$bmvAmthP7L7xwsUO}#
                                    (@apply
                                      (lambda (#{a -ANAU$bmvAmthP7L7xwsUS}#
                                               #{b -ANAU$bmvAmthP7L7xwsUT}#)
                                        (eq? (syntax->datum
                                               #{a -ANAU$bmvAmthP7L7xwsUS}#)
                                             #:key))
                                      #{tmp -ANAU$bmvAmthP7L7xwsUO}#)
                                    #f)
                                (@apply
                                  (lambda (#{a -ANAU$bmvAmthP7L7xwsUU}#
                                           #{b -ANAU$bmvAmthP7L7xwsUV}#)
                                    (#{key -ANAU$bmvAmthP7L7xwsQ9}#
                                      #{b -ANAU$bmvAmthP7L7xwsUV}#
                                      #{req -ANAU$bmvAmthP7L7xwsS@}#
                                      (reverse #{ropt -ANAU$bmvAmthP7L7xwsTA}#)
                                      '()))
                                  #{tmp -ANAU$bmvAmthP7L7xwsUO}#)
                                (let ((#{tmp -ANAU$bmvAmthP7L7xwsUY}#
                                        ($sc-dispatch
                                          #{args -ANAU$bmvAmthP7L7xwsS$}#
                                          '(any any))))
                                  (if (if #{tmp -ANAU$bmvAmthP7L7xwsUY}#
                                        (@apply
                                          (lambda (#{a -ANAU$bmvAmthP7L7xwsUc}#
                                                   #{b -ANAU$bmvAmthP7L7xwsUd}#)
                                            (eq? (syntax->datum
                                                   #{a -ANAU$bmvAmthP7L7xwsUc}#)
                                                 #:rest))
                                          #{tmp -ANAU$bmvAmthP7L7xwsUY}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a -ANAU$bmvAmthP7L7xwsUe}#
                                               #{b -ANAU$bmvAmthP7L7xwsUf}#)
                                        (#{rest -ANAU$bmvAmthP7L7xwsQ$}#
                                          #{b -ANAU$bmvAmthP7L7xwsUf}#
                                          #{req -ANAU$bmvAmthP7L7xwsS@}#
                                          (reverse
                                            #{ropt -ANAU$bmvAmthP7L7xwsTA}#)
                                          '()))
                                      #{tmp -ANAU$bmvAmthP7L7xwsUY}#)
                                    (let ((#{tmp -ANAU$bmvAmthP7L7xwsUi}#
                                            (list #{args -ANAU$bmvAmthP7L7xwsS$}#)))
                                      (if (@apply
                                            (lambda (#{r -ANAU$bmvAmthP7L7xwsUk}#)
                                              (if (symbol?
                                                    #{r -ANAU$bmvAmthP7L7xwsUk}#)
                                                #t
                                                (if (if (vector?
                                                          #{r -ANAU$bmvAmthP7L7xwsUk}#)
                                                      (if (= (vector-length
                                                               #{r -ANAU$bmvAmthP7L7xwsUk}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{r -ANAU$bmvAmthP7L7xwsUk}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref
                                                      #{r -ANAU$bmvAmthP7L7xwsUk}#
                                                      1))
                                                  #f)))
                                            #{tmp -ANAU$bmvAmthP7L7xwsUi}#)
                                        (@apply
                                          (lambda (#{r -ANAU$bmvAmthP7L7xwsVC}#)
                                            (#{rest -ANAU$bmvAmthP7L7xwsQ$}#
                                              #{r -ANAU$bmvAmthP7L7xwsVC}#
                                              #{req -ANAU$bmvAmthP7L7xwsS@}#
                                              (reverse
                                                #{ropt -ANAU$bmvAmthP7L7xwsTA}#)
                                              '()))
                                          #{tmp -ANAU$bmvAmthP7L7xwsUi}#)
                                        (syntax-violation
                                          'lambda*
                                          "invalid optional argument list"
                                          #{orig-args -ANAU$bmvAmthP7L7xwsQ6}#
                                          #{args -ANAU$bmvAmthP7L7xwsS$}#)))))))))))))))
            (#{key -ANAU$bmvAmthP7L7xwsQ9}#
              (lambda (#{args -ANAU$bmvAmthP7L7xwsVV}#
                       #{req -ANAU$bmvAmthP7L7xwsVW}#
                       #{opt -ANAU$bmvAmthP7L7xwsVX}#
                       #{rkey -ANAU$bmvAmthP7L7xwsVY}#)
                (let ((#{tmp -ANAU$bmvAmthP7L7xwsVa}#
                        ($sc-dispatch
                          #{args -ANAU$bmvAmthP7L7xwsVV}#
                          '())))
                  (if #{tmp -ANAU$bmvAmthP7L7xwsVa}#
                    (@apply
                      (lambda ()
                        (#{check -ANAU$bmvAmthP7L7xwsQ@}#
                          #{req -ANAU$bmvAmthP7L7xwsVW}#
                          #{opt -ANAU$bmvAmthP7L7xwsVX}#
                          #f
                          (cons #f
                                (reverse #{rkey -ANAU$bmvAmthP7L7xwsVY}#))))
                      #{tmp -ANAU$bmvAmthP7L7xwsVa}#)
                    (let ((#{tmp -ANAU$bmvAmthP7L7xwsVg}#
                            ($sc-dispatch
                              #{args -ANAU$bmvAmthP7L7xwsVV}#
                              '(any . any))))
                      (if (if #{tmp -ANAU$bmvAmthP7L7xwsVg}#
                            (@apply
                              (lambda (#{a -ANAU$bmvAmthP7L7xwsVk}#
                                       #{b -ANAU$bmvAmthP7L7xwsVl}#)
                                (if (symbol? #{a -ANAU$bmvAmthP7L7xwsVk}#)
                                  #t
                                  (if (if (vector?
                                            #{a -ANAU$bmvAmthP7L7xwsVk}#)
                                        (if (= (vector-length
                                                 #{a -ANAU$bmvAmthP7L7xwsVk}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a -ANAU$bmvAmthP7L7xwsVk}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a -ANAU$bmvAmthP7L7xwsVk}#
                                        1))
                                    #f)))
                              #{tmp -ANAU$bmvAmthP7L7xwsVg}#)
                            #f)
                        (@apply
                          (lambda (#{a -ANAU$bmvAmthP7L7xwsWA}#
                                   #{b -ANAU$bmvAmthP7L7xwsWB}#)
                            (let ((#{tmp -ANAU$bmvAmthP7L7xwsWC}#
                                    (symbol->keyword
                                      (syntax->datum
                                        #{a -ANAU$bmvAmthP7L7xwsWA}#))))
                              (#{key -ANAU$bmvAmthP7L7xwsQ9}#
                                #{b -ANAU$bmvAmthP7L7xwsWB}#
                                #{req -ANAU$bmvAmthP7L7xwsVW}#
                                #{opt -ANAU$bmvAmthP7L7xwsVX}#
                                (cons (cons #{tmp -ANAU$bmvAmthP7L7xwsWC}#
                                            (cons #{a -ANAU$bmvAmthP7L7xwsWA}#
                                                  '(#(syntax-object
                                                      #f
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(k)
                                                         #((top))
                                                         #("rk"))
                                                       #(ribcage
                                                         #(a b)
                                                         #((top) (top))
                                                         #("ri" "rj"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(args req opt rkey)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("rc"
                                                           "rd"
                                                           "re"
                                                           "rf"))
                                                       #(ribcage
                                                         (check rest
                                                                key
                                                                opt
                                                                req)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("q2"
                                                          "q1"
                                                          "q0"
                                                          "pz"
                                                          "py"))
                                                       #(ribcage
                                                         #(orig-args)
                                                         #((top))
                                                         #("px"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("5l"
                                                          "5k"
                                                          "5j"
                                                          "5i"
                                                          "5h"
                                                          "5g"
                                                          "5f"
                                                          "5e"
                                                          "5d"
                                                          "5c"
                                                          "5b"
                                                          "5a"
                                                          "59"
                                                          "58"
                                                          "57"
                                                          "56"
                                                          "55"
                                                          "54"
                                                          "53"
                                                          "52"
                                                          "51"
                                                          "50"
                                                          "4z"
                                                          "4y"
                                                          "4x"
                                                          "4w"
                                                          "4v"
                                                          "4u"
                                                          "4t"
                                                          "4s"
                                                          "4r"
                                                          "4q"
                                                          "4p"
                                                          "4o"
                                                          "4n"
                                                          "4m"
                                                          "4l"
                                                          "4k"
                                                          "4j"
                                                          "4i"
                                                          "4h"
                                                          "4g"
                                                          "4f"
                                                          "4e"
                                                          "4d"
                                                          "4c"
                                                          "4b"
                                                          "4a"
                                                          "49"
                                                          "48"
                                                          "47"
                                                          "46"
                                                          "45"
                                                          "44"
                                                          "43"
                                                          "42"
                                                          "41"
                                                          "40"
                                                          "3z"
                                                          "3y"
                                                          "3x"
                                                          "3w"
                                                          "3v"
                                                          "3u"
                                                          "3t"
                                                          "3s"
                                                          "3r"
                                                          "3q"
                                                          "3p"
                                                          "3o"
                                                          "3n"
                                                          "3m"
                                                          "3l"
                                                          "3k"
                                                          "3j"
                                                          "3i"
                                                          "3h"
                                                          "3g"
                                                          "3f"
                                                          "3e"
                                                          "3d"
                                                          "3c"
                                                          "3b"
                                                          "3a"
                                                          "39"
                                                          "38"
                                                          "37"
                                                          "36"
                                                          "35"
                                                          "34"
                                                          "33"
                                                          "32"
                                                          "31"
                                                          "30"
                                                          "2z"
                                                          "2y"
                                                          "2x"
                                                          "2w"
                                                          "2v"
                                                          "2u"
                                                          "2t"
                                                          "2s"
                                                          "2r"
                                                          "2q"
                                                          "2p"
                                                          "2o"
                                                          "2n"
                                                          "2m"
                                                          "2l"
                                                          "2k"
                                                          "2j"
                                                          "2i"
                                                          "2h"
                                                          "2g"
                                                          "2f"
                                                          "2e"
                                                          "2d"
                                                          "2c"
                                                          "2b"
                                                          "2a"
                                                          "29"
                                                          "28"
                                                          "27"
                                                          "26"
                                                          "25"
                                                          "24"
                                                          "23"
                                                          "22"
                                                          "21"
                                                          "20"
                                                          "1z"
                                                          "1y"
                                                          "1x"
                                                          "1w"
                                                          "1v"
                                                          "1u"
                                                          "1t"
                                                          "1s"
                                                          "1r"
                                                          "1q"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("8" "7" "6")))
                                                      (hygiene guile)))))
                                      #{rkey -ANAU$bmvAmthP7L7xwsVY}#))))
                          #{tmp -ANAU$bmvAmthP7L7xwsVg}#)
                        (let ((#{tmp -ANAU$bmvAmthP7L7xwsWF}#
                                ($sc-dispatch
                                  #{args -ANAU$bmvAmthP7L7xwsVV}#
                                  '((any any) . any))))
                          (if (if #{tmp -ANAU$bmvAmthP7L7xwsWF}#
                                (@apply
                                  (lambda (#{a -ANAU$bmvAmthP7L7xwsWJ}#
                                           #{init -ANAU$bmvAmthP7L7xwsWK}#
                                           #{b -ANAU$bmvAmthP7L7xwsWL}#)
                                    (if (symbol? #{a -ANAU$bmvAmthP7L7xwsWJ}#)
                                      #t
                                      (if (if (vector?
                                                #{a -ANAU$bmvAmthP7L7xwsWJ}#)
                                            (if (= (vector-length
                                                     #{a -ANAU$bmvAmthP7L7xwsWJ}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{a -ANAU$bmvAmthP7L7xwsWJ}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol?
                                          (vector-ref
                                            #{a -ANAU$bmvAmthP7L7xwsWJ}#
                                            1))
                                        #f)))
                                  #{tmp -ANAU$bmvAmthP7L7xwsWF}#)
                                #f)
                            (@apply
                              (lambda (#{a -ANAU$bmvAmthP7L7xwsWm}#
                                       #{init -ANAU$bmvAmthP7L7xwsWn}#
                                       #{b -ANAU$bmvAmthP7L7xwsWo}#)
                                (let ((#{tmp -ANAU$bmvAmthP7L7xwsWp}#
                                        (symbol->keyword
                                          (syntax->datum
                                            #{a -ANAU$bmvAmthP7L7xwsWm}#))))
                                  (#{key -ANAU$bmvAmthP7L7xwsQ9}#
                                    #{b -ANAU$bmvAmthP7L7xwsWo}#
                                    #{req -ANAU$bmvAmthP7L7xwsVW}#
                                    #{opt -ANAU$bmvAmthP7L7xwsVX}#
                                    (cons (list #{tmp -ANAU$bmvAmthP7L7xwsWp}#
                                                #{a -ANAU$bmvAmthP7L7xwsWm}#
                                                #{init -ANAU$bmvAmthP7L7xwsWn}#)
                                          #{rkey -ANAU$bmvAmthP7L7xwsVY}#))))
                              #{tmp -ANAU$bmvAmthP7L7xwsWF}#)
                            (let ((#{tmp -ANAU$bmvAmthP7L7xwsWs}#
                                    ($sc-dispatch
                                      #{args -ANAU$bmvAmthP7L7xwsVV}#
                                      '((any any any) . any))))
                              (if (if #{tmp -ANAU$bmvAmthP7L7xwsWs}#
                                    (@apply
                                      (lambda (#{a -ANAU$bmvAmthP7L7xwsWw}#
                                               #{init -ANAU$bmvAmthP7L7xwsWx}#
                                               #{k -ANAU$bmvAmthP7L7xwsWy}#
                                               #{b -ANAU$bmvAmthP7L7xwsWz}#)
                                        (if (if (symbol?
                                                  #{a -ANAU$bmvAmthP7L7xwsWw}#)
                                              #t
                                              (if (if (vector?
                                                        #{a -ANAU$bmvAmthP7L7xwsWw}#)
                                                    (if (= (vector-length
                                                             #{a -ANAU$bmvAmthP7L7xwsWw}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{a -ANAU$bmvAmthP7L7xwsWw}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref
                                                    #{a -ANAU$bmvAmthP7L7xwsWw}#
                                                    1))
                                                #f))
                                          (keyword?
                                            (syntax->datum
                                              #{k -ANAU$bmvAmthP7L7xwsWy}#))
                                          #f))
                                      #{tmp -ANAU$bmvAmthP7L7xwsWs}#)
                                    #f)
                                (@apply
                                  (lambda (#{a -ANAU$bmvAmthP7L7xwsXO}#
                                           #{init -ANAU$bmvAmthP7L7xwsXP}#
                                           #{k -ANAU$bmvAmthP7L7xwsXQ}#
                                           #{b -ANAU$bmvAmthP7L7xwsXR}#)
                                    (#{key -ANAU$bmvAmthP7L7xwsQ9}#
                                      #{b -ANAU$bmvAmthP7L7xwsXR}#
                                      #{req -ANAU$bmvAmthP7L7xwsVW}#
                                      #{opt -ANAU$bmvAmthP7L7xwsVX}#
                                      (cons (list #{k -ANAU$bmvAmthP7L7xwsXQ}#
                                                  #{a -ANAU$bmvAmthP7L7xwsXO}#
                                                  #{init -ANAU$bmvAmthP7L7xwsXP}#)
                                            #{rkey -ANAU$bmvAmthP7L7xwsVY}#)))
                                  #{tmp -ANAU$bmvAmthP7L7xwsWs}#)
                                (let ((#{tmp -ANAU$bmvAmthP7L7xwsXS}#
                                        ($sc-dispatch
                                          #{args -ANAU$bmvAmthP7L7xwsVV}#
                                          '(any))))
                                  (if (if #{tmp -ANAU$bmvAmthP7L7xwsXS}#
                                        (@apply
                                          (lambda (#{aok -ANAU$bmvAmthP7L7xwsXW}#)
                                            (eq? (syntax->datum
                                                   #{aok -ANAU$bmvAmthP7L7xwsXW}#)
                                                 #:allow-other-keys))
                                          #{tmp -ANAU$bmvAmthP7L7xwsXS}#)
                                        #f)
                                    (@apply
                                      (lambda (#{aok -ANAU$bmvAmthP7L7xwsXX}#)
                                        (#{check -ANAU$bmvAmthP7L7xwsQ@}#
                                          #{req -ANAU$bmvAmthP7L7xwsVW}#
                                          #{opt -ANAU$bmvAmthP7L7xwsVX}#
                                          #f
                                          (cons #t
                                                (reverse
                                                  #{rkey -ANAU$bmvAmthP7L7xwsVY}#))))
                                      #{tmp -ANAU$bmvAmthP7L7xwsXS}#)
                                    (let ((#{tmp -ANAU$bmvAmthP7L7xwsXa}#
                                            ($sc-dispatch
                                              #{args -ANAU$bmvAmthP7L7xwsVV}#
                                              '(any any any))))
                                      (if (if #{tmp -ANAU$bmvAmthP7L7xwsXa}#
                                            (@apply
                                              (lambda (#{aok -ANAU$bmvAmthP7L7xwsXe}#
                                                       #{a -ANAU$bmvAmthP7L7xwsXf}#
                                                       #{b -ANAU$bmvAmthP7L7xwsXg}#)
                                                (if (eq? (syntax->datum
                                                           #{aok -ANAU$bmvAmthP7L7xwsXe}#)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum
                                                         #{a -ANAU$bmvAmthP7L7xwsXf}#)
                                                       #:rest)
                                                  #f))
                                              #{tmp -ANAU$bmvAmthP7L7xwsXa}#)
                                            #f)
                                        (@apply
                                          (lambda (#{aok -ANAU$bmvAmthP7L7xwsXh}#
                                                   #{a -ANAU$bmvAmthP7L7xwsXi}#
                                                   #{b -ANAU$bmvAmthP7L7xwsXj}#)
                                            (#{rest -ANAU$bmvAmthP7L7xwsQ$}#
                                              #{b -ANAU$bmvAmthP7L7xwsXj}#
                                              #{req -ANAU$bmvAmthP7L7xwsVW}#
                                              #{opt -ANAU$bmvAmthP7L7xwsVX}#
                                              (cons #t
                                                    (reverse
                                                      #{rkey -ANAU$bmvAmthP7L7xwsVY}#))))
                                          #{tmp -ANAU$bmvAmthP7L7xwsXa}#)
                                        (let ((#{tmp -ANAU$bmvAmthP7L7xwsXm}#
                                                ($sc-dispatch
                                                  #{args -ANAU$bmvAmthP7L7xwsVV}#
                                                  '(any . any))))
                                          (if (if #{tmp -ANAU$bmvAmthP7L7xwsXm}#
                                                (@apply
                                                  (lambda (#{aok -ANAU$bmvAmthP7L7xwsXq}#
                                                           #{r -ANAU$bmvAmthP7L7xwsXr}#)
                                                    (if (eq? (syntax->datum
                                                               #{aok -ANAU$bmvAmthP7L7xwsXq}#)
                                                             #:allow-other-keys)
                                                      (if (symbol?
                                                            #{r -ANAU$bmvAmthP7L7xwsXr}#)
                                                        #t
                                                        (if (if (vector?
                                                                  #{r -ANAU$bmvAmthP7L7xwsXr}#)
                                                              (if (= (vector-length
                                                                       #{r -ANAU$bmvAmthP7L7xwsXr}#)
                                                                     4)
                                                                (eq? (vector-ref
                                                                       #{r -ANAU$bmvAmthP7L7xwsXr}#
                                                                       0)
                                                                     'syntax-object)
                                                                #f)
                                                              #f)
                                                          (symbol?
                                                            (vector-ref
                                                              #{r -ANAU$bmvAmthP7L7xwsXr}#
                                                              1))
                                                          #f))
                                                      #f))
                                                  #{tmp -ANAU$bmvAmthP7L7xwsXm}#)
                                                #f)
                                            (@apply
                                              (lambda (#{aok -ANAU$bmvAmthP7L7xwsYG}#
                                                       #{r -ANAU$bmvAmthP7L7xwsYH}#)
                                                (#{rest -ANAU$bmvAmthP7L7xwsQ$}#
                                                  #{r -ANAU$bmvAmthP7L7xwsYH}#
                                                  #{req -ANAU$bmvAmthP7L7xwsVW}#
                                                  #{opt -ANAU$bmvAmthP7L7xwsVX}#
                                                  (cons #t
                                                        (reverse
                                                          #{rkey -ANAU$bmvAmthP7L7xwsVY}#))))
                                              #{tmp -ANAU$bmvAmthP7L7xwsXm}#)
                                            (let ((#{tmp -ANAU$bmvAmthP7L7xwsYK}#
                                                    ($sc-dispatch
                                                      #{args -ANAU$bmvAmthP7L7xwsVV}#
                                                      '(any any))))
                                              (if (if #{tmp -ANAU$bmvAmthP7L7xwsYK}#
                                                    (@apply
                                                      (lambda (#{a -ANAU$bmvAmthP7L7xwsYO}#
                                                               #{b -ANAU$bmvAmthP7L7xwsYP}#)
                                                        (eq? (syntax->datum
                                                               #{a -ANAU$bmvAmthP7L7xwsYO}#)
                                                             #:rest))
                                                      #{tmp -ANAU$bmvAmthP7L7xwsYK}#)
                                                    #f)
                                                (@apply
                                                  (lambda (#{a -ANAU$bmvAmthP7L7xwsYQ}#
                                                           #{b -ANAU$bmvAmthP7L7xwsYR}#)
                                                    (#{rest -ANAU$bmvAmthP7L7xwsQ$}#
                                                      #{b -ANAU$bmvAmthP7L7xwsYR}#
                                                      #{req -ANAU$bmvAmthP7L7xwsVW}#
                                                      #{opt -ANAU$bmvAmthP7L7xwsVX}#
                                                      (cons #f
                                                            (reverse
                                                              #{rkey -ANAU$bmvAmthP7L7xwsVY}#))))
                                                  #{tmp -ANAU$bmvAmthP7L7xwsYK}#)
                                                (let ((#{tmp -ANAU$bmvAmthP7L7xwsYU}#
                                                        (list #{args -ANAU$bmvAmthP7L7xwsVV}#)))
                                                  (if (@apply
                                                        (lambda (#{r -ANAU$bmvAmthP7L7xwsYW}#)
                                                          (if (symbol?
                                                                #{r -ANAU$bmvAmthP7L7xwsYW}#)
                                                            #t
                                                            (if (if (vector?
                                                                      #{r -ANAU$bmvAmthP7L7xwsYW}#)
                                                                  (if (= (vector-length
                                                                           #{r -ANAU$bmvAmthP7L7xwsYW}#)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           #{r -ANAU$bmvAmthP7L7xwsYW}#
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (symbol?
                                                                (vector-ref
                                                                  #{r -ANAU$bmvAmthP7L7xwsYW}#
                                                                  1))
                                                              #f)))
                                                        #{tmp -ANAU$bmvAmthP7L7xwsYU}#)
                                                    (@apply
                                                      (lambda (#{r -ANAU$bmvAmthP7L7xwsY0}#)
                                                        (#{rest -ANAU$bmvAmthP7L7xwsQ$}#
                                                          #{r -ANAU$bmvAmthP7L7xwsY0}#
                                                          #{req -ANAU$bmvAmthP7L7xwsVW}#
                                                          #{opt -ANAU$bmvAmthP7L7xwsVX}#
                                                          (cons #f
                                                                (reverse
                                                                  #{rkey -ANAU$bmvAmthP7L7xwsVY}#))))
                                                      #{tmp -ANAU$bmvAmthP7L7xwsYU}#)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid keyword argument list"
                                                      #{orig-args -ANAU$bmvAmthP7L7xwsQ6}#
                                                      #{args -ANAU$bmvAmthP7L7xwsVV}#)))))))))))))))))))))
            (#{rest -ANAU$bmvAmthP7L7xwsQ$}#
              (lambda (#{args -ANAU$bmvAmthP7L7xwsZQ}#
                       #{req -ANAU$bmvAmthP7L7xwsZR}#
                       #{opt -ANAU$bmvAmthP7L7xwsZS}#
                       #{kw -ANAU$bmvAmthP7L7xwsZT}#)
                (let ((#{tmp -ANAU$bmvAmthP7L7xwsZV}#
                        (list #{args -ANAU$bmvAmthP7L7xwsZQ}#)))
                  (if (@apply
                        (lambda (#{r -ANAU$bmvAmthP7L7xwsZX}#)
                          (if (symbol? #{r -ANAU$bmvAmthP7L7xwsZX}#)
                            #t
                            (if (if (vector? #{r -ANAU$bmvAmthP7L7xwsZX}#)
                                  (if (= (vector-length
                                           #{r -ANAU$bmvAmthP7L7xwsZX}#)
                                         4)
                                    (eq? (vector-ref
                                           #{r -ANAU$bmvAmthP7L7xwsZX}#
                                           0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol?
                                (vector-ref #{r -ANAU$bmvAmthP7L7xwsZX}# 1))
                              #f)))
                        #{tmp -ANAU$bmvAmthP7L7xwsZV}#)
                    (@apply
                      (lambda (#{r -ANAU$bmvAmthP7L7xwsZ1}#)
                        (#{check -ANAU$bmvAmthP7L7xwsQ@}#
                          #{req -ANAU$bmvAmthP7L7xwsZR}#
                          #{opt -ANAU$bmvAmthP7L7xwsZS}#
                          #{r -ANAU$bmvAmthP7L7xwsZ1}#
                          #{kw -ANAU$bmvAmthP7L7xwsZT}#))
                      #{tmp -ANAU$bmvAmthP7L7xwsZV}#)
                    (syntax-violation
                      'lambda*
                      "invalid rest argument"
                      #{orig-args -ANAU$bmvAmthP7L7xwsQ6}#
                      #{args -ANAU$bmvAmthP7L7xwsZQ}#)))))
            (#{check -ANAU$bmvAmthP7L7xwsQ@}#
              (lambda (#{req -ANAU$bmvAmthP7L7xwsZ5}#
                       #{opt -ANAU$bmvAmthP7L7xwsZ6}#
                       #{rest -ANAU$bmvAmthP7L7xwsZ7}#
                       #{kw -ANAU$bmvAmthP7L7xwsZ8}#)
                (if (#{distinct-bound-ids? -ANAU$bmvAmthP7L7xwnN7}#
                      (append
                        #{req -ANAU$bmvAmthP7L7xwsZ5}#
                        (map car #{opt -ANAU$bmvAmthP7L7xwsZ6}#)
                        (if #{rest -ANAU$bmvAmthP7L7xwsZ7}#
                          (list #{rest -ANAU$bmvAmthP7L7xwsZ7}#)
                          '())
                        (if (pair? #{kw -ANAU$bmvAmthP7L7xwsZ8}#)
                          (map cadr (cdr #{kw -ANAU$bmvAmthP7L7xwsZ8}#))
                          '())))
                  (values
                    #{req -ANAU$bmvAmthP7L7xwsZ5}#
                    #{opt -ANAU$bmvAmthP7L7xwsZ6}#
                    #{rest -ANAU$bmvAmthP7L7xwsZ7}#
                    #{kw -ANAU$bmvAmthP7L7xwsZ8}#)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    #{orig-args -ANAU$bmvAmthP7L7xwsQ6}#)))))
           (#{req -ANAU$bmvAmthP7L7xwsQ7}#
             #{orig-args -ANAU$bmvAmthP7L7xwsQ6}#
             '()))))
     (#{expand-lambda-case -ANAU$bmvAmthP7L7xwnOQ}#
       (lambda (#{e -ANAU$bmvAmthP7L7xwsbw}#
                #{r -ANAU$bmvAmthP7L7xwsbx}#
                #{w -ANAU$bmvAmthP7L7xwsby}#
                #{s -ANAU$bmvAmthP7L7xwsbz}#
                #{mod -ANAU$bmvAmthP7L7xwsb0}#
                #{get-formals -ANAU$bmvAmthP7L7xwsb1}#
                #{clauses -ANAU$bmvAmthP7L7xwsb2}#)
         (letrec*
           ((#{parse-req -ANAU$bmvAmthP7L7xwsb3}#
              (lambda (#{req -ANAU$bmvAmthP7L7xwsd2}#
                       #{opt -ANAU$bmvAmthP7L7xwsd3}#
                       #{rest -ANAU$bmvAmthP7L7xwsd4}#
                       #{kw -ANAU$bmvAmthP7L7xwsd5}#
                       #{body -ANAU$bmvAmthP7L7xwsd6}#)
                (let ((#{vars -ANAU$bmvAmthP7L7xwsd7}#
                        (map #{gen-var -ANAU$bmvAmthP7L7xwnOS}#
                             #{req -ANAU$bmvAmthP7L7xwsd2}#))
                      (#{labels -ANAU$bmvAmthP7L7xwsd8}#
                        (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                          #{req -ANAU$bmvAmthP7L7xwsd2}#)))
                  (let ((#{r* -ANAU$bmvAmthP7L7xwsd9}#
                          (#{extend-var-env -ANAU$bmvAmthP7L7xwnNb}#
                            #{labels -ANAU$bmvAmthP7L7xwsd8}#
                            #{vars -ANAU$bmvAmthP7L7xwsd7}#
                            #{r -ANAU$bmvAmthP7L7xwsbx}#))
                        (#{w* -ANAU$bmvAmthP7L7xwsd$}#
                          (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                            #{req -ANAU$bmvAmthP7L7xwsd2}#
                            #{labels -ANAU$bmvAmthP7L7xwsd8}#
                            #{w -ANAU$bmvAmthP7L7xwsby}#)))
                    (#{parse-opt -ANAU$bmvAmthP7L7xwsb4}#
                      (map syntax->datum
                           #{req -ANAU$bmvAmthP7L7xwsd2}#)
                      #{opt -ANAU$bmvAmthP7L7xwsd3}#
                      #{rest -ANAU$bmvAmthP7L7xwsd4}#
                      #{kw -ANAU$bmvAmthP7L7xwsd5}#
                      #{body -ANAU$bmvAmthP7L7xwsd6}#
                      (reverse #{vars -ANAU$bmvAmthP7L7xwsd7}#)
                      #{r* -ANAU$bmvAmthP7L7xwsd9}#
                      #{w* -ANAU$bmvAmthP7L7xwsd$}#
                      '()
                      '())))))
            (#{parse-opt -ANAU$bmvAmthP7L7xwsb4}#
              (lambda (#{req -ANAU$bmvAmthP7L7xwsgu}#
                       #{opt -ANAU$bmvAmthP7L7xwsgv}#
                       #{rest -ANAU$bmvAmthP7L7xwsgw}#
                       #{kw -ANAU$bmvAmthP7L7xwsgx}#
                       #{body -ANAU$bmvAmthP7L7xwsgy}#
                       #{vars -ANAU$bmvAmthP7L7xwsgz}#
                       #{r* -ANAU$bmvAmthP7L7xwsg0}#
                       #{w* -ANAU$bmvAmthP7L7xwsg1}#
                       #{out -ANAU$bmvAmthP7L7xwsg2}#
                       #{inits -ANAU$bmvAmthP7L7xwsg3}#)
                (if (pair? #{opt -ANAU$bmvAmthP7L7xwsgv}#)
                  (let ((#{tmp -ANAU$bmvAmthP7L7xwsg4}#
                          (car #{opt -ANAU$bmvAmthP7L7xwsgv}#)))
                    (let ((#{tmp -ANAU$bmvAmthP7L7xwsg5}#
                            ($sc-dispatch
                              #{tmp -ANAU$bmvAmthP7L7xwsg4}#
                              '(any any))))
                      (if #{tmp -ANAU$bmvAmthP7L7xwsg5}#
                        (@apply
                          (lambda (#{id -ANAU$bmvAmthP7L7xwsg7}#
                                   #{i -ANAU$bmvAmthP7L7xwsg8}#)
                            (let ((#{v -ANAU$bmvAmthP7L7xwsg9}#
                                    (let ((#{id -ANAU$bmvAmthP7L7xwshF}#
                                            (if (if (vector?
                                                      #{id -ANAU$bmvAmthP7L7xwsg7}#)
                                                  (if (= (vector-length
                                                           #{id -ANAU$bmvAmthP7L7xwsg7}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{id -ANAU$bmvAmthP7L7xwsg7}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{id -ANAU$bmvAmthP7L7xwsg7}#
                                                1)
                                              #{id -ANAU$bmvAmthP7L7xwsg7}#)))
                                      (gensym
                                        (string-append
                                          (symbol->string
                                            #{id -ANAU$bmvAmthP7L7xwshF}#)
                                          " ")))))
                              (let ((#{l -ANAU$bmvAmthP7L7xwsg$}#
                                      (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                                        (list #{v -ANAU$bmvAmthP7L7xwsg9}#))))
                                (let ((#{r** -ANAU$bmvAmthP7L7xwsg@}#
                                        (#{extend-var-env -ANAU$bmvAmthP7L7xwnNb}#
                                          #{l -ANAU$bmvAmthP7L7xwsg$}#
                                          (list #{v -ANAU$bmvAmthP7L7xwsg9}#)
                                          #{r* -ANAU$bmvAmthP7L7xwsg0}#)))
                                  (let ((#{w** -ANAU$bmvAmthP7L7xwshA}#
                                          (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                                            (list #{id -ANAU$bmvAmthP7L7xwsg7}#)
                                            #{l -ANAU$bmvAmthP7L7xwsg$}#
                                            #{w* -ANAU$bmvAmthP7L7xwsg1}#)))
                                    (#{parse-opt -ANAU$bmvAmthP7L7xwsb4}#
                                      #{req -ANAU$bmvAmthP7L7xwsgu}#
                                      (cdr #{opt -ANAU$bmvAmthP7L7xwsgv}#)
                                      #{rest -ANAU$bmvAmthP7L7xwsgw}#
                                      #{kw -ANAU$bmvAmthP7L7xwsgx}#
                                      #{body -ANAU$bmvAmthP7L7xwsgy}#
                                      (cons #{v -ANAU$bmvAmthP7L7xwsg9}#
                                            #{vars -ANAU$bmvAmthP7L7xwsgz}#)
                                      #{r** -ANAU$bmvAmthP7L7xwsg@}#
                                      #{w** -ANAU$bmvAmthP7L7xwshA}#
                                      (cons (syntax->datum
                                              #{id -ANAU$bmvAmthP7L7xwsg7}#)
                                            #{out -ANAU$bmvAmthP7L7xwsg2}#)
                                      (cons (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                              #{i -ANAU$bmvAmthP7L7xwsg8}#
                                              #{r* -ANAU$bmvAmthP7L7xwsg0}#
                                              #{w* -ANAU$bmvAmthP7L7xwsg1}#
                                              #{mod -ANAU$bmvAmthP7L7xwsb0}#)
                                            #{inits -ANAU$bmvAmthP7L7xwsg3}#)))))))
                          #{tmp -ANAU$bmvAmthP7L7xwsg5}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp -ANAU$bmvAmthP7L7xwsg4}#))))
                  (if #{rest -ANAU$bmvAmthP7L7xwsgw}#
                    (let ((#{v -ANAU$bmvAmthP7L7xwskq}#
                            (let ((#{id -ANAU$bmvAmthP7L7xwsk0}#
                                    (if (if (vector?
                                              #{rest -ANAU$bmvAmthP7L7xwsgw}#)
                                          (if (= (vector-length
                                                   #{rest -ANAU$bmvAmthP7L7xwsgw}#)
                                                 4)
                                            (eq? (vector-ref
                                                   #{rest -ANAU$bmvAmthP7L7xwsgw}#
                                                   0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref
                                        #{rest -ANAU$bmvAmthP7L7xwsgw}#
                                        1)
                                      #{rest -ANAU$bmvAmthP7L7xwsgw}#)))
                              (gensym
                                (string-append
                                  (symbol->string
                                    #{id -ANAU$bmvAmthP7L7xwsk0}#)
                                  " ")))))
                      (let ((#{l -ANAU$bmvAmthP7L7xwskr}#
                              (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                                (list #{v -ANAU$bmvAmthP7L7xwskq}#))))
                        (let ((#{r* -ANAU$bmvAmthP7L7xwsks}#
                                (#{extend-var-env -ANAU$bmvAmthP7L7xwnNb}#
                                  #{l -ANAU$bmvAmthP7L7xwskr}#
                                  (list #{v -ANAU$bmvAmthP7L7xwskq}#)
                                  #{r* -ANAU$bmvAmthP7L7xwsg0}#)))
                          (let ((#{w* -ANAU$bmvAmthP7L7xwskt}#
                                  (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                                    (list #{rest -ANAU$bmvAmthP7L7xwsgw}#)
                                    #{l -ANAU$bmvAmthP7L7xwskr}#
                                    #{w* -ANAU$bmvAmthP7L7xwsg1}#)))
                            (#{parse-kw -ANAU$bmvAmthP7L7xwsb5}#
                              #{req -ANAU$bmvAmthP7L7xwsgu}#
                              (if (pair? #{out -ANAU$bmvAmthP7L7xwsg2}#)
                                (reverse #{out -ANAU$bmvAmthP7L7xwsg2}#)
                                #f)
                              (syntax->datum #{rest -ANAU$bmvAmthP7L7xwsgw}#)
                              (if (pair? #{kw -ANAU$bmvAmthP7L7xwsgx}#)
                                (cdr #{kw -ANAU$bmvAmthP7L7xwsgx}#)
                                #{kw -ANAU$bmvAmthP7L7xwsgx}#)
                              #{body -ANAU$bmvAmthP7L7xwsgy}#
                              (cons #{v -ANAU$bmvAmthP7L7xwskq}#
                                    #{vars -ANAU$bmvAmthP7L7xwsgz}#)
                              #{r* -ANAU$bmvAmthP7L7xwsks}#
                              #{w* -ANAU$bmvAmthP7L7xwskt}#
                              (if (pair? #{kw -ANAU$bmvAmthP7L7xwsgx}#)
                                (car #{kw -ANAU$bmvAmthP7L7xwsgx}#)
                                #f)
                              '()
                              #{inits -ANAU$bmvAmthP7L7xwsg3}#)))))
                    (#{parse-kw -ANAU$bmvAmthP7L7xwsb5}#
                      #{req -ANAU$bmvAmthP7L7xwsgu}#
                      (if (pair? #{out -ANAU$bmvAmthP7L7xwsg2}#)
                        (reverse #{out -ANAU$bmvAmthP7L7xwsg2}#)
                        #f)
                      #f
                      (if (pair? #{kw -ANAU$bmvAmthP7L7xwsgx}#)
                        (cdr #{kw -ANAU$bmvAmthP7L7xwsgx}#)
                        #{kw -ANAU$bmvAmthP7L7xwsgx}#)
                      #{body -ANAU$bmvAmthP7L7xwsgy}#
                      #{vars -ANAU$bmvAmthP7L7xwsgz}#
                      #{r* -ANAU$bmvAmthP7L7xwsg0}#
                      #{w* -ANAU$bmvAmthP7L7xwsg1}#
                      (if (pair? #{kw -ANAU$bmvAmthP7L7xwsgx}#)
                        (car #{kw -ANAU$bmvAmthP7L7xwsgx}#)
                        #f)
                      '()
                      #{inits -ANAU$bmvAmthP7L7xwsg3}#)))))
            (#{parse-kw -ANAU$bmvAmthP7L7xwsb5}#
              (lambda (#{req -ANAU$bmvAmthP7L7xwsnW}#
                       #{opt -ANAU$bmvAmthP7L7xwsnX}#
                       #{rest -ANAU$bmvAmthP7L7xwsnY}#
                       #{kw -ANAU$bmvAmthP7L7xwsnZ}#
                       #{body -ANAU$bmvAmthP7L7xwsna}#
                       #{vars -ANAU$bmvAmthP7L7xwsnb}#
                       #{r* -ANAU$bmvAmthP7L7xwsnc}#
                       #{w* -ANAU$bmvAmthP7L7xwsnd}#
                       #{aok -ANAU$bmvAmthP7L7xwsne}#
                       #{out -ANAU$bmvAmthP7L7xwsnf}#
                       #{inits -ANAU$bmvAmthP7L7xwsng}#)
                (if (pair? #{kw -ANAU$bmvAmthP7L7xwsnZ}#)
                  (let ((#{tmp -ANAU$bmvAmthP7L7xwsnh}#
                          (car #{kw -ANAU$bmvAmthP7L7xwsnZ}#)))
                    (let ((#{tmp -ANAU$bmvAmthP7L7xwsni}#
                            ($sc-dispatch
                              #{tmp -ANAU$bmvAmthP7L7xwsnh}#
                              '(any any any))))
                      (if #{tmp -ANAU$bmvAmthP7L7xwsni}#
                        (@apply
                          (lambda (#{k -ANAU$bmvAmthP7L7xwsnk}#
                                   #{id -ANAU$bmvAmthP7L7xwsnl}#
                                   #{i -ANAU$bmvAmthP7L7xwsnm}#)
                            (let ((#{v -ANAU$bmvAmthP7L7xwsnn}#
                                    (let ((#{id -ANAU$bmvAmthP7L7xwsnv}#
                                            (if (if (vector?
                                                      #{id -ANAU$bmvAmthP7L7xwsnl}#)
                                                  (if (= (vector-length
                                                           #{id -ANAU$bmvAmthP7L7xwsnl}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{id -ANAU$bmvAmthP7L7xwsnl}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{id -ANAU$bmvAmthP7L7xwsnl}#
                                                1)
                                              #{id -ANAU$bmvAmthP7L7xwsnl}#)))
                                      (gensym
                                        (string-append
                                          (symbol->string
                                            #{id -ANAU$bmvAmthP7L7xwsnv}#)
                                          " ")))))
                              (let ((#{l -ANAU$bmvAmthP7L7xwsno}#
                                      (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                                        (list #{v -ANAU$bmvAmthP7L7xwsnn}#))))
                                (let ((#{r** -ANAU$bmvAmthP7L7xwsnp}#
                                        (#{extend-var-env -ANAU$bmvAmthP7L7xwnNb}#
                                          #{l -ANAU$bmvAmthP7L7xwsno}#
                                          (list #{v -ANAU$bmvAmthP7L7xwsnn}#)
                                          #{r* -ANAU$bmvAmthP7L7xwsnc}#)))
                                  (let ((#{w** -ANAU$bmvAmthP7L7xwsnq}#
                                          (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                                            (list #{id -ANAU$bmvAmthP7L7xwsnl}#)
                                            #{l -ANAU$bmvAmthP7L7xwsno}#
                                            #{w* -ANAU$bmvAmthP7L7xwsnd}#)))
                                    (#{parse-kw -ANAU$bmvAmthP7L7xwsb5}#
                                      #{req -ANAU$bmvAmthP7L7xwsnW}#
                                      #{opt -ANAU$bmvAmthP7L7xwsnX}#
                                      #{rest -ANAU$bmvAmthP7L7xwsnY}#
                                      (cdr #{kw -ANAU$bmvAmthP7L7xwsnZ}#)
                                      #{body -ANAU$bmvAmthP7L7xwsna}#
                                      (cons #{v -ANAU$bmvAmthP7L7xwsnn}#
                                            #{vars -ANAU$bmvAmthP7L7xwsnb}#)
                                      #{r** -ANAU$bmvAmthP7L7xwsnp}#
                                      #{w** -ANAU$bmvAmthP7L7xwsnq}#
                                      #{aok -ANAU$bmvAmthP7L7xwsne}#
                                      (cons (list (syntax->datum
                                                    #{k -ANAU$bmvAmthP7L7xwsnk}#)
                                                  (syntax->datum
                                                    #{id -ANAU$bmvAmthP7L7xwsnl}#)
                                                  #{v -ANAU$bmvAmthP7L7xwsnn}#)
                                            #{out -ANAU$bmvAmthP7L7xwsnf}#)
                                      (cons (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                              #{i -ANAU$bmvAmthP7L7xwsnm}#
                                              #{r* -ANAU$bmvAmthP7L7xwsnc}#
                                              #{w* -ANAU$bmvAmthP7L7xwsnd}#
                                              #{mod -ANAU$bmvAmthP7L7xwsb0}#)
                                            #{inits -ANAU$bmvAmthP7L7xwsng}#)))))))
                          #{tmp -ANAU$bmvAmthP7L7xwsni}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp -ANAU$bmvAmthP7L7xwsnh}#))))
                  (#{parse-body -ANAU$bmvAmthP7L7xwsb6}#
                    #{req -ANAU$bmvAmthP7L7xwsnW}#
                    #{opt -ANAU$bmvAmthP7L7xwsnX}#
                    #{rest -ANAU$bmvAmthP7L7xwsnY}#
                    (if (if #{aok -ANAU$bmvAmthP7L7xwsne}#
                          #{aok -ANAU$bmvAmthP7L7xwsne}#
                          (pair? #{out -ANAU$bmvAmthP7L7xwsnf}#))
                      (cons #{aok -ANAU$bmvAmthP7L7xwsne}#
                            (reverse #{out -ANAU$bmvAmthP7L7xwsnf}#))
                      #f)
                    #{body -ANAU$bmvAmthP7L7xwsna}#
                    (reverse #{vars -ANAU$bmvAmthP7L7xwsnb}#)
                    #{r* -ANAU$bmvAmthP7L7xwsnc}#
                    #{w* -ANAU$bmvAmthP7L7xwsnd}#
                    (reverse #{inits -ANAU$bmvAmthP7L7xwsng}#)
                    '()))))
            (#{parse-body -ANAU$bmvAmthP7L7xwsb6}#
              (lambda (#{req -ANAU$bmvAmthP7L7xwsrd}#
                       #{opt -ANAU$bmvAmthP7L7xwsre}#
                       #{rest -ANAU$bmvAmthP7L7xwsrf}#
                       #{kw -ANAU$bmvAmthP7L7xwsrg}#
                       #{body -ANAU$bmvAmthP7L7xwsrh}#
                       #{vars -ANAU$bmvAmthP7L7xwsri}#
                       #{r* -ANAU$bmvAmthP7L7xwsrj}#
                       #{w* -ANAU$bmvAmthP7L7xwsrk}#
                       #{inits -ANAU$bmvAmthP7L7xwsrl}#
                       #{meta -ANAU$bmvAmthP7L7xwsrm}#)
                (let ((#{tmp -ANAU$bmvAmthP7L7xwsro}#
                        ($sc-dispatch
                          #{body -ANAU$bmvAmthP7L7xwsrh}#
                          '(any any . each-any))))
                  (if (if #{tmp -ANAU$bmvAmthP7L7xwsro}#
                        (@apply
                          (lambda (#{docstring -ANAU$bmvAmthP7L7xwsrs}#
                                   #{e1 -ANAU$bmvAmthP7L7xwsrt}#
                                   #{e2 -ANAU$bmvAmthP7L7xwsru}#)
                            (string?
                              (syntax->datum
                                #{docstring -ANAU$bmvAmthP7L7xwsrs}#)))
                          #{tmp -ANAU$bmvAmthP7L7xwsro}#)
                        #f)
                    (@apply
                      (lambda (#{docstring -ANAU$bmvAmthP7L7xwsrv}#
                               #{e1 -ANAU$bmvAmthP7L7xwsrw}#
                               #{e2 -ANAU$bmvAmthP7L7xwsrx}#)
                        (#{parse-body -ANAU$bmvAmthP7L7xwsb6}#
                          #{req -ANAU$bmvAmthP7L7xwsrd}#
                          #{opt -ANAU$bmvAmthP7L7xwsre}#
                          #{rest -ANAU$bmvAmthP7L7xwsrf}#
                          #{kw -ANAU$bmvAmthP7L7xwsrg}#
                          (cons #{e1 -ANAU$bmvAmthP7L7xwsrw}#
                                #{e2 -ANAU$bmvAmthP7L7xwsrx}#)
                          #{vars -ANAU$bmvAmthP7L7xwsri}#
                          #{r* -ANAU$bmvAmthP7L7xwsrj}#
                          #{w* -ANAU$bmvAmthP7L7xwsrk}#
                          #{inits -ANAU$bmvAmthP7L7xwsrl}#
                          (append
                            #{meta -ANAU$bmvAmthP7L7xwsrm}#
                            (list (cons 'documentation
                                        (syntax->datum
                                          #{docstring -ANAU$bmvAmthP7L7xwsrv}#))))))
                      #{tmp -ANAU$bmvAmthP7L7xwsro}#)
                    (let ((#{tmp -ANAU$bmvAmthP7L7xwsry}#
                            ($sc-dispatch
                              #{body -ANAU$bmvAmthP7L7xwsrh}#
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if #{tmp -ANAU$bmvAmthP7L7xwsry}#
                        (@apply
                          (lambda (#{k -ANAU$bmvAmthP7L7xwsr2}#
                                   #{v -ANAU$bmvAmthP7L7xwsr3}#
                                   #{e1 -ANAU$bmvAmthP7L7xwsr4}#
                                   #{e2 -ANAU$bmvAmthP7L7xwsr5}#)
                            (#{parse-body -ANAU$bmvAmthP7L7xwsb6}#
                              #{req -ANAU$bmvAmthP7L7xwsrd}#
                              #{opt -ANAU$bmvAmthP7L7xwsre}#
                              #{rest -ANAU$bmvAmthP7L7xwsrf}#
                              #{kw -ANAU$bmvAmthP7L7xwsrg}#
                              (cons #{e1 -ANAU$bmvAmthP7L7xwsr4}#
                                    #{e2 -ANAU$bmvAmthP7L7xwsr5}#)
                              #{vars -ANAU$bmvAmthP7L7xwsri}#
                              #{r* -ANAU$bmvAmthP7L7xwsrj}#
                              #{w* -ANAU$bmvAmthP7L7xwsrk}#
                              #{inits -ANAU$bmvAmthP7L7xwsrl}#
                              (append
                                #{meta -ANAU$bmvAmthP7L7xwsrm}#
                                (syntax->datum
                                  (map cons
                                       #{k -ANAU$bmvAmthP7L7xwsr2}#
                                       #{v -ANAU$bmvAmthP7L7xwsr3}#)))))
                          #{tmp -ANAU$bmvAmthP7L7xwsry}#)
                        (let ((#{tmp -ANAU$bmvAmthP7L7xwsr6}#
                                ($sc-dispatch
                                  #{body -ANAU$bmvAmthP7L7xwsrh}#
                                  '(any . each-any))))
                          (if #{tmp -ANAU$bmvAmthP7L7xwsr6}#
                            (@apply
                              (lambda (#{e1 -ANAU$bmvAmthP7L7xwsr$}#
                                       #{e2 -ANAU$bmvAmthP7L7xwsr@}#)
                                (values
                                  #{meta -ANAU$bmvAmthP7L7xwsrm}#
                                  #{req -ANAU$bmvAmthP7L7xwsrd}#
                                  #{opt -ANAU$bmvAmthP7L7xwsre}#
                                  #{rest -ANAU$bmvAmthP7L7xwsrf}#
                                  #{kw -ANAU$bmvAmthP7L7xwsrg}#
                                  #{inits -ANAU$bmvAmthP7L7xwsrl}#
                                  #{vars -ANAU$bmvAmthP7L7xwsri}#
                                  (#{expand-body -ANAU$bmvAmthP7L7xwnOI}#
                                    (cons #{e1 -ANAU$bmvAmthP7L7xwsr$}#
                                          #{e2 -ANAU$bmvAmthP7L7xwsr@}#)
                                    (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                      (begin
                                        (if (if (pair? #{e -ANAU$bmvAmthP7L7xwsbw}#)
                                              #{s -ANAU$bmvAmthP7L7xwsbz}#
                                              #f)
                                          (set-source-properties!
                                            #{e -ANAU$bmvAmthP7L7xwsbw}#
                                            #{s -ANAU$bmvAmthP7L7xwsbz}#))
                                        #{e -ANAU$bmvAmthP7L7xwsbw}#)
                                      #{w -ANAU$bmvAmthP7L7xwsby}#
                                      #{mod -ANAU$bmvAmthP7L7xwsb0}#)
                                    #{r* -ANAU$bmvAmthP7L7xwsrj}#
                                    #{w* -ANAU$bmvAmthP7L7xwsrk}#
                                    #{mod -ANAU$bmvAmthP7L7xwsb0}#)))
                              #{tmp -ANAU$bmvAmthP7L7xwsr6}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{body -ANAU$bmvAmthP7L7xwsrh}#))))))))))
           (let ((#{tmp -ANAU$bmvAmthP7L7xwsb8}#
                   ($sc-dispatch
                     #{clauses -ANAU$bmvAmthP7L7xwsb2}#
                     '())))
             (if #{tmp -ANAU$bmvAmthP7L7xwsb8}#
               (@apply
                 (lambda () (values '() #f))
                 #{tmp -ANAU$bmvAmthP7L7xwsb8}#)
               (let ((#{tmp -ANAU$bmvAmthP7L7xwscA}#
                       ($sc-dispatch
                         #{clauses -ANAU$bmvAmthP7L7xwsb2}#
                         '((any any . each-any)
                           .
                           #(each (any any . each-any))))))
                 (if #{tmp -ANAU$bmvAmthP7L7xwscA}#
                   (@apply
                     (lambda (#{args -ANAU$bmvAmthP7L7xwscE}#
                              #{e1 -ANAU$bmvAmthP7L7xwscF}#
                              #{e2 -ANAU$bmvAmthP7L7xwscG}#
                              #{args* -ANAU$bmvAmthP7L7xwscH}#
                              #{e1* -ANAU$bmvAmthP7L7xwscI}#
                              #{e2* -ANAU$bmvAmthP7L7xwscJ}#)
                       (call-with-values
                         (lambda ()
                           (#{get-formals -ANAU$bmvAmthP7L7xwsb1}#
                             #{args -ANAU$bmvAmthP7L7xwscE}#))
                         (lambda (#{req -ANAU$bmvAmthP7L7xwscK}#
                                  #{opt -ANAU$bmvAmthP7L7xwscL}#
                                  #{rest -ANAU$bmvAmthP7L7xwscM}#
                                  #{kw -ANAU$bmvAmthP7L7xwscN}#)
                           (call-with-values
                             (lambda ()
                               (#{parse-req -ANAU$bmvAmthP7L7xwsb3}#
                                 #{req -ANAU$bmvAmthP7L7xwscK}#
                                 #{opt -ANAU$bmvAmthP7L7xwscL}#
                                 #{rest -ANAU$bmvAmthP7L7xwscM}#
                                 #{kw -ANAU$bmvAmthP7L7xwscN}#
                                 (cons #{e1 -ANAU$bmvAmthP7L7xwscF}#
                                       #{e2 -ANAU$bmvAmthP7L7xwscG}#)))
                             (lambda (#{meta -ANAU$bmvAmthP7L7xwsdK}#
                                      #{req -ANAU$bmvAmthP7L7xwsdL}#
                                      #{opt -ANAU$bmvAmthP7L7xwsdM}#
                                      #{rest -ANAU$bmvAmthP7L7xwsdN}#
                                      #{kw -ANAU$bmvAmthP7L7xwsdO}#
                                      #{inits -ANAU$bmvAmthP7L7xwsdP}#
                                      #{vars -ANAU$bmvAmthP7L7xwsdQ}#
                                      #{body -ANAU$bmvAmthP7L7xwsdR}#)
                               (call-with-values
                                 (lambda ()
                                   (#{expand-lambda-case -ANAU$bmvAmthP7L7xwnOQ}#
                                     #{e -ANAU$bmvAmthP7L7xwsbw}#
                                     #{r -ANAU$bmvAmthP7L7xwsbx}#
                                     #{w -ANAU$bmvAmthP7L7xwsby}#
                                     #{s -ANAU$bmvAmthP7L7xwsbz}#
                                     #{mod -ANAU$bmvAmthP7L7xwsb0}#
                                     #{get-formals -ANAU$bmvAmthP7L7xwsb1}#
                                     (map (lambda (#{tmp -ANAU$bmvAmthP7L7xwm9f -ANAU$bmvAmthP7L7xwsdS}#
                                                   #{tmp -ANAU$bmvAmthP7L7xwm9e -ANAU$bmvAmthP7L7xwsdT}#
                                                   #{tmp -ANAU$bmvAmthP7L7xwm9d -ANAU$bmvAmthP7L7xwsdU}#)
                                            (cons #{tmp -ANAU$bmvAmthP7L7xwm9d -ANAU$bmvAmthP7L7xwsdU}#
                                                  (cons #{tmp -ANAU$bmvAmthP7L7xwm9e -ANAU$bmvAmthP7L7xwsdT}#
                                                        #{tmp -ANAU$bmvAmthP7L7xwm9f -ANAU$bmvAmthP7L7xwsdS}#)))
                                          #{e2* -ANAU$bmvAmthP7L7xwscJ}#
                                          #{e1* -ANAU$bmvAmthP7L7xwscI}#
                                          #{args* -ANAU$bmvAmthP7L7xwscH}#)))
                                 (lambda (#{meta* -ANAU$bmvAmthP7L7xwsdV}#
                                          #{else* -ANAU$bmvAmthP7L7xwsdW}#)
                                   (values
                                     (append
                                       #{meta -ANAU$bmvAmthP7L7xwsdK}#
                                       #{meta* -ANAU$bmvAmthP7L7xwsdV}#)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #{s -ANAU$bmvAmthP7L7xwsbz}#
                                       #{req -ANAU$bmvAmthP7L7xwsdL}#
                                       #{opt -ANAU$bmvAmthP7L7xwsdM}#
                                       #{rest -ANAU$bmvAmthP7L7xwsdN}#
                                       #{kw -ANAU$bmvAmthP7L7xwsdO}#
                                       #{inits -ANAU$bmvAmthP7L7xwsdP}#
                                       #{vars -ANAU$bmvAmthP7L7xwsdQ}#
                                       #{body -ANAU$bmvAmthP7L7xwsdR}#
                                       #{else* -ANAU$bmvAmthP7L7xwsdW}#)))))))))
                     #{tmp -ANAU$bmvAmthP7L7xwscA}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{clauses -ANAU$bmvAmthP7L7xwsb2}#))))))))
     (#{strip -ANAU$bmvAmthP7L7xwnOR}#
       (lambda (#{x -ANAU$bmvAmthP7L7xwssk}#
                #{w -ANAU$bmvAmthP7L7xwssl}#)
         (if (memq 'top (car #{w -ANAU$bmvAmthP7L7xwssl}#))
           #{x -ANAU$bmvAmthP7L7xwssk}#
           (letrec*
             ((#{f -ANAU$bmvAmthP7L7xwssm}#
                (lambda (#{x -ANAU$bmvAmthP7L7xwssp}#)
                  (if (if (vector? #{x -ANAU$bmvAmthP7L7xwssp}#)
                        (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwssp}#)
                               4)
                          (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwssp}# 0)
                               'syntax-object)
                          #f)
                        #f)
                    (#{strip -ANAU$bmvAmthP7L7xwnOR}#
                      (vector-ref #{x -ANAU$bmvAmthP7L7xwssp}# 1)
                      (vector-ref #{x -ANAU$bmvAmthP7L7xwssp}# 2))
                    (if (pair? #{x -ANAU$bmvAmthP7L7xwssp}#)
                      (let ((#{a -ANAU$bmvAmthP7L7xwss8}#
                              (#{f -ANAU$bmvAmthP7L7xwssm}#
                                (car #{x -ANAU$bmvAmthP7L7xwssp}#)))
                            (#{d -ANAU$bmvAmthP7L7xwss9}#
                              (#{f -ANAU$bmvAmthP7L7xwssm}#
                                (cdr #{x -ANAU$bmvAmthP7L7xwssp}#))))
                        (if (if (eq? #{a -ANAU$bmvAmthP7L7xwss8}#
                                     (car #{x -ANAU$bmvAmthP7L7xwssp}#))
                              (eq? #{d -ANAU$bmvAmthP7L7xwss9}#
                                   (cdr #{x -ANAU$bmvAmthP7L7xwssp}#))
                              #f)
                          #{x -ANAU$bmvAmthP7L7xwssp}#
                          (cons #{a -ANAU$bmvAmthP7L7xwss8}#
                                #{d -ANAU$bmvAmthP7L7xwss9}#)))
                      (if (vector? #{x -ANAU$bmvAmthP7L7xwssp}#)
                        (let ((#{old -ANAU$bmvAmthP7L7xwstA}#
                                (vector->list #{x -ANAU$bmvAmthP7L7xwssp}#)))
                          (let ((#{new -ANAU$bmvAmthP7L7xwstB}#
                                  (map #{f -ANAU$bmvAmthP7L7xwssm}#
                                       #{old -ANAU$bmvAmthP7L7xwstA}#)))
                            (letrec*
                              ((#{lp -ANAU$bmvAmthP7L7xwstC}#
                                 (lambda (#{l1 -ANAU$bmvAmthP7L7xwsuO}#
                                          #{l2 -ANAU$bmvAmthP7L7xwsuP}#)
                                   (if (null? #{l1 -ANAU$bmvAmthP7L7xwsuO}#)
                                     #{x -ANAU$bmvAmthP7L7xwssp}#
                                     (if (eq? (car #{l1 -ANAU$bmvAmthP7L7xwsuO}#)
                                              (car #{l2 -ANAU$bmvAmthP7L7xwsuP}#))
                                       (#{lp -ANAU$bmvAmthP7L7xwstC}#
                                         (cdr #{l1 -ANAU$bmvAmthP7L7xwsuO}#)
                                         (cdr #{l2 -ANAU$bmvAmthP7L7xwsuP}#))
                                       (list->vector
                                         #{new -ANAU$bmvAmthP7L7xwstB}#))))))
                              (#{lp -ANAU$bmvAmthP7L7xwstC}#
                                #{old -ANAU$bmvAmthP7L7xwstA}#
                                #{new -ANAU$bmvAmthP7L7xwstB}#))))
                        #{x -ANAU$bmvAmthP7L7xwssp}#))))))
             (#{f -ANAU$bmvAmthP7L7xwssm}#
               #{x -ANAU$bmvAmthP7L7xwssk}#)))))
     (#{gen-var -ANAU$bmvAmthP7L7xwnOS}#
       (lambda (#{id -ANAU$bmvAmthP7L7xwseC}#)
         (let ((#{id -ANAU$bmvAmthP7L7xwseD}#
                 (if (if (vector? #{id -ANAU$bmvAmthP7L7xwseC}#)
                       (if (= (vector-length #{id -ANAU$bmvAmthP7L7xwseC}#)
                              4)
                         (eq? (vector-ref #{id -ANAU$bmvAmthP7L7xwseC}# 0)
                              'syntax-object)
                         #f)
                       #f)
                   (vector-ref #{id -ANAU$bmvAmthP7L7xwseC}# 1)
                   #{id -ANAU$bmvAmthP7L7xwseC}#)))
           (gensym
             (string-append
               (symbol->string #{id -ANAU$bmvAmthP7L7xwseD}#)
               " "))))))
    (begin
      (set! #{gen-label -ANAU$bmvAmthP7L7xwnNi}#
        (let ((#{i -ANAU$bmvAmthP7L7xwqAX}# 0))
          (lambda ()
            (let ((#{n -ANAU$bmvAmthP7L7xwqAY}#
                    #{i -ANAU$bmvAmthP7L7xwqAX}#))
              (begin
                (set! #{i -ANAU$bmvAmthP7L7xwqAX}#
                  (#{1+}# #{n -ANAU$bmvAmthP7L7xwqAY}#))
                (number->string #{n -ANAU$bmvAmthP7L7xwqAY}# 36))))))
      (set! #{transformer-environment -ANAU$bmvAmthP7L7xwnN2}#
        (make-fluid
          (lambda (#{k -ANAU$bmvAmthP7L7xwpsD}#)
            (error "called outside the dynamic extent of a syntax transformer"))))
      (module-define!
        (current-module)
        'letrec-syntax
        (make-syntax-transformer
          'letrec-syntax
          'local-syntax
          #t))
      (module-define!
        (current-module)
        'let-syntax
        (make-syntax-transformer
          'let-syntax
          'local-syntax
          #f))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'syntax-parameterize
        (lambda (#{e -ANAU$bmvAmthP7L7xwnQL}#
                 #{r -ANAU$bmvAmthP7L7xwnQM}#
                 #{w -ANAU$bmvAmthP7L7xwnQN}#
                 #{s -ANAU$bmvAmthP7L7xwnQO}#
                 #{mod -ANAU$bmvAmthP7L7xwnQP}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwnQR}#
                  ($sc-dispatch
                    #{e -ANAU$bmvAmthP7L7xwnQL}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp -ANAU$bmvAmthP7L7xwnQR}#
                  (@apply
                    (lambda (#{var -ANAU$bmvAmthP7L7xwnQV}#
                             #{val -ANAU$bmvAmthP7L7xwnQW}#
                             #{e1 -ANAU$bmvAmthP7L7xwnQX}#
                             #{e2 -ANAU$bmvAmthP7L7xwnQY}#)
                      (#{valid-bound-ids? -ANAU$bmvAmthP7L7xwnN6}#
                        #{var -ANAU$bmvAmthP7L7xwnQV}#))
                    #{tmp -ANAU$bmvAmthP7L7xwnQR}#)
                  #f)
              (@apply
                (lambda (#{var -ANAU$bmvAmthP7L7xwnRm}#
                         #{val -ANAU$bmvAmthP7L7xwnRn}#
                         #{e1 -ANAU$bmvAmthP7L7xwnRo}#
                         #{e2 -ANAU$bmvAmthP7L7xwnRp}#)
                  (let ((#{names -ANAU$bmvAmthP7L7xwnRq}#
                          (map (lambda (#{x -ANAU$bmvAmthP7L7xwnSc}#)
                                 (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                   #{x -ANAU$bmvAmthP7L7xwnSc}#
                                   #{w -ANAU$bmvAmthP7L7xwnQN}#))
                               #{var -ANAU$bmvAmthP7L7xwnRm}#)))
                    (begin
                      (for-each
                        (lambda (#{id -ANAU$bmvAmthP7L7xwnRr}#
                                 #{n -ANAU$bmvAmthP7L7xwnRs}#)
                          (let ((#{atom-key -ANAU$bmvAmthP7L7xwnRt}#
                                  (car (let ((#{t -ANAU$bmvAmthP7L7xwnR0}#
                                               (assq #{n -ANAU$bmvAmthP7L7xwnRs}#
                                                     #{r -ANAU$bmvAmthP7L7xwnQM}#)))
                                         (if #{t -ANAU$bmvAmthP7L7xwnR0}#
                                           (cdr #{t -ANAU$bmvAmthP7L7xwnR0}#)
                                           (if (symbol?
                                                 #{n -ANAU$bmvAmthP7L7xwnRs}#)
                                             (let ((#{t -ANAU$bmvAmthP7L7xwnR5}#
                                                     (#{get-global-definition-hook -ANAU$bmvAmthP7L7xwnM7}#
                                                       #{n -ANAU$bmvAmthP7L7xwnRs}#
                                                       #{mod -ANAU$bmvAmthP7L7xwnQP}#)))
                                               (if #{t -ANAU$bmvAmthP7L7xwnR5}#
                                                 #{t -ANAU$bmvAmthP7L7xwnR5}#
                                                 '(global)))
                                             '(displaced-lexical)))))))
                            (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwnRt}#
                                      'displaced-lexical)
                              (syntax-violation
                                'syntax-parameterize
                                "identifier out of context"
                                #{e -ANAU$bmvAmthP7L7xwnQL}#
                                (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                  (begin
                                    (if (if (pair? #{id -ANAU$bmvAmthP7L7xwnRr}#)
                                          #{s -ANAU$bmvAmthP7L7xwnQO}#
                                          #f)
                                      (set-source-properties!
                                        #{id -ANAU$bmvAmthP7L7xwnRr}#
                                        #{s -ANAU$bmvAmthP7L7xwnQO}#))
                                    #{id -ANAU$bmvAmthP7L7xwnRr}#)
                                  #{w -ANAU$bmvAmthP7L7xwnQN}#
                                  #{mod -ANAU$bmvAmthP7L7xwnQP}#)))))
                        #{var -ANAU$bmvAmthP7L7xwnRm}#
                        #{names -ANAU$bmvAmthP7L7xwnRq}#)
                      (#{expand-body -ANAU$bmvAmthP7L7xwnOI}#
                        (cons #{e1 -ANAU$bmvAmthP7L7xwnRo}#
                              #{e2 -ANAU$bmvAmthP7L7xwnRp}#)
                        (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                          (begin
                            (if (if (pair? #{e -ANAU$bmvAmthP7L7xwnQL}#)
                                  #{s -ANAU$bmvAmthP7L7xwnQO}#
                                  #f)
                              (set-source-properties!
                                #{e -ANAU$bmvAmthP7L7xwnQL}#
                                #{s -ANAU$bmvAmthP7L7xwnQO}#))
                            #{e -ANAU$bmvAmthP7L7xwnQL}#)
                          #{w -ANAU$bmvAmthP7L7xwnQN}#
                          #{mod -ANAU$bmvAmthP7L7xwnQP}#)
                        (#{extend-env -ANAU$bmvAmthP7L7xwnNa}#
                          #{names -ANAU$bmvAmthP7L7xwnRq}#
                          (let ((#{trans-r -ANAU$bmvAmthP7L7xwnTy}#
                                  (#{macros-only-env -ANAU$bmvAmthP7L7xwnNc}#
                                    #{r -ANAU$bmvAmthP7L7xwnQM}#)))
                            (map (lambda (#{x -ANAU$bmvAmthP7L7xwnTz}#)
                                   (cons 'macro
                                         (#{eval-local-transformer -ANAU$bmvAmthP7L7xwnOK}#
                                           (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                             #{x -ANAU$bmvAmthP7L7xwnTz}#
                                             #{trans-r -ANAU$bmvAmthP7L7xwnTy}#
                                             #{w -ANAU$bmvAmthP7L7xwnQN}#
                                             #{mod -ANAU$bmvAmthP7L7xwnQP}#)
                                           #{mod -ANAU$bmvAmthP7L7xwnQP}#)))
                                 #{val -ANAU$bmvAmthP7L7xwnRn}#))
                          #{r -ANAU$bmvAmthP7L7xwnQM}#)
                        #{w -ANAU$bmvAmthP7L7xwnQN}#
                        #{mod -ANAU$bmvAmthP7L7xwnQP}#))))
                #{tmp -ANAU$bmvAmthP7L7xwnQR}#)
              (syntax-violation
                'syntax-parameterize
                "bad syntax"
                (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                  (begin
                    (if (if (pair? #{e -ANAU$bmvAmthP7L7xwnQL}#)
                          #{s -ANAU$bmvAmthP7L7xwnQO}#
                          #f)
                      (set-source-properties!
                        #{e -ANAU$bmvAmthP7L7xwnQL}#
                        #{s -ANAU$bmvAmthP7L7xwnQO}#))
                    #{e -ANAU$bmvAmthP7L7xwnQL}#)
                  #{w -ANAU$bmvAmthP7L7xwnQN}#
                  #{mod -ANAU$bmvAmthP7L7xwnQP}#))))))
      (module-define!
        (current-module)
        'quote
        (make-syntax-transformer
          'quote
          'core
          (lambda (#{e -ANAU$bmvAmthP7L7xwnXE}#
                   #{r -ANAU$bmvAmthP7L7xwnXF}#
                   #{w -ANAU$bmvAmthP7L7xwnXG}#
                   #{s -ANAU$bmvAmthP7L7xwnXH}#
                   #{mod -ANAU$bmvAmthP7L7xwnXI}#)
            (let ((#{tmp -ANAU$bmvAmthP7L7xwnXK}#
                    ($sc-dispatch
                      #{e -ANAU$bmvAmthP7L7xwnXE}#
                      '(_ any))))
              (if #{tmp -ANAU$bmvAmthP7L7xwnXK}#
                (@apply
                  (lambda (#{e -ANAU$bmvAmthP7L7xwnXN}#)
                    (let ((#{exp -ANAU$bmvAmthP7L7xwnXR}#
                            (#{strip -ANAU$bmvAmthP7L7xwnOR}#
                              #{e -ANAU$bmvAmthP7L7xwnXN}#
                              #{w -ANAU$bmvAmthP7L7xwnXG}#)))
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 1)
                        #{s -ANAU$bmvAmthP7L7xwnXH}#
                        #{exp -ANAU$bmvAmthP7L7xwnXR}#)))
                  #{tmp -ANAU$bmvAmthP7L7xwnXK}#)
                (syntax-violation
                  'quote
                  "bad syntax"
                  (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                    (begin
                      (if (if (pair? #{e -ANAU$bmvAmthP7L7xwnXE}#)
                            #{s -ANAU$bmvAmthP7L7xwnXH}#
                            #f)
                        (set-source-properties!
                          #{e -ANAU$bmvAmthP7L7xwnXE}#
                          #{s -ANAU$bmvAmthP7L7xwnXH}#))
                      #{e -ANAU$bmvAmthP7L7xwnXE}#)
                    #{w -ANAU$bmvAmthP7L7xwnXG}#
                    #{mod -ANAU$bmvAmthP7L7xwnXI}#)))))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'syntax
        (letrec*
          ((#{gen-syntax -ANAU$bmvAmthP7L7xwnat}#
             (lambda (#{src -ANAU$bmvAmthP7L7xwncT}#
                      #{e -ANAU$bmvAmthP7L7xwncU}#
                      #{r -ANAU$bmvAmthP7L7xwncV}#
                      #{maps -ANAU$bmvAmthP7L7xwncW}#
                      #{ellipsis? -ANAU$bmvAmthP7L7xwncX}#
                      #{mod -ANAU$bmvAmthP7L7xwncY}#)
               (if (if (symbol? #{e -ANAU$bmvAmthP7L7xwncU}#)
                     #t
                     (if (if (vector? #{e -ANAU$bmvAmthP7L7xwncU}#)
                           (if (= (vector-length #{e -ANAU$bmvAmthP7L7xwncU}#)
                                  4)
                             (eq? (vector-ref #{e -ANAU$bmvAmthP7L7xwncU}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{e -ANAU$bmvAmthP7L7xwncU}# 1))
                       #f))
                 (let ((#{label -ANAU$bmvAmthP7L7xwncz}#
                         (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                           #{e -ANAU$bmvAmthP7L7xwncU}#
                           '(()))))
                   (let ((#{b -ANAU$bmvAmthP7L7xwnc0}#
                           (let ((#{t -ANAU$bmvAmthP7L7xwnc7}#
                                   (assq #{label -ANAU$bmvAmthP7L7xwncz}#
                                         #{r -ANAU$bmvAmthP7L7xwncV}#)))
                             (if #{t -ANAU$bmvAmthP7L7xwnc7}#
                               (cdr #{t -ANAU$bmvAmthP7L7xwnc7}#)
                               (if (symbol? #{label -ANAU$bmvAmthP7L7xwncz}#)
                                 (let ((#{t -ANAU$bmvAmthP7L7xwndB}#
                                         (#{get-global-definition-hook -ANAU$bmvAmthP7L7xwnM7}#
                                           #{label -ANAU$bmvAmthP7L7xwncz}#
                                           #{mod -ANAU$bmvAmthP7L7xwncY}#)))
                                   (if #{t -ANAU$bmvAmthP7L7xwndB}#
                                     #{t -ANAU$bmvAmthP7L7xwndB}#
                                     '(global)))
                                 '(displaced-lexical))))))
                     (if (eq? (car #{b -ANAU$bmvAmthP7L7xwnc0}#) 'syntax)
                       (call-with-values
                         (lambda ()
                           (let ((#{var.lev -ANAU$bmvAmthP7L7xwndK}#
                                   (cdr #{b -ANAU$bmvAmthP7L7xwnc0}#)))
                             (#{gen-ref -ANAU$bmvAmthP7L7xwnau}#
                               #{src -ANAU$bmvAmthP7L7xwncT}#
                               (car #{var.lev -ANAU$bmvAmthP7L7xwndK}#)
                               (cdr #{var.lev -ANAU$bmvAmthP7L7xwndK}#)
                               #{maps -ANAU$bmvAmthP7L7xwncW}#)))
                         (lambda (#{var -ANAU$bmvAmthP7L7xwndO}#
                                  #{maps -ANAU$bmvAmthP7L7xwndP}#)
                           (values
                             (list 'ref #{var -ANAU$bmvAmthP7L7xwndO}#)
                             #{maps -ANAU$bmvAmthP7L7xwndP}#)))
                       (if (#{ellipsis? -ANAU$bmvAmthP7L7xwncX}#
                             #{e -ANAU$bmvAmthP7L7xwncU}#)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           #{src -ANAU$bmvAmthP7L7xwncT}#)
                         (values
                           (list 'quote #{e -ANAU$bmvAmthP7L7xwncU}#)
                           #{maps -ANAU$bmvAmthP7L7xwncW}#)))))
                 (let ((#{tmp -ANAU$bmvAmthP7L7xwndR}#
                         ($sc-dispatch
                           #{e -ANAU$bmvAmthP7L7xwncU}#
                           '(any any))))
                   (if (if #{tmp -ANAU$bmvAmthP7L7xwndR}#
                         (@apply
                           (lambda (#{dots -ANAU$bmvAmthP7L7xwndV}#
                                    #{e -ANAU$bmvAmthP7L7xwndW}#)
                             (#{ellipsis? -ANAU$bmvAmthP7L7xwncX}#
                               #{dots -ANAU$bmvAmthP7L7xwndV}#))
                           #{tmp -ANAU$bmvAmthP7L7xwndR}#)
                         #f)
                     (@apply
                       (lambda (#{dots -ANAU$bmvAmthP7L7xwndX}#
                                #{e -ANAU$bmvAmthP7L7xwndY}#)
                         (#{gen-syntax -ANAU$bmvAmthP7L7xwnat}#
                           #{src -ANAU$bmvAmthP7L7xwncT}#
                           #{e -ANAU$bmvAmthP7L7xwndY}#
                           #{r -ANAU$bmvAmthP7L7xwncV}#
                           #{maps -ANAU$bmvAmthP7L7xwncW}#
                           (lambda (#{x -ANAU$bmvAmthP7L7xwndZ}#) #f)
                           #{mod -ANAU$bmvAmthP7L7xwncY}#))
                       #{tmp -ANAU$bmvAmthP7L7xwndR}#)
                     (let ((#{tmp -ANAU$bmvAmthP7L7xwnda}#
                             ($sc-dispatch
                               #{e -ANAU$bmvAmthP7L7xwncU}#
                               '(any any . any))))
                       (if (if #{tmp -ANAU$bmvAmthP7L7xwnda}#
                             (@apply
                               (lambda (#{x -ANAU$bmvAmthP7L7xwnde}#
                                        #{dots -ANAU$bmvAmthP7L7xwndf}#
                                        #{y -ANAU$bmvAmthP7L7xwndg}#)
                                 (#{ellipsis? -ANAU$bmvAmthP7L7xwncX}#
                                   #{dots -ANAU$bmvAmthP7L7xwndf}#))
                               #{tmp -ANAU$bmvAmthP7L7xwnda}#)
                             #f)
                         (@apply
                           (lambda (#{x -ANAU$bmvAmthP7L7xwndh}#
                                    #{dots -ANAU$bmvAmthP7L7xwndi}#
                                    #{y -ANAU$bmvAmthP7L7xwndj}#)
                             (letrec*
                               ((#{f -ANAU$bmvAmthP7L7xwndk}#
                                  (lambda (#{y -ANAU$bmvAmthP7L7xwnds}#
                                           #{k -ANAU$bmvAmthP7L7xwndt}#)
                                    (let ((#{tmp -ANAU$bmvAmthP7L7xwndv}#
                                            ($sc-dispatch
                                              #{y -ANAU$bmvAmthP7L7xwnds}#
                                              '(any . any))))
                                      (if (if #{tmp -ANAU$bmvAmthP7L7xwndv}#
                                            (@apply
                                              (lambda (#{dots -ANAU$bmvAmthP7L7xwndz}#
                                                       #{y -ANAU$bmvAmthP7L7xwnd0}#)
                                                (#{ellipsis? -ANAU$bmvAmthP7L7xwncX}#
                                                  #{dots -ANAU$bmvAmthP7L7xwndz}#))
                                              #{tmp -ANAU$bmvAmthP7L7xwndv}#)
                                            #f)
                                        (@apply
                                          (lambda (#{dots -ANAU$bmvAmthP7L7xwnd1}#
                                                   #{y -ANAU$bmvAmthP7L7xwnd2}#)
                                            (#{f -ANAU$bmvAmthP7L7xwndk}#
                                              #{y -ANAU$bmvAmthP7L7xwnd2}#
                                              (lambda (#{maps -ANAU$bmvAmthP7L7xwnd3}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{k -ANAU$bmvAmthP7L7xwndt}#
                                                      (cons '()
                                                            #{maps -ANAU$bmvAmthP7L7xwnd3}#)))
                                                  (lambda (#{x -ANAU$bmvAmthP7L7xwnd4}#
                                                           #{maps -ANAU$bmvAmthP7L7xwnd5}#)
                                                    (if (null? (car #{maps -ANAU$bmvAmthP7L7xwnd5}#))
                                                      (syntax-violation
                                                        'syntax
                                                        "extra ellipsis"
                                                        #{src -ANAU$bmvAmthP7L7xwncT}#)
                                                      (values
                                                        (let ((#{map-env -ANAU$bmvAmthP7L7xwnd9}#
                                                                (car #{maps -ANAU$bmvAmthP7L7xwnd5}#)))
                                                          (list 'apply
                                                                '(primitive
                                                                   append)
                                                                (#{gen-map -ANAU$bmvAmthP7L7xwnaw}#
                                                                  #{x -ANAU$bmvAmthP7L7xwnd4}#
                                                                  #{map-env -ANAU$bmvAmthP7L7xwnd9}#)))
                                                        (cdr #{maps -ANAU$bmvAmthP7L7xwnd5}#))))))))
                                          #{tmp -ANAU$bmvAmthP7L7xwndv}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{gen-syntax -ANAU$bmvAmthP7L7xwnat}#
                                              #{src -ANAU$bmvAmthP7L7xwncT}#
                                              #{y -ANAU$bmvAmthP7L7xwnds}#
                                              #{r -ANAU$bmvAmthP7L7xwncV}#
                                              #{maps -ANAU$bmvAmthP7L7xwncW}#
                                              #{ellipsis? -ANAU$bmvAmthP7L7xwncX}#
                                              #{mod -ANAU$bmvAmthP7L7xwncY}#))
                                          (lambda (#{y -ANAU$bmvAmthP7L7xwneA}#
                                                   #{maps -ANAU$bmvAmthP7L7xwneB}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{k -ANAU$bmvAmthP7L7xwndt}#
                                                  #{maps -ANAU$bmvAmthP7L7xwneB}#))
                                              (lambda (#{x -ANAU$bmvAmthP7L7xwneC}#
                                                       #{maps -ANAU$bmvAmthP7L7xwneD}#)
                                                (values
                                                  (if (equal?
                                                        #{y -ANAU$bmvAmthP7L7xwneA}#
                                                        ''())
                                                    #{x -ANAU$bmvAmthP7L7xwneC}#
                                                    (list 'append
                                                          #{x -ANAU$bmvAmthP7L7xwneC}#
                                                          #{y -ANAU$bmvAmthP7L7xwneA}#))
                                                  #{maps -ANAU$bmvAmthP7L7xwneD}#))))))))))
                               (#{f -ANAU$bmvAmthP7L7xwndk}#
                                 #{y -ANAU$bmvAmthP7L7xwndj}#
                                 (lambda (#{maps -ANAU$bmvAmthP7L7xwndn}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax -ANAU$bmvAmthP7L7xwnat}#
                                         #{src -ANAU$bmvAmthP7L7xwncT}#
                                         #{x -ANAU$bmvAmthP7L7xwndh}#
                                         #{r -ANAU$bmvAmthP7L7xwncV}#
                                         (cons '()
                                               #{maps -ANAU$bmvAmthP7L7xwndn}#)
                                         #{ellipsis? -ANAU$bmvAmthP7L7xwncX}#
                                         #{mod -ANAU$bmvAmthP7L7xwncY}#))
                                     (lambda (#{x -ANAU$bmvAmthP7L7xwndo}#
                                              #{maps -ANAU$bmvAmthP7L7xwndp}#)
                                       (if (null? (car #{maps -ANAU$bmvAmthP7L7xwndp}#))
                                         (syntax-violation
                                           'syntax
                                           "extra ellipsis"
                                           #{src -ANAU$bmvAmthP7L7xwncT}#)
                                         (values
                                           (#{gen-map -ANAU$bmvAmthP7L7xwnaw}#
                                             #{x -ANAU$bmvAmthP7L7xwndo}#
                                             (car #{maps -ANAU$bmvAmthP7L7xwndp}#))
                                           (cdr #{maps -ANAU$bmvAmthP7L7xwndp}#)))))))))
                           #{tmp -ANAU$bmvAmthP7L7xwnda}#)
                         (let ((#{tmp -ANAU$bmvAmthP7L7xwneT}#
                                 ($sc-dispatch
                                   #{e -ANAU$bmvAmthP7L7xwncU}#
                                   '(any . any))))
                           (if #{tmp -ANAU$bmvAmthP7L7xwneT}#
                             (@apply
                               (lambda (#{x -ANAU$bmvAmthP7L7xwneX}#
                                        #{y -ANAU$bmvAmthP7L7xwneY}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax -ANAU$bmvAmthP7L7xwnat}#
                                       #{src -ANAU$bmvAmthP7L7xwncT}#
                                       #{x -ANAU$bmvAmthP7L7xwneX}#
                                       #{r -ANAU$bmvAmthP7L7xwncV}#
                                       #{maps -ANAU$bmvAmthP7L7xwncW}#
                                       #{ellipsis? -ANAU$bmvAmthP7L7xwncX}#
                                       #{mod -ANAU$bmvAmthP7L7xwncY}#))
                                   (lambda (#{x -ANAU$bmvAmthP7L7xwneZ}#
                                            #{maps -ANAU$bmvAmthP7L7xwnea}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{gen-syntax -ANAU$bmvAmthP7L7xwnat}#
                                           #{src -ANAU$bmvAmthP7L7xwncT}#
                                           #{y -ANAU$bmvAmthP7L7xwneY}#
                                           #{r -ANAU$bmvAmthP7L7xwncV}#
                                           #{maps -ANAU$bmvAmthP7L7xwnea}#
                                           #{ellipsis? -ANAU$bmvAmthP7L7xwncX}#
                                           #{mod -ANAU$bmvAmthP7L7xwncY}#))
                                       (lambda (#{y -ANAU$bmvAmthP7L7xwneb}#
                                                #{maps -ANAU$bmvAmthP7L7xwnec}#)
                                         (values
                                           (let ((#{atom-key -ANAU$bmvAmthP7L7xwneh}#
                                                   (car #{y -ANAU$bmvAmthP7L7xwneb}#)))
                                             (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwneh}#
                                                       'quote)
                                               (if (eq? (car #{x -ANAU$bmvAmthP7L7xwneZ}#)
                                                        'quote)
                                                 (list 'quote
                                                       (cons (car (cdr #{x -ANAU$bmvAmthP7L7xwneZ}#))
                                                             (car (cdr #{y -ANAU$bmvAmthP7L7xwneb}#))))
                                                 (if (eq? (car (cdr #{y -ANAU$bmvAmthP7L7xwneb}#))
                                                          '())
                                                   (list 'list
                                                         #{x -ANAU$bmvAmthP7L7xwneZ}#)
                                                   (list 'cons
                                                         #{x -ANAU$bmvAmthP7L7xwneZ}#
                                                         #{y -ANAU$bmvAmthP7L7xwneb}#)))
                                               (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwneh}#
                                                         'list)
                                                 (cons 'list
                                                       (cons #{x -ANAU$bmvAmthP7L7xwneZ}#
                                                             (cdr #{y -ANAU$bmvAmthP7L7xwneb}#)))
                                                 (list 'cons
                                                       #{x -ANAU$bmvAmthP7L7xwneZ}#
                                                       #{y -ANAU$bmvAmthP7L7xwneb}#))))
                                           #{maps -ANAU$bmvAmthP7L7xwnec}#))))))
                               #{tmp -ANAU$bmvAmthP7L7xwneT}#)
                             (let ((#{tmp -ANAU$bmvAmthP7L7xwne$}#
                                     ($sc-dispatch
                                       #{e -ANAU$bmvAmthP7L7xwncU}#
                                       '#(vector (any . each-any)))))
                               (if #{tmp -ANAU$bmvAmthP7L7xwne$}#
                                 (@apply
                                   (lambda (#{e1 -ANAU$bmvAmthP7L7xwnfC}#
                                            #{e2 -ANAU$bmvAmthP7L7xwnfD}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{gen-syntax -ANAU$bmvAmthP7L7xwnat}#
                                           #{src -ANAU$bmvAmthP7L7xwncT}#
                                           (cons #{e1 -ANAU$bmvAmthP7L7xwnfC}#
                                                 #{e2 -ANAU$bmvAmthP7L7xwnfD}#)
                                           #{r -ANAU$bmvAmthP7L7xwncV}#
                                           #{maps -ANAU$bmvAmthP7L7xwncW}#
                                           #{ellipsis? -ANAU$bmvAmthP7L7xwncX}#
                                           #{mod -ANAU$bmvAmthP7L7xwncY}#))
                                       (lambda (#{e -ANAU$bmvAmthP7L7xwnfE}#
                                                #{maps -ANAU$bmvAmthP7L7xwnfF}#)
                                         (values
                                           (if (eq? (car #{e -ANAU$bmvAmthP7L7xwnfE}#)
                                                    'list)
                                             (cons 'vector
                                                   (cdr #{e -ANAU$bmvAmthP7L7xwnfE}#))
                                             (if (eq? (car #{e -ANAU$bmvAmthP7L7xwnfE}#)
                                                      'quote)
                                               (list 'quote
                                                     (list->vector
                                                       (car (cdr #{e -ANAU$bmvAmthP7L7xwnfE}#))))
                                               (list 'list->vector
                                                     #{e -ANAU$bmvAmthP7L7xwnfE}#)))
                                           #{maps -ANAU$bmvAmthP7L7xwnfF}#))))
                                   #{tmp -ANAU$bmvAmthP7L7xwne$}#)
                                 (values
                                   (list 'quote #{e -ANAU$bmvAmthP7L7xwncU}#)
                                   #{maps -ANAU$bmvAmthP7L7xwncW}#))))))))))))
           (#{gen-ref -ANAU$bmvAmthP7L7xwnau}#
             (lambda (#{src -ANAU$bmvAmthP7L7xwnfg}#
                      #{var -ANAU$bmvAmthP7L7xwnfh}#
                      #{level -ANAU$bmvAmthP7L7xwnfi}#
                      #{maps -ANAU$bmvAmthP7L7xwnfj}#)
               (if (= #{level -ANAU$bmvAmthP7L7xwnfi}# 0)
                 (values
                   #{var -ANAU$bmvAmthP7L7xwnfh}#
                   #{maps -ANAU$bmvAmthP7L7xwnfj}#)
                 (if (null? #{maps -ANAU$bmvAmthP7L7xwnfj}#)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     #{src -ANAU$bmvAmthP7L7xwnfg}#)
                   (call-with-values
                     (lambda ()
                       (#{gen-ref -ANAU$bmvAmthP7L7xwnau}#
                         #{src -ANAU$bmvAmthP7L7xwnfg}#
                         #{var -ANAU$bmvAmthP7L7xwnfh}#
                         (#{1-}# #{level -ANAU$bmvAmthP7L7xwnfi}#)
                         (cdr #{maps -ANAU$bmvAmthP7L7xwnfj}#)))
                     (lambda (#{outer-var -ANAU$bmvAmthP7L7xwnfk}#
                              #{outer-maps -ANAU$bmvAmthP7L7xwnfl}#)
                       (let ((#{b -ANAU$bmvAmthP7L7xwnfm}#
                               (assq #{outer-var -ANAU$bmvAmthP7L7xwnfk}#
                                     (car #{maps -ANAU$bmvAmthP7L7xwnfj}#))))
                         (if #{b -ANAU$bmvAmthP7L7xwnfm}#
                           (values
                             (cdr #{b -ANAU$bmvAmthP7L7xwnfm}#)
                             #{maps -ANAU$bmvAmthP7L7xwnfj}#)
                           (let ((#{inner-var -ANAU$bmvAmthP7L7xwnfo}#
                                   (gensym
                                     (string-append
                                       (symbol->string 'tmp)
                                       " "))))
                             (values
                               #{inner-var -ANAU$bmvAmthP7L7xwnfo}#
                               (cons (cons (cons #{outer-var -ANAU$bmvAmthP7L7xwnfk}#
                                                 #{inner-var -ANAU$bmvAmthP7L7xwnfo}#)
                                           (car #{maps -ANAU$bmvAmthP7L7xwnfj}#))
                                     #{outer-maps -ANAU$bmvAmthP7L7xwnfl}#)))))))))))
           (#{gen-map -ANAU$bmvAmthP7L7xwnaw}#
             (lambda (#{e -ANAU$bmvAmthP7L7xwnf2}#
                      #{map-env -ANAU$bmvAmthP7L7xwnf3}#)
               (let ((#{formals -ANAU$bmvAmthP7L7xwnf4}#
                       (map cdr #{map-env -ANAU$bmvAmthP7L7xwnf3}#))
                     (#{actuals -ANAU$bmvAmthP7L7xwnf5}#
                       (map (lambda (#{x -ANAU$bmvAmthP7L7xwnf7}#)
                              (list 'ref (car #{x -ANAU$bmvAmthP7L7xwnf7}#)))
                            #{map-env -ANAU$bmvAmthP7L7xwnf3}#)))
                 (if (eq? (car #{e -ANAU$bmvAmthP7L7xwnf2}#) 'ref)
                   (car #{actuals -ANAU$bmvAmthP7L7xwnf5}#)
                   (if (and-map
                         (lambda (#{x -ANAU$bmvAmthP7L7xwnf8}#)
                           (if (eq? (car #{x -ANAU$bmvAmthP7L7xwnf8}#) 'ref)
                             (memq (car (cdr #{x -ANAU$bmvAmthP7L7xwnf8}#))
                                   #{formals -ANAU$bmvAmthP7L7xwnf4}#)
                             #f))
                         (cdr #{e -ANAU$bmvAmthP7L7xwnf2}#))
                     (cons 'map
                           (cons (list 'primitive
                                       (car #{e -ANAU$bmvAmthP7L7xwnf2}#))
                                 (map (let ((#{r -ANAU$bmvAmthP7L7xwnf$}#
                                              (map cons
                                                   #{formals -ANAU$bmvAmthP7L7xwnf4}#
                                                   #{actuals -ANAU$bmvAmthP7L7xwnf5}#)))
                                        (lambda (#{x -ANAU$bmvAmthP7L7xwnf@}#)
                                          (cdr (assq (car (cdr #{x -ANAU$bmvAmthP7L7xwnf@}#))
                                                     #{r -ANAU$bmvAmthP7L7xwnf$}#))))
                                      (cdr #{e -ANAU$bmvAmthP7L7xwnf2}#))))
                     (cons 'map
                           (cons (list 'lambda
                                       #{formals -ANAU$bmvAmthP7L7xwnf4}#
                                       #{e -ANAU$bmvAmthP7L7xwnf2}#)
                                 #{actuals -ANAU$bmvAmthP7L7xwnf5}#)))))))
           (#{regen -ANAU$bmvAmthP7L7xwna0}#
             (lambda (#{x -ANAU$bmvAmthP7L7xwngB}#)
               (let ((#{atom-key -ANAU$bmvAmthP7L7xwngC}#
                       (car #{x -ANAU$bmvAmthP7L7xwngB}#)))
                 (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwngC}# 'ref)
                   (let ((#{name -ANAU$bmvAmthP7L7xwngM}#
                           (car (cdr #{x -ANAU$bmvAmthP7L7xwngB}#)))
                         (#{var -ANAU$bmvAmthP7L7xwngN}#
                           (car (cdr #{x -ANAU$bmvAmthP7L7xwngB}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 3)
                       #f
                       #{name -ANAU$bmvAmthP7L7xwngM}#
                       #{var -ANAU$bmvAmthP7L7xwngN}#))
                   (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwngC}#
                             'primitive)
                     (let ((#{name -ANAU$bmvAmthP7L7xwngZ}#
                             (car (cdr #{x -ANAU$bmvAmthP7L7xwngB}#))))
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           #{name -ANAU$bmvAmthP7L7xwngZ}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           #{name -ANAU$bmvAmthP7L7xwngZ}#
                           #f)))
                     (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwngC}# 'quote)
                       (let ((#{exp -ANAU$bmvAmthP7L7xwngr}#
                               (car (cdr #{x -ANAU$bmvAmthP7L7xwngB}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 1)
                           #f
                           #{exp -ANAU$bmvAmthP7L7xwngr}#))
                       (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwngC}#
                                 'lambda)
                         (if (list? (car (cdr #{x -ANAU$bmvAmthP7L7xwngB}#)))
                           (let ((#{req -ANAU$bmvAmthP7L7xwng2}#
                                   (car (cdr #{x -ANAU$bmvAmthP7L7xwngB}#)))
                                 (#{vars -ANAU$bmvAmthP7L7xwng4}#
                                   (car (cdr #{x -ANAU$bmvAmthP7L7xwngB}#)))
                                 (#{exp -ANAU$bmvAmthP7L7xwng6}#
                                   (#{regen -ANAU$bmvAmthP7L7xwna0}#
                                     (car (cdr (cdr #{x -ANAU$bmvAmthP7L7xwngB}#))))))
                             (let ((#{body -ANAU$bmvAmthP7L7xwng@}#
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       #{req -ANAU$bmvAmthP7L7xwng2}#
                                       #f
                                       #f
                                       #f
                                       '()
                                       #{vars -ANAU$bmvAmthP7L7xwng4}#
                                       #{exp -ANAU$bmvAmthP7L7xwng6}#
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 #{body -ANAU$bmvAmthP7L7xwng@}#)))
                           (error "how did we get here"
                                  #{x -ANAU$bmvAmthP7L7xwngB}#))
                         (let ((#{fun-exp -ANAU$bmvAmthP7L7xwnhP}#
                                 (let ((#{name -ANAU$bmvAmthP7L7xwnhY}#
                                         (car #{x -ANAU$bmvAmthP7L7xwngB}#)))
                                   (if (equal?
                                         (module-name (current-module))
                                         '(guile))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 7)
                                       #f
                                       #{name -ANAU$bmvAmthP7L7xwnhY}#)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 5)
                                       #f
                                       '(guile)
                                       #{name -ANAU$bmvAmthP7L7xwnhY}#
                                       #f))))
                               (#{arg-exps -ANAU$bmvAmthP7L7xwnhQ}#
                                 (map #{regen -ANAU$bmvAmthP7L7xwna0}#
                                      (cdr #{x -ANAU$bmvAmthP7L7xwngB}#))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 11)
                             #f
                             #{fun-exp -ANAU$bmvAmthP7L7xwnhP}#
                             #{arg-exps -ANAU$bmvAmthP7L7xwnhQ}#))))))))))
          (lambda (#{e -ANAU$bmvAmthP7L7xwna1}#
                   #{r -ANAU$bmvAmthP7L7xwna2}#
                   #{w -ANAU$bmvAmthP7L7xwna3}#
                   #{s -ANAU$bmvAmthP7L7xwna4}#
                   #{mod -ANAU$bmvAmthP7L7xwna5}#)
            (let ((#{e -ANAU$bmvAmthP7L7xwna6}#
                    (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                      (begin
                        (if (if (pair? #{e -ANAU$bmvAmthP7L7xwna1}#)
                              #{s -ANAU$bmvAmthP7L7xwna4}#
                              #f)
                          (set-source-properties!
                            #{e -ANAU$bmvAmthP7L7xwna1}#
                            #{s -ANAU$bmvAmthP7L7xwna4}#))
                        #{e -ANAU$bmvAmthP7L7xwna1}#)
                      #{w -ANAU$bmvAmthP7L7xwna3}#
                      #{mod -ANAU$bmvAmthP7L7xwna5}#)))
              (let ((#{tmp -ANAU$bmvAmthP7L7xwna8}#
                      ($sc-dispatch
                        #{e -ANAU$bmvAmthP7L7xwna6}#
                        '(_ any))))
                (if #{tmp -ANAU$bmvAmthP7L7xwna8}#
                  (@apply
                    (lambda (#{x -ANAU$bmvAmthP7L7xwnbV}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax -ANAU$bmvAmthP7L7xwnat}#
                            #{e -ANAU$bmvAmthP7L7xwna6}#
                            #{x -ANAU$bmvAmthP7L7xwnbV}#
                            #{r -ANAU$bmvAmthP7L7xwna2}#
                            '()
                            #{ellipsis? -ANAU$bmvAmthP7L7xwnOM}#
                            #{mod -ANAU$bmvAmthP7L7xwna5}#))
                        (lambda (#{e -ANAU$bmvAmthP7L7xwncL}#
                                 #{maps -ANAU$bmvAmthP7L7xwncM}#)
                          (#{regen -ANAU$bmvAmthP7L7xwna0}#
                            #{e -ANAU$bmvAmthP7L7xwncL}#))))
                    #{tmp -ANAU$bmvAmthP7L7xwna8}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e -ANAU$bmvAmthP7L7xwna6}#)))))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'lambda
        (lambda (#{e -ANAU$bmvAmthP7L7xwnkV}#
                 #{r -ANAU$bmvAmthP7L7xwnkW}#
                 #{w -ANAU$bmvAmthP7L7xwnkX}#
                 #{s -ANAU$bmvAmthP7L7xwnkY}#
                 #{mod -ANAU$bmvAmthP7L7xwnkZ}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwnkb}#
                  ($sc-dispatch
                    #{e -ANAU$bmvAmthP7L7xwnkV}#
                    '(_ any any . each-any))))
            (if #{tmp -ANAU$bmvAmthP7L7xwnkb}#
              (@apply
                (lambda (#{args -ANAU$bmvAmthP7L7xwnkf}#
                         #{e1 -ANAU$bmvAmthP7L7xwnkg}#
                         #{e2 -ANAU$bmvAmthP7L7xwnkh}#)
                  (call-with-values
                    (lambda ()
                      (#{lambda-formals -ANAU$bmvAmthP7L7xwnON}#
                        #{args -ANAU$bmvAmthP7L7xwnkf}#))
                    (lambda (#{req -ANAU$bmvAmthP7L7xwnkk}#
                             #{opt -ANAU$bmvAmthP7L7xwnkl}#
                             #{rest -ANAU$bmvAmthP7L7xwnkm}#
                             #{kw -ANAU$bmvAmthP7L7xwnkn}#)
                      (letrec*
                        ((#{lp -ANAU$bmvAmthP7L7xwnko}#
                           (lambda (#{body -ANAU$bmvAmthP7L7xwnkr}#
                                    #{meta -ANAU$bmvAmthP7L7xwnks}#)
                             (let ((#{tmp -ANAU$bmvAmthP7L7xwnku}#
                                     ($sc-dispatch
                                       #{body -ANAU$bmvAmthP7L7xwnkr}#
                                       '(any any . each-any))))
                               (if (if #{tmp -ANAU$bmvAmthP7L7xwnku}#
                                     (@apply
                                       (lambda (#{docstring -ANAU$bmvAmthP7L7xwnky}#
                                                #{e1 -ANAU$bmvAmthP7L7xwnkz}#
                                                #{e2 -ANAU$bmvAmthP7L7xwnk0}#)
                                         (string?
                                           (syntax->datum
                                             #{docstring -ANAU$bmvAmthP7L7xwnky}#)))
                                       #{tmp -ANAU$bmvAmthP7L7xwnku}#)
                                     #f)
                                 (@apply
                                   (lambda (#{docstring -ANAU$bmvAmthP7L7xwnk1}#
                                            #{e1 -ANAU$bmvAmthP7L7xwnk2}#
                                            #{e2 -ANAU$bmvAmthP7L7xwnk3}#)
                                     (#{lp -ANAU$bmvAmthP7L7xwnko}#
                                       (cons #{e1 -ANAU$bmvAmthP7L7xwnk2}#
                                             #{e2 -ANAU$bmvAmthP7L7xwnk3}#)
                                       (append
                                         #{meta -ANAU$bmvAmthP7L7xwnks}#
                                         (list (cons 'documentation
                                                     (syntax->datum
                                                       #{docstring -ANAU$bmvAmthP7L7xwnk1}#))))))
                                   #{tmp -ANAU$bmvAmthP7L7xwnku}#)
                                 (let ((#{tmp -ANAU$bmvAmthP7L7xwnk4}#
                                         ($sc-dispatch
                                           #{body -ANAU$bmvAmthP7L7xwnkr}#
                                           '(#(vector #(each (any . any)))
                                             any
                                             .
                                             each-any))))
                                   (if #{tmp -ANAU$bmvAmthP7L7xwnk4}#
                                     (@apply
                                       (lambda (#{k -ANAU$bmvAmthP7L7xwnk8}#
                                                #{v -ANAU$bmvAmthP7L7xwnk9}#
                                                #{e1 -ANAU$bmvAmthP7L7xwnk$}#
                                                #{e2 -ANAU$bmvAmthP7L7xwnk@}#)
                                         (#{lp -ANAU$bmvAmthP7L7xwnko}#
                                           (cons #{e1 -ANAU$bmvAmthP7L7xwnk$}#
                                                 #{e2 -ANAU$bmvAmthP7L7xwnk@}#)
                                           (append
                                             #{meta -ANAU$bmvAmthP7L7xwnks}#
                                             (syntax->datum
                                               (map cons
                                                    #{k -ANAU$bmvAmthP7L7xwnk8}#
                                                    #{v -ANAU$bmvAmthP7L7xwnk9}#)))))
                                       #{tmp -ANAU$bmvAmthP7L7xwnk4}#)
                                     (#{expand-simple-lambda -ANAU$bmvAmthP7L7xwnOO}#
                                       #{e -ANAU$bmvAmthP7L7xwnkV}#
                                       #{r -ANAU$bmvAmthP7L7xwnkW}#
                                       #{w -ANAU$bmvAmthP7L7xwnkX}#
                                       #{s -ANAU$bmvAmthP7L7xwnkY}#
                                       #{mod -ANAU$bmvAmthP7L7xwnkZ}#
                                       #{req -ANAU$bmvAmthP7L7xwnkk}#
                                       #{rest -ANAU$bmvAmthP7L7xwnkm}#
                                       #{meta -ANAU$bmvAmthP7L7xwnks}#
                                       #{body -ANAU$bmvAmthP7L7xwnkr}#))))))))
                        (#{lp -ANAU$bmvAmthP7L7xwnko}#
                          (cons #{e1 -ANAU$bmvAmthP7L7xwnkg}#
                                #{e2 -ANAU$bmvAmthP7L7xwnkh}#)
                          '())))))
                #{tmp -ANAU$bmvAmthP7L7xwnkb}#)
              (syntax-violation
                'lambda
                "bad lambda"
                #{e -ANAU$bmvAmthP7L7xwnkV}#)))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'lambda*
        (lambda (#{e -ANAU$bmvAmthP7L7xwnpc}#
                 #{r -ANAU$bmvAmthP7L7xwnpd}#
                 #{w -ANAU$bmvAmthP7L7xwnpe}#
                 #{s -ANAU$bmvAmthP7L7xwnpf}#
                 #{mod -ANAU$bmvAmthP7L7xwnpg}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwnpi}#
                  ($sc-dispatch
                    #{e -ANAU$bmvAmthP7L7xwnpc}#
                    '(_ any any . each-any))))
            (if #{tmp -ANAU$bmvAmthP7L7xwnpi}#
              (@apply
                (lambda (#{args -ANAU$bmvAmthP7L7xwnpm}#
                         #{e1 -ANAU$bmvAmthP7L7xwnpn}#
                         #{e2 -ANAU$bmvAmthP7L7xwnpo}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case -ANAU$bmvAmthP7L7xwnOQ}#
                        #{e -ANAU$bmvAmthP7L7xwnpc}#
                        #{r -ANAU$bmvAmthP7L7xwnpd}#
                        #{w -ANAU$bmvAmthP7L7xwnpe}#
                        #{s -ANAU$bmvAmthP7L7xwnpf}#
                        #{mod -ANAU$bmvAmthP7L7xwnpg}#
                        #{lambda*-formals -ANAU$bmvAmthP7L7xwnOP}#
                        (list (cons #{args -ANAU$bmvAmthP7L7xwnpm}#
                                    (cons #{e1 -ANAU$bmvAmthP7L7xwnpn}#
                                          #{e2 -ANAU$bmvAmthP7L7xwnpo}#)))))
                    (lambda (#{meta -ANAU$bmvAmthP7L7xwnpr}#
                             #{lcase -ANAU$bmvAmthP7L7xwnps}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s -ANAU$bmvAmthP7L7xwnpf}#
                        #{meta -ANAU$bmvAmthP7L7xwnpr}#
                        #{lcase -ANAU$bmvAmthP7L7xwnps}#))))
                #{tmp -ANAU$bmvAmthP7L7xwnpi}#)
              (syntax-violation
                'lambda
                "bad lambda*"
                #{e -ANAU$bmvAmthP7L7xwnpc}#)))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'case-lambda
        (lambda (#{e -ANAU$bmvAmthP7L7xwnsW}#
                 #{r -ANAU$bmvAmthP7L7xwnsX}#
                 #{w -ANAU$bmvAmthP7L7xwnsY}#
                 #{s -ANAU$bmvAmthP7L7xwnsZ}#
                 #{mod -ANAU$bmvAmthP7L7xwnsa}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwnsc}#
                  ($sc-dispatch
                    #{e -ANAU$bmvAmthP7L7xwnsW}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp -ANAU$bmvAmthP7L7xwnsc}#
              (@apply
                (lambda (#{args -ANAU$bmvAmthP7L7xwnsg}#
                         #{e1 -ANAU$bmvAmthP7L7xwnsh}#
                         #{e2 -ANAU$bmvAmthP7L7xwnsi}#
                         #{args* -ANAU$bmvAmthP7L7xwnsj}#
                         #{e1* -ANAU$bmvAmthP7L7xwnsk}#
                         #{e2* -ANAU$bmvAmthP7L7xwnsl}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case -ANAU$bmvAmthP7L7xwnOQ}#
                        #{e -ANAU$bmvAmthP7L7xwnsW}#
                        #{r -ANAU$bmvAmthP7L7xwnsX}#
                        #{w -ANAU$bmvAmthP7L7xwnsY}#
                        #{s -ANAU$bmvAmthP7L7xwnsZ}#
                        #{mod -ANAU$bmvAmthP7L7xwnsa}#
                        #{lambda-formals -ANAU$bmvAmthP7L7xwnON}#
                        (cons (cons #{args -ANAU$bmvAmthP7L7xwnsg}#
                                    (cons #{e1 -ANAU$bmvAmthP7L7xwnsh}#
                                          #{e2 -ANAU$bmvAmthP7L7xwnsi}#))
                              (map (lambda (#{tmp -ANAU$bmvAmthP7L7xwnCS -ANAU$bmvAmthP7L7xwnso}#
                                            #{tmp -ANAU$bmvAmthP7L7xwnCR -ANAU$bmvAmthP7L7xwnsp}#
                                            #{tmp -ANAU$bmvAmthP7L7xwnCQ -ANAU$bmvAmthP7L7xwnsq}#)
                                     (cons #{tmp -ANAU$bmvAmthP7L7xwnCQ -ANAU$bmvAmthP7L7xwnsq}#
                                           (cons #{tmp -ANAU$bmvAmthP7L7xwnCR -ANAU$bmvAmthP7L7xwnsp}#
                                                 #{tmp -ANAU$bmvAmthP7L7xwnCS -ANAU$bmvAmthP7L7xwnso}#)))
                                   #{e2* -ANAU$bmvAmthP7L7xwnsl}#
                                   #{e1* -ANAU$bmvAmthP7L7xwnsk}#
                                   #{args* -ANAU$bmvAmthP7L7xwnsj}#))))
                    (lambda (#{meta -ANAU$bmvAmthP7L7xwnsr}#
                             #{lcase -ANAU$bmvAmthP7L7xwnss}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s -ANAU$bmvAmthP7L7xwnsZ}#
                        #{meta -ANAU$bmvAmthP7L7xwnsr}#
                        #{lcase -ANAU$bmvAmthP7L7xwnss}#))))
                #{tmp -ANAU$bmvAmthP7L7xwnsc}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                #{e -ANAU$bmvAmthP7L7xwnsW}#)))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'case-lambda*
        (lambda (#{e -ANAU$bmvAmthP7L7xwnvO}#
                 #{r -ANAU$bmvAmthP7L7xwnvP}#
                 #{w -ANAU$bmvAmthP7L7xwnvQ}#
                 #{s -ANAU$bmvAmthP7L7xwnvR}#
                 #{mod -ANAU$bmvAmthP7L7xwnvS}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwnvU}#
                  ($sc-dispatch
                    #{e -ANAU$bmvAmthP7L7xwnvO}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp -ANAU$bmvAmthP7L7xwnvU}#
              (@apply
                (lambda (#{args -ANAU$bmvAmthP7L7xwnvY}#
                         #{e1 -ANAU$bmvAmthP7L7xwnvZ}#
                         #{e2 -ANAU$bmvAmthP7L7xwnva}#
                         #{args* -ANAU$bmvAmthP7L7xwnvb}#
                         #{e1* -ANAU$bmvAmthP7L7xwnvc}#
                         #{e2* -ANAU$bmvAmthP7L7xwnvd}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case -ANAU$bmvAmthP7L7xwnOQ}#
                        #{e -ANAU$bmvAmthP7L7xwnvO}#
                        #{r -ANAU$bmvAmthP7L7xwnvP}#
                        #{w -ANAU$bmvAmthP7L7xwnvQ}#
                        #{s -ANAU$bmvAmthP7L7xwnvR}#
                        #{mod -ANAU$bmvAmthP7L7xwnvS}#
                        #{lambda*-formals -ANAU$bmvAmthP7L7xwnOP}#
                        (cons (cons #{args -ANAU$bmvAmthP7L7xwnvY}#
                                    (cons #{e1 -ANAU$bmvAmthP7L7xwnvZ}#
                                          #{e2 -ANAU$bmvAmthP7L7xwnva}#))
                              (map (lambda (#{tmp -ANAU$bmvAmthP7L7xwnCn -ANAU$bmvAmthP7L7xwnvg}#
                                            #{tmp -ANAU$bmvAmthP7L7xwnCm -ANAU$bmvAmthP7L7xwnvh}#
                                            #{tmp -ANAU$bmvAmthP7L7xwnCl -ANAU$bmvAmthP7L7xwnvi}#)
                                     (cons #{tmp -ANAU$bmvAmthP7L7xwnCl -ANAU$bmvAmthP7L7xwnvi}#
                                           (cons #{tmp -ANAU$bmvAmthP7L7xwnCm -ANAU$bmvAmthP7L7xwnvh}#
                                                 #{tmp -ANAU$bmvAmthP7L7xwnCn -ANAU$bmvAmthP7L7xwnvg}#)))
                                   #{e2* -ANAU$bmvAmthP7L7xwnvd}#
                                   #{e1* -ANAU$bmvAmthP7L7xwnvc}#
                                   #{args* -ANAU$bmvAmthP7L7xwnvb}#))))
                    (lambda (#{meta -ANAU$bmvAmthP7L7xwnvj}#
                             #{lcase -ANAU$bmvAmthP7L7xwnvk}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s -ANAU$bmvAmthP7L7xwnvR}#
                        #{meta -ANAU$bmvAmthP7L7xwnvj}#
                        #{lcase -ANAU$bmvAmthP7L7xwnvk}#))))
                #{tmp -ANAU$bmvAmthP7L7xwnvU}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                #{e -ANAU$bmvAmthP7L7xwnvO}#)))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'let
        (letrec*
          ((#{expand-let -ANAU$bmvAmthP7L7xwnyj}#
             (lambda (#{e -ANAU$bmvAmthP7L7xwn04}#
                      #{r -ANAU$bmvAmthP7L7xwn05}#
                      #{w -ANAU$bmvAmthP7L7xwn06}#
                      #{s -ANAU$bmvAmthP7L7xwn07}#
                      #{mod -ANAU$bmvAmthP7L7xwn08}#
                      #{constructor -ANAU$bmvAmthP7L7xwn09}#
                      #{ids -ANAU$bmvAmthP7L7xwn0$}#
                      #{vals -ANAU$bmvAmthP7L7xwn0@}#
                      #{exps -ANAU$bmvAmthP7L7xwn1A}#)
               (if (not (#{valid-bound-ids? -ANAU$bmvAmthP7L7xwnN6}#
                          #{ids -ANAU$bmvAmthP7L7xwn0$}#))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   #{e -ANAU$bmvAmthP7L7xwn04}#)
                 (let ((#{labels -ANAU$bmvAmthP7L7xwn2O}#
                         (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                           #{ids -ANAU$bmvAmthP7L7xwn0$}#))
                       (#{new-vars -ANAU$bmvAmthP7L7xwn2P}#
                         (map #{gen-var -ANAU$bmvAmthP7L7xwnOS}#
                              #{ids -ANAU$bmvAmthP7L7xwn0$}#)))
                   (let ((#{nw -ANAU$bmvAmthP7L7xwn2Q}#
                           (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                             #{ids -ANAU$bmvAmthP7L7xwn0$}#
                             #{labels -ANAU$bmvAmthP7L7xwn2O}#
                             #{w -ANAU$bmvAmthP7L7xwn06}#))
                         (#{nr -ANAU$bmvAmthP7L7xwn2R}#
                           (#{extend-var-env -ANAU$bmvAmthP7L7xwnNb}#
                             #{labels -ANAU$bmvAmthP7L7xwn2O}#
                             #{new-vars -ANAU$bmvAmthP7L7xwn2P}#
                             #{r -ANAU$bmvAmthP7L7xwn05}#)))
                     (#{constructor -ANAU$bmvAmthP7L7xwn09}#
                       #{s -ANAU$bmvAmthP7L7xwn07}#
                       (map syntax->datum
                            #{ids -ANAU$bmvAmthP7L7xwn0$}#)
                       #{new-vars -ANAU$bmvAmthP7L7xwn2P}#
                       (map (lambda (#{x -ANAU$bmvAmthP7L7xwn2i}#)
                              (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                #{x -ANAU$bmvAmthP7L7xwn2i}#
                                #{r -ANAU$bmvAmthP7L7xwn05}#
                                #{w -ANAU$bmvAmthP7L7xwn06}#
                                #{mod -ANAU$bmvAmthP7L7xwn08}#))
                            #{vals -ANAU$bmvAmthP7L7xwn0@}#)
                       (#{expand-body -ANAU$bmvAmthP7L7xwnOI}#
                         #{exps -ANAU$bmvAmthP7L7xwn1A}#
                         (#{source-wrap -ANAU$bmvAmthP7L7xwnN$}#
                           #{e -ANAU$bmvAmthP7L7xwn04}#
                           #{nw -ANAU$bmvAmthP7L7xwn2Q}#
                           #{s -ANAU$bmvAmthP7L7xwn07}#
                           #{mod -ANAU$bmvAmthP7L7xwn08}#)
                         #{nr -ANAU$bmvAmthP7L7xwn2R}#
                         #{nw -ANAU$bmvAmthP7L7xwn2Q}#
                         #{mod -ANAU$bmvAmthP7L7xwn08}#))))))))
          (lambda (#{e -ANAU$bmvAmthP7L7xwnyk}#
                   #{r -ANAU$bmvAmthP7L7xwnyl}#
                   #{w -ANAU$bmvAmthP7L7xwnym}#
                   #{s -ANAU$bmvAmthP7L7xwnyn}#
                   #{mod -ANAU$bmvAmthP7L7xwnyo}#)
            (let ((#{tmp -ANAU$bmvAmthP7L7xwnyq}#
                    ($sc-dispatch
                      #{e -ANAU$bmvAmthP7L7xwnyk}#
                      '(_ #(each (any any)) any . each-any))))
              (if (if #{tmp -ANAU$bmvAmthP7L7xwnyq}#
                    (@apply
                      (lambda (#{id -ANAU$bmvAmthP7L7xwnyu}#
                               #{val -ANAU$bmvAmthP7L7xwnyv}#
                               #{e1 -ANAU$bmvAmthP7L7xwnyw}#
                               #{e2 -ANAU$bmvAmthP7L7xwnyx}#)
                        (and-map
                          #{id? -ANAU$bmvAmthP7L7xwnNg}#
                          #{id -ANAU$bmvAmthP7L7xwnyu}#))
                      #{tmp -ANAU$bmvAmthP7L7xwnyq}#)
                    #f)
                (@apply
                  (lambda (#{id -ANAU$bmvAmthP7L7xwnzB}#
                           #{val -ANAU$bmvAmthP7L7xwnzC}#
                           #{e1 -ANAU$bmvAmthP7L7xwnzD}#
                           #{e2 -ANAU$bmvAmthP7L7xwnzE}#)
                    (#{expand-let -ANAU$bmvAmthP7L7xwnyj}#
                      #{e -ANAU$bmvAmthP7L7xwnyk}#
                      #{r -ANAU$bmvAmthP7L7xwnyl}#
                      #{w -ANAU$bmvAmthP7L7xwnym}#
                      #{s -ANAU$bmvAmthP7L7xwnyn}#
                      #{mod -ANAU$bmvAmthP7L7xwnyo}#
                      #{build-let -ANAU$bmvAmthP7L7xwnNO}#
                      #{id -ANAU$bmvAmthP7L7xwnzB}#
                      #{val -ANAU$bmvAmthP7L7xwnzC}#
                      (cons #{e1 -ANAU$bmvAmthP7L7xwnzD}#
                            #{e2 -ANAU$bmvAmthP7L7xwnzE}#)))
                  #{tmp -ANAU$bmvAmthP7L7xwnyq}#)
                (let ((#{tmp -ANAU$bmvAmthP7L7xwnzi}#
                        ($sc-dispatch
                          #{e -ANAU$bmvAmthP7L7xwnyk}#
                          '(_ any #(each (any any)) any . each-any))))
                  (if (if #{tmp -ANAU$bmvAmthP7L7xwnzi}#
                        (@apply
                          (lambda (#{f -ANAU$bmvAmthP7L7xwnzm}#
                                   #{id -ANAU$bmvAmthP7L7xwnzn}#
                                   #{val -ANAU$bmvAmthP7L7xwnzo}#
                                   #{e1 -ANAU$bmvAmthP7L7xwnzp}#
                                   #{e2 -ANAU$bmvAmthP7L7xwnzq}#)
                            (if (if (symbol? #{f -ANAU$bmvAmthP7L7xwnzm}#)
                                  #t
                                  (if (if (vector?
                                            #{f -ANAU$bmvAmthP7L7xwnzm}#)
                                        (if (= (vector-length
                                                 #{f -ANAU$bmvAmthP7L7xwnzm}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{f -ANAU$bmvAmthP7L7xwnzm}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{f -ANAU$bmvAmthP7L7xwnzm}#
                                        1))
                                    #f))
                              (and-map
                                #{id? -ANAU$bmvAmthP7L7xwnNg}#
                                #{id -ANAU$bmvAmthP7L7xwnzn}#)
                              #f))
                          #{tmp -ANAU$bmvAmthP7L7xwnzi}#)
                        #f)
                    (@apply
                      (lambda (#{f -ANAU$bmvAmthP7L7xwn0U}#
                               #{id -ANAU$bmvAmthP7L7xwn0V}#
                               #{val -ANAU$bmvAmthP7L7xwn0W}#
                               #{e1 -ANAU$bmvAmthP7L7xwn0X}#
                               #{e2 -ANAU$bmvAmthP7L7xwn0Y}#)
                        (#{expand-let -ANAU$bmvAmthP7L7xwnyj}#
                          #{e -ANAU$bmvAmthP7L7xwnyk}#
                          #{r -ANAU$bmvAmthP7L7xwnyl}#
                          #{w -ANAU$bmvAmthP7L7xwnym}#
                          #{s -ANAU$bmvAmthP7L7xwnyn}#
                          #{mod -ANAU$bmvAmthP7L7xwnyo}#
                          #{build-named-let -ANAU$bmvAmthP7L7xwnNP}#
                          (cons #{f -ANAU$bmvAmthP7L7xwn0U}#
                                #{id -ANAU$bmvAmthP7L7xwn0V}#)
                          #{val -ANAU$bmvAmthP7L7xwn0W}#
                          (cons #{e1 -ANAU$bmvAmthP7L7xwn0X}#
                                #{e2 -ANAU$bmvAmthP7L7xwn0Y}#)))
                      #{tmp -ANAU$bmvAmthP7L7xwnzi}#)
                    (syntax-violation
                      'let
                      "bad let"
                      (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                        (begin
                          (if (if (pair? #{e -ANAU$bmvAmthP7L7xwnyk}#)
                                #{s -ANAU$bmvAmthP7L7xwnyn}#
                                #f)
                            (set-source-properties!
                              #{e -ANAU$bmvAmthP7L7xwnyk}#
                              #{s -ANAU$bmvAmthP7L7xwnyn}#))
                          #{e -ANAU$bmvAmthP7L7xwnyk}#)
                        #{w -ANAU$bmvAmthP7L7xwnym}#
                        #{mod -ANAU$bmvAmthP7L7xwnyo}#)))))))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'letrec
        (lambda (#{e -ANAU$bmvAmthP7L7xwn8w}#
                 #{r -ANAU$bmvAmthP7L7xwn8x}#
                 #{w -ANAU$bmvAmthP7L7xwn8y}#
                 #{s -ANAU$bmvAmthP7L7xwn8z}#
                 #{mod -ANAU$bmvAmthP7L7xwn80}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwn82}#
                  ($sc-dispatch
                    #{e -ANAU$bmvAmthP7L7xwn8w}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp -ANAU$bmvAmthP7L7xwn82}#
                  (@apply
                    (lambda (#{id -ANAU$bmvAmthP7L7xwn86}#
                             #{val -ANAU$bmvAmthP7L7xwn87}#
                             #{e1 -ANAU$bmvAmthP7L7xwn88}#
                             #{e2 -ANAU$bmvAmthP7L7xwn89}#)
                      (and-map
                        #{id? -ANAU$bmvAmthP7L7xwnNg}#
                        #{id -ANAU$bmvAmthP7L7xwn86}#))
                    #{tmp -ANAU$bmvAmthP7L7xwn82}#)
                  #f)
              (@apply
                (lambda (#{id -ANAU$bmvAmthP7L7xwn9N}#
                         #{val -ANAU$bmvAmthP7L7xwn9O}#
                         #{e1 -ANAU$bmvAmthP7L7xwn9P}#
                         #{e2 -ANAU$bmvAmthP7L7xwn9Q}#)
                  (if (not (#{valid-bound-ids? -ANAU$bmvAmthP7L7xwnN6}#
                             #{id -ANAU$bmvAmthP7L7xwn9N}#))
                    (syntax-violation
                      'letrec
                      "duplicate bound variable"
                      #{e -ANAU$bmvAmthP7L7xwn8w}#)
                    (let ((#{labels -ANAU$bmvAmthP7L7xwn$q}#
                            (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                              #{id -ANAU$bmvAmthP7L7xwn9N}#))
                          (#{new-vars -ANAU$bmvAmthP7L7xwn$r}#
                            (map #{gen-var -ANAU$bmvAmthP7L7xwnOS}#
                                 #{id -ANAU$bmvAmthP7L7xwn9N}#)))
                      (let ((#{w -ANAU$bmvAmthP7L7xwn$s}#
                              (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                                #{id -ANAU$bmvAmthP7L7xwn9N}#
                                #{labels -ANAU$bmvAmthP7L7xwn$q}#
                                #{w -ANAU$bmvAmthP7L7xwn8y}#))
                            (#{r -ANAU$bmvAmthP7L7xwn$t}#
                              (#{extend-var-env -ANAU$bmvAmthP7L7xwnNb}#
                                #{labels -ANAU$bmvAmthP7L7xwn$q}#
                                #{new-vars -ANAU$bmvAmthP7L7xwn$r}#
                                #{r -ANAU$bmvAmthP7L7xwn8x}#)))
                        (#{build-letrec -ANAU$bmvAmthP7L7xwnNQ}#
                          #{s -ANAU$bmvAmthP7L7xwn8z}#
                          #f
                          (map syntax->datum #{id -ANAU$bmvAmthP7L7xwn9N}#)
                          #{new-vars -ANAU$bmvAmthP7L7xwn$r}#
                          (map (lambda (#{x -ANAU$bmvAmthP7L7xwn@$}#)
                                 (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                   #{x -ANAU$bmvAmthP7L7xwn@$}#
                                   #{r -ANAU$bmvAmthP7L7xwn$t}#
                                   #{w -ANAU$bmvAmthP7L7xwn$s}#
                                   #{mod -ANAU$bmvAmthP7L7xwn80}#))
                               #{val -ANAU$bmvAmthP7L7xwn9O}#)
                          (#{expand-body -ANAU$bmvAmthP7L7xwnOI}#
                            (cons #{e1 -ANAU$bmvAmthP7L7xwn9P}#
                                  #{e2 -ANAU$bmvAmthP7L7xwn9Q}#)
                            (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                              (begin
                                (if (if (pair? #{e -ANAU$bmvAmthP7L7xwn8w}#)
                                      #{s -ANAU$bmvAmthP7L7xwn8z}#
                                      #f)
                                  (set-source-properties!
                                    #{e -ANAU$bmvAmthP7L7xwn8w}#
                                    #{s -ANAU$bmvAmthP7L7xwn8z}#))
                                #{e -ANAU$bmvAmthP7L7xwn8w}#)
                              #{w -ANAU$bmvAmthP7L7xwn$s}#
                              #{mod -ANAU$bmvAmthP7L7xwn80}#)
                            #{r -ANAU$bmvAmthP7L7xwn$t}#
                            #{w -ANAU$bmvAmthP7L7xwn$s}#
                            #{mod -ANAU$bmvAmthP7L7xwn80}#))))))
                #{tmp -ANAU$bmvAmthP7L7xwn82}#)
              (syntax-violation
                'letrec
                "bad letrec"
                (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                  (begin
                    (if (if (pair? #{e -ANAU$bmvAmthP7L7xwn8w}#)
                          #{s -ANAU$bmvAmthP7L7xwn8z}#
                          #f)
                      (set-source-properties!
                        #{e -ANAU$bmvAmthP7L7xwn8w}#
                        #{s -ANAU$bmvAmthP7L7xwn8z}#))
                    #{e -ANAU$bmvAmthP7L7xwn8w}#)
                  #{w -ANAU$bmvAmthP7L7xwn8y}#
                  #{mod -ANAU$bmvAmthP7L7xwn80}#))))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'letrec*
        (lambda (#{e -ANAU$bmvAmthP7L7xwoGB}#
                 #{r -ANAU$bmvAmthP7L7xwoGC}#
                 #{w -ANAU$bmvAmthP7L7xwoGD}#
                 #{s -ANAU$bmvAmthP7L7xwoGE}#
                 #{mod -ANAU$bmvAmthP7L7xwoGF}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwoGH}#
                  ($sc-dispatch
                    #{e -ANAU$bmvAmthP7L7xwoGB}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp -ANAU$bmvAmthP7L7xwoGH}#
                  (@apply
                    (lambda (#{id -ANAU$bmvAmthP7L7xwoGL}#
                             #{val -ANAU$bmvAmthP7L7xwoGM}#
                             #{e1 -ANAU$bmvAmthP7L7xwoGN}#
                             #{e2 -ANAU$bmvAmthP7L7xwoGO}#)
                      (and-map
                        #{id? -ANAU$bmvAmthP7L7xwnNg}#
                        #{id -ANAU$bmvAmthP7L7xwoGL}#))
                    #{tmp -ANAU$bmvAmthP7L7xwoGH}#)
                  #f)
              (@apply
                (lambda (#{id -ANAU$bmvAmthP7L7xwoGe}#
                         #{val -ANAU$bmvAmthP7L7xwoGf}#
                         #{e1 -ANAU$bmvAmthP7L7xwoGg}#
                         #{e2 -ANAU$bmvAmthP7L7xwoGh}#)
                  (if (not (#{valid-bound-ids? -ANAU$bmvAmthP7L7xwnN6}#
                             #{id -ANAU$bmvAmthP7L7xwoGe}#))
                    (syntax-violation
                      'letrec*
                      "duplicate bound variable"
                      #{e -ANAU$bmvAmthP7L7xwoGB}#)
                    (let ((#{labels -ANAU$bmvAmthP7L7xwoH7}#
                            (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                              #{id -ANAU$bmvAmthP7L7xwoGe}#))
                          (#{new-vars -ANAU$bmvAmthP7L7xwoH8}#
                            (map #{gen-var -ANAU$bmvAmthP7L7xwnOS}#
                                 #{id -ANAU$bmvAmthP7L7xwoGe}#)))
                      (let ((#{w -ANAU$bmvAmthP7L7xwoH9}#
                              (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                                #{id -ANAU$bmvAmthP7L7xwoGe}#
                                #{labels -ANAU$bmvAmthP7L7xwoH7}#
                                #{w -ANAU$bmvAmthP7L7xwoGD}#))
                            (#{r -ANAU$bmvAmthP7L7xwoH$}#
                              (#{extend-var-env -ANAU$bmvAmthP7L7xwnNb}#
                                #{labels -ANAU$bmvAmthP7L7xwoH7}#
                                #{new-vars -ANAU$bmvAmthP7L7xwoH8}#
                                #{r -ANAU$bmvAmthP7L7xwoGC}#)))
                        (#{build-letrec -ANAU$bmvAmthP7L7xwnNQ}#
                          #{s -ANAU$bmvAmthP7L7xwoGE}#
                          #t
                          (map syntax->datum #{id -ANAU$bmvAmthP7L7xwoGe}#)
                          #{new-vars -ANAU$bmvAmthP7L7xwoH8}#
                          (map (lambda (#{x -ANAU$bmvAmthP7L7xwoJP}#)
                                 (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                   #{x -ANAU$bmvAmthP7L7xwoJP}#
                                   #{r -ANAU$bmvAmthP7L7xwoH$}#
                                   #{w -ANAU$bmvAmthP7L7xwoH9}#
                                   #{mod -ANAU$bmvAmthP7L7xwoGF}#))
                               #{val -ANAU$bmvAmthP7L7xwoGf}#)
                          (#{expand-body -ANAU$bmvAmthP7L7xwnOI}#
                            (cons #{e1 -ANAU$bmvAmthP7L7xwoGg}#
                                  #{e2 -ANAU$bmvAmthP7L7xwoGh}#)
                            (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                              (begin
                                (if (if (pair? #{e -ANAU$bmvAmthP7L7xwoGB}#)
                                      #{s -ANAU$bmvAmthP7L7xwoGE}#
                                      #f)
                                  (set-source-properties!
                                    #{e -ANAU$bmvAmthP7L7xwoGB}#
                                    #{s -ANAU$bmvAmthP7L7xwoGE}#))
                                #{e -ANAU$bmvAmthP7L7xwoGB}#)
                              #{w -ANAU$bmvAmthP7L7xwoH9}#
                              #{mod -ANAU$bmvAmthP7L7xwoGF}#)
                            #{r -ANAU$bmvAmthP7L7xwoH$}#
                            #{w -ANAU$bmvAmthP7L7xwoH9}#
                            #{mod -ANAU$bmvAmthP7L7xwoGF}#))))))
                #{tmp -ANAU$bmvAmthP7L7xwoGH}#)
              (syntax-violation
                'letrec*
                "bad letrec*"
                (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                  (begin
                    (if (if (pair? #{e -ANAU$bmvAmthP7L7xwoGB}#)
                          #{s -ANAU$bmvAmthP7L7xwoGE}#
                          #f)
                      (set-source-properties!
                        #{e -ANAU$bmvAmthP7L7xwoGB}#
                        #{s -ANAU$bmvAmthP7L7xwoGE}#))
                    #{e -ANAU$bmvAmthP7L7xwoGB}#)
                  #{w -ANAU$bmvAmthP7L7xwoGD}#
                  #{mod -ANAU$bmvAmthP7L7xwoGF}#))))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'set!
        (lambda (#{e -ANAU$bmvAmthP7L7xwoP5}#
                 #{r -ANAU$bmvAmthP7L7xwoP6}#
                 #{w -ANAU$bmvAmthP7L7xwoP7}#
                 #{s -ANAU$bmvAmthP7L7xwoP8}#
                 #{mod -ANAU$bmvAmthP7L7xwoP9}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwoP@}#
                  ($sc-dispatch
                    #{e -ANAU$bmvAmthP7L7xwoP5}#
                    '(_ any any))))
            (if (if #{tmp -ANAU$bmvAmthP7L7xwoP@}#
                  (@apply
                    (lambda (#{id -ANAU$bmvAmthP7L7xwoQD}#
                             #{val -ANAU$bmvAmthP7L7xwoQE}#)
                      (if (symbol? #{id -ANAU$bmvAmthP7L7xwoQD}#)
                        #t
                        (if (if (vector? #{id -ANAU$bmvAmthP7L7xwoQD}#)
                              (if (= (vector-length
                                       #{id -ANAU$bmvAmthP7L7xwoQD}#)
                                     4)
                                (eq? (vector-ref
                                       #{id -ANAU$bmvAmthP7L7xwoQD}#
                                       0)
                                     'syntax-object)
                                #f)
                              #f)
                          (symbol?
                            (vector-ref #{id -ANAU$bmvAmthP7L7xwoQD}# 1))
                          #f)))
                    #{tmp -ANAU$bmvAmthP7L7xwoP@}#)
                  #f)
              (@apply
                (lambda (#{id -ANAU$bmvAmthP7L7xwoQf}#
                         #{val -ANAU$bmvAmthP7L7xwoQg}#)
                  (let ((#{n -ANAU$bmvAmthP7L7xwoQh}#
                          (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                            #{id -ANAU$bmvAmthP7L7xwoQf}#
                            #{w -ANAU$bmvAmthP7L7xwoP7}#))
                        (#{id-mod -ANAU$bmvAmthP7L7xwoQi}#
                          (if (if (vector? #{id -ANAU$bmvAmthP7L7xwoQf}#)
                                (if (= (vector-length
                                         #{id -ANAU$bmvAmthP7L7xwoQf}#)
                                       4)
                                  (eq? (vector-ref
                                         #{id -ANAU$bmvAmthP7L7xwoQf}#
                                         0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (vector-ref #{id -ANAU$bmvAmthP7L7xwoQf}# 3)
                            #{mod -ANAU$bmvAmthP7L7xwoP9}#)))
                    (let ((#{b -ANAU$bmvAmthP7L7xwoQj}#
                            (let ((#{t -ANAU$bmvAmthP7L7xwoRM}#
                                    (assq #{n -ANAU$bmvAmthP7L7xwoQh}#
                                          #{r -ANAU$bmvAmthP7L7xwoP6}#)))
                              (if #{t -ANAU$bmvAmthP7L7xwoRM}#
                                (cdr #{t -ANAU$bmvAmthP7L7xwoRM}#)
                                (if (symbol? #{n -ANAU$bmvAmthP7L7xwoQh}#)
                                  (let ((#{t -ANAU$bmvAmthP7L7xwoRR}#
                                          (#{get-global-definition-hook -ANAU$bmvAmthP7L7xwnM7}#
                                            #{n -ANAU$bmvAmthP7L7xwoQh}#
                                            #{id-mod -ANAU$bmvAmthP7L7xwoQi}#)))
                                    (if #{t -ANAU$bmvAmthP7L7xwoRR}#
                                      #{t -ANAU$bmvAmthP7L7xwoRR}#
                                      '(global)))
                                  '(displaced-lexical))))))
                      (let ((#{atom-key -ANAU$bmvAmthP7L7xwoQk}#
                              (car #{b -ANAU$bmvAmthP7L7xwoQj}#)))
                        (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwoQk}#
                                  'lexical)
                          (#{build-lexical-assignment -ANAU$bmvAmthP7L7xwnND}#
                            #{s -ANAU$bmvAmthP7L7xwoP8}#
                            (syntax->datum #{id -ANAU$bmvAmthP7L7xwoQf}#)
                            (cdr #{b -ANAU$bmvAmthP7L7xwoQj}#)
                            (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                              #{val -ANAU$bmvAmthP7L7xwoQg}#
                              #{r -ANAU$bmvAmthP7L7xwoP6}#
                              #{w -ANAU$bmvAmthP7L7xwoP7}#
                              #{mod -ANAU$bmvAmthP7L7xwoP9}#))
                          (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwoQk}#
                                    'global)
                            (#{build-global-assignment -ANAU$bmvAmthP7L7xwnNG}#
                              #{s -ANAU$bmvAmthP7L7xwoP8}#
                              #{n -ANAU$bmvAmthP7L7xwoQh}#
                              (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                #{val -ANAU$bmvAmthP7L7xwoQg}#
                                #{r -ANAU$bmvAmthP7L7xwoP6}#
                                #{w -ANAU$bmvAmthP7L7xwoP7}#
                                #{mod -ANAU$bmvAmthP7L7xwoP9}#)
                              #{id-mod -ANAU$bmvAmthP7L7xwoQi}#)
                            (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwoQk}#
                                      'macro)
                              (let ((#{p -ANAU$bmvAmthP7L7xwoWL}#
                                      (cdr #{b -ANAU$bmvAmthP7L7xwoQj}#)))
                                (if (procedure-property
                                      #{p -ANAU$bmvAmthP7L7xwoWL}#
                                      'variable-transformer)
                                  (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                    (#{expand-macro -ANAU$bmvAmthP7L7xwnOH}#
                                      #{p -ANAU$bmvAmthP7L7xwoWL}#
                                      #{e -ANAU$bmvAmthP7L7xwoP5}#
                                      #{r -ANAU$bmvAmthP7L7xwoP6}#
                                      #{w -ANAU$bmvAmthP7L7xwoP7}#
                                      #{s -ANAU$bmvAmthP7L7xwoP8}#
                                      #f
                                      #{mod -ANAU$bmvAmthP7L7xwoP9}#)
                                    #{r -ANAU$bmvAmthP7L7xwoP6}#
                                    '(())
                                    #{mod -ANAU$bmvAmthP7L7xwoP9}#)
                                  (syntax-violation
                                    'set!
                                    "not a variable transformer"
                                    (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                      #{e -ANAU$bmvAmthP7L7xwoP5}#
                                      #{w -ANAU$bmvAmthP7L7xwoP7}#
                                      #{mod -ANAU$bmvAmthP7L7xwoP9}#)
                                    (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                      #{id -ANAU$bmvAmthP7L7xwoQf}#
                                      #{w -ANAU$bmvAmthP7L7xwoP7}#
                                      #{id-mod -ANAU$bmvAmthP7L7xwoQi}#))))
                              (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwoQk}#
                                        'displaced-lexical)
                                (syntax-violation
                                  'set!
                                  "identifier out of context"
                                  (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                    #{id -ANAU$bmvAmthP7L7xwoQf}#
                                    #{w -ANAU$bmvAmthP7L7xwoP7}#
                                    #{mod -ANAU$bmvAmthP7L7xwoP9}#))
                                (syntax-violation
                                  'set!
                                  "bad set!"
                                  (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                    (begin
                                      (if (if (pair? #{e -ANAU$bmvAmthP7L7xwoP5}#)
                                            #{s -ANAU$bmvAmthP7L7xwoP8}#
                                            #f)
                                        (set-source-properties!
                                          #{e -ANAU$bmvAmthP7L7xwoP5}#
                                          #{s -ANAU$bmvAmthP7L7xwoP8}#))
                                      #{e -ANAU$bmvAmthP7L7xwoP5}#)
                                    #{w -ANAU$bmvAmthP7L7xwoP7}#
                                    #{mod -ANAU$bmvAmthP7L7xwoP9}#))))))))))
                #{tmp -ANAU$bmvAmthP7L7xwoP@}#)
              (let ((#{tmp -ANAU$bmvAmthP7L7xwoXq}#
                      ($sc-dispatch
                        #{e -ANAU$bmvAmthP7L7xwoP5}#
                        '(_ (any . each-any) any))))
                (if #{tmp -ANAU$bmvAmthP7L7xwoXq}#
                  (@apply
                    (lambda (#{head -ANAU$bmvAmthP7L7xwoXu}#
                             #{tail -ANAU$bmvAmthP7L7xwoXv}#
                             #{val -ANAU$bmvAmthP7L7xwoXw}#)
                      (call-with-values
                        (lambda ()
                          (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                            #{head -ANAU$bmvAmthP7L7xwoXu}#
                            #{r -ANAU$bmvAmthP7L7xwoP6}#
                            '(())
                            #f
                            #f
                            #{mod -ANAU$bmvAmthP7L7xwoP9}#
                            #t))
                        (lambda (#{type -ANAU$bmvAmthP7L7xwoXz}#
                                 #{value -ANAU$bmvAmthP7L7xwoX0}#
                                 #{ee -ANAU$bmvAmthP7L7xwoX1}#
                                 #{ww -ANAU$bmvAmthP7L7xwoX2}#
                                 #{ss -ANAU$bmvAmthP7L7xwoX3}#
                                 #{modmod -ANAU$bmvAmthP7L7xwoX4}#)
                          (if (eqv? #{type -ANAU$bmvAmthP7L7xwoXz}#
                                    'module-ref)
                            (let ((#{val -ANAU$bmvAmthP7L7xwoX8}#
                                    (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                      #{val -ANAU$bmvAmthP7L7xwoXw}#
                                      #{r -ANAU$bmvAmthP7L7xwoP6}#
                                      #{w -ANAU$bmvAmthP7L7xwoP7}#
                                      #{mod -ANAU$bmvAmthP7L7xwoP9}#)))
                              (call-with-values
                                (lambda ()
                                  (#{value -ANAU$bmvAmthP7L7xwoX0}#
                                    (cons #{head -ANAU$bmvAmthP7L7xwoXu}#
                                          #{tail -ANAU$bmvAmthP7L7xwoXv}#)
                                    #{r -ANAU$bmvAmthP7L7xwoP6}#
                                    #{w -ANAU$bmvAmthP7L7xwoP7}#))
                                (lambda (#{e -ANAU$bmvAmthP7L7xwoX9}#
                                         #{r -ANAU$bmvAmthP7L7xwoX$}#
                                         #{w -ANAU$bmvAmthP7L7xwoX@}#
                                         #{s* -ANAU$bmvAmthP7L7xwoYA}#
                                         #{mod -ANAU$bmvAmthP7L7xwoYB}#)
                                  (let ((#{tmp -ANAU$bmvAmthP7L7xwoYD}#
                                          (list #{e -ANAU$bmvAmthP7L7xwoX9}#)))
                                    (if (@apply
                                          (lambda (#{e -ANAU$bmvAmthP7L7xwoYF}#)
                                            (if (symbol?
                                                  #{e -ANAU$bmvAmthP7L7xwoYF}#)
                                              #t
                                              (if (if (vector?
                                                        #{e -ANAU$bmvAmthP7L7xwoYF}#)
                                                    (if (= (vector-length
                                                             #{e -ANAU$bmvAmthP7L7xwoYF}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{e -ANAU$bmvAmthP7L7xwoYF}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref
                                                    #{e -ANAU$bmvAmthP7L7xwoYF}#
                                                    1))
                                                #f)))
                                          #{tmp -ANAU$bmvAmthP7L7xwoYD}#)
                                      (@apply
                                        (lambda (#{e -ANAU$bmvAmthP7L7xwoYj}#)
                                          (#{build-global-assignment -ANAU$bmvAmthP7L7xwnNG}#
                                            #{s -ANAU$bmvAmthP7L7xwoP8}#
                                            (syntax->datum
                                              #{e -ANAU$bmvAmthP7L7xwoYj}#)
                                            #{val -ANAU$bmvAmthP7L7xwoX8}#
                                            #{mod -ANAU$bmvAmthP7L7xwoYB}#))
                                        #{tmp -ANAU$bmvAmthP7L7xwoYD}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e -ANAU$bmvAmthP7L7xwoX9}#))))))
                            (#{build-application -ANAU$bmvAmthP7L7xwnM@}#
                              #{s -ANAU$bmvAmthP7L7xwoP8}#
                              (let ((#{e -ANAU$bmvAmthP7L7xwocE}#
                                      (list '#(syntax-object
                                               setter
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(type value ee ww ss modmod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("142"
                                                    "143"
                                                    "144"
                                                    "145"
                                                    "146"
                                                    "147"))
                                                #(ribcage
                                                  #(head tail val)
                                                  #((top) (top) (top))
                                                  #("13z" "140" "141"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e r w s mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("13l"
                                                    "13m"
                                                    "13n"
                                                    "13o"
                                                    "13p"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("5l"
                                                   "5k"
                                                   "5j"
                                                   "5i"
                                                   "5h"
                                                   "5g"
                                                   "5f"
                                                   "5e"
                                                   "5d"
                                                   "5c"
                                                   "5b"
                                                   "5a"
                                                   "59"
                                                   "58"
                                                   "57"
                                                   "56"
                                                   "55"
                                                   "54"
                                                   "53"
                                                   "52"
                                                   "51"
                                                   "50"
                                                   "4z"
                                                   "4y"
                                                   "4x"
                                                   "4w"
                                                   "4v"
                                                   "4u"
                                                   "4t"
                                                   "4s"
                                                   "4r"
                                                   "4q"
                                                   "4p"
                                                   "4o"
                                                   "4n"
                                                   "4m"
                                                   "4l"
                                                   "4k"
                                                   "4j"
                                                   "4i"
                                                   "4h"
                                                   "4g"
                                                   "4f"
                                                   "4e"
                                                   "4d"
                                                   "4c"
                                                   "4b"
                                                   "4a"
                                                   "49"
                                                   "48"
                                                   "47"
                                                   "46"
                                                   "45"
                                                   "44"
                                                   "43"
                                                   "42"
                                                   "41"
                                                   "40"
                                                   "3z"
                                                   "3y"
                                                   "3x"
                                                   "3w"
                                                   "3v"
                                                   "3u"
                                                   "3t"
                                                   "3s"
                                                   "3r"
                                                   "3q"
                                                   "3p"
                                                   "3o"
                                                   "3n"
                                                   "3m"
                                                   "3l"
                                                   "3k"
                                                   "3j"
                                                   "3i"
                                                   "3h"
                                                   "3g"
                                                   "3f"
                                                   "3e"
                                                   "3d"
                                                   "3c"
                                                   "3b"
                                                   "3a"
                                                   "39"
                                                   "38"
                                                   "37"
                                                   "36"
                                                   "35"
                                                   "34"
                                                   "33"
                                                   "32"
                                                   "31"
                                                   "30"
                                                   "2z"
                                                   "2y"
                                                   "2x"
                                                   "2w"
                                                   "2v"
                                                   "2u"
                                                   "2t"
                                                   "2s"
                                                   "2r"
                                                   "2q"
                                                   "2p"
                                                   "2o"
                                                   "2n"
                                                   "2m"
                                                   "2l"
                                                   "2k"
                                                   "2j"
                                                   "2i"
                                                   "2h"
                                                   "2g"
                                                   "2f"
                                                   "2e"
                                                   "2d"
                                                   "2c"
                                                   "2b"
                                                   "2a"
                                                   "29"
                                                   "28"
                                                   "27"
                                                   "26"
                                                   "25"
                                                   "24"
                                                   "23"
                                                   "22"
                                                   "21"
                                                   "20"
                                                   "1z"
                                                   "1y"
                                                   "1x"
                                                   "1w"
                                                   "1v"
                                                   "1u"
                                                   "1t"
                                                   "1s"
                                                   "1r"
                                                   "1q"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("8" "7" "6")))
                                               (hygiene guile))
                                            #{head -ANAU$bmvAmthP7L7xwoXu}#)))
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                                      #{e -ANAU$bmvAmthP7L7xwocE}#
                                      #{r -ANAU$bmvAmthP7L7xwoP6}#
                                      #{w -ANAU$bmvAmthP7L7xwoP7}#
                                      (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                                        #{e -ANAU$bmvAmthP7L7xwocE}#)
                                      #f
                                      #{mod -ANAU$bmvAmthP7L7xwoP9}#
                                      #f))
                                  (lambda (#{type -ANAU$bmvAmthP7L7xwocL}#
                                           #{value -ANAU$bmvAmthP7L7xwocM}#
                                           #{e -ANAU$bmvAmthP7L7xwocN}#
                                           #{w -ANAU$bmvAmthP7L7xwocO}#
                                           #{s -ANAU$bmvAmthP7L7xwocP}#
                                           #{mod -ANAU$bmvAmthP7L7xwocQ}#)
                                    (#{expand-expr -ANAU$bmvAmthP7L7xwnOF}#
                                      #{type -ANAU$bmvAmthP7L7xwocL}#
                                      #{value -ANAU$bmvAmthP7L7xwocM}#
                                      #{e -ANAU$bmvAmthP7L7xwocN}#
                                      #{r -ANAU$bmvAmthP7L7xwoP6}#
                                      #{w -ANAU$bmvAmthP7L7xwocO}#
                                      #{s -ANAU$bmvAmthP7L7xwocP}#
                                      #{mod -ANAU$bmvAmthP7L7xwocQ}#))))
                              (map (lambda (#{e -ANAU$bmvAmthP7L7xwocU}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{syntax-type -ANAU$bmvAmthP7L7xwnOD}#
                                           #{e -ANAU$bmvAmthP7L7xwocU}#
                                           #{r -ANAU$bmvAmthP7L7xwoP6}#
                                           #{w -ANAU$bmvAmthP7L7xwoP7}#
                                           (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                                             #{e -ANAU$bmvAmthP7L7xwocU}#)
                                           #f
                                           #{mod -ANAU$bmvAmthP7L7xwoP9}#
                                           #f))
                                       (lambda (#{type -ANAU$bmvAmthP7L7xwocj}#
                                                #{value -ANAU$bmvAmthP7L7xwock}#
                                                #{e -ANAU$bmvAmthP7L7xwocl}#
                                                #{w -ANAU$bmvAmthP7L7xwocm}#
                                                #{s -ANAU$bmvAmthP7L7xwocn}#
                                                #{mod -ANAU$bmvAmthP7L7xwoco}#)
                                         (#{expand-expr -ANAU$bmvAmthP7L7xwnOF}#
                                           #{type -ANAU$bmvAmthP7L7xwocj}#
                                           #{value -ANAU$bmvAmthP7L7xwock}#
                                           #{e -ANAU$bmvAmthP7L7xwocl}#
                                           #{r -ANAU$bmvAmthP7L7xwoP6}#
                                           #{w -ANAU$bmvAmthP7L7xwocm}#
                                           #{s -ANAU$bmvAmthP7L7xwocn}#
                                           #{mod -ANAU$bmvAmthP7L7xwoco}#))))
                                   (append
                                     #{tail -ANAU$bmvAmthP7L7xwoXv}#
                                     (list #{val -ANAU$bmvAmthP7L7xwoXw}#))))))))
                    #{tmp -ANAU$bmvAmthP7L7xwoXq}#)
                  (syntax-violation
                    'set!
                    "bad set!"
                    (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                      (begin
                        (if (if (pair? #{e -ANAU$bmvAmthP7L7xwoP5}#)
                              #{s -ANAU$bmvAmthP7L7xwoP8}#
                              #f)
                          (set-source-properties!
                            #{e -ANAU$bmvAmthP7L7xwoP5}#
                            #{s -ANAU$bmvAmthP7L7xwoP8}#))
                        #{e -ANAU$bmvAmthP7L7xwoP5}#)
                      #{w -ANAU$bmvAmthP7L7xwoP7}#
                      #{mod -ANAU$bmvAmthP7L7xwoP9}#))))))))
      (module-define!
        (current-module)
        '@
        (make-syntax-transformer
          '@
          'module-ref
          (lambda (#{e -ANAU$bmvAmthP7L7xwodT}#
                   #{r -ANAU$bmvAmthP7L7xwodU}#
                   #{w -ANAU$bmvAmthP7L7xwodV}#)
            (let ((#{tmp -ANAU$bmvAmthP7L7xwodX}#
                    ($sc-dispatch
                      #{e -ANAU$bmvAmthP7L7xwodT}#
                      '(_ each-any any))))
              (if (if #{tmp -ANAU$bmvAmthP7L7xwodX}#
                    (@apply
                      (lambda (#{mod -ANAU$bmvAmthP7L7xwoda}#
                               #{id -ANAU$bmvAmthP7L7xwodb}#)
                        (if (and-map
                              #{id? -ANAU$bmvAmthP7L7xwnNg}#
                              #{mod -ANAU$bmvAmthP7L7xwoda}#)
                          (if (symbol? #{id -ANAU$bmvAmthP7L7xwodb}#)
                            #t
                            (if (if (vector? #{id -ANAU$bmvAmthP7L7xwodb}#)
                                  (if (= (vector-length
                                           #{id -ANAU$bmvAmthP7L7xwodb}#)
                                         4)
                                    (eq? (vector-ref
                                           #{id -ANAU$bmvAmthP7L7xwodb}#
                                           0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol?
                                (vector-ref #{id -ANAU$bmvAmthP7L7xwodb}# 1))
                              #f))
                          #f))
                      #{tmp -ANAU$bmvAmthP7L7xwodX}#)
                    #f)
                (@apply
                  (lambda (#{mod -ANAU$bmvAmthP7L7xwoeD}#
                           #{id -ANAU$bmvAmthP7L7xwoeE}#)
                    (values
                      (syntax->datum #{id -ANAU$bmvAmthP7L7xwoeE}#)
                      #{r -ANAU$bmvAmthP7L7xwodU}#
                      #{w -ANAU$bmvAmthP7L7xwodV}#
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("14n" "14o"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("14i" "14j" "14k"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-application
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      with-transformer-environment
                                      transformer-environment
                                      resolve-identifier
                                      locally-bound-identifiers
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-application
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-sequence
                                      make-application
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("5l"
                                     "5k"
                                     "5j"
                                     "5i"
                                     "5h"
                                     "5g"
                                     "5f"
                                     "5e"
                                     "5d"
                                     "5c"
                                     "5b"
                                     "5a"
                                     "59"
                                     "58"
                                     "57"
                                     "56"
                                     "55"
                                     "54"
                                     "53"
                                     "52"
                                     "51"
                                     "50"
                                     "4z"
                                     "4y"
                                     "4x"
                                     "4w"
                                     "4v"
                                     "4u"
                                     "4t"
                                     "4s"
                                     "4r"
                                     "4q"
                                     "4p"
                                     "4o"
                                     "4n"
                                     "4m"
                                     "4l"
                                     "4k"
                                     "4j"
                                     "4i"
                                     "4h"
                                     "4g"
                                     "4f"
                                     "4e"
                                     "4d"
                                     "4c"
                                     "4b"
                                     "4a"
                                     "49"
                                     "48"
                                     "47"
                                     "46"
                                     "45"
                                     "44"
                                     "43"
                                     "42"
                                     "41"
                                     "40"
                                     "3z"
                                     "3y"
                                     "3x"
                                     "3w"
                                     "3v"
                                     "3u"
                                     "3t"
                                     "3s"
                                     "3r"
                                     "3q"
                                     "3p"
                                     "3o"
                                     "3n"
                                     "3m"
                                     "3l"
                                     "3k"
                                     "3j"
                                     "3i"
                                     "3h"
                                     "3g"
                                     "3f"
                                     "3e"
                                     "3d"
                                     "3c"
                                     "3b"
                                     "3a"
                                     "39"
                                     "38"
                                     "37"
                                     "36"
                                     "35"
                                     "34"
                                     "33"
                                     "32"
                                     "31"
                                     "30"
                                     "2z"
                                     "2y"
                                     "2x"
                                     "2w"
                                     "2v"
                                     "2u"
                                     "2t"
                                     "2s"
                                     "2r"
                                     "2q"
                                     "2p"
                                     "2o"
                                     "2n"
                                     "2m"
                                     "2l"
                                     "2k"
                                     "2j"
                                     "2i"
                                     "2h"
                                     "2g"
                                     "2f"
                                     "2e"
                                     "2d"
                                     "2c"
                                     "2b"
                                     "2a"
                                     "29"
                                     "28"
                                     "27"
                                     "26"
                                     "25"
                                     "24"
                                     "23"
                                     "22"
                                     "21"
                                     "20"
                                     "1z"
                                     "1y"
                                     "1x"
                                     "1w"
                                     "1v"
                                     "1u"
                                     "1t"
                                     "1s"
                                     "1r"
                                     "1q"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("8" "7" "6")))
                                 (hygiene guile))
                              #{mod -ANAU$bmvAmthP7L7xwoeD}#))))
                  #{tmp -ANAU$bmvAmthP7L7xwodX}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e -ANAU$bmvAmthP7L7xwodT}#))))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'module-ref
        '@@
        (lambda (#{e -ANAU$bmvAmthP7L7xwofg}#
                 #{r -ANAU$bmvAmthP7L7xwofh}#
                 #{w -ANAU$bmvAmthP7L7xwofi}#)
          (letrec*
            ((#{remodulate -ANAU$bmvAmthP7L7xwofj}#
               (lambda (#{x -ANAU$bmvAmthP7L7xwogG}#
                        #{mod -ANAU$bmvAmthP7L7xwogH}#)
                 (if (pair? #{x -ANAU$bmvAmthP7L7xwogG}#)
                   (cons (#{remodulate -ANAU$bmvAmthP7L7xwofj}#
                           (car #{x -ANAU$bmvAmthP7L7xwogG}#)
                           #{mod -ANAU$bmvAmthP7L7xwogH}#)
                         (#{remodulate -ANAU$bmvAmthP7L7xwofj}#
                           (cdr #{x -ANAU$bmvAmthP7L7xwogG}#)
                           #{mod -ANAU$bmvAmthP7L7xwogH}#))
                   (if (if (vector? #{x -ANAU$bmvAmthP7L7xwogG}#)
                         (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwogG}#)
                                4)
                           (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwogG}# 0)
                                'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression -ANAU$bmvAmthP7L7xwogV}#
                             (#{remodulate -ANAU$bmvAmthP7L7xwofj}#
                               (vector-ref #{x -ANAU$bmvAmthP7L7xwogG}# 1)
                               #{mod -ANAU$bmvAmthP7L7xwogH}#))
                           (#{wrap -ANAU$bmvAmthP7L7xwogW}#
                             (vector-ref #{x -ANAU$bmvAmthP7L7xwogG}# 2)))
                       (vector
                         'syntax-object
                         #{expression -ANAU$bmvAmthP7L7xwogV}#
                         #{wrap -ANAU$bmvAmthP7L7xwogW}#
                         #{mod -ANAU$bmvAmthP7L7xwogH}#))
                     (if (vector? #{x -ANAU$bmvAmthP7L7xwogG}#)
                       (let ((#{n -ANAU$bmvAmthP7L7xwoge}#
                               (vector-length #{x -ANAU$bmvAmthP7L7xwogG}#)))
                         (let ((#{v -ANAU$bmvAmthP7L7xwogf}#
                                 (make-vector #{n -ANAU$bmvAmthP7L7xwoge}#)))
                           (letrec*
                             ((#{loop -ANAU$bmvAmthP7L7xwogg}#
                                (lambda (#{i -ANAU$bmvAmthP7L7xwohP}#)
                                  (if (= #{i -ANAU$bmvAmthP7L7xwohP}#
                                         #{n -ANAU$bmvAmthP7L7xwoge}#)
                                    #{v -ANAU$bmvAmthP7L7xwogf}#
                                    (begin
                                      (vector-set!
                                        #{v -ANAU$bmvAmthP7L7xwogf}#
                                        #{i -ANAU$bmvAmthP7L7xwohP}#
                                        (#{remodulate -ANAU$bmvAmthP7L7xwofj}#
                                          (vector-ref
                                            #{x -ANAU$bmvAmthP7L7xwogG}#
                                            #{i -ANAU$bmvAmthP7L7xwohP}#)
                                          #{mod -ANAU$bmvAmthP7L7xwogH}#))
                                      (#{loop -ANAU$bmvAmthP7L7xwogg}#
                                        (#{1+}# #{i -ANAU$bmvAmthP7L7xwohP}#)))))))
                             (#{loop -ANAU$bmvAmthP7L7xwogg}# 0))))
                       #{x -ANAU$bmvAmthP7L7xwogG}#))))))
            (let ((#{tmp -ANAU$bmvAmthP7L7xwofl}#
                    ($sc-dispatch
                      #{e -ANAU$bmvAmthP7L7xwofg}#
                      '(_ each-any any))))
              (if (if #{tmp -ANAU$bmvAmthP7L7xwofl}#
                    (@apply
                      (lambda (#{mod -ANAU$bmvAmthP7L7xwofp}#
                               #{exp -ANAU$bmvAmthP7L7xwofq}#)
                        (and-map
                          #{id? -ANAU$bmvAmthP7L7xwnNg}#
                          #{mod -ANAU$bmvAmthP7L7xwofp}#))
                      #{tmp -ANAU$bmvAmthP7L7xwofl}#)
                    #f)
                (@apply
                  (lambda (#{mod -ANAU$bmvAmthP7L7xwof6}#
                           #{exp -ANAU$bmvAmthP7L7xwof7}#)
                    (let ((#{mod -ANAU$bmvAmthP7L7xwof8}#
                            (syntax->datum
                              (cons '#(syntax-object
                                       private
                                       ((top)
                                        #(ribcage
                                          #(mod exp)
                                          #((top) (top))
                                          #("151" "152"))
                                        #(ribcage (remodulate) ((top)) ("14s"))
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("14p" "14q" "14r"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            with-transformer-environment
                                            transformer-environment
                                            resolve-identifier
                                            locally-bound-identifiers
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("5l"
                                           "5k"
                                           "5j"
                                           "5i"
                                           "5h"
                                           "5g"
                                           "5f"
                                           "5e"
                                           "5d"
                                           "5c"
                                           "5b"
                                           "5a"
                                           "59"
                                           "58"
                                           "57"
                                           "56"
                                           "55"
                                           "54"
                                           "53"
                                           "52"
                                           "51"
                                           "50"
                                           "4z"
                                           "4y"
                                           "4x"
                                           "4w"
                                           "4v"
                                           "4u"
                                           "4t"
                                           "4s"
                                           "4r"
                                           "4q"
                                           "4p"
                                           "4o"
                                           "4n"
                                           "4m"
                                           "4l"
                                           "4k"
                                           "4j"
                                           "4i"
                                           "4h"
                                           "4g"
                                           "4f"
                                           "4e"
                                           "4d"
                                           "4c"
                                           "4b"
                                           "4a"
                                           "49"
                                           "48"
                                           "47"
                                           "46"
                                           "45"
                                           "44"
                                           "43"
                                           "42"
                                           "41"
                                           "40"
                                           "3z"
                                           "3y"
                                           "3x"
                                           "3w"
                                           "3v"
                                           "3u"
                                           "3t"
                                           "3s"
                                           "3r"
                                           "3q"
                                           "3p"
                                           "3o"
                                           "3n"
                                           "3m"
                                           "3l"
                                           "3k"
                                           "3j"
                                           "3i"
                                           "3h"
                                           "3g"
                                           "3f"
                                           "3e"
                                           "3d"
                                           "3c"
                                           "3b"
                                           "3a"
                                           "39"
                                           "38"
                                           "37"
                                           "36"
                                           "35"
                                           "34"
                                           "33"
                                           "32"
                                           "31"
                                           "30"
                                           "2z"
                                           "2y"
                                           "2x"
                                           "2w"
                                           "2v"
                                           "2u"
                                           "2t"
                                           "2s"
                                           "2r"
                                           "2q"
                                           "2p"
                                           "2o"
                                           "2n"
                                           "2m"
                                           "2l"
                                           "2k"
                                           "2j"
                                           "2i"
                                           "2h"
                                           "2g"
                                           "2f"
                                           "2e"
                                           "2d"
                                           "2c"
                                           "2b"
                                           "2a"
                                           "29"
                                           "28"
                                           "27"
                                           "26"
                                           "25"
                                           "24"
                                           "23"
                                           "22"
                                           "21"
                                           "20"
                                           "1z"
                                           "1y"
                                           "1x"
                                           "1w"
                                           "1v"
                                           "1u"
                                           "1t"
                                           "1s"
                                           "1r"
                                           "1q"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("8" "7" "6")))
                                       (hygiene guile))
                                    #{mod -ANAU$bmvAmthP7L7xwof6}#))))
                      (values
                        (#{remodulate -ANAU$bmvAmthP7L7xwofj}#
                          #{exp -ANAU$bmvAmthP7L7xwof7}#
                          #{mod -ANAU$bmvAmthP7L7xwof8}#)
                        #{r -ANAU$bmvAmthP7L7xwofh}#
                        #{w -ANAU$bmvAmthP7L7xwofi}#
                        (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                          #{exp -ANAU$bmvAmthP7L7xwof7}#)
                        #{mod -ANAU$bmvAmthP7L7xwof8}#)))
                  #{tmp -ANAU$bmvAmthP7L7xwofl}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e -ANAU$bmvAmthP7L7xwofg}#))))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'if
        (lambda (#{e -ANAU$bmvAmthP7L7xwoi0}#
                 #{r -ANAU$bmvAmthP7L7xwoi1}#
                 #{w -ANAU$bmvAmthP7L7xwoi2}#
                 #{s -ANAU$bmvAmthP7L7xwoi3}#
                 #{mod -ANAU$bmvAmthP7L7xwoi4}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwoi6}#
                  ($sc-dispatch
                    #{e -ANAU$bmvAmthP7L7xwoi0}#
                    '(_ any any))))
            (if #{tmp -ANAU$bmvAmthP7L7xwoi6}#
              (@apply
                (lambda (#{test -ANAU$bmvAmthP7L7xwoi$}#
                         #{then -ANAU$bmvAmthP7L7xwoi@}#)
                  (#{build-conditional -ANAU$bmvAmthP7L7xwnNA}#
                    #{s -ANAU$bmvAmthP7L7xwoi3}#
                    (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                      #{test -ANAU$bmvAmthP7L7xwoi$}#
                      #{r -ANAU$bmvAmthP7L7xwoi1}#
                      #{w -ANAU$bmvAmthP7L7xwoi2}#
                      #{mod -ANAU$bmvAmthP7L7xwoi4}#)
                    (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                      #{then -ANAU$bmvAmthP7L7xwoi@}#
                      #{r -ANAU$bmvAmthP7L7xwoi1}#
                      #{w -ANAU$bmvAmthP7L7xwoi2}#
                      #{mod -ANAU$bmvAmthP7L7xwoi4}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 0)
                      #f)))
                #{tmp -ANAU$bmvAmthP7L7xwoi6}#)
              (let ((#{tmp -ANAU$bmvAmthP7L7xwomg}#
                      ($sc-dispatch
                        #{e -ANAU$bmvAmthP7L7xwoi0}#
                        '(_ any any any))))
                (if #{tmp -ANAU$bmvAmthP7L7xwomg}#
                  (@apply
                    (lambda (#{test -ANAU$bmvAmthP7L7xwomk}#
                             #{then -ANAU$bmvAmthP7L7xwoml}#
                             #{else -ANAU$bmvAmthP7L7xwomm}#)
                      (#{build-conditional -ANAU$bmvAmthP7L7xwnNA}#
                        #{s -ANAU$bmvAmthP7L7xwoi3}#
                        (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                          #{test -ANAU$bmvAmthP7L7xwomk}#
                          #{r -ANAU$bmvAmthP7L7xwoi1}#
                          #{w -ANAU$bmvAmthP7L7xwoi2}#
                          #{mod -ANAU$bmvAmthP7L7xwoi4}#)
                        (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                          #{then -ANAU$bmvAmthP7L7xwoml}#
                          #{r -ANAU$bmvAmthP7L7xwoi1}#
                          #{w -ANAU$bmvAmthP7L7xwoi2}#
                          #{mod -ANAU$bmvAmthP7L7xwoi4}#)
                        (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                          #{else -ANAU$bmvAmthP7L7xwomm}#
                          #{r -ANAU$bmvAmthP7L7xwoi1}#
                          #{w -ANAU$bmvAmthP7L7xwoi2}#
                          #{mod -ANAU$bmvAmthP7L7xwoi4}#)))
                    #{tmp -ANAU$bmvAmthP7L7xwomg}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{e -ANAU$bmvAmthP7L7xwoi0}#)))))))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'with-fluids
        (lambda (#{e -ANAU$bmvAmthP7L7xwos1}#
                 #{r -ANAU$bmvAmthP7L7xwos2}#
                 #{w -ANAU$bmvAmthP7L7xwos3}#
                 #{s -ANAU$bmvAmthP7L7xwos4}#
                 #{mod -ANAU$bmvAmthP7L7xwos5}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwos7}#
                  ($sc-dispatch
                    #{e -ANAU$bmvAmthP7L7xwos1}#
                    '(_ #(each (any any)) any . each-any))))
            (if #{tmp -ANAU$bmvAmthP7L7xwos7}#
              (@apply
                (lambda (#{fluid -ANAU$bmvAmthP7L7xwos@}#
                         #{val -ANAU$bmvAmthP7L7xwotA}#
                         #{b -ANAU$bmvAmthP7L7xwotB}#
                         #{b* -ANAU$bmvAmthP7L7xwotC}#)
                  (#{build-dynlet -ANAU$bmvAmthP7L7xwnNB}#
                    #{s -ANAU$bmvAmthP7L7xwos4}#
                    (map (lambda (#{x -ANAU$bmvAmthP7L7xwouT}#)
                           (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                             #{x -ANAU$bmvAmthP7L7xwouT}#
                             #{r -ANAU$bmvAmthP7L7xwos2}#
                             #{w -ANAU$bmvAmthP7L7xwos3}#
                             #{mod -ANAU$bmvAmthP7L7xwos5}#))
                         #{fluid -ANAU$bmvAmthP7L7xwos@}#)
                    (map (lambda (#{x -ANAU$bmvAmthP7L7xwovZ}#)
                           (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                             #{x -ANAU$bmvAmthP7L7xwovZ}#
                             #{r -ANAU$bmvAmthP7L7xwos2}#
                             #{w -ANAU$bmvAmthP7L7xwos3}#
                             #{mod -ANAU$bmvAmthP7L7xwos5}#))
                         #{val -ANAU$bmvAmthP7L7xwotA}#)
                    (#{expand-body -ANAU$bmvAmthP7L7xwnOI}#
                      (cons #{b -ANAU$bmvAmthP7L7xwotB}#
                            #{b* -ANAU$bmvAmthP7L7xwotC}#)
                      (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                        (begin
                          (if (if (pair? #{e -ANAU$bmvAmthP7L7xwos1}#)
                                #{s -ANAU$bmvAmthP7L7xwos4}#
                                #f)
                            (set-source-properties!
                              #{e -ANAU$bmvAmthP7L7xwos1}#
                              #{s -ANAU$bmvAmthP7L7xwos4}#))
                          #{e -ANAU$bmvAmthP7L7xwos1}#)
                        #{w -ANAU$bmvAmthP7L7xwos3}#
                        #{mod -ANAU$bmvAmthP7L7xwos5}#)
                      #{r -ANAU$bmvAmthP7L7xwos2}#
                      #{w -ANAU$bmvAmthP7L7xwos3}#
                      #{mod -ANAU$bmvAmthP7L7xwos5}#)))
                #{tmp -ANAU$bmvAmthP7L7xwos7}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e -ANAU$bmvAmthP7L7xwos1}#)))))
      (module-define!
        (current-module)
        'begin
        (make-syntax-transformer 'begin 'begin '()))
      (module-define!
        (current-module)
        'define
        (make-syntax-transformer 'define 'define '()))
      (module-define!
        (current-module)
        'define-syntax
        (make-syntax-transformer
          'define-syntax
          'define-syntax
          '()))
      (module-define!
        (current-module)
        'define-syntax-parameter
        (make-syntax-transformer
          'define-syntax-parameter
          'define-syntax-parameter
          '()))
      (module-define!
        (current-module)
        'eval-when
        (make-syntax-transformer
          'eval-when
          'eval-when
          '()))
      (#{global-extend -ANAU$bmvAmthP7L7xwnNe}#
        'core
        'syntax-case
        (letrec*
          ((#{convert-pattern -ANAU$bmvAmthP7L7xwo1J}#
             (lambda (#{pattern -ANAU$bmvAmthP7L7xwpOE}#
                      #{keys -ANAU$bmvAmthP7L7xwpOF}#)
               (letrec*
                 ((#{cvt* -ANAU$bmvAmthP7L7xwpOG}#
                    (lambda (#{p* -ANAU$bmvAmthP7L7xwpX2}#
                             #{n -ANAU$bmvAmthP7L7xwpX3}#
                             #{ids -ANAU$bmvAmthP7L7xwpX4}#)
                      (if (not (pair? #{p* -ANAU$bmvAmthP7L7xwpX2}#))
                        (#{cvt -ANAU$bmvAmthP7L7xwpOI}#
                          #{p* -ANAU$bmvAmthP7L7xwpX2}#
                          #{n -ANAU$bmvAmthP7L7xwpX3}#
                          #{ids -ANAU$bmvAmthP7L7xwpX4}#)
                        (call-with-values
                          (lambda ()
                            (#{cvt* -ANAU$bmvAmthP7L7xwpOG}#
                              (cdr #{p* -ANAU$bmvAmthP7L7xwpX2}#)
                              #{n -ANAU$bmvAmthP7L7xwpX3}#
                              #{ids -ANAU$bmvAmthP7L7xwpX4}#))
                          (lambda (#{y -ANAU$bmvAmthP7L7xwpX7}#
                                   #{ids -ANAU$bmvAmthP7L7xwpX8}#)
                            (call-with-values
                              (lambda ()
                                (#{cvt -ANAU$bmvAmthP7L7xwpOI}#
                                  (car #{p* -ANAU$bmvAmthP7L7xwpX2}#)
                                  #{n -ANAU$bmvAmthP7L7xwpX3}#
                                  #{ids -ANAU$bmvAmthP7L7xwpX8}#))
                              (lambda (#{x -ANAU$bmvAmthP7L7xwpX@}#
                                       #{ids -ANAU$bmvAmthP7L7xwpYA}#)
                                (values
                                  (cons #{x -ANAU$bmvAmthP7L7xwpX@}#
                                        #{y -ANAU$bmvAmthP7L7xwpX7}#)
                                  #{ids -ANAU$bmvAmthP7L7xwpYA}#))))))))
                  (#{v-reverse -ANAU$bmvAmthP7L7xwpOH}#
                    (lambda (#{x -ANAU$bmvAmthP7L7xwpYB}#)
                      (letrec*
                        ((#{loop -ANAU$bmvAmthP7L7xwpYC}#
                           (lambda (#{r -ANAU$bmvAmthP7L7xwpZS}#
                                    #{x -ANAU$bmvAmthP7L7xwpZT}#)
                             (if (not (pair? #{x -ANAU$bmvAmthP7L7xwpZT}#))
                               (values
                                 #{r -ANAU$bmvAmthP7L7xwpZS}#
                                 #{x -ANAU$bmvAmthP7L7xwpZT}#)
                               (#{loop -ANAU$bmvAmthP7L7xwpYC}#
                                 (cons (car #{x -ANAU$bmvAmthP7L7xwpZT}#)
                                       #{r -ANAU$bmvAmthP7L7xwpZS}#)
                                 (cdr #{x -ANAU$bmvAmthP7L7xwpZT}#))))))
                        (#{loop -ANAU$bmvAmthP7L7xwpYC}#
                          '()
                          #{x -ANAU$bmvAmthP7L7xwpYB}#))))
                  (#{cvt -ANAU$bmvAmthP7L7xwpOI}#
                    (lambda (#{p -ANAU$bmvAmthP7L7xwpOL}#
                             #{n -ANAU$bmvAmthP7L7xwpOM}#
                             #{ids -ANAU$bmvAmthP7L7xwpON}#)
                      (if (if (symbol? #{p -ANAU$bmvAmthP7L7xwpOL}#)
                            #t
                            (if (if (vector? #{p -ANAU$bmvAmthP7L7xwpOL}#)
                                  (if (= (vector-length
                                           #{p -ANAU$bmvAmthP7L7xwpOL}#)
                                         4)
                                    (eq? (vector-ref
                                           #{p -ANAU$bmvAmthP7L7xwpOL}#
                                           0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol?
                                (vector-ref #{p -ANAU$bmvAmthP7L7xwpOL}# 1))
                              #f))
                        (if (#{bound-id-member? -ANAU$bmvAmthP7L7xwnN8}#
                              #{p -ANAU$bmvAmthP7L7xwpOL}#
                              #{keys -ANAU$bmvAmthP7L7xwpOF}#)
                          (values
                            (vector 'free-id #{p -ANAU$bmvAmthP7L7xwpOL}#)
                            #{ids -ANAU$bmvAmthP7L7xwpON}#)
                          (if (if (eq? (if (if (vector?
                                                 #{p -ANAU$bmvAmthP7L7xwpOL}#)
                                             (if (= (vector-length
                                                      #{p -ANAU$bmvAmthP7L7xwpOL}#)
                                                    4)
                                               (eq? (vector-ref
                                                      #{p -ANAU$bmvAmthP7L7xwpOL}#
                                                      0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref
                                           #{p -ANAU$bmvAmthP7L7xwpOL}#
                                           1)
                                         #{p -ANAU$bmvAmthP7L7xwpOL}#)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       _
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p n ids)
                                                          #((top) (top) (top))
                                                          #("169" "16a" "16b"))
                                                        #(ribcage
                                                          (cvt v-reverse cvt*)
                                                          ((top) (top) (top))
                                                          ("15x" "15w" "15v"))
                                                        #(ribcage
                                                          #(pattern keys)
                                                          #((top) (top))
                                                          #("15t" "15u"))
                                                        #(ribcage
                                                          (gen-syntax-case
                                                            gen-clause
                                                            build-dispatch-call
                                                            convert-pattern)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("15s"
                                                           "15r"
                                                           "15q"
                                                           "15p"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("5l"
                                                           "5k"
                                                           "5j"
                                                           "5i"
                                                           "5h"
                                                           "5g"
                                                           "5f"
                                                           "5e"
                                                           "5d"
                                                           "5c"
                                                           "5b"
                                                           "5a"
                                                           "59"
                                                           "58"
                                                           "57"
                                                           "56"
                                                           "55"
                                                           "54"
                                                           "53"
                                                           "52"
                                                           "51"
                                                           "50"
                                                           "4z"
                                                           "4y"
                                                           "4x"
                                                           "4w"
                                                           "4v"
                                                           "4u"
                                                           "4t"
                                                           "4s"
                                                           "4r"
                                                           "4q"
                                                           "4p"
                                                           "4o"
                                                           "4n"
                                                           "4m"
                                                           "4l"
                                                           "4k"
                                                           "4j"
                                                           "4i"
                                                           "4h"
                                                           "4g"
                                                           "4f"
                                                           "4e"
                                                           "4d"
                                                           "4c"
                                                           "4b"
                                                           "4a"
                                                           "49"
                                                           "48"
                                                           "47"
                                                           "46"
                                                           "45"
                                                           "44"
                                                           "43"
                                                           "42"
                                                           "41"
                                                           "40"
                                                           "3z"
                                                           "3y"
                                                           "3x"
                                                           "3w"
                                                           "3v"
                                                           "3u"
                                                           "3t"
                                                           "3s"
                                                           "3r"
                                                           "3q"
                                                           "3p"
                                                           "3o"
                                                           "3n"
                                                           "3m"
                                                           "3l"
                                                           "3k"
                                                           "3j"
                                                           "3i"
                                                           "3h"
                                                           "3g"
                                                           "3f"
                                                           "3e"
                                                           "3d"
                                                           "3c"
                                                           "3b"
                                                           "3a"
                                                           "39"
                                                           "38"
                                                           "37"
                                                           "36"
                                                           "35"
                                                           "34"
                                                           "33"
                                                           "32"
                                                           "31"
                                                           "30"
                                                           "2z"
                                                           "2y"
                                                           "2x"
                                                           "2w"
                                                           "2v"
                                                           "2u"
                                                           "2t"
                                                           "2s"
                                                           "2r"
                                                           "2q"
                                                           "2p"
                                                           "2o"
                                                           "2n"
                                                           "2m"
                                                           "2l"
                                                           "2k"
                                                           "2j"
                                                           "2i"
                                                           "2h"
                                                           "2g"
                                                           "2f"
                                                           "2e"
                                                           "2d"
                                                           "2c"
                                                           "2b"
                                                           "2a"
                                                           "29"
                                                           "28"
                                                           "27"
                                                           "26"
                                                           "25"
                                                           "24"
                                                           "23"
                                                           "22"
                                                           "21"
                                                           "20"
                                                           "1z"
                                                           "1y"
                                                           "1x"
                                                           "1w"
                                                           "1v"
                                                           "1u"
                                                           "1t"
                                                           "1s"
                                                           "1r"
                                                           "1q"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("8" "7" "6")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         '_
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p n ids)
                                               #((top) (top) (top))
                                               #("169" "16a" "16b"))
                                             #(ribcage
                                               (cvt v-reverse cvt*)
                                               ((top) (top) (top))
                                               ("15x" "15w" "15v"))
                                             #(ribcage
                                               #(pattern keys)
                                               #((top) (top))
                                               #("15t" "15u"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("15s" "15r" "15q" "15p"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("5l"
                                                "5k"
                                                "5j"
                                                "5i"
                                                "5h"
                                                "5g"
                                                "5f"
                                                "5e"
                                                "5d"
                                                "5c"
                                                "5b"
                                                "5a"
                                                "59"
                                                "58"
                                                "57"
                                                "56"
                                                "55"
                                                "54"
                                                "53"
                                                "52"
                                                "51"
                                                "50"
                                                "4z"
                                                "4y"
                                                "4x"
                                                "4w"
                                                "4v"
                                                "4u"
                                                "4t"
                                                "4s"
                                                "4r"
                                                "4q"
                                                "4p"
                                                "4o"
                                                "4n"
                                                "4m"
                                                "4l"
                                                "4k"
                                                "4j"
                                                "4i"
                                                "4h"
                                                "4g"
                                                "4f"
                                                "4e"
                                                "4d"
                                                "4c"
                                                "4b"
                                                "4a"
                                                "49"
                                                "48"
                                                "47"
                                                "46"
                                                "45"
                                                "44"
                                                "43"
                                                "42"
                                                "41"
                                                "40"
                                                "3z"
                                                "3y"
                                                "3x"
                                                "3w"
                                                "3v"
                                                "3u"
                                                "3t"
                                                "3s"
                                                "3r"
                                                "3q"
                                                "3p"
                                                "3o"
                                                "3n"
                                                "3m"
                                                "3l"
                                                "3k"
                                                "3j"
                                                "3i"
                                                "3h"
                                                "3g"
                                                "3f"
                                                "3e"
                                                "3d"
                                                "3c"
                                                "3b"
                                                "3a"
                                                "39"
                                                "38"
                                                "37"
                                                "36"
                                                "35"
                                                "34"
                                                "33"
                                                "32"
                                                "31"
                                                "30"
                                                "2z"
                                                "2y"
                                                "2x"
                                                "2w"
                                                "2v"
                                                "2u"
                                                "2t"
                                                "2s"
                                                "2r"
                                                "2q"
                                                "2p"
                                                "2o"
                                                "2n"
                                                "2m"
                                                "2l"
                                                "2k"
                                                "2j"
                                                "2i"
                                                "2h"
                                                "2g"
                                                "2f"
                                                "2e"
                                                "2d"
                                                "2c"
                                                "2b"
                                                "2a"
                                                "29"
                                                "28"
                                                "27"
                                                "26"
                                                "25"
                                                "24"
                                                "23"
                                                "22"
                                                "21"
                                                "20"
                                                "1z"
                                                "1y"
                                                "1x"
                                                "1w"
                                                "1v"
                                                "1u"
                                                "1t"
                                                "1s"
                                                "1r"
                                                "1q"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("8" "7" "6")))
                                            (hygiene guile))))
                                (eq? (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                       #{p -ANAU$bmvAmthP7L7xwpOL}#
                                       '(()))
                                     (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("169" "16a" "16b"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("15x" "15w" "15v"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("15t" "15u"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("15s" "15r" "15q" "15p"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               with-transformer-environment
                                               transformer-environment
                                               resolve-identifier
                                               locally-bound-identifiers
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("5l"
                                              "5k"
                                              "5j"
                                              "5i"
                                              "5h"
                                              "5g"
                                              "5f"
                                              "5e"
                                              "5d"
                                              "5c"
                                              "5b"
                                              "5a"
                                              "59"
                                              "58"
                                              "57"
                                              "56"
                                              "55"
                                              "54"
                                              "53"
                                              "52"
                                              "51"
                                              "50"
                                              "4z"
                                              "4y"
                                              "4x"
                                              "4w"
                                              "4v"
                                              "4u"
                                              "4t"
                                              "4s"
                                              "4r"
                                              "4q"
                                              "4p"
                                              "4o"
                                              "4n"
                                              "4m"
                                              "4l"
                                              "4k"
                                              "4j"
                                              "4i"
                                              "4h"
                                              "4g"
                                              "4f"
                                              "4e"
                                              "4d"
                                              "4c"
                                              "4b"
                                              "4a"
                                              "49"
                                              "48"
                                              "47"
                                              "46"
                                              "45"
                                              "44"
                                              "43"
                                              "42"
                                              "41"
                                              "40"
                                              "3z"
                                              "3y"
                                              "3x"
                                              "3w"
                                              "3v"
                                              "3u"
                                              "3t"
                                              "3s"
                                              "3r"
                                              "3q"
                                              "3p"
                                              "3o"
                                              "3n"
                                              "3m"
                                              "3l"
                                              "3k"
                                              "3j"
                                              "3i"
                                              "3h"
                                              "3g"
                                              "3f"
                                              "3e"
                                              "3d"
                                              "3c"
                                              "3b"
                                              "3a"
                                              "39"
                                              "38"
                                              "37"
                                              "36"
                                              "35"
                                              "34"
                                              "33"
                                              "32"
                                              "31"
                                              "30"
                                              "2z"
                                              "2y"
                                              "2x"
                                              "2w"
                                              "2v"
                                              "2u"
                                              "2t"
                                              "2s"
                                              "2r"
                                              "2q"
                                              "2p"
                                              "2o"
                                              "2n"
                                              "2m"
                                              "2l"
                                              "2k"
                                              "2j"
                                              "2i"
                                              "2h"
                                              "2g"
                                              "2f"
                                              "2e"
                                              "2d"
                                              "2c"
                                              "2b"
                                              "2a"
                                              "29"
                                              "28"
                                              "27"
                                              "26"
                                              "25"
                                              "24"
                                              "23"
                                              "22"
                                              "21"
                                              "20"
                                              "1z"
                                              "1y"
                                              "1x"
                                              "1w"
                                              "1v"
                                              "1u"
                                              "1t"
                                              "1s"
                                              "1r"
                                              "1q"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("8" "7" "6")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            (values '_ #{ids -ANAU$bmvAmthP7L7xwpON}#)
                            (values
                              'any
                              (cons (cons #{p -ANAU$bmvAmthP7L7xwpOL}#
                                          #{n -ANAU$bmvAmthP7L7xwpOM}#)
                                    #{ids -ANAU$bmvAmthP7L7xwpON}#))))
                        (let ((#{tmp -ANAU$bmvAmthP7L7xwpTN}#
                                ($sc-dispatch
                                  #{p -ANAU$bmvAmthP7L7xwpOL}#
                                  '(any any))))
                          (if (if #{tmp -ANAU$bmvAmthP7L7xwpTN}#
                                (@apply
                                  (lambda (#{x -ANAU$bmvAmthP7L7xwpTR}#
                                           #{dots -ANAU$bmvAmthP7L7xwpTS}#)
                                    (if (if (if (vector?
                                                  #{dots -ANAU$bmvAmthP7L7xwpTS}#)
                                              (if (= (vector-length
                                                       #{dots -ANAU$bmvAmthP7L7xwpTS}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{dots -ANAU$bmvAmthP7L7xwpTS}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (symbol?
                                            (vector-ref
                                              #{dots -ANAU$bmvAmthP7L7xwpTS}#
                                              1))
                                          #f)
                                      (if (eq? (if (if (vector?
                                                         #{dots -ANAU$bmvAmthP7L7xwpTS}#)
                                                     (if (= (vector-length
                                                              #{dots -ANAU$bmvAmthP7L7xwpTS}#)
                                                            4)
                                                       (eq? (vector-ref
                                                              #{dots -ANAU$bmvAmthP7L7xwpTS}#
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref
                                                   #{dots -ANAU$bmvAmthP7L7xwpTS}#
                                                   1)
                                                 #{dots -ANAU$bmvAmthP7L7xwpTS}#)
                                               (if (if (= (vector-length
                                                            '#(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("p6"))
                                                                #(ribcage
                                                                  (lambda-var-list
                                                                    gen-var
                                                                    strip
                                                                    expand-lambda-case
                                                                    lambda*-formals
                                                                    expand-simple-lambda
                                                                    lambda-formals
                                                                    ellipsis?
                                                                    expand-void
                                                                    eval-local-transformer
                                                                    expand-local-syntax
                                                                    expand-body
                                                                    expand-macro
                                                                    expand-application
                                                                    expand-expr
                                                                    expand
                                                                    syntax-type
                                                                    parse-when-list
                                                                    expand-install-global
                                                                    expand-top-sequence
                                                                    expand-sequence
                                                                    source-wrap
                                                                    wrap
                                                                    bound-id-member?
                                                                    distinct-bound-ids?
                                                                    valid-bound-ids?
                                                                    bound-id=?
                                                                    free-id=?
                                                                    with-transformer-environment
                                                                    transformer-environment
                                                                    resolve-identifier
                                                                    locally-bound-identifiers
                                                                    id-var-name
                                                                    same-marks?
                                                                    join-marks
                                                                    join-wraps
                                                                    smart-append
                                                                    make-binding-wrap
                                                                    extend-ribcage!
                                                                    make-empty-ribcage
                                                                    new-mark
                                                                    anti-mark
                                                                    the-anti-mark
                                                                    top-marked?
                                                                    top-wrap
                                                                    empty-wrap
                                                                    set-ribcage-labels!
                                                                    set-ribcage-marks!
                                                                    set-ribcage-symnames!
                                                                    ribcage-labels
                                                                    ribcage-marks
                                                                    ribcage-symnames
                                                                    ribcage?
                                                                    make-ribcage
                                                                    gen-labels
                                                                    gen-label
                                                                    make-rename
                                                                    rename-marks
                                                                    rename-new
                                                                    rename-old
                                                                    subst-rename?
                                                                    wrap-subst
                                                                    wrap-marks
                                                                    make-wrap
                                                                    id-sym-name&marks
                                                                    id-sym-name
                                                                    id?
                                                                    nonsymbol-id?
                                                                    global-extend
                                                                    lookup
                                                                    macros-only-env
                                                                    extend-var-env
                                                                    extend-env
                                                                    null-env
                                                                    binding-value
                                                                    binding-type
                                                                    make-binding
                                                                    arg-check
                                                                    source-annotation
                                                                    no-source
                                                                    set-syntax-object-module!
                                                                    set-syntax-object-wrap!
                                                                    set-syntax-object-expression!
                                                                    syntax-object-module
                                                                    syntax-object-wrap
                                                                    syntax-object-expression
                                                                    syntax-object?
                                                                    make-syntax-object
                                                                    build-lexical-var
                                                                    build-letrec
                                                                    build-named-let
                                                                    build-let
                                                                    build-sequence
                                                                    build-data
                                                                    build-primref
                                                                    build-lambda-case
                                                                    build-case-lambda
                                                                    build-simple-lambda
                                                                    build-global-definition
                                                                    build-global-assignment
                                                                    build-global-reference
                                                                    analyze-variable
                                                                    build-lexical-assignment
                                                                    build-lexical-reference
                                                                    build-dynlet
                                                                    build-conditional
                                                                    build-application
                                                                    build-void
                                                                    maybe-name-value!
                                                                    decorate-source
                                                                    get-global-definition-hook
                                                                    put-global-definition-hook
                                                                    gensym-hook
                                                                    local-eval-hook
                                                                    top-level-eval-hook
                                                                    fx<
                                                                    fx=
                                                                    fx-
                                                                    fx+
                                                                    set-lambda-meta!
                                                                    lambda-meta
                                                                    lambda?
                                                                    make-dynlet
                                                                    make-letrec
                                                                    make-let
                                                                    make-lambda-case
                                                                    make-lambda
                                                                    make-sequence
                                                                    make-application
                                                                    make-conditional
                                                                    make-toplevel-define
                                                                    make-toplevel-set
                                                                    make-toplevel-ref
                                                                    make-module-set
                                                                    make-module-ref
                                                                    make-lexical-set
                                                                    make-lexical-ref
                                                                    make-primitive-ref
                                                                    make-const
                                                                    make-void)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("5l"
                                                                   "5k"
                                                                   "5j"
                                                                   "5i"
                                                                   "5h"
                                                                   "5g"
                                                                   "5f"
                                                                   "5e"
                                                                   "5d"
                                                                   "5c"
                                                                   "5b"
                                                                   "5a"
                                                                   "59"
                                                                   "58"
                                                                   "57"
                                                                   "56"
                                                                   "55"
                                                                   "54"
                                                                   "53"
                                                                   "52"
                                                                   "51"
                                                                   "50"
                                                                   "4z"
                                                                   "4y"
                                                                   "4x"
                                                                   "4w"
                                                                   "4v"
                                                                   "4u"
                                                                   "4t"
                                                                   "4s"
                                                                   "4r"
                                                                   "4q"
                                                                   "4p"
                                                                   "4o"
                                                                   "4n"
                                                                   "4m"
                                                                   "4l"
                                                                   "4k"
                                                                   "4j"
                                                                   "4i"
                                                                   "4h"
                                                                   "4g"
                                                                   "4f"
                                                                   "4e"
                                                                   "4d"
                                                                   "4c"
                                                                   "4b"
                                                                   "4a"
                                                                   "49"
                                                                   "48"
                                                                   "47"
                                                                   "46"
                                                                   "45"
                                                                   "44"
                                                                   "43"
                                                                   "42"
                                                                   "41"
                                                                   "40"
                                                                   "3z"
                                                                   "3y"
                                                                   "3x"
                                                                   "3w"
                                                                   "3v"
                                                                   "3u"
                                                                   "3t"
                                                                   "3s"
                                                                   "3r"
                                                                   "3q"
                                                                   "3p"
                                                                   "3o"
                                                                   "3n"
                                                                   "3m"
                                                                   "3l"
                                                                   "3k"
                                                                   "3j"
                                                                   "3i"
                                                                   "3h"
                                                                   "3g"
                                                                   "3f"
                                                                   "3e"
                                                                   "3d"
                                                                   "3c"
                                                                   "3b"
                                                                   "3a"
                                                                   "39"
                                                                   "38"
                                                                   "37"
                                                                   "36"
                                                                   "35"
                                                                   "34"
                                                                   "33"
                                                                   "32"
                                                                   "31"
                                                                   "30"
                                                                   "2z"
                                                                   "2y"
                                                                   "2x"
                                                                   "2w"
                                                                   "2v"
                                                                   "2u"
                                                                   "2t"
                                                                   "2s"
                                                                   "2r"
                                                                   "2q"
                                                                   "2p"
                                                                   "2o"
                                                                   "2n"
                                                                   "2m"
                                                                   "2l"
                                                                   "2k"
                                                                   "2j"
                                                                   "2i"
                                                                   "2h"
                                                                   "2g"
                                                                   "2f"
                                                                   "2e"
                                                                   "2d"
                                                                   "2c"
                                                                   "2b"
                                                                   "2a"
                                                                   "29"
                                                                   "28"
                                                                   "27"
                                                                   "26"
                                                                   "25"
                                                                   "24"
                                                                   "23"
                                                                   "22"
                                                                   "21"
                                                                   "20"
                                                                   "1z"
                                                                   "1y"
                                                                   "1x"
                                                                   "1w"
                                                                   "1v"
                                                                   "1u"
                                                                   "1t"
                                                                   "1s"
                                                                   "1r"
                                                                   "1q"))
                                                                #(ribcage
                                                                  (define-structure
                                                                    define-expansion-accessors
                                                                    define-expansion-constructors)
                                                                  ((top)
                                                                   (top)
                                                                   (top))
                                                                  ("8"
                                                                   "7"
                                                                   "6")))
                                                               (hygiene
                                                                 guile)))
                                                          4)
                                                     #t
                                                     #f)
                                                 '...
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("p6"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         with-transformer-environment
                                                         transformer-environment
                                                         resolve-identifier
                                                         locally-bound-identifiers
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("5l"
                                                        "5k"
                                                        "5j"
                                                        "5i"
                                                        "5h"
                                                        "5g"
                                                        "5f"
                                                        "5e"
                                                        "5d"
                                                        "5c"
                                                        "5b"
                                                        "5a"
                                                        "59"
                                                        "58"
                                                        "57"
                                                        "56"
                                                        "55"
                                                        "54"
                                                        "53"
                                                        "52"
                                                        "51"
                                                        "50"
                                                        "4z"
                                                        "4y"
                                                        "4x"
                                                        "4w"
                                                        "4v"
                                                        "4u"
                                                        "4t"
                                                        "4s"
                                                        "4r"
                                                        "4q"
                                                        "4p"
                                                        "4o"
                                                        "4n"
                                                        "4m"
                                                        "4l"
                                                        "4k"
                                                        "4j"
                                                        "4i"
                                                        "4h"
                                                        "4g"
                                                        "4f"
                                                        "4e"
                                                        "4d"
                                                        "4c"
                                                        "4b"
                                                        "4a"
                                                        "49"
                                                        "48"
                                                        "47"
                                                        "46"
                                                        "45"
                                                        "44"
                                                        "43"
                                                        "42"
                                                        "41"
                                                        "40"
                                                        "3z"
                                                        "3y"
                                                        "3x"
                                                        "3w"
                                                        "3v"
                                                        "3u"
                                                        "3t"
                                                        "3s"
                                                        "3r"
                                                        "3q"
                                                        "3p"
                                                        "3o"
                                                        "3n"
                                                        "3m"
                                                        "3l"
                                                        "3k"
                                                        "3j"
                                                        "3i"
                                                        "3h"
                                                        "3g"
                                                        "3f"
                                                        "3e"
                                                        "3d"
                                                        "3c"
                                                        "3b"
                                                        "3a"
                                                        "39"
                                                        "38"
                                                        "37"
                                                        "36"
                                                        "35"
                                                        "34"
                                                        "33"
                                                        "32"
                                                        "31"
                                                        "30"
                                                        "2z"
                                                        "2y"
                                                        "2x"
                                                        "2w"
                                                        "2v"
                                                        "2u"
                                                        "2t"
                                                        "2s"
                                                        "2r"
                                                        "2q"
                                                        "2p"
                                                        "2o"
                                                        "2n"
                                                        "2m"
                                                        "2l"
                                                        "2k"
                                                        "2j"
                                                        "2i"
                                                        "2h"
                                                        "2g"
                                                        "2f"
                                                        "2e"
                                                        "2d"
                                                        "2c"
                                                        "2b"
                                                        "2a"
                                                        "29"
                                                        "28"
                                                        "27"
                                                        "26"
                                                        "25"
                                                        "24"
                                                        "23"
                                                        "22"
                                                        "21"
                                                        "20"
                                                        "1z"
                                                        "1y"
                                                        "1x"
                                                        "1w"
                                                        "1v"
                                                        "1u"
                                                        "1t"
                                                        "1s"
                                                        "1r"
                                                        "1q"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("8" "7" "6")))
                                                    (hygiene guile))))
                                        (eq? (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                               #{dots -ANAU$bmvAmthP7L7xwpTS}#
                                               '(()))
                                             (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("p6"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       with-transformer-environment
                                                       transformer-environment
                                                       resolve-identifier
                                                       locally-bound-identifiers
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("5l"
                                                      "5k"
                                                      "5j"
                                                      "5i"
                                                      "5h"
                                                      "5g"
                                                      "5f"
                                                      "5e"
                                                      "5d"
                                                      "5c"
                                                      "5b"
                                                      "5a"
                                                      "59"
                                                      "58"
                                                      "57"
                                                      "56"
                                                      "55"
                                                      "54"
                                                      "53"
                                                      "52"
                                                      "51"
                                                      "50"
                                                      "4z"
                                                      "4y"
                                                      "4x"
                                                      "4w"
                                                      "4v"
                                                      "4u"
                                                      "4t"
                                                      "4s"
                                                      "4r"
                                                      "4q"
                                                      "4p"
                                                      "4o"
                                                      "4n"
                                                      "4m"
                                                      "4l"
                                                      "4k"
                                                      "4j"
                                                      "4i"
                                                      "4h"
                                                      "4g"
                                                      "4f"
                                                      "4e"
                                                      "4d"
                                                      "4c"
                                                      "4b"
                                                      "4a"
                                                      "49"
                                                      "48"
                                                      "47"
                                                      "46"
                                                      "45"
                                                      "44"
                                                      "43"
                                                      "42"
                                                      "41"
                                                      "40"
                                                      "3z"
                                                      "3y"
                                                      "3x"
                                                      "3w"
                                                      "3v"
                                                      "3u"
                                                      "3t"
                                                      "3s"
                                                      "3r"
                                                      "3q"
                                                      "3p"
                                                      "3o"
                                                      "3n"
                                                      "3m"
                                                      "3l"
                                                      "3k"
                                                      "3j"
                                                      "3i"
                                                      "3h"
                                                      "3g"
                                                      "3f"
                                                      "3e"
                                                      "3d"
                                                      "3c"
                                                      "3b"
                                                      "3a"
                                                      "39"
                                                      "38"
                                                      "37"
                                                      "36"
                                                      "35"
                                                      "34"
                                                      "33"
                                                      "32"
                                                      "31"
                                                      "30"
                                                      "2z"
                                                      "2y"
                                                      "2x"
                                                      "2w"
                                                      "2v"
                                                      "2u"
                                                      "2t"
                                                      "2s"
                                                      "2r"
                                                      "2q"
                                                      "2p"
                                                      "2o"
                                                      "2n"
                                                      "2m"
                                                      "2l"
                                                      "2k"
                                                      "2j"
                                                      "2i"
                                                      "2h"
                                                      "2g"
                                                      "2f"
                                                      "2e"
                                                      "2d"
                                                      "2c"
                                                      "2b"
                                                      "2a"
                                                      "29"
                                                      "28"
                                                      "27"
                                                      "26"
                                                      "25"
                                                      "24"
                                                      "23"
                                                      "22"
                                                      "21"
                                                      "20"
                                                      "1z"
                                                      "1y"
                                                      "1x"
                                                      "1w"
                                                      "1v"
                                                      "1u"
                                                      "1t"
                                                      "1s"
                                                      "1r"
                                                      "1q"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("8" "7" "6")))
                                                  (hygiene guile))
                                               '(())))
                                        #f)
                                      #f))
                                  #{tmp -ANAU$bmvAmthP7L7xwpTN}#)
                                #f)
                            (@apply
                              (lambda (#{x -ANAU$bmvAmthP7L7xwpU2}#
                                       #{dots -ANAU$bmvAmthP7L7xwpU3}#)
                                (call-with-values
                                  (lambda ()
                                    (#{cvt -ANAU$bmvAmthP7L7xwpOI}#
                                      #{x -ANAU$bmvAmthP7L7xwpU2}#
                                      (#{1+}# #{n -ANAU$bmvAmthP7L7xwpOM}#)
                                      #{ids -ANAU$bmvAmthP7L7xwpON}#))
                                  (lambda (#{p -ANAU$bmvAmthP7L7xwpU4}#
                                           #{ids -ANAU$bmvAmthP7L7xwpU5}#)
                                    (values
                                      (if (eq? #{p -ANAU$bmvAmthP7L7xwpU4}#
                                               'any)
                                        'each-any
                                        (vector
                                          'each
                                          #{p -ANAU$bmvAmthP7L7xwpU4}#))
                                      #{ids -ANAU$bmvAmthP7L7xwpU5}#))))
                              #{tmp -ANAU$bmvAmthP7L7xwpTN}#)
                            (let ((#{tmp -ANAU$bmvAmthP7L7xwpU6}#
                                    ($sc-dispatch
                                      #{p -ANAU$bmvAmthP7L7xwpOL}#
                                      '(any any . any))))
                              (if (if #{tmp -ANAU$bmvAmthP7L7xwpU6}#
                                    (@apply
                                      (lambda (#{x -ANAU$bmvAmthP7L7xwpU$}#
                                               #{dots -ANAU$bmvAmthP7L7xwpU@}#
                                               #{ys -ANAU$bmvAmthP7L7xwpVA}#)
                                        (if (if (if (vector?
                                                      #{dots -ANAU$bmvAmthP7L7xwpU@}#)
                                                  (if (= (vector-length
                                                           #{dots -ANAU$bmvAmthP7L7xwpU@}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{dots -ANAU$bmvAmthP7L7xwpU@}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref
                                                  #{dots -ANAU$bmvAmthP7L7xwpU@}#
                                                  1))
                                              #f)
                                          (if (eq? (if (if (vector?
                                                             #{dots -ANAU$bmvAmthP7L7xwpU@}#)
                                                         (if (= (vector-length
                                                                  #{dots -ANAU$bmvAmthP7L7xwpU@}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{dots -ANAU$bmvAmthP7L7xwpU@}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{dots -ANAU$bmvAmthP7L7xwpU@}#
                                                       1)
                                                     #{dots -ANAU$bmvAmthP7L7xwpU@}#)
                                                   (if (if (= (vector-length
                                                                '#(syntax-object
                                                                   ...
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(x)
                                                                      #((top))
                                                                      #("p6"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        expand-lambda-case
                                                                        lambda*-formals
                                                                        expand-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        expand-void
                                                                        eval-local-transformer
                                                                        expand-local-syntax
                                                                        expand-body
                                                                        expand-macro
                                                                        expand-application
                                                                        expand-expr
                                                                        expand
                                                                        syntax-type
                                                                        parse-when-list
                                                                        expand-install-global
                                                                        expand-top-sequence
                                                                        expand-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        with-transformer-environment
                                                                        transformer-environment
                                                                        resolve-identifier
                                                                        locally-bound-identifiers
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("5l"
                                                                       "5k"
                                                                       "5j"
                                                                       "5i"
                                                                       "5h"
                                                                       "5g"
                                                                       "5f"
                                                                       "5e"
                                                                       "5d"
                                                                       "5c"
                                                                       "5b"
                                                                       "5a"
                                                                       "59"
                                                                       "58"
                                                                       "57"
                                                                       "56"
                                                                       "55"
                                                                       "54"
                                                                       "53"
                                                                       "52"
                                                                       "51"
                                                                       "50"
                                                                       "4z"
                                                                       "4y"
                                                                       "4x"
                                                                       "4w"
                                                                       "4v"
                                                                       "4u"
                                                                       "4t"
                                                                       "4s"
                                                                       "4r"
                                                                       "4q"
                                                                       "4p"
                                                                       "4o"
                                                                       "4n"
                                                                       "4m"
                                                                       "4l"
                                                                       "4k"
                                                                       "4j"
                                                                       "4i"
                                                                       "4h"
                                                                       "4g"
                                                                       "4f"
                                                                       "4e"
                                                                       "4d"
                                                                       "4c"
                                                                       "4b"
                                                                       "4a"
                                                                       "49"
                                                                       "48"
                                                                       "47"
                                                                       "46"
                                                                       "45"
                                                                       "44"
                                                                       "43"
                                                                       "42"
                                                                       "41"
                                                                       "40"
                                                                       "3z"
                                                                       "3y"
                                                                       "3x"
                                                                       "3w"
                                                                       "3v"
                                                                       "3u"
                                                                       "3t"
                                                                       "3s"
                                                                       "3r"
                                                                       "3q"
                                                                       "3p"
                                                                       "3o"
                                                                       "3n"
                                                                       "3m"
                                                                       "3l"
                                                                       "3k"
                                                                       "3j"
                                                                       "3i"
                                                                       "3h"
                                                                       "3g"
                                                                       "3f"
                                                                       "3e"
                                                                       "3d"
                                                                       "3c"
                                                                       "3b"
                                                                       "3a"
                                                                       "39"
                                                                       "38"
                                                                       "37"
                                                                       "36"
                                                                       "35"
                                                                       "34"
                                                                       "33"
                                                                       "32"
                                                                       "31"
                                                                       "30"
                                                                       "2z"
                                                                       "2y"
                                                                       "2x"
                                                                       "2w"
                                                                       "2v"
                                                                       "2u"
                                                                       "2t"
                                                                       "2s"
                                                                       "2r"
                                                                       "2q"
                                                                       "2p"
                                                                       "2o"
                                                                       "2n"
                                                                       "2m"
                                                                       "2l"
                                                                       "2k"
                                                                       "2j"
                                                                       "2i"
                                                                       "2h"
                                                                       "2g"
                                                                       "2f"
                                                                       "2e"
                                                                       "2d"
                                                                       "2c"
                                                                       "2b"
                                                                       "2a"
                                                                       "29"
                                                                       "28"
                                                                       "27"
                                                                       "26"
                                                                       "25"
                                                                       "24"
                                                                       "23"
                                                                       "22"
                                                                       "21"
                                                                       "20"
                                                                       "1z"
                                                                       "1y"
                                                                       "1x"
                                                                       "1w"
                                                                       "1v"
                                                                       "1u"
                                                                       "1t"
                                                                       "1s"
                                                                       "1r"
                                                                       "1q"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors)
                                                                      ((top)
                                                                       (top)
                                                                       (top))
                                                                      ("8"
                                                                       "7"
                                                                       "6")))
                                                                   (hygiene
                                                                     guile)))
                                                              4)
                                                         #t
                                                         #f)
                                                     '...
                                                     '#(syntax-object
                                                        ...
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("p6"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             with-transformer-environment
                                                             transformer-environment
                                                             resolve-identifier
                                                             locally-bound-identifiers
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("5l"
                                                            "5k"
                                                            "5j"
                                                            "5i"
                                                            "5h"
                                                            "5g"
                                                            "5f"
                                                            "5e"
                                                            "5d"
                                                            "5c"
                                                            "5b"
                                                            "5a"
                                                            "59"
                                                            "58"
                                                            "57"
                                                            "56"
                                                            "55"
                                                            "54"
                                                            "53"
                                                            "52"
                                                            "51"
                                                            "50"
                                                            "4z"
                                                            "4y"
                                                            "4x"
                                                            "4w"
                                                            "4v"
                                                            "4u"
                                                            "4t"
                                                            "4s"
                                                            "4r"
                                                            "4q"
                                                            "4p"
                                                            "4o"
                                                            "4n"
                                                            "4m"
                                                            "4l"
                                                            "4k"
                                                            "4j"
                                                            "4i"
                                                            "4h"
                                                            "4g"
                                                            "4f"
                                                            "4e"
                                                            "4d"
                                                            "4c"
                                                            "4b"
                                                            "4a"
                                                            "49"
                                                            "48"
                                                            "47"
                                                            "46"
                                                            "45"
                                                            "44"
                                                            "43"
                                                            "42"
                                                            "41"
                                                            "40"
                                                            "3z"
                                                            "3y"
                                                            "3x"
                                                            "3w"
                                                            "3v"
                                                            "3u"
                                                            "3t"
                                                            "3s"
                                                            "3r"
                                                            "3q"
                                                            "3p"
                                                            "3o"
                                                            "3n"
                                                            "3m"
                                                            "3l"
                                                            "3k"
                                                            "3j"
                                                            "3i"
                                                            "3h"
                                                            "3g"
                                                            "3f"
                                                            "3e"
                                                            "3d"
                                                            "3c"
                                                            "3b"
                                                            "3a"
                                                            "39"
                                                            "38"
                                                            "37"
                                                            "36"
                                                            "35"
                                                            "34"
                                                            "33"
                                                            "32"
                                                            "31"
                                                            "30"
                                                            "2z"
                                                            "2y"
                                                            "2x"
                                                            "2w"
                                                            "2v"
                                                            "2u"
                                                            "2t"
                                                            "2s"
                                                            "2r"
                                                            "2q"
                                                            "2p"
                                                            "2o"
                                                            "2n"
                                                            "2m"
                                                            "2l"
                                                            "2k"
                                                            "2j"
                                                            "2i"
                                                            "2h"
                                                            "2g"
                                                            "2f"
                                                            "2e"
                                                            "2d"
                                                            "2c"
                                                            "2b"
                                                            "2a"
                                                            "29"
                                                            "28"
                                                            "27"
                                                            "26"
                                                            "25"
                                                            "24"
                                                            "23"
                                                            "22"
                                                            "21"
                                                            "20"
                                                            "1z"
                                                            "1y"
                                                            "1x"
                                                            "1w"
                                                            "1v"
                                                            "1u"
                                                            "1t"
                                                            "1s"
                                                            "1r"
                                                            "1q"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("8" "7" "6")))
                                                        (hygiene guile))))
                                            (eq? (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                                   #{dots -ANAU$bmvAmthP7L7xwpU@}#
                                                   '(()))
                                                 (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("p6"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("5l"
                                                          "5k"
                                                          "5j"
                                                          "5i"
                                                          "5h"
                                                          "5g"
                                                          "5f"
                                                          "5e"
                                                          "5d"
                                                          "5c"
                                                          "5b"
                                                          "5a"
                                                          "59"
                                                          "58"
                                                          "57"
                                                          "56"
                                                          "55"
                                                          "54"
                                                          "53"
                                                          "52"
                                                          "51"
                                                          "50"
                                                          "4z"
                                                          "4y"
                                                          "4x"
                                                          "4w"
                                                          "4v"
                                                          "4u"
                                                          "4t"
                                                          "4s"
                                                          "4r"
                                                          "4q"
                                                          "4p"
                                                          "4o"
                                                          "4n"
                                                          "4m"
                                                          "4l"
                                                          "4k"
                                                          "4j"
                                                          "4i"
                                                          "4h"
                                                          "4g"
                                                          "4f"
                                                          "4e"
                                                          "4d"
                                                          "4c"
                                                          "4b"
                                                          "4a"
                                                          "49"
                                                          "48"
                                                          "47"
                                                          "46"
                                                          "45"
                                                          "44"
                                                          "43"
                                                          "42"
                                                          "41"
                                                          "40"
                                                          "3z"
                                                          "3y"
                                                          "3x"
                                                          "3w"
                                                          "3v"
                                                          "3u"
                                                          "3t"
                                                          "3s"
                                                          "3r"
                                                          "3q"
                                                          "3p"
                                                          "3o"
                                                          "3n"
                                                          "3m"
                                                          "3l"
                                                          "3k"
                                                          "3j"
                                                          "3i"
                                                          "3h"
                                                          "3g"
                                                          "3f"
                                                          "3e"
                                                          "3d"
                                                          "3c"
                                                          "3b"
                                                          "3a"
                                                          "39"
                                                          "38"
                                                          "37"
                                                          "36"
                                                          "35"
                                                          "34"
                                                          "33"
                                                          "32"
                                                          "31"
                                                          "30"
                                                          "2z"
                                                          "2y"
                                                          "2x"
                                                          "2w"
                                                          "2v"
                                                          "2u"
                                                          "2t"
                                                          "2s"
                                                          "2r"
                                                          "2q"
                                                          "2p"
                                                          "2o"
                                                          "2n"
                                                          "2m"
                                                          "2l"
                                                          "2k"
                                                          "2j"
                                                          "2i"
                                                          "2h"
                                                          "2g"
                                                          "2f"
                                                          "2e"
                                                          "2d"
                                                          "2c"
                                                          "2b"
                                                          "2a"
                                                          "29"
                                                          "28"
                                                          "27"
                                                          "26"
                                                          "25"
                                                          "24"
                                                          "23"
                                                          "22"
                                                          "21"
                                                          "20"
                                                          "1z"
                                                          "1y"
                                                          "1x"
                                                          "1w"
                                                          "1v"
                                                          "1u"
                                                          "1t"
                                                          "1s"
                                                          "1r"
                                                          "1q"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("8" "7" "6")))
                                                      (hygiene guile))
                                                   '(())))
                                            #f)
                                          #f))
                                      #{tmp -ANAU$bmvAmthP7L7xwpU6}#)
                                    #f)
                                (@apply
                                  (lambda (#{x -ANAU$bmvAmthP7L7xwpWk}#
                                           #{dots -ANAU$bmvAmthP7L7xwpWl}#
                                           #{ys -ANAU$bmvAmthP7L7xwpWm}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt* -ANAU$bmvAmthP7L7xwpOG}#
                                          #{ys -ANAU$bmvAmthP7L7xwpWm}#
                                          #{n -ANAU$bmvAmthP7L7xwpOM}#
                                          #{ids -ANAU$bmvAmthP7L7xwpON}#))
                                      (lambda (#{ys -ANAU$bmvAmthP7L7xwpWp}#
                                               #{ids -ANAU$bmvAmthP7L7xwpWq}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt -ANAU$bmvAmthP7L7xwpOI}#
                                              #{x -ANAU$bmvAmthP7L7xwpWk}#
                                              (#{1+}# #{n -ANAU$bmvAmthP7L7xwpOM}#)
                                              #{ids -ANAU$bmvAmthP7L7xwpWq}#))
                                          (lambda (#{x -ANAU$bmvAmthP7L7xwpWr}#
                                                   #{ids -ANAU$bmvAmthP7L7xwpWs}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{v-reverse -ANAU$bmvAmthP7L7xwpOH}#
                                                  #{ys -ANAU$bmvAmthP7L7xwpWp}#))
                                              (lambda (#{ys -ANAU$bmvAmthP7L7xwpXN}#
                                                       #{e -ANAU$bmvAmthP7L7xwpXO}#)
                                                (values
                                                  (vector
                                                    'each+
                                                    #{x -ANAU$bmvAmthP7L7xwpWr}#
                                                    #{ys -ANAU$bmvAmthP7L7xwpXN}#
                                                    #{e -ANAU$bmvAmthP7L7xwpXO}#)
                                                  #{ids -ANAU$bmvAmthP7L7xwpWs}#))))))))
                                  #{tmp -ANAU$bmvAmthP7L7xwpU6}#)
                                (let ((#{tmp -ANAU$bmvAmthP7L7xwpXP}#
                                        ($sc-dispatch
                                          #{p -ANAU$bmvAmthP7L7xwpOL}#
                                          '(any . any))))
                                  (if #{tmp -ANAU$bmvAmthP7L7xwpXP}#
                                    (@apply
                                      (lambda (#{x -ANAU$bmvAmthP7L7xwpXT}#
                                               #{y -ANAU$bmvAmthP7L7xwpXU}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt -ANAU$bmvAmthP7L7xwpOI}#
                                              #{y -ANAU$bmvAmthP7L7xwpXU}#
                                              #{n -ANAU$bmvAmthP7L7xwpOM}#
                                              #{ids -ANAU$bmvAmthP7L7xwpON}#))
                                          (lambda (#{y -ANAU$bmvAmthP7L7xwpXV}#
                                                   #{ids -ANAU$bmvAmthP7L7xwpXW}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{cvt -ANAU$bmvAmthP7L7xwpOI}#
                                                  #{x -ANAU$bmvAmthP7L7xwpXT}#
                                                  #{n -ANAU$bmvAmthP7L7xwpOM}#
                                                  #{ids -ANAU$bmvAmthP7L7xwpXW}#))
                                              (lambda (#{x -ANAU$bmvAmthP7L7xwpXX}#
                                                       #{ids -ANAU$bmvAmthP7L7xwpXY}#)
                                                (values
                                                  (cons #{x -ANAU$bmvAmthP7L7xwpXX}#
                                                        #{y -ANAU$bmvAmthP7L7xwpXV}#)
                                                  #{ids -ANAU$bmvAmthP7L7xwpXY}#))))))
                                      #{tmp -ANAU$bmvAmthP7L7xwpXP}#)
                                    (let ((#{tmp -ANAU$bmvAmthP7L7xwpXZ}#
                                            ($sc-dispatch
                                              #{p -ANAU$bmvAmthP7L7xwpOL}#
                                              '())))
                                      (if #{tmp -ANAU$bmvAmthP7L7xwpXZ}#
                                        (@apply
                                          (lambda ()
                                            (values
                                              '()
                                              #{ids -ANAU$bmvAmthP7L7xwpON}#))
                                          #{tmp -ANAU$bmvAmthP7L7xwpXZ}#)
                                        (let ((#{tmp -ANAU$bmvAmthP7L7xwpXd}#
                                                ($sc-dispatch
                                                  #{p -ANAU$bmvAmthP7L7xwpOL}#
                                                  '#(vector each-any))))
                                          (if #{tmp -ANAU$bmvAmthP7L7xwpXd}#
                                            (@apply
                                              (lambda (#{x -ANAU$bmvAmthP7L7xwpXh}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt -ANAU$bmvAmthP7L7xwpOI}#
                                                      #{x -ANAU$bmvAmthP7L7xwpXh}#
                                                      #{n -ANAU$bmvAmthP7L7xwpOM}#
                                                      #{ids -ANAU$bmvAmthP7L7xwpON}#))
                                                  (lambda (#{p -ANAU$bmvAmthP7L7xwpXi}#
                                                           #{ids -ANAU$bmvAmthP7L7xwpXj}#)
                                                    (values
                                                      (vector
                                                        'vector
                                                        #{p -ANAU$bmvAmthP7L7xwpXi}#)
                                                      #{ids -ANAU$bmvAmthP7L7xwpXj}#))))
                                              #{tmp -ANAU$bmvAmthP7L7xwpXd}#)
                                            (values
                                              (vector
                                                'atom
                                                (#{strip -ANAU$bmvAmthP7L7xwnOR}#
                                                  #{p -ANAU$bmvAmthP7L7xwpOL}#
                                                  '(())))
                                              #{ids -ANAU$bmvAmthP7L7xwpON}#)))))))))))))))
                 (#{cvt -ANAU$bmvAmthP7L7xwpOI}#
                   #{pattern -ANAU$bmvAmthP7L7xwpOE}#
                   0
                   '()))))
           (#{build-dispatch-call -ANAU$bmvAmthP7L7xwo1K}#
             (lambda (#{pvars -ANAU$bmvAmthP7L7xwpZU}#
                      #{exp -ANAU$bmvAmthP7L7xwpZV}#
                      #{y -ANAU$bmvAmthP7L7xwpZW}#
                      #{r -ANAU$bmvAmthP7L7xwpZX}#
                      #{mod -ANAU$bmvAmthP7L7xwpZY}#)
               (let ((#{ids -ANAU$bmvAmthP7L7xwpZZ}#
                       (map car #{pvars -ANAU$bmvAmthP7L7xwpZU}#)))
                 (begin
                   (map cdr #{pvars -ANAU$bmvAmthP7L7xwpZU}#)
                   (let ((#{labels -ANAU$bmvAmthP7L7xwpZb}#
                           (#{gen-labels -ANAU$bmvAmthP7L7xwnNj}#
                             #{ids -ANAU$bmvAmthP7L7xwpZZ}#))
                         (#{new-vars -ANAU$bmvAmthP7L7xwpZc}#
                           (map #{gen-var -ANAU$bmvAmthP7L7xwnOS}#
                                #{ids -ANAU$bmvAmthP7L7xwpZZ}#)))
                     (#{build-application -ANAU$bmvAmthP7L7xwnM@}#
                       #f
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'apply)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'apply
                           #f))
                       (list (#{build-simple-lambda -ANAU$bmvAmthP7L7xwnNI}#
                               #f
                               (map syntax->datum
                                    #{ids -ANAU$bmvAmthP7L7xwpZZ}#)
                               #f
                               #{new-vars -ANAU$bmvAmthP7L7xwpZc}#
                               '()
                               (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                 #{exp -ANAU$bmvAmthP7L7xwpZV}#
                                 (#{extend-env -ANAU$bmvAmthP7L7xwnNa}#
                                   #{labels -ANAU$bmvAmthP7L7xwpZb}#
                                   (map (lambda (#{var -ANAU$bmvAmthP7L7xwpeb}#
                                                 #{level -ANAU$bmvAmthP7L7xwpec}#)
                                          (cons 'syntax
                                                (cons #{var -ANAU$bmvAmthP7L7xwpeb}#
                                                      #{level -ANAU$bmvAmthP7L7xwpec}#)))
                                        #{new-vars -ANAU$bmvAmthP7L7xwpZc}#
                                        (map cdr
                                             #{pvars -ANAU$bmvAmthP7L7xwpZU}#))
                                   #{r -ANAU$bmvAmthP7L7xwpZX}#)
                                 (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                                   #{ids -ANAU$bmvAmthP7L7xwpZZ}#
                                   #{labels -ANAU$bmvAmthP7L7xwpZb}#
                                   '(()))
                                 #{mod -ANAU$bmvAmthP7L7xwpZY}#))
                             #{y -ANAU$bmvAmthP7L7xwpZW}#)))))))
           (#{gen-clause -ANAU$bmvAmthP7L7xwo1L}#
             (lambda (#{x -ANAU$bmvAmthP7L7xwpEQ}#
                      #{keys -ANAU$bmvAmthP7L7xwpER}#
                      #{clauses -ANAU$bmvAmthP7L7xwpES}#
                      #{r -ANAU$bmvAmthP7L7xwpET}#
                      #{pat -ANAU$bmvAmthP7L7xwpEU}#
                      #{fender -ANAU$bmvAmthP7L7xwpEV}#
                      #{exp -ANAU$bmvAmthP7L7xwpEW}#
                      #{mod -ANAU$bmvAmthP7L7xwpEX}#)
               (call-with-values
                 (lambda ()
                   (#{convert-pattern -ANAU$bmvAmthP7L7xwo1J}#
                     #{pat -ANAU$bmvAmthP7L7xwpEU}#
                     #{keys -ANAU$bmvAmthP7L7xwpER}#))
                 (lambda (#{p -ANAU$bmvAmthP7L7xwpGy}#
                          #{pvars -ANAU$bmvAmthP7L7xwpGz}#)
                   (if (not (#{distinct-bound-ids? -ANAU$bmvAmthP7L7xwnN7}#
                              (map car #{pvars -ANAU$bmvAmthP7L7xwpGz}#)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       #{pat -ANAU$bmvAmthP7L7xwpEU}#)
                     (if (not (and-map
                                (lambda (#{x -ANAU$bmvAmthP7L7xwpIn}#)
                                  (not (let ((#{x -ANAU$bmvAmthP7L7xwpIr}#
                                               (car #{x -ANAU$bmvAmthP7L7xwpIn}#)))
                                         (if (if (if (vector?
                                                       #{x -ANAU$bmvAmthP7L7xwpIr}#)
                                                   (if (= (vector-length
                                                            #{x -ANAU$bmvAmthP7L7xwpIr}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{x -ANAU$bmvAmthP7L7xwpIr}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (symbol?
                                                 (vector-ref
                                                   #{x -ANAU$bmvAmthP7L7xwpIr}#
                                                   1))
                                               #f)
                                           (if (eq? (if (if (vector?
                                                              #{x -ANAU$bmvAmthP7L7xwpIr}#)
                                                          (if (= (vector-length
                                                                   #{x -ANAU$bmvAmthP7L7xwpIr}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{x -ANAU$bmvAmthP7L7xwpIr}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (vector-ref
                                                        #{x -ANAU$bmvAmthP7L7xwpIr}#
                                                        1)
                                                      #{x -ANAU$bmvAmthP7L7xwpIr}#)
                                                    (if (if (= (vector-length
                                                                 '#(syntax-object
                                                                    ...
                                                                    ((top)
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("p6"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("5l"
                                                                        "5k"
                                                                        "5j"
                                                                        "5i"
                                                                        "5h"
                                                                        "5g"
                                                                        "5f"
                                                                        "5e"
                                                                        "5d"
                                                                        "5c"
                                                                        "5b"
                                                                        "5a"
                                                                        "59"
                                                                        "58"
                                                                        "57"
                                                                        "56"
                                                                        "55"
                                                                        "54"
                                                                        "53"
                                                                        "52"
                                                                        "51"
                                                                        "50"
                                                                        "4z"
                                                                        "4y"
                                                                        "4x"
                                                                        "4w"
                                                                        "4v"
                                                                        "4u"
                                                                        "4t"
                                                                        "4s"
                                                                        "4r"
                                                                        "4q"
                                                                        "4p"
                                                                        "4o"
                                                                        "4n"
                                                                        "4m"
                                                                        "4l"
                                                                        "4k"
                                                                        "4j"
                                                                        "4i"
                                                                        "4h"
                                                                        "4g"
                                                                        "4f"
                                                                        "4e"
                                                                        "4d"
                                                                        "4c"
                                                                        "4b"
                                                                        "4a"
                                                                        "49"
                                                                        "48"
                                                                        "47"
                                                                        "46"
                                                                        "45"
                                                                        "44"
                                                                        "43"
                                                                        "42"
                                                                        "41"
                                                                        "40"
                                                                        "3z"
                                                                        "3y"
                                                                        "3x"
                                                                        "3w"
                                                                        "3v"
                                                                        "3u"
                                                                        "3t"
                                                                        "3s"
                                                                        "3r"
                                                                        "3q"
                                                                        "3p"
                                                                        "3o"
                                                                        "3n"
                                                                        "3m"
                                                                        "3l"
                                                                        "3k"
                                                                        "3j"
                                                                        "3i"
                                                                        "3h"
                                                                        "3g"
                                                                        "3f"
                                                                        "3e"
                                                                        "3d"
                                                                        "3c"
                                                                        "3b"
                                                                        "3a"
                                                                        "39"
                                                                        "38"
                                                                        "37"
                                                                        "36"
                                                                        "35"
                                                                        "34"
                                                                        "33"
                                                                        "32"
                                                                        "31"
                                                                        "30"
                                                                        "2z"
                                                                        "2y"
                                                                        "2x"
                                                                        "2w"
                                                                        "2v"
                                                                        "2u"
                                                                        "2t"
                                                                        "2s"
                                                                        "2r"
                                                                        "2q"
                                                                        "2p"
                                                                        "2o"
                                                                        "2n"
                                                                        "2m"
                                                                        "2l"
                                                                        "2k"
                                                                        "2j"
                                                                        "2i"
                                                                        "2h"
                                                                        "2g"
                                                                        "2f"
                                                                        "2e"
                                                                        "2d"
                                                                        "2c"
                                                                        "2b"
                                                                        "2a"
                                                                        "29"
                                                                        "28"
                                                                        "27"
                                                                        "26"
                                                                        "25"
                                                                        "24"
                                                                        "23"
                                                                        "22"
                                                                        "21"
                                                                        "20"
                                                                        "1z"
                                                                        "1y"
                                                                        "1x"
                                                                        "1w"
                                                                        "1v"
                                                                        "1u"
                                                                        "1t"
                                                                        "1s"
                                                                        "1r"
                                                                        "1q"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("8"
                                                                        "7"
                                                                        "6")))
                                                                    (hygiene
                                                                      guile)))
                                                               4)
                                                          #t
                                                          #f)
                                                      '...
                                                      '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("p6"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              with-transformer-environment
                                                              transformer-environment
                                                              resolve-identifier
                                                              locally-bound-identifiers
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("5l"
                                                             "5k"
                                                             "5j"
                                                             "5i"
                                                             "5h"
                                                             "5g"
                                                             "5f"
                                                             "5e"
                                                             "5d"
                                                             "5c"
                                                             "5b"
                                                             "5a"
                                                             "59"
                                                             "58"
                                                             "57"
                                                             "56"
                                                             "55"
                                                             "54"
                                                             "53"
                                                             "52"
                                                             "51"
                                                             "50"
                                                             "4z"
                                                             "4y"
                                                             "4x"
                                                             "4w"
                                                             "4v"
                                                             "4u"
                                                             "4t"
                                                             "4s"
                                                             "4r"
                                                             "4q"
                                                             "4p"
                                                             "4o"
                                                             "4n"
                                                             "4m"
                                                             "4l"
                                                             "4k"
                                                             "4j"
                                                             "4i"
                                                             "4h"
                                                             "4g"
                                                             "4f"
                                                             "4e"
                                                             "4d"
                                                             "4c"
                                                             "4b"
                                                             "4a"
                                                             "49"
                                                             "48"
                                                             "47"
                                                             "46"
                                                             "45"
                                                             "44"
                                                             "43"
                                                             "42"
                                                             "41"
                                                             "40"
                                                             "3z"
                                                             "3y"
                                                             "3x"
                                                             "3w"
                                                             "3v"
                                                             "3u"
                                                             "3t"
                                                             "3s"
                                                             "3r"
                                                             "3q"
                                                             "3p"
                                                             "3o"
                                                             "3n"
                                                             "3m"
                                                             "3l"
                                                             "3k"
                                                             "3j"
                                                             "3i"
                                                             "3h"
                                                             "3g"
                                                             "3f"
                                                             "3e"
                                                             "3d"
                                                             "3c"
                                                             "3b"
                                                             "3a"
                                                             "39"
                                                             "38"
                                                             "37"
                                                             "36"
                                                             "35"
                                                             "34"
                                                             "33"
                                                             "32"
                                                             "31"
                                                             "30"
                                                             "2z"
                                                             "2y"
                                                             "2x"
                                                             "2w"
                                                             "2v"
                                                             "2u"
                                                             "2t"
                                                             "2s"
                                                             "2r"
                                                             "2q"
                                                             "2p"
                                                             "2o"
                                                             "2n"
                                                             "2m"
                                                             "2l"
                                                             "2k"
                                                             "2j"
                                                             "2i"
                                                             "2h"
                                                             "2g"
                                                             "2f"
                                                             "2e"
                                                             "2d"
                                                             "2c"
                                                             "2b"
                                                             "2a"
                                                             "29"
                                                             "28"
                                                             "27"
                                                             "26"
                                                             "25"
                                                             "24"
                                                             "23"
                                                             "22"
                                                             "21"
                                                             "20"
                                                             "1z"
                                                             "1y"
                                                             "1x"
                                                             "1w"
                                                             "1v"
                                                             "1u"
                                                             "1t"
                                                             "1s"
                                                             "1r"
                                                             "1q"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("8" "7" "6")))
                                                         (hygiene guile))))
                                             (eq? (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                                    #{x -ANAU$bmvAmthP7L7xwpIr}#
                                                    '(()))
                                                  (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("p6"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("5l"
                                                           "5k"
                                                           "5j"
                                                           "5i"
                                                           "5h"
                                                           "5g"
                                                           "5f"
                                                           "5e"
                                                           "5d"
                                                           "5c"
                                                           "5b"
                                                           "5a"
                                                           "59"
                                                           "58"
                                                           "57"
                                                           "56"
                                                           "55"
                                                           "54"
                                                           "53"
                                                           "52"
                                                           "51"
                                                           "50"
                                                           "4z"
                                                           "4y"
                                                           "4x"
                                                           "4w"
                                                           "4v"
                                                           "4u"
                                                           "4t"
                                                           "4s"
                                                           "4r"
                                                           "4q"
                                                           "4p"
                                                           "4o"
                                                           "4n"
                                                           "4m"
                                                           "4l"
                                                           "4k"
                                                           "4j"
                                                           "4i"
                                                           "4h"
                                                           "4g"
                                                           "4f"
                                                           "4e"
                                                           "4d"
                                                           "4c"
                                                           "4b"
                                                           "4a"
                                                           "49"
                                                           "48"
                                                           "47"
                                                           "46"
                                                           "45"
                                                           "44"
                                                           "43"
                                                           "42"
                                                           "41"
                                                           "40"
                                                           "3z"
                                                           "3y"
                                                           "3x"
                                                           "3w"
                                                           "3v"
                                                           "3u"
                                                           "3t"
                                                           "3s"
                                                           "3r"
                                                           "3q"
                                                           "3p"
                                                           "3o"
                                                           "3n"
                                                           "3m"
                                                           "3l"
                                                           "3k"
                                                           "3j"
                                                           "3i"
                                                           "3h"
                                                           "3g"
                                                           "3f"
                                                           "3e"
                                                           "3d"
                                                           "3c"
                                                           "3b"
                                                           "3a"
                                                           "39"
                                                           "38"
                                                           "37"
                                                           "36"
                                                           "35"
                                                           "34"
                                                           "33"
                                                           "32"
                                                           "31"
                                                           "30"
                                                           "2z"
                                                           "2y"
                                                           "2x"
                                                           "2w"
                                                           "2v"
                                                           "2u"
                                                           "2t"
                                                           "2s"
                                                           "2r"
                                                           "2q"
                                                           "2p"
                                                           "2o"
                                                           "2n"
                                                           "2m"
                                                           "2l"
                                                           "2k"
                                                           "2j"
                                                           "2i"
                                                           "2h"
                                                           "2g"
                                                           "2f"
                                                           "2e"
                                                           "2d"
                                                           "2c"
                                                           "2b"
                                                           "2a"
                                                           "29"
                                                           "28"
                                                           "27"
                                                           "26"
                                                           "25"
                                                           "24"
                                                           "23"
                                                           "22"
                                                           "21"
                                                           "20"
                                                           "1z"
                                                           "1y"
                                                           "1x"
                                                           "1w"
                                                           "1v"
                                                           "1u"
                                                           "1t"
                                                           "1s"
                                                           "1r"
                                                           "1q"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("8" "7" "6")))
                                                       (hygiene guile))
                                                    '(())))
                                             #f)
                                           #f))))
                                #{pvars -ANAU$bmvAmthP7L7xwpGz}#))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         #{pat -ANAU$bmvAmthP7L7xwpEU}#)
                       (let ((#{y -ANAU$bmvAmthP7L7xwpJ3}#
                               (gensym
                                 (string-append (symbol->string 'tmp) " "))))
                         (#{build-application -ANAU$bmvAmthP7L7xwnM@}#
                           #f
                           (let ((#{req -ANAU$bmvAmthP7L7xwpMG}# (list 'tmp))
                                 (#{vars -ANAU$bmvAmthP7L7xwpMI}#
                                   (list #{y -ANAU$bmvAmthP7L7xwpJ3}#))
                                 (#{exp -ANAU$bmvAmthP7L7xwpMK}#
                                   (let ((#{y -ANAU$bmvAmthP7L7xwpMb}#
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 3)
                                             #f
                                             'tmp
                                             #{y -ANAU$bmvAmthP7L7xwpJ3}#)))
                                     (let ((#{test-exp -ANAU$bmvAmthP7L7xwpMf}#
                                             (let ((#{tmp -ANAU$bmvAmthP7L7xwpMo}#
                                                     ($sc-dispatch
                                                       #{fender -ANAU$bmvAmthP7L7xwpEV}#
                                                       '#(atom #t))))
                                               (if #{tmp -ANAU$bmvAmthP7L7xwpMo}#
                                                 (@apply
                                                   (lambda ()
                                                     #{y -ANAU$bmvAmthP7L7xwpMb}#)
                                                   #{tmp -ANAU$bmvAmthP7L7xwpMo}#)
                                                 (let ((#{then-exp -ANAU$bmvAmthP7L7xwpM6}#
                                                         (#{build-dispatch-call -ANAU$bmvAmthP7L7xwo1K}#
                                                           #{pvars -ANAU$bmvAmthP7L7xwpGz}#
                                                           #{fender -ANAU$bmvAmthP7L7xwpEV}#
                                                           #{y -ANAU$bmvAmthP7L7xwpMb}#
                                                           #{r -ANAU$bmvAmthP7L7xwpET}#
                                                           #{mod -ANAU$bmvAmthP7L7xwpEX}#))
                                                       (#{else-exp -ANAU$bmvAmthP7L7xwpM7}#
                                                         (make-struct/no-tail
                                                           (vector-ref
                                                             %expanded-vtables
                                                             1)
                                                           #f
                                                           #f)))
                                                   (make-struct/no-tail
                                                     (vector-ref
                                                       %expanded-vtables
                                                       10)
                                                     #f
                                                     #{y -ANAU$bmvAmthP7L7xwpMb}#
                                                     #{then-exp -ANAU$bmvAmthP7L7xwpM6}#
                                                     #{else-exp -ANAU$bmvAmthP7L7xwpM7}#)))))
                                           (#{then-exp -ANAU$bmvAmthP7L7xwpMg}#
                                             (#{build-dispatch-call -ANAU$bmvAmthP7L7xwo1K}#
                                               #{pvars -ANAU$bmvAmthP7L7xwpGz}#
                                               #{exp -ANAU$bmvAmthP7L7xwpEW}#
                                               #{y -ANAU$bmvAmthP7L7xwpMb}#
                                               #{r -ANAU$bmvAmthP7L7xwpET}#
                                               #{mod -ANAU$bmvAmthP7L7xwpEX}#))
                                           (#{else-exp -ANAU$bmvAmthP7L7xwpMh}#
                                             (#{gen-syntax-case -ANAU$bmvAmthP7L7xwo1M}#
                                               #{x -ANAU$bmvAmthP7L7xwpEQ}#
                                               #{keys -ANAU$bmvAmthP7L7xwpER}#
                                               #{clauses -ANAU$bmvAmthP7L7xwpES}#
                                               #{r -ANAU$bmvAmthP7L7xwpET}#
                                               #{mod -ANAU$bmvAmthP7L7xwpEX}#)))
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 10)
                                         #f
                                         #{test-exp -ANAU$bmvAmthP7L7xwpMf}#
                                         #{then-exp -ANAU$bmvAmthP7L7xwpMg}#
                                         #{else-exp -ANAU$bmvAmthP7L7xwpMh}#)))))
                             (let ((#{body -ANAU$bmvAmthP7L7xwpMP}#
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       #{req -ANAU$bmvAmthP7L7xwpMG}#
                                       #f
                                       #f
                                       #f
                                       '()
                                       #{vars -ANAU$bmvAmthP7L7xwpMI}#
                                       #{exp -ANAU$bmvAmthP7L7xwpMK}#
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 #{body -ANAU$bmvAmthP7L7xwpMP}#)))
                           (list (if (eq? #{p -ANAU$bmvAmthP7L7xwpGy}# 'any)
                                   (let ((#{fun-exp -ANAU$bmvAmthP7L7xwpNR}#
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               'list)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               'list
                                               #f)))
                                         (#{arg-exps -ANAU$bmvAmthP7L7xwpNS}#
                                           (list #{x -ANAU$bmvAmthP7L7xwpEQ}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       #{fun-exp -ANAU$bmvAmthP7L7xwpNR}#
                                       #{arg-exps -ANAU$bmvAmthP7L7xwpNS}#))
                                   (let ((#{fun-exp -ANAU$bmvAmthP7L7xwpNp}#
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               '$sc-dispatch)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               '$sc-dispatch
                                               #f)))
                                         (#{arg-exps -ANAU$bmvAmthP7L7xwpNq}#
                                           (list #{x -ANAU$bmvAmthP7L7xwpEQ}#
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     1)
                                                   #f
                                                   #{p -ANAU$bmvAmthP7L7xwpGy}#))))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       #{fun-exp -ANAU$bmvAmthP7L7xwpNp}#
                                       #{arg-exps -ANAU$bmvAmthP7L7xwpNq}#))))))))))))
           (#{gen-syntax-case -ANAU$bmvAmthP7L7xwo1M}#
             (lambda (#{x -ANAU$bmvAmthP7L7xwo7b}#
                      #{keys -ANAU$bmvAmthP7L7xwo7c}#
                      #{clauses -ANAU$bmvAmthP7L7xwo7d}#
                      #{r -ANAU$bmvAmthP7L7xwo7e}#
                      #{mod -ANAU$bmvAmthP7L7xwo7f}#)
               (if (null? #{clauses -ANAU$bmvAmthP7L7xwo7d}#)
                 (let ((#{fun-exp -ANAU$bmvAmthP7L7xwo7k}#
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'syntax-violation)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'syntax-violation
                             #f)))
                       (#{arg-exps -ANAU$bmvAmthP7L7xwo7l}#
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #f)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 "source expression failed to match any pattern")
                               #{x -ANAU$bmvAmthP7L7xwo7b}#)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     #{fun-exp -ANAU$bmvAmthP7L7xwo7k}#
                     #{arg-exps -ANAU$bmvAmthP7L7xwo7l}#))
                 (let ((#{tmp -ANAU$bmvAmthP7L7xwo8G}#
                         (car #{clauses -ANAU$bmvAmthP7L7xwo7d}#)))
                   (let ((#{tmp -ANAU$bmvAmthP7L7xwo8H}#
                           ($sc-dispatch
                             #{tmp -ANAU$bmvAmthP7L7xwo8G}#
                             '(any any))))
                     (if #{tmp -ANAU$bmvAmthP7L7xwo8H}#
                       (@apply
                         (lambda (#{pat -ANAU$bmvAmthP7L7xwo8J}#
                                  #{exp -ANAU$bmvAmthP7L7xwo8K}#)
                           (if (if (if (symbol? #{pat -ANAU$bmvAmthP7L7xwo8J}#)
                                     #t
                                     (if (if (vector?
                                               #{pat -ANAU$bmvAmthP7L7xwo8J}#)
                                           (if (= (vector-length
                                                    #{pat -ANAU$bmvAmthP7L7xwo8J}#)
                                                  4)
                                             (eq? (vector-ref
                                                    #{pat -ANAU$bmvAmthP7L7xwo8J}#
                                                    0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (symbol?
                                         (vector-ref
                                           #{pat -ANAU$bmvAmthP7L7xwo8J}#
                                           1))
                                       #f))
                                 (and-map
                                   (lambda (#{x -ANAU$bmvAmthP7L7xwo8l}#)
                                     (not (if (eq? (if (if (vector?
                                                             #{pat -ANAU$bmvAmthP7L7xwo8J}#)
                                                         (if (= (vector-length
                                                                  #{pat -ANAU$bmvAmthP7L7xwo8J}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{pat -ANAU$bmvAmthP7L7xwo8J}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{pat -ANAU$bmvAmthP7L7xwo8J}#
                                                       1)
                                                     #{pat -ANAU$bmvAmthP7L7xwo8J}#)
                                                   (if (if (vector?
                                                             #{x -ANAU$bmvAmthP7L7xwo8l}#)
                                                         (if (= (vector-length
                                                                  #{x -ANAU$bmvAmthP7L7xwo8l}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{x -ANAU$bmvAmthP7L7xwo8l}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{x -ANAU$bmvAmthP7L7xwo8l}#
                                                       1)
                                                     #{x -ANAU$bmvAmthP7L7xwo8l}#))
                                            (eq? (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                                   #{pat -ANAU$bmvAmthP7L7xwo8J}#
                                                   '(()))
                                                 (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                                   #{x -ANAU$bmvAmthP7L7xwo8l}#
                                                   '(())))
                                            #f)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("17y" "17z"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("17t"
                                                 "17u"
                                                 "17v"
                                                 "17w"
                                                 "17x"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("15s" "15r" "15q" "15p"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("5l"
                                                "5k"
                                                "5j"
                                                "5i"
                                                "5h"
                                                "5g"
                                                "5f"
                                                "5e"
                                                "5d"
                                                "5c"
                                                "5b"
                                                "5a"
                                                "59"
                                                "58"
                                                "57"
                                                "56"
                                                "55"
                                                "54"
                                                "53"
                                                "52"
                                                "51"
                                                "50"
                                                "4z"
                                                "4y"
                                                "4x"
                                                "4w"
                                                "4v"
                                                "4u"
                                                "4t"
                                                "4s"
                                                "4r"
                                                "4q"
                                                "4p"
                                                "4o"
                                                "4n"
                                                "4m"
                                                "4l"
                                                "4k"
                                                "4j"
                                                "4i"
                                                "4h"
                                                "4g"
                                                "4f"
                                                "4e"
                                                "4d"
                                                "4c"
                                                "4b"
                                                "4a"
                                                "49"
                                                "48"
                                                "47"
                                                "46"
                                                "45"
                                                "44"
                                                "43"
                                                "42"
                                                "41"
                                                "40"
                                                "3z"
                                                "3y"
                                                "3x"
                                                "3w"
                                                "3v"
                                                "3u"
                                                "3t"
                                                "3s"
                                                "3r"
                                                "3q"
                                                "3p"
                                                "3o"
                                                "3n"
                                                "3m"
                                                "3l"
                                                "3k"
                                                "3j"
                                                "3i"
                                                "3h"
                                                "3g"
                                                "3f"
                                                "3e"
                                                "3d"
                                                "3c"
                                                "3b"
                                                "3a"
                                                "39"
                                                "38"
                                                "37"
                                                "36"
                                                "35"
                                                "34"
                                                "33"
                                                "32"
                                                "31"
                                                "30"
                                                "2z"
                                                "2y"
                                                "2x"
                                                "2w"
                                                "2v"
                                                "2u"
                                                "2t"
                                                "2s"
                                                "2r"
                                                "2q"
                                                "2p"
                                                "2o"
                                                "2n"
                                                "2m"
                                                "2l"
                                                "2k"
                                                "2j"
                                                "2i"
                                                "2h"
                                                "2g"
                                                "2f"
                                                "2e"
                                                "2d"
                                                "2c"
                                                "2b"
                                                "2a"
                                                "29"
                                                "28"
                                                "27"
                                                "26"
                                                "25"
                                                "24"
                                                "23"
                                                "22"
                                                "21"
                                                "20"
                                                "1z"
                                                "1y"
                                                "1x"
                                                "1w"
                                                "1v"
                                                "1u"
                                                "1t"
                                                "1s"
                                                "1r"
                                                "1q"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("8" "7" "6")))
                                            (hygiene guile))
                                         #{keys -ANAU$bmvAmthP7L7xwo7c}#))
                                 #f)
                             (if (if (eq? (if (if (= (vector-length
                                                       '#(syntax-object
                                                          pad
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("17y" "17z"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("17t"
                                                               "17u"
                                                               "17v"
                                                               "17w"
                                                               "17x"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("15s"
                                                              "15r"
                                                              "15q"
                                                              "15p"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               gensym-hook
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("5l"
                                                              "5k"
                                                              "5j"
                                                              "5i"
                                                              "5h"
                                                              "5g"
                                                              "5f"
                                                              "5e"
                                                              "5d"
                                                              "5c"
                                                              "5b"
                                                              "5a"
                                                              "59"
                                                              "58"
                                                              "57"
                                                              "56"
                                                              "55"
                                                              "54"
                                                              "53"
                                                              "52"
                                                              "51"
                                                              "50"
                                                              "4z"
                                                              "4y"
                                                              "4x"
                                                              "4w"
                                                              "4v"
                                                              "4u"
                                                              "4t"
                                                              "4s"
                                                              "4r"
                                                              "4q"
                                                              "4p"
                                                              "4o"
                                                              "4n"
                                                              "4m"
                                                              "4l"
                                                              "4k"
                                                              "4j"
                                                              "4i"
                                                              "4h"
                                                              "4g"
                                                              "4f"
                                                              "4e"
                                                              "4d"
                                                              "4c"
                                                              "4b"
                                                              "4a"
                                                              "49"
                                                              "48"
                                                              "47"
                                                              "46"
                                                              "45"
                                                              "44"
                                                              "43"
                                                              "42"
                                                              "41"
                                                              "40"
                                                              "3z"
                                                              "3y"
                                                              "3x"
                                                              "3w"
                                                              "3v"
                                                              "3u"
                                                              "3t"
                                                              "3s"
                                                              "3r"
                                                              "3q"
                                                              "3p"
                                                              "3o"
                                                              "3n"
                                                              "3m"
                                                              "3l"
                                                              "3k"
                                                              "3j"
                                                              "3i"
                                                              "3h"
                                                              "3g"
                                                              "3f"
                                                              "3e"
                                                              "3d"
                                                              "3c"
                                                              "3b"
                                                              "3a"
                                                              "39"
                                                              "38"
                                                              "37"
                                                              "36"
                                                              "35"
                                                              "34"
                                                              "33"
                                                              "32"
                                                              "31"
                                                              "30"
                                                              "2z"
                                                              "2y"
                                                              "2x"
                                                              "2w"
                                                              "2v"
                                                              "2u"
                                                              "2t"
                                                              "2s"
                                                              "2r"
                                                              "2q"
                                                              "2p"
                                                              "2o"
                                                              "2n"
                                                              "2m"
                                                              "2l"
                                                              "2k"
                                                              "2j"
                                                              "2i"
                                                              "2h"
                                                              "2g"
                                                              "2f"
                                                              "2e"
                                                              "2d"
                                                              "2c"
                                                              "2b"
                                                              "2a"
                                                              "29"
                                                              "28"
                                                              "27"
                                                              "26"
                                                              "25"
                                                              "24"
                                                              "23"
                                                              "22"
                                                              "21"
                                                              "20"
                                                              "1z"
                                                              "1y"
                                                              "1x"
                                                              "1w"
                                                              "1v"
                                                              "1u"
                                                              "1t"
                                                              "1s"
                                                              "1r"
                                                              "1q"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("8" "7" "6")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            'pad
                                            '#(syntax-object
                                               pad
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("17y" "17z"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("17t"
                                                    "17u"
                                                    "17v"
                                                    "17w"
                                                    "17x"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("15s" "15r" "15q" "15p"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("5l"
                                                   "5k"
                                                   "5j"
                                                   "5i"
                                                   "5h"
                                                   "5g"
                                                   "5f"
                                                   "5e"
                                                   "5d"
                                                   "5c"
                                                   "5b"
                                                   "5a"
                                                   "59"
                                                   "58"
                                                   "57"
                                                   "56"
                                                   "55"
                                                   "54"
                                                   "53"
                                                   "52"
                                                   "51"
                                                   "50"
                                                   "4z"
                                                   "4y"
                                                   "4x"
                                                   "4w"
                                                   "4v"
                                                   "4u"
                                                   "4t"
                                                   "4s"
                                                   "4r"
                                                   "4q"
                                                   "4p"
                                                   "4o"
                                                   "4n"
                                                   "4m"
                                                   "4l"
                                                   "4k"
                                                   "4j"
                                                   "4i"
                                                   "4h"
                                                   "4g"
                                                   "4f"
                                                   "4e"
                                                   "4d"
                                                   "4c"
                                                   "4b"
                                                   "4a"
                                                   "49"
                                                   "48"
                                                   "47"
                                                   "46"
                                                   "45"
                                                   "44"
                                                   "43"
                                                   "42"
                                                   "41"
                                                   "40"
                                                   "3z"
                                                   "3y"
                                                   "3x"
                                                   "3w"
                                                   "3v"
                                                   "3u"
                                                   "3t"
                                                   "3s"
                                                   "3r"
                                                   "3q"
                                                   "3p"
                                                   "3o"
                                                   "3n"
                                                   "3m"
                                                   "3l"
                                                   "3k"
                                                   "3j"
                                                   "3i"
                                                   "3h"
                                                   "3g"
                                                   "3f"
                                                   "3e"
                                                   "3d"
                                                   "3c"
                                                   "3b"
                                                   "3a"
                                                   "39"
                                                   "38"
                                                   "37"
                                                   "36"
                                                   "35"
                                                   "34"
                                                   "33"
                                                   "32"
                                                   "31"
                                                   "30"
                                                   "2z"
                                                   "2y"
                                                   "2x"
                                                   "2w"
                                                   "2v"
                                                   "2u"
                                                   "2t"
                                                   "2s"
                                                   "2r"
                                                   "2q"
                                                   "2p"
                                                   "2o"
                                                   "2n"
                                                   "2m"
                                                   "2l"
                                                   "2k"
                                                   "2j"
                                                   "2i"
                                                   "2h"
                                                   "2g"
                                                   "2f"
                                                   "2e"
                                                   "2d"
                                                   "2c"
                                                   "2b"
                                                   "2a"
                                                   "29"
                                                   "28"
                                                   "27"
                                                   "26"
                                                   "25"
                                                   "24"
                                                   "23"
                                                   "22"
                                                   "21"
                                                   "20"
                                                   "1z"
                                                   "1y"
                                                   "1x"
                                                   "1w"
                                                   "1v"
                                                   "1u"
                                                   "1t"
                                                   "1s"
                                                   "1r"
                                                   "1q"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("8" "7" "6")))
                                               (hygiene guile)))
                                          (if (if (= (vector-length
                                                       '#(syntax-object
                                                          _
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("17y" "17z"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("17t"
                                                               "17u"
                                                               "17v"
                                                               "17w"
                                                               "17x"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("15s"
                                                              "15r"
                                                              "15q"
                                                              "15p"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               gensym-hook
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("5l"
                                                              "5k"
                                                              "5j"
                                                              "5i"
                                                              "5h"
                                                              "5g"
                                                              "5f"
                                                              "5e"
                                                              "5d"
                                                              "5c"
                                                              "5b"
                                                              "5a"
                                                              "59"
                                                              "58"
                                                              "57"
                                                              "56"
                                                              "55"
                                                              "54"
                                                              "53"
                                                              "52"
                                                              "51"
                                                              "50"
                                                              "4z"
                                                              "4y"
                                                              "4x"
                                                              "4w"
                                                              "4v"
                                                              "4u"
                                                              "4t"
                                                              "4s"
                                                              "4r"
                                                              "4q"
                                                              "4p"
                                                              "4o"
                                                              "4n"
                                                              "4m"
                                                              "4l"
                                                              "4k"
                                                              "4j"
                                                              "4i"
                                                              "4h"
                                                              "4g"
                                                              "4f"
                                                              "4e"
                                                              "4d"
                                                              "4c"
                                                              "4b"
                                                              "4a"
                                                              "49"
                                                              "48"
                                                              "47"
                                                              "46"
                                                              "45"
                                                              "44"
                                                              "43"
                                                              "42"
                                                              "41"
                                                              "40"
                                                              "3z"
                                                              "3y"
                                                              "3x"
                                                              "3w"
                                                              "3v"
                                                              "3u"
                                                              "3t"
                                                              "3s"
                                                              "3r"
                                                              "3q"
                                                              "3p"
                                                              "3o"
                                                              "3n"
                                                              "3m"
                                                              "3l"
                                                              "3k"
                                                              "3j"
                                                              "3i"
                                                              "3h"
                                                              "3g"
                                                              "3f"
                                                              "3e"
                                                              "3d"
                                                              "3c"
                                                              "3b"
                                                              "3a"
                                                              "39"
                                                              "38"
                                                              "37"
                                                              "36"
                                                              "35"
                                                              "34"
                                                              "33"
                                                              "32"
                                                              "31"
                                                              "30"
                                                              "2z"
                                                              "2y"
                                                              "2x"
                                                              "2w"
                                                              "2v"
                                                              "2u"
                                                              "2t"
                                                              "2s"
                                                              "2r"
                                                              "2q"
                                                              "2p"
                                                              "2o"
                                                              "2n"
                                                              "2m"
                                                              "2l"
                                                              "2k"
                                                              "2j"
                                                              "2i"
                                                              "2h"
                                                              "2g"
                                                              "2f"
                                                              "2e"
                                                              "2d"
                                                              "2c"
                                                              "2b"
                                                              "2a"
                                                              "29"
                                                              "28"
                                                              "27"
                                                              "26"
                                                              "25"
                                                              "24"
                                                              "23"
                                                              "22"
                                                              "21"
                                                              "20"
                                                              "1z"
                                                              "1y"
                                                              "1x"
                                                              "1w"
                                                              "1v"
                                                              "1u"
                                                              "1t"
                                                              "1s"
                                                              "1r"
                                                              "1q"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("8" "7" "6")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            '_
                                            '#(syntax-object
                                               _
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("17y" "17z"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("17t"
                                                    "17u"
                                                    "17v"
                                                    "17w"
                                                    "17x"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("15s" "15r" "15q" "15p"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("5l"
                                                   "5k"
                                                   "5j"
                                                   "5i"
                                                   "5h"
                                                   "5g"
                                                   "5f"
                                                   "5e"
                                                   "5d"
                                                   "5c"
                                                   "5b"
                                                   "5a"
                                                   "59"
                                                   "58"
                                                   "57"
                                                   "56"
                                                   "55"
                                                   "54"
                                                   "53"
                                                   "52"
                                                   "51"
                                                   "50"
                                                   "4z"
                                                   "4y"
                                                   "4x"
                                                   "4w"
                                                   "4v"
                                                   "4u"
                                                   "4t"
                                                   "4s"
                                                   "4r"
                                                   "4q"
                                                   "4p"
                                                   "4o"
                                                   "4n"
                                                   "4m"
                                                   "4l"
                                                   "4k"
                                                   "4j"
                                                   "4i"
                                                   "4h"
                                                   "4g"
                                                   "4f"
                                                   "4e"
                                                   "4d"
                                                   "4c"
                                                   "4b"
                                                   "4a"
                                                   "49"
                                                   "48"
                                                   "47"
                                                   "46"
                                                   "45"
                                                   "44"
                                                   "43"
                                                   "42"
                                                   "41"
                                                   "40"
                                                   "3z"
                                                   "3y"
                                                   "3x"
                                                   "3w"
                                                   "3v"
                                                   "3u"
                                                   "3t"
                                                   "3s"
                                                   "3r"
                                                   "3q"
                                                   "3p"
                                                   "3o"
                                                   "3n"
                                                   "3m"
                                                   "3l"
                                                   "3k"
                                                   "3j"
                                                   "3i"
                                                   "3h"
                                                   "3g"
                                                   "3f"
                                                   "3e"
                                                   "3d"
                                                   "3c"
                                                   "3b"
                                                   "3a"
                                                   "39"
                                                   "38"
                                                   "37"
                                                   "36"
                                                   "35"
                                                   "34"
                                                   "33"
                                                   "32"
                                                   "31"
                                                   "30"
                                                   "2z"
                                                   "2y"
                                                   "2x"
                                                   "2w"
                                                   "2v"
                                                   "2u"
                                                   "2t"
                                                   "2s"
                                                   "2r"
                                                   "2q"
                                                   "2p"
                                                   "2o"
                                                   "2n"
                                                   "2m"
                                                   "2l"
                                                   "2k"
                                                   "2j"
                                                   "2i"
                                                   "2h"
                                                   "2g"
                                                   "2f"
                                                   "2e"
                                                   "2d"
                                                   "2c"
                                                   "2b"
                                                   "2a"
                                                   "29"
                                                   "28"
                                                   "27"
                                                   "26"
                                                   "25"
                                                   "24"
                                                   "23"
                                                   "22"
                                                   "21"
                                                   "20"
                                                   "1z"
                                                   "1y"
                                                   "1x"
                                                   "1w"
                                                   "1v"
                                                   "1u"
                                                   "1t"
                                                   "1s"
                                                   "1r"
                                                   "1q"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("8" "7" "6")))
                                               (hygiene guile))))
                                   (eq? (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("17y" "17z"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("17t"
                                                  "17u"
                                                  "17v"
                                                  "17w"
                                                  "17x"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("15s" "15r" "15q" "15p"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("5l"
                                                 "5k"
                                                 "5j"
                                                 "5i"
                                                 "5h"
                                                 "5g"
                                                 "5f"
                                                 "5e"
                                                 "5d"
                                                 "5c"
                                                 "5b"
                                                 "5a"
                                                 "59"
                                                 "58"
                                                 "57"
                                                 "56"
                                                 "55"
                                                 "54"
                                                 "53"
                                                 "52"
                                                 "51"
                                                 "50"
                                                 "4z"
                                                 "4y"
                                                 "4x"
                                                 "4w"
                                                 "4v"
                                                 "4u"
                                                 "4t"
                                                 "4s"
                                                 "4r"
                                                 "4q"
                                                 "4p"
                                                 "4o"
                                                 "4n"
                                                 "4m"
                                                 "4l"
                                                 "4k"
                                                 "4j"
                                                 "4i"
                                                 "4h"
                                                 "4g"
                                                 "4f"
                                                 "4e"
                                                 "4d"
                                                 "4c"
                                                 "4b"
                                                 "4a"
                                                 "49"
                                                 "48"
                                                 "47"
                                                 "46"
                                                 "45"
                                                 "44"
                                                 "43"
                                                 "42"
                                                 "41"
                                                 "40"
                                                 "3z"
                                                 "3y"
                                                 "3x"
                                                 "3w"
                                                 "3v"
                                                 "3u"
                                                 "3t"
                                                 "3s"
                                                 "3r"
                                                 "3q"
                                                 "3p"
                                                 "3o"
                                                 "3n"
                                                 "3m"
                                                 "3l"
                                                 "3k"
                                                 "3j"
                                                 "3i"
                                                 "3h"
                                                 "3g"
                                                 "3f"
                                                 "3e"
                                                 "3d"
                                                 "3c"
                                                 "3b"
                                                 "3a"
                                                 "39"
                                                 "38"
                                                 "37"
                                                 "36"
                                                 "35"
                                                 "34"
                                                 "33"
                                                 "32"
                                                 "31"
                                                 "30"
                                                 "2z"
                                                 "2y"
                                                 "2x"
                                                 "2w"
                                                 "2v"
                                                 "2u"
                                                 "2t"
                                                 "2s"
                                                 "2r"
                                                 "2q"
                                                 "2p"
                                                 "2o"
                                                 "2n"
                                                 "2m"
                                                 "2l"
                                                 "2k"
                                                 "2j"
                                                 "2i"
                                                 "2h"
                                                 "2g"
                                                 "2f"
                                                 "2e"
                                                 "2d"
                                                 "2c"
                                                 "2b"
                                                 "2a"
                                                 "29"
                                                 "28"
                                                 "27"
                                                 "26"
                                                 "25"
                                                 "24"
                                                 "23"
                                                 "22"
                                                 "21"
                                                 "20"
                                                 "1z"
                                                 "1y"
                                                 "1x"
                                                 "1w"
                                                 "1v"
                                                 "1u"
                                                 "1t"
                                                 "1s"
                                                 "1r"
                                                 "1q"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("8" "7" "6")))
                                             (hygiene guile))
                                          '(()))
                                        (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("17y" "17z"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("17t"
                                                  "17u"
                                                  "17v"
                                                  "17w"
                                                  "17x"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("15s" "15r" "15q" "15p"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("5l"
                                                 "5k"
                                                 "5j"
                                                 "5i"
                                                 "5h"
                                                 "5g"
                                                 "5f"
                                                 "5e"
                                                 "5d"
                                                 "5c"
                                                 "5b"
                                                 "5a"
                                                 "59"
                                                 "58"
                                                 "57"
                                                 "56"
                                                 "55"
                                                 "54"
                                                 "53"
                                                 "52"
                                                 "51"
                                                 "50"
                                                 "4z"
                                                 "4y"
                                                 "4x"
                                                 "4w"
                                                 "4v"
                                                 "4u"
                                                 "4t"
                                                 "4s"
                                                 "4r"
                                                 "4q"
                                                 "4p"
                                                 "4o"
                                                 "4n"
                                                 "4m"
                                                 "4l"
                                                 "4k"
                                                 "4j"
                                                 "4i"
                                                 "4h"
                                                 "4g"
                                                 "4f"
                                                 "4e"
                                                 "4d"
                                                 "4c"
                                                 "4b"
                                                 "4a"
                                                 "49"
                                                 "48"
                                                 "47"
                                                 "46"
                                                 "45"
                                                 "44"
                                                 "43"
                                                 "42"
                                                 "41"
                                                 "40"
                                                 "3z"
                                                 "3y"
                                                 "3x"
                                                 "3w"
                                                 "3v"
                                                 "3u"
                                                 "3t"
                                                 "3s"
                                                 "3r"
                                                 "3q"
                                                 "3p"
                                                 "3o"
                                                 "3n"
                                                 "3m"
                                                 "3l"
                                                 "3k"
                                                 "3j"
                                                 "3i"
                                                 "3h"
                                                 "3g"
                                                 "3f"
                                                 "3e"
                                                 "3d"
                                                 "3c"
                                                 "3b"
                                                 "3a"
                                                 "39"
                                                 "38"
                                                 "37"
                                                 "36"
                                                 "35"
                                                 "34"
                                                 "33"
                                                 "32"
                                                 "31"
                                                 "30"
                                                 "2z"
                                                 "2y"
                                                 "2x"
                                                 "2w"
                                                 "2v"
                                                 "2u"
                                                 "2t"
                                                 "2s"
                                                 "2r"
                                                 "2q"
                                                 "2p"
                                                 "2o"
                                                 "2n"
                                                 "2m"
                                                 "2l"
                                                 "2k"
                                                 "2j"
                                                 "2i"
                                                 "2h"
                                                 "2g"
                                                 "2f"
                                                 "2e"
                                                 "2d"
                                                 "2c"
                                                 "2b"
                                                 "2a"
                                                 "29"
                                                 "28"
                                                 "27"
                                                 "26"
                                                 "25"
                                                 "24"
                                                 "23"
                                                 "22"
                                                 "21"
                                                 "20"
                                                 "1z"
                                                 "1y"
                                                 "1x"
                                                 "1w"
                                                 "1v"
                                                 "1u"
                                                 "1t"
                                                 "1s"
                                                 "1r"
                                                 "1q"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("8" "7" "6")))
                                             (hygiene guile))
                                          '(())))
                                   #f)
                               (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                 #{exp -ANAU$bmvAmthP7L7xwo8K}#
                                 #{r -ANAU$bmvAmthP7L7xwo7e}#
                                 '(())
                                 #{mod -ANAU$bmvAmthP7L7xwo7f}#)
                               (let ((#{labels -ANAU$bmvAmthP7L7xwo@V}#
                                       (list (#{gen-label -ANAU$bmvAmthP7L7xwnNi}#)))
                                     (#{var -ANAU$bmvAmthP7L7xwo@W}#
                                       (let ((#{id -ANAU$bmvAmthP7L7xwo@8}#
                                               (if (if (vector?
                                                         #{pat -ANAU$bmvAmthP7L7xwo8J}#)
                                                     (if (= (vector-length
                                                              #{pat -ANAU$bmvAmthP7L7xwo8J}#)
                                                            4)
                                                       (eq? (vector-ref
                                                              #{pat -ANAU$bmvAmthP7L7xwo8J}#
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref
                                                   #{pat -ANAU$bmvAmthP7L7xwo8J}#
                                                   1)
                                                 #{pat -ANAU$bmvAmthP7L7xwo8J}#)))
                                         (gensym
                                           (string-append
                                             (symbol->string
                                               #{id -ANAU$bmvAmthP7L7xwo@8}#)
                                             " ")))))
                                 (#{build-application -ANAU$bmvAmthP7L7xwnM@}#
                                   #f
                                   (#{build-simple-lambda -ANAU$bmvAmthP7L7xwnNI}#
                                     #f
                                     (list (syntax->datum
                                             #{pat -ANAU$bmvAmthP7L7xwo8J}#))
                                     #f
                                     (list #{var -ANAU$bmvAmthP7L7xwo@W}#)
                                     '()
                                     (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                       #{exp -ANAU$bmvAmthP7L7xwo8K}#
                                       (#{extend-env -ANAU$bmvAmthP7L7xwnNa}#
                                         #{labels -ANAU$bmvAmthP7L7xwo@V}#
                                         (list (cons 'syntax
                                                     (cons #{var -ANAU$bmvAmthP7L7xwo@W}#
                                                           0)))
                                         #{r -ANAU$bmvAmthP7L7xwo7e}#)
                                       (#{make-binding-wrap -ANAU$bmvAmthP7L7xwnNu}#
                                         (list #{pat -ANAU$bmvAmthP7L7xwo8J}#)
                                         #{labels -ANAU$bmvAmthP7L7xwo@V}#
                                         '(()))
                                       #{mod -ANAU$bmvAmthP7L7xwo7f}#))
                                   (list #{x -ANAU$bmvAmthP7L7xwo7b}#))))
                             (#{gen-clause -ANAU$bmvAmthP7L7xwo1L}#
                               #{x -ANAU$bmvAmthP7L7xwo7b}#
                               #{keys -ANAU$bmvAmthP7L7xwo7c}#
                               (cdr #{clauses -ANAU$bmvAmthP7L7xwo7d}#)
                               #{r -ANAU$bmvAmthP7L7xwo7e}#
                               #{pat -ANAU$bmvAmthP7L7xwo8J}#
                               #t
                               #{exp -ANAU$bmvAmthP7L7xwo8K}#
                               #{mod -ANAU$bmvAmthP7L7xwo7f}#)))
                         #{tmp -ANAU$bmvAmthP7L7xwo8H}#)
                       (let ((#{tmp -ANAU$bmvAmthP7L7xwpEI}#
                               ($sc-dispatch
                                 #{tmp -ANAU$bmvAmthP7L7xwo8G}#
                                 '(any any any))))
                         (if #{tmp -ANAU$bmvAmthP7L7xwpEI}#
                           (@apply
                             (lambda (#{pat -ANAU$bmvAmthP7L7xwpEK}#
                                      #{fender -ANAU$bmvAmthP7L7xwpEL}#
                                      #{exp -ANAU$bmvAmthP7L7xwpEM}#)
                               (#{gen-clause -ANAU$bmvAmthP7L7xwo1L}#
                                 #{x -ANAU$bmvAmthP7L7xwo7b}#
                                 #{keys -ANAU$bmvAmthP7L7xwo7c}#
                                 (cdr #{clauses -ANAU$bmvAmthP7L7xwo7d}#)
                                 #{r -ANAU$bmvAmthP7L7xwo7e}#
                                 #{pat -ANAU$bmvAmthP7L7xwpEK}#
                                 #{fender -ANAU$bmvAmthP7L7xwpEL}#
                                 #{exp -ANAU$bmvAmthP7L7xwpEM}#
                                 #{mod -ANAU$bmvAmthP7L7xwo7f}#))
                             #{tmp -ANAU$bmvAmthP7L7xwpEI}#)
                           (syntax-violation
                             'syntax-case
                             "invalid clause"
                             (car #{clauses -ANAU$bmvAmthP7L7xwo7d}#)))))))))))
          (lambda (#{e -ANAU$bmvAmthP7L7xwo1N}#
                   #{r -ANAU$bmvAmthP7L7xwo1O}#
                   #{w -ANAU$bmvAmthP7L7xwo1P}#
                   #{s -ANAU$bmvAmthP7L7xwo1Q}#
                   #{mod -ANAU$bmvAmthP7L7xwo1R}#)
            (let ((#{e -ANAU$bmvAmthP7L7xwo1S}#
                    (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                      (begin
                        (if (if (pair? #{e -ANAU$bmvAmthP7L7xwo1N}#)
                              #{s -ANAU$bmvAmthP7L7xwo1Q}#
                              #f)
                          (set-source-properties!
                            #{e -ANAU$bmvAmthP7L7xwo1N}#
                            #{s -ANAU$bmvAmthP7L7xwo1Q}#))
                        #{e -ANAU$bmvAmthP7L7xwo1N}#)
                      #{w -ANAU$bmvAmthP7L7xwo1P}#
                      #{mod -ANAU$bmvAmthP7L7xwo1R}#)))
              (let ((#{tmp -ANAU$bmvAmthP7L7xwo1U}#
                      ($sc-dispatch
                        #{e -ANAU$bmvAmthP7L7xwo1S}#
                        '(_ any each-any . each-any))))
                (if #{tmp -ANAU$bmvAmthP7L7xwo1U}#
                  (@apply
                    (lambda (#{val -ANAU$bmvAmthP7L7xwo1t}#
                             #{key -ANAU$bmvAmthP7L7xwo1u}#
                             #{m -ANAU$bmvAmthP7L7xwo1v}#)
                      (if (and-map
                            (lambda (#{x -ANAU$bmvAmthP7L7xwo1w}#)
                              (if (if (symbol? #{x -ANAU$bmvAmthP7L7xwo1w}#)
                                    #t
                                    (if (if (vector?
                                              #{x -ANAU$bmvAmthP7L7xwo1w}#)
                                          (if (= (vector-length
                                                   #{x -ANAU$bmvAmthP7L7xwo1w}#)
                                                 4)
                                            (eq? (vector-ref
                                                   #{x -ANAU$bmvAmthP7L7xwo1w}#
                                                   0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol?
                                        (vector-ref
                                          #{x -ANAU$bmvAmthP7L7xwo1w}#
                                          1))
                                      #f))
                                (not (if (if (if (vector?
                                                   #{x -ANAU$bmvAmthP7L7xwo1w}#)
                                               (if (= (vector-length
                                                        #{x -ANAU$bmvAmthP7L7xwo1w}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x -ANAU$bmvAmthP7L7xwo1w}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol?
                                             (vector-ref
                                               #{x -ANAU$bmvAmthP7L7xwo1w}#
                                               1))
                                           #f)
                                       (if (eq? (if (if (vector?
                                                          #{x -ANAU$bmvAmthP7L7xwo1w}#)
                                                      (if (= (vector-length
                                                               #{x -ANAU$bmvAmthP7L7xwo1w}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{x -ANAU$bmvAmthP7L7xwo1w}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref
                                                    #{x -ANAU$bmvAmthP7L7xwo1w}#
                                                    1)
                                                  #{x -ANAU$bmvAmthP7L7xwo1w}#)
                                                (if (if (= (vector-length
                                                             '#(syntax-object
                                                                ...
                                                                ((top)
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("p6"))
                                                                 #(ribcage
                                                                   (lambda-var-list
                                                                     gen-var
                                                                     strip
                                                                     expand-lambda-case
                                                                     lambda*-formals
                                                                     expand-simple-lambda
                                                                     lambda-formals
                                                                     ellipsis?
                                                                     expand-void
                                                                     eval-local-transformer
                                                                     expand-local-syntax
                                                                     expand-body
                                                                     expand-macro
                                                                     expand-application
                                                                     expand-expr
                                                                     expand
                                                                     syntax-type
                                                                     parse-when-list
                                                                     expand-install-global
                                                                     expand-top-sequence
                                                                     expand-sequence
                                                                     source-wrap
                                                                     wrap
                                                                     bound-id-member?
                                                                     distinct-bound-ids?
                                                                     valid-bound-ids?
                                                                     bound-id=?
                                                                     free-id=?
                                                                     with-transformer-environment
                                                                     transformer-environment
                                                                     resolve-identifier
                                                                     locally-bound-identifiers
                                                                     id-var-name
                                                                     same-marks?
                                                                     join-marks
                                                                     join-wraps
                                                                     smart-append
                                                                     make-binding-wrap
                                                                     extend-ribcage!
                                                                     make-empty-ribcage
                                                                     new-mark
                                                                     anti-mark
                                                                     the-anti-mark
                                                                     top-marked?
                                                                     top-wrap
                                                                     empty-wrap
                                                                     set-ribcage-labels!
                                                                     set-ribcage-marks!
                                                                     set-ribcage-symnames!
                                                                     ribcage-labels
                                                                     ribcage-marks
                                                                     ribcage-symnames
                                                                     ribcage?
                                                                     make-ribcage
                                                                     gen-labels
                                                                     gen-label
                                                                     make-rename
                                                                     rename-marks
                                                                     rename-new
                                                                     rename-old
                                                                     subst-rename?
                                                                     wrap-subst
                                                                     wrap-marks
                                                                     make-wrap
                                                                     id-sym-name&marks
                                                                     id-sym-name
                                                                     id?
                                                                     nonsymbol-id?
                                                                     global-extend
                                                                     lookup
                                                                     macros-only-env
                                                                     extend-var-env
                                                                     extend-env
                                                                     null-env
                                                                     binding-value
                                                                     binding-type
                                                                     make-binding
                                                                     arg-check
                                                                     source-annotation
                                                                     no-source
                                                                     set-syntax-object-module!
                                                                     set-syntax-object-wrap!
                                                                     set-syntax-object-expression!
                                                                     syntax-object-module
                                                                     syntax-object-wrap
                                                                     syntax-object-expression
                                                                     syntax-object?
                                                                     make-syntax-object
                                                                     build-lexical-var
                                                                     build-letrec
                                                                     build-named-let
                                                                     build-let
                                                                     build-sequence
                                                                     build-data
                                                                     build-primref
                                                                     build-lambda-case
                                                                     build-case-lambda
                                                                     build-simple-lambda
                                                                     build-global-definition
                                                                     build-global-assignment
                                                                     build-global-reference
                                                                     analyze-variable
                                                                     build-lexical-assignment
                                                                     build-lexical-reference
                                                                     build-dynlet
                                                                     build-conditional
                                                                     build-application
                                                                     build-void
                                                                     maybe-name-value!
                                                                     decorate-source
                                                                     get-global-definition-hook
                                                                     put-global-definition-hook
                                                                     gensym-hook
                                                                     local-eval-hook
                                                                     top-level-eval-hook
                                                                     fx<
                                                                     fx=
                                                                     fx-
                                                                     fx+
                                                                     set-lambda-meta!
                                                                     lambda-meta
                                                                     lambda?
                                                                     make-dynlet
                                                                     make-letrec
                                                                     make-let
                                                                     make-lambda-case
                                                                     make-lambda
                                                                     make-sequence
                                                                     make-application
                                                                     make-conditional
                                                                     make-toplevel-define
                                                                     make-toplevel-set
                                                                     make-toplevel-ref
                                                                     make-module-set
                                                                     make-module-ref
                                                                     make-lexical-set
                                                                     make-lexical-ref
                                                                     make-primitive-ref
                                                                     make-const
                                                                     make-void)
                                                                   ((top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                   ("5l"
                                                                    "5k"
                                                                    "5j"
                                                                    "5i"
                                                                    "5h"
                                                                    "5g"
                                                                    "5f"
                                                                    "5e"
                                                                    "5d"
                                                                    "5c"
                                                                    "5b"
                                                                    "5a"
                                                                    "59"
                                                                    "58"
                                                                    "57"
                                                                    "56"
                                                                    "55"
                                                                    "54"
                                                                    "53"
                                                                    "52"
                                                                    "51"
                                                                    "50"
                                                                    "4z"
                                                                    "4y"
                                                                    "4x"
                                                                    "4w"
                                                                    "4v"
                                                                    "4u"
                                                                    "4t"
                                                                    "4s"
                                                                    "4r"
                                                                    "4q"
                                                                    "4p"
                                                                    "4o"
                                                                    "4n"
                                                                    "4m"
                                                                    "4l"
                                                                    "4k"
                                                                    "4j"
                                                                    "4i"
                                                                    "4h"
                                                                    "4g"
                                                                    "4f"
                                                                    "4e"
                                                                    "4d"
                                                                    "4c"
                                                                    "4b"
                                                                    "4a"
                                                                    "49"
                                                                    "48"
                                                                    "47"
                                                                    "46"
                                                                    "45"
                                                                    "44"
                                                                    "43"
                                                                    "42"
                                                                    "41"
                                                                    "40"
                                                                    "3z"
                                                                    "3y"
                                                                    "3x"
                                                                    "3w"
                                                                    "3v"
                                                                    "3u"
                                                                    "3t"
                                                                    "3s"
                                                                    "3r"
                                                                    "3q"
                                                                    "3p"
                                                                    "3o"
                                                                    "3n"
                                                                    "3m"
                                                                    "3l"
                                                                    "3k"
                                                                    "3j"
                                                                    "3i"
                                                                    "3h"
                                                                    "3g"
                                                                    "3f"
                                                                    "3e"
                                                                    "3d"
                                                                    "3c"
                                                                    "3b"
                                                                    "3a"
                                                                    "39"
                                                                    "38"
                                                                    "37"
                                                                    "36"
                                                                    "35"
                                                                    "34"
                                                                    "33"
                                                                    "32"
                                                                    "31"
                                                                    "30"
                                                                    "2z"
                                                                    "2y"
                                                                    "2x"
                                                                    "2w"
                                                                    "2v"
                                                                    "2u"
                                                                    "2t"
                                                                    "2s"
                                                                    "2r"
                                                                    "2q"
                                                                    "2p"
                                                                    "2o"
                                                                    "2n"
                                                                    "2m"
                                                                    "2l"
                                                                    "2k"
                                                                    "2j"
                                                                    "2i"
                                                                    "2h"
                                                                    "2g"
                                                                    "2f"
                                                                    "2e"
                                                                    "2d"
                                                                    "2c"
                                                                    "2b"
                                                                    "2a"
                                                                    "29"
                                                                    "28"
                                                                    "27"
                                                                    "26"
                                                                    "25"
                                                                    "24"
                                                                    "23"
                                                                    "22"
                                                                    "21"
                                                                    "20"
                                                                    "1z"
                                                                    "1y"
                                                                    "1x"
                                                                    "1w"
                                                                    "1v"
                                                                    "1u"
                                                                    "1t"
                                                                    "1s"
                                                                    "1r"
                                                                    "1q"))
                                                                 #(ribcage
                                                                   (define-structure
                                                                     define-expansion-accessors
                                                                     define-expansion-constructors)
                                                                   ((top)
                                                                    (top)
                                                                    (top))
                                                                   ("8"
                                                                    "7"
                                                                    "6")))
                                                                (hygiene
                                                                  guile)))
                                                           4)
                                                      #t
                                                      #f)
                                                  '...
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("p6"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          with-transformer-environment
                                                          transformer-environment
                                                          resolve-identifier
                                                          locally-bound-identifiers
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("5l"
                                                         "5k"
                                                         "5j"
                                                         "5i"
                                                         "5h"
                                                         "5g"
                                                         "5f"
                                                         "5e"
                                                         "5d"
                                                         "5c"
                                                         "5b"
                                                         "5a"
                                                         "59"
                                                         "58"
                                                         "57"
                                                         "56"
                                                         "55"
                                                         "54"
                                                         "53"
                                                         "52"
                                                         "51"
                                                         "50"
                                                         "4z"
                                                         "4y"
                                                         "4x"
                                                         "4w"
                                                         "4v"
                                                         "4u"
                                                         "4t"
                                                         "4s"
                                                         "4r"
                                                         "4q"
                                                         "4p"
                                                         "4o"
                                                         "4n"
                                                         "4m"
                                                         "4l"
                                                         "4k"
                                                         "4j"
                                                         "4i"
                                                         "4h"
                                                         "4g"
                                                         "4f"
                                                         "4e"
                                                         "4d"
                                                         "4c"
                                                         "4b"
                                                         "4a"
                                                         "49"
                                                         "48"
                                                         "47"
                                                         "46"
                                                         "45"
                                                         "44"
                                                         "43"
                                                         "42"
                                                         "41"
                                                         "40"
                                                         "3z"
                                                         "3y"
                                                         "3x"
                                                         "3w"
                                                         "3v"
                                                         "3u"
                                                         "3t"
                                                         "3s"
                                                         "3r"
                                                         "3q"
                                                         "3p"
                                                         "3o"
                                                         "3n"
                                                         "3m"
                                                         "3l"
                                                         "3k"
                                                         "3j"
                                                         "3i"
                                                         "3h"
                                                         "3g"
                                                         "3f"
                                                         "3e"
                                                         "3d"
                                                         "3c"
                                                         "3b"
                                                         "3a"
                                                         "39"
                                                         "38"
                                                         "37"
                                                         "36"
                                                         "35"
                                                         "34"
                                                         "33"
                                                         "32"
                                                         "31"
                                                         "30"
                                                         "2z"
                                                         "2y"
                                                         "2x"
                                                         "2w"
                                                         "2v"
                                                         "2u"
                                                         "2t"
                                                         "2s"
                                                         "2r"
                                                         "2q"
                                                         "2p"
                                                         "2o"
                                                         "2n"
                                                         "2m"
                                                         "2l"
                                                         "2k"
                                                         "2j"
                                                         "2i"
                                                         "2h"
                                                         "2g"
                                                         "2f"
                                                         "2e"
                                                         "2d"
                                                         "2c"
                                                         "2b"
                                                         "2a"
                                                         "29"
                                                         "28"
                                                         "27"
                                                         "26"
                                                         "25"
                                                         "24"
                                                         "23"
                                                         "22"
                                                         "21"
                                                         "20"
                                                         "1z"
                                                         "1y"
                                                         "1x"
                                                         "1w"
                                                         "1v"
                                                         "1u"
                                                         "1t"
                                                         "1s"
                                                         "1r"
                                                         "1q"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("8" "7" "6")))
                                                     (hygiene guile))))
                                         (eq? (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                                #{x -ANAU$bmvAmthP7L7xwo1w}#
                                                '(()))
                                              (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("p6"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        with-transformer-environment
                                                        transformer-environment
                                                        resolve-identifier
                                                        locally-bound-identifiers
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("5l"
                                                       "5k"
                                                       "5j"
                                                       "5i"
                                                       "5h"
                                                       "5g"
                                                       "5f"
                                                       "5e"
                                                       "5d"
                                                       "5c"
                                                       "5b"
                                                       "5a"
                                                       "59"
                                                       "58"
                                                       "57"
                                                       "56"
                                                       "55"
                                                       "54"
                                                       "53"
                                                       "52"
                                                       "51"
                                                       "50"
                                                       "4z"
                                                       "4y"
                                                       "4x"
                                                       "4w"
                                                       "4v"
                                                       "4u"
                                                       "4t"
                                                       "4s"
                                                       "4r"
                                                       "4q"
                                                       "4p"
                                                       "4o"
                                                       "4n"
                                                       "4m"
                                                       "4l"
                                                       "4k"
                                                       "4j"
                                                       "4i"
                                                       "4h"
                                                       "4g"
                                                       "4f"
                                                       "4e"
                                                       "4d"
                                                       "4c"
                                                       "4b"
                                                       "4a"
                                                       "49"
                                                       "48"
                                                       "47"
                                                       "46"
                                                       "45"
                                                       "44"
                                                       "43"
                                                       "42"
                                                       "41"
                                                       "40"
                                                       "3z"
                                                       "3y"
                                                       "3x"
                                                       "3w"
                                                       "3v"
                                                       "3u"
                                                       "3t"
                                                       "3s"
                                                       "3r"
                                                       "3q"
                                                       "3p"
                                                       "3o"
                                                       "3n"
                                                       "3m"
                                                       "3l"
                                                       "3k"
                                                       "3j"
                                                       "3i"
                                                       "3h"
                                                       "3g"
                                                       "3f"
                                                       "3e"
                                                       "3d"
                                                       "3c"
                                                       "3b"
                                                       "3a"
                                                       "39"
                                                       "38"
                                                       "37"
                                                       "36"
                                                       "35"
                                                       "34"
                                                       "33"
                                                       "32"
                                                       "31"
                                                       "30"
                                                       "2z"
                                                       "2y"
                                                       "2x"
                                                       "2w"
                                                       "2v"
                                                       "2u"
                                                       "2t"
                                                       "2s"
                                                       "2r"
                                                       "2q"
                                                       "2p"
                                                       "2o"
                                                       "2n"
                                                       "2m"
                                                       "2l"
                                                       "2k"
                                                       "2j"
                                                       "2i"
                                                       "2h"
                                                       "2g"
                                                       "2f"
                                                       "2e"
                                                       "2d"
                                                       "2c"
                                                       "2b"
                                                       "2a"
                                                       "29"
                                                       "28"
                                                       "27"
                                                       "26"
                                                       "25"
                                                       "24"
                                                       "23"
                                                       "22"
                                                       "21"
                                                       "20"
                                                       "1z"
                                                       "1y"
                                                       "1x"
                                                       "1w"
                                                       "1v"
                                                       "1u"
                                                       "1t"
                                                       "1s"
                                                       "1r"
                                                       "1q"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("8" "7" "6")))
                                                   (hygiene guile))
                                                '(())))
                                         #f)
                                       #f))
                                #f))
                            #{key -ANAU$bmvAmthP7L7xwo1u}#)
                        (let ((#{x -ANAU$bmvAmthP7L7xwo3u}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-application -ANAU$bmvAmthP7L7xwnM@}#
                            #{s -ANAU$bmvAmthP7L7xwo1Q}#
                            (let ((#{req -ANAU$bmvAmthP7L7xwo5w}# (list 'tmp))
                                  (#{vars -ANAU$bmvAmthP7L7xwo5y}#
                                    (list #{x -ANAU$bmvAmthP7L7xwo3u}#))
                                  (#{exp -ANAU$bmvAmthP7L7xwo50}#
                                    (#{gen-syntax-case -ANAU$bmvAmthP7L7xwo1M}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x -ANAU$bmvAmthP7L7xwo3u}#)
                                      #{key -ANAU$bmvAmthP7L7xwo1u}#
                                      #{m -ANAU$bmvAmthP7L7xwo1v}#
                                      #{r -ANAU$bmvAmthP7L7xwo1O}#
                                      #{mod -ANAU$bmvAmthP7L7xwo1R}#)))
                              (let ((#{body -ANAU$bmvAmthP7L7xwo55}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 14)
                                        #f
                                        #{req -ANAU$bmvAmthP7L7xwo5w}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars -ANAU$bmvAmthP7L7xwo5y}#
                                        #{exp -ANAU$bmvAmthP7L7xwo50}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 13)
                                  #f
                                  '()
                                  #{body -ANAU$bmvAmthP7L7xwo55}#)))
                            (list (#{expand -ANAU$bmvAmthP7L7xwnOE}#
                                    #{val -ANAU$bmvAmthP7L7xwo1t}#
                                    #{r -ANAU$bmvAmthP7L7xwo1O}#
                                    '(())
                                    #{mod -ANAU$bmvAmthP7L7xwo1R}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e -ANAU$bmvAmthP7L7xwo1S}#)))
                    #{tmp -ANAU$bmvAmthP7L7xwo1U}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{e -ANAU$bmvAmthP7L7xwo1S}#)))))))
      (set! macroexpand
        (lambda*
          (#{x -ANAU$bmvAmthP7L7xwpfh}#
            #:optional
            (#{m -ANAU$bmvAmthP7L7xwpfi}# 'e)
            (#{esew -ANAU$bmvAmthP7L7xwpfj}# '(eval)))
          (#{expand-top-sequence -ANAU$bmvAmthP7L7xwnOA}#
            (list #{x -ANAU$bmvAmthP7L7xwpfh}#)
            '()
            '((top))
            #f
            #{m -ANAU$bmvAmthP7L7xwpfi}#
            #{esew -ANAU$bmvAmthP7L7xwpfj}#
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (#{x -ANAU$bmvAmthP7L7xwpfm}#)
          (if (if (vector? #{x -ANAU$bmvAmthP7L7xwpfm}#)
                (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwpfm}#)
                       4)
                  (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwpfm}# 0)
                       'syntax-object)
                  #f)
                #f)
            (symbol?
              (vector-ref #{x -ANAU$bmvAmthP7L7xwpfm}# 1))
            #f)))
      (set! datum->syntax
        (lambda (#{id -ANAU$bmvAmthP7L7xwpf@}#
                 #{datum -ANAU$bmvAmthP7L7xwpgA}#)
          (let ((#{wrap -ANAU$bmvAmthP7L7xwpgF}#
                  (vector-ref #{id -ANAU$bmvAmthP7L7xwpf@}# 2))
                (#{module -ANAU$bmvAmthP7L7xwpgG}#
                  (vector-ref #{id -ANAU$bmvAmthP7L7xwpf@}# 3)))
            (vector
              'syntax-object
              #{datum -ANAU$bmvAmthP7L7xwpgA}#
              #{wrap -ANAU$bmvAmthP7L7xwpgF}#
              #{module -ANAU$bmvAmthP7L7xwpgG}#))))
      (set! syntax->datum
        (lambda (#{x -ANAU$bmvAmthP7L7xwpgN}#)
          (#{strip -ANAU$bmvAmthP7L7xwnOR}#
            #{x -ANAU$bmvAmthP7L7xwpgN}#
            '(()))))
      (set! syntax-source
        (lambda (#{x -ANAU$bmvAmthP7L7xwpgQ}#)
          (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
            #{x -ANAU$bmvAmthP7L7xwpgQ}#)))
      (set! generate-temporaries
        (lambda (#{ls -ANAU$bmvAmthP7L7xwpip}#)
          (begin
            (if (not (list? #{ls -ANAU$bmvAmthP7L7xwpip}#))
              (syntax-violation
                'generate-temporaries
                "invalid argument"
                #{ls -ANAU$bmvAmthP7L7xwpip}#))
            (let ((#{mod -ANAU$bmvAmthP7L7xwpix}#
                    (cons 'hygiene (module-name (current-module)))))
              (map (lambda (#{x -ANAU$bmvAmthP7L7xwpiy}#)
                     (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                       (gensym)
                       '((top))
                       #{mod -ANAU$bmvAmthP7L7xwpix}#))
                   #{ls -ANAU$bmvAmthP7L7xwpip}#)))))
      (set! free-identifier=?
        (lambda (#{x -ANAU$bmvAmthP7L7xwpi2}#
                 #{y -ANAU$bmvAmthP7L7xwpi3}#)
          (begin
            (if (not (if (if (vector? #{x -ANAU$bmvAmthP7L7xwpi2}#)
                           (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwpi2}#)
                                  4)
                             (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwpi2}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{x -ANAU$bmvAmthP7L7xwpi2}# 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                #{x -ANAU$bmvAmthP7L7xwpi2}#))
            (if (not (if (if (vector? #{y -ANAU$bmvAmthP7L7xwpi3}#)
                           (if (= (vector-length #{y -ANAU$bmvAmthP7L7xwpi3}#)
                                  4)
                             (eq? (vector-ref #{y -ANAU$bmvAmthP7L7xwpi3}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{y -ANAU$bmvAmthP7L7xwpi3}# 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                #{y -ANAU$bmvAmthP7L7xwpi3}#))
            (if (eq? (if (if (vector? #{x -ANAU$bmvAmthP7L7xwpi2}#)
                           (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwpi2}#)
                                  4)
                             (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwpi2}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{x -ANAU$bmvAmthP7L7xwpi2}# 1)
                       #{x -ANAU$bmvAmthP7L7xwpi2}#)
                     (if (if (vector? #{y -ANAU$bmvAmthP7L7xwpi3}#)
                           (if (= (vector-length #{y -ANAU$bmvAmthP7L7xwpi3}#)
                                  4)
                             (eq? (vector-ref #{y -ANAU$bmvAmthP7L7xwpi3}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{y -ANAU$bmvAmthP7L7xwpi3}# 1)
                       #{y -ANAU$bmvAmthP7L7xwpi3}#))
              (eq? (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                     #{x -ANAU$bmvAmthP7L7xwpi2}#
                     '(()))
                   (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                     #{y -ANAU$bmvAmthP7L7xwpi3}#
                     '(())))
              #f))))
      (set! bound-identifier=?
        (lambda (#{x -ANAU$bmvAmthP7L7xwplN}#
                 #{y -ANAU$bmvAmthP7L7xwplO}#)
          (begin
            (if (not (if (if (vector? #{x -ANAU$bmvAmthP7L7xwplN}#)
                           (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwplN}#)
                                  4)
                             (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwplN}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{x -ANAU$bmvAmthP7L7xwplN}# 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                #{x -ANAU$bmvAmthP7L7xwplN}#))
            (if (not (if (if (vector? #{y -ANAU$bmvAmthP7L7xwplO}#)
                           (if (= (vector-length #{y -ANAU$bmvAmthP7L7xwplO}#)
                                  4)
                             (eq? (vector-ref #{y -ANAU$bmvAmthP7L7xwplO}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{y -ANAU$bmvAmthP7L7xwplO}# 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                #{y -ANAU$bmvAmthP7L7xwplO}#))
            (if (if (if (vector? #{x -ANAU$bmvAmthP7L7xwplN}#)
                      (if (= (vector-length #{x -ANAU$bmvAmthP7L7xwplN}#)
                             4)
                        (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwplN}# 0)
                             'syntax-object)
                        #f)
                      #f)
                  (if (vector? #{y -ANAU$bmvAmthP7L7xwplO}#)
                    (if (= (vector-length #{y -ANAU$bmvAmthP7L7xwplO}#)
                           4)
                      (eq? (vector-ref #{y -ANAU$bmvAmthP7L7xwplO}# 0)
                           'syntax-object)
                      #f)
                    #f)
                  #f)
              (if (eq? (vector-ref #{x -ANAU$bmvAmthP7L7xwplN}# 1)
                       (vector-ref #{y -ANAU$bmvAmthP7L7xwplO}# 1))
                (#{same-marks? -ANAU$bmvAmthP7L7xwnNy}#
                  (car (vector-ref #{x -ANAU$bmvAmthP7L7xwplN}# 2))
                  (car (vector-ref #{y -ANAU$bmvAmthP7L7xwplO}# 2)))
                #f)
              (eq? #{x -ANAU$bmvAmthP7L7xwplN}#
                   #{y -ANAU$bmvAmthP7L7xwplO}#)))))
      (set! syntax-violation
        (lambda*
          (#{who -ANAU$bmvAmthP7L7xwpnT}#
            #{message -ANAU$bmvAmthP7L7xwpnU}#
            #{form -ANAU$bmvAmthP7L7xwpnV}#
            #:optional
            (#{subform -ANAU$bmvAmthP7L7xwpnW}# #f))
          (begin
            (if (not (if (not #{who -ANAU$bmvAmthP7L7xwpnT}#)
                       (not #{who -ANAU$bmvAmthP7L7xwpnT}#)
                       (let ((#{t -ANAU$bmvAmthP7L7xwpno}#
                               (string? #{who -ANAU$bmvAmthP7L7xwpnT}#)))
                         (if #{t -ANAU$bmvAmthP7L7xwpno}#
                           #{t -ANAU$bmvAmthP7L7xwpno}#
                           (symbol? #{who -ANAU$bmvAmthP7L7xwpnT}#)))))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                #{who -ANAU$bmvAmthP7L7xwpnT}#))
            (if (not (string? #{message -ANAU$bmvAmthP7L7xwpnU}#))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                #{message -ANAU$bmvAmthP7L7xwpnU}#))
            (throw 'syntax-error
                   #{who -ANAU$bmvAmthP7L7xwpnT}#
                   #{message -ANAU$bmvAmthP7L7xwpnU}#
                   (#{source-annotation -ANAU$bmvAmthP7L7xwnNZ}#
                     (if #{form -ANAU$bmvAmthP7L7xwpnV}#
                       #{form -ANAU$bmvAmthP7L7xwpnV}#
                       #{subform -ANAU$bmvAmthP7L7xwpnW}#))
                   (#{strip -ANAU$bmvAmthP7L7xwnOR}#
                     #{form -ANAU$bmvAmthP7L7xwpnV}#
                     '(()))
                   (if #{subform -ANAU$bmvAmthP7L7xwpnW}#
                     (#{strip -ANAU$bmvAmthP7L7xwnOR}#
                       #{subform -ANAU$bmvAmthP7L7xwpnW}#
                       '(()))
                     #f)))))
      (letrec*
        ((#{syntax-local-binding -ANAU$bmvAmthP7L7xwpq0}#
           (lambda (#{id -ANAU$bmvAmthP7L7xwps5}#)
             (begin
               (if (not (if (if (vector? #{id -ANAU$bmvAmthP7L7xwps5}#)
                              (if (= (vector-length
                                       #{id -ANAU$bmvAmthP7L7xwps5}#)
                                     4)
                                (eq? (vector-ref
                                       #{id -ANAU$bmvAmthP7L7xwps5}#
                                       0)
                                     'syntax-object)
                                #f)
                              #f)
                          (symbol?
                            (vector-ref #{id -ANAU$bmvAmthP7L7xwps5}# 1))
                          #f))
                 (syntax-violation
                   'syntax-local-binding
                   "invalid argument"
                   #{id -ANAU$bmvAmthP7L7xwps5}#))
               ((fluid-ref
                  #{transformer-environment -ANAU$bmvAmthP7L7xwnN2}#)
                (lambda (#{e -ANAU$bmvAmthP7L7xwpth}#
                         #{r -ANAU$bmvAmthP7L7xwpti}#
                         #{w -ANAU$bmvAmthP7L7xwptj}#
                         #{s -ANAU$bmvAmthP7L7xwptk}#
                         #{rib -ANAU$bmvAmthP7L7xwptl}#
                         #{mod -ANAU$bmvAmthP7L7xwptm}#)
                  (call-with-values
                    (lambda ()
                      (let ((#{id -ANAU$bmvAmthP7L7xwptp}#
                              (vector-ref #{id -ANAU$bmvAmthP7L7xwps5}# 1))
                            (#{w -ANAU$bmvAmthP7L7xwptq}#
                              (let ((#{w -ANAU$bmvAmthP7L7xwpt1}#
                                      (vector-ref
                                        #{id -ANAU$bmvAmthP7L7xwps5}#
                                        2)))
                                (let ((#{ms -ANAU$bmvAmthP7L7xwpt2}#
                                        (car #{w -ANAU$bmvAmthP7L7xwpt1}#))
                                      (#{s -ANAU$bmvAmthP7L7xwpt3}#
                                        (cdr #{w -ANAU$bmvAmthP7L7xwpt1}#)))
                                  (if (if (pair? #{ms -ANAU$bmvAmthP7L7xwpt2}#)
                                        (eq? (car #{ms -ANAU$bmvAmthP7L7xwpt2}#)
                                             #f)
                                        #f)
                                    (cons (cdr #{ms -ANAU$bmvAmthP7L7xwpt2}#)
                                          (if #{rib -ANAU$bmvAmthP7L7xwptl}#
                                            (cons #{rib -ANAU$bmvAmthP7L7xwptl}#
                                                  (cdr #{s -ANAU$bmvAmthP7L7xwpt3}#))
                                            (cdr #{s -ANAU$bmvAmthP7L7xwpt3}#)))
                                    (cons #{ms -ANAU$bmvAmthP7L7xwpt2}#
                                          (if #{rib -ANAU$bmvAmthP7L7xwptl}#
                                            (cons #{rib -ANAU$bmvAmthP7L7xwptl}#
                                                  #{s -ANAU$bmvAmthP7L7xwpt3}#)
                                            #{s -ANAU$bmvAmthP7L7xwpt3}#))))))
                            (#{mod -ANAU$bmvAmthP7L7xwpts}#
                              (vector-ref #{id -ANAU$bmvAmthP7L7xwps5}# 3)))
                        (let ((#{n -ANAU$bmvAmthP7L7xwptv}#
                                (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                  #{id -ANAU$bmvAmthP7L7xwptp}#
                                  #{w -ANAU$bmvAmthP7L7xwptq}#)))
                          (if (symbol? #{n -ANAU$bmvAmthP7L7xwptv}#)
                            (let ((#{mod -ANAU$bmvAmthP7L7xwpt9}#
                                    (if (if (vector?
                                              #{id -ANAU$bmvAmthP7L7xwptp}#)
                                          (if (= (vector-length
                                                   #{id -ANAU$bmvAmthP7L7xwptp}#)
                                                 4)
                                            (eq? (vector-ref
                                                   #{id -ANAU$bmvAmthP7L7xwptp}#
                                                   0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref
                                        #{id -ANAU$bmvAmthP7L7xwptp}#
                                        3)
                                      #{mod -ANAU$bmvAmthP7L7xwpts}#)))
                              (let ((#{b -ANAU$bmvAmthP7L7xwpt$}#
                                      (let ((#{t -ANAU$bmvAmthP7L7xwpt@}#
                                              (#{get-global-definition-hook -ANAU$bmvAmthP7L7xwnM7}#
                                                #{n -ANAU$bmvAmthP7L7xwptv}#
                                                #{mod -ANAU$bmvAmthP7L7xwpt9}#)))
                                        (if #{t -ANAU$bmvAmthP7L7xwpt@}#
                                          #{t -ANAU$bmvAmthP7L7xwpt@}#
                                          '(global)))))
                                (if (eq? (car #{b -ANAU$bmvAmthP7L7xwpt$}#)
                                         'global)
                                  (values
                                    'global
                                    #{n -ANAU$bmvAmthP7L7xwptv}#
                                    #{mod -ANAU$bmvAmthP7L7xwpt9}#)
                                  (values
                                    (car #{b -ANAU$bmvAmthP7L7xwpt$}#)
                                    (cdr #{b -ANAU$bmvAmthP7L7xwpt$}#)
                                    #{mod -ANAU$bmvAmthP7L7xwpt9}#))))
                            (if (string? #{n -ANAU$bmvAmthP7L7xwptv}#)
                              (let ((#{mod -ANAU$bmvAmthP7L7xwpuZ}#
                                      (if (if (vector?
                                                #{id -ANAU$bmvAmthP7L7xwptp}#)
                                            (if (= (vector-length
                                                     #{id -ANAU$bmvAmthP7L7xwptp}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{id -ANAU$bmvAmthP7L7xwptp}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref
                                          #{id -ANAU$bmvAmthP7L7xwptp}#
                                          3)
                                        #{mod -ANAU$bmvAmthP7L7xwpts}#)))
                                (let ((#{b -ANAU$bmvAmthP7L7xwpua}#
                                        (let ((#{t -ANAU$bmvAmthP7L7xwpub}#
                                                (assq-ref
                                                  #{r -ANAU$bmvAmthP7L7xwpti}#
                                                  #{n -ANAU$bmvAmthP7L7xwptv}#)))
                                          (if #{t -ANAU$bmvAmthP7L7xwpub}#
                                            #{t -ANAU$bmvAmthP7L7xwpub}#
                                            '(displaced-lexical)))))
                                  (values
                                    (car #{b -ANAU$bmvAmthP7L7xwpua}#)
                                    (cdr #{b -ANAU$bmvAmthP7L7xwpua}#)
                                    #{mod -ANAU$bmvAmthP7L7xwpuZ}#)))
                              (error "unexpected id-var-name"
                                     #{id -ANAU$bmvAmthP7L7xwptp}#
                                     #{w -ANAU$bmvAmthP7L7xwptq}#
                                     #{n -ANAU$bmvAmthP7L7xwptv}#))))))
                    (lambda (#{type -ANAU$bmvAmthP7L7xwpuo}#
                             #{value -ANAU$bmvAmthP7L7xwpup}#
                             #{mod -ANAU$bmvAmthP7L7xwpuq}#)
                      (if (eqv? #{type -ANAU$bmvAmthP7L7xwpuo}# 'lexical)
                        (values
                          'lexical
                          #{value -ANAU$bmvAmthP7L7xwpup}#)
                        (if (eqv? #{type -ANAU$bmvAmthP7L7xwpuo}# 'macro)
                          (values 'macro #{value -ANAU$bmvAmthP7L7xwpup}#)
                          (if (eqv? #{type -ANAU$bmvAmthP7L7xwpuo}# 'syntax)
                            (values
                              'pattern-variable
                              #{value -ANAU$bmvAmthP7L7xwpup}#)
                            (if (eqv? #{type -ANAU$bmvAmthP7L7xwpuo}#
                                      'displaced-lexical)
                              (values 'displaced-lexical #f)
                              (if (eqv? #{type -ANAU$bmvAmthP7L7xwpuo}#
                                        'global)
                                (values
                                  'global
                                  (cons #{value -ANAU$bmvAmthP7L7xwpup}#
                                        (cdr #{mod -ANAU$bmvAmthP7L7xwpuq}#)))
                                (values 'other #f)))))))))))))
         (#{syntax-locally-bound-identifiers -ANAU$bmvAmthP7L7xwpq1}#
           (lambda (#{id -ANAU$bmvAmthP7L7xwpu1}#)
             (begin
               (if (not (if (if (vector? #{id -ANAU$bmvAmthP7L7xwpu1}#)
                              (if (= (vector-length
                                       #{id -ANAU$bmvAmthP7L7xwpu1}#)
                                     4)
                                (eq? (vector-ref
                                       #{id -ANAU$bmvAmthP7L7xwpu1}#
                                       0)
                                     'syntax-object)
                                #f)
                              #f)
                          (symbol?
                            (vector-ref #{id -ANAU$bmvAmthP7L7xwpu1}# 1))
                          #f))
                 (syntax-violation
                   'syntax-locally-bound-identifiers
                   "invalid argument"
                   #{id -ANAU$bmvAmthP7L7xwpu1}#))
               (#{locally-bound-identifiers -ANAU$bmvAmthP7L7xwnN0}#
                 (vector-ref #{id -ANAU$bmvAmthP7L7xwpu1}# 2)
                 (vector-ref #{id -ANAU$bmvAmthP7L7xwpu1}# 3))))))
        (begin
          (define!
            'syntax-module
            (lambda (#{id -ANAU$bmvAmthP7L7xwpq3}#)
              (begin
                (if (not (if (if (vector? #{id -ANAU$bmvAmthP7L7xwpq3}#)
                               (if (= (vector-length
                                        #{id -ANAU$bmvAmthP7L7xwpq3}#)
                                      4)
                                 (eq? (vector-ref
                                        #{id -ANAU$bmvAmthP7L7xwpq3}#
                                        0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (symbol?
                             (vector-ref #{id -ANAU$bmvAmthP7L7xwpq3}# 1))
                           #f))
                  (syntax-violation
                    'syntax-module
                    "invalid argument"
                    #{id -ANAU$bmvAmthP7L7xwpq3}#))
                (cdr (vector-ref #{id -ANAU$bmvAmthP7L7xwpq3}# 3)))))
          (define!
            'syntax-local-binding
            #{syntax-local-binding -ANAU$bmvAmthP7L7xwpq0}#)
          (define!
            'syntax-locally-bound-identifiers
            #{syntax-locally-bound-identifiers -ANAU$bmvAmthP7L7xwpq1}#)))
      (letrec*
        ((#{match-each -ANAU$bmvAmthP7L7xwpwg}#
           (lambda (#{e -ANAU$bmvAmthP7L7xwp5r}#
                    #{p -ANAU$bmvAmthP7L7xwp5s}#
                    #{w -ANAU$bmvAmthP7L7xwp5t}#
                    #{mod -ANAU$bmvAmthP7L7xwp5u}#)
             (if (pair? #{e -ANAU$bmvAmthP7L7xwp5r}#)
               (let ((#{first -ANAU$bmvAmthP7L7xwp5v}#
                       (#{match -ANAU$bmvAmthP7L7xwpwm}#
                         (car #{e -ANAU$bmvAmthP7L7xwp5r}#)
                         #{p -ANAU$bmvAmthP7L7xwp5s}#
                         #{w -ANAU$bmvAmthP7L7xwp5t}#
                         '()
                         #{mod -ANAU$bmvAmthP7L7xwp5u}#)))
                 (if #{first -ANAU$bmvAmthP7L7xwp5v}#
                   (let ((#{rest -ANAU$bmvAmthP7L7xwp5y}#
                           (#{match-each -ANAU$bmvAmthP7L7xwpwg}#
                             (cdr #{e -ANAU$bmvAmthP7L7xwp5r}#)
                             #{p -ANAU$bmvAmthP7L7xwp5s}#
                             #{w -ANAU$bmvAmthP7L7xwp5t}#
                             #{mod -ANAU$bmvAmthP7L7xwp5u}#)))
                     (if #{rest -ANAU$bmvAmthP7L7xwp5y}#
                       (cons #{first -ANAU$bmvAmthP7L7xwp5v}#
                             #{rest -ANAU$bmvAmthP7L7xwp5y}#)
                       #f))
                   #f))
               (if (null? #{e -ANAU$bmvAmthP7L7xwp5r}#)
                 '()
                 (if (if (vector? #{e -ANAU$bmvAmthP7L7xwp5r}#)
                       (if (= (vector-length #{e -ANAU$bmvAmthP7L7xwp5r}#)
                              4)
                         (eq? (vector-ref #{e -ANAU$bmvAmthP7L7xwp5r}# 0)
                              'syntax-object)
                         #f)
                       #f)
                   (#{match-each -ANAU$bmvAmthP7L7xwpwg}#
                     (vector-ref #{e -ANAU$bmvAmthP7L7xwp5r}# 1)
                     #{p -ANAU$bmvAmthP7L7xwp5s}#
                     (#{join-wraps -ANAU$bmvAmthP7L7xwnNw}#
                       #{w -ANAU$bmvAmthP7L7xwp5t}#
                       (vector-ref #{e -ANAU$bmvAmthP7L7xwp5r}# 2))
                     (vector-ref #{e -ANAU$bmvAmthP7L7xwp5r}# 3))
                   #f)))))
         (#{match-each-any -ANAU$bmvAmthP7L7xwpwi}#
           (lambda (#{e -ANAU$bmvAmthP7L7xwp6O}#
                    #{w -ANAU$bmvAmthP7L7xwp6P}#
                    #{mod -ANAU$bmvAmthP7L7xwp6Q}#)
             (if (pair? #{e -ANAU$bmvAmthP7L7xwp6O}#)
               (let ((#{l -ANAU$bmvAmthP7L7xwp6R}#
                       (#{match-each-any -ANAU$bmvAmthP7L7xwpwi}#
                         (cdr #{e -ANAU$bmvAmthP7L7xwp6O}#)
                         #{w -ANAU$bmvAmthP7L7xwp6P}#
                         #{mod -ANAU$bmvAmthP7L7xwp6Q}#)))
                 (if #{l -ANAU$bmvAmthP7L7xwp6R}#
                   (cons (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                           (car #{e -ANAU$bmvAmthP7L7xwp6O}#)
                           #{w -ANAU$bmvAmthP7L7xwp6P}#
                           #{mod -ANAU$bmvAmthP7L7xwp6Q}#)
                         #{l -ANAU$bmvAmthP7L7xwp6R}#)
                   #f))
               (if (null? #{e -ANAU$bmvAmthP7L7xwp6O}#)
                 '()
                 (if (if (vector? #{e -ANAU$bmvAmthP7L7xwp6O}#)
                       (if (= (vector-length #{e -ANAU$bmvAmthP7L7xwp6O}#)
                              4)
                         (eq? (vector-ref #{e -ANAU$bmvAmthP7L7xwp6O}# 0)
                              'syntax-object)
                         #f)
                       #f)
                   (#{match-each-any -ANAU$bmvAmthP7L7xwpwi}#
                     (vector-ref #{e -ANAU$bmvAmthP7L7xwp6O}# 1)
                     (#{join-wraps -ANAU$bmvAmthP7L7xwnNw}#
                       #{w -ANAU$bmvAmthP7L7xwp6P}#
                       (vector-ref #{e -ANAU$bmvAmthP7L7xwp6O}# 2))
                     #{mod -ANAU$bmvAmthP7L7xwp6Q}#)
                   #f)))))
         (#{match-empty -ANAU$bmvAmthP7L7xwpwj}#
           (lambda (#{p -ANAU$bmvAmthP7L7xwp6p}#
                    #{r -ANAU$bmvAmthP7L7xwp6q}#)
             (if (null? #{p -ANAU$bmvAmthP7L7xwp6p}#)
               #{r -ANAU$bmvAmthP7L7xwp6q}#
               (if (eq? #{p -ANAU$bmvAmthP7L7xwp6p}# '_)
                 #{r -ANAU$bmvAmthP7L7xwp6q}#
                 (if (eq? #{p -ANAU$bmvAmthP7L7xwp6p}# 'any)
                   (cons '() #{r -ANAU$bmvAmthP7L7xwp6q}#)
                   (if (pair? #{p -ANAU$bmvAmthP7L7xwp6p}#)
                     (#{match-empty -ANAU$bmvAmthP7L7xwpwj}#
                       (car #{p -ANAU$bmvAmthP7L7xwp6p}#)
                       (#{match-empty -ANAU$bmvAmthP7L7xwpwj}#
                         (cdr #{p -ANAU$bmvAmthP7L7xwp6p}#)
                         #{r -ANAU$bmvAmthP7L7xwp6q}#))
                     (if (eq? #{p -ANAU$bmvAmthP7L7xwp6p}# 'each-any)
                       (cons '() #{r -ANAU$bmvAmthP7L7xwp6q}#)
                       (let ((#{atom-key -ANAU$bmvAmthP7L7xwp6r}#
                               (vector-ref #{p -ANAU$bmvAmthP7L7xwp6p}# 0)))
                         (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwp6r}# 'each)
                           (#{match-empty -ANAU$bmvAmthP7L7xwpwj}#
                             (vector-ref #{p -ANAU$bmvAmthP7L7xwp6p}# 1)
                             #{r -ANAU$bmvAmthP7L7xwp6q}#)
                           (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwp6r}#
                                     'each+)
                             (#{match-empty -ANAU$bmvAmthP7L7xwpwj}#
                               (vector-ref #{p -ANAU$bmvAmthP7L7xwp6p}# 1)
                               (#{match-empty -ANAU$bmvAmthP7L7xwpwj}#
                                 (reverse
                                   (vector-ref #{p -ANAU$bmvAmthP7L7xwp6p}# 2))
                                 (#{match-empty -ANAU$bmvAmthP7L7xwpwj}#
                                   (vector-ref #{p -ANAU$bmvAmthP7L7xwp6p}# 3)
                                   #{r -ANAU$bmvAmthP7L7xwp6q}#)))
                             (if (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwp6r}#
                                           'free-id)
                                   #t
                                   (eqv? #{atom-key -ANAU$bmvAmthP7L7xwp6r}#
                                         'atom))
                               #{r -ANAU$bmvAmthP7L7xwp6q}#
                               (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwp6r}#
                                         'vector)
                                 (#{match-empty -ANAU$bmvAmthP7L7xwpwj}#
                                   (vector-ref #{p -ANAU$bmvAmthP7L7xwp6p}# 1)
                                   #{r -ANAU$bmvAmthP7L7xwp6q}#)))))))))))))
         (#{combine -ANAU$bmvAmthP7L7xwpwk}#
           (lambda (#{r* -ANAU$bmvAmthP7L7xwp6$}#
                    #{r -ANAU$bmvAmthP7L7xwp6@}#)
             (if (null? (car #{r* -ANAU$bmvAmthP7L7xwp6$}#))
               #{r -ANAU$bmvAmthP7L7xwp6@}#
               (cons (map car #{r* -ANAU$bmvAmthP7L7xwp6$}#)
                     (#{combine -ANAU$bmvAmthP7L7xwpwk}#
                       (map cdr #{r* -ANAU$bmvAmthP7L7xwp6$}#)
                       #{r -ANAU$bmvAmthP7L7xwp6@}#)))))
         (#{match* -ANAU$bmvAmthP7L7xwpwl}#
           (lambda (#{e -ANAU$bmvAmthP7L7xwpxD}#
                    #{p -ANAU$bmvAmthP7L7xwpxE}#
                    #{w -ANAU$bmvAmthP7L7xwpxF}#
                    #{r -ANAU$bmvAmthP7L7xwpxG}#
                    #{mod -ANAU$bmvAmthP7L7xwpxH}#)
             (if (null? #{p -ANAU$bmvAmthP7L7xwpxE}#)
               (if (null? #{e -ANAU$bmvAmthP7L7xwpxD}#)
                 #{r -ANAU$bmvAmthP7L7xwpxG}#
                 #f)
               (if (pair? #{p -ANAU$bmvAmthP7L7xwpxE}#)
                 (if (pair? #{e -ANAU$bmvAmthP7L7xwpxD}#)
                   (#{match -ANAU$bmvAmthP7L7xwpwm}#
                     (car #{e -ANAU$bmvAmthP7L7xwpxD}#)
                     (car #{p -ANAU$bmvAmthP7L7xwpxE}#)
                     #{w -ANAU$bmvAmthP7L7xwpxF}#
                     (#{match -ANAU$bmvAmthP7L7xwpwm}#
                       (cdr #{e -ANAU$bmvAmthP7L7xwpxD}#)
                       (cdr #{p -ANAU$bmvAmthP7L7xwpxE}#)
                       #{w -ANAU$bmvAmthP7L7xwpxF}#
                       #{r -ANAU$bmvAmthP7L7xwpxG}#
                       #{mod -ANAU$bmvAmthP7L7xwpxH}#)
                     #{mod -ANAU$bmvAmthP7L7xwpxH}#)
                   #f)
                 (if (eq? #{p -ANAU$bmvAmthP7L7xwpxE}# 'each-any)
                   (let ((#{l -ANAU$bmvAmthP7L7xwpxM}#
                           (#{match-each-any -ANAU$bmvAmthP7L7xwpwi}#
                             #{e -ANAU$bmvAmthP7L7xwpxD}#
                             #{w -ANAU$bmvAmthP7L7xwpxF}#
                             #{mod -ANAU$bmvAmthP7L7xwpxH}#)))
                     (if #{l -ANAU$bmvAmthP7L7xwpxM}#
                       (cons #{l -ANAU$bmvAmthP7L7xwpxM}#
                             #{r -ANAU$bmvAmthP7L7xwpxG}#)
                       #f))
                   (let ((#{atom-key -ANAU$bmvAmthP7L7xwpxR}#
                           (vector-ref #{p -ANAU$bmvAmthP7L7xwpxE}# 0)))
                     (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwpxR}# 'each)
                       (if (null? #{e -ANAU$bmvAmthP7L7xwpxD}#)
                         (#{match-empty -ANAU$bmvAmthP7L7xwpwj}#
                           (vector-ref #{p -ANAU$bmvAmthP7L7xwpxE}# 1)
                           #{r -ANAU$bmvAmthP7L7xwpxG}#)
                         (let ((#{l -ANAU$bmvAmthP7L7xwpxY}#
                                 (#{match-each -ANAU$bmvAmthP7L7xwpwg}#
                                   #{e -ANAU$bmvAmthP7L7xwpxD}#
                                   (vector-ref #{p -ANAU$bmvAmthP7L7xwpxE}# 1)
                                   #{w -ANAU$bmvAmthP7L7xwpxF}#
                                   #{mod -ANAU$bmvAmthP7L7xwpxH}#)))
                           (if #{l -ANAU$bmvAmthP7L7xwpxY}#
                             (letrec*
                               ((#{collect -ANAU$bmvAmthP7L7xwpxb}#
                                  (lambda (#{l -ANAU$bmvAmthP7L7xwpyO}#)
                                    (if (null? (car #{l -ANAU$bmvAmthP7L7xwpyO}#))
                                      #{r -ANAU$bmvAmthP7L7xwpxG}#
                                      (cons (map car
                                                 #{l -ANAU$bmvAmthP7L7xwpyO}#)
                                            (#{collect -ANAU$bmvAmthP7L7xwpxb}#
                                              (map cdr
                                                   #{l -ANAU$bmvAmthP7L7xwpyO}#)))))))
                               (#{collect -ANAU$bmvAmthP7L7xwpxb}#
                                 #{l -ANAU$bmvAmthP7L7xwpxY}#))
                             #f)))
                       (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwpxR}# 'each+)
                         (call-with-values
                           (lambda ()
                             (let ((#{x-pat -ANAU$bmvAmthP7L7xwpyX}#
                                     (vector-ref
                                       #{p -ANAU$bmvAmthP7L7xwpxE}#
                                       1))
                                   (#{y-pat -ANAU$bmvAmthP7L7xwpyY}#
                                     (vector-ref
                                       #{p -ANAU$bmvAmthP7L7xwpxE}#
                                       2))
                                   (#{z-pat -ANAU$bmvAmthP7L7xwpyZ}#
                                     (vector-ref
                                       #{p -ANAU$bmvAmthP7L7xwpxE}#
                                       3)))
                               (letrec*
                                 ((#{f -ANAU$bmvAmthP7L7xwpyd}#
                                    (lambda (#{e -ANAU$bmvAmthP7L7xwpyf}#
                                             #{w -ANAU$bmvAmthP7L7xwpyg}#)
                                      (if (pair? #{e -ANAU$bmvAmthP7L7xwpyf}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{f -ANAU$bmvAmthP7L7xwpyd}#
                                              (cdr #{e -ANAU$bmvAmthP7L7xwpyf}#)
                                              #{w -ANAU$bmvAmthP7L7xwpyg}#))
                                          (lambda (#{xr* -ANAU$bmvAmthP7L7xwpyh}#
                                                   #{y-pat -ANAU$bmvAmthP7L7xwpyi}#
                                                   #{r -ANAU$bmvAmthP7L7xwpyj}#)
                                            (if #{r -ANAU$bmvAmthP7L7xwpyj}#
                                              (if (null? #{y-pat -ANAU$bmvAmthP7L7xwpyi}#)
                                                (let ((#{xr -ANAU$bmvAmthP7L7xwpyk}#
                                                        (#{match -ANAU$bmvAmthP7L7xwpwm}#
                                                          (car #{e -ANAU$bmvAmthP7L7xwpyf}#)
                                                          #{x-pat -ANAU$bmvAmthP7L7xwpyX}#
                                                          #{w -ANAU$bmvAmthP7L7xwpyg}#
                                                          '()
                                                          #{mod -ANAU$bmvAmthP7L7xwpxH}#)))
                                                  (if #{xr -ANAU$bmvAmthP7L7xwpyk}#
                                                    (values
                                                      (cons #{xr -ANAU$bmvAmthP7L7xwpyk}#
                                                            #{xr* -ANAU$bmvAmthP7L7xwpyh}#)
                                                      #{y-pat -ANAU$bmvAmthP7L7xwpyi}#
                                                      #{r -ANAU$bmvAmthP7L7xwpyj}#)
                                                    (values #f #f #f)))
                                                (values
                                                  '()
                                                  (cdr #{y-pat -ANAU$bmvAmthP7L7xwpyi}#)
                                                  (#{match -ANAU$bmvAmthP7L7xwpwm}#
                                                    (car #{e -ANAU$bmvAmthP7L7xwpyf}#)
                                                    (car #{y-pat -ANAU$bmvAmthP7L7xwpyi}#)
                                                    #{w -ANAU$bmvAmthP7L7xwpyg}#
                                                    #{r -ANAU$bmvAmthP7L7xwpyj}#
                                                    #{mod -ANAU$bmvAmthP7L7xwpxH}#)))
                                              (values #f #f #f))))
                                        (if (if (vector?
                                                  #{e -ANAU$bmvAmthP7L7xwpyf}#)
                                              (if (= (vector-length
                                                       #{e -ANAU$bmvAmthP7L7xwpyf}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{e -ANAU$bmvAmthP7L7xwpyf}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (#{f -ANAU$bmvAmthP7L7xwpyd}#
                                            (vector-ref
                                              #{e -ANAU$bmvAmthP7L7xwpyf}#
                                              1)
                                            (#{join-wraps -ANAU$bmvAmthP7L7xwnNw}#
                                              #{w -ANAU$bmvAmthP7L7xwpyg}#
                                              #{e -ANAU$bmvAmthP7L7xwpyf}#))
                                          (values
                                            '()
                                            #{y-pat -ANAU$bmvAmthP7L7xwpyY}#
                                            (#{match -ANAU$bmvAmthP7L7xwpwm}#
                                              #{e -ANAU$bmvAmthP7L7xwpyf}#
                                              #{z-pat -ANAU$bmvAmthP7L7xwpyZ}#
                                              #{w -ANAU$bmvAmthP7L7xwpyg}#
                                              #{r -ANAU$bmvAmthP7L7xwpxG}#
                                              #{mod -ANAU$bmvAmthP7L7xwpxH}#)))))))
                                 (#{f -ANAU$bmvAmthP7L7xwpyd}#
                                   #{e -ANAU$bmvAmthP7L7xwpxD}#
                                   #{w -ANAU$bmvAmthP7L7xwpxF}#))))
                           (lambda (#{xr* -ANAU$bmvAmthP7L7xwpy$}#
                                    #{y-pat -ANAU$bmvAmthP7L7xwpy@}#
                                    #{r -ANAU$bmvAmthP7L7xwpzA}#)
                             (if #{r -ANAU$bmvAmthP7L7xwpzA}#
                               (if (null? #{y-pat -ANAU$bmvAmthP7L7xwpy@}#)
                                 (if (null? #{xr* -ANAU$bmvAmthP7L7xwpy$}#)
                                   (#{match-empty -ANAU$bmvAmthP7L7xwpwj}#
                                     (vector-ref
                                       #{p -ANAU$bmvAmthP7L7xwpxE}#
                                       1)
                                     #{r -ANAU$bmvAmthP7L7xwpzA}#)
                                   (#{combine -ANAU$bmvAmthP7L7xwpwk}#
                                     #{xr* -ANAU$bmvAmthP7L7xwpy$}#
                                     #{r -ANAU$bmvAmthP7L7xwpzA}#))
                                 #f)
                               #f)))
                         (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwpxR}#
                                   'free-id)
                           (if (if (symbol? #{e -ANAU$bmvAmthP7L7xwpxD}#)
                                 #t
                                 (if (if (vector? #{e -ANAU$bmvAmthP7L7xwpxD}#)
                                       (if (= (vector-length
                                                #{e -ANAU$bmvAmthP7L7xwpxD}#)
                                              4)
                                         (eq? (vector-ref
                                                #{e -ANAU$bmvAmthP7L7xwpxD}#
                                                0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (symbol?
                                     (vector-ref
                                       #{e -ANAU$bmvAmthP7L7xwpxD}#
                                       1))
                                   #f))
                             (if (let ((#{i -ANAU$bmvAmthP7L7xwp4L}#
                                         (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                                           #{e -ANAU$bmvAmthP7L7xwpxD}#
                                           #{w -ANAU$bmvAmthP7L7xwpxF}#
                                           #{mod -ANAU$bmvAmthP7L7xwpxH}#))
                                       (#{j -ANAU$bmvAmthP7L7xwp4M}#
                                         (vector-ref
                                           #{p -ANAU$bmvAmthP7L7xwpxE}#
                                           1)))
                                   (if (eq? (if (if (vector?
                                                      #{i -ANAU$bmvAmthP7L7xwp4L}#)
                                                  (if (= (vector-length
                                                           #{i -ANAU$bmvAmthP7L7xwp4L}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{i -ANAU$bmvAmthP7L7xwp4L}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{i -ANAU$bmvAmthP7L7xwp4L}#
                                                1)
                                              #{i -ANAU$bmvAmthP7L7xwp4L}#)
                                            (if (if (vector?
                                                      #{j -ANAU$bmvAmthP7L7xwp4M}#)
                                                  (if (= (vector-length
                                                           #{j -ANAU$bmvAmthP7L7xwp4M}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{j -ANAU$bmvAmthP7L7xwp4M}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{j -ANAU$bmvAmthP7L7xwp4M}#
                                                1)
                                              #{j -ANAU$bmvAmthP7L7xwp4M}#))
                                     (eq? (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                            #{i -ANAU$bmvAmthP7L7xwp4L}#
                                            '(()))
                                          (#{id-var-name -ANAU$bmvAmthP7L7xwnNz}#
                                            #{j -ANAU$bmvAmthP7L7xwp4M}#
                                            '(())))
                                     #f))
                               #{r -ANAU$bmvAmthP7L7xwpxG}#
                               #f)
                             #f)
                           (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwpxR}# 'atom)
                             (if (equal?
                                   (vector-ref #{p -ANAU$bmvAmthP7L7xwpxE}# 1)
                                   (#{strip -ANAU$bmvAmthP7L7xwnOR}#
                                     #{e -ANAU$bmvAmthP7L7xwpxD}#
                                     #{w -ANAU$bmvAmthP7L7xwpxF}#))
                               #{r -ANAU$bmvAmthP7L7xwpxG}#
                               #f)
                             (if (eqv? #{atom-key -ANAU$bmvAmthP7L7xwpxR}#
                                       'vector)
                               (if (vector? #{e -ANAU$bmvAmthP7L7xwpxD}#)
                                 (#{match -ANAU$bmvAmthP7L7xwpwm}#
                                   (vector->list #{e -ANAU$bmvAmthP7L7xwpxD}#)
                                   (vector-ref #{p -ANAU$bmvAmthP7L7xwpxE}# 1)
                                   #{w -ANAU$bmvAmthP7L7xwpxF}#
                                   #{r -ANAU$bmvAmthP7L7xwpxG}#
                                   #{mod -ANAU$bmvAmthP7L7xwpxH}#)
                                 #f))))))))))))
         (#{match -ANAU$bmvAmthP7L7xwpwm}#
           (lambda (#{e -ANAU$bmvAmthP7L7xwp5I}#
                    #{p -ANAU$bmvAmthP7L7xwp5J}#
                    #{w -ANAU$bmvAmthP7L7xwp5K}#
                    #{r -ANAU$bmvAmthP7L7xwp5L}#
                    #{mod -ANAU$bmvAmthP7L7xwp5M}#)
             (if (not #{r -ANAU$bmvAmthP7L7xwp5L}#)
               #f
               (if (eq? #{p -ANAU$bmvAmthP7L7xwp5J}# '_)
                 #{r -ANAU$bmvAmthP7L7xwp5L}#
                 (if (eq? #{p -ANAU$bmvAmthP7L7xwp5J}# 'any)
                   (cons (#{wrap -ANAU$bmvAmthP7L7xwnN9}#
                           #{e -ANAU$bmvAmthP7L7xwp5I}#
                           #{w -ANAU$bmvAmthP7L7xwp5K}#
                           #{mod -ANAU$bmvAmthP7L7xwp5M}#)
                         #{r -ANAU$bmvAmthP7L7xwp5L}#)
                   (if (if (vector? #{e -ANAU$bmvAmthP7L7xwp5I}#)
                         (if (= (vector-length #{e -ANAU$bmvAmthP7L7xwp5I}#)
                                4)
                           (eq? (vector-ref #{e -ANAU$bmvAmthP7L7xwp5I}# 0)
                                'syntax-object)
                           #f)
                         #f)
                     (#{match* -ANAU$bmvAmthP7L7xwpwl}#
                       (vector-ref #{e -ANAU$bmvAmthP7L7xwp5I}# 1)
                       #{p -ANAU$bmvAmthP7L7xwp5J}#
                       (#{join-wraps -ANAU$bmvAmthP7L7xwnNw}#
                         #{w -ANAU$bmvAmthP7L7xwp5K}#
                         (vector-ref #{e -ANAU$bmvAmthP7L7xwp5I}# 2))
                       #{r -ANAU$bmvAmthP7L7xwp5L}#
                       (vector-ref #{e -ANAU$bmvAmthP7L7xwp5I}# 3))
                     (#{match* -ANAU$bmvAmthP7L7xwpwl}#
                       #{e -ANAU$bmvAmthP7L7xwp5I}#
                       #{p -ANAU$bmvAmthP7L7xwp5J}#
                       #{w -ANAU$bmvAmthP7L7xwp5K}#
                       #{r -ANAU$bmvAmthP7L7xwp5L}#
                       #{mod -ANAU$bmvAmthP7L7xwp5M}#))))))))
        (set! $sc-dispatch
          (lambda (#{e -ANAU$bmvAmthP7L7xwpwn}#
                   #{p -ANAU$bmvAmthP7L7xwpwo}#)
            (if (eq? #{p -ANAU$bmvAmthP7L7xwpwo}# 'any)
              (list #{e -ANAU$bmvAmthP7L7xwpwn}#)
              (if (eq? #{p -ANAU$bmvAmthP7L7xwpwo}# '_)
                '()
                (if (if (vector? #{e -ANAU$bmvAmthP7L7xwpwn}#)
                      (if (= (vector-length #{e -ANAU$bmvAmthP7L7xwpwn}#)
                             4)
                        (eq? (vector-ref #{e -ANAU$bmvAmthP7L7xwpwn}# 0)
                             'syntax-object)
                        #f)
                      #f)
                  (#{match* -ANAU$bmvAmthP7L7xwpwl}#
                    (vector-ref #{e -ANAU$bmvAmthP7L7xwpwn}# 1)
                    #{p -ANAU$bmvAmthP7L7xwpwo}#
                    (vector-ref #{e -ANAU$bmvAmthP7L7xwpwn}# 2)
                    '()
                    (vector-ref #{e -ANAU$bmvAmthP7L7xwpwn}# 3))
                  (#{match* -ANAU$bmvAmthP7L7xwpwl}#
                    #{e -ANAU$bmvAmthP7L7xwpwn}#
                    #{p -ANAU$bmvAmthP7L7xwpwo}#
                    '(())
                    '()
                    #f))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xws3J}#)
      (let ((#{tmp -ANAU$bmvAmthP7L7xws3L}#
              ($sc-dispatch
                #{x -ANAU$bmvAmthP7L7xws3J}#
                '(_ () any . each-any))))
        (if #{tmp -ANAU$bmvAmthP7L7xws3L}#
          (@apply
            (lambda (#{e1 -ANAU$bmvAmthP7L7xws3P}#
                     #{e2 -ANAU$bmvAmthP7L7xws3Q}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage #(e1 e2) #((top) (top)) #("1bj" "1bk"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("1bi")))
                       (hygiene guile))
                    (cons '()
                          (cons #{e1 -ANAU$bmvAmthP7L7xws3P}#
                                #{e2 -ANAU$bmvAmthP7L7xws3Q}#))))
            #{tmp -ANAU$bmvAmthP7L7xws3L}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xws3R}#
                  ($sc-dispatch
                    #{x -ANAU$bmvAmthP7L7xws3J}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp -ANAU$bmvAmthP7L7xws3R}#
              (@apply
                (lambda (#{out -ANAU$bmvAmthP7L7xws3V}#
                         #{in -ANAU$bmvAmthP7L7xws3W}#
                         #{e1 -ANAU$bmvAmthP7L7xws3X}#
                         #{e2 -ANAU$bmvAmthP7L7xws3Y}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("1bl" "1bm" "1bn" "1bo"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1bi")))
                           (hygiene guile))
                        #{in -ANAU$bmvAmthP7L7xws3W}#
                        '()
                        (list #{out -ANAU$bmvAmthP7L7xws3V}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("1bl" "1bm" "1bn" "1bo"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("1bi")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 -ANAU$bmvAmthP7L7xws3X}#
                                                #{e2 -ANAU$bmvAmthP7L7xws3Y}#))))))
                #{tmp -ANAU$bmvAmthP7L7xws3R}#)
              (let ((#{tmp -ANAU$bmvAmthP7L7xws3Z}#
                      ($sc-dispatch
                        #{x -ANAU$bmvAmthP7L7xws3J}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp -ANAU$bmvAmthP7L7xws3Z}#
                  (@apply
                    (lambda (#{out -ANAU$bmvAmthP7L7xws3d}#
                             #{in -ANAU$bmvAmthP7L7xws3e}#
                             #{e1 -ANAU$bmvAmthP7L7xws3f}#
                             #{e2 -ANAU$bmvAmthP7L7xws3g}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("1bp" "1bq" "1br" "1bs"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("1bi")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("1bp" "1bq" "1br" "1bs"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("1bi")))
                                     (hygiene guile))
                                  #{in -ANAU$bmvAmthP7L7xws3e}#)
                            '()
                            (list #{out -ANAU$bmvAmthP7L7xws3d}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("1bp" "1bq" "1br" "1bs"))
                                            #(ribcage () () ())
                                            #(ribcage #(x) #((top)) #("1bi")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 -ANAU$bmvAmthP7L7xws3f}#
                                                    #{e2 -ANAU$bmvAmthP7L7xws3g}#))))))
                    #{tmp -ANAU$bmvAmthP7L7xws3Z}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x -ANAU$bmvAmthP7L7xws3J}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xws4H}#)
      (let ((#{tmp -ANAU$bmvAmthP7L7xws4J}#
              ($sc-dispatch
                #{x -ANAU$bmvAmthP7L7xws4H}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp -ANAU$bmvAmthP7L7xws4J}#
          (@apply
            (lambda (#{k -ANAU$bmvAmthP7L7xws4N}#
                     #{keyword -ANAU$bmvAmthP7L7xws4O}#
                     #{pattern -ANAU$bmvAmthP7L7xws4P}#
                     #{template -ANAU$bmvAmthP7L7xws4Q}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("1bu" "1bv" "1bw" "1bx"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("1bt")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("1bu" "1bv" "1bw" "1bx"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("1bt")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("1bu" "1bv" "1bw" "1bx"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("1bt")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("1bu" "1bv" "1bw" "1bx"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("1bt")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("1bu" "1bv" "1bw" "1bx"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("1bt")))
                               (hygiene guile))
                            #{pattern -ANAU$bmvAmthP7L7xws4P}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("1bu" "1bv" "1bw" "1bx"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("1bt")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("1bu" "1bv" "1bw" "1bx"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("1bt")))
                                   (hygiene guile))
                                (cons #{k -ANAU$bmvAmthP7L7xws4N}#
                                      (map (lambda (#{tmp -ANAU$bmvAmthP7L7xws33 -ANAU$bmvAmthP7L7xws4R}#
                                                    #{tmp -ANAU$bmvAmthP7L7xws32 -ANAU$bmvAmthP7L7xws4S}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("1bu"
                                                                 "1bv"
                                                                 "1bw"
                                                                 "1bx"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("1bt")))
                                                            (hygiene guile))
                                                         #{tmp -ANAU$bmvAmthP7L7xws32 -ANAU$bmvAmthP7L7xws4S}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("1bu"
                                                                 "1bv"
                                                                 "1bw"
                                                                 "1bx"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("1bt")))
                                                            (hygiene guile))
                                                         #{tmp -ANAU$bmvAmthP7L7xws33 -ANAU$bmvAmthP7L7xws4R}#)))
                                           #{template -ANAU$bmvAmthP7L7xws4Q}#
                                           #{pattern -ANAU$bmvAmthP7L7xws4P}#))))))
            #{tmp -ANAU$bmvAmthP7L7xws4J}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xws4T}#
                  ($sc-dispatch
                    #{x -ANAU$bmvAmthP7L7xws4H}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp -ANAU$bmvAmthP7L7xws4T}#
                  (@apply
                    (lambda (#{k -ANAU$bmvAmthP7L7xws4X}#
                             #{docstring -ANAU$bmvAmthP7L7xws4Y}#
                             #{keyword -ANAU$bmvAmthP7L7xws4Z}#
                             #{pattern -ANAU$bmvAmthP7L7xws4a}#
                             #{template -ANAU$bmvAmthP7L7xws4b}#)
                      (string?
                        (syntax->datum
                          #{docstring -ANAU$bmvAmthP7L7xws4Y}#)))
                    #{tmp -ANAU$bmvAmthP7L7xws4T}#)
                  #f)
              (@apply
                (lambda (#{k -ANAU$bmvAmthP7L7xws4c}#
                         #{docstring -ANAU$bmvAmthP7L7xws4d}#
                         #{keyword -ANAU$bmvAmthP7L7xws4e}#
                         #{pattern -ANAU$bmvAmthP7L7xws4f}#
                         #{template -ANAU$bmvAmthP7L7xws4g}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("1c3" "1c4" "1c5" "1c6" "1c7"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1bt")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("1c3" "1c4" "1c5" "1c6" "1c7"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("1bt")))
                            (hygiene guile)))
                        #{docstring -ANAU$bmvAmthP7L7xws4d}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("1c3" "1c4" "1c5" "1c6" "1c7"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("1bt")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("1c3" "1c4" "1c5" "1c6" "1c7"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("1bt")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("1c3" "1c4" "1c5" "1c6" "1c7"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("1bt")))
                                   (hygiene guile))
                                #{pattern -ANAU$bmvAmthP7L7xws4f}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("1c3" "1c4" "1c5" "1c6" "1c7"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("1bt")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("1c3" "1c4" "1c5" "1c6" "1c7"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("1bt")))
                                       (hygiene guile))
                                    (cons #{k -ANAU$bmvAmthP7L7xws4c}#
                                          (map (lambda (#{tmp -ANAU$bmvAmthP7L7xws4G -ANAU$bmvAmthP7L7xws4h}#
                                                        #{tmp -ANAU$bmvAmthP7L7xws4F -ANAU$bmvAmthP7L7xws4i}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("1c3"
                                                                     "1c4"
                                                                     "1c5"
                                                                     "1c6"
                                                                     "1c7"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("1bt")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp -ANAU$bmvAmthP7L7xws4F -ANAU$bmvAmthP7L7xws4i}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("1c3"
                                                                     "1c4"
                                                                     "1c5"
                                                                     "1c6"
                                                                     "1c7"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("1bt")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp -ANAU$bmvAmthP7L7xws4G -ANAU$bmvAmthP7L7xws4h}#)))
                                               #{template -ANAU$bmvAmthP7L7xws4g}#
                                               #{pattern -ANAU$bmvAmthP7L7xws4f}#))))))
                #{tmp -ANAU$bmvAmthP7L7xws4T}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x -ANAU$bmvAmthP7L7xws4H}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xws47}#)
      (let ((#{tmp -ANAU$bmvAmthP7L7xws49}#
              ($sc-dispatch
                #{x -ANAU$bmvAmthP7L7xws47}#
                '(_ (any . any) any))))
        (if #{tmp -ANAU$bmvAmthP7L7xws49}#
          (@apply
            (lambda (#{name -ANAU$bmvAmthP7L7xws5B}#
                     #{pattern -ANAU$bmvAmthP7L7xws5C}#
                     #{template -ANAU$bmvAmthP7L7xws5D}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("1c9" "1ca" "1cb"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("1c8")))
                       (hygiene guile))
                    #{name -ANAU$bmvAmthP7L7xws5B}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("1c9" "1ca" "1cb"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("1c8")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("1c9" "1ca" "1cb"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("1c8")))
                                         (hygiene guile))
                                      #{pattern -ANAU$bmvAmthP7L7xws5C}#)
                                #{template -ANAU$bmvAmthP7L7xws5D}#))))
            #{tmp -ANAU$bmvAmthP7L7xws49}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xws5E}#
                  ($sc-dispatch
                    #{x -ANAU$bmvAmthP7L7xws47}#
                    '(_ (any . any) any any))))
            (if (if #{tmp -ANAU$bmvAmthP7L7xws5E}#
                  (@apply
                    (lambda (#{name -ANAU$bmvAmthP7L7xws5I}#
                             #{pattern -ANAU$bmvAmthP7L7xws5J}#
                             #{docstring -ANAU$bmvAmthP7L7xws5K}#
                             #{template -ANAU$bmvAmthP7L7xws5L}#)
                      (string?
                        (syntax->datum
                          #{docstring -ANAU$bmvAmthP7L7xws5K}#)))
                    #{tmp -ANAU$bmvAmthP7L7xws5E}#)
                  #f)
              (@apply
                (lambda (#{name -ANAU$bmvAmthP7L7xws5M}#
                         #{pattern -ANAU$bmvAmthP7L7xws5N}#
                         #{docstring -ANAU$bmvAmthP7L7xws5O}#
                         #{template -ANAU$bmvAmthP7L7xws5P}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("1cg" "1ch" "1ci" "1cj"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1c8")))
                           (hygiene guile))
                        #{name -ANAU$bmvAmthP7L7xws5M}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("1cg" "1ch" "1ci" "1cj"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("1c8")))
                                 (hygiene guile))
                              '()
                              #{docstring -ANAU$bmvAmthP7L7xws5O}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("1cg" "1ch" "1ci" "1cj"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("1c8")))
                                             (hygiene guile))
                                          #{pattern -ANAU$bmvAmthP7L7xws5N}#)
                                    #{template -ANAU$bmvAmthP7L7xws5P}#))))
                #{tmp -ANAU$bmvAmthP7L7xws5E}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x -ANAU$bmvAmthP7L7xws47}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xws5x}#)
      (let ((#{tmp -ANAU$bmvAmthP7L7xws5z}#
              ($sc-dispatch
                #{x -ANAU$bmvAmthP7L7xws5x}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp -ANAU$bmvAmthP7L7xws5z}#
              (@apply
                (lambda (#{let* -ANAU$bmvAmthP7L7xws53}#
                         #{x -ANAU$bmvAmthP7L7xws54}#
                         #{v -ANAU$bmvAmthP7L7xws55}#
                         #{e1 -ANAU$bmvAmthP7L7xws56}#
                         #{e2 -ANAU$bmvAmthP7L7xws57}#)
                  (and-map
                    identifier?
                    #{x -ANAU$bmvAmthP7L7xws54}#))
                #{tmp -ANAU$bmvAmthP7L7xws5z}#)
              #f)
          (@apply
            (lambda (#{let* -ANAU$bmvAmthP7L7xws58}#
                     #{x -ANAU$bmvAmthP7L7xws59}#
                     #{v -ANAU$bmvAmthP7L7xws5$}#
                     #{e1 -ANAU$bmvAmthP7L7xws5@}#
                     #{e2 -ANAU$bmvAmthP7L7xws6A}#)
              (letrec*
                ((#{f -ANAU$bmvAmthP7L7xws6B}#
                   (lambda (#{bindings -ANAU$bmvAmthP7L7xws6E}#)
                     (if (null? #{bindings -ANAU$bmvAmthP7L7xws6E}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("1cv" "1cw"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("1cq" "1cr" "1cs" "1ct" "1cu"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("1ck")))
                                (hygiene guile))
                             (cons '()
                                   (cons #{e1 -ANAU$bmvAmthP7L7xws5@}#
                                         #{e2 -ANAU$bmvAmthP7L7xws6A}#)))
                       (let ((#{tmp -ANAU$bmvAmthP7L7xws6F}#
                               (list (#{f -ANAU$bmvAmthP7L7xws6B}#
                                       (cdr #{bindings -ANAU$bmvAmthP7L7xws6E}#))
                                     (car #{bindings -ANAU$bmvAmthP7L7xws6E}#))))
                         (let ((#{tmp -ANAU$bmvAmthP7L7xws6G}#
                                 ($sc-dispatch
                                   #{tmp -ANAU$bmvAmthP7L7xws6F}#
                                   '(any any))))
                           (if #{tmp -ANAU$bmvAmthP7L7xws6G}#
                             (@apply
                               (lambda (#{body -ANAU$bmvAmthP7L7xws6I}#
                                        #{binding -ANAU$bmvAmthP7L7xws6J}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("1cx" "1cy"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("1cv" "1cw"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("1cq" "1cr" "1cs" "1ct" "1cu"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("1ck")))
                                          (hygiene guile))
                                       (list #{binding -ANAU$bmvAmthP7L7xws6J}#)
                                       #{body -ANAU$bmvAmthP7L7xws6I}#))
                               #{tmp -ANAU$bmvAmthP7L7xws6G}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp -ANAU$bmvAmthP7L7xws6F}#))))))))
                (#{f -ANAU$bmvAmthP7L7xws6B}#
                  (map list
                       #{x -ANAU$bmvAmthP7L7xws59}#
                       #{v -ANAU$bmvAmthP7L7xws5$}#))))
            #{tmp -ANAU$bmvAmthP7L7xws5z}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x -ANAU$bmvAmthP7L7xws5x}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x -ANAU$bmvAmthP7L7xws61}#)
      (let ((#{tmp -ANAU$bmvAmthP7L7xws63}#
              ($sc-dispatch
                #{orig-x -ANAU$bmvAmthP7L7xws61}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp -ANAU$bmvAmthP7L7xws63}#
          (@apply
            (lambda (#{var -ANAU$bmvAmthP7L7xws67}#
                     #{init -ANAU$bmvAmthP7L7xws68}#
                     #{step -ANAU$bmvAmthP7L7xws69}#
                     #{e0 -ANAU$bmvAmthP7L7xws6$}#
                     #{e1 -ANAU$bmvAmthP7L7xws6@}#
                     #{c -ANAU$bmvAmthP7L7xws7A}#)
              (let ((#{tmp -ANAU$bmvAmthP7L7xws7B}#
                      (map (lambda (#{v -ANAU$bmvAmthP7L7xws7E}#
                                    #{s -ANAU$bmvAmthP7L7xws7F}#)
                             (let ((#{tmp -ANAU$bmvAmthP7L7xws7H}#
                                     ($sc-dispatch
                                       #{s -ANAU$bmvAmthP7L7xws7F}#
                                       '())))
                               (if #{tmp -ANAU$bmvAmthP7L7xws7H}#
                                 (@apply
                                   (lambda () #{v -ANAU$bmvAmthP7L7xws7E}#)
                                   #{tmp -ANAU$bmvAmthP7L7xws7H}#)
                                 (let ((#{tmp -ANAU$bmvAmthP7L7xws7K}#
                                         ($sc-dispatch
                                           #{s -ANAU$bmvAmthP7L7xws7F}#
                                           '(any))))
                                   (if #{tmp -ANAU$bmvAmthP7L7xws7K}#
                                     (@apply
                                       (lambda (#{e -ANAU$bmvAmthP7L7xws7N}#)
                                         #{e -ANAU$bmvAmthP7L7xws7N}#)
                                       #{tmp -ANAU$bmvAmthP7L7xws7K}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x -ANAU$bmvAmthP7L7xws61}#
                                       #{s -ANAU$bmvAmthP7L7xws7F}#))))))
                           #{var -ANAU$bmvAmthP7L7xws67}#
                           #{step -ANAU$bmvAmthP7L7xws69}#)))
                (let ((#{tmp -ANAU$bmvAmthP7L7xws7C}#
                        ($sc-dispatch
                          #{tmp -ANAU$bmvAmthP7L7xws7B}#
                          'each-any)))
                  (if #{tmp -ANAU$bmvAmthP7L7xws7C}#
                    (@apply
                      (lambda (#{step -ANAU$bmvAmthP7L7xws7T}#)
                        (let ((#{tmp -ANAU$bmvAmthP7L7xws7V}#
                                ($sc-dispatch
                                  #{e1 -ANAU$bmvAmthP7L7xws6@}#
                                  '())))
                          (if #{tmp -ANAU$bmvAmthP7L7xws7V}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage #(step) #((top)) #("1d6"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("1d0"
                                              "1d1"
                                              "1d2"
                                              "1d3"
                                              "1d4"
                                              "1d5"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("1cz")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage #(step) #((top)) #("1d6"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("1d0"
                                              "1d1"
                                              "1d2"
                                              "1d3"
                                              "1d4"
                                              "1d5"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("1cz")))
                                         (hygiene guile))
                                      (map list
                                           #{var -ANAU$bmvAmthP7L7xws67}#
                                           #{init -ANAU$bmvAmthP7L7xws68}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("1d6"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("1d0"
                                                    "1d1"
                                                    "1d2"
                                                    "1d3"
                                                    "1d4"
                                                    "1d5"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("1cz")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("1d6"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("1d0"
                                                          "1d1"
                                                          "1d2"
                                                          "1d3"
                                                          "1d4"
                                                          "1d5"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("1cz")))
                                                     (hygiene guile))
                                                  #{e0 -ANAU$bmvAmthP7L7xws6$}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("1d6"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("1d0"
                                                          "1d1"
                                                          "1d2"
                                                          "1d3"
                                                          "1d4"
                                                          "1d5"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("1cz")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c -ANAU$bmvAmthP7L7xws7A}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("1d6"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("1d0"
                                                                        "1d1"
                                                                        "1d2"
                                                                        "1d3"
                                                                        "1d4"
                                                                        "1d5"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("1cz")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step -ANAU$bmvAmthP7L7xws7T}#)))))))
                              #{tmp -ANAU$bmvAmthP7L7xws7V}#)
                            (let ((#{tmp -ANAU$bmvAmthP7L7xws7Z}#
                                    ($sc-dispatch
                                      #{e1 -ANAU$bmvAmthP7L7xws6@}#
                                      '(any . each-any))))
                              (if #{tmp -ANAU$bmvAmthP7L7xws7Z}#
                                (@apply
                                  (lambda (#{e1 -ANAU$bmvAmthP7L7xws7d}#
                                           #{e2 -ANAU$bmvAmthP7L7xws7e}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("1d7" "1d8"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("1d6"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("1d0"
                                                  "1d1"
                                                  "1d2"
                                                  "1d3"
                                                  "1d4"
                                                  "1d5"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("1cz")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("1d7" "1d8"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("1d6"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("1d0"
                                                  "1d1"
                                                  "1d2"
                                                  "1d3"
                                                  "1d4"
                                                  "1d5"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("1cz")))
                                             (hygiene guile))
                                          (map list
                                               #{var -ANAU$bmvAmthP7L7xws67}#
                                               #{init -ANAU$bmvAmthP7L7xws68}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("1d7" "1d8"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("1d6"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1d0"
                                                        "1d1"
                                                        "1d2"
                                                        "1d3"
                                                        "1d4"
                                                        "1d5"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("1cz")))
                                                   (hygiene guile))
                                                #{e0 -ANAU$bmvAmthP7L7xws6$}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("1d7" "1d8"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("1d6"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("1d0"
                                                              "1d1"
                                                              "1d2"
                                                              "1d3"
                                                              "1d4"
                                                              "1d5"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("1cz")))
                                                         (hygiene guile))
                                                      (cons #{e1 -ANAU$bmvAmthP7L7xws7d}#
                                                            #{e2 -ANAU$bmvAmthP7L7xws7e}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("1d7" "1d8"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("1d6"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("1d0"
                                                              "1d1"
                                                              "1d2"
                                                              "1d3"
                                                              "1d4"
                                                              "1d5"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("1cz")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c -ANAU$bmvAmthP7L7xws7A}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("1d7"
                                                                            "1d8"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("1d6"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("1d0"
                                                                            "1d1"
                                                                            "1d2"
                                                                            "1d3"
                                                                            "1d4"
                                                                            "1d5"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("1cz")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step -ANAU$bmvAmthP7L7xws7T}#)))))))
                                  #{tmp -ANAU$bmvAmthP7L7xws7Z}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 -ANAU$bmvAmthP7L7xws6@}#))))))
                      #{tmp -ANAU$bmvAmthP7L7xws7C}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp -ANAU$bmvAmthP7L7xws7B}#)))))
            #{tmp -ANAU$bmvAmthP7L7xws63}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x -ANAU$bmvAmthP7L7xws61}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi -ANAU$bmvAmthP7L7xws$t}#
         (lambda (#{p -ANAU$bmvAmthP7L7xws@F}#
                  #{lev -ANAU$bmvAmthP7L7xws@G}#)
           (let ((#{tmp -ANAU$bmvAmthP7L7xws@I}#
                   ($sc-dispatch
                     #{p -ANAU$bmvAmthP7L7xws@F}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("1dk" "1dl"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("1dj" "1di" "1dh" "1dg" "1df" "1de" "1dd")))
                           (hygiene guile)))
                       any))))
             (if #{tmp -ANAU$bmvAmthP7L7xws@I}#
               (@apply
                 (lambda (#{p -ANAU$bmvAmthP7L7xws@M}#)
                   (if (= #{lev -ANAU$bmvAmthP7L7xws@G}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("1dm"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("1dk" "1dl"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("1dj" "1di" "1dh" "1dg" "1df" "1de" "1dd")))
                              (hygiene guile))
                           #{p -ANAU$bmvAmthP7L7xws@M}#)
                     (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("1dm"))
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("1dk" "1dl"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("1dj" "1di" "1dh" "1dg" "1df" "1de" "1dd")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("1dm"))
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("1dk" "1dl"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("1dj" "1di" "1dh" "1dg" "1df" "1de" "1dd")))
                           (hygiene guile)))
                       (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                         (list #{p -ANAU$bmvAmthP7L7xws@M}#)
                         (#{1-}# #{lev -ANAU$bmvAmthP7L7xws@G}#)))))
                 #{tmp -ANAU$bmvAmthP7L7xws@I}#)
               (let ((#{tmp -ANAU$bmvAmthP7L7xws@P}#
                       ($sc-dispatch
                         #{p -ANAU$bmvAmthP7L7xws@F}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("1dk" "1dl"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("1dj" "1di" "1dh" "1dg" "1df" "1de" "1dd")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp -ANAU$bmvAmthP7L7xws@P}#
                   (@apply
                     (lambda (#{p -ANAU$bmvAmthP7L7xws@T}#)
                       (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("1dn"))
                              #(ribcage () () ())
                              #(ribcage #(p lev) #((top) (top)) #("1dk" "1dl"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("1dj" "1di" "1dh" "1dg" "1df" "1de" "1dd")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("1dn"))
                              #(ribcage () () ())
                              #(ribcage #(p lev) #((top) (top)) #("1dk" "1dl"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("1dj" "1di" "1dh" "1dg" "1df" "1de" "1dd")))
                             (hygiene guile)))
                         (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                           (list #{p -ANAU$bmvAmthP7L7xws@T}#)
                           (#{1+}# #{lev -ANAU$bmvAmthP7L7xws@G}#))))
                     #{tmp -ANAU$bmvAmthP7L7xws@P}#)
                   (let ((#{tmp -ANAU$bmvAmthP7L7xws@W}#
                           ($sc-dispatch
                             #{p -ANAU$bmvAmthP7L7xws@F}#
                             '(any . any))))
                     (if #{tmp -ANAU$bmvAmthP7L7xws@W}#
                       (@apply
                         (lambda (#{p -ANAU$bmvAmthP7L7xws@a}#
                                  #{q -ANAU$bmvAmthP7L7xws@b}#)
                           (let ((#{tmp -ANAU$bmvAmthP7L7xws@d}#
                                   ($sc-dispatch
                                     #{p -ANAU$bmvAmthP7L7xws@a}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("1do" "1dp"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("1dk" "1dl"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("1dj"
                                               "1di"
                                               "1dh"
                                               "1dg"
                                               "1df"
                                               "1de"
                                               "1dd")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp -ANAU$bmvAmthP7L7xws@d}#
                               (@apply
                                 (lambda (#{p -ANAU$bmvAmthP7L7xws@h}#)
                                   (if (= #{lev -ANAU$bmvAmthP7L7xws@G}# 0)
                                     (#{quasilist* -ANAU$bmvAmthP7L7xws$x}#
                                       (map (lambda (#{tmp -ANAU$bmvAmthP7L7xws8C -ANAU$bmvAmthP7L7xwtAF}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("1dq"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("1do" "1dp"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("1dk" "1dl"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("1dj"
                                                           "1di"
                                                           "1dh"
                                                           "1dg"
                                                           "1df"
                                                           "1de"
                                                           "1dd")))
                                                       (hygiene guile))
                                                    #{tmp -ANAU$bmvAmthP7L7xws8C -ANAU$bmvAmthP7L7xwtAF}#))
                                            #{p -ANAU$bmvAmthP7L7xws@h}#)
                                       (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                                         #{q -ANAU$bmvAmthP7L7xws@b}#
                                         #{lev -ANAU$bmvAmthP7L7xws@G}#))
                                     (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                                       (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage #(p) #((top)) #("1dq"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("1do" "1dp"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("1dk" "1dl"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("1dj"
                                                 "1di"
                                                 "1dh"
                                                 "1dg"
                                                 "1df"
                                                 "1de"
                                                 "1dd")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage #(p) #((top)) #("1dq"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("1do" "1dp"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("1dk" "1dl"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("1dj"
                                                 "1di"
                                                 "1dh"
                                                 "1dg"
                                                 "1df"
                                                 "1de"
                                                 "1dd")))
                                             (hygiene guile)))
                                         (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                                           #{p -ANAU$bmvAmthP7L7xws@h}#
                                           (#{1-}# #{lev -ANAU$bmvAmthP7L7xws@G}#)))
                                       (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                                         #{q -ANAU$bmvAmthP7L7xws@b}#
                                         #{lev -ANAU$bmvAmthP7L7xws@G}#))))
                                 #{tmp -ANAU$bmvAmthP7L7xws@d}#)
                               (let ((#{tmp -ANAU$bmvAmthP7L7xwtAK}#
                                       ($sc-dispatch
                                         #{p -ANAU$bmvAmthP7L7xws@a}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("1do" "1dp"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("1dk" "1dl"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("1dj"
                                                   "1di"
                                                   "1dh"
                                                   "1dg"
                                                   "1df"
                                                   "1de"
                                                   "1dd")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp -ANAU$bmvAmthP7L7xwtAK}#
                                   (@apply
                                     (lambda (#{p -ANAU$bmvAmthP7L7xwtAO}#)
                                       (if (= #{lev -ANAU$bmvAmthP7L7xws@G}# 0)
                                         (#{quasiappend -ANAU$bmvAmthP7L7xws$w}#
                                           (map (lambda (#{tmp -ANAU$bmvAmthP7L7xws8G -ANAU$bmvAmthP7L7xwtAR}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("1dr"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("1do" "1dp"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("1dk" "1dl"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("1dj"
                                                               "1di"
                                                               "1dh"
                                                               "1dg"
                                                               "1df"
                                                               "1de"
                                                               "1dd")))
                                                           (hygiene guile))
                                                        #{tmp -ANAU$bmvAmthP7L7xws8G -ANAU$bmvAmthP7L7xwtAR}#))
                                                #{p -ANAU$bmvAmthP7L7xwtAO}#)
                                           (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                                             #{q -ANAU$bmvAmthP7L7xws@b}#
                                             #{lev -ANAU$bmvAmthP7L7xws@G}#))
                                         (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                                           (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("1dr"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("1do" "1dp"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("1dk" "1dl"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("1dj"
                                                     "1di"
                                                     "1dh"
                                                     "1dg"
                                                     "1df"
                                                     "1de"
                                                     "1dd")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("1dr"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("1do" "1dp"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("1dk" "1dl"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("1dj"
                                                     "1di"
                                                     "1dh"
                                                     "1dg"
                                                     "1df"
                                                     "1de"
                                                     "1dd")))
                                                 (hygiene guile)))
                                             (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                                               #{p -ANAU$bmvAmthP7L7xwtAO}#
                                               (#{1-}# #{lev -ANAU$bmvAmthP7L7xws@G}#)))
                                           (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                                             #{q -ANAU$bmvAmthP7L7xws@b}#
                                             #{lev -ANAU$bmvAmthP7L7xws@G}#))))
                                     #{tmp -ANAU$bmvAmthP7L7xwtAK}#)
                                   (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                                     (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                                       #{p -ANAU$bmvAmthP7L7xws@a}#
                                       #{lev -ANAU$bmvAmthP7L7xws@G}#)
                                     (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                                       #{q -ANAU$bmvAmthP7L7xws@b}#
                                       #{lev -ANAU$bmvAmthP7L7xws@G}#)))))))
                         #{tmp -ANAU$bmvAmthP7L7xws@W}#)
                       (let ((#{tmp -ANAU$bmvAmthP7L7xwtAf}#
                               ($sc-dispatch
                                 #{p -ANAU$bmvAmthP7L7xws@F}#
                                 '#(vector each-any))))
                         (if #{tmp -ANAU$bmvAmthP7L7xwtAf}#
                           (@apply
                             (lambda (#{x -ANAU$bmvAmthP7L7xwtAj}#)
                               (let ((#{x -ANAU$bmvAmthP7L7xwtAm}#
                                       (#{vquasi -ANAU$bmvAmthP7L7xws$u}#
                                         #{x -ANAU$bmvAmthP7L7xwtAj}#
                                         #{lev -ANAU$bmvAmthP7L7xws@G}#)))
                                 (let ((#{tmp -ANAU$bmvAmthP7L7xwtAo}#
                                         ($sc-dispatch
                                           #{x -ANAU$bmvAmthP7L7xwtAm}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp -ANAU$bmvAmthP7L7xwtAo}#
                                     (@apply
                                       (lambda (#{x -ANAU$bmvAmthP7L7xwtAs}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1en"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1em"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("1dj"
                                                      "1di"
                                                      "1dh"
                                                      "1dg"
                                                      "1df"
                                                      "1de"
                                                      "1dd")))
                                                  (hygiene guile))
                                               (list->vector
                                                 #{x -ANAU$bmvAmthP7L7xwtAs}#)))
                                       #{tmp -ANAU$bmvAmthP7L7xwtAo}#)
                                     (letrec*
                                       ((#{f -ANAU$bmvAmthP7L7xwtAu}#
                                          (lambda (#{y -ANAU$bmvAmthP7L7xwtA6}#
                                                   #{k -ANAU$bmvAmthP7L7xwtA7}#)
                                            (let ((#{tmp -ANAU$bmvAmthP7L7xwtA9}#
                                                    ($sc-dispatch
                                                      #{y -ANAU$bmvAmthP7L7xwtA6}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp -ANAU$bmvAmthP7L7xwtA9}#
                                                (@apply
                                                  (lambda (#{y -ANAU$bmvAmthP7L7xwtBA}#)
                                                    (#{k -ANAU$bmvAmthP7L7xwtA7}#
                                                      (map (lambda (#{tmp -ANAU$bmvAmthP7L7xws9h -ANAU$bmvAmthP7L7xwtBB}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("1eu"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("1ep"
                                                                           "1eq"
                                                                           "1er"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("1eo"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("1em"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("1dj"
                                                                          "1di"
                                                                          "1dh"
                                                                          "1dg"
                                                                          "1df"
                                                                          "1de"
                                                                          "1dd")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp -ANAU$bmvAmthP7L7xws9h -ANAU$bmvAmthP7L7xwtBB}#))
                                                           #{y -ANAU$bmvAmthP7L7xwtBA}#)))
                                                  #{tmp -ANAU$bmvAmthP7L7xwtA9}#)
                                                (let ((#{tmp -ANAU$bmvAmthP7L7xwtBC}#
                                                        ($sc-dispatch
                                                          #{y -ANAU$bmvAmthP7L7xwtA6}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp -ANAU$bmvAmthP7L7xwtBC}#
                                                    (@apply
                                                      (lambda (#{y -ANAU$bmvAmthP7L7xwtBF}#)
                                                        (#{k -ANAU$bmvAmthP7L7xwtA7}#
                                                          #{y -ANAU$bmvAmthP7L7xwtBF}#))
                                                      #{tmp -ANAU$bmvAmthP7L7xwtBC}#)
                                                    (let ((#{tmp -ANAU$bmvAmthP7L7xwtBG}#
                                                            ($sc-dispatch
                                                              #{y -ANAU$bmvAmthP7L7xwtA6}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp -ANAU$bmvAmthP7L7xwtBG}#
                                                        (@apply
                                                          (lambda (#{y -ANAU$bmvAmthP7L7xwtBJ}#
                                                                   #{z -ANAU$bmvAmthP7L7xwtBK}#)
                                                            (#{f -ANAU$bmvAmthP7L7xwtAu}#
                                                              #{z -ANAU$bmvAmthP7L7xwtBK}#
                                                              (lambda (#{ls -ANAU$bmvAmthP7L7xwtBL}#)
                                                                (#{k -ANAU$bmvAmthP7L7xwtA7}#
                                                                  (append
                                                                    #{y -ANAU$bmvAmthP7L7xwtBJ}#
                                                                    #{ls -ANAU$bmvAmthP7L7xwtBL}#)))))
                                                          #{tmp -ANAU$bmvAmthP7L7xwtBG}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g-ANAU$bmvAmthP7L7xws9r}#)
                                                                    #((m-ANAU$bmvAmthP7L7xws9s
                                                                        top))
                                                                    #("1f0"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("1ez"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("1ep"
                                                                      "1eq"
                                                                      "1er"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("1eo"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("1em"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("1dj"
                                                                     "1di"
                                                                     "1dh"
                                                                     "1dg"
                                                                     "1df"
                                                                     "1de"
                                                                     "1dd")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x -ANAU$bmvAmthP7L7xwtAm}#))))))))))
                                       (#{f -ANAU$bmvAmthP7L7xwtAu}#
                                         #{x -ANAU$bmvAmthP7L7xwtAm}#
                                         (lambda (#{ls -ANAU$bmvAmthP7L7xwtAw}#)
                                           (let ((#{tmp -ANAU$bmvAmthP7L7xwtAy}#
                                                   ($sc-dispatch
                                                     #{ls -ANAU$bmvAmthP7L7xwtAw}#
                                                     'each-any)))
                                             (if #{tmp -ANAU$bmvAmthP7L7xwtAy}#
                                               (@apply
                                                 (lambda (#{ g-ANAU$bmvAmthP7L7xws9X -ANAU$bmvAmthP7L7xwtA1}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g-ANAU$bmvAmthP7L7xws9X}#)
                                                               #((m-ANAU$bmvAmthP7L7xws9Y
                                                                   top))
                                                               #("1et"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("1es"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("1eo"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("1em"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("1dj"
                                                                "1di"
                                                                "1dh"
                                                                "1dg"
                                                                "1df"
                                                                "1de"
                                                                "1dd")))
                                                            (hygiene guile))
                                                         #{ g-ANAU$bmvAmthP7L7xws9X -ANAU$bmvAmthP7L7xwtA1}#))
                                                 #{tmp -ANAU$bmvAmthP7L7xwtAy}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls -ANAU$bmvAmthP7L7xwtAw}#))))))))))
                             #{tmp -ANAU$bmvAmthP7L7xwtAf}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("1du"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("1dk" "1dl"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("1dj"
                                        "1di"
                                        "1dh"
                                        "1dg"
                                        "1df"
                                        "1de"
                                        "1dd")))
                                    (hygiene guile))
                                 #{p -ANAU$bmvAmthP7L7xws@F}#)))))))))))
       (#{vquasi -ANAU$bmvAmthP7L7xws$u}#
         (lambda (#{p -ANAU$bmvAmthP7L7xwtBn}#
                  #{lev -ANAU$bmvAmthP7L7xwtBo}#)
           (let ((#{tmp -ANAU$bmvAmthP7L7xwtBq}#
                   ($sc-dispatch
                     #{p -ANAU$bmvAmthP7L7xwtBn}#
                     '(any . any))))
             (if #{tmp -ANAU$bmvAmthP7L7xwtBq}#
               (@apply
                 (lambda (#{p -ANAU$bmvAmthP7L7xwtBu}#
                          #{q -ANAU$bmvAmthP7L7xwtBv}#)
                   (let ((#{tmp -ANAU$bmvAmthP7L7xwtBx}#
                           ($sc-dispatch
                             #{p -ANAU$bmvAmthP7L7xwtBu}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("1dx" "1dy"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("1dv" "1dw"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("1dj"
                                       "1di"
                                       "1dh"
                                       "1dg"
                                       "1df"
                                       "1de"
                                       "1dd")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp -ANAU$bmvAmthP7L7xwtBx}#
                       (@apply
                         (lambda (#{p -ANAU$bmvAmthP7L7xwtB1}#)
                           (if (= #{lev -ANAU$bmvAmthP7L7xwtBo}# 0)
                             (#{quasilist* -ANAU$bmvAmthP7L7xws$x}#
                               (map (lambda (#{tmp -ANAU$bmvAmthP7L7xws8W -ANAU$bmvAmthP7L7xwtCZ}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("1dz"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("1dx" "1dy"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("1dv" "1dw"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("1dj"
                                                   "1di"
                                                   "1dh"
                                                   "1dg"
                                                   "1df"
                                                   "1de"
                                                   "1dd")))
                                               (hygiene guile))
                                            #{tmp -ANAU$bmvAmthP7L7xws8W -ANAU$bmvAmthP7L7xwtCZ}#))
                                    #{p -ANAU$bmvAmthP7L7xwtB1}#)
                               (#{vquasi -ANAU$bmvAmthP7L7xws$u}#
                                 #{q -ANAU$bmvAmthP7L7xwtBv}#
                                 #{lev -ANAU$bmvAmthP7L7xwtBo}#))
                             (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                               (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("1dz"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("1dx" "1dy"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("1dv" "1dw"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("1dj"
                                         "1di"
                                         "1dh"
                                         "1dg"
                                         "1df"
                                         "1de"
                                         "1dd")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("1dz"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("1dx" "1dy"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("1dv" "1dw"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("1dj"
                                         "1di"
                                         "1dh"
                                         "1dg"
                                         "1df"
                                         "1de"
                                         "1dd")))
                                     (hygiene guile)))
                                 (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                                   #{p -ANAU$bmvAmthP7L7xwtB1}#
                                   (#{1-}# #{lev -ANAU$bmvAmthP7L7xwtBo}#)))
                               (#{vquasi -ANAU$bmvAmthP7L7xws$u}#
                                 #{q -ANAU$bmvAmthP7L7xwtBv}#
                                 #{lev -ANAU$bmvAmthP7L7xwtBo}#))))
                         #{tmp -ANAU$bmvAmthP7L7xwtBx}#)
                       (let ((#{tmp -ANAU$bmvAmthP7L7xwtCg}#
                               ($sc-dispatch
                                 #{p -ANAU$bmvAmthP7L7xwtBu}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("1dx" "1dy"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("1dv" "1dw"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("1dj"
                                           "1di"
                                           "1dh"
                                           "1dg"
                                           "1df"
                                           "1de"
                                           "1dd")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp -ANAU$bmvAmthP7L7xwtCg}#
                           (@apply
                             (lambda (#{p -ANAU$bmvAmthP7L7xwtCk}#)
                               (if (= #{lev -ANAU$bmvAmthP7L7xwtBo}# 0)
                                 (#{quasiappend -ANAU$bmvAmthP7L7xws$w}#
                                   (map (lambda (#{tmp -ANAU$bmvAmthP7L7xws8a -ANAU$bmvAmthP7L7xwtCn}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("1e0"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("1dx" "1dy"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("1dv" "1dw"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("1dj"
                                                       "1di"
                                                       "1dh"
                                                       "1dg"
                                                       "1df"
                                                       "1de"
                                                       "1dd")))
                                                   (hygiene guile))
                                                #{tmp -ANAU$bmvAmthP7L7xws8a -ANAU$bmvAmthP7L7xwtCn}#))
                                        #{p -ANAU$bmvAmthP7L7xwtCk}#)
                                   (#{vquasi -ANAU$bmvAmthP7L7xws$u}#
                                     #{q -ANAU$bmvAmthP7L7xwtBv}#
                                     #{lev -ANAU$bmvAmthP7L7xwtBo}#))
                                 (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                                   (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("1e0"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("1dx" "1dy"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("1dv" "1dw"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("1dj"
                                             "1di"
                                             "1dh"
                                             "1dg"
                                             "1df"
                                             "1de"
                                             "1dd")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("1e0"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("1dx" "1dy"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("1dv" "1dw"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("1dj"
                                             "1di"
                                             "1dh"
                                             "1dg"
                                             "1df"
                                             "1de"
                                             "1dd")))
                                         (hygiene guile)))
                                     (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                                       #{p -ANAU$bmvAmthP7L7xwtCk}#
                                       (#{1-}# #{lev -ANAU$bmvAmthP7L7xwtBo}#)))
                                   (#{vquasi -ANAU$bmvAmthP7L7xws$u}#
                                     #{q -ANAU$bmvAmthP7L7xwtBv}#
                                     #{lev -ANAU$bmvAmthP7L7xwtBo}#))))
                             #{tmp -ANAU$bmvAmthP7L7xwtCg}#)
                           (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                             (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                               #{p -ANAU$bmvAmthP7L7xwtBu}#
                               #{lev -ANAU$bmvAmthP7L7xwtBo}#)
                             (#{vquasi -ANAU$bmvAmthP7L7xws$u}#
                               #{q -ANAU$bmvAmthP7L7xwtBv}#
                               #{lev -ANAU$bmvAmthP7L7xwtBo}#)))))))
                 #{tmp -ANAU$bmvAmthP7L7xwtBq}#)
               (let ((#{tmp -ANAU$bmvAmthP7L7xwtC5}#
                       ($sc-dispatch #{p -ANAU$bmvAmthP7L7xwtBn}# '())))
                 (if #{tmp -ANAU$bmvAmthP7L7xwtC5}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("1dv" "1dw"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("1dj" "1di" "1dh" "1dg" "1df" "1de" "1dd")))
                           (hygiene guile))
                         ()))
                     #{tmp -ANAU$bmvAmthP7L7xwtC5}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p -ANAU$bmvAmthP7L7xwtBn}#)))))))
       (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
         (lambda (#{x -ANAU$bmvAmthP7L7xwtDG}#
                  #{y -ANAU$bmvAmthP7L7xwtDH}#)
           (let ((#{tmp -ANAU$bmvAmthP7L7xwtDI}#
                   (list #{x -ANAU$bmvAmthP7L7xwtDG}#
                         #{y -ANAU$bmvAmthP7L7xwtDH}#)))
             (let ((#{tmp -ANAU$bmvAmthP7L7xwtDJ}#
                     ($sc-dispatch
                       #{tmp -ANAU$bmvAmthP7L7xwtDI}#
                       '(any any))))
               (if #{tmp -ANAU$bmvAmthP7L7xwtDJ}#
                 (@apply
                   (lambda (#{x -ANAU$bmvAmthP7L7xwtDL}#
                            #{y -ANAU$bmvAmthP7L7xwtDM}#)
                     (let ((#{tmp -ANAU$bmvAmthP7L7xwtDO}#
                             ($sc-dispatch
                               #{y -ANAU$bmvAmthP7L7xwtDM}#
                               '(#(atom "quote") any))))
                       (if #{tmp -ANAU$bmvAmthP7L7xwtDO}#
                         (@apply
                           (lambda (#{dy -ANAU$bmvAmthP7L7xwtDS}#)
                             (let ((#{tmp -ANAU$bmvAmthP7L7xwtDU}#
                                     ($sc-dispatch
                                       #{x -ANAU$bmvAmthP7L7xwtDL}#
                                       '(#(atom "quote") any))))
                               (if #{tmp -ANAU$bmvAmthP7L7xwtDU}#
                                 (@apply
                                   (lambda (#{dx -ANAU$bmvAmthP7L7xwtDY}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("1e7"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("1e6"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("1e4" "1e5"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("1e2" "1e3"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("1dj"
                                                  "1di"
                                                  "1dh"
                                                  "1dg"
                                                  "1df"
                                                  "1de"
                                                  "1dd")))
                                              (hygiene guile))
                                           (cons #{dx -ANAU$bmvAmthP7L7xwtDY}#
                                                 #{dy -ANAU$bmvAmthP7L7xwtDS}#)))
                                   #{tmp -ANAU$bmvAmthP7L7xwtDU}#)
                                 (if (null? #{dy -ANAU$bmvAmthP7L7xwtDS}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage #(_) #((top)) #("1e8"))
                                             #(ribcage #(dy) #((top)) #("1e6"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("1e4" "1e5"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("1e2" "1e3"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("1dj"
                                                "1di"
                                                "1dh"
                                                "1dg"
                                                "1df"
                                                "1de"
                                                "1dd")))
                                            (hygiene guile))
                                         #{x -ANAU$bmvAmthP7L7xwtDL}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage #(_) #((top)) #("1e8"))
                                             #(ribcage #(dy) #((top)) #("1e6"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("1e4" "1e5"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("1e2" "1e3"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("1dj"
                                                "1di"
                                                "1dh"
                                                "1dg"
                                                "1df"
                                                "1de"
                                                "1dd")))
                                            (hygiene guile))
                                         #{x -ANAU$bmvAmthP7L7xwtDL}#
                                         #{y -ANAU$bmvAmthP7L7xwtDM}#)))))
                           #{tmp -ANAU$bmvAmthP7L7xwtDO}#)
                         (let ((#{tmp -ANAU$bmvAmthP7L7xwtDd}#
                                 ($sc-dispatch
                                   #{y -ANAU$bmvAmthP7L7xwtDM}#
                                   '(#(atom "list") . any))))
                           (if #{tmp -ANAU$bmvAmthP7L7xwtDd}#
                             (@apply
                               (lambda (#{stuff -ANAU$bmvAmthP7L7xwtDh}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("1e9"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("1e4" "1e5"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("1e2" "1e3"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("1dj"
                                              "1di"
                                              "1dh"
                                              "1dg"
                                              "1df"
                                              "1de"
                                              "1dd")))
                                          (hygiene guile))
                                       (cons #{x -ANAU$bmvAmthP7L7xwtDL}#
                                             #{stuff -ANAU$bmvAmthP7L7xwtDh}#)))
                               #{tmp -ANAU$bmvAmthP7L7xwtDd}#)
                             (let ((#{tmp -ANAU$bmvAmthP7L7xwtDi}#
                                     ($sc-dispatch
                                       #{y -ANAU$bmvAmthP7L7xwtDM}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp -ANAU$bmvAmthP7L7xwtDi}#
                                 (@apply
                                   (lambda (#{stuff -ANAU$bmvAmthP7L7xwtDm}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("1ea"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("1e4" "1e5"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("1e2" "1e3"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("1dj"
                                                  "1di"
                                                  "1dh"
                                                  "1dg"
                                                  "1df"
                                                  "1de"
                                                  "1dd")))
                                              (hygiene guile))
                                           (cons #{x -ANAU$bmvAmthP7L7xwtDL}#
                                                 #{stuff -ANAU$bmvAmthP7L7xwtDm}#)))
                                   #{tmp -ANAU$bmvAmthP7L7xwtDi}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("1eb"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("1e4" "1e5"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("1e2" "1e3"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("1dj"
                                              "1di"
                                              "1dh"
                                              "1dg"
                                              "1df"
                                              "1de"
                                              "1dd")))
                                          (hygiene guile))
                                       #{x -ANAU$bmvAmthP7L7xwtDL}#
                                       #{y -ANAU$bmvAmthP7L7xwtDM}#))))))))
                   #{tmp -ANAU$bmvAmthP7L7xwtDJ}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp -ANAU$bmvAmthP7L7xwtDI}#))))))
       (#{quasiappend -ANAU$bmvAmthP7L7xws$w}#
         (lambda (#{x -ANAU$bmvAmthP7L7xwtDx}#
                  #{y -ANAU$bmvAmthP7L7xwtDy}#)
           (let ((#{tmp -ANAU$bmvAmthP7L7xwtD0}#
                   ($sc-dispatch
                     #{y -ANAU$bmvAmthP7L7xwtDy}#
                     '(#(atom "quote") ()))))
             (if #{tmp -ANAU$bmvAmthP7L7xwtD0}#
               (@apply
                 (lambda ()
                   (if (null? #{x -ANAU$bmvAmthP7L7xwtDx}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage #(x y) #((top) (top)) #("1ec" "1ed"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("1dj" "1di" "1dh" "1dg" "1df" "1de" "1dd")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x -ANAU$bmvAmthP7L7xwtDx}#))
                       (car #{x -ANAU$bmvAmthP7L7xwtDx}#)
                       (let ((#{tmp -ANAU$bmvAmthP7L7xwtD5}#
                               ($sc-dispatch
                                 #{x -ANAU$bmvAmthP7L7xwtDx}#
                                 'each-any)))
                         (if #{tmp -ANAU$bmvAmthP7L7xwtD5}#
                           (@apply
                             (lambda (#{p -ANAU$bmvAmthP7L7xwtD9}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("1ee"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("1ec" "1ed"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("1dj"
                                            "1di"
                                            "1dh"
                                            "1dg"
                                            "1df"
                                            "1de"
                                            "1dd")))
                                        (hygiene guile))
                                     #{p -ANAU$bmvAmthP7L7xwtD9}#))
                             #{tmp -ANAU$bmvAmthP7L7xwtD5}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x -ANAU$bmvAmthP7L7xwtDx}#))))))
                 #{tmp -ANAU$bmvAmthP7L7xwtD0}#)
               (if (null? #{x -ANAU$bmvAmthP7L7xwtDx}#)
                 #{y -ANAU$bmvAmthP7L7xwtDy}#
                 (let ((#{tmp -ANAU$bmvAmthP7L7xwtEF}#
                         (list #{x -ANAU$bmvAmthP7L7xwtDx}#
                               #{y -ANAU$bmvAmthP7L7xwtDy}#)))
                   (let ((#{tmp -ANAU$bmvAmthP7L7xwtEG}#
                           ($sc-dispatch
                             #{tmp -ANAU$bmvAmthP7L7xwtEF}#
                             '(each-any any))))
                     (if #{tmp -ANAU$bmvAmthP7L7xwtEG}#
                       (@apply
                         (lambda (#{p -ANAU$bmvAmthP7L7xwtEI}#
                                  #{y -ANAU$bmvAmthP7L7xwtEJ}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("1eg" "1eh"))
                                     #(ribcage #(_) #((top)) #("1ef"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("1ec" "1ed"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("1dj"
                                        "1di"
                                        "1dh"
                                        "1dg"
                                        "1df"
                                        "1de"
                                        "1dd")))
                                    (hygiene guile))
                                 (append
                                   #{p -ANAU$bmvAmthP7L7xwtEI}#
                                   (list #{y -ANAU$bmvAmthP7L7xwtEJ}#))))
                         #{tmp -ANAU$bmvAmthP7L7xwtEG}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp -ANAU$bmvAmthP7L7xwtEF}#)))))))))
       (#{quasilist* -ANAU$bmvAmthP7L7xws$x}#
         (lambda (#{x -ANAU$bmvAmthP7L7xwtEN}#
                  #{y -ANAU$bmvAmthP7L7xwtEO}#)
           (letrec*
             ((#{f -ANAU$bmvAmthP7L7xwtEP}#
                (lambda (#{x -ANAU$bmvAmthP7L7xwtFo}#)
                  (if (null? #{x -ANAU$bmvAmthP7L7xwtFo}#)
                    #{y -ANAU$bmvAmthP7L7xwtEO}#
                    (#{quasicons -ANAU$bmvAmthP7L7xws$v}#
                      (car #{x -ANAU$bmvAmthP7L7xwtFo}#)
                      (#{f -ANAU$bmvAmthP7L7xwtEP}#
                        (cdr #{x -ANAU$bmvAmthP7L7xwtFo}#)))))))
             (#{f -ANAU$bmvAmthP7L7xwtEP}#
               #{x -ANAU$bmvAmthP7L7xwtEN}#))))
       (#{emit -ANAU$bmvAmthP7L7xws$z}#
         (lambda (#{x -ANAU$bmvAmthP7L7xwtFr}#)
           (let ((#{tmp -ANAU$bmvAmthP7L7xwtFt}#
                   ($sc-dispatch
                     #{x -ANAU$bmvAmthP7L7xwtFr}#
                     '(#(atom "quote") any))))
             (if #{tmp -ANAU$bmvAmthP7L7xwtFt}#
               (@apply
                 (lambda (#{x -ANAU$bmvAmthP7L7xwtFx}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("1f2"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("1f1"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("1dj" "1di" "1dh" "1dg" "1df" "1de" "1dd")))
                            (hygiene guile))
                         #{x -ANAU$bmvAmthP7L7xwtFx}#))
                 #{tmp -ANAU$bmvAmthP7L7xwtFt}#)
               (let ((#{tmp -ANAU$bmvAmthP7L7xwtFy}#
                       ($sc-dispatch
                         #{x -ANAU$bmvAmthP7L7xwtFr}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp -ANAU$bmvAmthP7L7xwtFy}#
                   (@apply
                     (lambda (#{x -ANAU$bmvAmthP7L7xwtF2}#)
                       (let ((#{tmp -ANAU$bmvAmthP7L7xwtF3}#
                               (map #{emit -ANAU$bmvAmthP7L7xws$z}#
                                    #{x -ANAU$bmvAmthP7L7xwtF2}#)))
                         (let ((#{tmp -ANAU$bmvAmthP7L7xwtF4}#
                                 ($sc-dispatch
                                   #{tmp -ANAU$bmvAmthP7L7xwtF3}#
                                   'each-any)))
                           (if #{tmp -ANAU$bmvAmthP7L7xwtF4}#
                             (@apply
                               (lambda (#{ g-ANAU$bmvAmthP7L7xws92 -ANAU$bmvAmthP7L7xwtF6}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g-ANAU$bmvAmthP7L7xws92}#)
                                             #((m-ANAU$bmvAmthP7L7xws93 top))
                                             #("1f4"))
                                           #(ribcage #(x) #((top)) #("1f3"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("1f1"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("1dj"
                                              "1di"
                                              "1dh"
                                              "1dg"
                                              "1df"
                                              "1de"
                                              "1dd")))
                                          (hygiene guile))
                                       #{ g-ANAU$bmvAmthP7L7xws92 -ANAU$bmvAmthP7L7xwtF6}#))
                               #{tmp -ANAU$bmvAmthP7L7xwtF4}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp -ANAU$bmvAmthP7L7xwtF3}#)))))
                     #{tmp -ANAU$bmvAmthP7L7xwtFy}#)
                   (let ((#{tmp -ANAU$bmvAmthP7L7xwtF7}#
                           ($sc-dispatch
                             #{x -ANAU$bmvAmthP7L7xwtFr}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp -ANAU$bmvAmthP7L7xwtF7}#
                       (@apply
                         (lambda (#{x -ANAU$bmvAmthP7L7xwtF@}#
                                  #{y -ANAU$bmvAmthP7L7xwtGA}#)
                           (letrec*
                             ((#{f -ANAU$bmvAmthP7L7xwtGB}#
                                (lambda (#{x* -ANAU$bmvAmthP7L7xwtGE}#)
                                  (if (null? #{x* -ANAU$bmvAmthP7L7xwtGE}#)
                                    (#{emit -ANAU$bmvAmthP7L7xws$z}#
                                      #{y -ANAU$bmvAmthP7L7xwtGA}#)
                                    (let ((#{tmp -ANAU$bmvAmthP7L7xwtGF}#
                                            (list (#{emit -ANAU$bmvAmthP7L7xws$z}#
                                                    (car #{x* -ANAU$bmvAmthP7L7xwtGE}#))
                                                  (#{f -ANAU$bmvAmthP7L7xwtGB}#
                                                    (cdr #{x* -ANAU$bmvAmthP7L7xwtGE}#)))))
                                      (let ((#{tmp -ANAU$bmvAmthP7L7xwtGG}#
                                              ($sc-dispatch
                                                #{tmp -ANAU$bmvAmthP7L7xwtGF}#
                                                '(any any))))
                                        (if #{tmp -ANAU$bmvAmthP7L7xwtGG}#
                                          (@apply
                                            (lambda (#{ g-ANAU$bmvAmthP7L7xws$F -ANAU$bmvAmthP7L7xwtGI}#
                                                     #{ g-ANAU$bmvAmthP7L7xws$E -ANAU$bmvAmthP7L7xwtGJ}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g-ANAU$bmvAmthP7L7xws$F}#
                                                            #{ g-ANAU$bmvAmthP7L7xws$E}#)
                                                          #((m-ANAU$bmvAmthP7L7xws$G
                                                              top)
                                                            (m-ANAU$bmvAmthP7L7xws$G
                                                              top))
                                                          #("1f9" "1fa"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("1f7" "1f8"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("1f5" "1f6"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("1f1"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("1dj"
                                                           "1di"
                                                           "1dh"
                                                           "1dg"
                                                           "1df"
                                                           "1de"
                                                           "1dd")))
                                                       (hygiene guile))
                                                    #{ g-ANAU$bmvAmthP7L7xws$F -ANAU$bmvAmthP7L7xwtGI}#
                                                    #{ g-ANAU$bmvAmthP7L7xws$E -ANAU$bmvAmthP7L7xwtGJ}#))
                                            #{tmp -ANAU$bmvAmthP7L7xwtGG}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp -ANAU$bmvAmthP7L7xwtGF}#))))))))
                             (#{f -ANAU$bmvAmthP7L7xwtGB}#
                               #{x -ANAU$bmvAmthP7L7xwtF@}#)))
                         #{tmp -ANAU$bmvAmthP7L7xwtF7}#)
                       (let ((#{tmp -ANAU$bmvAmthP7L7xwtGK}#
                               ($sc-dispatch
                                 #{x -ANAU$bmvAmthP7L7xwtFr}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp -ANAU$bmvAmthP7L7xwtGK}#
                           (@apply
                             (lambda (#{x -ANAU$bmvAmthP7L7xwtGO}#)
                               (let ((#{tmp -ANAU$bmvAmthP7L7xwtGP}#
                                       (map #{emit -ANAU$bmvAmthP7L7xws$z}#
                                            #{x -ANAU$bmvAmthP7L7xwtGO}#)))
                                 (let ((#{tmp -ANAU$bmvAmthP7L7xwtGQ}#
                                         ($sc-dispatch
                                           #{tmp -ANAU$bmvAmthP7L7xwtGP}#
                                           'each-any)))
                                   (if #{tmp -ANAU$bmvAmthP7L7xwtGQ}#
                                     (@apply
                                       (lambda (#{ g-ANAU$bmvAmthP7L7xws$O -ANAU$bmvAmthP7L7xwtGS}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g-ANAU$bmvAmthP7L7xws$O}#)
                                                     #((m-ANAU$bmvAmthP7L7xws$P
                                                         top))
                                                     #("1fc"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1fb"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1f1"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("1dj"
                                                      "1di"
                                                      "1dh"
                                                      "1dg"
                                                      "1df"
                                                      "1de"
                                                      "1dd")))
                                                  (hygiene guile))
                                               #{ g-ANAU$bmvAmthP7L7xws$O -ANAU$bmvAmthP7L7xwtGS}#))
                                       #{tmp -ANAU$bmvAmthP7L7xwtGQ}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp -ANAU$bmvAmthP7L7xwtGP}#)))))
                             #{tmp -ANAU$bmvAmthP7L7xwtGK}#)
                           (let ((#{tmp -ANAU$bmvAmthP7L7xwtGT}#
                                   ($sc-dispatch
                                     #{x -ANAU$bmvAmthP7L7xwtFr}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp -ANAU$bmvAmthP7L7xwtGT}#
                               (@apply
                                 (lambda (#{x -ANAU$bmvAmthP7L7xwtGX}#)
                                   (let ((#{tmp -ANAU$bmvAmthP7L7xwtGY}#
                                           (map #{emit -ANAU$bmvAmthP7L7xws$z}#
                                                #{x -ANAU$bmvAmthP7L7xwtGX}#)))
                                     (let ((#{tmp -ANAU$bmvAmthP7L7xwtGZ}#
                                             ($sc-dispatch
                                               #{tmp -ANAU$bmvAmthP7L7xwtGY}#
                                               'each-any)))
                                       (if #{tmp -ANAU$bmvAmthP7L7xwtGZ}#
                                         (@apply
                                           (lambda (#{ g-ANAU$bmvAmthP7L7xws$Y -ANAU$bmvAmthP7L7xwtGb}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g-ANAU$bmvAmthP7L7xws$Y}#)
                                                         #((m-ANAU$bmvAmthP7L7xws$Z
                                                             top))
                                                         #("1fe"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("1fd"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("1f1"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("1dj"
                                                          "1di"
                                                          "1dh"
                                                          "1dg"
                                                          "1df"
                                                          "1de"
                                                          "1dd")))
                                                      (hygiene guile))
                                                   #{ g-ANAU$bmvAmthP7L7xws$Y -ANAU$bmvAmthP7L7xwtGb}#))
                                           #{tmp -ANAU$bmvAmthP7L7xwtGZ}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp -ANAU$bmvAmthP7L7xwtGY}#)))))
                                 #{tmp -ANAU$bmvAmthP7L7xwtGT}#)
                               (let ((#{tmp -ANAU$bmvAmthP7L7xwtGc}#
                                       ($sc-dispatch
                                         #{x -ANAU$bmvAmthP7L7xwtFr}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp -ANAU$bmvAmthP7L7xwtGc}#
                                   (@apply
                                     (lambda (#{x -ANAU$bmvAmthP7L7xwtGg}#)
                                       (let ((#{tmp -ANAU$bmvAmthP7L7xwtGh}#
                                               (#{emit -ANAU$bmvAmthP7L7xws$z}#
                                                 #{x -ANAU$bmvAmthP7L7xwtGg}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g-ANAU$bmvAmthP7L7xws$i}#)
                                                     #((m-ANAU$bmvAmthP7L7xws$j
                                                         top))
                                                     #("1fg"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1ff"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1f1"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("1dj"
                                                      "1di"
                                                      "1dh"
                                                      "1dg"
                                                      "1df"
                                                      "1de"
                                                      "1dd")))
                                                  (hygiene guile))
                                               #{tmp -ANAU$bmvAmthP7L7xwtGh}#)))
                                     #{tmp -ANAU$bmvAmthP7L7xwtGc}#)
                                   (let ((#{tmp -ANAU$bmvAmthP7L7xwtGk}#
                                           ($sc-dispatch
                                             #{x -ANAU$bmvAmthP7L7xwtFr}#
                                             '(#(atom "value") any))))
                                     (if #{tmp -ANAU$bmvAmthP7L7xwtGk}#
                                       (@apply
                                         (lambda (#{x -ANAU$bmvAmthP7L7xwtGo}#)
                                           #{x -ANAU$bmvAmthP7L7xwtGo}#)
                                         #{tmp -ANAU$bmvAmthP7L7xwtGk}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x -ANAU$bmvAmthP7L7xwtFr}#))))))))))))))))))
      (lambda (#{x -ANAU$bmvAmthP7L7xws$0}#)
        (let ((#{tmp -ANAU$bmvAmthP7L7xws$2}#
                ($sc-dispatch
                  #{x -ANAU$bmvAmthP7L7xws$0}#
                  '(_ any))))
          (if #{tmp -ANAU$bmvAmthP7L7xws$2}#
            (@apply
              (lambda (#{e -ANAU$bmvAmthP7L7xws$6}#)
                (#{emit -ANAU$bmvAmthP7L7xws$z}#
                  (#{quasi -ANAU$bmvAmthP7L7xws$t}#
                    #{e -ANAU$bmvAmthP7L7xws$6}#
                    0)))
              #{tmp -ANAU$bmvAmthP7L7xws$2}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x -ANAU$bmvAmthP7L7xws$0}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xwtHT}#)
      (letrec*
        ((#{read-file -ANAU$bmvAmthP7L7xwtHU}#
           (lambda (#{fn -ANAU$bmvAmthP7L7xwtJB}#
                    #{k -ANAU$bmvAmthP7L7xwtJC}#)
             (let ((#{p -ANAU$bmvAmthP7L7xwtJD}#
                     (open-input-file #{fn -ANAU$bmvAmthP7L7xwtJB}#)))
               (letrec*
                 ((#{f -ANAU$bmvAmthP7L7xwtJE}#
                    (lambda (#{x -ANAU$bmvAmthP7L7xwtJ6}#
                             #{result -ANAU$bmvAmthP7L7xwtJ7}#)
                      (if (eof-object? #{x -ANAU$bmvAmthP7L7xwtJ6}#)
                        (begin
                          (close-input-port #{p -ANAU$bmvAmthP7L7xwtJD}#)
                          (reverse #{result -ANAU$bmvAmthP7L7xwtJ7}#))
                        (#{f -ANAU$bmvAmthP7L7xwtJE}#
                          (read #{p -ANAU$bmvAmthP7L7xwtJD}#)
                          (cons (datum->syntax
                                  #{k -ANAU$bmvAmthP7L7xwtJC}#
                                  #{x -ANAU$bmvAmthP7L7xwtJ6}#)
                                #{result -ANAU$bmvAmthP7L7xwtJ7}#))))))
                 (#{f -ANAU$bmvAmthP7L7xwtJE}#
                   (read #{p -ANAU$bmvAmthP7L7xwtJD}#)
                   '()))))))
        (let ((#{tmp -ANAU$bmvAmthP7L7xwtHW}#
                ($sc-dispatch
                  #{x -ANAU$bmvAmthP7L7xwtHT}#
                  '(any any))))
          (if #{tmp -ANAU$bmvAmthP7L7xwtHW}#
            (@apply
              (lambda (#{k -ANAU$bmvAmthP7L7xwtHa}#
                       #{filename -ANAU$bmvAmthP7L7xwtHb}#)
                (let ((#{fn -ANAU$bmvAmthP7L7xwtHc}#
                        (syntax->datum
                          #{filename -ANAU$bmvAmthP7L7xwtHb}#)))
                  (let ((#{tmp -ANAU$bmvAmthP7L7xwtHd}#
                          (#{read-file -ANAU$bmvAmthP7L7xwtHU}#
                            #{fn -ANAU$bmvAmthP7L7xwtHc}#
                            #{filename -ANAU$bmvAmthP7L7xwtHb}#)))
                    (let ((#{tmp -ANAU$bmvAmthP7L7xwtHe}#
                            ($sc-dispatch
                              #{tmp -ANAU$bmvAmthP7L7xwtHd}#
                              'each-any)))
                      (if #{tmp -ANAU$bmvAmthP7L7xwtHe}#
                        (@apply
                          (lambda (#{exp -ANAU$bmvAmthP7L7xwtHw}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("1fv"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("1fu"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("1fs" "1ft"))
                                      #(ribcage (read-file) ((top)) ("1fl"))
                                      #(ribcage #(x) #((top)) #("1fk")))
                                     (hygiene guile))
                                  #{exp -ANAU$bmvAmthP7L7xwtHw}#))
                          #{tmp -ANAU$bmvAmthP7L7xwtHe}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp -ANAU$bmvAmthP7L7xwtHd}#))))))
              #{tmp -ANAU$bmvAmthP7L7xwtHW}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x -ANAU$bmvAmthP7L7xwtHT}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xwtKI}#)
      (let ((#{tmp -ANAU$bmvAmthP7L7xwtKK}#
              ($sc-dispatch
                #{x -ANAU$bmvAmthP7L7xwtKI}#
                '(any any))))
        (if #{tmp -ANAU$bmvAmthP7L7xwtKK}#
          (@apply
            (lambda (#{k -ANAU$bmvAmthP7L7xwtKO}#
                     #{filename -ANAU$bmvAmthP7L7xwtKP}#)
              (let ((#{fn -ANAU$bmvAmthP7L7xwtKQ}#
                      (syntax->datum
                        #{filename -ANAU$bmvAmthP7L7xwtKP}#)))
                (let ((#{tmp -ANAU$bmvAmthP7L7xwtKR}#
                        (datum->syntax
                          #{filename -ANAU$bmvAmthP7L7xwtKP}#
                          (let ((#{t -ANAU$bmvAmthP7L7xwtKU}#
                                  (%search-load-path
                                    #{fn -ANAU$bmvAmthP7L7xwtKQ}#)))
                            (if #{t -ANAU$bmvAmthP7L7xwtKU}#
                              #{t -ANAU$bmvAmthP7L7xwtKU}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x -ANAU$bmvAmthP7L7xwtKI}#
                                #{filename -ANAU$bmvAmthP7L7xwtKP}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("1g0"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("1fz"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("1fx" "1fy"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1fw")))
                           (hygiene guile))
                        #{tmp -ANAU$bmvAmthP7L7xwtKR}#))))
            #{tmp -ANAU$bmvAmthP7L7xwtKK}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x -ANAU$bmvAmthP7L7xwtKI}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xwtKc}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x -ANAU$bmvAmthP7L7xwtKc}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xwtKe}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x -ANAU$bmvAmthP7L7xwtKe}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xwtLD}#)
      (let ((#{tmp -ANAU$bmvAmthP7L7xwtLF}#
              ($sc-dispatch
                #{x -ANAU$bmvAmthP7L7xwtLD}#
                '(_ any any . each-any))))
        (if #{tmp -ANAU$bmvAmthP7L7xwtLF}#
          (@apply
            (lambda (#{e -ANAU$bmvAmthP7L7xwtLJ}#
                     #{m1 -ANAU$bmvAmthP7L7xwtLK}#
                     #{m2 -ANAU$bmvAmthP7L7xwtLL}#)
              (let ((#{tmp -ANAU$bmvAmthP7L7xwtLM}#
                      (letrec*
                        ((#{f -ANAU$bmvAmthP7L7xwtL2}#
                           (lambda (#{clause -ANAU$bmvAmthP7L7xwtL5}#
                                    #{clauses -ANAU$bmvAmthP7L7xwtL6}#)
                             (if (null? #{clauses -ANAU$bmvAmthP7L7xwtL6}#)
                               (let ((#{tmp -ANAU$bmvAmthP7L7xwtL8}#
                                       ($sc-dispatch
                                         #{clause -ANAU$bmvAmthP7L7xwtL5}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("1g9" "1ga" "1gb"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("1g5" "1g6" "1g7"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("1g4")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp -ANAU$bmvAmthP7L7xwtL8}#
                                   (@apply
                                     (lambda (#{e1 -ANAU$bmvAmthP7L7xwtMA}#
                                              #{e2 -ANAU$bmvAmthP7L7xwtMB}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("1gc" "1gd"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("1g9" "1ga" "1gb"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("1g5" "1g6" "1g7"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("1g4")))
                                                (hygiene guile))
                                             (cons #{e1 -ANAU$bmvAmthP7L7xwtMA}#
                                                   #{e2 -ANAU$bmvAmthP7L7xwtMB}#)))
                                     #{tmp -ANAU$bmvAmthP7L7xwtL8}#)
                                   (let ((#{tmp -ANAU$bmvAmthP7L7xwtMC}#
                                           ($sc-dispatch
                                             #{clause -ANAU$bmvAmthP7L7xwtL5}#
                                             '(each-any any . each-any))))
                                     (if #{tmp -ANAU$bmvAmthP7L7xwtMC}#
                                       (@apply
                                         (lambda (#{k -ANAU$bmvAmthP7L7xwtMG}#
                                                  #{e1 -ANAU$bmvAmthP7L7xwtMH}#
                                                  #{e2 -ANAU$bmvAmthP7L7xwtMI}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("1ge" "1gf" "1gg"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("1g9" "1ga" "1gb"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("1g5" "1g6" "1g7"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("1g4")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1ge"
                                                               "1gf"
                                                               "1gg"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1g9"
                                                               "1ga"
                                                               "1gb"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1g5"
                                                               "1g6"
                                                               "1g7"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("1g4")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1ge"
                                                               "1gf"
                                                               "1gg"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1g9"
                                                               "1ga"
                                                               "1gb"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1g5"
                                                               "1g6"
                                                               "1g7"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("1g4")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("1ge"
                                                                     "1gf"
                                                                     "1gg"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("1g9"
                                                                     "1ga"
                                                                     "1gb"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("1g5"
                                                                     "1g6"
                                                                     "1g7"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("1g4")))
                                                                (hygiene
                                                                  guile))
                                                             #{k -ANAU$bmvAmthP7L7xwtMG}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1ge"
                                                               "1gf"
                                                               "1gg"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1g9"
                                                               "1ga"
                                                               "1gb"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1g5"
                                                               "1g6"
                                                               "1g7"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("1g4")))
                                                          (hygiene guile))
                                                       (cons #{e1 -ANAU$bmvAmthP7L7xwtMH}#
                                                             #{e2 -ANAU$bmvAmthP7L7xwtMI}#))))
                                         #{tmp -ANAU$bmvAmthP7L7xwtMC}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x -ANAU$bmvAmthP7L7xwtLD}#
                                         #{clause -ANAU$bmvAmthP7L7xwtL5}#)))))
                               (let ((#{tmp -ANAU$bmvAmthP7L7xwtMQ}#
                                       (#{f -ANAU$bmvAmthP7L7xwtL2}#
                                         (car #{clauses -ANAU$bmvAmthP7L7xwtL6}#)
                                         (cdr #{clauses -ANAU$bmvAmthP7L7xwtL6}#))))
                                 (let ((#{tmp -ANAU$bmvAmthP7L7xwtMT}#
                                         ($sc-dispatch
                                           #{clause -ANAU$bmvAmthP7L7xwtL5}#
                                           '(each-any any . each-any))))
                                   (if #{tmp -ANAU$bmvAmthP7L7xwtMT}#
                                     (@apply
                                       (lambda (#{k -ANAU$bmvAmthP7L7xwtMX}#
                                                #{e1 -ANAU$bmvAmthP7L7xwtMY}#
                                                #{e2 -ANAU$bmvAmthP7L7xwtMZ}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("1gj" "1gk" "1gl"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("1gi"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("1g9" "1ga" "1gb"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("1g5" "1g6" "1g7"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1g4")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("1gj"
                                                             "1gk"
                                                             "1gl"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("1gi"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("1g9"
                                                             "1ga"
                                                             "1gb"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("1g5"
                                                             "1g6"
                                                             "1g7"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("1g4")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("1gj"
                                                             "1gk"
                                                             "1gl"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("1gi"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("1g9"
                                                             "1ga"
                                                             "1gb"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("1g5"
                                                             "1g6"
                                                             "1g7"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("1g4")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("1gj"
                                                                   "1gk"
                                                                   "1gl"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("1gi"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("1g9"
                                                                   "1ga"
                                                                   "1gb"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("1g5"
                                                                   "1g6"
                                                                   "1g7"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("1g4")))
                                                              (hygiene guile))
                                                           #{k -ANAU$bmvAmthP7L7xwtMX}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("1gj"
                                                             "1gk"
                                                             "1gl"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("1gi"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("1g9"
                                                             "1ga"
                                                             "1gb"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("1g5"
                                                             "1g6"
                                                             "1g7"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("1g4")))
                                                        (hygiene guile))
                                                     (cons #{e1 -ANAU$bmvAmthP7L7xwtMY}#
                                                           #{e2 -ANAU$bmvAmthP7L7xwtMZ}#))
                                               #{tmp -ANAU$bmvAmthP7L7xwtMQ}#))
                                       #{tmp -ANAU$bmvAmthP7L7xwtMT}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x -ANAU$bmvAmthP7L7xwtLD}#
                                       #{clause -ANAU$bmvAmthP7L7xwtL5}#))))))))
                        (#{f -ANAU$bmvAmthP7L7xwtL2}#
                          #{m1 -ANAU$bmvAmthP7L7xwtLK}#
                          #{m2 -ANAU$bmvAmthP7L7xwtLL}#))))
                (let ((#{body -ANAU$bmvAmthP7L7xwtLN}#
                        #{tmp -ANAU$bmvAmthP7L7xwtLM}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("1g8"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("1g5" "1g6" "1g7"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1g4")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("1g8"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("1g5" "1g6" "1g7"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("1g4")))
                                       (hygiene guile))
                                    #{e -ANAU$bmvAmthP7L7xwtLJ}#))
                        #{body -ANAU$bmvAmthP7L7xwtLN}#))))
            #{tmp -ANAU$bmvAmthP7L7xwtLF}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x -ANAU$bmvAmthP7L7xwtLD}#))))))

(define make-variable-transformer
  (lambda (#{proc -ANAU$bmvAmthP7L7xwtMo}#)
    (if (procedure? #{proc -ANAU$bmvAmthP7L7xwtMo}#)
      (letrec*
        ((#{trans -ANAU$bmvAmthP7L7xwtMp}#
           (lambda (#{x -ANAU$bmvAmthP7L7xwtMv}#)
             (#{proc -ANAU$bmvAmthP7L7xwtMo}#
               #{x -ANAU$bmvAmthP7L7xwtMv}#))))
        (begin
          (set-procedure-property!
            #{trans -ANAU$bmvAmthP7L7xwtMp}#
            'variable-transformer
            #t)
          #{trans -ANAU$bmvAmthP7L7xwtMp}#))
      (error "variable transformer not a procedure"
             #{proc -ANAU$bmvAmthP7L7xwtMo}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xwtND}#)
      (let ((#{tmp -ANAU$bmvAmthP7L7xwtNF}#
              ($sc-dispatch
                #{x -ANAU$bmvAmthP7L7xwtND}#
                '(_ any))))
        (if #{tmp -ANAU$bmvAmthP7L7xwtNF}#
          (@apply
            (lambda (#{e -ANAU$bmvAmthP7L7xwtNJ}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("1gr"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("1gq")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("1gr"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("1gq")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("1gr"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("1gq")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("1gr"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("1gq")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("1gr"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("1gq")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("1gr"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("1gq")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("1gr"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("1gq")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("1gr"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1gq")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("1gr"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("1gq")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("1gr"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("1gq")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("1gr"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("1gq")))
                                         (hygiene guile))
                                      #{e -ANAU$bmvAmthP7L7xwtNJ}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("1gr"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1gq")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("1gr"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1gq")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("1gr"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1gq")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("1gr"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("1gq")))
                                         (hygiene guile))
                                      (cons #{e -ANAU$bmvAmthP7L7xwtNJ}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("1gr"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("1gq")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("1gr"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("1gq")))
                                                (hygiene guile)))))))))
            #{tmp -ANAU$bmvAmthP7L7xwtNF}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwtNK}#
                  ($sc-dispatch
                    #{x -ANAU$bmvAmthP7L7xwtND}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("1gq")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp -ANAU$bmvAmthP7L7xwtNK}#
                  (@apply
                    (lambda (#{id -ANAU$bmvAmthP7L7xwtNO}#
                             #{exp1 -ANAU$bmvAmthP7L7xwtNP}#
                             #{var -ANAU$bmvAmthP7L7xwtNQ}#
                             #{val -ANAU$bmvAmthP7L7xwtNR}#
                             #{exp2 -ANAU$bmvAmthP7L7xwtNS}#)
                      (if (identifier? #{id -ANAU$bmvAmthP7L7xwtNO}#)
                        (identifier? #{var -ANAU$bmvAmthP7L7xwtNQ}#)
                        #f))
                    #{tmp -ANAU$bmvAmthP7L7xwtNK}#)
                  #f)
              (@apply
                (lambda (#{id -ANAU$bmvAmthP7L7xwtNT}#
                         #{exp1 -ANAU$bmvAmthP7L7xwtNU}#
                         #{var -ANAU$bmvAmthP7L7xwtNV}#
                         #{val -ANAU$bmvAmthP7L7xwtNW}#
                         #{exp2 -ANAU$bmvAmthP7L7xwtNX}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("1gx" "1gy" "1gz" "1h0" "1h1"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1gq")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("1gx" "1gy" "1gz" "1h0" "1h1"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("1gq")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("1gx" "1gy" "1gz" "1h0" "1h1"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("1gq")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("1gx" "1gy" "1gz" "1h0" "1h1"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1gq")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("1gx" "1gy" "1gz" "1h0" "1h1"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1gq")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("1gx" "1gy" "1gz" "1h0" "1h1"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("1gq")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("1gx" "1gy" "1gz" "1h0" "1h1"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("1gq")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("1gx" "1gy" "1gz" "1h0" "1h1"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("1gq")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1gx"
                                                        "1gy"
                                                        "1gz"
                                                        "1h0"
                                                        "1h1"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("1gq")))
                                                   (hygiene guile))
                                                #{var -ANAU$bmvAmthP7L7xwtNV}#
                                                #{val -ANAU$bmvAmthP7L7xwtNW}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1gx"
                                                        "1gy"
                                                        "1gz"
                                                        "1h0"
                                                        "1h1"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("1gq")))
                                                   (hygiene guile))
                                                #{exp2 -ANAU$bmvAmthP7L7xwtNX}#))
                                    (list (cons #{id -ANAU$bmvAmthP7L7xwtNT}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("1gx"
                                                         "1gy"
                                                         "1gz"
                                                         "1h0"
                                                         "1h1"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("1gq")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("1gx"
                                                         "1gy"
                                                         "1gz"
                                                         "1h0"
                                                         "1h1"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("1gq")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1gx"
                                                        "1gy"
                                                        "1gz"
                                                        "1h0"
                                                        "1h1"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("1gq")))
                                                   (hygiene guile))
                                                (cons #{exp1 -ANAU$bmvAmthP7L7xwtNU}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("1gx"
                                                               "1gy"
                                                               "1gz"
                                                               "1h0"
                                                               "1h1"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("1gq")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("1gx"
                                                               "1gy"
                                                               "1gz"
                                                               "1h0"
                                                               "1h1"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("1gq")))
                                                          (hygiene guile))))))
                                    (list #{id -ANAU$bmvAmthP7L7xwtNT}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1gx"
                                                        "1gy"
                                                        "1gz"
                                                        "1h0"
                                                        "1h1"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("1gq")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("1gx"
                                                              "1gy"
                                                              "1gz"
                                                              "1h0"
                                                              "1h1"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("1gq")))
                                                         (hygiene guile))
                                                      #{id -ANAU$bmvAmthP7L7xwtNT}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1gx"
                                                        "1gy"
                                                        "1gz"
                                                        "1h0"
                                                        "1h1"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("1gq")))
                                                   (hygiene guile))
                                                #{exp1 -ANAU$bmvAmthP7L7xwtNU}#))))))
                #{tmp -ANAU$bmvAmthP7L7xwtNK}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x -ANAU$bmvAmthP7L7xwtND}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x -ANAU$bmvAmthP7L7xwtNu}#)
      (let ((#{tmp -ANAU$bmvAmthP7L7xwtNw}#
              ($sc-dispatch
                #{x -ANAU$bmvAmthP7L7xwtNu}#
                '(_ (any . any) any . each-any))))
        (if #{tmp -ANAU$bmvAmthP7L7xwtNw}#
          (@apply
            (lambda (#{id -ANAU$bmvAmthP7L7xwtN0}#
                     #{args -ANAU$bmvAmthP7L7xwtN1}#
                     #{b0 -ANAU$bmvAmthP7L7xwtN2}#
                     #{b1 -ANAU$bmvAmthP7L7xwtN3}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("1h3" "1h4" "1h5" "1h6"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("1h2")))
                       (hygiene guile))
                    #{id -ANAU$bmvAmthP7L7xwtN0}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("1h3" "1h4" "1h5" "1h6"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("1h2")))
                             (hygiene guile))
                          (cons #{args -ANAU$bmvAmthP7L7xwtN1}#
                                (cons #{b0 -ANAU$bmvAmthP7L7xwtN2}#
                                      #{b1 -ANAU$bmvAmthP7L7xwtN3}#)))))
            #{tmp -ANAU$bmvAmthP7L7xwtNw}#)
          (let ((#{tmp -ANAU$bmvAmthP7L7xwtN4}#
                  ($sc-dispatch
                    #{x -ANAU$bmvAmthP7L7xwtNu}#
                    '(_ any any))))
            (if (if #{tmp -ANAU$bmvAmthP7L7xwtN4}#
                  (@apply
                    (lambda (#{id -ANAU$bmvAmthP7L7xwtN8}#
                             #{val -ANAU$bmvAmthP7L7xwtN9}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("1h7" "1h8"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1h2")))
                           (hygiene guile))))
                    #{tmp -ANAU$bmvAmthP7L7xwtN4}#)
                  #f)
              (@apply
                (lambda (#{id -ANAU$bmvAmthP7L7xwtN$}#
                         #{val -ANAU$bmvAmthP7L7xwtN@}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("1h9" "1ha"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1h2")))
                           (hygiene guile))
                        #{id -ANAU$bmvAmthP7L7xwtN$}#
                        #{val -ANAU$bmvAmthP7L7xwtN@}#))
                #{tmp -ANAU$bmvAmthP7L7xwtN4}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x -ANAU$bmvAmthP7L7xwtNu}#))))))))

